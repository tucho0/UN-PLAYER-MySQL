/// 				INCLUDES
#include <a_samp>
#include <streamer>
#include <a_mysql>
#include <a_http>
#include <audio>

/// 				DEFINE
#define LOGO_UNPLAYER						"{FFFFFF}Bienvenido a la comunidad de {00A5FF}UN {2E6140}P{178527}layer{242F61}!"
#define URL_WEB								"~w~www.~b~un~g~player~w~.com"
#define URL_WEB_SHADOW						URL_WEB
#define WEBPAGE 							"www.empty.com"
#define	GAMEMODE_VERSION					"RolePlay | 0.3.7"
#define PASSWORD_EMAIL                      "SetPassword"

#define COLOR_TITULO_DIALOGS				"006CAA"
#define COLOR_TEXTO_DIALOGS					"F0F0F0"
#define COLOR_CREMA							"E6E6E6"
#define COLOR_AZUL							"00A5FF"
#define COLOR_VERDE							"00F50A"
#define COLOR_AMARILLO						"F5FF00"
#define COLOR_ROJO							"F50000"
#define COLOR_ROSA							"BE00FF"
#define COLOR_AZUL_OSCURO					"0037FF"
#define COLOR_TITULO_DE_AYUDA				0x778899FF
#define COLOR_OOC_CHANNEL					0xFFA000FF
#define LOCK_FACCION_CAR                    true
#define DEFAULT_AUDIO_VOLUMEN               50
#define MAX_INTERIORS                       20
#define COLOR_DUDAS                     	0x93A6FFFF
#define COLOR_CHEATS_REPORTES				0xFF4600FF
#define COLOR_RADIO							0x0069FFFF
#define COLOR_DE_TRANSMISION                0x00FFB4FF
#define COLOR_DE_NARRACION 	                0xFF8200FF
#define COLOR_FAMILY						0x00EBFFFF
#define COLOR_3DLABEL_PISTAS				0xFFC800FF
#define COLOR_DM       						0xFF0055FF
#define COLOR_DM_TEAM  						0x0087FFFF
#define COLOR_OWNED_CHAT                    0x2587CEFF
#define COLOR_MENSAJES_DE_AVISOS 			0x8C8C8CFF
#define COLOR_MALETERO_ARMARIO_CAJA_FUERTE  0xC3FF00FF
#define	COLOR_KICK_JAIL_BAN                 0xFFBE00FF
#define COLOR_DE_WISPEO                     0xF5FF00FF
#define COLOR_INFO_MOVIL                    0xFFF000FF
#define COLOR_COLGAR_DESCOLGAR              0x828282FF
#define MAX_GUANTERA_GAVETA_SLOTS           8
#define VIDA_CRACK                          15
#define MAX_RADIO_STREAM                    300
#define MAX_RADIO_STREAM_MIN                150
#define MAX_RADIO_STREAM_MAP_ICON           600
#define WORLD_DEFAULT_INTERIOR              4
#define MAX_ALMACENES                       2
#define WORLD_NORMAL			            0
#define MAX_OBJECTS_PLAYERS                 9
#define TITULO_AYUDA "|»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»» Centro de Ayuda ««««««««««««««««««««««««««««««««««««««««««««««««|"
#define MAX_PLAYER_DATA           			510
#define MAX_HOUSE_DATA           			700
#define MAX_AGENDA_DATA                     1700
#define MAX_PLAYER_CONTACT                  50
#define MAX_AGENDA_NAME                     20
#define MAX_ROBOS_COUNT                     4
#define INFINITY_HEALTH 					(Float:0x7F800000)
#define MAX_FACCION_NAME       				30
#define MAX_FACCION_COUNT      				25
#define MAX_BUFFER_IP_ATTACK                500
#define MAX_FACCION_SLOT                    61
#define MAX_FACCION_RANGOS                  10
#define MAX_FACCION_SKIN                    15
#define MAX_TIME_VEHICLE_HIDDEN             1200000
#define MAX_TEXT_CHAT                       150
#define NAME_TAG_DISTANCE_DEFAULT			15.0
#define VELOCITY_DOORS_TIME                 30
#define VELOCITY_DOORS_PORCENT              2
#define VELOCITY_PEAJE_TIME                 30
#define VELOCITY_PEAJE_PORCENT              2
#define MAX_VEHICLE_COUNT                   700
#define MAX_GARAGES_DESING                  5
#define MAX_VEHICLE_SLOT                    64
#define RACE_STATE_ESPERANDO                1
#define RACE_STATE_CONTEO                   2
#define RACE_STATE_COMPITIENDO              3
#define MAX_ACCOUNT_BANK_SLOT               66
#define MAX_VEHICLE_TIME                    168
#define MAX_TELES_COUNT						300
#define MAX_GAS_VEHICLE						131 // + 488
#define MAX_DAMAGE_VEHICLE  				107 // + 512
#define MAX_OIL_VEHICLE  					113 // + 506
#define MAX_CANSANSIO						54 	// + 550
#define MAX_BIZZ_COUNT                      100
#define MAX_BIZZ_SLOTS                      19
#define MAX_BIZZ_TYPE_COUNT                 50
#define TYPE_NADA	                    	0
#define TYPE_MALETIN                   		1
#define TYPE_GAFAS                          2
#define TYPE_PELO                           3
#define TYPE_BOINA                          4
#define TYPE_GORRAS                         5
#define TYPE_RELOJES                        6
#define TYPE_CASCO                          7
#define TYPE_TASER                          8
#define TYPE_BANDANA                        9
#define MAX_BIIZ_NAME   	  				35
#define MAX_GASOLINERAS_COUNT               50
#define MAX_CAJEROS_COUNT                   20
#define MAX_HOUSE_TYPE_COUNT                40
#define MAX_GARAGE_TYPE_COUNT               40
#define MAX_HOUSE_COUNT	    	           	400
#define MAX_HOUSE_SLOT                      78
#define MAX_HOUSE_FRIENDS                   5
#define MAX_GARAGE_FOR_HOUSE                5
#define MAX_DOORS_COUNT                     50
#define MAX_OBJECTS_VALLAS_CONOS_PINCHOS    100
#define MAX_PEAJES_COUNT                    20
#define MAX_JOB                             3
#define MAX_TEXT_DRAW_INFO_COUNT            50
#define MAX_TAXIS_COUNT                     10
#define MAX_OBJECT_MAPPING_COUNT            50
#define MAX_TRAINS                          5
#define MAX_NOTES_COUNT                     10
#define MAX_TEXT_NOTE                      200
#define PLAYERS_COLOR   	  				0xFEFEFEFF
#define SOUND_TUNNING                       1133
#define MAX_TEXT_SMS	                    100
#define	MAX_SMS_COUNT                       15
#define	MAX_COUNT_PISTAS                    20
#define MAX_COUNT_PISTAS_CAMERAS            20
#define	MAX_COUNT_PISTAS_POS                80
#define	MAX_COUNT_PISTAS_POS_PLAYERS        40
#define	MAX_COUNT_PISTAS_TOP                10
#define MAX_TEXT_DESCRIPTION                130
#define STANDARD_SPEED_DOORS                2
#define STANDARD_SPEED_BARRAS               0.05
#define STANDARD_SPEED_DOORS_GRUAS          0.5
#define STATE_RACE_EXIT_DISCONNECT          0
#define STATE_RACE_EXIT_EXPULSADO           1
#define STATE_RACE_EXIT_FINISH              2
#define STATE_RACE_EXIT_DEATH               3
#define TIME_CHECK_GAS_VEHICLES             15000
#define STATE_RACE_EXIT_EXPLOTO             4
#define STATE_RACE_EXIT_SALIDA              5
#define SOUND_START_RACE					1056
#define SOUND_VUELTA_VRACE					1057
#define SECONDS_TAXI                        3
#define SOUND_END_RACE						1133
#define MAX_SOUNDS_FOR_PLAYERS              5
#define MAX_CALL_POLICE_COUNT               30
#define MAX_CAMERAS_COUNT                   50
#define CONO                       			1238
#define VALLA                          		3091 // 1459
#define PINCHO                  			2899
#define SOUND_ALARM_CAR						1190
#define MAX_REFRIGERADOR_SLOTS_COUNT	    10
#define MAX_ARTICULOS_COUNT				    50
#define MAX_INCENDIOS                       10
#define FIRE_OBJECT                         18691
#define LINE_FIRE                           2
#define MAX_GARAGES_EX_COUNT                200
#define MAX_BOMBAS_COUNT	                30
#define BOMBA_TYPE_NONE						0
#define BOMBA_TYPE_FOOT      				1
#define BOMBA_TYPE_CAR						2
//#define MAX_BOMBA_TIME_INACTIVE             1800000
#define MAX_COUNT_CARTERA                   6
#define MAX_COUNT_CHEQUES                   15

#define CARTERA_TYPE_NADA                   0
#define CARTERA_TYPE_CHEQUE                 1
#define CARTERA_TYPE_TICKET                 2
#define CARTERA_TYPE_CONDONES               3

#define A_NADA	                            0
#define A_CERVEZA                           1
#define A_VODKA                             2
#define A_REFRESCO                          3
#define A_POLLO                             4
#define A_POLLO_C                           5
#define A_PAPAS                             6
#define A_PAPAS_C                           7
#define A_ARROZ                             8
#define A_ARROZ_C                           9

#define BICI         	0
#define COCHE           1
#define CAMION          2
#define MOTO            3
#define VUELO           4
#define BOTE            5
#define TREN            6

#define CIVIL			0
#define GOBIERNO  		1
#define LICENCIEROS		2
#define TRAFICANTES     3
#define LCN             4
#define YKZ             5
#define TAXI            6
#define SFPD            7
#define NFS             8
#define SFMD            9
#define CNN             10
#define ADP             11
#define CAMIONEROS      12
#define TALLER_SF       13
#define LSPD            14
#define CONTRABANDISTAS 15
#define SICARIOS        16
#define TALLER_LS       17
#define COLTS	        18
#define AK		        19
#define VELTRAN         20
#define HEORS           21
#define LSMD            22
#define MAX_FACCION    LSMD

#define COLTS_R         0
#define AK_R            1
#define VELTRAN_R       2
#define HEORS_R         3

#define TIME_R_READY    10800

#define NINGUNO         0
#define PESCA           1
#define VENDEDOR_MOVIL  2

/////////////////// END DEFINES ///////////////////

/// 				FORWARDS
forward MySQLConnect();
forward LoadLastOptionsServer(); // LOAD SPECIAL OPTION SERVER
forward DataUserClean(playerid);
forward DataUserLoad(playerid);
forward DataUserSave(playerid);
forward LoadDataFaccion(faccionid);
forward SaveDataFaccion(faccionid);
forward GetSpawnInfo(playerid);
forward GetPlayerStats(playerid, playeridshow);
forward SetSpawnInfoEx(playerid);
forward SendInfoMessage(playerid, type, optional[], message[]);
forward Acciones(playerid, type, text[]);
forward SendChatStream(playerid, text[]);
forward SendChatStreamNormal(playerid, text[], type[]);
forward SendChatStreamIdioma(playerid, text[], idiomaid);
forward SendChatStreamAnonymous(text[], WorldStream, Float:X, Float:Y, Float:Z);
forward SendChatStreamAnonymousPlayerid(playerid, text[], WorldStream, Float:X, Float:Y, Float:Z);
forward SendChatStreamGritar(playerid, text[]);
forward IsPlayerNear(myplayerid, playerid, iderror1[], iderror2[], iderror3[], stringerror1[], stringerror2[], stringerror3[]);
forward GetMaxFaccionRango(faccionid);
forward GetMaxFaccionRangoSkin(faccionid, rangoid);
forward SendMessageFamily(playerid, text[]);
forward SendMessageDM(playerid, text[]);
forward SendMessageRadio(playerid, frecuencia, text[]);
forward Comandos_Admin(Comando, playerid, playeridAC, LV, Cantidad_o_Tipo, String[]);
forward MostrarHora(Accion ,playerid);
forward SetPlayerJail(playerid);
forward SetTimerGlobal();
forward SetPlayerSelectedTypeSkin(playerid, option);
forward SetPlayerSelectedSkin(playerid);
forward SetPlayerRowSkin(playerid, response);
forward IsPlayerInNearVehicle(playerid);
forward IsPlayerInNearVehicleEx(playerid);
forward LoadDataVehicle(vehicleid, dir[], type);
forward SaveDataVehicle(vehicleid, dir[]);
forward AparcarVehicle(playerid, vehicleid);
forward LockVehicle(playerid);
forward LockMaletero(playerid);
forward LockAlarma(playerid);
forward IsVehicleMyVehicle(playerid, vehicleid);
forward IsVehicleMyFaccion(playerid, vehicleid);
forward SetPlayerLockAllVehicles(playerid);
forward IsFixBikeEnter(playerid, vehicleid);
forward LoadCarsFaccion();
forward LoadCarsPublic();
forward DataLoadBizz(bizzid);
forward DataSaveBizz(bizzid, bool:update);
forward LoadPriceAndNameVehicles();
forward IsMaleteroOpen(playerid);
forward RemovePlayerWeapond(playerid, weaponsid);
forward LoadStaticObjects();
forward LoadTelesPublics();
forward SetStyleTextDrawTeles(textdrawid, text[]);
forward LoadDataBizzType();
forward SetFunctionsForBizz(playerid, bizzid);
forward LoadCajeros();
forward IsPlayerNearCajero(playerid);
forward IsMyBizz(playerid, bizzid, msg);
forward IsMyExtorsion(playerid, bizzid);
forward ActTextDrawBizz(bizzid);
forward LoadMenuStatic();
forward CleanDataDeath(playerid);
forward SetMoneyExtorsion(bizzid, money);
forward PlayStreamSound(Float:x, Float:y, Float:z, Float:Ratio, soundid);
forward PlayPlayerStreamSound(playerid, soundid);
forward LoadAllAnims();
forward ApplyPlayerAnimCustom(playerid, animlib[], animid[], loop);
forward LoadTypeObjectsBolsillos();
forward IsNotFullBolsillo(playeridError, playerid, error[]);
forward IsObjectInBolsillo(playerid, objectid);
forward RemoveObjectBolsillo(playerid, objectid);
forward AddObjectBolsillo(playerid, objectid);
forward GetNearFaccion(playerid);
forward SetPlayerColgar(playerid);
forward SetPlayerDescolgar(playerid);
forward ShowBolsillosToPlayer(playerid, playeridshow);
forward ShowCarteraToPlayer(playerid, playeridshow);
forward ShowBolsaToPlayer(playerid, playeridshow);
forward ShowPasaporteToPlayer(playerid, playeridshow);
forward ShowPapelesToPlayer(playerid, playeridshow);
forward ShowLicenciasToPlayer(playerid, playeridshow);
forward ShowIdiomasToPlayer(playerid, playeridshow);
forward CreateTextDrawCansansio();
forward ShowTextDrawFijosVelocimentros(playerid);
forward HideTextDrawFijosVelocimentros(playerid);
forward CreateTextDrawFijosVelocimetros();
forward IntentarAccion(playerid, text[], rndNum);
forward UpdateTextDrawVehicle(playerid, vehicleid);
forward LoadGasolineras();
forward SaveGasolineras();
forward SetMenuTraficante(playerid);
forward GetMySecondNearVehicle(playerid);
forward GetMyNearGas(playerid);
forward LoadIconsPlayers();
forward RemoveDuenoOfVehicle(vehicleid, option);
forward RemoveDuenoOfHouse(houseid);
forward RemoveDuenoOfBizz(bizzid);
forward VerificarCochesVencidos();
forward LoadTypeJails();
forward GetPosSpace(text[], option);
forward LoadTypeHouse();
forward LoadGarageType();
forward LoadGarages();
forward LoadTextDrawEnfermedad();
forward ExistGarageInHouse(houseid);
forward LoadHouse(houseid);
forward SaveHouse(houseid, bool:update);
forward ActTextDrawHouse(houseid);
forward CheckIsPlayerRentAndRemove(playerid, houseid);
forward IsMyHouse(playerid, houseid);
forward UnBanUser(playerid_admin, playeridname[], option);
forward IsTunnigContinue(playerid);
forward IsPlayerInTaller(playerid);
forward IsPlayerInTallerEx(playerid);
forward IsPlayerInConcencionario(playerid);
forward IsPlayerInAlmacen(playerid, option);
forward IsPlayerNearAlmacen(playerid);
forward LoadPickupsAlmacenes();
forward LoadPickupsMisc();
forward SendAlertCallRequest(faccionid, text[]);
forward SendAlertCallRequestSAMD(type, text[], faccionid);
forward LoadDoors();
forward GetMyNearDoor(playerid, key, option);
forward LoadPointsExtraction();
forward CleanVCP();
forward AddVCP(playerid, objectid, Float:Xv, Float:Yv, Float:Zv, Float:ZZv);
forward RemoveVCP(objectid);
forward IsNearVCP(playerid);
forward SetPlayerTutorial(playerid, tutorialid);
forward LoadTexDrawsTutorial();
forward SetTextDrawTutorial(textdrawid, text[]);
forward EncenderVehicle(playerid);
forward ApagarVehicle(playerid);
forward LoadPeajes();
forward IsPlayerNearPeaje(playerid, option, price);
forward ClosedPeaje(peajeid);
forward ShowDialogAccount(playerid);
forward IsNotZero(playerid, number);
forward SetVehicleHidden(vehicleid);
forward SetVehicleShow(vehicleid);
forward RemoveVehicleHidden(vehicleid);
forward GetPlayerScoreEx(playerid);
forward GetPlayerScoreMax(playerid);
forward GetPlayerScoreMin(playerid);
forward CheckPlayersAFK();
forward LoadAgenda(playerid);
forward SaveAgenda(playerid);
forward CleanAgenda(playerid);
forward ShowHomeAgenda(playerid);
forward ShowContactosAgenda(playerid);
forward ShowAgregarAgenda(playerid, option);
forward ShowEliminarAgenda(playerid);
forward ShowContactosBloqueados(playerid);
forward ShowAgregarBloqueado(playerid);
forward ShowEliminarBloqueado(playerid);
forward AddContactToBlock(playerid, agendaid);
forward RemoveContactToBlock(playerid, agendaid);
forward AddNumberToAgenda(playerid, name[], number);
forward RemoveNumberToAgenda(playerid, agendaid);
forward IsNotPhoneInBlackList(playerid, number);
forward SetPlayerCall(playerid, numberphone);
forward IsPlayerInCall(playerid);
forward IsInAgendaNumber(playerid, number);
forward IsNotMax100(Float:number, option);
forward IsVehicleWithInterior(playerid);
forward RemoveRallaName(playerid);
forward SendMessageToCallCNN(playerid);
forward UpdateSpawnPlayer(playerid);
forward IsPlayerInPincho(playerid, pickupid);
forward IsVehicleNotBici(playerid, vehicleid);
forward IsValidName(name[]);
forward LoadDataPlayerEx(playername[]);
forward SetPlayerFaccion(playerid, cmdfaccion[]);
forward SetPlayerFaccionEx(playerid, command[]);
forward IsPlayerConnectedEx(playername[]);
forward LoadJobs();
forward LoadTextDrawInfo();
forward SetStyleTextDrawTextDrawInfo(textdrawid, text[]);
forward IsCheatMoney(playerid, lastmoney);
forward CheckWeapondCheat(playerid);
forward UpdateWeapon(playerid);
forward GivePlayerWeaponEx(playerid, weaponid, ammo);
forward GivePlayerWeaponReturn(playerid);
forward ResetPlayerWeaponsEx(playerid);
forward SetVehicleTaxi(vehicleid);
forward SetTaxiReadyTextDraw(taxiid, textdrawid);
forward UpdateTaximetroSeat(playerid);
forward IsVehicleTaxi(vehicleid);
forward IsReadyCallPublic(playerid);
forward ShowPlayerMenuSelectWalk(playerid);
forward ShowPlayerMenuSelectSprint(playerid);
forward ShowPlayerMenuSelectTalk(playerid);
forward IsNotFullMaterialsPlayer(playerid, newamount);
forward IsNotOneWeapon(weaponid);
forward SetVehicleAllVehicles();
forward CreateVehicleEx(model, Float:Xc, Float:Yc, Float:Zc, Float:ZZc, color1, color2, vehicleid);
forward SetPlateToCarFaccion(vehicleid, faccionid);
forward SetAlarmToVehicle(vehicleid);
forward RemoveAlarmToVehicle(vehicleid);
forward IsVehicleOff(vehicleid);
forward IsPlayerFoundWeapon(playerid, weaponid);
forward CheckVehicleGas();
forward SetBuyBares(playerid, option, IsBizz);
forward IsBizzBar(playerid, bizzid);
forward ShowDialogBar(playerid, listview);
forward PayCall(playerid);
forward SetGameTextMoneyMin(playerid, money);
forward SaveDatosPlayerDisconnect(playerid);
forward IsPlayerNotVehicleWeapondAction(playerid, playeridtwo);
forward GetOriginalHours(hour);
forward GetOriginalMinute(minute);
forward SetPlayerOrginalTime(playerid);
forward ShowHomeBanco(playerid);
forward ShowConsultarBanco(playerid);
forward ShowRetirarBanco(playerid);
forward ShowRetirarBancoFunction(playerid, option, amount);
forward ShowDepositarBanco(playerid);
forward ShowDepositarBancoFunction(playerid, option, amount);
forward encode_lights(light1, light2, light3, light4);
forward TimerIntermitentes(vehicleid);
forward OnMoveObjectMapping(playerid, objectid, key, option, Float:mappoint);
forward GetCountObjectMapping();
forward ShowHomeMapping(playerid);
forward ShowListObjectMapping(playerid);
forward ShowObjectOptionsMapping(playerid, objectid);
forward ShowCreateObjectMapping(playerid, model);
forward ShowRemoveAllMapping(playerid, IsMsg);
forward ShowAllMapping(playerid);
forward RemoveAllTagsMapping(playerid);
forward RemoveObjectMapping(playerid, objectid);
forward ShowDescriptionObjectMapping(playerid, objectid);
forward UpdateText3DMapping(objectid);
forward OpenProject(playerid, name[]);
forward SaveProject(playerid, name[], pass);
forward ShowStatsMapping(playerid);
forward SetPlayerHealthEx(playerid, Float:Health);
forward SetPlayerArmourEx(playerid, Float:Armour);
forward UpdateArmourAndArmour(playerid, Float:Health, Float:Armour);
forward FillVehicleGas(vehicleid);
forward IsValidWeapon(playerid, weaponid);
forward LoadCameras();
forward IsValidVehicle(playerid, vehiclemodel);
forward IsValidVehiclePaintJob(vehiclemodel);
forward ShowDialogAccountOptions(playerid);
forward IntermitenteIzquierdo(playerid);
forward IntermitenteDerecho(playerid);
forward IntermitenteEstacionamiento(playerid);
forward IntermitenteEncendido(playerid);
forward RemoveCall(callid, departament);
forward AddCall(number, name[], reason[], departament);
forward IsFoundCall(number, departament);
forward IsFoundCallSAMD(number, type, samdid);
forward ShowCallPolice(playerid);
forward ShowDetailsCall(playerid, callid);
forward ShowConnectedPolice(playerid);
forward ShowNamePolice(playerid);
forward ShowReasonPolice(playerid);
forward AddCallPublics(playerid, number, departament);
forward RemoveCallPublics(callid, departament);
forward ShowCallPublics(playerid);
forward GetNumberID(number);
forward UpdatePlayerVehicleStatus(vehicleid, Float:Healt);
forward ApplyPlayerAnimAccident(playerid);
forward ApplyPlayerAnimAccidentD(playerid);
forward ReturnPlayerNormalState(playerid);
forward IsOpenCloset(playerid, houseid);
forward IsOpenRefrigerador(playerid, houseid);
forward LoadPlayerSMS(playerid);
forward SavePlayerSMS(playerid);
forward AddSMS(playerid, number, text[]);
forward RemoveSMS(playerid, smsid);
forward ShowSMSToPlayer(playerid);
forward ShowSMSOptionsToPlayer(playerid, smsid);
forward ShowReadSMS(playerid, smsid);
forward ShowReplySMS(playerid, smsid);
forward ShowRemoveSMS(playerid, smsid);
forward SendSMS(playerid, number, text[]);
forward CleanSMS(playerid);
forward SendMessageDeathMatch(playerid);
forward SendMessageToPlayerDeathMatch(playerid, killerid, weaponid);
forward CreateDynamicObjectExULP(modelid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, worldid, interior, playerid, Float:distance);
forward IsVehicleOpen(playerid, vehicleid, ispassenger);
forward SetPlayerSleep(playerid);
forward ShowPlayerTextDrawCansansio(playerid);
forward CreateTextDrawGas();
forward CreateTextDrawDamage();
forward CreateTextDrawNumbers();
forward CreateTextDrawOil();
forward AbsVel(numberAscci);
forward ResetServer();
forward OnGameModeExitEx();
forward ConfirmDeletedAllSMS(playerid);
forward IsTunningForVehicle(modelid);
forward CleanTunningSlots(vehicleid);
forward SetLastSettingVehicle(vehicleid);
forward AddVehicleComponentEx(vehicleid, componentid);
forward RemoveVehicleComponentEx(vehicleid, componentid);
forward GetVehicleComponentInSlotEx(vehicleid, slotid);
forward GetMyNearCity(playerid);
forward SetVehicleToRespawnEx(vehicleid);
forward SetVehicleBugToRespawn(vehicleid);
forward ShowMenuDMWeapon(playerid);
forward Reverse(&bool:number);
forward ReverseEx(&number);
forward IsWeaponDmExist(weaponid);
forward UpdateTextDrawDM(teamid);
forward SetPlayerSpectateToPlayer(playerid, spectateplayerid);
forward RemoveSpectatePlayer(playerid);
forward CheckSpectToPlayer(playerid);
forward UpdateSpectatedPlayers(playerid, death, interiorid, world);
forward NextPlayerSpect(playerid);
forward LastPlayerSpect(playerid);
forward CreateDynamicMapIconULP(Float:x, Float:y, Float:z, type);
forward GetMyNextBizz();
forward GetMyNextHouse();
forward PlayerRestoreVarExitedVehicle(playerid);
forward IsPlayerOff(playerid);
forward LockTrain(vehicleid, LockV);
forward IsPlayerNearTram(playerid);
forward KickEx(playerid, option);
forward CreateGarage(playerid, houseid, desingid, TypeGarageEC);
forward GetMyNextGarage(houseid);
forward IsEmptyDesing();
forward CheckGarageRemove(houseid);
forward RemoveGarage(houseid, garageid);
forward RemoveAllGarage(houseid);
forward ShowGarages(playerid, houseid);
forward ShowDetailsGarage(playerid, houseid, garageid);
forward IsPlayerInGarageFun(playerid, &housesave, &garagesave, &locksave);
forward LinkVehicleToInteriorEx(vehicleid, interiorid);
forward SetVehicleVirtualWorldEx(vehicleid, worldid);
forward IsPlayerNearGarage(vehicleid, playerid);
forward IsPassager(vehicleid);
forward ExistGarageForHouse(houseid, garageid);
forward CheckAsignados(playerid);
forward AddAsignados(playerid, vehicleid);
forward RemoveAsignados(playerid, asignarid);
forward IsMyCarAsignados(playerid, vehicleid);
forward ShowAsignados(playerid, playeridshow);
forward ShowHouseFriends(playerid, houseid);
forward IsPlayerInHouseFriend(playerid, houseid);
forward RemovePlayerHouseFriend(houseid, housefriendid);
forward AddPlayerHouseFriend(playerid, houseid);
forward LoadTypeArticulosR();
forward AddArticuloBolsa(playerid, articuloid, cantidad);
forward RemoveArticuloBolsa(playerid, bolsaid);
forward IsArticuloInBolsa(playerid, articuloid);
forward CleanArticulosBolsa(playerid);
forward AddArticleRefrigeradorFun(playerid, houseid, bolsaid);
forward AddArticleRefrigeradorCocinar(playerid, houseid, lastrefrigeradorid, articleid);
forward RemoveArticleRefrigeradorFun(playerid, houseid, refrigeradorid);
forward GiveArticlePlayerToPlayer(playerid, playeridtogive, bolsaid);
forward DropArticlePlayerToPlayer(playerid, bolsaid);
forward IsNotFullBolsa(playerid, bolsaid);
forward EatArticle(playerid, bolsaid);
forward EatArticleRefrigerador(playerid, houseid, refrigeradorid);
forward UseAritcle(playerid, articleid);
forward Cocinar(playerid, houseid, refrigeradorid);
forward LoadTelesLock();
forward SaveTelesLock();
forward LoadGaragesExLock();
forward SaveGaragesExLock();
forward LoadIncendios();
forward SaveIncendios();
forward CreateFire(houseid, fireid);
forward DestroyFire(fireid);
forward IsPlayerNearFire(playerid);
forward DestroyParticleFire(fireid);
forward GetFireNext();
forward ShowIncendios(playerid);
forward HideTextDrawsTelesAndInfo(playerid);
forward CheckFire(playerid);
forward RandomFire();
forward MsgCheatsReportsToAdmins(text[]);
forward MsgCheatsReportsToAdminsEx(text[], level);
forward MsgAdminUseCommands(level, playerid, commands[]);
forward MsgKBJWReportsToAdmins(playerid, text[]);
forward ShowConnectedSAMD(playerid);
forward ShowConnectedRequest(playerid);
forward RemoveCallSAMD(callid, samdid);
forward AddCallSAMD(departament, city, number, type);
forward ShowCallSAMD(playerid);
forward LoadGaragesEx();
forward IsPlayerNearGarageEx(vehicleid, playerid);
forward UpdateLockDoorForPlayer(pickupid, lock, pickup2);
forward ShowDialogBarra(playerid, listview);
forward IsBizzBarra(playerid);
forward ConvertMap(map[], option);
forward GetTrainByVehicleID(vehicleid);
forward GetVagonByVehicleID(vehicleid);
forward IsPlayerInTrain(playerid);
forward GetVagonByVagonID(vehicleid, vagonid);
forward GetHouseidIdByWorld(world);
forward GetGarageIdByWorld(houseid, world);
forward IsPointFromPoint(Float:RadioE, Float:XpointOne, Float:YpointOne, Float:ZpointOne, Float:XpointTwo, Float:YpointTwo, Float:ZpointTwo);
forward Float:GetPointFromPoint(Float:XpointOne, Float:YpointOne, Float:ZpointOne, Float:XpointTwo, Float:YpointTwo, Float:ZpointTwo);
forward IsVehicleInGarageEx(vehicleid);
forward AddVehicleCommponentTaller(vehicleid, componentid);
forward AddBomba(playerid, type, vehicleid, Float:Xbom, Float:Ybom, Float:Zbom, objectid);
forward RemoveBomba(bombaid);
forward IsPlayerNearBomba(playerid, Float:Range, option);
forward IsVehicleHaveBomba(vehicleid);
forward DesactivarBomba(playerid, bombaid);
forward ActivarBomba(bombaid, count);
forward ShowBombas(playerid);
forward SaveBombas();
forward LoadBombas();
forward IsPlayerNearBombaEx(playerid, bombaid, Float:Range);
forward SaveVCP();
forward LoadVCP();
forward IsWorldOfGarage(world);
forward RemoveAllHouseFriend(houseid);
forward GivePlayerMoneyEx(playerid, money);
forward ShowServerStats(playerid);
forward Text:TextDrawCreateEx(Float:Xt, Float:Yt, text[]);
forward ExistPlate(plate);
forward ChangeVehicle(playerid, vehicleid, modelid, worldid, interiorid);
forward ShowChangePlate(playerid);
forward ChangeVehiclePlate(vehicleid, newplate);
forward TogglePlayerControllableEx(playerid, toogle);
forward RemoveObjectToCartera(playerid, carteraid);
forward AddObjectToCartera(playerid, objectid, carteraC, carteraT, carteraI);
forward IsPlayerHaveCondones(playerid);
forward IsNotFullCartera(playeridError, playerid, error[]);
forward CreateAccountBank(playerid);
forward LoadAccountBanking(playerid);
forward SaveAccountBanking(playerid);
forward strvalEx(string[]);
forward IsPlayerAccountBankConnected(accountcheck);
forward PayCheckToPlayer(playerid, carteraid);
forward RemoveCheque(playerid, chequeid);
forward ShowVerCheques(playerid);
forward ShowManejarCuentas(playerid);
forward CrearCheque(playerid, giveplayerid, type, amount, chequeid);
forward IsNotChequesFull(playerid);
forward CleanPlayerAccountBank(playerid);
forward ShowPayCheque(playerid);
forward TransferirMoney(playerid, account, amount);
forward ShowBankConfiguration(playerid);
forward ShowBankTransferencia(playerid);
forward ShowBankTransferenciaResumen(playerid);
forward ShowBankTransferenciaCantidad(playerid);
forward AddPlayerToDM(playerid, teamid);
forward RemovePlayerToDM(playerid);
forward IsVehicleExplotion(playerid, vehicleid, Float:damage, seat);
forward IsVehicleBug(vehicleid, SpawnBug);
forward SetCameraLogin(playerid, nextcamera, avanze);
forward LoadCamerasLogin();
forward IsAlarmaBug(vehicleid);
forward SetCameraPresent(playerid, point, Float:Porcent, Float:CameraX, Float:CameraY, Float:CameraZ, min, max);
forward RecoveryEmailPlayer(playerid, response_code, data[]);
forward IsValidEmail(playerid, email[]);
forward ShowPlayerLogin(playerid, option);
forward ShowPlayerRegister(playerid, option);
forward ShowPlayerVerifiquedEmail(playerid, option);
forward SendRequestPasswordRecovery(playerid);
forward ShowPlayerDialogEx(playerid, dialogid, style, caption[], info[], button1[], button2[]);
forward ShowPlayerEmailChange(playerid, option);
forward ValidingEmail(playerid, response_code, data[]);
forward IsValidStringServer(playerid, string[]);
forward IsValidStringServerOther(playerid, string[]);
forward MoveDoorDynamicOne(doorid, Float:Progress);
forward MoveDoorDynamicTwo(doorid, Float:Progress);
forward MovePeajeDynamicOne(peajeid, Float:Progress);
forward MovePeajeDynamicTwo(peajeid, Float:Progress);
forward UpdateTextEnfermedad(playerid);
forward ChangeEnfermedad(playerid, newenfermedad);
forward RemovePlayerFromVehicleEx(playerid, seat, time);
forward OnPlayerExitVehicleEx(playerid, vehicleid, ispassenger);
forward OnPlayerEnterVehicleEx(playerid, vehicleid, ispassenger);
forward LoadDataPistas();
forward SaveDataPistas();
forward ValidingPista(pistaid, option);
forward CreateObjectEx(modelid, Float:X, Float:Y, Float:Z, Float:rX, Float:rY, Float:rZ, Float:DrawDistance);
forward CleanPista(pistaid);
forward CleanPistaPos(pistaid, posid);
forward CleanPistaPosPlayers(pistaid, posplayersid);
forward ShowEditorPistas(playerid);
forward GetMaxCountPistas();
forward GetMaxCountPistasPlayers(pistaid);
forward GetMaxCountPistasCarPointsExit(pistaid);
forward GetMaxCountPistasCamPoints(pistaid);
forward GetMaxCountPistasPos(pistaid);
forward GetNextPista();
forward ShowNewPista(playerid);
forward ShowListPistas(playerid);
forward ShowListPistasOptions(playerid, pistaid);
forward PistaExist(playerid, pistaid);
forward ShowPistaChangeName(playerid, pistaid);
forward ShowPistaShowCheckPoints(playerid, pistaid);
forward ShowPistaShowCheckPointsOptions(playerid, pistaid, posid);
forward ShowPistaShowPosPlayers(playerid, pistaid);
forward ShowPistaSelectCheckPoint(playerid, pistaid);
forward ShowPistaShowPosPlayersOptions(playerid, pistaid, posid);
forward ShowPistaValidar(playerid, pistaid);
forward ShowPistaRemove(playerid, pistaid);
forward CreatePistaPlayers(playerid, pistaid, posid);
forward CreatePistaPos(playerid, pistaid, posid);
forward CreatePistaCameras(playerid, pistaid, posid);
forward ShowOrHideTagPistaPlayers(pistaid);
forward ShowOrHideTagPistaPos(pistaid);
forward UpdateTagPistaPlayers(pistaid, posid);
forward UpdateTagPistaPos(pistaid, posid);
forward RemoveTagPistaPos(pistaid, posid);
forward RemoveTagPistaPlayers(pistaid, posid);
forward ShowOrHideTagPistaCarPointsExit(pistaid);
forward ShowOrHideTagPistaCam(pistaid);
forward UpdateTagPistaCameras(pistaid, posid);
forward RemoveTagPistaCameras(pistaid, posid);
forward ShowPistaShowCarPointsExit(playerid, pistaid);
forward ShowPistaShowCam(playerid, pistaid);
forward ShowPistaCarPointsExitOptions(playerid, pistaid, posid);
forward UpdateTagPistaCarPointsExit(pistaid, posid);
forward RemoveTagPistaCarPointsExit(pistaid, posid);
forward CleanPistaCarPointsExit(pistaid, posplayersid);
forward CleanPistaCameras(pistaid, posplayersid);
forward CreatePistaCarPoints(playerid, pistaid, posid);
forward CleanPistaRecords(pistaid, posid);
forward ShowPistas(playerid);
forward ShowPistasOptions(playerid, pistaid);
forward ShowPistasSelectVueltas(playerid, pistaid);
forward ShowPistasSelectVelocidad(playerid, pistaid, posid);
forward ShowPistasSelectCompetidores(playerid, pistaid);
forward ShowPistasSelectConteo(playerid, pistaid);
forward ShowPistasSelectTiempoAntes(playerid, pistaid);
forward ShowPistasUnirJugador(playerid, pistaid);
forward ShowPistasVerJugadores(playerid, pistaid);
forward ShowPistasComenzar(playerid, pistaid);
forward ShowPistasCochesPermitidos(playerid, pistaid);
forward CleanPistaForRace(pistaid);
forward RemovePlayerToRace(playerid, option, optiontwo, reason);
forward AddPlayerToRace(playerid, pistaid, option);
forward ConteoRace(pistaid, count);
forward StartRace(pistaid, option);
forward CancelRace(pistaid);
forward ShowPistasVerJugadoresOptions(playerid, pistaid, posid);
forward GetNextCheckPoint(pistaid, checkpointid, option);
forward ShowPistaPlayerPublics(playerid);
forward GetMaxPlayerCurrentPista(pistaid);
forward GetValidCheckPoint(pistaid, checkpointid, option);
forward SendMessageToRaceChat(raceid, text[], option);
forward IsVehiceInRace(vehicleid);
forward SetPlayerNextCheckPointRace(playerid);
forward GetMaxPistaRace(raceid);
forward GetMinPistaRace(raceid);
forward ShowPistasSelectRadio(playerid, pistaid);
forward ShowStatsRace(raceid);
forward AddPlayerToRecordsLive(raceid, posid);
forward GetTimeBySeconds(seconds, &hour, &minute, &second);
forward GetVehicleVelocityEx(vehicleid);
forward UpdateGasAndOil(vehicleid);
forward UpdateDamage(playerid, &Float:newdamage);
forward UpdateTextDrawRacePositions(pistaid);
forward Float:GetPlayerProgressRace(playerid, &progress);
forward GetMaxCheckPointCurrentPista(pistaid, countvuelta, checkpointcount);
forward ComparePlayersRaceProgress(progress1, progress2, Float:Distance1, Float:Distance2);
forward ForcePutPlayerInVehicle(playerid, vehicleid, seat);
forward ShowPistaCamOptions(playerid, pistaid, posid);
forward SetCameraPresentRace(playerid, raceid, point, Float:Porcent, Float:CameraX, Float:CameraY, Float:CameraZ);
forward IsPlayerNearGarageLC(playerid, &housesave, &locksave);
forward DetectSpam(playerid, text[]);
forward ShowHomeAgendaOptions(playerid, agendaid);
forward ShowBuscarAgenda(playerid);
forward ShowBuscarResultAgenda(playerid, text[]);
forward ShowSendSMSAgenda(playerid, agendaid);
forward GetDataPlayersInt(playerid, data[], &savedata, &lastpos, &afterpos);
forward GetDataPlayersFloat(playerid, data[], &Float:savedata, &lastpos, &afterpos);
forward UpdatePlayerDescrription(playerid);
forward AddPlayerDescription(playerid, option);
forward RemovePlayerDescription(playerid, option, optiontwo);
forward ShowMenuDescription(playerid);
forward ShowMenuDescriptionChange(playerid);
forward ShowMenuDescriptionChangePer(playerid);
forward SetPlayerVirtualWorldEx(playerid, wolrdid);
forward ShowMenuDescriptionChangeText(playerid);
forward ShowMenuDescriptionChangeColors(playerid);
forward ShowMenuDescriptionChangeText(playerid);
forward Delete3DTextLabelEx(playerid, Text3D:id);
forward SetVehicleToRespawnExTwo(vehicleid);
forward PlayAudioPlayerHouse(playerid);
forward StopAudioPlayer(playerid, &handle);
forward ShowStations(playerid, selected, option);
forward OnPlayerIsConnectedToAudio(playerid);
forward ChangePasswordUser(playerid_admin, playeridname[], newpassword[]);
forward BuyPhone24_7(playerid);
forward CheckNumberAvalible(number);
forward BuyPhoneNow(playerid, number);
forward AreAdminsOnline();
forward ShowDudasDialog(playerid);
//forward getdateEx(&ano, &mes, &dia);
forward IsPlayerInGarageEx(playerid);
forward LoadRobosInfo();
forward AddRobo(roboid, bizzid);
forward CancelRobo(roboid);
forward SendMessageRobosFaccion(faccionid, text[]);
forward	GetMaxPlayersByFaccion(faccionid);
forward	SendAvisoRobo(roboid);
forward	RobarConteo(roboid);
forward	IsBizzOnRobo(playerid, bizzid);
forward ShowAlarmas(playerid);
forward SendMessageRadioGeneral(playerid, text[]);
forward SendMessageRadioGeneralSAMD(playerid, text[]);
forward IsGarageToHouse(playerid, pickupid);
forward IsDoorInsideBizz(pickupid);
forward IsValidSeatTaxi(seatid);
forward SetPlayerTaxi(playerid, taxiid, seat);
forward CheckValidPlayerToTaxi(playerid, taxiid);
forward PayTaxi(playerid, option);
forward CalcularTaxiMoney(playerid);
forward SetVehicleHealthEx(vehicleid, Float:health);
forward OnPlayerExitHouse(playerid);
forward OnPlayerEnterInHouse(playerid);
forward ChangeMusicOnHouse(houseid);
forward StopMusicOnHouse(houseid);
forward StopMusicOnVehicle(vehicleid);
forward ChangeHouseOrOther(playerid, newhouse);
forward ShowVolumenHouse(playerid);
forward ShowVolumenVehicle(playerid);
forward ChangeVolumenPlayer(playerid, handle, volumen);
forward ChangeVolumenOnHouse(houseid);
forward ChangeVolumenOnVehicle(vehicleid);
forward ChangeMusicOnVehicle(vehicleid);
forward PlayAudioPlayerVehicle(playerid, vehicleid);
forward ShowEcualizadorVehicle(playerid);
forward ShowEcualizadorHouse(playerid);
forward PlayAllEcualizerForHouse(playerid);
forward PlayAllEcualizerForVehicle(playerid);
forward Audio_RemoveAddFXForHouse(houseid, type, addOrRemove);
forward Audio_RemoveAddFXForVehicle(vehicleid, type, addOrRemove);
forward RemoveBuildingForPlayerEx(playerid);
forward IsPlayerNotFullObjects(playerid, msg);
forward ShowLockTextDraws(vehicleid, last);
forward HaveObjectPlayer(playerid, objectid);
forward HaveObjectByTypeAndShow(playerid, type);
forward ReturnObjetsToPlayer(playerid);
forward SetObjectHoldToPlayer(playerid, objectid, index);
forward GetTypeObject(objectid);
forward GetTypeObjectEx(objectid);
forward AddObjectHoldToPlayer(playerid, objectid);
forward RemoveObjectHoldToPlayer(playerid, objectid, index);
forward SpawnPlayerEx(playerid);
forward SetPlayerSkinEx(playerid, skinid);
forward IsNotOcupedObject(playerid, objectid);
forward IsAllowItSkinForHair(skinid);
forward NextHairSelect(playerid);
forward SetPlayerSelectedTypeHair(playerid);
forward GetObjectByType(playerid, type);
forward ShowObjectos(playerid);
forward ShowObjetosOpciones(playerid);
forward ShowDarObjeto(playerid);
forward ShowDejarObjeto(playerid);
forward ShowDejarObjetoInput(playerid);
forward ShowAndHideSirena(playerid, vehicleid);
forward IsAllowItSkinForBoina(skinid);
forward IsAllowItSkinForCasco(skinid);
forward AllowForItSkin(skinid, type);
forward IsAllowItSkinForRelojes(skinid);
forward IsAllowItSkinForGorras(skinid);
forward IsAllowItSkinForGafas(skinid);
forward LockGuantera(playerid);
forward IsPlayerInsideVehicle(playerid);
forward IsOpenGaveta(playerid, houseid);
forward IsGuanteraOpen(playerid);
// DDoS SYSTEM //
forward CheckFilesDDoS();
forward GetMaxCountForIP(ip[]);
forward AddIpToList(ip[], port);
forward IsSpecificIPOnTheList(ip[], port);
forward ClearIPFromList(ip[]);
forward IsIpBanned(ip[]);
forward IsPlayerIpConnected(ip[]);
forward SetPlayerInteriorEx(playerid, newinterior);
forward GetPlayerInteriorEx(playerid);
forward SaveIpUser(playerid, option);
forward CleanNotes(playerid);
forward SaveNotes(playerid);
forward LoadNotes(playerid);
forward AddNote(playerid, note[]);
forward RemoveNote(playerid, noteid);
// END DDoS SYSTEM
/////////////////// END FORWARDS ///////////////////

/// 				ENUMS
enum NotesEnum
{
	Note[MAX_TEXT_NOTE],
	DateGeTime,
	Readed,
	DDay,
	DMonth,
	DYear,
	THour,
	TMinute,
	TSecond
}
enum LastIPAttackInfo
{
	aIP[20],
	aPort
}
enum RobosInfoEnum
{
	FaccionIDR,
	TimeLast,
	BizzIDR,
	RoboState,
	City,
	ConteoR,
	TimerID
}
enum CamerasLoginEnum
{
	Float:PlayerPosLogin[3],
	Float:CamerasPosLogin[3],
	Float:CamerasLookLogin[3]
}
enum AccountBankEnum
{
	Owner[MAX_PLAYER_NAME],
	Balance,
	LockIn,
	LockOut
}
enum ChequesEnum
{
	UniqueID,
	Type,
	NombreCh[MAX_PLAYER_NAME],
	Ammount
}
enum BombasEnum
{
	TypeBomba,
	ObjectID,
	ObjectIDO,
	Float:PosX,
	Float:PosY,
	Float:PosZ,
	TimerID
}
enum PistasEnum
{
	NamePista[35],
	Valid,
	ValidR,
	ShowTagPos,
	ShowTagPlayers,
	ShowTagCarPointsExit,
	ShowTagCamPoints,
	Lock,
	Interior,
	World,
	Used,
	ConteoPlayers,
	TimeStart,
	MaxCheckPointsTotal,
	IsCameras,
	Repair,


/* Configuración de la Carrera */
	Vueltas,
	Competidores,
	SaveRecord,
	ConteoR,
	TiempoAntes,
	Tipo,
	EstadoR,
	CochesP,
	AlReves,
	CheckPointFinal,
	RaceTimer,
	MinPP,
	MaxPP,
	MaxCameras,
	Float:Radio
}
enum PistasPosEnum
{
	Valid,
	Float:Xpos,
	Float:Ypos,
	Float:Zpos,
	Text3D:Text3DPista,
	Text3DPistaB
}
enum PistasPosPlayersEnum
{
	Valid,
	Float:Xpos,
	Float:Ypos,
	Float:Zpos,
	Float:ZZpos,
	Text3D:Text3DPista,
	Text3DPistaB,

	/* Configuración de la Carrera */
	ExitReason,
	VehicleIDR,
	PlayerIDR,
	VueltaR,
	LastCheckPoint,
	TimeFinish,
	PosFinish,

	/* Info Vuelta */
	NameR[MAX_PLAYER_NAME],
	PistaIDR,
}
enum PistasCarPointsExitEnum
{
	Valid,
	Float:Xpos,
	Float:Ypos,
	Float:Zpos,
	Float:ZZpos,
	Text3D:Text3DPista,
	Text3DPistaB
}
enum PistasTopEnum
{
    PlayerName[MAX_PLAYER_NAME],
	Time,
	Empty_1,
	Empty_2,
	Vueltas,
    DateHour,
    DateMinute,
    DateSecond,
    DateMonth,
    DateDay,
    DateYear,
	CarModel
}
enum PistasCamerasEnum
{
	Valid,
	Float:Xpos,
	Float:Ypos,
	Float:Zpos,
	Float:Vel,

	Text3D:Text3DPista,
	Text3DPistaB
}
enum RefrigeradorEnum
{
	Articulo[MAX_REFRIGERADOR_SLOTS_COUNT],
	Cantidad[MAX_REFRIGERADOR_SLOTS_COUNT]
}
enum IncendiosEnum
{
	Damage,
	HouseidI,
	ObjectsIDOut[15],
	ObjectsIDIn[15]
}
enum ArticulosEnum
{
	NameA[MAX_PLAYER_NAME],
	Float:Vida
}
enum SMSEnum
{
    Number,
	SMSText[MAX_TEXT_SMS]
}
enum CallPublicsEnum
{
    Number,
	TimeCall[3],
	City
}
enum CallPoliceEnum
{
    Number,
    NameC[MAX_PLAYER_NAME],
	ReasonC[MAX_TEXT_CHAT],
	TimeCall[3]
}
enum CallSAMDEnum
{
    Number,
	TimeCall[3],
	Type,
	City
}
enum CamerasEnum
{
    Interior,
    World,
	Page,
	Float:PosXLook,
	Float:PosYLook,
	Float:PosZLook,
	Float:PosXAt,
	Float:PosYAt,
	Float:PosZAt
}
enum TaxisTaximetroEnum
{
	TaxiOn,
	TaxiTime[3],
	TaxiVehicleid,
	Text:Seats[3]
}
enum TextDrawInfoEnum
{
	Float:PosInfoX,
	Float:PosInfoY,
	Float:PosInfoZ,
	PickupidTextInfo
}
enum JobsDataEnum
{
	PESCA_PickupidPescar,
	PESCA_PickupidVender
}
enum JobsEnum
{
	NameJob[MAX_FACCION_NAME],
	pickupidGet
}
enum ObjectMappingEnum
{
	Objectid,
	objectmodel,
	Text3D:TextTag,
	TextTagS,
	Float:PosX,
	Float:PosY,
	Float:PosZ,
	Float:PosRotX,
	Float:PosRotY,
	Float:PosRotZ
}
enum PeajesEnum
{
	objectid_peaje,
	objectmodel,
	Float:PosXTrue,
	Float:PosYTrue,
	Float:PosZTrue,
	Float:PosRotXTrue,
	Float:PosRotYTrue,
	Float:PosRotZTrue,
	Float:PosXFalse,
	Float:PosYFalse,
	Float:PosZFalse,
	Float:PosRotXFalse,
	Float:PosRotYFalse,
	Float:PosRotZFalse,
	Float:PosCommandX,
	Float:PosCommandY,
	Float:PosCommandZ,
	typePeajeOrParqueo,

	AnimObject
}
enum VCPEnum
{
	objectid_vcp,
	objectmodel,
	Float:ObjX,
	Float:ObjY,
	Float:ObjZ,
	Float:ObjZRot,
	pickupidVCP
}
enum FaccionGetMercanciaEnum
{
	Float:PosX,
	Float:PosY,
	Float:PosZ
}
enum DoorsEnums
{
	objectmodel,
	Float:PosXTrue,
	Float:PosYTrue,
	Float:PosZTrue,
	Float:PosRotXTrue,
	Float:PosRotYTrue,
	Float:PosRotZTrue,
	objectanimid,
	Float:PosXFalse,
	Float:PosYFalse,
	Float:PosZFalse,
	Float:PosRotXFalse,
	Float:PosRotYFalse,
	Float:PosRotZFalse,
	typeanim,           // 0 = Move - 1 = Static
	Float:speedmove,
	Dueno
}
enum TypeHouseEnums
{
	TypeName[MAX_PLAYER_NAME],
	Float:PosX,
	Float:PosY,
	Float:PosZ,
	Float:PosZZ,
	Interior,
	PickupId
}
enum TypeGarageEnums
{
	Float:PosX,
	Float:PosY,
	Float:PosZ,
	Float:PosZZ,
	Float:PosXh,
	Float:PosYh,
	Float:PosZh,
	Float:PosZZh,
	Float:PosXc,
	Float:PosYc,
	Float:PosZc,
	Float:PosZZc,
	Interior,
	PickupId,
	PickupIdh
}
enum HouseEnums
{
	Dueno[MAX_PLAYER_NAME],
	ArmarioWeapon[7],
	ArmarioAmmo[7],
	Float:Chaleco,
	Drogas,
	Ganzuas,
	Bombas,
	Float:PosX,
	Float:PosY,
	Float:PosZ,
	Float:PosZZ,
	Interior,
	TypeHouseId,
	PickupId,
	PriceRent,
	Level,
	World,
	Lock,
	Price,
	Deposito,
	Materiales,
	ArmarioLock,
	RefrigeradorLock,
	RingHouseTime,
	VolumenHouse,
	EcualizadorHouse[9],
	StationID,
    GavetaObjects[MAX_GUANTERA_GAVETA_SLOTS],
    GavetaLock,
    ArmarioData[500],
    RefrigeradorData[200],
    EcualizadorData[100]
}
enum HouseFriendsEnum
{
    Name[MAX_PLAYER_NAME],
}
enum GaragesDesingEnum
{
    Float:Xg,
    Float:Yg,
    Float:Zg,
    Float:ZZg,
    Float:XgIn,
    Float:YgIn,
    Float:ZgIn,
    Float:ZZgIn,
    Float:XgOut,
    Float:YgOut,
    Float:ZgOut,
    Float:ZZgOut,
	TypeGarageE
}
enum GaragesEnum
{
    Float:Xg,
    Float:Yg,
    Float:Zg,
    Float:ZZg,
    Float:XgIn,
    Float:YgIn,
    Float:ZgIn,
    Float:ZZgIn,
    Float:XgOut,
    Float:YgOut,
    Float:ZgOut,
    Float:ZZgOut,
    LockIn,
    LockOut,
	PickupidIn,
	PickupidOut,
	TypeGarageE,
	WorldG,
	bool:DeletedG
}
enum GasolinerasEnum
{
	Float:PosX,
	Float:PosY,
	Float:PosZ,
	Fuel
}
enum CajerosEnum
{
	Float:PosX,
	Float:PosY,
	Float:PosZ
}
enum NegociosTypeEnum
{
	Float:PosInX,	          	// 00 - Pos X Adentro del Negocio
	Float:PosInY,          		// 01 - Pos Y Adentro del Negocio
	Float:PosInZ,          		// 02 - Pos Z Adentro del Negocio
	Float:PosInZZ,         		// 03 - Pos ZZ Adentro del Negocio
	Float:PosInX_PC,	        // 04 - Pos X PC Adentro del Negocio
	Float:PosInY_PC,          	// 05 - Pos Y PC Adentro del Negocio
	Float:PosInZ_PC,          	// 06 - Pos Z PC Adentro del Negocio
	Float:PosInZZ_PC,         	// 07 - Pos ZZ PC Adentro del Negocio
	InteriorId,         		// 08 - ID del interior del negocio
	TypeName[MAX_PLAYER_NAME],	// 09 - Nombre del tipo de negocio
	TypePickupOrCheckponit,		// 10 - Si será un pickup o checkpoint | 0 = pickupid 1 = checkpoint
	PickupId,					// 11 - I ID del pickupp
	IdMapIcon                   // 12 - IdMapIcon
};
enum NegociosEnum
{
	Float:PosOutX,          	// 00 - Pos X Afuera del Negocio
	Float:PosOutY,          	// 01 - Pos Y Afuera del Negocio
	Float:PosOutZ,          	// 02 - Pos Z Afuera del Negocio
	Float:PosOutZZ,         	// 03 - Pos ZZ Afuera del Negocio
	PickupOutId,          	 	// 04 - ID Del Pickup de afuera del negocio
	InteriorOut,          	 	// 05 - ID del enterior de afuera del negocio
	Deposito,           		// 06 - Deposito del negocio
	Precio,           			// 07 - Precio del negocio
	Lock,           			// 08 - Cerrado o abierto
	Type,           			// 09 - Tipo de negocio
	PriceJoin,           		// 10 - Precio de entrada por defecto
	PricePiece,           		// 11 - Precio que pagaría por el producto
	NameBizz[MAX_BIIZ_NAME], 	// 12 - Nombre del negocio
	Dueno[MAX_PLAYER_NAME], 	// 13 - Nombre del dueño del negocio
	Extorsion[MAX_PLAYER_NAME], // 14 - Nombre del extorsionista
	Materiales, 				// 15 - Nombre del extorsionista
	World,                      // 16 - Mundo del negocio
	DepositoExtorsion,          // 17 - Dinero Extorsión
	Level,			            // 18 - NIvel mínimo para comprar el negocio
	Station 		            // 19 - Current Station

};
enum DataCarsEnum
{
	Float:PosX,       			// 00 - Coordenadas X
	Float:PosY,       			// 01 - Coordenadas Y
	Float:PosZ,       			// 02 - Coordenadas Z
	Float:PosZZ,      			// 03 - Coordenadas ZZ
	Float:LastX,
	Float:LastY,
	Float:LastZ,
	Float:LastZZ,
	PanelS,
	DoorS,
	LightS,
	TiresS,
	IsLastSpawn,
	Modelo,     				// 04 - Modelo
	Color1,     				// 05 - Color 1
	Color2,     				// 06 - Color 2
	Dueno[MAX_PLAYER_NAME], 	// 07 - Dueño
	Lock,						// 08 - Lock
	Time,       				// 09 - Time
	Matricula,     				// 10 - Matrícula
	MatriculaString[32],     	// 10.1 - Matrícula String
	Puente,      				// 11 - Puente
	Gas,	      				// 12 - Gas
	ConteoOil,                  // 13 - ConteoOil
	GasNotShow,                 // 14 - GasNotShow
	OilNotShow,
	TimeGas,                    // 15 - Time Gas
//	Text:TextDrawGas,	      	// 16 - Gas Text
//	Text:TextDrawEstado,	    // 17 - Daño Text
//	Text:TextDrawVelocidad,	    // 18 - Velocidad Text
	StateEncendido,			    // 19 - Apagado o encendido
	LockPolice,                 // 20 - Candado de la policía
	ReasonLock[50],           	// 21 - Razón del candado
	MaleteroState,              // 22 - Estado del Maletero
	SlotsTunning[14],           // 23 Slots de Tunning
	Vinillo,
	CapoState,
	LightState,
	RespawnTimerId,
	IsIntermitente,             // 0 = Descativado | 1 = Izquiredo | 2 = Derecho
	ConteoIntermitente,
	AlarmOn,
	Oil,
	TemperaturaC,
	EngineState,
	Float:LastDamage,
//	LastVelocityInt,
	Interior,
	InteriorLast,
	World,
	WorldLast,
	AttachObjectID,
	TimeCalentamiento,
	LlenandoGas,
	StationID,
	VolumenVehicle,
    EcualizadorVehicle[9],
    GuanteraObjects[MAX_GUANTERA_GAVETA_SLOTS],
    GuanteraLock,
    TimerIdBug,
    VehicleDeath,
	VehicleAnticheat
};
enum TelesEnum
{
	Float:PosX,
	Float:PosY,
	Float:PosZ,
	Float:PosZZ,
	PickupID,
	PickupIDGo,
	Interior,
	World,
	Lock,
	Dueno
};
enum GaragesExEnum
{
	Float:PosXOne,
	Float:PosYOne,
	Float:PosZOne,
	Float:PosZZOne,
	Float:PosXOneP,
	Float:PosYOneP,
	Float:PosZOneP,
	Float:PosZZOneP,
	Float:PosXTwo,
	Float:PosYTwo,
	Float:PosZTwo,
	Float:PosZZTwo,
	Float:PosXTwoP,
	Float:PosYTwoP,
	Float:PosZTwoP,
	Float:PosZZTwoP,
	PickupIDOneP,
	PickupIDTwoP,
	Interior,
	World,
	Lock,
	Dueno
};
enum DataUsers
{
	EmailTime,
	Email[60],           // Email
	Password[25],       // 2
	AccountState,       // 3
	Float:Spawn_X,  	// 4
	Float:Spawn_Y, 		// 5
	Float:Spawn_Z, 	 	// 6
	Float:Spawn_ZZ, 	// 7
	HoursPlaying, 		// 8
	DeahtCount, 		// 9
	KilledCount, 		// 10
	Phone, 				// 11
	House, 				// 12
	Car,				// 13
	Faccion,			// 14
	Rango,				// 15
	GirlFreind[MAX_PLAYER_NAME],// 16
	Bolsillos[5],		// 17
	Habilidad,			// 18
	Warn,				// 19
	Ciudad,				// 20
	Float:Vida,			// 21
	Float:Chaleco,		// 22
	Cansansio, 			// 23
	Dinero, 			// 24
	Banco, 				// 25
	Jail, 				// 26
	Admin,				// 27
	World,				// 28
	Interior,			// 29
	Skin,				// 30
	Drogas,				// 31
	Materiales,			// 32
    Lata,				// 33
	Ganzuas,			// 34
	Alquiler,			// 35
	Bombas,				// 36
	Sexo,				// 37
	Idiomas[6],			// 38
	Licencias[7],       // 39
	IsInJail,			// 40
	Nacer,				// 41
	TimeRequestBank,	// 42
	MyBonus,			// 43
	InTutorial,			// 44
	Edad,				// 45
	IsPlayerInHouse,	// 46
	TimeEquipo,			// 47
	SpawnAmigo,			// 48
	IsPaga,				// 50
	MyIP[16],			// 51
	Job,				// 52
	MyStyleWalk,		// 53
	Saldo,				// 55
	LicenciaPesca,		// 56
	IntermitentState,	// 57
	MyStyleTalk,		// 59
	IsPlayerInBizz,		// 60
	IsPlayerInGarage,	// 62
	WeaponS[13],
	AmmoS[13],
	Asignados[3],
    Bolsa[4],
    BolsaC[4],
    HaveBolsa,
    IsPlayerInVehInt,
    Cartera[MAX_COUNT_CARTERA],
    CarteraC[MAX_COUNT_CARTERA],
    CarteraT[MAX_COUNT_CARTERA],
    AccountBankingOpen,
    CarteraI[MAX_COUNT_CARTERA],
   	IsPlayerInBank,
    AlertSMSBank,
    HorasWork,
	CameraLogin,
	Enfermedad,
	Description,
	EnableDescription,
	DescriptionString[MAX_TEXT_DESCRIPTION],
	DescriptionColor,
	DescriptionSelect,
	SpawnFac,
	WantAudio,
	Objetos[MAX_OBJECTS_PLAYERS],
	ObjetosVision[MAX_OBJECTS_PLAYERS],
	TypePhone
};
enum Agenda
{
	NameC[MAX_AGENDA_NAME],
	NumberC,
	bool:IsBlackList
};
enum DataUsersOnline
{
	State,
	/*
	    0 - Conectando...
		1 - Login
		2 - Registro
		3 - Logueado
	*/
	Text:TextEnfermedad,
	CurrentDialog,
	LoginTime,
	Spawn,
	Espectando,
	NameOnline[MAX_PLAYER_NAME],
	NameOnlineFix[MAX_PLAYER_NAME],
	Intentar,
	StateMoneyPass,
	StateWeaponPass,
	StateChannelOOC,
	StateChannelFamily,
	StateChannelRadio,
	StateChannelCNN,
	StateJob,
	Paga,
	InPickup,
	InPickupTele,
	InPickupInfo,
	Float:MyPickupX,
	Float:MyPickupY,
	Float:MyPickupZ,
	Float:MyPickupZZ,
	MyPickupWorld,
	MyPickupLock,
	Float:MyPickupX_Now,
	Float:MyPickupY_Now,
	Float:MyPickupZ_Now,
	MyPickupInterior,
	Text:MyTextDrawShow,
	InvitePlayer,
	InviteFaccion,
	Frecuencia,
	AdminOn,
	Freeze,
	Wispers,
	Level,
	IsPagaO,
	Menu:InMenu,
	MyIDVehicleTunning,
	TypeSkinList,
	RowHair,
	TypeBuy,
	RowSkin,
	IsPlayerInHotel,
	AfterMenuRow,
	IsTaxi,
	SeatTaxi,
	SubAfterMenuRow,
	MyAmmoSelect,
	Float:VidaOn,
	Float:ChalecoOn,
	ChangeVC,
	InAnim,
	InCall,
	SendCommands,
	Altavoz,
	IsDescolgado,
	PhoneOnline,
	InSleep,
	CansansioConteo,
	InCarId,
	InVehicle,
	MyLastIdReport,
	TimeCallPublics,
	// Dar con Dialog
	IsEntrevistado,
	IsAtado,
	IsEsposas,
	IsTeazer,
	MarcaZZ,
	DarLlaves,
	StateDeath,
	TimerTutorialId,
	TimerCamaraId,
	TimerCamaraIdRace,
	IsNotSilenciado,
	ModeDM,
	TeamDM,
	ModeRace,
	Text3D:Description3D,
	IsAFK,
	Float:CoordenadasAFK[4],
	SaveAfterAgenda[60],
	SaveNameContact[10],
	JobBonus,
	IsCheckCheat,
	CountCheat,
	InWalk,
	TimeCall,
	ICall,
	InSpecialAnim,
	IsCheckUser,
//	IsCheckAudio,
	IsEspectando,
	EspectVehOrPlayer,
	IsCleanAnimCar,
	LastWeapondRow,
	IsAutorizado,
	ObjectWorking,
	ObjectAction,   // OBJETC MAPPING VAR´S
	NameProject[MAX_PLAYER_NAME],
	Float:MappingPoint,
	UseRotOrPos,
	TimeLata,
	ReverseState,
	InCamera,
	NumberCallPublic,
	LastVel[3],
	LastTextDrawTemperatura,
	LastDamageInt,
	LastGas,
	LastOil,
	MappingRowSelected[MAX_OBJECT_MAPPING_COUNT],
	LicenciaTest,
	PointDm,
	ExitedVehicle,
	TimerLoginId,
	DesignGarageId,
	CallTime,
	PistaIDp,
	PosIDp,
	IsAudio,
	HandleAHouse,
	HandleAVehicle,
	// Vender:       0 = playerid      1 = tipo
	PlayerSexo,
	VPhone[3],
	VCoche[2],
	VFactura[2],
	VServicio[2],
	VMulta[2],
	VRepair[2],
	VAceite[2],
	Contrato[2],
	VArma[2],
	VDrogas[3],
	VGanzuas[2],
	VProteger[2],
	CountIntentarVehicle,
	Float:CurrentHealth,
	Float:CurrentArmour,
	LastInterior
};
enum FaccionesData
{
	NameFaccion[MAX_FACCION_NAME],
	Lider[MAX_PLAYER_NAME],
	Precio,
	Deposito,
	Paga[MAX_FACCION_RANGOS],
	Extorsion,
	Almacen[MAX_ALMACENES],
	LockA[MAX_ALMACENES],
	Float:AlmacenX[MAX_ALMACENES],
	Float:AlmacenY[MAX_ALMACENES],
	Float:AlmacenZ[MAX_ALMACENES],
	AlmacenWorld[MAX_ALMACENES],
	Float:Spawn_X[2],
	Float:Spawn_Y[2],
	Float:Spawn_Z[2],
	Float:Spawn_ZZ[2],
	Drogas[MAX_ALMACENES],
	Ganzuas[MAX_ALMACENES],
	Bombas[MAX_ALMACENES],
	InteriorSpawn,
	Float:PickupOut_X,
	Float:PickupOut_Y,
	Float:PickupOut_Z,
	Float:PickupOut_ZZ,
	Float:PickupIn_X,
	Float:PickupIn_Y,
	Float:PickupIn_Z,
	Float:PickupIn_ZZ,
	PickupidOutF,
	PickupidInF,
	PrecioFaccion,
	InteriorFaccion,
	Lock,
	World,
	Family,
	Radio
};
enum JailType
{
	Float:PosX_Preso,
	Float:PosY_Preso,
	Float:PosZ_Preso,
	Float:PosZZ_Preso,
	Float:PosX_Liberado,
	Float:PosY_Liberado,
	Float:PosZ_Liberado,
	Float:PosZZ_Liberado,
	Interior_Preso,
	Interior_Liberado,
	WorldLiberado
}
/// 				NEW
new MySQL:dataBase;
new ResetGM;
new SERVER_PORT_;
new TramSFID;
new TimeTren;
new bool:WeaponEnableDM[47];
new Text:TextEnfermedadFijos[7];
//new Text:LockVehicleText[2];
new Text:TextBackgroundEnfermedad;
new Text:ModeDMTextDraw[2];
new Text:GarageTextDraw;
new Text:WideScreen;
new Text:WideScreen2;
new PickUpAlambraAndJizzy[2];
new IsDMTeam;
new SkinDM[2];
new InteriorDM[2];
new WorldDM[2];
new ReasonReset[150];
new MAX_ROBOS;
new RobosInfo[MAX_ROBOS_COUNT][RobosInfoEnum];
new Float:PosDM[2][4] = {{-1496.1182,2600.6624,55.6875,358.7807}, {-1496.1182,2600.6624,55.6875,358.7807}};
new TrainGroups[MAX_TRAINS][4];
new Text:ScoreRaceBox;
new LastIPAttack[MAX_BUFFER_IP_ATTACK][LastIPAttackInfo];
new Text:ScorePosRace[MAX_COUNT_PISTAS];
new PistasTop[MAX_COUNT_PISTAS][MAX_COUNT_PISTAS_TOP][PistasTopEnum];
new Pistas[MAX_COUNT_PISTAS][PistasEnum];
new PistasPosPlayers[MAX_COUNT_PISTAS][MAX_COUNT_PISTAS_POS_PLAYERS][PistasPosPlayersEnum];
new PistasCameras[MAX_COUNT_PISTAS][MAX_COUNT_PISTAS_CAMERAS][PistasCamerasEnum];
new PistasCarPointsExit[MAX_COUNT_PISTAS][MAX_COUNT_PISTAS_POS_PLAYERS][PistasCarPointsExitEnum];
new PistasPos[MAX_COUNT_PISTAS][MAX_COUNT_PISTAS_POS][PistasPosEnum];
new Notes[MAX_PLAYERS][MAX_NOTES_COUNT][NotesEnum];
new AgendaData[MAX_PLAYERS][MAX_PLAYER_CONTACT][Agenda];
new SMS[MAX_PLAYERS][MAX_SMS_COUNT][SMSEnum];
new TaxisTaximetro[MAX_TAXIS_COUNT][TaxisTaximetroEnum];
new JailsType[3][JailType];
new Text:TexdrawsTutorial[20];
new Text:Url_Web;
new Text:Url_WebShadow;
new Text:CansansioDefault;
new Text:CansansioDefaultBackground;
new Text:VelocimetroFijos[9];
new SuperMercadosPickupid[2];
new BANCO_PICKUPID_out;
new HOTEL_PICKUPID_out;
new MUSEO_PICKUPID_out[7];
new MAX_TAXIS;
new MAX_OBJECT_FIJOS;
new MAX_TEXT_DRAW_INFO;
new MAX_TELE;
new MAX_BIZZ;
new MAX_PEAJE;
new MAX_BIZZ_TYPE;
new MAX_HOUSE_TYPE;
new MAX_GARAGE_TYPE;
new MAX_HOUSE;
new MAX_CAJEROS;
new MAX_DOORS;
new MAX_GARAGES;
new MIN_GARAGE_PICKUP;
new MAX_GARAGE_PICKUP;
new MAX_CAR;
new MAX_TRAIN = -1;
new MAX_CAR_DUENO;
new MAX_CAR_FACCION;
new MAX_CAR_PUBLIC;
new MAX_GASOLINERAS;
new MAX_CAMERAS;
new MAX_PICKUP;
new MAX_GARAGES_EX;
new MAX_TEXT_DRAW;
new DIR_PISTAS[10] 		= "\\Pistas\\";
new DIR_USERS[10] 		= "users";
new DIR_FACCIONES[14] 	= "\\Facciones\\";
new DIR_VEHICLES[12] 	= "vehicles";
new DIR_VEHICLESF[13] 	= "vehiclesf";
new DIR_VEHICLESP[13] 	= "vehiclesp";
new DIR_NEGOCIOS[12] 	= "negocios";
new DIR_MISC[9] 		= "\\Misc\\";
new DIR_HOUSES[10] 		= "casas";
new DIR_CONTACTS[12]	= "\\Contacts\\";
new DIR_NOTES[10]		= "\\Notes\\";
new DIR_MAPS[8] 		= "\\Maps\\";
new DIR_SMS[7] 			= "\\SMS\\";
new DIR_TELES[13]		= "\\TelesLock\\";
new DIR_GARAGES_EX[13]	= "\\GaragesEx\\";
new DIR_BOMBAS[10] 		= "\\Bombas\\";
new DIR_VCP[7] 			= "\\VCP\\";
new DIR_ACCOUNT_BANK[15]= "users_banco";
new DIR_DDOS[24]        = "\\DDoS\\connections.dat";
new DIR_DDOS_BAN[24]    = "\\DDoS\\ban.dat";
new DIR_CONNECTIONS[16]    = "\\Connections\\";
new bool:CheckByTwo;
new MAX_CAMERAS_LOGIN;
new PickupidPoliceFurgo;
new PickupidAmbulance;
new PickupidFurgoCNN;
new PickupExitVagones[3];
new TimerAd;
new TimerDrogas;
new CamerasLogin[10][CamerasLoginEnum];
new WeatherCurrent;
new Banking[MAX_PLAYERS][AccountBankEnum];
new Cheques[MAX_PLAYERS][MAX_COUNT_CHEQUES][ChequesEnum];
new BombasO[MAX_BOMBAS_COUNT][BombasEnum];
new Incendios[MAX_INCENDIOS][IncendiosEnum];
new CallPolice[MAX_CALL_POLICE_COUNT][2][CallPoliceEnum];
new CallPublics[MAX_CALL_POLICE_COUNT][3][CallPublicsEnum];
new CallSAMD[2][MAX_CALL_POLICE_COUNT][CallSAMDEnum];
new ObjectMapping[MAX_OBJECT_MAPPING_COUNT][ObjectMappingEnum];
new VCP[MAX_OBJECTS_VALLAS_CONOS_PINCHOS][VCPEnum];
new Peajes[MAX_PEAJES_COUNT][PeajesEnum];
new FaccionesMercancias[MAX_FACCION_COUNT][FaccionGetMercanciaEnum];
new Doors[MAX_DOORS_COUNT][DoorsEnums];
new HouseData[MAX_HOUSE_COUNT][HouseEnums];
new Refrigerador[MAX_HOUSE_COUNT][RefrigeradorEnum];
new Articulos[MAX_ARTICULOS_COUNT][ArticulosEnum];
new HouseFriends[MAX_HOUSE_COUNT][MAX_HOUSE_FRIENDS][HouseFriendsEnum];
new Garages[MAX_HOUSE_COUNT][MAX_GARAGE_FOR_HOUSE][GaragesEnum];
new GaragesEx[MAX_GARAGES_EX_COUNT][GaragesExEnum];
new GaragesDesing[MAX_GARAGES_DESING][GaragesDesingEnum];
new TypeHouse[MAX_HOUSE_TYPE_COUNT][TypeHouseEnums];
new TypeGarage[MAX_GARAGE_TYPE_COUNT][TypeGarageEnums];
new PlayersData[MAX_PLAYERS][DataUsers];
new PlayersDataOnline[MAX_PLAYERS][DataUsersOnline];
new FaccionData[MAX_FACCION_COUNT][FaccionesData];
new FaccionesRangos[MAX_FACCION_COUNT][MAX_FACCION_RANGOS][MAX_FACCION_NAME];
new NegociosData[MAX_BIZZ_COUNT][NegociosEnum];
new RangosSkins[MAX_FACCION_COUNT][MAX_FACCION_RANGOS][MAX_FACCION_SKIN];
new Cajeros[MAX_CAJEROS_COUNT][CajerosEnum];
new TextDrawInfo[MAX_TEXT_DRAW_INFO_COUNT][TextDrawInfoEnum];
new Jobs[MAX_JOB][JobsEnum];
new JobsData[JobsDataEnum];
new LOGO_STAFF[50] = "Administración:";
new DataCars[MAX_VEHICLE_COUNT][DataCarsEnum];
new Text:FaccionTextDraws[MAX_FACCION_COUNT];
new Text:TelesTextDraws[MAX_TELES_COUNT];
new Text:TextDrawInfoTextDraws[MAX_TEXT_DRAW_INFO_COUNT];
new Text:NegociosTextDraws[MAX_BIZZ_COUNT];
new Text:CasasTextDraws[MAX_HOUSE_COUNT];
new CanalOOC;
new CanalDudas = true;
new CallCNN = -1;
new EntrevistaState;
new SKIN_CIVILES[118];
new coches_Todos_Precios			[212];
new coches_Todos_Velocidad			[212];
new coches_Todos_Type               [212];
new coches_Todos_Nombres            [212][MAX_PLAYER_NAME];
new coches_Todos_Maleteros          [MAX_VEHICLE_COUNT][12][2]; // 7 - CHALECO | 8 - DROGAS | 9 - GANZÚAS | 10 - MATERIALES | 11 - BOMBAS
new Teles[MAX_TELES_COUNT][TelesEnum];
new	WeaponsFaccion[MAX_FACCION_COUNT][MAX_ALMACENES][10];
new AmmoFaccion[MAX_FACCION_COUNT][MAX_ALMACENES][10];
new Float:FaccionesChaleco[MAX_FACCION_COUNT][MAX_ALMACENES][4];
new NegociosType[MAX_BIZZ_TYPE_COUNT][NegociosTypeEnum];
new ObjetosBolsillosNombres[5][MAX_PLAYER_NAME];
new Menu:TallerPrincipal;
new Text:BarsCansansio[MAX_CANSANSIO + 1];
new Text:BarsGas[MAX_GAS_VEHICLE + 1];
new Text:BarsDamage[MAX_DAMAGE_VEHICLE + 1];
new Text:BarsOil[MAX_OIL_VEHICLE + 1];
new Text:VelocimetroNumber1[10];
new Text:VelocimetroNumber2[10];
new Text:VelocimetroNumber3[10];
new Text:TemperaturaTextDraws[42];
//
new Menu:Principal_Sultan;
new Menu:XFlowYAlien_Sultan[2];
new XFlowYAlien_SultanID[2][7];
//
new Menu:Principal_Elegy;
new Menu:XFlowYAlien_Elegy[2];
new XFlowYAlien_ElegyID[2][7];
//
new Menu:Principal_Flash;
new Menu:XFlowYAlien_Flash[2];
new XFlowYAlien_FlashID[2][7];
//
new Menu:Principal_Stratum;
new Menu:XFlowYAlien_Stratum[2];
new XFlowYAlien_StratumID[2][2];
//
new Menu:Principal_Jester;
new Menu:XFlowYAlien_Jester[2];
new XFlowYAlien_JesterID[2][7];
//
new Menu:Principal_Uranus;
new Menu:XFlowYAlien_Uranus[2];
new XFlowYAlien_UranusID[2][7];
//
new Menu:Principal_Savanna;
new Menu:Opciones_Savanna[4];
new Opciones_SavannaID[4][4];
//
new Menu:Principal_Remington;
new Menu:Opciones_Remington[4];
new Opciones_RemingtonID[4][4];
//
new Menu:Principal_Slamvan;
new Menu:Opciones_Slamvan[3];
new Opciones_SlamvanID[3][7];
//
new Menu:Principal_Blade;
new Menu:Opciones_Blade[4];
new Opciones_BladeID[4][4];
//

new ListTRANSFENDEREscape[23] = {419, 409, 402, 422, 438, 445, 458, 466, 467, 474, 475, 477, 478, 479, 480, 500, 506, 507, 526, 533, 545, 575, 600};
new Menu:XFlowYAlien_Escape;
new XFlowYAlien_EscapeID[6];

new ListTRANSFENDERSentinel[16] = {415, 418, 405, 410, 404, 421, 436, 491, 517, 527, 542, 547, 579, 580, 585, 603};
new Menu:XFlowYAlien_Sentinel;
new XFlowYAlien_SentinelID[10];

new ListTRANSFENDER[17] = {587, 401, 589, 420, 426, 489, 492, 496, 505, 516, 518, 529, 540, 546, 549, 550, 551};
new Menu:XFlowYAlien_Euros;
new XFlowYAlien_EurosID[12];
//
new Cameras[MAX_CAMERAS_COUNT][CamerasEnum];
new Menu:CamerasM[2];
new Menu:Nitro;
new Menu:Llantas1;
new Menu:Llantas2;
new Menu:Vinilos;
new NitrosID[3];
new LlantasID1[16];
new LlantasID2[16];
new Menu:CluckinBell;
new CluckinBellPrecios[7];
new Menu:BurgerShot;
new BurgerShotPrecios[8];
new Menu:PizzaStack;
new PizzaStackPrecios[7];
new Menu:JaysDiner;
new JaysDinerPrecios[8];
new Menu:RingDonuts;
new RingDonutsPrecios[8];
new Menu:Menu_Principal_Armas;
new Gasolineras[MAX_GASOLINERAS_COUNT][GasolinerasEnum];
new Menu:Menues_Armas		[9];
new Armas_Clases    		[9][25];
new Armas_Nombre			[9][5][30];
new Armas_Precios			[9][5][6];
new Armas_Precios_Num		[9][5];
new Armas_Municion          [9][5];
new Armas_ID				[9][5];
new Menu:M24_7;
new Menu:TYPE_PHONES_MENU;
new M24_7_Precios[11];
new Menu:SupermercadoArticulos;
new SupermercadoArticulosPrecios[6];
new SlotIDWeapon[47] =
{
	0, // 0 - Unarmed
	0, // 1 - Brass Knuckles
	1, // 2 - Golf Club
	1, // 3 - Nite Stick
	1, // 4 - Knife
	1, // 5 - Baseball Bat
	1, // 6 - Shovel
	1, // 7 - Pool Cue
	1, // 8 - Katana
	1, // 9 - Chainsaw
	10, // 10 - Purple Dildo
	10, // 11 - Small White Vibrator
	10, // 12 - Large White Vibrator
	10, // 13 - Silver Vibrator
	10, // 14 - Flowers
	10, // 15 - Cane
	8, // 16 - Grenade
	8, // 17 - Tear Gas *
	8, // 18 - Molotov Cocktail
	-1, // 19 -
	-1, // 20 -
	-1, // 21 -
	2, // 22 - 9mm
	2, // 23 - Silenced 9mm
	2, // 24 - Desert Eagle
	3, // 25 - Shotgun
	3, // 26 - Sawn-off Shotgun
	3, // 27 - Combat Shotgun
	4, // 28 - Micro SMG
	4, // 29 - MP5
	5, // 30 - AK-47
	5, // 31 - M4
	4, // 32 - Tec9
	6, // 33 - Country Rifle
	6, // 34 - Sniper Rifle
	7, // 35 - Rocket Launcher
	7, // 36 - HS Rocket Launcher **
	7, // 37 - Flamethrower
	7, // 38 - Minigun
	8, // 39 - Satchel Charge ***
	12, // 40 - Detonator
	9, // 41 - Spraycan
	9, // 42 - Fire Extinguisher
	9, // 43 - Camera
	11, // 44 - Nightvision Goggles ****
	11, // 45 - Thermal Goggles ****
	11 // 46 - Parachute
};
new SlotNameWeapon[47][25] =
{
	"Nada", 					// 0 - Unarmed
	"Manopla", 					// 1 - Brass Knuckles
	"Palo de Golf", 			// 2 - Golf Club
	"Bastón policial", 			// 3 - Nite Stick
	"Cuchillo", 				// 4 - Knife
	"Bate", 					// 5 - Baseball Bat
	"Pala", 					// 6 - Shovel
	"Palo de Billar",			// 7 - Pool Cue
	"Sable", 					// 8 - Katana
	"Motosierra", 				// 9 - Chainsaw
	"Consolador Rosado", 		// 10 - Purple Dildo
	"Consolador Pequeño", 		// 11 - Small White Vibrator
	"Consolador Largo", 		// 12 - Large White Vibrator
	"Consolador Plateado", 		// 13 - Silver Vibrator
	"Flores", 					// 14 - Flowers
	"Bastón", 					// 15 - Cane
	"Granadas", 				// 16 - Grenade
	"Granadas de Gas",		 	// 17 - Tear Gas *
	"Cóctel Molotov", 			// 18 - Molotov Cocktail
	-1, // 19 -
	-1, // 20 -
	-1, // 21 -
	"Pistola 9mm", 				// 22 - 9mm
	"Silenciada 9mm", 			// 23 - Silenced 9mm
	"Desert Eagle", 			// 24 - Desert Eagle
	"Escopeta", 				// 25 - Shotgun
	"Recortada", 				// 26 - Sawn-off Shotgun
	"Escopeta de Combate", 		// 27 - Combat Shotgun
	"Micro SMG", 				// 28 - Micro SMG
	"MP5", 						// 29 - MP5
	"AK-47", 					// 30 - AK-47
	"M4", 						// 31 - M4
	"Tec9", 					// 32 - Tec9
	"Rifle Corto Alcance", 		// 33 - Country Rifle
	"Rifle Largo Alcance", 		// 34 - Sniper Rifle
	"Cohete", 					// 35 - Rocket Launcher
	"RPG Cohete", 				// 36 - HS Rocket Launcher **
	"Lanzallamas", 				// 37 - Flamethrower
	"Minigun", 					// 38 - Minigun
	"Explosivos", 				// 39 - Satchel Charge ***
	"Detonador", 				// 40 - Detonator
	"Spray Policial", 			// 41 - Spraycan
	"Extintor de incendios", 	// 42 - Fire Extinguisher
	"Cámara Fotográfica", 		// 43 - Camera
	"Gafas de visión nocturna", // 44 - Nightvision Goggles ****
	"Gafas térmicas", 			// 45 - Thermal Goggles ****
	"Paracaídas" 				// 46 - Parachute
};
new NameConfigutionUser[2][2][20] =
{
	{
		"{00F50A}Automático",
		"{F5FF00}Manual"
	},
	{
		"Desactivado",
		"Activado"
	}
};
new EcualizadorTypes[9][30] =
{
	"Coro",
	"Compresión",
	"Distorsión",
	"Eco",
	"Efecto Flanger",
	"Efecto Gargle",
	"Reverberancia I3DL2",
	"Ecualizador Paramétrico",
	"Reverberancia"
};
new Stations[41][2][60] =
{
    {"Union Latin Players - Radio Oficial{BE00FF}\t(Variado)",	"http://radio.unionlp.com:8000/listen.pls"},
	{"Buena Música{BE00FF}\t\t\t(Reggaeton)",				"http://sc9.mystreamserver.com:8030"},
	{"PigPen Radio{BE00FF}\t\t\t(Hip Hop)", 				"http://83.170.104.91:30884/listen.pls"},
	{"KrisisDnb{BE00FF}\t\t\t\t(Drum And Bass)", 			"http://live.krisisdnb.com:9268"},
	{"House{BE00FF}\t\t\t\t(Doggloung)", 					"http://dogglounge.mixcache.com:8000"},
	{"54 House{BE00FF}\t\t\t\t(House)", 					"http://54house.stream-balancer.de:80"},
	{"DI FM Latin House{BE00FF}\t\t\t(Latin House)", 		"http://80.94.69.106:6424/"},
	{"DI FM Techno{BE00FF}\t\t\t(Techno)", 					"http://u17.di.fm:80/di_techno"},
	{"DI FM Funky House{BE00FF}\t\t\t(Funky House)", 		"http://80.94.69.106:6284/"},
	{"Psychedelic Radio{BE00FF}\t\t\t(Psychedelic)",		"http://88.191.18.242:8000"},
	{"El mero mero radio{BE00FF}\t\t\t(Reggaeton)", 		"http://listen.radionomy.com/el-mero-mero-radio"},
	{"Fiesta Mexicana{BE00FF}\t\t\t(Canciones Mexicanas)", 	"http://174.123.136.130:8888/"},
	{"Renovación y Evolución{BE00FF}\t\t(Metal)",		 	"http://65.254.42.234:15060/"},
	{"Rockarolla{BE00FF}\t\t\t\t(Rock)",		 			"http://shout.streamwithq.gr:4042/"},
	{"Z Rock & Pop{BE00FF}\t\t\t(Rock and Pop)",		 	"http://servistream.pe:8116/"},
	{"Hard Base FM{BE00FF}\t\t\t(Hardbase)",		 		"http://listen.hardbase.fm/tunein-dsl-pls"},
	{"Dubstep{BE00FF}\t\t\t\t(Dubstep)",		 			"http://cp.internet-radio.org.uk:15634/"},
	{"Top Hits Music{BE00FF}\t\t\t(Pop)",		 			"http://scfire-mtc-aa01.stream.aol.com:80/stream/1014"},
	{"La Radio Tropical{BE00FF}\t\t\t(Cumbia)",		 		"http://67.205.76.173:8136"},
	{"Max Dance{BE00FF}\t\t\t\t(House Variado)",		 	"http://cp.internet-radio.org.uk:15114/"},
	{"The Hot 100{BE00FF}\t\t\t(Variado)",		 			"http://cp2.internet-radio.org.uk:30115/"},
	{"Big Radio Warm{BE00FF}\t\t\t(Variado)",		 		"http://74.86.211.35/101point6"},
	{"Grunge FM{BE00FF}\t\t\t\t(Grunge)",		 			"http://livestream2.bigrradio.com/grungefm"},
	{"Energy FM{BE00FF}\t\t\t\t(Electrónica)",		 		"http://cp.internet-radio.org.uk:15614/"},
	{"XTraFM{BE00FF}\t\t\t\t(Variado)",		 				"http://stream.xtra.fm:8006/"},
	{"Europa FM Gipuzkoa{BE00FF}\t\t(Rock/Pop)",		 	"http://stream.europafmgipuzkoa.com:80/"},
	{"The Buzz{BE00FF}\t\t\t\t(Alternative & Grunge)",		"http://scfire-mtc-aa03.stream.aol.com:80/stream/1022"},
	{"ChroniX Agression{BE00FF}\t\t\t(Metal)",		 		"http://scfire-mtc-aa05.stream.aol.com:80/stream/1039"},
	{"S K Y FM{BE00FF}\t\t\t\t(Salsa)",		 				"http://205.188.215.231:8010"},
	{"M2 Sunshine{BE00FF}\t\t\t(Reggae & Dance Hall)",		"http://91.121.120.152:8000"},
	{"RaggaKings{BE00FF}\t\t\t(Reggaeton)",		 			"http://205.234.220.66:7970"},
	{"STRM Soundtrack{BE00FF}\t\t\t(Soundtrack)",		 	"http://83.145.128.37:9000"},
	{"Country 101 FM{BE00FF}\t\t\t(Country)",		 		"http://uplink.181.fm:8018/"},
	{"Old School 101 FM{BE00FF}\t\t\t(HipHop /Rnb)",		"http://uplink.181.fm:8068/"},
	{"The Beatles 101 FM{BE00FF}\t\t(Rock)",		 		"http://uplink.181.fm:8062/"},
	{"Real Punk Radio{BE00FF}\t\t\t(Punk)",		 			"http://174.122.26.45:80/"},
	{"Friends or Enemies{BE00FF}\t\t\t(Punk)",		 		"http://s1.voscast.com:7364/"},
	{"Panda Show{BE00FF}\t\t\t(Humor)",		 				"http://208.85.242.77:80"},
	{"Dnb Real Radio{BE00FF}\t\t\t(Drum and bass)",		 	"http://deppy.dnbradio.com:8016"},
	{"Estudio 92{BE00FF}\t\t\t\t(Variado)",		 			"http://94.23.67.172:9112/"},
	{"Panamericana{BE00FF}\t\t\t(Salsa)",		 			"http://76.10.222.35:8300/"}

//	{"Soundtrack{BE00FF}\t\t\t\t(Soundtrack)",		 	"Soundtrack"},
};
new Meses[12][11] =
{
	{"Enero"},
	{"Febrero"},
	{"Marzo"},
	{"Abril"},
	{"Mayo"},
	{"Junio"},
	{"Julio"},
	{"Agosto"},
	{"Septiembre"},
	{"Octubre"},
	{"Noviembre"},
	{"Diciembre"}
};
new AdminsRangos[9][30] =
{
	{"{23FF00}Moderador (1)"},
	{"{23C100}Moderador (2)"},
	{"{238900}Moderador (3)"},
	{"{FFDD00}Moderador (4)"},
	{"{FF9600}Moderador (5)"},
	{"{0019FF}Moderador Global (6)"},
	{"{FF3C00}Co-Admin (7)"},
	{"{FF1E00}Administrador (8)"},
	{"{000000}Líder"}
};
new AdminsRangosColors[9] =
{
	0x23FF00FF,
	0x23C100FF,
	0x238900FF,
	0xFFDD00FF,
	0xFF9600FF,
	0x0019FFFF,
	0xFF3C00FF,
	0xFF0000FF,
	0x000000FF
};
new DescriptionsPerType[2][14] =
{
	{"Estático"},
	{"Personalizada"}
};
new DescriptionsText[13][11] =
{
	{"Felíz"},
	{"Enojado"},
	{"Triste"},
	{"Aburrido"},
	{"Amargado"},
	{"Molesto"},
	{"Furioso"},
	{"Relajado"},
	{"Nostálgico"},
	{"Serio"},
	{"Deprimido"},
	{"Nervioso"},
	{"Emocionado"}
};
new DescriptionsPerNames[14][15] =
{
	{"Celeste"},
	{"Rojo Oscuro"},
	{"Azul Claro"},
	{"Violeta"},
	{"Marrón"},
	{"Rojo"},
	{"Rojo Claro"},
	{"Azul"},
	{"Amarillo"},
	{"Gris"},
	{"Púrpura"},
	{"Naranja"},
	{"Menta"},
	{"Verde Oscuro"}
};
new ObjectsNames[9][30] =
{
	"Nada",
	"Maletín",
	"Lentes",
	"Peluca",
	"Boina",
	"Gorra",
	"Reloj",
	"Casco",
	"Táser"
};
new ObjectsVisibleOrInvisible[9] =
{
	false,
	true,
	false,
	false,
	false,
	false,
	false,
	false
};
new ObjectPlayersInt[75][3] =
{
	{1210,5, TYPE_MALETIN},  // 00 - Maletín
	{19006,2, TYPE_GAFAS}, // 01 - Nada
	{19007,2, TYPE_GAFAS}, // 02 - Nada
	{19008,2, TYPE_GAFAS}, // 03 - Nada
	{19009,2, TYPE_GAFAS}, // 04 - Nada
	{19010,2, TYPE_GAFAS}, // 05 - Nada
	{19011,2, TYPE_GAFAS}, // 06 - Nada
	{19012,2, TYPE_GAFAS}, // 07 - Nada
	{19013,2, TYPE_GAFAS}, // 08 - Nada
	{19014,2, TYPE_GAFAS}, // 09 - Nada
	{19015,2, TYPE_GAFAS}, // 10 - Nada
	{19016,2, TYPE_GAFAS}, // 11 - Nada
	{19017,2, TYPE_GAFAS}, // 12 - Nada
	{19018,2, TYPE_GAFAS}, // 13 - Nada
	{19019,2, TYPE_GAFAS}, // 14 - Nada
	{19020,2, TYPE_GAFAS}, // 15 - Nada
	{19021,2, TYPE_GAFAS}, // 16 - Nada
	{19022,2, TYPE_GAFAS}, // 17 - Nada
	{19023,2, TYPE_GAFAS}, // 18 - Nada
	{19024,2, TYPE_GAFAS}, // 19 - Nada
	{19025,2, TYPE_GAFAS}, // 20 - Nada
	{19026,2, TYPE_GAFAS}, // 21 - Nada
	{19027,2, TYPE_GAFAS}, // 22 - Nada
	{19028,2, TYPE_GAFAS}, // 23 - Nada
	{19029,2, TYPE_GAFAS}, // 24 - Nada
	{19030,2, TYPE_GAFAS}, // 25 - Nada
	{19031,2, TYPE_GAFAS}, // 26 - Nada
	{19053,5, TYPE_RELOJES}, // 27 - Nada
	{19032,2, TYPE_GAFAS}, // 28 - Nada
	{19033,2, TYPE_GAFAS}, // 29 - Nada
	{19034,2, TYPE_GAFAS}, // 30 - Nada
	{19035,2, TYPE_GAFAS}, // 31 - Nada
	{19138,2, TYPE_GAFAS}, // 32 - Nada
	{19139,2, TYPE_GAFAS}, // 33 - Nada
	{18640,2, TYPE_PELO},  // 34 - Nada
	{18975,2, TYPE_PELO},  // 35 - Nada
	{19077,2, TYPE_PELO},  // 36 - Nada
	{19136,2, TYPE_PELO},  // 37 - Nada
	{19136,2, TYPE_PELO},  // 38 - Nada
	{19274,2, TYPE_PELO},   // 39 - Nada
	{18921,2, TYPE_BOINA},  // 40 - Nada
	{18922,2, TYPE_BOINA},  // 41 - Nada
	{18923,2, TYPE_BOINA},  // 42 - Nada
	{18924,2, TYPE_BOINA},  // 43 - Nada
	{18925,2, TYPE_BOINA},   // 44 - Nada
	{18926,2, TYPE_GORRAS},   // 45 - Nada
	{18927,2, TYPE_GORRAS},   // 46 - Nada
	{18928,2, TYPE_GORRAS},   // 47 - Nada
	{18929,2, TYPE_GORRAS},   // 48 - Nada
	{18930,2, TYPE_GORRAS},   // 49 - Nada
	{18931,2, TYPE_GORRAS},   // 50 - Nada
	{18932,2, TYPE_GORRAS},   // 51 - Nada
	{18933,2, TYPE_GORRAS},   // 52 - Nada
	{18934,2, TYPE_GORRAS},   // 53 - Nada
	{18935,2, TYPE_GORRAS},    // 54 - Nada
	{19039,5, TYPE_RELOJES},   // 55 - Nada
	{19040,5, TYPE_RELOJES},   // 56 - Nada
	{19041,5, TYPE_RELOJES},   // 57 - Nada
	{19042,5, TYPE_RELOJES},   // 58 - Nada
	{19043,5, TYPE_RELOJES},   // 59 - Nada
	{19044,5, TYPE_RELOJES},   // 60 - Nada
	{19045,5, TYPE_RELOJES},   // 61 - Nada
	{19046,5, TYPE_RELOJES},   // 62- Nada
	{19047,5, TYPE_RELOJES},   // 63 - Nada
	{19048,5, TYPE_RELOJES},   // 64 - Nada
	{19049,5, TYPE_RELOJES},   // 65 - Nada
	{19050,5, TYPE_RELOJES},   // 66 - Nada
	{19051,5, TYPE_RELOJES},   // 67 - Nada
	{19052,5, TYPE_RELOJES},   // 68 - Nada
	{18645,2, TYPE_CASCO},    // 69 - Nada
	{18976,2, TYPE_CASCO},    // 70 - Nada
	{18977,2, TYPE_CASCO},    // 71 - Nada
	{18978,2, TYPE_CASCO},    // 72 - Nada
	{18979,2, TYPE_CASCO},     // 73 - Nada
	{18642,6, TYPE_TASER}     // 74 - Nada
};
new Float:ObjectsPlayers[2][9]     =
{
	{0.3,0.05,-0.08,-10.0,-80.0,10.0,1.0,1.0,1.0},		// 00 - Maletín // /update 1210 5 0.3 0.05 -0.08 -10 -80 10 1 1 1
	{0.06, 0.01, 0.08, 180.0, 0.0, 0.0, 1.0,1.0,1.0}	// 01 - Taser  // /update 18642 6 0.06 0.01 0.08 180.0 0.0 0.0
};
new MovilesObjects[11] = {
    330,
	18865,
	18866,
	18867,
	18868,
	18869,
	18870,
	18871,
	18872,
	18873,
	18874
};
new Float:SkinesCascos[300][9] = {
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 0 || MotorcycleHelmet1 - NO
	{ 0.063893, 0.008419, 0.000000, 69.264198, 87.430633, 11.827832, 1.000000, 1.000000, 1.000000 }, // SKINID 1 || MotorcycleHelmet1 - SI
	{ 0.082401, 0.010075, 0.000000, 0.000000, 78.229309, 99.866622, 1.330634, 1.000000, 1.099319 }, // SKINID 2 || MotorcycleHelmet1 - SI
	{ 0.082401, 0.012487, 0.000000, 0.000000, 81.798553, 77.744796, 1.000000, 1.000000, 1.000000 }, // SKINID 3 || MotorcycleHelmet1 - SI
	{ 0.082401, 0.012487, 0.000000, 0.000000, 81.798553, 77.744796, 1.000000, 1.000000, 1.000000 }, // SKINID 4 || MotorcycleHelmet1 - SI
	{ 0.082401, 0.012487, 0.000000, 0.000000, 81.798553, 77.744796, 1.000000, 1.000000, 1.000000 }, // SKINID 5 || MotorcycleHelmet1 - SI
	{0.082401, 0.012487, 0.000000, 0.000000, 81.798553, 77.744796, 1.000000, 1.000000, 1.000000 }, // SKINID 6 || MotorcycleHelmet1 - SI
	{ 0.064673, 0.033285, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 7 || MotorcycleHelmet1 - SI
	{ 0.064673, 0.033285, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 8 || MotorcycleHelmet1 - NO
	{ 0.046243, 0.024402, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 9 || MotorcycleHelmet1 - SI
	{ 0.046243, 0.024402, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 10 || MotorcycleHelmet1 - SI
	{ 0.046243, 0.024402, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 11 || MotorcycleHelmet1 - SI
	{ 0.036347, 0.011780, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 12 || MotorcycleHelmet1 - SI
	{ 0.025228, 0.011780, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 13 || MotorcycleHelmet1 - SI
	{ 0.069039, 0.033799, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 14 || MotorcycleHelmet1 - SI
	{ 0.045800, -0.005477, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 15 || MotorcycleHelmet1 - SI
	{ 0.082179, 0.025758, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 16 || MotorcycleHelmet1 - SI
	{ 0.082179, 0.025758, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 17 || MotorcycleHelmet1 - SI
	{ 0.043310, 0.025758, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 18 || MotorcycleHelmet1 - SI
	{ 0.076837, 0.025758, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 19 || MotorcycleHelmet1 - SI
	{ 0.076837, 0.025758, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 20 || MotorcycleHelmet1 - SI
	{ 0.076837, 0.025758, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 21 || MotorcycleHelmet1 - SI
	{ 0.076837, 0.025758, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 22 || MotorcycleHelmet1 - SI
	{ 0.081527, 0.015231, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 23 || MotorcycleHelmet1 - SI
	{ 0.081527, 0.022255, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 24 || MotorcycleHelmet1 - SI
	{ 0.081527, 0.022255, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 25 || MotorcycleHelmet1 - SI
	{ 0.081527, 0.022255, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 26 || MotorcycleHelmet1 - SI
	{ 0.089542, 0.022255, 0.000000, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 27 || MotorcycleHelmet1 - SI
	{ 0.089542, 0.022255, 0.000000, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 28 || MotorcycleHelmet1 - SI
	{ 0.0, 0.022255, 0.000000, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 29 || MotorcycleHelmet1 - NO
	{ 0.065071, 0.022255, 0.000000, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 30 || MotorcycleHelmet1 - SI
	{ 0.0, 0.022255, 0.000000, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 31 || MotorcycleHelmet1 - NO
	{ 0.028938, 0.022255, 0.000000, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 32 || MotorcycleHelmet1 - SI
	{ -0.000755, 0.005750, 0.000000, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 33 || MotorcycleHelmet1 - SI
	{ 0.096637, 0.028542, 0.000000, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 34 || MotorcycleHelmet1 - SI
	{ 0.084942, 0.028542, 0.000821, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 35 || MotorcycleHelmet1 - SI
	{ 0.084942, 0.028542, 0.000821, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 36 || MotorcycleHelmet1 - SI
	{ 0.084942, 0.028542, 0.000821, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 37 || MotorcycleHelmet1 - SI
	{ 0.084942, 0.043490, 0.000821, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 38 || MotorcycleHelmet1 - SI
	{ 0.084942, 0.043490, 0.000821, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 39 || MotorcycleHelmet1 - SI
	{ 0.047616, -0.011005, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 40 || MotorcycleHelmet1 - SI
	{ 0.073332, 0.003941, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 41 || MotorcycleHelmet1 - SI
	{ 0.073332, 0.003941, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 42 || MotorcycleHelmet1 - NO
	{ 0.040072, 0.003941, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 43 || MotorcycleHelmet1 - SI
	{ 0.040072, 0.003941, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 44 || MotorcycleHelmet1 - SI
	{ 0.040072, 0.003941, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 45 || MotorcycleHelmet1 - SI
	{ 0.075100, 0.026033, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 46 || MotorcycleHelmet1 - SI
	{ 0.075100, 0.026033, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 47 || MotorcycleHelmet1 - SI
	{ 0.079862, 0.026033, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 48 || MotorcycleHelmet1 - SI
	{ 0.079862, 0.026033, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 49 || MotorcycleHelmet1 - SI
	{ 0.071502, -0.010506, 0.000000, 89.715873, 96.486831, 6.367833, 1.220247, 1.000000, 1.000000 }, // SKINID 50 || MotorcycleHelmet1 - SI.
	{ 0.094900, -0.000822, 0.000000, 89.715873, 96.486831, 6.367833, 1.156256, 1.000000, 1.000000 }, // SKINID 51 || MotorcycleHelmet1 - SI.
	{ 0.094900, -0.000822, 0.000000, 89.715873, 96.486831, 6.367833, 1.156256, 1.000000, 1.000000 }, // SKINID 52 || MotorcycleHelmet1 - SI.
	{ 0.070367, 0.047601, -0.003702, 89.715873, 96.486831, 6.367833, 1.006050, 1.000000, 1.000000 }, // SKINID 53 || MotorcycleHelmet1 - SI.
	{ 0.070367, 0.047601, -0.003702, 89.715873, 96.486831, 6.367833, 1.006050, 1.000000, 1.000000 }, // SKINID 54 || MotorcycleHelmet1 - SI.
	{ 0.070367, 0.003330, -0.003702, 89.715873, 96.486831, 6.367833, 1.206298, 1.000000, 0.968946 }, // SKINID 55 || MotorcycleHelmet1 - SI.
	{ 0.070367, 0.003330, -0.003702, 89.715873, 96.486831, 6.367833, 1.206298, 1.000000, 0.968946 }, // SKINID 56 || MotorcycleHelmet1 - SI.
	{ 0.089573, 0.026238, -0.003702, 89.715873, 96.486831, 6.367833, 0.950863, 1.000000, 0.981081 }, // SKINID 57 || MotorcycleHelmet1 - SI
	{ 0.037543, 0.015802, -0.003702, 89.715873, 96.486831, 6.367833, 0.884217, 1.000000, 0.981081 }, // SKINID 58 || MotorcycleHelmet1 - SI.
	{ 0.083339, 0.015802, -0.003702, 89.715873, 96.486831, 6.367833, 1.037051, 1.000000, 1.078135 }, // SKINID 59 || MotorcycleHelmet1 - SI.
	{ 0.083339, 0.015802, -0.003702, 89.715873, 96.486831, 6.367833, 1.037051, 1.000000, 1.078135 }, // SKINID 60 || MotorcycleHelmet1 - SI.
	{ 0.083339, 0.017691, -0.003702, 89.715873, 96.486831, 6.367833, 1.176779, 1.000000, 1.078135 }, // SKINID 61 || MotorcycleHelmet1 - SI.
	{ 0.059154, 0.029714, -0.003702, 89.715873, 96.486831, 6.367833, 0.926730, 1.000000, 1.078135 }, // SKINID 62 || MotorcycleHelmet1 - SI.
	{ 0.039980, 0.015173, -0.003702, 89.715873, 96.486831, 6.367833, 1.039675, 1.000000, 1.078135 }, // SKINID 63 || MotorcycleHelmet1 - SI.
	{ 0.039980, 0.015173, -0.003702, 89.715873, 96.486831, 6.367833, 1.039675, 1.000000, 1.078135 }, // SKINID 64 || MotorcycleHelmet1 - SI.
	{ 0.0, 0.015173, -0.003702, 89.715873, 96.486831, 6.367833, 1.039675, 1.000000, 1.078135 }, // SKINID 65 || MotorcycleHelmet1 - NO.
	{ 0.067476, 0.015173, -0.003702, 89.715873, 96.486831, 6.367833, 0.915247, 1.000000, 1.078135 }, // SKINID 66 || MotorcycleHelmet1 - SI.
	{ 0.067476, 0.015173, -0.003702, 89.715873, 96.486831, 6.367833, 0.915247, 1.000000, 1.078135 }, // SKINID 67 || MotorcycleHelmet1 - SI.
	{ 0.067476, 0.015173, -0.003702, 89.715873, 96.486831, 6.367833, 0.983779, 1.000000, 1.078135 }, // SKINID 68 || MotorcycleHelmet1 - SI.
	{ 0.067476, 0.015173, -0.003702, 89.715873, 96.486831, 6.367833, 0.983779, 1.000000, 1.078135 }, // SKINID 69 || MotorcycleHelmet1 - SI.
	{ 0.067476, 0.020542, -0.003702, 89.715873, 96.486831, 6.367833, 0.983779, 1.000000, 1.078135 }, // SKINID 70 || MotorcycleHelmet1 - SI.
	{ 0.067476, 0.025688, -0.003702, 89.715873, 96.486831, 6.367833, 1.084138, 1.000000, 1.078135 }, // SKINID 71 || MotorcycleHelmet1 - SI.
	{ 0.067476, 0.025688, -0.003702, 89.715873, 96.486831, 6.367833, 1.084138, 1.000000, 1.078135 }, // SKINID 72 || MotorcycleHelmet1 - SI.
	{ 0.067476, 0.025688, -0.003702, 89.715873, 96.486831, 6.367833, 1.084138, 1.000000, 1.078135 }, // SKINID 73 || MotorcycleHelmet1 - SI.
	{ 0.0, 0.025688, -0.003702, 89.715873, 96.486831, 6.367833, 1.084138, 1.000000, 1.078135 }, // SKINID 74 || MotorcycleHelmet1 - NO.
	{ 0.042678, 0.025688, -0.003702, 89.715873, 96.486831, 6.367833, 1.084138, 1.000000, 1.078135 }, // SKINID 75 || MotorcycleHelmet1 - SI.
	{ 0.042678, 0.010462, -0.003702, 89.715873, 96.486831, 6.367833, 1.084138, 1.000000, 1.078135 }, // SKINID 76 || MotorcycleHelmet1 - SI.
	{ 0.0, 0.010462, -0.003702, 89.715873, 96.486831, 6.367833, 1.084138, 1.000000, 1.078135 }, // SKINID 77 || MotorcycleHelmet1 - NO.
	{ 0.061191, 0.019165, -0.003702, 89.715873, 96.486831, 6.367833, 1.086820, 1.000000, 1.078135 }, // SKINID 78 || MotorcycleHelmet1 - SI.
	{ 0.061191, 0.019165, -0.003702, 89.715873, 96.486831, 6.367833, 1.086820, 1.000000, 1.078135 }, // SKINID 79 || MotorcycleHelmet1 - SI.
	{ 0.034503, 0.019165, -0.003702, 89.715873, 96.486831, 6.367833, 0.991727, 1.000000, 1.006440 }, // SKINID 80 || MotorcycleHelmet1 - SI.
	{ 0.034503, 0.019165, -0.003702, 89.715873, 96.486831, 6.367833, 0.991727, 1.000000, 1.006440 }, // SKINID 81 || MotorcycleHelmet1 - SI.
	{ 0.102640, 0.039447, -0.003702, 89.715873, 96.486831, 6.367833, 1.123702, 1.000000, 1.059899 }, // SKINID 82 || MotorcycleHelmet1 - SI.
	{ 0.102640, 0.039447, -0.003702, 89.715873, 96.486831, 6.367833, 1.123702, 1.000000, 1.059899 }, // SKINID 83 || MotorcycleHelmet1 - SI.
	{ 0.102640, 0.039447, -0.003702, 89.715873, 96.486831, 6.367833, 1.123702, 1.000000, 1.059899 }, // SKINID 84 || MotorcycleHelmet1 - SI.
	{ 0.055661, 0.028337, -0.003702, 89.715873, 96.486831, 6.367833, 1.123702, 1.000000, 1.059899 }, // SKINID 85 || MotorcycleHelmet1 - SI.
	{ 0.0, 0.028337, -0.003702, 89.715873, 96.486831, 6.367833, 1.123702, 1.000000, 1.059899 }, // SKINID 86 || MotorcycleHelmet1 - NO.
	{ 0.055661, 0.028337, -0.003702, 89.715873, 96.486831, 6.367833, 1.123702, 1.000000, 1.059899 }, // SKINID 87 || MotorcycleHelmet1 - SI.
	{ 0.055661, 0.028337, -0.003702, 89.715873, 96.486831, 6.367833, 0.966517, 1.000000, 1.059899 }, // SKINID 88 || MotorcycleHelmet1 - SI.
	{ 0.083799, 0.007824, -0.003702, 89.715873, 96.486831, 6.367833, 1.058513, 1.000000, 1.059899 }, // SKINID 89 || MotorcycleHelmet1 - SI.
	{ 0.046952, 0.007824, -0.003702, 89.715873, 96.486831, 6.367833, 1.058513, 1.000000, 1.059899 }, // SKINID 90 || MotorcycleHelmet1 - SI.
	{ 0.046952, 0.007824, -0.003702, 89.715873, 96.486831, 6.367833, 1.058513, 1.000000, 1.059899 }, // SKINID 91 || MotorcycleHelmet1 - SI.
	{ 0.046952, 0.007824, -0.003702, 89.715873, 96.486831, 6.367833, 1.058513, 1.000000, 1.059899 }, // SKINID 92 || MotorcycleHelmet1 - SI.
	{ 0.046952, 0.007824, -0.003702, 89.715873, 96.486831, 6.367833, 1.058513, 1.000000, 1.059899 }, // SKINID 93 || MotorcycleHelmet1 - SI.
	{ 0.046952, 0.015634, -0.003702, 89.715873, 96.486831, 6.367833, 0.958088, 1.000000, 0.873182 }, // SKINID 94 || MotorcycleHelmet1 - SI.
	{ 0.046952, 0.015634, -0.003702, 89.715873, 96.486831, 6.367833, 1.029447, 1.000000, 0.873182 }, // SKINID 95 || MotorcycleHelmet1 - SI.
	{ 0.069520, 0.015634, -0.003702, 89.715873, 96.486831, 6.367833, 1.023028, 1.000000, 0.937115 }, // SKINID 96 || MotorcycleHelmet1 - SI.
	{ 0.069520, 0.027443, -0.003702, 89.715873, 96.486831, 6.367833, 1.121912, 1.000000, 1.005367 }, // SKINID 97 || MotorcycleHelmet1 - SI.
	{ 0.069520, 0.027443, -0.003702, 89.715873, 96.486831, 6.367833, 1.020644, 1.000000, 1.005367 }, // SKINID 98 || MotorcycleHelmet1 - SI.
	{ 0.074331, 0.006538, -0.003702, 89.715873, 96.486831, 6.367833, 1.125367, 1.000000, 1.005367 }, // SKINID 99 || MotorcycleHelmet1 - SI.
	{ 0.079862, 0.026033, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 100 || MotorcycleHelmet1 - SI
	{ 0.079862, 0.026033, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 101 || MotorcycleHelmet1 - SI
	{ 0.079862, 0.004189, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 102 || MotorcycleHelmet1 - SI
	{ 0.071147, 0.020286, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 103 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 104 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 105 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 106 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 107 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 108 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 109 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 110 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 113 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 111 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 112 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 114 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 115 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 116 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 117 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 118 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 119 || MotorcycleHelmet1 - NO
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 120 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 121 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 122 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 123 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 124 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 125 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 126 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 127 || MotorcycleHelmet1 - SI
	{ 0.081310, 0.020286, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 128 || MotorcycleHelmet1 - SI
	{ 0.081310, 0.020286, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 129 || MotorcycleHelmet1 - SI
	{ 0.046783, 0.032432, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 130 || MotorcycleHelmet1 - SI
	{ 0.046783, 0.032432, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 131 || MotorcycleHelmet1 - SI
	{ -0.025336, 0.014666, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 132 || MotorcycleHelmet1 - SI
	{ 0.082529, 0.014666, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 133 || MotorcycleHelmet1 - SI
	{ 0.082529, 0.014666, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 134 || MotorcycleHelmet1 - SI
	{ 0.039577, 0.014666, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 135 || MotorcycleHelmet1 - SI
	{ 0.039577, 0.014666, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 136 || MotorcycleHelmet1 - SI
	{ 0.0, 0.014666, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 137 || MotorcycleHelmet1 - NO
	{ 0.049157, -0.012307, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 138 || MotorcycleHelmet1 - SI
	{ 0.049157, -0.012307, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 139 || MotorcycleHelmet1 - SI
	{ 0.068760, 0.003835, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 140 || MotorcycleHelmet1 - SI
	{ 0.068760, 0.003835, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 141 || MotorcycleHelmet1 - SI
	{ 0.068760, 0.003835, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 142 || MotorcycleHelmet1 - SI
	{ 0.068760, 0.006312, 0.003282, 0.917846, 81.798553, 77.744796, 1.442516, 1.000000, 1.000000 }, // SKINID 143 || MotorcycleHelmet1 - SI
	{ 0.068731, 0.014156, 0.000000, 78.394248, 66.939796, 0.000000, 1.145625, 1.000000, 1.196670 }, // SKINID 144 || MotorcycleHelmet1 - SI
	{ 0.068731, 0.014156, 0.000000, 78.394248, 66.939796, 0.000000, 1.145625, 1.000000, 1.196670 }, // SKINID 145 || MotorcycleHelmet1 - SI
	{ 0.068731, 0.014156, 0.000000, 78.394248, 66.939796, 0.000000, 1.145625, 1.000000, 1.196670 }, // SKINID 146 || MotorcycleHelmet1 - SI
	{ 0.029312, 0.014156, 0.000000, 78.394248, 66.939796, 0.000000, 1.145625, 1.000000, 1.196670 }, // SKINID 147 || MotorcycleHelmet1 - SI
	{ 0.029312, 0.014156, 0.000000, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 148 || MotorcycleHelmet1 - SI
	{ 0.0, 0.014156, 0.000000, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 149 || MotorcycleHelmet1 - NO
	{ 0.058838, -0.001575, 0.000000, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 150 || MotorcycleHelmet1 - SI
	{ 0.058838, 0.014999, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 151 || MotorcycleHelmet1 - SI
	{ 0.028017, -0.002800, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 152 || MotorcycleHelmet1 - SI
	{ 0.028017, 0.031918, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 153 || MotorcycleHelmet1 - SI
	{ 0.028017, 0.031918, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 154 || MotorcycleHelmet1 - SI
	{ 0.076935, 0.037744, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 155 || MotorcycleHelmet1 - SI
	{ 0.058837, 0.016789, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 156 || MotorcycleHelmet1 - SI
	{ 0.058837, 0.016789, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 157 || MotorcycleHelmet1 - SI
	{ 0.0, 0.016789, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 158 || MotorcycleHelmet1 - NO
	{ 0.058837, 0.028815, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 159 || MotorcycleHelmet1 - SI
	{ 0.058837, 0.028815, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 160 || MotorcycleHelmet1 - SI
	{ 0.077267, 0.002439, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 161 || MotorcycleHelmet1 - SI
	{ 0.077267, 0.002439, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 162 || MotorcycleHelmet1 - SI
	{ 0.077267, 0.002439, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 163 || MotorcycleHelmet1 - SI
	{ 0.077267, 0.002439, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 164 || MotorcycleHelmet1 - SI
	{ 0.077267, 0.002439, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 165 || MotorcycleHelmet1 - SI
	{ 0.077267, 0.002439, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 166 || MotorcycleHelmet1 - SI
	{ 0.0, 0.002439, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 167 || MotorcycleHelmet1 - NO
	{ 0.077267, 0.002439, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 168 || MotorcycleHelmet1 - SI
	{ 0.061352, -0.005744, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 169 || MotorcycleHelmet1 - SI
	{ 0.061352, -0.005744, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 170 || MotorcycleHelmet1 - SI
	{ 0.061352, -0.005744, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 171 || MotorcycleHelmet1 - SI
	{ 0.061352, -0.005744, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 172 || MotorcycleHelmet1 - SI
	{ 0.069895, 0.021228, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 173 || MotorcycleHelmet1 - SI
	{ 0.069895, 0.021228, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 174 || MotorcycleHelmet1 - SI
	{ 0.069895, 0.021228, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 175 || MotorcycleHelmet1 - SI
	{ 0.069895, 0.021228, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 176 || MotorcycleHelmet1 - SI
	{ 0.093134, 0.021228, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 177 || MotorcycleHelmet1 - SI
	{ 0.068663, 0.021228, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 178 || MotorcycleHelmet1 - SI
	{ 0.068663, 0.021228, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 179 || MotorcycleHelmet1 - SI
	{ 0.068663, 0.021228, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 180 || MotorcycleHelmet1 - SI
	{ 0.111742, 0.015187, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 181 || MotorcycleHelmet1 - SI
	{ 0.071245, 0.015187, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 182 || MotorcycleHelmet1 - SI
	{ 0.071245, 0.015187, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 183 || MotorcycleHelmet1 - SI
	{ 0.071245, 0.015187, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 184 || MotorcycleHelmet1 - SI
	{ 0.071245, 0.015187, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 185 || MotorcycleHelmet1 - SI
	{ 0.071245, 0.015187, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 186 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.015187, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 187 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.015187, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 188 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.015187, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 189 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.015187, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 190 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.022189, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 191 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 192 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 193 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 194 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 195 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 196 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 197 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 198 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 199 || MotorcycleHelmet1 - SI
	{ 0.059031, 0.037007, -0.003702, 89.715873, 96.486831, 6.367833, 1.223210, 1.000000, 1.110052 }, // SKINID 200 || MotorcycleHelmet1 - SI.
	{ 0.059031, 0.037007, -0.003702, 89.715873, 96.486831, 6.367833, 1.105433, 1.000000, 1.110052 }, // SKINID 201 || MotorcycleHelmet1 - SI.
	{ 0.059031, 0.037007, -0.003702, 89.715873, 96.486831, 6.367833, 1.050121, 1.000000, 1.110052 }, // SKINID 202 || MotorcycleHelmet1 - SI.
	{ 0.059031, 0.030286, -0.003702, 89.715873, 96.486831, 6.367833, 1.050121, 1.000000, 1.110052 }, // SKINID 203 || MotorcycleHelmet1 - SI.
	{ 0.059031, 0.030286, -0.003702, 89.715873, 96.486831, 6.367833, 1.050121, 1.000000, 1.110052 }, // SKINID 204 || MotorcycleHelmet1 - SI.
	{ 0.0, 0.030286, -0.003702, 89.715873, 96.486831, 6.367833, 1.050121, 1.000000, 1.110052 }, // SKINID 205 || MotorcycleHelmet1 - NO.
	{ 0.086275, 0.030286, -0.003702, 89.715873, 96.486831, 6.367833, 1.050121, 1.000000, 1.110052 }, // SKINID 206 || MotorcycleHelmet1 - SI.
	{ 0.040006, 0.030286, -0.003702, 89.715873, 96.486831, 6.367833, 1.050121, 1.000000, 1.110052 }, // SKINID 207 || MotorcycleHelmet1 - SI.
	{ 0.065322, 0.030286, -0.003702, 89.715873, 96.486831, 6.367833, 1.050121, 1.000000, 1.110052 }, // SKINID 208 || MotorcycleHelmet1 - NO.
	{ 0.065322, 0.030286, -0.003702, 89.715873, 96.486831, 6.367833, 1.006660, 1.000000, 1.021481 }, // SKINID 209 || MotorcycleHelmet1 - SI.
	{ 0.065322, 0.030286, -0.003702, 89.715873, 96.486831, 6.367833, 1.006660, 1.000000, 1.021481 }, // SKINID 210 || MotorcycleHelmet1 - SI.
	{ 0.065322, 0.009842, -0.003702, 89.715873, 96.486831, 6.367833, 1.019046, 1.000000, 1.021481 }, // SKINID 211 || MotorcycleHelmet1 - SI.
	{ 0.065322, 0.029749, -0.003702, 89.715873, 96.486831, 6.367833, 0.909220, 1.000000, 1.021481 }, // SKINID 212 || MotorcycleHelmet1 - SI.
	{ 0.065322, 0.022352, -0.003702, 89.715873, 96.486831, 6.367833, 1.014164, 1.000000, 1.021481 }, // SKINID 213 || MotorcycleHelmet1 - SI.
	{ 0.065322, 0.006548, -0.003702, 89.715873, 96.486831, 6.367833, 1.014164, 1.000000, 1.021481 }, // SKINID 214 || MotorcycleHelmet1 - SI.
	{ 0.0, 0.006548, -0.003702, 89.715873, 96.486831, 6.367833, 1.014164, 1.000000, 1.021481 }, // SKINID 215 || MotorcycleHelmet1 - NO.
	{ 0.065322, 0.006548, -0.003702, 89.715873, 96.486831, 6.367833, 1.014164, 1.000000, 1.021481 }, // SKINID 216 || MotorcycleHelmet1 - SI.
	{ 0.065322, 0.030664, -0.003702, 89.715873, 96.486831, 6.367833, 1.014164, 1.000000, 1.021481 }, // SKINID 217 || MotorcycleHelmet1 - SI.
	{ 0.071801, 0.013245, -0.003702, 89.715873, 96.486831, 6.367833, 1.044428, 1.000000, 1.021481 }, // SKINID 218 || MotorcycleHelmet1 - SI.
	{ 0.045664, 0.013245, -0.003702, 89.715873, 96.486831, 6.367833, 1.044428, 1.000000, 1.021481 }, // SKINID 219 || MotorcycleHelmet1 - SI.
	{ 0.045664, 0.023454, -0.003702, 89.715873, 96.486831, 6.367833, 1.044428, 1.000000, 1.021481 }, // SKINID 220 || MotorcycleHelmet1 - SI.
	{ 0.063059, 0.008899, -0.003702, 89.715873, 96.486831, 6.367833, 1.105615, 1.000000, 1.021481 }, // SKINID 221 || MotorcycleHelmet1 - SI.
	{ 0.063059, 0.004834, -0.003702, 89.715873, 96.486831, 6.367833, 1.105615, 1.000000, 1.021481 }, // SKINID 222 || MotorcycleHelmet1 - SI.
	{ 0.086894, 0.025422, -0.003702, 89.715873, 96.486831, 6.367833, 1.105615, 1.000000, 1.021481 }, // SKINID 223 || MotorcycleHelmet1 - SI.
	{ 0.039299, 0.008744, -0.003702, 89.715873, 96.486831, 6.367833, 0.989521, 1.000000, 1.021481 }, // SKINID 224 || MotorcycleHelmet1 - SI.
	{ 0.042440, 0.008744, -0.003702, 89.715873, 96.486831, 6.367833, 0.989521, 1.000000, 1.021481 }, // SKINID 225 || MotorcycleHelmet1 - SI.
	{ 0.042440, 0.005189, 0.003060, 89.715873, 96.486831, 6.367833, 1.014706, 1.000000, 1.021481 }, // SKINID 226 || MotorcycleHelmet1 - SI.
	{ 0.069509, 0.028704, 0.003060, 89.715873, 96.486831, 6.367833, 1.014706, 1.000000, 1.021481 }, // SKINID 227 || MotorcycleHelmet1 - SI.
	{ 0.070585, 0.021329, 0.003060, 89.715873, 96.486831, 6.367833, 1.101840, 1.000000, 1.021481 }, // SKINID 228 || MotorcycleHelmet1 - SI.
	{ 0.058221, 0.021329, 0.003060, 89.715873, 96.486831, 6.367833, 1.012374, 1.000000, 1.021481 }, // SKINID 229 || MotorcycleHelmet1 - SI.
	{ 0.058221, 0.021329, 0.003060, 89.715873, 96.486831, 6.367833, 1.012374, 1.000000, 1.021481 }, // SKINID 230 || MotorcycleHelmet1 - SI.
	{ 0.072018, 0.021329, 0.003060, 89.715873, 96.486831, 6.367833, 1.065725, 1.000000, 1.021481 }, // SKINID 231 || MotorcycleHelmet1 - SI.
	{ 0.047198, 0.002333, 0.000000, 84.169067, 66.729423, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 232 || MotorcycleHelmet1 - SI.
	{ 0.059938, 0.021329, 0.003060, 89.715873, 96.486831, 6.367833, 1.065725, 1.000000, 1.021481 }, // SKINID 233 || MotorcycleHelmet1 - SI.
	{ 0.059938, 0.021329, 0.003060, 89.715873, 96.486831, 6.367833, 1.065725, 1.000000, 1.021481 }, // SKINID 234 || MotorcycleHelmet1 - SI.
	{ 0.035589, 0.021329, 0.003060, 89.715873, 96.486831, 6.367833, 1.065725, 1.000000, 1.021481 }, // SKINID 235 || MotorcycleHelmet1 - SI.
	{ 0.035589, 0.021329, 0.003060, 89.715873, 96.486831, 6.367833, 1.065725, 1.000000, 1.021481 }, // SKINID 236 || MotorcycleHelmet1 - SI.
	{ 0.035589, 0.021329, 0.003060, 89.715873, 96.486831, 6.367833, 1.065725, 1.000000, 1.021481 }, // SKINID 237 || MotorcycleHelmet1 - SI.
	{ 0.035589, 0.021329, 0.003060, 89.715873, 96.486831, 6.367833, 1.065725, 1.000000, 1.021481 }, // SKINID 238 || MotorcycleHelmet1 - SI.
	{ 0.051785, 0.021329, 0.003060, 89.715873, 96.486831, 6.367833, 1.065725, 1.000000, 1.021481 }, // SKINID 239 || MotorcycleHelmet1 - SI.
	{ 0.065339, 0.016573, 0.003060, 89.715873, 96.486831, 6.367833, 1.065725, 1.000000, 1.021481 }, // SKINID 240 || MotorcycleHelmet1 - SI.
	{ 0.0, 0.016573, 0.003060, 89.715873, 96.486831, 6.367833, 1.065725, 1.000000, 1.021481 }, // SKINID 241 || MotorcycleHelmet1 - NO.
	{ 0.0, 0.016573, 0.003060, 89.715873, 96.486831, 6.367833, 1.065725, 1.000000, 1.021481 }, // SKINID 242 || MotorcycleHelmet1 - NO.
	{ 0.065339, 0.016573, 0.003060, 89.715873, 96.486831, 6.367833, 1.065725, 1.000000, 1.021481 }, // SKINID 243 || MotorcycleHelmet1 - SI.
	{ 0.065339, 0.036559, -0.004551, 89.715873, 96.486831, 6.367833, 1.065725, 1.000000, 1.021481 }, // SKINID 244 || MotorcycleHelmet1 - SI.
	{ 0.065339, 0.016950, 0.010980, 89.715873, 96.486831, 6.367833, 1.263960, 1.000000, 1.021481 }, // SKINID 245 || MotorcycleHelmet1 - SI.
	{ 0.085716, 0.045513, 0.010980, 89.715873, 96.486831, 6.367833, 1.220781, 1.000000, 1.144201 }, // SKINID 246 || MotorcycleHelmet1 - SI.
	{ 0.085716, 0.024827, 0.010980, 89.715873, 96.486831, 6.367833, 1.220781, 1.000000, 1.144201 }, // SKINID 247 || MotorcycleHelmet1 - SI.
	{ 0.085716, 0.024827, 0.010980, 89.715873, 96.486831, 6.367833, 1.220781, 1.000000, 1.144201 }, // SKINID 248 || MotorcycleHelmet1 - SI.
	{ 0.0, 0.022424, 0.010980, 89.715873, 96.486831, 6.367833, 1.220781, 1.000000, 1.144201 }, // SKINID 249 || MotorcycleHelmet1 - NO.
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 250 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 251 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 252 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 253 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 254 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 255 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 256 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 257 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 258 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 259 || MotorcycleHelmet1 - SI
	{ 0.086501, 0.030875, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 260 || MotorcycleHelmet1 - SI
	{ 0.071553, 0.008856, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 261 || MotorcycleHelmet1 - SI
	{ 0.071553, 0.008856, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 262 || MotorcycleHelmet1 - SI
	{ 0.044580, -0.002710, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 263 || MotorcycleHelmet1 - SI
	{ 0.0, -0.002710, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 264 || MotorcycleHelmet1 - NO
	{ 0.044580, -0.002710, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 265 || MotorcycleHelmet1 - SI
	{ 0.044580, -0.002710, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 266 || MotorcycleHelmet1 - SI
	{ 0.044580, -0.002710, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 267 || MotorcycleHelmet1 - SI
	{ 0.044580, -0.002710, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 268 || MotorcycleHelmet1 - SI
	{ 0.090989, 0.007476, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 269 || MotorcycleHelmet1 - SI
	{ 0.065273, 0.028286, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 270 || MotorcycleHelmet1 - SI
	{ 0.065273, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 271 || MotorcycleHelmet1 - SI
	{ 0.065273, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 272 || MotorcycleHelmet1 - SI
	{ 0.0, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 273 || MotorcycleHelmet1 - NO
	{ 0.065273, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 274 || MotorcycleHelmet1 - SI
	{ 0.065273, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 275 || MotorcycleHelmet1 - SI
	{ 0.065273, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 276 || MotorcycleHelmet1 - SI
	{ 0.0, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 277 || MotorcycleHelmet1 - NO
	{ 0.0, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 278 || MotorcycleHelmet1 - NO
	{ 0.0, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 279 || MotorcycleHelmet1 - NO
	{ 0.065273, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 280 || MotorcycleHelmet1 - SI
	{ 0.065273, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 281 || MotorcycleHelmet1 - SI
	{ 0.065273, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 282 || MotorcycleHelmet1 - SI
	{ 0.065273, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 283 || MotorcycleHelmet1 - SI
	{ 0.0, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 284 || MotorcycleHelmet1 - NO
	{ 0.065273, 0.037421, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 285 || MotorcycleHelmet1 - SI
	{ 0.065273, 0.037421, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 286 || MotorcycleHelmet1 - SI
	{ 0.0, 0.037421, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 287 || MotorcycleHelmet1 - NO
	{ 0.072866, 0.029292, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 288 || MotorcycleHelmet1 - SI
	{ 0.072866, 0.029292, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 289 || MotorcycleHelmet1 - NO
	{ 0.072866, 0.029292, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 290 || MotorcycleHelmet1 - SI
	{ 0.072866, 0.029292, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 291 || MotorcycleHelmet1 - SI
	{ 0.033589, 0.006053, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 292 || MotorcycleHelmet1 - SI
	{ 0.076561, 0.006053, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 293 || MotorcycleHelmet1 - SI
	{ 0.076561, 0.006053, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 294 || MotorcycleHelmet1 - SI
	{ 0.036064, 0.006053, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 295 || MotorcycleHelmet1 - SI
	{ 0.036064, 0.006053, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 296 || MotorcycleHelmet1 - SI
	{ 0.070575, 0.006053, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 297 || MotorcycleHelmet1 - SI
	{ 0.070575, 0.006053, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 298 || MotorcycleHelmet1 - SI
	{ 0.070575, 0.035112, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }  // SKINID 299 || MotorcycleHelmet1 - SI
};
new Float:SkinesRelojes[300][9] = {
	{ -0.019999, -0.014000, -0.006000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 0.0 }, // SKINID 0 || WatchType1 -
	{ -0.019999, -0.004000, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 1 || WatchType1 - 
	{ -0.019999, -0.004000, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 0.0 }, // SKINID 2 || WatchType1 - NO
	{ -0.004999, -0.004999, 0.000000, 0.000000, 90.000000, 180.000000, 1.299999, 1.100000, 1.100000 }, // SKINID 3 || WatchType1 - NO
	{ 0.009999, 0.002000, -0.004999, 0.000000, 90.000000, 180.000000, 1.100000, 1.100000, 1.100000 }, // SKINID 4 || WatchType1 - NO
	{ -0.009999, -0.004999, -0.004999, 0.000000, 90.000000, 180.000000, 1.399999, 1.700000, 1.100000 }, // SKINID 5 || WatchType1 - NO
	{ -0.019999, -0.004000, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 0.0 }, // SKINID 6 || WatchType1 - NO
	{ -0.019999, -0.004000, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 0.0 }, // SKINID 7 || WatchType1 - NO
	{ -0.009999, -0.008000, 0.004999, 0.000000, 90.000000, 180.000000, 1.200000, 1.299999, 1.100000 }, // SKINID 8 || WatchType1 - NO
	{ -0.019999, -0.004000, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 0.0 }, // SKINID 9 || WatchType1 - NO
	{ -0.019999, -0.004000, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 0.0 }, // SKINID 10 || WatchType1 - NO
	{ 0.000000, -0.009999, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 11 || WatchType1 -
	{ 0.000000, -0.009999, 0.000000, 0.000000, 90.000000, 180.000000, 0.699999, 0.800000, 0.0 }, // SKINID 12 || WatchType1 - NO
	{ 0.000000, -0.014999, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 13 || WatchType1 -
	{ -0.009999, -0.009999, 0.009999, 10.000000, 90.000000, 170.000000, 1.000000, 1.399999, 1.000000 }, // SKINID 14 || WatchType1 -
	{ -0.019999, -0.017000, 0.009999, 10.000000, 90.000000, 170.000000, 1.299999, 1.100000, 1.000000 }, // SKINID 15 || WatchType1 -
	{ -0.019999, -0.017000, 0.009999, 10.000000, 90.000000, 170.000000, 1.299999, 1.100000, 0.0 }, // SKINID 16 || WatchType1 - NO
	{ -0.019999, -0.017000, 0.009999, 10.000000, 90.000000, 170.000000, 1.299999, 1.100000, 0.0 }, // SKINID 17 || WatchType1 - NO
	{ -0.019999, -0.017000, 0.009999, 10.000000, 90.000000, 170.000000, 1.299999, 1.100000, 1.000000 }, // SKINID 18 || WatchType1 -
	{ -0.035000, -0.009999, 0.000000, 0.000000, 90.000000, 190.000000, 1.100000, 1.700000, 0.0 }, // SKINID 19 || WatchType1 - NO
	{ -0.035000, -0.009999, 0.000000, 0.000000, 90.000000, 190.000000, 1.100000, 1.700000, 0.0 }, // SKINID 20 || WatchType1 - NO
	{ 0.000000, -0.009999, -0.004999, 0.000000, 90.000000, 190.000000, 1.200000, 1.299999, 1.000000 }, // SKINID 21 || WatchType1 -
	{ 0.000000, -0.009999, -0.004999, 0.000000, 90.000000, 190.000000, 1.200000, 1.299999, 0.0 }, // SKINID 22 || WatchType1 - NO
	{ 0.000000, 0.000000, -0.009999, 0.000000, 90.000000, 190.000000, 1.200000, 1.299999, 1.000000 }, // SKINID 23 || WatchType1 -
	{ -0.004999, -0.012000, -0.009999, 0.000000, 90.000000, 190.000000, 1.379999, 1.299999, 1.000000 }, // SKINID 24 || WatchType1 -
	{ -0.004999, -0.012000, -0.009999, 0.000000, 90.000000, 190.000000, 1.379999, 1.299999, 1.000000 }, // SKINID 25 || WatchType1 -
	{ -0.004999, -0.006000, 0.000000, 0.000000, 90.000000, 190.000000, 1.000000, 1.360000, 1.000000 }, // SKINID 26 || WatchType1 -
	{ -0.004999, -0.006000, 0.000000, 0.000000, 90.000000, 190.000000, 1.000000, 1.360000, 0.0 }, // SKINID 27 || WatchType1 - NO
	{ -0.004999, -0.006000, -0.004999, 0.000000, 90.000000, 190.000000, 1.100000, 1.360000, 1.000000 }, // SKINID 28 || WatchType1 -
	{ 0.009999, 0.000000, -0.008000, 0.000000, 90.000000, 180.000000, 1.399999, 1.399999, 1.000000 }, // SKINID 29 || WatchType1 -
	{ -0.004999, -0.006000, -0.004999, 0.000000, 90.000000, 190.000000, 1.100000, 1.360000, 1.000000 }, // SKINID 30 || WatchType1 -
	{ 0.000000, -0.050000, 0.004999, 0.000000, 90.000000, 190.000000, 1.100000, 1.360000, 1.000000 }, // SKINID 31 || WatchType1 -
	{ 0.000000, -0.009999, -0.014999, 0.000000, 90.000000, 190.000000, 0.899999, 0.899999, 1.000000 }, // SKINID 32 || WatchType1 -
	{ 0.000000, -0.009999, -0.014999, 0.000000, 90.000000, 190.000000, 0.899999, 0.899999, 0.0 }, // SKINID 33 || WatchType1 - NO
	{ 0.000000, -0.004000, 0.004999, 0.000000, 90.000000, 190.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 34 || WatchType1 -
	{ -0.050000, -0.004000, 0.000000, 0.000000, 90.000000, 190.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 35 || WatchType1 -
	{ -0.050000, -0.004000, 0.000000, 0.000000, 90.000000, 190.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 36 || WatchType1 -
	{ -0.050000, -0.004000, 0.000000, 0.000000, 90.000000, 190.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 37 || WatchType1 -
	{ -0.017999, -0.004000, 0.004999, 0.000000, 90.000000, 190.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 38 || WatchType1 -
	{ -0.017999, -0.004000, 0.004999, 0.000000, 90.000000, 190.000000, 1.000000, 1.000000, 0.0 }, // SKINID 39 || WatchType1 - NO
	{ -0.017999, -0.009999, -0.004999, 0.000000, 90.000000, 190.000000, 0.899999, 1.049999, 1.000000 }, // SKINID 40 || WatchType1 -
	{ -0.017999, -0.009999, -0.004999, 0.000000, 90.000000, 190.000000, 1.000000, 1.149999, 1.000000 }, // SKINID 41 || WatchType1 -
	{ -0.009999, -0.008000, 0.004999, 0.000000, 90.000000, 180.000000, 1.200000, 1.299999, 1.100000 }, // SKINID 42 || WatchType1 - NO
	{ -0.017999, -0.009999, -0.004999, 0.000000, 90.000000, 190.000000, 1.000000, 1.149999, 0.0 }, // SKINID 43 || WatchType1 - NO
	{ -0.017999, 0.000000, 0.000000, 0.000000, 90.000000, 190.000000, 0.800000, 1.000000, 1.000000 }, // SKINID 44 || WatchType1 -
	{ -0.017999, -0.014999, 0.004999, 0.000000, 90.000000, 190.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 45 || WatchType1 -
	{ -0.004999, -0.009999, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 46 || WatchType1 -
	{ -0.004999, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.100000, 1.399999, 1.000000 }, // SKINID 47 || WatchType1 -
	{ -0.004999, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.100000, 1.399999, 1.000000 }, // SKINID 48 || WatchType1 -
	{ -0.004999, -0.004999, 0.000000, 0.000000, 90.000000, 180.000000, 0.899999, 0.899999, 1.000000 }, // SKINID 49 || WatchType1 -
	{ -0.004999, -0.004999, 0.000000, 0.000000, 90.000000, 180.000000, 0.899999, 0.899999, 0.0 }, // SKINID 50 || WatchType1 - NO
	{ -0.007000, -0.006000, 0.004999, 0.000000, 90.000000, 180.000000, 1.299999, 1.200000, 1.000000 }, // SKINID 51 || WatchType1 -
	{ -0.007000, -0.006000, 0.004999, 0.000000, 90.000000, 180.000000, 1.299999, 1.200000, 1.000000 }, // SKINID 52 || WatchType1 -
	{ -0.007000, -0.006000, 0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 53 || WatchType1 -
	{ -0.007000, -0.006000, 0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 0.0 }, // SKINID 54 || WatchType1 - NO
	{ -0.007000, -0.006000, -0.004000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 55 || WatchType1 -
	{ -0.007000, -0.006000, -0.004000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 0.0 }, // SKINID 56 || WatchType1 - NO
	{ -0.007000, -0.006000, -0.004000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 0.0 }, // SKINID 57 || WatchType1 - NO
	{ -0.007000, -0.006000, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 58 || WatchType1 -
	{ -0.007000, -0.006000, 0.000000, 0.000000, 90.000000, 180.000000, 1.200000, 1.100000, 1.000000 }, // SKINID 59 || WatchType1 -
	{ -0.007000, -0.010999, -0.004999, 0.000000, 90.000000, 180.000000, 1.100000, 1.399999, 1.000000 }, // SKINID 60 || WatchType1 -
	{ -0.007000, -0.010999, -0.004999, 0.000000, 90.000000, 180.000000, 1.100000, 1.399999, 0.0 }, // SKINID 61 || WatchType1 - NO
	{ -0.007000, -0.010999, -0.004999, 0.000000, 90.000000, 180.000000, 1.100000, 1.399999, 0.0 }, // SKINID 62 || WatchType1 - NO
	{ -0.007000, -0.010999, 0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 63 || WatchType1 -
	{ -0.007000, -0.010999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 64 || WatchType1 -
	{ -0.009999, -0.014999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.100000 }, // SKINID 65 || WatchType1 - NO
	{ -0.007000, -0.010999, -0.004999, 0.000000, 90.000000, 180.000000, 1.299999, 1.299999, 1.000000 }, // SKINID 66 || WatchType1 -
	{ -0.007000, -0.010999, -0.004999, 0.000000, 90.000000, 180.000000, 1.299999, 1.299999, 1.000000 }, // SKINID 67 || WatchType1 -
	{ -0.007000, -0.010999, -0.004999, 0.000000, 90.000000, 180.000000, 1.299999, 1.299999, 0.0 }, // SKINID 68 || WatchType1 - NO
	{ -0.007000, -0.004999, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 69 || WatchType1 -
	{ -0.007000, -0.004999, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 0.0 }, // SKINID 70 || WatchType1 - NO
	{ -0.007000, -0.009999, 0.000000, 0.000000, 90.000000, 180.000000, 1.200000, 1.200000, 1.000000 }, // SKINID 71 || WatchType1 -
	{ -0.007000, -0.014999, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 72 || WatchType1 -
	{ -0.007000, -0.014999, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 73 || WatchType1 -
	{ -0.007000, -0.014999, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 0.0 }, // SKINID 74 || WatchType1 - NO
	{ -0.007000, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.299999, 1.000000 }, // SKINID 75 || WatchType1 -
	{ -0.007000, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.299999, 0.0 }, // SKINID 76 || WatchType1 - NO
	{ -0.007000, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.299999, 0.0 }, // SKINID 77 || WatchType1 - NO
	{ -0.007000, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.299999, 0.0 }, // SKINID 78 || WatchType1 - NO
	{ -0.007000, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.299999, 0.0 }, // SKINID 79 || WatchType1 - NO
	{ -0.007000, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.299999, 0.0 }, // SKINID 80 || WatchType1 - NO
	{ -0.007000, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.299999, 0.0 }, // SKINID 81 || WatchType1 - NO
	{ -0.007000, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.299999, 0.0 }, // SKINID 82 || WatchType1 - NO
	{ -0.007000, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.299999, 0.0 }, // SKINID 83 || WatchType1 - NO
	{ -0.007000, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.299999, 0.0 }, // SKINID 84 || WatchType1 - NO
	{ -0.007000, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.299999, 0.0 }, // SKINID 85 || WatchType1 - NO
	{ -0.007000, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.299999, 0.0 }, // SKINID 86 || WatchType1 - NO
	{ -0.007000, -0.007000, -0.002000, 0.000000, 90.000000, 180.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 87 || WatchType1 -
	{ -0.007000, -0.007000, 0.025000, 0.000000, 90.000000, 180.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 88 || WatchType1 -
	{ -0.007000, -0.007000, 0.025000, 0.000000, 90.000000, 180.000000, 1.000000, 1.100000, 0.0 }, // SKINID 89 || WatchType1 - NO
	{ -0.007000, -0.007000, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 90 || WatchType1 -
	{ -0.007000, -0.007000, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 91 || WatchType1 -
	{ -0.007000, -0.007000, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 92 || WatchType1 -
	{ -0.007000, -0.007000, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 93 || WatchType1 -
	{ -0.007000, -0.007000, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 0.899999, 1.000000 }, // SKINID 94 || WatchType1 -
	{ -0.007000, -0.007000, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 0.899999, 1.000000 }, // SKINID 95 || WatchType1 -
	{ -0.007000, -0.017999, 0.004999, 0.000000, 90.000000, 180.000000, 1.100000, 1.299999, 1.000000 }, // SKINID 96 || WatchType1 -
	{ -0.007000, -0.050000, 0.009999, 180.000000, 270.000000, 0.000000, 1.100000, 1.299999, 1.000000 }, // SKINID 97 || WatchType1 -
	{ -0.019999, -0.008000, -0.003000, 90.000000, 90.000000, 90.000000, 1.100000, 1.370000, 1.000000 }, // SKINID 98 || WatchType1 -
	{ -0.019999, -0.008000, 0.004999, 90.000000, 90.000000, 90.000000, 1.100000, 1.200000, 1.000000 }, // SKINID 99 || WatchType1 -
	{ -0.009999, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 1.000000 }, // SKINID 100 || WatchType1 -
	{ -0.009999, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 0.0 }, // SKINID 101 || WatchType1 - NO
	{ -0.009999, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 1.000000 }, // SKINID 102 || WatchType1 -
	{ -0.009999, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 0.0 }, // SKINID 103 || WatchType1 - NO
	{ -0.009999, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 1.000000 }, // SKINID 104 || WatchType1 -
	{ -0.009999, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 0.0 }, // SKINID 105 || WatchType1 - NO
	{ -0.009999, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 1.000000 }, // SKINID 106 || WatchType1 -
	{ -0.009999, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 1.000000 }, // SKINID 107 || WatchType1 -
	{ -0.009999, 0.000000, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.299999, 1.000000 }, // SKINID 108 || WatchType1 -
	{ -0.029999, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 1.000000 }, // SKINID 109 || WatchType1 -
	{ -0.029999, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 1.000000 }, // SKINID 110 || WatchType1 -
	{ -0.029999, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 0.0 }, // SKINID 111 || WatchType1 - NO
	{ -0.029999, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 0.0 }, // SKINID 112 || WatchType1 - NO
	{ -0.029999, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 0.0 }, // SKINID 113 || WatchType1 - NO
	{ -0.029999, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 1.000000 }, // SKINID 114 || WatchType1 -
	{ -0.029999, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 0.0 }, // SKINID 115 || WatchType1 - NO
	{ -0.029999, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 1.000000 }, // SKINID 116 || WatchType1 -
	{ -0.029999, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 0.0 }, // SKINID 117 || WatchType1 - NO
	{ -0.029999, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 0.0 }, // SKINID 118 || WatchType1 - NO
	{ -0.009999, -0.014999, 0.004999, 0.000000, 90.000000, 180.000000, 1.149999, 1.149999, 1.100000 }, // SKINID 119 || WatchType1 - NO
	{ -0.029999, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 0.0 }, // SKINID 120 || WatchType1 - NO
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 1.000000 }, // SKINID 121 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 1.000000 }, // SKINID 122 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 0.0 }, // SKINID 123 || WatchType1 - NO
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.200000, 1.200000, 1.000000 }, // SKINID 124 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.200000, 1.200000, 0.0 }, // SKINID 125 || WatchType1 - NO
	{ -0.019999, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.200000, 1.299999, 1.000000 }, // SKINID 126 || WatchType1 -
	{ -0.019999, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.200000, 1.299999, 0.0 }, // SKINID 127 || WatchType1 - NO
	{ -0.019999, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.200000, 1.299999, 1.000000 }, // SKINID 128 || WatchType1 -
	{ -0.019999, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.200000, 1.299999, 0.0 }, // SKINID 129 || WatchType1 - NO
	{ -0.019999, -0.029999, 0.009999, 90.000000, 90.000000, 90.000000, 1.200000, 1.299999, 1.000000 }, // SKINID 130 || WatchType1 -
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 131 || WatchType1 -
	{ 0.000000, -0.009999, -0.009999, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 132 || WatchType1 -
	{ 0.000000, -0.009999, 0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.500000, 1.000000 }, // SKINID 133 || WatchType1 -
	{ 0.000000, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 134 || WatchType1 -
	{ 0.000000, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 0.0 }, // SKINID 135 || WatchType1 - NO
	{ 0.000000, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 0.0 }, // SKINID 136 || WatchType1 - NO
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 137 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 138 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 139 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 140 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 0.0 }, // SKINID 141 || WatchType1 - NO
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.500000, 1.000000 }, // SKINID 142 || WatchType1 -
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.500000, 0.0 }, // SKINID 143 || WatchType1 - NO
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.500000, 1.000000 }, // SKINID 144 || WatchType1 -
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 145 || WatchType1 -
	{ 0.000000, -0.009999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.299999, 1.000000 }, // SKINID 146 || WatchType1 -
	{ 0.000000, -0.009999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.299999, 0.0 }, // SKINID 147 || WatchType1 - NO
	{ 0.000000, -0.009999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.299999, 0.0 }, // SKINID 148 || WatchType1 - NO
	{ -0.009999, -0.009999, 0.000000, 0.000000, 90.000000, 180.000000, 1.149999, 1.399999, 1.100000 }, // SKINID 149 || WatchType1 - NO
	{ 0.000000, -0.009999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.299999, 0.0 }, // SKINID 150 || WatchType1 - NO
	{ 0.000000, -0.025000, 0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.299999, 1.000000 }, // SKINID 151 || WatchType1 -
	{ 0.000000, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 152 || WatchType1 -
	{ 0.000000, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 0.0 }, // SKINID 153 || WatchType1 - NO
	{ 0.000000, -0.014999, 0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.500000, 1.000000 }, // SKINID 154 || WatchType1 -
	{ 0.000000, -0.009998, -0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 1.000000 }, // SKINID 155 || WatchType1 -
	{ 0.000000, -0.009998, 0.004999, 90.000000, 90.000000, 90.000000, 1.100000, 1.200000, 1.000000 }, // SKINID 156 || WatchType1 -
	{ 0.000000, -0.009998, -0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 157 || WatchType1 -
	{ 0.000000, -0.009998, -0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 0.0 }, // SKINID 158 || WatchType1 - NO
	{ 0.000000, -0.009998, 0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 159 || WatchType1 -
	{ -0.009999, -0.009998, 0.014999, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 160 || WatchType1 -
	{ -0.009999, -0.009998, -0.009999, 90.000000, 90.000000, 90.000000, 1.500000, 1.299999, 1.000000 }, // SKINID 161 || WatchType1 -
	{ 0.014999, -0.004000, 0.006000, 90.000000, 90.000000, 90.000000, 1.000000, 1.299999, 1.000000 }, // SKINID 162 || WatchType1 -
	{ 0.014999, -0.004000, 0.006000, 90.000000, 90.000000, 90.000000, 1.000000, 1.299999, 0.0 }, // SKINID 163 || WatchType1 - NO
	{ 0.014999, -0.004000, 0.006000, 90.000000, 90.000000, 90.000000, 1.000000, 1.299999, 0.0 }, // SKINID 164 || WatchType1 - NO
	{ 0.014999, -0.004000, 0.006000, 90.000000, 90.000000, 90.000000, 1.000000, 1.299999, 0.0 }, // SKINID 165 || WatchType1 - NO
	{ 0.014999, -0.004000, 0.006000, 90.000000, 90.000000, 90.000000, 1.000000, 1.299999, 0.0 }, // SKINID 166 || WatchType1 - NO
	{ 0.014999, -0.004000, 0.006000, 90.000000, 90.000000, 90.000000, 1.000000, 1.299999, 0.0 }, // SKINID 167 || WatchType1 - NO
	{ -0.039999, -0.004000, 0.006000, 90.000000, 90.000000, 90.000000, 1.200000, 1.500000, 1.000000 }, // SKINID 168 || WatchType1 -
	{ 0.000000, -0.004999, -0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 169 || WatchType1 -
	{ -0.019999, -0.009999, -0.002000, 90.000000, 90.000000, 90.000000, 1.200000, 1.600000, 1.000000 }, // SKINID 170 || WatchType1 -
	{ 0.000000, -0.003000, 0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.399999, 1.000000 }, // SKINID 171 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 172 || WatchType1 -
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.500000, 1.000000 }, // SKINID 173 || WatchType1 -
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.500000, 1.000000 }, // SKINID 174 || WatchType1 -
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.500000, 1.000000 }, // SKINID 175 || WatchType1 -
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.500000, 1.000000 }, // SKINID 176 || WatchType1 -
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.500000, 1.000000 }, // SKINID 177 || WatchType1 -
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 178 || WatchType1 -
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.399999, 1.000000 }, // SKINID 179 || WatchType1 -
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.399999, 1.000000 }, // SKINID 180 || WatchType1 -
	{ 0.000000, -0.009999, 0.009999, 90.000000, 90.000000, 90.000000, 1.200000, 1.299999, 1.000000 }, // SKINID 181 || WatchType1 -
	{ 0.000000, -0.009999, 0.009999, 90.000000, 90.000000, 90.000000, 1.200000, 1.299999, 0.0 }, // SKINID 182 || WatchType1 - NO
	{ 0.000000, -0.009999, 0.009999, 90.000000, 90.000000, 90.000000, 1.200000, 1.299999, 0.0 }, // SKINID 183 || WatchType1 - NO
	{ 0.000000, -0.008000, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.399999, 1.000000 }, // SKINID 184 || WatchType1 -
	{ 0.000000, -0.001500, 0.002000, 90.000000, 90.000000, 90.000000, 1.100000, 1.299999, 1.000000 }, // SKINID 185 || WatchType1 -
	{ 0.000000, -0.001500, 0.002000, 90.000000, 90.000000, 90.000000, 1.100000, 1.299999, 0.0 }, // SKINID 186 || WatchType1 - NO
	{ 0.000000, -0.001500, 0.002000, 90.000000, 90.000000, 90.000000, 1.100000, 1.299999, 0.0 }, // SKINID 187 || WatchType1 - NO
	{ 0.000000, -0.001500, -0.002000, 90.000000, 90.000000, 90.000000, 1.200000, 1.299999, 1.000000 }, // SKINID 188 || WatchType1 -
	{ 0.000000, -0.001500, 0.000000, 90.000000, 90.000000, 90.000000, 1.200000, 1.299999, 1.000000 }, // SKINID 189 || WatchType1 -
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 190 || WatchType1 -
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 191 || WatchType1 -
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 192 || WatchType1 -
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 193 || WatchType1 -
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 194 || WatchType1 -
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 195 || WatchType1 -
	{ 0.000000, -0.009999, 0.009999, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 196 || WatchType1 -
	{ 0.000000, -0.009999, 0.009999, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 197 || WatchType1 -
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 198 || WatchType1 -
	{ 0.000000, -0.009999, 0.009999, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 199 || WatchType1 -
	{ 0.019999, 0.001000, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.299999, 1.000000 }, // SKINID 200 || WatchType1 -
	{ 0.000000, -0.008000, -0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 201 || WatchType1 -
	{ 0.000000, -0.008999, 0.004999, 90.000000, 90.000000, 90.000000, 1.100000, 1.350000, 1.000000 }, // SKINID 202 || WatchType1 -
	{ 0.000000, -0.008999, 0.004999, 90.000000, 90.000000, 90.000000, 1.100000, 1.350000, 0.0 }, // SKINID 203 || WatchType1 - NO
	{ 0.000000, -0.008999, 0.004999, 90.000000, 90.000000, 90.000000, 1.100000, 1.350000, 0.0 }, // SKINID 204 || WatchType1 - NO
	{ -0.009999, -0.008999, 0.000000, 90.000000, 90.000000, 90.000000, 1.100000, 1.500000, 1.000000 }, // SKINID 205 || WatchType1 -
	{ -0.009999, -0.008999, 0.004999, 90.000000, 90.000000, 90.000000, 1.100000, 1.500000, 1.000000 }, // SKINID 206 || WatchType1 -
	{ -0.009999, -0.008999, 0.004999, 90.000000, 90.000000, 90.000000, 1.100000, 1.500000, 1.000000 }, // SKINID 207 || WatchType1 -
	{ -0.009999, -0.008999, 0.004999, 90.000000, 90.000000, 90.000000, 1.100000, 1.500000, 0.0 }, // SKINID 208 || WatchType1 - NO
	{ -0.009999, -0.008999, -0.009999, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 209 || WatchType1 -
	{ -0.009999, -0.008999, 0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 210 || WatchType1 -
	{ -0.009999, -0.004999, 0.001000, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 211 || WatchType1 -
	{ -0.009999, -0.004999, 0.001000, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 212 || WatchType1 - NO
	{ -0.009999, -0.004999, 0.001000, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 213 || WatchType1 - NO
	{ -0.009999, -0.008999, 0.001000, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 214 || WatchType1 -
	{ -0.009999, -0.008999, -0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 215 || WatchType1 -
	{ -0.009999, -0.008999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 216 || WatchType1 -
	{ -0.009999, 0.001000, 0.000000, 90.000000, 90.000000, 90.000000, 1.200000, 1.500000, 1.000000 }, // SKINID 217 || WatchType1 -
	{ -0.009999, 0.001000, 0.000000, 90.000000, 90.000000, 90.000000, 1.200000, 1.500000, 0.0 }, // SKINID 218 || WatchType1 - NO
	{ -0.009999, 0.001000, 0.000000, 90.000000, 90.000000, 90.000000, 1.200000, 1.500000, 0.0 }, // SKINID 219 || WatchType1 - NO
	{ 0.001000, -0.004999, 0.002000, 90.000000, 90.000000, 90.000000, 1.399999, 1.600000, 1.000000 }, // SKINID 220 || WatchType1 -
	{ 0.001000, -0.009999, 0.004999, 90.000000, 90.000000, 90.000000, 1.100000, 1.299999, 1.000000 }, // SKINID 221 || WatchType1 -
	{ 0.001000, -0.009999, 0.004999, 90.000000, 90.000000, 90.000000, 1.100000, 1.299999, 1.000000 }, // SKINID 222 || WatchType1 -
	{ 0.001000, -0.009999, 0.004999, 90.000000, 90.000000, 90.000000, 1.100000, 1.299999, 1.000000 }, // SKINID 223 || WatchType1 -
	{ 0.001000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 224 || WatchType1 -
	{ 0.001000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 225 || WatchType1 -
	{ 0.001000, -0.009999, -0.002000, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 226 || WatchType1 -
	{ 0.001000, -0.009999, -0.002000, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 0.0 }, // SKINID 227 || WatchType1 - NO
	{ 0.001000, -0.009999, -0.002000, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 0.0 }, // SKINID 228 || WatchType1 - NO
	{ 0.001000, -0.009999, 0.001500, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 229 || WatchType1 -
	{ 0.001000, -0.009999, 0.001500, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 230 || WatchType1 - NO
	{ -0.009999, -0.009999, 0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 231 || WatchType1 -
	{ -0.009999, -0.009999, 0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 0.0 }, // SKINID 232 || WatchType1 - NO
	{ -0.009999, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 233 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 234 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 235 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 236 || WatchType1 -
	{ 0.000000, -0.004999, 0.009999, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 237 || WatchType1 -
	{ 0.000000, -0.004999, -0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 238 || WatchType1 -
	{ 0.000000, -0.004999, -0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 0.0 }, // SKINID 239 || WatchType1 - NO
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.100000, 1.399999, 1.000000 }, // SKINID 240 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.399999, 1.600000, 1.000000 }, // SKINID 241 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.399999, 1.600000, 1.000000 }, // SKINID 242 || WatchType1 -
	{ 0.000000, -0.012000, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.350000, 1.000000 }, // SKINID 243 || WatchType1 -
	{ 0.000000, -0.008000, -0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.299999, 1.000000 }, // SKINID 244 || WatchType1 -
	{ 0.000000, -0.019999, 0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.450000, 1.000000 }, // SKINID 245 || WatchType1 -
	{ 0.000000, -0.014999, -0.002000, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 246 || WatchType1 -
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.600000, 1.000000 }, // SKINID 247 || WatchType1 -
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.600000, 0.0 }, // SKINID 248 || WatchType1 - NO
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.600000, 0.0 }, // SKINID 249 || WatchType1 - NO
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.600000, 1.000000 }, // SKINID 250 || WatchType1 -
	{ 0.000000, -0.004999, 0.001000, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 251 || WatchType1 -
	{ 0.000000, 0.003000, 0.003000, 90.000000, 90.000000, 90.000000, 1.100000, 1.399999, 1.000000 }, // SKINID 252 || WatchType1 -
	{ 0.000000, 0.003000, 0.003000, 90.000000, 90.000000, 90.000000, 1.100000, 1.399999, 0.0 }, // SKINID 253 || WatchType1 - NO
	{ -0.009999, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.350000, 1.600000, 1.000000 }, // SKINID 254 || WatchType1 -
	{ 0.000000, -0.014999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.299999, 1.000000 }, // SKINID 255 || WatchType1 -
	{ 0.000000, -0.014999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.299999, 1.000000 }, // SKINID 256 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.299999, 1.000000 }, // SKINID 257 || WatchType1 - 
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 258 || WatchType1 -
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 259 || WatchType1 -
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 260 || WatchType1 - NO
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 261 || WatchType1 - NO
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 262 || WatchType1 - NO
	{ 0.000000, -0.009999, -0.002499, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 263 || WatchType1 -
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.500000, 1.500000, 1.000000 }, // SKINID 264 || WatchType1 -
	{ 0.000000, 0.004999, 0.009999, 90.000000, 90.000000, 90.000000, 1.000000, 1.399999, 1.000000 }, // SKINID 265 || WatchType1 -
	{ 0.000000, -0.008999, 0.002000, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 266 || WatchType1 -
	{ 0.000000, -0.003000, 0.009999, 90.000000, 90.000000, 90.000000, 1.000000, 1.299999, 1.000000 }, // SKINID 267 || WatchType1 -
	{ -0.029999, -0.003000, 0.000000, 90.000000, 90.000000, 90.000000, 1.100000, 1.299999, 1.000000 }, // SKINID 268 || WatchType1 -
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.200000, 1.600000, 1.000000 }, // SKINID 269 || WatchType1 -
	{ -0.009999, -0.004999, -0.009999, 90.000000, 90.000000, 90.000000, 1.090000, 1.299999, 1.000000 }, // SKINID 270 || WatchType1 -
	{ -0.009999, -0.004999, -0.009999, 90.000000, 90.000000, 90.000000, 1.090000, 1.299999, 0.0 }, // SKINID 271 || WatchType1 - NO
	{ -0.009999, -0.004999, -0.009999, 90.000000, 90.000000, 90.000000, 1.090000, 1.299999, 0.0 }, // SKINID 272 || WatchType1 - NO
	{ -0.009999, -0.003000, 0.000000, 0.000000, 90.000000, 180.000000, 1.149999, 1.200000, 1.100000 }, // SKINID 273 || WatchType1 - NO
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 274 || WatchType1 -
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 275 || WatchType1 -
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 276 || WatchType1 -
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 277 || WatchType1 - NO
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 278 || WatchType1 - NO
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 279 || WatchType1 - NO
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 280 || WatchType1 -
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 281 || WatchType1 -
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 282 || WatchType1 -
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 283 || WatchType1 -
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 284 || WatchType1 - NO
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 285 || WatchType1 - NO
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 286 || WatchType1 - NO
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 287 || WatchType1 - NO
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 288 || WatchType1 -
	{ -0.009999, -0.003000, 0.000000, 0.000000, 90.000000, 180.000000, 1.200000, 1.299999, 1.100000 }, // SKINID 289 || WatchType1 - NO
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 290 || WatchType1 - NO
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 291 || WatchType1 -
	{ 0.000000, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 292 || WatchType1 -
	{ -0.009999, -0.009999, -0.009999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 293 || WatchType1 -
	{ -0.009999, -0.009999, -0.009999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 294 || WatchType1 - NO
	{ -0.009999, -0.009999, -0.009999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 295 || WatchType1 - NO
	{ -0.009999, -0.009999, -0.009999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 296 || WatchType1 - NO
	{ -0.009999, 0.001000, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 297 || WatchType1 -
	{ -0.019999, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 298 || WatchType1 -
	{ -0.019999, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 0.0 } // SKINID 299 || WatchType1 - NO
};
new Float:SkinesGorras[300][9] = {
	{ 0.0, -0.001184, -0.011706, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 0 || Hat1 - NO
	{ 0.147006, -0.001184, -0.011706, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 1 || Hat1 - SI
	{ 0.0, -0.001184, -0.011706, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 2 || Hat1 - NO
	{ 0.150000, -0.009999, -0.009999, 0.000000, 0.000000, 350.000000, 1.000000, 1.100000, 1.100000 }, // SKINID 3 || Hat1 - NO
	{ 0.170000, -0.009999, -0.009999, 0.000000, 0.000000, 350.000000, 1.100000, 1.100000, 1.100000 }, // SKINID 4 || Hat1 - NO
	{ 0.170000, -0.009999, -0.009999, 0.000000, 0.000000, 350.000000, 1.100000, 1.100000, 1.100000 }, // SKINID 5 || Hat1 - NO
	{ 0.0, -0.001184, -0.011706, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 6 || Hat1 - NO
	{ 0.157924, 0.007884, -0.011706, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 7 || Hat1 - SI
	{ 0.0, 0.007884, -0.011706, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 8 || Hat1 - NO
	{ 0.144114, -0.004404, -0.011706, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 9 || Hat1 - SI
	{ 0.144114, -0.004404, -0.011706, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 10 || Hat1 - SI
	{ 0.144114, -0.004404, -0.011706, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 11 || Hat1 - SI
	{ 0.144114, -0.004404, -0.011706, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 12 || Hat1 - SI
	{ 0.0, -0.004404, -0.011706, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 13 || Hat1 - NO
	{ 0.157687, 0.007467, -0.001244, 0.000000, 0.000000, 0.000000, 1.116931, 1.000000, 1.096179 }, // SKINID 14 || Hat1 - SI
	{ 0.117256, -0.017124, -0.006678, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 15 || Hat1 - SI
	{ 0.0, -0.017124, -0.006678, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 16 || Hat1 - NO
	{ 0.141728, 0.004894, -0.006678, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 17 || Hat1 - SI
	{ 0.109599, -0.003742, -0.006678, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 18 || Hat1 - SI
	{ 0.0, -0.003742, -0.006678, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 19 || Hat1 - NO
	{ 0.161143, -0.003742, -0.006678, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 20 || Hat1 - SI
	{ 0.145060, 0.010652, -0.005882, 0.000000, 0.000000, 0.000000, 1.067082, 1.000000, 1.057644 }, // SKINID 21 || Hat1 - SI
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 22 || Hat1 - NO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 23 || Hat1 - NO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 24 || Hat1 - NO
	{ 0.125074, 0.010768, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.059803 }, // SKINID 25 || Hat1 - SI
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 26 || Hat1 - NO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 27 || Hat1 - NO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 28 || Hat1 - NO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 29 || Hat1 - NO
	{ 0.155565, 0.000000, -0.008439, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 30 || Hat1 - SI
	{ 0.0, 0.000000, -0.008439, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 31 || Hat1 - NO
	{ 0.0, 0.000000, -0.008439, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 32 || Hat1 - NO
	{ 0.0, 0.000000, -0.008439, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 33 || Hat1 - NO
	{ 0.0, 0.000000, -0.008439, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 34 || Hat1 - NO
	{ 0.0, 0.000000, -0.008439, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 35 || Hat1 - NO
	{ 0.0, 0.000000, -0.008439, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 36 || Hat1 - NO
	{ 0.0, 0.000000, -0.008439, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 37 || Hat1 - NO
	{ 0.0, 0.000000, -0.008439, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 38 || Hat1 - NO
	{ 0.117316, 0.000000, -0.008439, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 39 || Hat1 - SI
	{ 0.140639, -0.013137, -0.005318, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.113420 }, // SKINID 40 || Hat1 - SI
	{ 0.0, -0.013137, -0.005318, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.113420 }, // SKINID 41 || Hat1 - NO
	{ 0.119999, -0.009999, -0.009999, 0.000000, 0.000000, 340.000000, 1.000000, 1.049999, 1.100000 }, // SKINID 42 || Hat1 - NO
	{ 0.079176, 0.007249, -0.005318, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.113420 }, // SKINID 43 || Hat1 - SI
	{ 0.108785, 0.028155, -0.005318, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 0.929156 }, // SKINID 44 || Hat1 - SI
	{ 0.098622, 0.004937, -0.011623, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 45 || Hat1 - SI
	{ 0.154583, 0.015235, -0.010507, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 46 || Hat1 - SI
	{ 0.154583, 0.015235, -0.010507, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 47 || Hat1 - SI
	{ 0.167671, -0.013713, -0.010507, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 48 || Hat1 - SI
	{ 0.138361, 0.000096, -0.010507, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 49 || Hat1 - SI
	{ 0.0, 0.000096, -0.010507, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 50 || Hat1 - NO
	{ 0.0, 0.000096, -0.010507, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 51 || Hat1 - NO
	{ 0.0, 0.000096, -0.010507, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 52 || Hat1 - NO
	{ 0.0, 0.000096, -0.010507, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 53 || Hat1 - NO
	{ 0.126658, 0.032032, 0.000709, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.100494 }, // SKINID 54 || Hat1 - SI
	{ 0.130603, -0.008772, -0.007212, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.162167 }, // SKINID 55 || Hat1 - SI
	{ 0.130603, -0.008772, -0.007212, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.162167 }, // SKINID 56 || Hat1 - SI
	{ 0.180383, -0.003232, -0.007212, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.036939 }, // SKINID 57 || Hat1 - SI
	{ 0.125167, -0.003232, -0.004390, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 0.930845 }, // SKINID 58 || Hat1 - SI
	{ 0.173983, -0.017257, -0.009368, 4.751676, 358.352539, 346.646514, 1.000000, 1.000000, 1.000000 }, // SKINID 59 || Hat1 - SI
	{ 0.150744, -0.017257, -0.009368, 4.751676, 358.352539, 346.646514, 1.000000, 1.000000, 1.000000 }, // SKINID 60 || Hat1 - SI
	{ 0.0, -0.017257, -0.009368, 4.751676, 358.352539, 346.646514, 1.000000, 1.000000, 1.000000 }, // SKINID 61 || Hat1 - NO
	{ 0.141376, 0.002625, -0.000497, 4.751676, 358.352539, 346.646514, 1.000000, 1.000000, 1.000000 }, // SKINID 62 || Hat1 - SI
	{ 0.153904, -0.003380, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 63 || Hat1 - SI
	{ 0.129322, -0.003380, -0.009152, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 64 || Hat1 - SI
	{ 0.0, -0.003380, -0.009152, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 65 || Hat1 - NO
	{ 0.129322, 0.021090, -0.009152, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 66 || Hat1 - SI
	{ 0.0, 0.021090, -0.009152, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 67 || Hat1 - NO
	{ 0.130530, 0.021090, -0.009152, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 68 || Hat1 - SI
	{ 0.148960, -0.012263, -0.009152, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 69 || Hat1 - SI
	{ 0.148960, 0.010975, 0.000065, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 70 || Hat1 - SI
	{ 0.0, 0.010975, 0.000065, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 71 || Hat1 - NO
	{ 0.130530, 0.016904, -0.005821, 0.000000, 0.000000, 352.484680, 1.000000, 1.000000, 1.000000 }, // SKINID 72 || Hat1 - SI
	{ 0.0, 0.016904, -0.005821, 0.000000, 0.000000, 352.484680, 1.000000, 1.000000, 1.000000 }, // SKINID 73 || Hat1 - NO
	{ 0.0, 0.016904, -0.005821, 0.000000, 0.000000, 352.484680, 1.000000, 1.000000, 1.000000 }, // SKINID 74 || Hat1 - NO
	{ 0.0, 0.016904, -0.005821, 0.000000, 0.000000, 352.484680, 1.000000, 1.000000, 1.000000 }, // SKINID 75 || Hat1 - NO
	{ 0.153769, -0.012621, -0.005821, 0.000000, 0.000000, 352.484680, 1.000000, 1.000000, 1.000000 }, // SKINID 76 || Hat1 - SI
	{ 0.0, -0.012621, -0.005821, 0.000000, 0.000000, 352.484680, 1.000000, 1.000000, 1.000000 }, // SKINID 77 || Hat1 - NO
	{ 0.0, -0.012621, -0.005821, 0.000000, 0.000000, 352.484680, 1.000000, 1.000000, 1.000000 }, // SKINID 78 || Hat1 - NO
	{ 0.0, -0.012621, -0.005821, 0.000000, 0.000000, 352.484680, 1.000000, 1.000000, 1.000000 }, // SKINID 79 || Hat1 - NO
	{ 0.120414, -0.012621, -0.005821, 0.000000, 0.000000, 352.484680, 1.000000, 1.000000, 1.000000 }, // SKINID 80 || Hat1 - SI
	{ 0.120414, -0.012621, -0.005821, 0.000000, 0.000000, 352.484680, 1.000000, 1.000000, 1.000000 }, // SKINID 81 || Hat1 - SI
	{ 0.179196, -0.029663, -0.005821, 0.000000, 0.000000, 328.924438, 1.000000, 1.000000, 1.000000 }, // SKINID 82 || Hat1 - SI
	{ 0.179196, -0.029663, -0.005821, 0.000000, 0.000000, 328.924438, 1.000000, 1.000000, 1.000000 }, // SKINID 83 || Hat1 - SI
	{ 0.179196, -0.029663, -0.005821, 0.000000, 0.000000, 328.924438, 1.000000, 1.000000, 1.000000 }, // SKINID 84 || Hat1 - SI
	{ 0.0, -0.012682, 0.000000, 0.000000, 0.000000, 352.724517, 1.000000, 1.000000, 1.000000 }, // SKINID 85 || Hat1 - NO
	{ 0.109999, -0.019999, -0.009999, 0.000000, 0.000000, 340.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 86 || Hat1 - NO
	{ 0.0, -0.012682, 0.000000, 0.000000, 0.000000, 352.724517, 1.000000, 1.000000, 1.000000 }, // SKINID 87 || Hat1 - NO
	{ 0.0, -0.012682, 0.000000, 0.000000, 0.000000, 352.724517, 1.000000, 1.000000, 1.000000 }, // SKINID 88 || Hat1 - NO
	{ 0.0, -0.012682, 0.000000, 0.000000, 0.000000, 352.724517, 1.000000, 1.000000, 1.000000 }, // SKINID 89 || Hat1 - NO
	{ 0.0, -0.012682, 0.000000, 0.000000, 0.000000, 352.724517, 1.000000, 1.000000, 1.000000 }, // SKINID 90 || Hat1 - NO
	{ 0.158553, -0.025459, 0.000000, 0.000000, 0.000000, 347.299774, 1.000000, 1.000000, 1.000000 }, // SKINID 91 || Hat1 - SI
	{ 0.0, -0.025459, 0.000000, 0.000000, 0.000000, 347.299774, 1.000000, 1.000000, 1.000000 }, // SKINID 92 || Hat1 - NO
	{ 0.138744, -0.045086, -0.002152, 0.000000, 0.000000, 332.370269, 1.000000, 1.000000, 1.000000 }, // SKINID 93 || Hat1 - SI
	{ 0.0, -0.045086, -0.002152, 0.000000, 0.000000, 332.370269, 1.000000, 1.000000, 1.000000 }, // SKINID 94 || Hat1 - NO
	{ 0.117933, -0.031610, -0.002152, 0.000000, 0.000000, 337.346343, 1.000000, 1.000000, 1.000000 }, // SKINID 95 || Hat1 - SI
	{ 0.133088, -0.005893, -0.004789, 0.000000, 0.000000, 337.346343, 1.000000, 1.000000, 1.000000 }, // SKINID 96 || Hat1 - SI
	{ 0.121521, -0.029133, -0.004789, 0.000000, 0.000000, 337.346343, 1.000000, 1.000000, 1.000000 }, // SKINID 97 || Hat1 - SI
	{ 0.147238, -0.013274, -0.004789, 0.000000, 0.000000, 337.346343, 1.000000, 1.000000, 1.000000 }, // SKINID 98 || Hat1 - SI
	{ 0.0, -0.013274, -0.004789, 0.000000, 0.000000, 337.346343, 1.000000, 1.000000, 1.000000 }, // SKINID 99 || Hat1 - NO
	{ 0.168932, -0.050146, -0.004789, 0.000000, 0.000000, 331.010528, 1.000000, 1.000000, 1.000000 }, // SKINID 100 || Hat1 - SI
	{ 0.145517, -0.035615, -0.009948, 0.000000, 0.000000, 336.179534, 1.103076, 1.000000, 1.082140 }, // SKINID 101 || Hat1 - SI.
	{ 0.0, -0.035615, -0.009948, 0.000000, 0.000000, 336.179534, 1.103076, 1.000000, 1.082140 }, // SKINID 102 || Hat1 - NO
	{ 0.0, -0.035615, -0.009948, 0.000000, 0.000000, 336.179534, 1.103076, 1.000000, 1.082140 }, // SKINID 103 || Hat1 - NO
	{ 0.0, -0.035615, -0.009948, 0.000000, 0.000000, 336.179534, 1.103076, 1.000000, 1.082140 }, // SKINID 104 || Hat1 - NO
	{ 0.0, -0.035615, -0.009948, 0.000000, 0.000000, 336.179534, 1.103076, 1.000000, 1.082140 }, // SKINID 105 || Hat1 - NO
	{ 0.152731, -0.020035, -0.009948, 0.000000, 0.000000, 339.606719, 1.103076, 1.000000, 1.200073 }, // SKINID 106 || Hat1 - SI.
	{ 0.0, -0.020035, -0.009948, 0.000000, 0.000000, 339.606719, 1.103076, 1.000000, 1.200073 }, // SKINID 107 || Hat1 - NO.
	{ 0.0, -0.020035, -0.009948, 0.000000, 0.000000, 339.606719, 1.103076, 1.000000, 1.200073 }, // SKINID 108 || Hat1 - NO.
	{ 0.0, -0.020035, -0.009948, 0.000000, 0.000000, 339.606719, 1.103076, 1.000000, 1.200073 }, // SKINID 109 || Hat1 - NO.
	{ 0.0, -0.020035, -0.009948, 0.000000, 0.000000, 339.606719, 1.103076, 1.000000, 1.200073 }, // SKINID 110 || Hat1 - NO.
	{ 0.129386, -0.002775, -0.009948, 0.000000, 0.000000, 341.769042, 0.998616, 1.000000, 0.954466 }, // SKINID 111 || Hat1 - SI.
	{ 0.0, -0.002775, -0.009948, 0.000000, 0.000000, 341.769042, 0.998616, 1.000000, 0.954466 }, // SKINID 112 || Hat1 - NO.
	{ 0.161488, -0.006758, -0.007789, 0.000000, 0.000000, 350.751190, 0.889050, 1.000000, 1.017401 }, // SKINID 113 || Hat1 - SI.
	{ 0.0, -0.006758, -0.007789, 0.000000, 0.000000, 350.751190, 0.889050, 1.000000, 1.017401 }, // SKINID 114 || Hat1 - NO.
	{ 0.0, -0.006758, -0.007789, 0.000000, 0.000000, 350.751190, 0.889050, 1.000000, 1.017401 }, // SKINID 115 || Hat1 - NO
	{ 0.0, -0.006758, -0.007789, 0.000000, 0.000000, 350.751190, 0.889050, 1.000000, 1.017401 }, // SKINID 116 || Hat1 - NO
	{ 0.118653, 0.012436, -0.007789, 0.000000, 0.000000, 350.751190, 0.889050, 1.000000, 1.017401 }, // SKINID 117 || Hat1 - SI.
	{ 0.118653, 0.012436, -0.007789, 0.000000, 0.000000, 350.751190, 0.889050, 1.000000, 1.017401 }, // SKINID 118 || Hat1 - SI.
	{ 0.129999, 0.008000, -0.009999, 0.000000, 0.000000, 350.000000, 1.000000, 1.000000, 1.100000 }, // SKINID 119 || Hat1 - SI.
	{ 0.146318, -0.025716, -0.007789, 0.000000, 0.000000, 341.909881, 0.937113, 1.000000, 1.036702 }, // SKINID 120 || Hat1 - SI.
	{ 0.139072, -0.015518, -0.007789, 0.000000, 0.000000, 341.909881, 0.937113, 1.000000, 1.056487 }, // SKINID 121 || Hat1 - SI
	{ 0.127783, -0.009892, -0.007789, 0.000000, 0.000000, 341.909881, 0.937113, 1.000000, 1.056487 }, // SKINID 122 || Hat1 - SI.
	{ 0.157737, -0.028794, -0.007789, 0.000000, 0.000000, 341.909881, 0.937113, 1.000000, 1.151306 }, // SKINID 123 || Hat1 - SI.
	{ 0.157737, -0.017608, -0.007789, 0.000000, 0.000000, 341.909881, 0.937113, 1.000000, 1.036304 }, // SKINID 124 || Hat1 - SI.
	{ 0.131404, -0.002766, -0.007789, 0.000000, 0.000000, 341.909881, 0.937113, 1.000000, 0.941077 }, // SKINID 125 || Hat1 - SI.
	{ 0.144064, -0.039942, -0.007789, 0.000000, 0.000000, 328.634490, 0.937113, 1.000000, 1.010850 }, // SKINID 126 || Hat1 - SI.
	{ 0.139717, -0.024194, -0.007789, 0.000000, 0.000000, 328.634490, 0.937113, 1.000000, 1.074444 }, // SKINID 127 || Hat1 - SI.
	{ 0.147450, -0.033581, -0.007789, 0.000000, 0.000000, 326.999328, 0.937113, 1.000000, 1.132529 }, // SKINID 128 || Hat1 - SI.
	{ 0.088559, 0.001517, -0.007789, 0.000000, 0.000000, 326.999328, 1.338058, 1.000000, 0.888771 }, // SKINID 129 || Hat1 - SI.
	{ 0.058958, -0.002415, -0.010912, 0.000000, 0.000000, 326.999328, 0.988968, 1.000000, 1.128769 }, // SKINID 130 || Hat1 - SI.
	{ 0.123863, -0.002415, -0.010912, 0.000000, 0.000000, 350.770904, 0.988968, 1.000000, 1.073865 }, // SKINID 131 || Hat1 - SI.
	{ 0.056407, -0.012276, -0.010912, 0.000000, 0.000000, 350.770904, 0.684180, 1.000000, 0.894486 }, // SKINID 132 || Hat1 - SI.
	{ 0.0, -0.012276, -0.010912, 0.000000, 0.000000, 350.770904, 0.684180, 1.000000, 0.894486 }, // SKINID 133 || Hat1 - NO.
	{ 0.0, -0.012276, -0.010912, 0.000000, 0.000000, 350.770904, 0.684180, 1.000000, 0.894486 }, // SKINID 134 || Hat1 - NO.
	{ 0.0, -0.012276, -0.010912, 0.000000, 0.000000, 350.770904, 0.684180, 1.000000, 0.894486 }, // SKINID 135 || Hat1 - NO.
	{ 0.0, -0.012276, -0.010912, 0.000000, 0.000000, 350.770904, 0.684180, 1.000000, 0.894486 }, // SKINID 136 || Hat1 - NO.
	{ 0.0, -0.012276, -0.010912, 0.000000, 0.000000, 350.770904, 0.684180, 1.000000, 0.894486 }, // SKINID 137 || Hat1 - NO.
	{ 0.140619, -0.012276, -0.010912, 0.000000, 0.000000, 350.770904, 0.938905, 1.000000, 1.088924 }, // SKINID 138 || Hat1 - SI.
	{ 0.140619, -0.012276, -0.010912, 0.000000, 0.000000, 350.770904, 0.938905, 1.000000, 1.088924 }, // SKINID 139 || Hat1 - SI.
	{ 0.140619, -0.012276, -0.010912, 0.000000, 0.000000, 350.770904, 0.938905, 1.000000, 1.088924 }, // SKINID 140 || Hat1 - SI.
	{ 0.137335, -0.012276, -0.010912, 0.000000, 0.000000, 350.770904, 0.938905, 1.000000, 1.088924 }, // SKINID 141 || Hat1 - SI.
	{ 0.137335, -0.001362, -0.010912, 0.000000, 0.000000, 350.770904, 0.938905, 1.000000, 1.088924 }, // SKINID 142 || Hat1 - SI.
	{ 0.0, -0.001362, -0.010912, 0.000000, 0.000000, 350.770904, 0.938905, 1.000000, 1.088924 }, // SKINID 143 || Hat1 - NO.
	{ 0.193302, -0.027388, -0.010912, 0.000000, 0.000000, 350.770904, 0.938905, 1.000000, 1.279586 }, // SKINID 144 || Hat1 - SI.
	{ 0.138405, -0.005317, -0.008311, 0.000000, 0.000000, 350.770904, 0.938905, 1.000000, 0.984671 }, // SKINID 145 || Hat1 - SI.
	{ 0.138405, -0.005317, -0.008311, 0.000000, 0.000000, 350.770904, 0.938905, 1.000000, 0.984671 }, // SKINID 146 || Hat1 - SI.
	{ 0.130529, -0.019639, -0.001685, 0.000000, 0.000000, 350.770904, 0.938905, 1.000000, 0.984671 }, // SKINID 147 || Hat1 - SI.
	{ 0.143284, -0.026097, -0.004171, 0.000000, 0.000000, 350.770904, 0.969615, 1.000000, 1.084500 }, // SKINID 148 || Hat1 - SI.
	{ 0.0, -0.026097, -0.004171, 0.000000, 0.000000, 350.770904, 0.969615, 1.000000, 1.084500 }, // SKINID 149 || Hat1 - NO:
	{ 0.124033, -0.035304, -0.004789, 0.000000, 0.000000, 323.380035, 1.000000, 1.000000, 0.939360 }, // SKINID 150 || Hat1 - SI
	{ 0.0, -0.035304, -0.004789, 0.000000, 0.000000, 323.380035, 1.000000, 1.000000, 0.939360 }, // SKINID 151 || Hat1 - NO
	{ 0.124033, -0.035304, -0.004789, 0.000000, 0.000000, 336.253540, 1.000000, 1.000000, 0.939360 }, // SKINID 152 || Hat1 - SI
	{ 0.0, -0.035304, -0.004789, 0.000000, 0.000000, 336.253540, 1.000000, 1.000000, 0.939360 }, // SKINID 153 || Hat1 - NO
	{ 0.120277, -0.025589, -0.004789, 0.000000, 0.000000, 339.665893, 1.000000, 1.000000, 0.984497 }, // SKINID 154 || Hat1 - SI
	{ 0.0, -0.025589, -0.004789, 0.000000, 0.000000, 339.665893, 1.000000, 1.000000, 0.984497 }, // SKINID 155 || Hat1 - NO
	{ 0.166981, -0.054828, -0.002724, 0.000000, 0.000000, 338.964263, 1.143386, 1.000000, 1.244510 }, // SKINID 156 || Hat1 - SI
	{ 0.112918, 0.000000, -0.003829, 0.000000, 0.000000, 341.065704, 1.000000, 1.000000, 1.000000 }, // SKINID 157 || Hat1 - SI
	{ 0.0, 0.000000, -0.003829, 0.000000, 0.000000, 341.065704, 1.000000, 1.000000, 1.000000 }, // SKINID 158 || Hat1 - NO
	{ 0.0, 0.000000, -0.003829, 0.000000, 0.000000, 341.065704, 1.000000, 1.000000, 1.000000 }, // SKINID 159 || Hat1 - NO
	{ 0.112918, 0.000000, -0.003829, 0.000000, 0.000000, 341.065704, 1.000000, 1.000000, 1.000000 }, // SKINID 160 || Hat1 - SI
	{ 0.0, 0.000000, -0.003829, 0.000000, 0.000000, 341.065704, 1.000000, 1.000000, 1.000000 }, // SKINID 161 || Hat1 - NO
	{ 0.141787, -0.010452, -0.003829, 0.000000, 0.000000, 341.065704, 1.000000, 1.000000, 1.000000 }, // SKINID 162 || Hat1 - SI
	{ 0.120976, 0.001487, -0.003829, 0.000000, 0.000000, 341.065704, 1.000000, 1.000000, 1.000000 }, // SKINID 163 || Hat1 - SI
	{ 0.120976, 0.001487, -0.012019, 0.000000, 0.000000, 341.065704, 1.000000, 1.000000, 1.000000 }, // SKINID 164 || Hat1 - SI
	{ 0.126610, -0.011195, 0.000242, 0.000000, 0.000000, 341.065704, 1.000000, 1.000000, 1.087626 }, // SKINID 165 || Hat1 - SI
	{ 0.126610, -0.011195, 0.000242, 0.000000, 0.000000, 341.065704, 1.000000, 1.000000, 1.087626 }, // SKINID 166 || Hat1 - SI
	{ 0.0, -0.011195, 0.000242, 0.000000, 0.000000, 341.065704, 1.000000, 1.000000, 1.087626 }, // SKINID 167 || Hat1 - NO
	{ 0.0, -0.011195, 0.000242, 0.000000, 0.000000, 341.065704, 1.000000, 1.000000, 1.087626 }, // SKINID 168 || Hat1 - NO
	{ 0.138399, -0.023877, 0.000242, 0.000000, 0.000000, 341.065704, 1.000000, 1.000000, 1.087626 }, // SKINID 169 || Hat1 - SI
	{ 0.138676, -0.000109, -0.007213, 0.000000, 0.000000, 352.167907, 1.000000, 1.000000, 1.037200 }, // SKINID 170 || Hat1 - SI
	{ 0.164229, -0.012904, 0.000000, 0.000000, 0.000000, 351.712768, 1.000000, 1.000000, 1.000000 }, // SKINID 171 || Hat1 - SI
	{ 0.139651, -0.012904, -0.006265, 0.000000, 0.000000, 343.731628, 1.000000, 1.000000, 1.146476 }, // SKINID 172 || Hat1 - SI
	{ 0.0, -0.012904, -0.006265, 0.000000, 0.000000, 343.731628, 1.000000, 1.000000, 1.146476 }, // SKINID 173 || Hat1 - NO
	{ 0.0, -0.012904, -0.006265, 0.000000, 0.000000, 343.731628, 1.000000, 1.000000, 1.146476 }, // SKINID 174 || Hat1 - NO
	{ 0.0, -0.012904, -0.006265, 0.000000, 0.000000, 343.731628, 1.000000, 1.000000, 1.146476 }, // SKINID 175 || Hat1 - NO
	{ 0.139651, -0.036143, -0.006265, 0.000000, 0.000000, 328.196441, 1.000000, 1.000000, 1.146476 }, // SKINID 176 || Hat1 - SI
	{ 0.0, -0.036143, -0.006265, 0.000000, 0.000000, 328.196441, 1.000000, 1.000000, 1.146476 }, // SKINID 177 || Hat1 - NO
	{ 0.0, -0.036143, -0.006265, 0.000000, 0.000000, 328.196441, 1.000000, 1.000000, 1.146476 }, // SKINID 178 || Hat1 - NO
	{ 0.135375, -0.027852, -0.006265, 0.000000, 0.000000, 336.751373, 1.000000, 1.000000, 1.146476 }, // SKINID 179 || Hat1 - SI
	{ 0.164620, -0.054308, -0.009679, 0.000000, 0.000000, 333.560119, 1.000000, 1.000000, 1.146476 }, // SKINID 180 || Hat1 - SI
	{ 0.0, -0.054308, -0.009679, 0.000000, 0.000000, 333.560119, 1.000000, 1.000000, 1.146476 }, // SKINID 181 || Hat1 - NO
	{ 0.141432, 0.000000, -0.011670, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 182 || Hat1 - SI
	{ 0.141432, 0.000000, -0.011670, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 183 || Hat1 - SI
	{ 0.141432, 0.000000, -0.011670, 0.000000, 0.000000, 356.219146, 1.000000, 1.000000, 1.000000 }, // SKINID 184 || Hat1 - SI
	{ 0.167288, -0.027798, -0.004000, 2.629787, 0.000000, 346.775482, 1.000000, 1.000000, 1.000000 }, // SKINID 185 || Hat1 - SI
	{ 0.167288, -0.027798, -0.004000, 2.629787, 0.000000, 346.775482, 1.000000, 1.000000, 1.000000 }, // SKINID 186 || Hat1 - SI
	{ 0.131250, -0.027798, -0.004000, 2.357612, 0.000000, 341.684631, 1.000000, 1.000000, 1.000000 }, // SKINID 187 || Hat1 - SI
	{ 0.131250, -0.013544, -0.004000, 2.357612, 0.000000, 341.684631, 1.000000, 1.000000, 1.000000 }, // SKINID 188 || Hat1 - SI
	{ 0.178727, -0.021390, -0.004000, 2.357612, 0.000000, 356.365539, 1.000000, 1.000000, 1.000000 }, // SKINID 189 || Hat1 - SI
	{ 0.172598, -0.034072, -0.007253, 2.357612, 0.000000, 340.687713, 1.000000, 1.000000, 1.000000 }, // SKINID 190 || Hat1 - SI
	{ 0.172598, -0.034072, -0.007253, 2.357612, 0.000000, 340.687713, 1.000000, 1.000000, 1.147821 }, // SKINID 191 || Hat1 - SI
	{ 0.167594, -0.034072, -0.007253, 2.357612, 0.000000, 342.403717, 1.000000, 1.000000, 1.147821 }, // SKINID 192 || Hat1 - SI
	{ 0.167594, -0.034072, -0.007253, 2.357612, 0.000000, 342.403717, 1.000000, 1.000000, 1.147821 }, // SKINID 193 || Hat1 - SI
	{ 0.167594, -0.034072, -0.007253, 2.357612, 0.000000, 342.403717, 1.000000, 1.000000, 1.147821 }, // SKINID 194 || Hat1 - SI
	{ 0.0, -0.034072, -0.007253, 2.357612, 0.000000, 342.403717, 1.000000, 1.000000, 1.147821 }, // SKINID 195 || Hat1 - NO
	{ 0.0, -0.034072, -0.007253, 2.357612, 0.000000, 342.403717, 1.000000, 1.000000, 1.147821 }, // SKINID 196 || Hat1 - NO
	{ 0.0, -0.034072, -0.007253, 2.357612, 0.000000, 342.403717, 1.000000, 1.000000, 1.147821 }, // SKINID 197 || Hat1 - NO
	{ 0.0, -0.034072, -0.007253, 2.357612, 0.000000, 342.403717, 1.000000, 1.000000, 1.147821 }, // SKINID 198 || Hat1 - NO
	{ 0.130440, -0.004786, -0.007253, 2.357612, 0.000000, 342.403717, 1.000000, 1.000000, 1.147821 }, // SKINID 199 || Hat1 - SI
	{ 0.146635, 0.001232, -0.007253, 2.357612, 0.000000, 350.655761, 1.000000, 1.000000, 1.147821 }, // SKINID 200 || Hat1 - SI
	{ 0.0, 0.001232, -0.007253, 2.357612, 0.000000, 350.655761, 1.000000, 1.000000, 1.147821 }, // SKINID 201 || Hat1 - NO
	{ 0.0, 0.001232, -0.007253, 2.357612, 0.000000, 350.655761, 1.000000, 1.000000, 1.147821 }, // SKINID 202 || Hat1 - NO
	{ 0.146635, 0.001232, -0.007253, 2.357612, 0.000000, 350.655761, 1.000000, 1.000000, 1.147821 }, // SKINID 203 || Hat1 - SI
	{ 0.146635, 0.001232, -0.007253, 2.357612, 0.000000, 350.655761, 1.000000, 1.000000, 1.147821 }, // SKINID 204 || Hat1 - SI
	{ 0.0, 0.001232, -0.007253, 2.357612, 0.000000, 350.655761, 1.000000, 1.000000, 1.147821 }, // SKINID 205 || Hat1 - NO
	{ 0.146635, 0.005633, -0.007253, 2.357612, 0.000000, 350.655761, 1.000000, 1.000000, 0.937262 }, // SKINID 206 || Hat1 - SI
	{ 0.110713, -0.007261, -0.007253, 2.357612, 0.000000, 350.655761, 1.000000, 1.000000, 0.937262 }, // SKINID 207 || Hat1 - SI
	{ 0.125000, 0.008000, -0.009999, 0.000000, 0.000000, 350.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 208 || Hat1 - NO
	{ 0.0, -0.007261, -0.007253, 2.357612, 0.000000, 350.655761, 1.000000, 1.000000, 0.937262 }, // SKINID 209 || Hat1 - NO
	{ 0.110713, -0.007261, -0.007253, 2.357612, 0.000000, 350.655761, 1.000000, 1.000000, 0.937262 }, // SKINID 210 || Hat1 - SI
	{ 0.147418, -0.025857, -0.004423, 2.357612, 0.000000, 344.286315, 1.000000, 1.000000, 0.937262 }, // SKINID 211 || Hat1 - SI
	{ 0.0, 0.010434, -0.004423, 2.357612, 0.000000, 344.286315, 1.000000, 1.000000, 0.937262 }, // SKINID 212 || Hat1 - NO
	{ 0.146859, -0.020953, -0.004423, 2.357612, 0.000000, 337.401458, 1.000000, 1.000000, 0.937262 }, // SKINID 213 || Hat1 - SI
	{ 0.160636, -0.017604, 0.000000, 0.000000, 0.000000, 358.192840, 1.000000, 1.000000, 1.000000 }, // SKINID 214 || Hat1 - SI
	{ 0.0, -0.017604, 0.000000, 0.000000, 0.000000, 358.192840, 1.000000, 1.000000, 1.000000 }, // SKINID 215 || Hat1 - NO
	{ 0.160636, -0.017604, 0.000000, 0.000000, 0.000000, 358.192840, 1.000000, 1.000000, 1.000000 }, // SKINID 216 || Hat1 - SI
	{ 0.142205, 0.006644, 0.000000, 0.000000, 0.000000, 341.290191, 1.000000, 1.000000, 1.000000 }, // SKINID 217 || Hat1 - SI
	{ 0.0, 0.006644, 0.000000, 0.000000, 0.000000, 341.290191, 1.000000, 1.000000, 1.000000 }, // SKINID 218 || Hat1 - NO
	{ 0.142205, -0.031149, 0.000000, 0.000000, 0.000000, 341.290191, 1.000000, 1.000000, 1.000000 }, // SKINID 219 || Hat1 - SI
	{ 0.0, -0.031149, 0.000000, 0.000000, 0.000000, 341.290191, 1.000000, 1.000000, 1.000000 }, // SKINID 220 || Hat1 - NO
	{ 0.190951, -0.031149, 0.000000, 0.000000, 0.000000, 357.111022, 1.000000, 1.000000, 1.000000 }, // SKINID 221 || Hat1 - SI
	{ 0.190951, -0.031149, 0.000000, 0.000000, 0.000000, 357.111022, 1.000000, 1.000000, 1.000000 }, // SKINID 222 || Hat1 - SI
	{ 0.190951, -0.007435, 0.000000, 0.000000, 0.000000, 352.024505, 1.000000, 1.000000, 1.000000 }, // SKINID 223 || Hat1 - SI
	{ 0.154248, -0.033056, 0.000000, 0.000000, 0.000000, 341.550415, 1.000000, 1.000000, 1.000000 }, // SKINID 224 || Hat1 - SI
	{ 0.154248, -0.033056, 0.000000, 0.000000, 0.000000, 341.550415, 1.000000, 1.000000, 1.000000 }, // SKINID 225 || Hat1 - SI
	{ 0.142912, -0.033056, 0.000000, 0.000000, 0.000000, 347.592559, 1.000000, 1.000000, 1.000000 }, // SKINID 226 || Hat1 - SI
	{ 0.147534, -0.003579, -0.010556, 0.000000, 0.000000, 341.749206, 1.000000, 1.000000, 1.000000 }, // SKINID 227 || Hat1 - SI
	{ 0.163885, -0.027008, -0.010556, 0.000000, 0.000000, 340.084472, 1.000000, 1.000000, 1.000000 }, // SKINID 228 || Hat1 - SI
	{ 0.126851, -0.037118, -0.010556, 0.000000, 0.000000, 340.084472, 1.000000, 1.000000, 1.000000 }, // SKINID 229 || Hat1 - SI
	{ 0.0, -0.037118, -0.010556, 0.000000, 0.000000, 340.084472, 1.000000, 1.000000, 1.000000 }, // SKINID 230 || Hat1 - NO
	{ 0.0, -0.037118, -0.010556, 0.000000, 0.000000, 340.084472, 1.000000, 1.000000, 1.000000 }, // SKINID 231 || Hat1 - NO
	{ 0.126851, -0.037118, -0.010556, 0.000000, 0.000000, 340.084472, 1.000000, 1.000000, 1.000000 }, // SKINID 232 || Hat1 - SI
	{ 0.146466, -0.037118, -0.010556, 0.000000, 0.000000, 340.084472, 1.000000, 1.000000, 1.000000 }, // SKINID 233 || Hat1 - SI
	{ 0.120998, -0.027749, -0.010556, 0.000000, 0.000000, 340.084472, 1.000000, 1.000000, 1.000000 }, // SKINID 234 || Hat1 - SI
	{ 0.081188, -0.025296, -0.010556, 0.000000, 0.000000, 340.084472, 1.000000, 1.000000, 1.000000 }, // SKINID 235 || Hat1 - SI
	{ 0.120190, -0.027475, -0.010556, 0.000000, 0.000000, 340.084472, 1.000000, 1.000000, 1.000000 }, // SKINID 236 || Hat1 - SI
	{ 0.120190, -0.027475, -0.010556, 0.000000, 0.000000, 336.580200, 1.000000, 1.000000, 1.000000 }, // SKINID 237 || Hat1 - SI
	{ 0.0, -0.027475, -0.010556, 0.000000, 0.000000, 336.580200, 1.000000, 1.000000, 1.000000 }, // SKINID 238 || Hat1 - NO
	{0.0, -0.027475, -0.010556, 0.000000, 0.000000, 336.580200, 1.000000, 1.000000, 1.000000 }, // SKINID 239 || Hat1 - NO
	{ 0.161402, -0.027475, -0.007965, 0.000000, 0.000000, 342.346069, 1.000000, 1.000000, 1.000000 }, // SKINID 240 || Hat1 - SI
	{ 0.0, -0.027475, -0.007965, 0.000000, 0.000000, 342.346069, 1.000000, 1.000000, 1.000000 }, // SKINID 241 || Hat1 - NO
	{ 0.0, -0.027475, -0.007965, 0.000000, 0.000000, 342.346069, 1.000000, 1.000000, 1.000000 }, // SKINID 242 || Hat1 - NO
	{ 0.0, -0.027475, -0.007965, 0.000000, 0.000000, 342.346069, 1.000000, 1.000000, 1.000000 }, // SKINID 243 || Hat1 - NO
	{ 0.0, -0.027475, -0.007965, 0.000000, 0.000000, 342.346069, 1.000000, 1.000000, 1.000000 }, // SKINID 244 || Hat1 - NO
	{ 0.161402, -0.027475, -0.007965, 0.000000, 0.000000, 342.346069, 1.000000, 1.000000, 1.000000 }, // SKINID 245 || Hat1 - SI
	{ 0.0, -0.027475, -0.007965, 0.000000, 0.000000, 342.346069, 1.000000, 1.000000, 1.000000 }, // SKINID 246 || Hat1 - NO
	{ 0.0, -0.027475, -0.007965, 0.000000, 0.000000, 342.346069, 1.000000, 1.000000, 1.000000 }, // SKINID 247 || Hat1 - NO
	{ 0.0, -0.027475, -0.007965, 0.000000, 0.000000, 342.346069, 1.000000, 1.000000, 1.000000 }, // SKINID 248 || Hat1 - NO
	{ 0.0, -0.027475, -0.007965, 0.000000, 0.000000, 342.346069, 1.000000, 1.000000, 1.000000 }, // SKINID 249 || Hat1 - NO
	{ 0.143284, -0.006071, -0.011766, 0.000000, 0.000000, 350.770904, 0.969615, 1.000000, 1.019091 }, // SKINID 250 || Hat1 - SI.
	{ 0.129524, -0.022446, -0.010617, 0.000000, 0.000000, 336.387725, 0.969615, 1.000000, 1.063670 }, // SKINID 251 || Hat1 - SI.
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 252 || Hat1 - NO.
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 253 || Hat1 - NO.
	{ 0.0, 0.000000, -0.006370, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.131554 }, // SKINID 254 || Hat1 - NO.
	{ 0.0, 0.000000, -0.006370, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.131554 }, // SKINID 255 || Hat1 - NO.
	{ 0.0, 0.000000, -0.006370, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.131554 }, // SKINID 256 || Hat1 - NO.
	{ 0.139914, -0.025659, -0.006370, 0.000000, 0.000000, 338.564331, 1.000000, 1.000000, 0.984799 }, // SKINID 257 || Hat1 - SI.
	{ 0.149824, -0.025659, -0.006370, 0.000000, 0.000000, 338.564331, 1.000000, 1.000000, 1.125806 }, // SKINID 258 || Hat1 - SI.
	{ 0.149824, -0.025659, -0.006370, 0.000000, 0.000000, 338.564331, 1.000000, 1.000000, 1.125806 }, // SKINID 259 || Hat1 - SI.
	{ 0.0, -0.025659, -0.006370, 0.000000, 0.000000, 338.564331, 1.000000, 1.000000, 1.125806 }, // SKINID 260 || Hat1 - NO.
	{ 0.0, -0.025659, -0.006370, 0.000000, 0.000000, 338.564331, 1.000000, 1.000000, 1.125806 }, // SKINID 261 || Hat1 - NO.
	{ 0.108261, 0.001541, -0.006370, 0.000000, 0.000000, 338.564331, 1.000000, 1.000000, 0.998337 }, // SKINID 262 || Hat1 - SI.
	{ 0.127416, -0.014097, -0.004904, 0.000000, 0.000000, 341.057495, 1.187035, 1.000000, 1.076132 }, // SKINID 263 || Hat1 - SI.
	{ 0.0, -0.014097, -0.004904, 0.000000, 0.000000, 341.057495, 1.187035, 1.000000, 1.076132 }, // SKINID 264 || Hat1 - NO.
	{ 0.127416, -0.014097, -0.004904, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 0.987667 }, // SKINID 265 || Hat1 - SI.
	{ 0.134032, -0.014307, -0.004904, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 1.053730 }, // SKINID 266 || Hat1 - SI.
	{ 0.131089, -0.031620, -0.004904, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 1.053730 }, // SKINID 267 || Hat1 - SI.
	{ 0.131089, -0.016403, -0.008634, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 1.162479 }, // SKINID 268 || Hat1 - SI.
	{ 0.0, -0.016403, -0.008634, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 1.162479 }, // SKINID 269 || Hat1 - NO.
	{ 0.0, -0.016403, -0.008634, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 1.162479 }, // SKINID 270 || Hat1 - NO.
	{ 0.0, -0.016403, -0.008634, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 1.162479 }, // SKINID 271 || Hat1 - NO.
	{ 0.148665, -0.007365, -0.008634, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 1.108956 }, // SKINID 272 || Hat1 - SI.
	{ 0.125000, -0.009999, -0.009999, 0.000000, 0.000000, 350.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 273 || Hat1 - NO.
	{ 0.132041, -0.007365, -0.008634, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 0.919670 }, // SKINID 274 || Hat1 - SI.
	{ 0.132041, -0.007365, -0.008634, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 0.948305 }, // SKINID 275 || Hat1 - SI.
	{ 0.132041, 0.000721, -0.008634, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 0.948305 }, // SKINID 276 || Hat1 - SI.
	{ 0.0, 0.000721, -0.008634, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 0.948305 }, // SKINID 277 || Hat1 - NO.
	{ 0.0, 0.000721, -0.008634, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 0.948305 }, // SKINID 278 || Hat1 - NO.
	{ 0.0, 0.000721, -0.008634, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 0.948305 }, // SKINID 279 || Hat1 - NO.
	{ 0.133243, 0.000721, -0.008634, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 0.948305 }, // SKINID 280 || Hat1 - SI.
	{ 0.133243, 0.000721, -0.008634, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 0.948305 }, // SKINID 281 || Hat1 - SI.
	{ 0.133876, 0.000523, -0.008634, 0.000000, 0.000000, 341.057495, 1.152778, 1.000000, 1.020910 }, // SKINID 282 || Hat1 - SI.
	{ 0.0, 0.000523, -0.008634, 0.000000, 0.000000, 341.057495, 1.152778, 1.000000, 1.020910 }, // SKINID 283 || Hat1 - NO.
	{ 0.0, 0.000523, -0.008634, 0.000000, 0.000000, 341.057495, 1.152778, 1.000000, 1.020910 }, // SKINID 284 || Hat1 - NO.
	{ 0.0, 0.000523, -0.008634, 0.000000, 0.000000, 341.057495, 1.152778, 1.000000, 1.020910 }, // SKINID 285 || Hat1 - NO.
	{ 0.129142, 0.000523, -0.008634, 0.000000, 0.000000, 341.057495, 1.152778, 1.000000, 1.020910 }, // SKINID 286 || Hat1 - SI.
	{ 0.0, 0.000523, -0.008634, 0.000000, 0.000000, 341.057495, 1.152778, 1.000000, 1.020910 }, // SKINID 287 || Hat1 - NO.
	{ 0.0, 0.000523, -0.008634, 0.000000, 0.000000, 341.057495, 1.152778, 1.000000, 1.020910 }, // SKINID 288 || Hat1 - NO.
	{ 0.0, 0.000523, -0.008634, 0.000000, 0.000000, 341.057495, 1.152778, 1.000000, 1.020910 }, // SKINID 289 || Hat1 - NO.
	{ 0.122872, -0.007010, -0.008634, 0.000000, 0.000000, 341.057495, 1.152778, 1.000000, 1.099102 }, // SKINID 290 || Hat1 - SI.
	{ 0.164891, -0.023199, -0.008634, 0.000000, 0.000000, 341.057495, 1.152778, 1.000000, 1.062029 }, // SKINID 291 || Hat1 - SI.
	{ 0.111781, -0.000514, -0.015303, 0.000000, 0.000000, 341.057495, 1.152778, 1.000000, 0.959454 }, // SKINID 292 || Hat1 - SI.
	{ 0.0, -0.000514, -0.015303, 0.000000, 0.000000, 341.057495, 1.152778, 1.000000, 0.959454 }, // SKINID 293 || Hat1 - No.
	{ 0.180277, -0.010770, -0.008173, 0.000000, 0.000000, 350.911071, 1.152778, 1.000000, 1.018012 }, // SKINID 294 || Hat1 - SI.
	{ 0.140434, -0.010770, -0.008173, 0.000000, 0.000000, 350.911071, 1.152778, 1.000000, 1.071541 }, // SKINID 295 || Hat1 - SI.
	{ 0.152344, -0.055147, -0.008173, 0.000000, 0.000000, 328.444580, 1.036304, 1.000000, 1.071541 }, // SKINID 296 || Hat1 - SI.
	{ 0.152344, -0.045099, -0.008173, 0.000000, 0.000000, 328.444580, 1.036304, 1.000000, 1.071541 }, // SKINID 297 || Hat1 - SI.
	{ 0.136437, -0.045099, -0.008173, 0.000000, 0.000000, 328.444580, 1.036304, 1.000000, 1.071541 }, // SKINID 298 || Hat1 - SI.
	{ 0.153677, -0.028657, -0.008173, 0.000000, 0.000000, 328.444580, 1.036304, 1.000000, 1.071541 }  // SKINID 299 || Hat1 - SI.
};
new Float:SkinesBoina[300][9] = {
	{ 0.180261, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 0 || Beret1 - || BARET ||
	{ 0.180261, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 1 || Beret1 - || BARET ||
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 2 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 3 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 4 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 5 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 6 || Beret1 - NOOOOOOOOO
	{ 0.176095, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 7 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 8 || Beret1 - NOOOOOOOOO
	{ 0.149783, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 9 || Beret1 -
	{ 0.149783, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 10 || Beret1 -
	{ 0.149783, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 11 || Beret1 -
	{ 0.149783, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 12 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 13 || Beret1 - NOOOOOOOOO
	{ 0.149783, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 14 || Beret1 -
	{ 0.149783, -0.028243, -0.001220, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 15 || Beret1 -
	{ 0.0, -0.028243, -0.001220, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 16 || Beret1 - NOOOOOOOOO
	{ 0.156457, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 17 || Beret1 -
	{ 0.118533, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 18 || Beret1 -
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 19 || Beret1 - NOOOOOOOOO
	{ 0.183444, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 20 || Beret1 -
	{ 0.161830, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 21 || Beret1 -
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 22 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 23 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 24 || Beret1 - NOOOOOOOOO
	{ 0.161830, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 25 || Beret1
	{ 0.164234, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 26 || Beret1
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 27 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 28 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 29 || Beret1 - NOOOOOOOOO
	{ 0.164234, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 30 || Beret1 -
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 31 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 32 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 33 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 34 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 35 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 36 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 37 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 38 || Beret1 - NOOOOOOOOO
	{ 0.131527, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 39 || Beret1 -
	{ 0.131527, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 40 || Beret1 -
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 41 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 42 || Beret1 - NOOOOOOOOO
	{ 0.104019, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 43 || Beret1 -
	{ 0.128697, 0.022019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 44 || Beret1 -
	{ 0.128697, -0.008573, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 45 || Beret1 -
	{ 0.164191, 0.018399, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 46 || Beret1 -
	{ 0.164305, 0.020698, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 47 || Beret1 -
	{ 0.175181, -0.010091, 0.000000, 0.000000, 0.000000, 0.000000, 1.104145, 1.000000, 1.121630 }, // SKINID 48 || Beret1 -
	{ 0.146655, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 49 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 50 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 51 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 52 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 53 || Beret1 - NOOOOOOOOO
	{ 0.146655, 0.027900, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 54 || Beret1 -
	{ 0.146655, -0.002721, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 55 || Beret1 -
	{ 0.146655, -0.002721, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 56 || Beret1 -
	{ 0.171912, 0.008824, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 57 || Beret1 -
	{ 0.151101, -0.008750, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 58 || Beret1 -
	{ 0.151390, 0.005085, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 59 || Beret1 -
	{ 0.151390, 0.005085, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 60 || Beret1 -
	{ 0.0, 0.005085, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 61 || Beret1 - NOOOOOOOOO
	{ 0.151390, 0.028324, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 62 || Beret1 -
	{ 0.170077, -0.002114, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 63 || Beret1 -
	{ 0.140552, -0.002114, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 64 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 65 || Beret1 - NOOOOOOOOO
	{ 0.140552, 0.026128, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 66 || Beret1 -
	{ 0.0, 0.026128, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 67 || Beret1 - NOOOOOOOOO
	{ 0.151242, 0.019900, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 68 || Beret1 -
	{ 0.159290, -0.005815, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 69 || Beret1 -
	{ 0.159290, 0.010538, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 70 || Beret1 -
	{ 0.0, 0.010538, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 71 || Beret1 - NOOOOOOOOO
	{ 0.159290, 0.010538, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 72 || Beret1 -
	{ 0.0, 0.010538, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 73 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 74 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.010538, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 75 || Beret1 - NOOOOOOOOO
	{ 0.159290, -0.008761, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 76 || Beret1 -
	{ 0.0, -0.008761, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 77 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.008761, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 78 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.008761, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 79 || Beret1 - NOOOOOOOOO
	{ 0.136051, -0.008761, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 80 || Beret1 -
	{ 0.136051, -0.008761, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 81 || Beret1 -
	{ 0.195115, 0.023367, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 82 || Beret1 -
	{ 0.195115, 0.023367, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 83 || Beret1 -
	{ 0.195115, 0.011881, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 84 || Beret1 -
	{ 0.195115, 0.011881, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 85 || Beret1 -
	{ 0.0, 0.011881, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 86 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.011881, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 87 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.011881, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 88 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.011881, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 89 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.011881, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 90 || Beret1 - NOOOOOOOOO
	{ 0.177857, -0.011357, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 91 || Beret1 -
	{ 0.0, -0.011357, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 92 || Beret1 - NOOOOOOOOO
	{ 0.177857, -0.011357, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 93 || Beret1 -
	{ 0.0, -0.011357, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 94 || Beret1 - NOOOOOOOOO
	{ 0.160671, -0.019439, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 95 || Beret1 -
	{ 0.181481, -0.001912, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 96 || Beret1 -
	{ 0.164224, -0.001912, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 97 || Beret1 -
	{ 0.177388, 0.011110, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 98 || Beret1 -
	{ 0.0, 0.011110, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 99 || Beret1 - NOOOOOOOOO
	{ 0.173578, 0.011110, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 100 || Beret1 -
	{ 0.174914, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 101 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 102 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 103 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 104 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 105 || Beret1 - NOOOOOOOOO
	{ 0.174914, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 106 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 107 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 108 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 109 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 110 || Beret1 - NOOOOOOOOO
	{ 0.174914, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 111 || Beret1 -
	{ 0.135964, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 112 || Beret1 -
	{ 0.176390, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 113 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 114 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 115 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 116 || Beret1 - NOOOOOOOOO
	{ 0.145224, 0.017181, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 117 || Beret1 -
	{ 0.145224, 0.017181, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 118 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 119 || Beret1 - NOOOOOOOOO
	{ 0.160884, 0.005099, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 120 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 121 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.005099, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 122 || Beret1 - NOOOOOOOOO
	{ 0.168759, 0.005099, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 123 || Beret1 -
	{ 0.168759, 0.005099, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 124 || Beret1 -
	{ 0.168759, 0.005099, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 125 || Beret1 -
	{ 0.168759, -0.009978, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 126 || Beret1 -
	{ 0.168759, 0.001810, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 127 || Beret1 -
	{ 0.168759, 0.025049, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 128 || Beret1 -
	{ 0.0, 0.025049, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 129 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.025049, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 130 || Beret1 - NOOOOOOOOO
	{ 0.146233, -0.002107, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 131 || Beret1 -
	{ 0.062156, -0.002107, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 132 || Beret1 -
	{ 0.0, -0.002107, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 133 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.002107, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 134 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.002107, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 135 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.002107, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 136 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.002107, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 137 || Beret1 - NOOOOOOOOO
	{ 0.154004, 0.004867, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 138 || Beret1 -
	{ 0.154004, 0.004867, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 139 || Beret1 -
	{ 0.154004, 0.004867, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 140 || Beret1 -
	{ 0.169024, 0.004867, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 141 || Beret1 -
	{ 0.0, 0.004867, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 142 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.004867, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 143 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 144 || Beret1 - NOOOOOOOOO
	{ 0.175224, 0.000106, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 145 || Beret1 -
	{ 0.175224, 0.000106, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 146 || Beret1 -
	{ 0.175224, -0.013702, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 147 || Beret1 -
	{ 0.175224, -0.013702, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 148 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 149 || Beret1 - NOOOOOOOOO
	{ 0.175224, -0.013702, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 150 || Beret1 -
	{ 0.175224, -0.013702, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 151 || Beret1 -
	{ 0.175224, -0.013702, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 152 || Beret1 -
	{ 0.0, -0.013702, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 153 || Beret1 - NOOOOOOOOO
	{ 0.119687, -0.013702, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 154 || Beret1 -
	{ 0.0, -0.013702, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 155 || Beret1 - NOOOOOOOOO
	{ 0.180860, -0.013702, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 156 || Beret1 -
	{ 0.147001, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 157 || Beret1 -
	{ 0.0, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 158 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 159 || Beret1 - NOOOOOOOOO
	{ 0.147001, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 160 || Beret1 -
	{ 0.0, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 161 || Beret1 - NOOOOOOOOO
	{ 0.163098, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 162 || Beret1 -
	{ 0.141079, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 163 || Beret1 -
	{ 0.141079, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 164 || Beret1 -
	{ 0.141079, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 165 || Beret1 -
	{ 0.141079, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 166 || Beret1 -
	{ 0.0, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 167 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 168 || Beret1 - NOOOOOOOOO
	{ 0.141079, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 169 || Beret1 -
	{ 0.156033, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 170 || Beret1 -
	{ 0.178052, -0.000019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 171 || Beret1 -
	{ 0.172130, -0.000019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 172 || Beret1 -
	{ 0.0, -0.000019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 173 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.000019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 174 || Beret1 - NOOOOOOOOO
	{ 0.172130, -0.000019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 175 || Beret1 - NOOOOOOOOO
	{ 0.172130, -0.000019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 176 || Beret1 -
	{ 0.172130, -0.000019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 177 || Beret1 -
	{ 0.172130, -0.000019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 178 || Beret1 -
	{ 0.172130, -0.000019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 179 || Beret1 -
	{ 0.172130, -0.000019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 180 || Beret1 -
	{ 0.0, -0.000019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 181 || Beret1 - NOOOOOOOOO
	{ 0.150111, -0.000019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 182 || Beret1 -
	{ 0.150111, -0.000019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 183 || Beret1 -
	{ 0.150111, 0.011443, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 184 || Beret1 -
	{ 0.168541, 0.001727, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 185 || Beret1 -
	{ 0.168541, 0.001727, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 186 || Beret1 -
	{ 0.158668, -0.009162, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 187 || Beret1 -
	{ 0.158668, -0.009162, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 188 || Beret1 -
	{ 0.158668, -0.009162, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 189 || Beret1 -
	{ 0.179479, -0.009162, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 190 || Beret1 -
	{ 0.179479, -0.009162, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 191 || Beret1 -
	{ 0.179479, -0.009162, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 192 || Beret1 -
	{ 0.179479, -0.009162, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 193 || Beret1 -
	{ 0.179479, -0.009162, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 194 || Beret1 -
	{ 0.0, -0.009162, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 195 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.009162, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 196 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.009162, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 197 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.009162, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 198 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.009162, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 199 || Beret1 - NOOOOOOOOO
	{ 0.163382, 0.006934, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 200 || Beret1 -
	{ 0.0, 0.006934, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 201 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.006934, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 202 || Beret1 - NOOOOOOOOO
	{ 0.163382, 0.006934, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 203 || Beret1 -
	{ 0.163382, 0.006934, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 204 || Beret1 -
	{ 0.0, 0.006934, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 205 || Beret1 - NOOOOOOOOO
	{ 0.163382, 0.006934, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 206 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 207 || Beret1 - NOOOOOOOOO
	{ 0.176095, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 208 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.006934, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 209 || Beret1 - NOOOOOOOOO
	{ 0.138910, 0.006934, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 210 || Beret1 -
	{ 0.163572, 0.004481, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 211 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 212 || Beret1 - NOOOOOOOOO
	{ 0.159425, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 213 || Beret1 -
	{ 0.159425, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 214 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 215 || Beret1 - NOOOOOOOOO
	{ 0.159425, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 216 || Beret1 -
	{ 0.159425, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 217 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 218 || Beret1 - NOOOOOOOOO
	{ 0.159425, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 219 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 220 || Beret1 - NOOOOOOOOO
	{ 0.159425, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 221 || Beret1 -
	{ 0.159425, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 222 || Beret1 -
	{ 0.159425, 0.018406, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 223 || Beret1 -
	{ 0.159425, -0.001424, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 224 || Beret1 -
	{ 0.159425, -0.001424, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 225 || Beret1 -
	{ 0.159425, -0.001424, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 226 || Beret1 -
	{ 0.175773, 0.014291, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 227 || Beret1 -
	{ 0.157342, 0.014291, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 228 || Beret1 -
	{ 0.131626, -0.006592, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 229 || Beret1 -
	{ 0.0, -0.006592, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 230 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.006592, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 231 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.006592, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 232 || Beret1 - NOOOOOOOOO
	{ 0.131626, -0.006592, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 233 || Beret1 -
	{ 0.131626, -0.006592, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 234 || Beret1 -
	{ 0.102910, -0.006592, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 235 || Beret1 -
	{ 0.134742, -0.006592, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 236 || Beret1 -
	{ 0.0, -0.006592, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 237 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.006592, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 238 || Beret1 - NOOOOOOOOO
	{ 0.134742, -0.006592, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 239 || Beret1 -
	{ 0.171015, -0.005360, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 240 || Beret1 -
	{ 0.0, -0.005360, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 241 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.005360, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 242 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.005360, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 243 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.005360, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 244 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.005360, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 245 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.005360, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 246 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.005360, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 247 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.005360, 0.000000, 0.000000, 0.000000, 0.000000, 1.281611, 1.000000, 1.462028 }, // SKINID 248 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.005360, 0.000000, 0.000000, 0.000000, 0.000000, 1.281611, 1.000000, 1.462028 }, // SKINID 249 || Beret1 - NOOOOOOOOO
	{ 0.161642, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 250 || Beret1 -
	{ 0.161642, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 251 || Beret1 -
	{ 0.161642, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 252 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 253 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 254 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 255 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 256 || Beret1 - NOOOOOOOOO
	{ 0.161642, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 257 || Beret1 -
	{ 0.161642, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 258 || Beret1 -
	{ 0.161642, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 259 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 260 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 261 || Beret1 - NOOOOOOOOO
	{ 0.147644, 0.022091, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 262 || Beret1 -
	{ 0.0, 0.022091, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 263 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.022091, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 264 || Beret1 - NOOOOOOOOO
	{ 0.147644, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 265 || Beret1 -
	{ 0.147644, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 266 || Beret1 -
	{ 0.147644, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 267 || Beret1 -
	{ 0.147644, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 268 || Beret1 -
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 269 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 270 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 271 || Beret1 - NOOOOOOOOO
	{ 0.147644, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 272 || Beret1 -
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 273 || Beret1 - NOOOOOOOOO
	{ 0.147644, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 274 || Beret1 -
	{ 0.147644, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 275 || Beret1 -
	{ 0.147644, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 276 || Beret1 -
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 277 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 278 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 279 || Beret1 - NOOOOOOOOO
	{ 0.147644, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 280 || Beret1 -
	{ 0.147644, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 281 || Beret1 -
	{ 0.147644, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 282 || Beret1 -
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 283 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 284 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 285 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 286 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 287 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 288 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 289 || Beret1 - NOOOOOOOOO
	{ 0.147644, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 290 || Beret1 -
	{ 0.170883, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 291 || Beret1 -
	{ 0.133509, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 292 || Beret1 -
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 293 || Beret1 - NOOOOOOOOO
	{ 0.155528, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 294 || Beret1 -
	{ 0.155528, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 295 || Beret1 -
	{ 0.155528, 0.004869, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 296 || Beret1 -
	{ 0.155528, 0.004869, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 297 || Beret1 -
	{ 0.155528, 0.004869, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 298 || Beret1 -
	{ 0.155528, 0.024484, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 } // SKINID 299 || Beret1 -
};
new Float:SkinesGlasesPos[300][7] = {
	{0.098771, 0.030772, -0.000335, 85.342658, 84.122947, 4.236968, 1.000000}, // - 0
	{0.100766, 0.028630, -0.003521, 87.936676, 82.110870, 4.236968, 1.000000}, // - 1
	{0.083712, 0.033132, -0.003521, 87.936676, 82.110870, 4.236968, 1.000000}, // - 2
	{0.099500, 0.047703, 0.000558, 280.687683, 90.938697, 169.126358, 1.000000}, // - 3
	{0.126660, 0.017465, -0.004450, 281.516479, 103.193008, 168.312896, 1.167009}, // - 4
	{0.109650, 0.017465, -0.004712, 281.516479, 106.686439, 168.312896, 1.167009}, // - 5
	{0.101269, 0.028933, 0.000001, 281.516479, 91.839576, 168.312896, 1.000000}, // - 6
	{0.090066, 0.043458, -0.006523, 87.936676, 82.110870, 4.236968, 1.000000}, // - 7
	{0.087873, 0.038192, -0.003603, 281.516479, 91.839576, 168.312896, 1.020467}, // - 8
	{0.070977, 0.028663, 0.000147, 81.164970, 92.128402, 4.236968, 1.000000},  // - 9
	{0.072317, 0.032179, -0.002934, 86.843269, 84.196006, 4.236968, 1.000000}, // - 10
	{0.072317, 0.035465, -0.002201, 86.843269, 84.196006, 4.236968, 1.000000}, // - 11
	{0.072317, 0.028100, -0.002201, 86.843269, 84.196006, 4.236968, 1.000000}, // - 12
	{0.076569, 0.028100, -0.002201, 86.843269, 84.196006, 4.236968, 1.000000}, // - 13
	{0.091310, 0.049169, -0.002201, 86.843269, 84.196006, 4.236968, 1.000000}, // - 14
	{0.073734, 0.006292, -0.002755, 86.843269, 84.196006, 4.236968, 1.000000}, // - 15
	{0.092845, 0.040331, 0.000183, 86.843269, 82.864280, 4.236968, 1.000000},  // - 16
	{0.088241, 0.030184, -0.000157, 86.843269, 82.864280, 4.236968, 1.000000}, // - 17
	{0.061677, 0.029596, -0.007398, 86.843269, 82.864280, 4.236968, 1.000000}, // - 18
	{0.079911, 0.029596, -0.002934, 86.843269, 82.864280, 4.236968, 1.000000}, // - 19
	{0.095079, 0.029596, -0.001718, 85.261871, 86.296562, 4.236968, 1.000000}, // - 20
	{0.093728, 0.042083, -0.005781, 85.261871, 81.636192, 4.236968, 1.000000}, // - 21
	{0.079585, 0.042083, -0.005781, 85.261871, 81.636192, 4.236968, 1.000000}, // - 22
	{0.090786, 0.041737, -0.005263, 85.261871, 81.636192, 4.236968, 1.000000}, // - 23
	{0.085247, 0.026941, -0.000317, 85.261871, 81.636192, 4.236968, 1.000000}, // - 24
	{0.081646, 0.031448, -0.001113, 89.393653, 81.665985, 4.236968, 1.000000}, // - 25
	{0.083700, 0.033814, -0.001960, 86.436462, 81.665985, 4.236968, 1.000000}, // - 26
	{0.092498, 0.037321, -0.001960, 86.436462, 85.568023, 4.236968, 1.000000}, // - 27
	{0.097068, 0.041360, -0.007881, 86.771400, 85.568023, 4.236968, 1.000000}, // - 28
	{0.083456, 0.050595, 0.001011, 86.771400, 77.201461, 4.236968, 1.000000},  // - 29
	{0.076983, 0.047168, -0.006161, 86.771400, 74.329719, 4.236968, 1.000000}, // - 30
	{0.083798, 0.042184, -0.001869, 86.771400, 83.181861, 4.236968, 1.000000}, // - 31
	{0.053021, -0.000587, -0.001869, 86.771400, 66.859710, 4.236968, 1.000000},// - 32
	{0.034386, 0.013324, -0.001869, 86.771400, 80.314460, 4.236968, 1.000000}, // - 33
	{0.104669, 0.037365, -0.001403, 86.771400, 87.178382, 4.236968, 1.000000}, // - 34
	{0.102659, 0.037465, -0.000829, 86.771400, 93.020492, 4.236968, 1.000000}, // - 35
	{0.107638, 0.037465, -0.000829, 86.771400, 93.020492, 4.236968, 1.000000}, // - 36
	{0.107638, 0.035879, -0.000829, 86.771400, 93.020492, 4.236968, 1.000000}, // - 37
	{0.107638, 0.041106, -0.000829, 86.771400, 93.020492, 4.236968, 1.000000}, // - 38
	{0.080326, 0.035634, -0.000829, 86.771400, 93.020492, 4.236968, 1.000000}, // - 39
	{0.080326, 0.027371, -0.000829, 86.771400, 93.020492, 4.236968, 1.000000}, // - 40
	{0.084617, 0.039613, -0.001620, 86.771400, 93.020492, 4.236968, 1.000000}, // - 41
	{0.087873, 0.037386, -0.003603, 281.516479, 91.839576, 168.312896, 1.093392}, // - 42
	{0.040075, 0.025445, -0.000974, 86.771400, 92.964149, 4.236968, 1.000000}, // - 43
	{0.077369, 0.028469, -0.000974, 86.771400, 78.435791, 4.236968, 1.000000}, // - 44
	{0.064145, 0.028684, -0.000974, 86.771400, 84.762802, 4.236968, 1.000000}, // - 45
	{0.091993, 0.056559, -0.000974, 86.771400, 84.762802, 4.236968, 1.000000}, // - 46
	{0.084582, 0.051277, -0.005034, 86.771400, 84.762802, 4.236968, 1.000000}, // - 47
	{0.092182, 0.042095, -0.003533, 86.771400, 84.762802, 4.236968, 1.000000}, // - 48
	{0.086866, 0.032203, -0.001021, 86.771400, 84.762802, 4.236968, 1.000000}, // - 49
	{0.099350, 0.009422, -0.005899, 86.771400, 84.762802, 4.236968, 1.000000}, // - 50
	{0.099350, 0.030598, -0.005899, 86.771400, 84.762802, 4.236968, 1.000000}, // - 51
	{0.099350, 0.030598, -0.003575, 86.771400, 84.762802, 4.236968, 1.000000}, // - 52
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, // - 53
	{0.079123, 0.030598, -0.003575, 86.771400, 84.762802, 4.236968, 1.000000}, // - 54
	{0.063159, 0.029641, -0.003575, 86.771400, 84.762802, 4.236968, 1.000000}, // - 55
	{0.070293, 0.029641, -0.000570, 86.771400, 84.762802, 4.236968, 1.000000}, // - 56
	{0.111305, 0.045368, -0.000570, 86.771400, 84.458084, 4.236968, 1.000000}, // - 57
	{0.084901, 0.020965, -0.000570, 86.771400, 79.542411, 4.236968, 1.000000}, // - 58
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, // - 59
	{0.090164, 0.044163, -0.004754, 86.771400, 79.542411, 4.236968, 1.000000}, // - 60
	{0.087151, 0.041447, -0.000885, 90.928329, 89.598678, 0.000000, 1.000000}, // - 61
	{0.094350, 0.041447, 0.005717, 90.928329, 89.598678, 0.000000, 1.000000},  // - 62
	{0.075534, 0.041447, -0.001751, 90.928329, 89.598678, 0.000000, 1.000000}, // - 63
	{0.075534, 0.041447, -0.001751, 90.928329, 89.598678, 0.000000, 1.000000}, // - 64
	{0.087873, 0.032505, -0.003603, 281.516479, 91.839576, 168.312896, 0.965358}, // - 65
	{0.104148, 0.034787, 0.001341, 90.928329, 89.598678, 0.000000, 1.000000},  // - 66
	{0.104148, 0.034787, 0.001341, 90.928329, 89.598678, 0.000000, 1.000000},  // - 67
	{0.087317, 0.039646, -0.004032, 90.928329, 89.598678, 0.000000, 1.000000}, // - 68
	{0.074873, 0.039646, -0.003072, 90.928329, 89.598678, 0.000000, 1.000000}, // - 69
	{0.090391, 0.042364, 0.005494, 90.928329, 89.598678, 0.000000, 1.000000},  // - 70
	{0.090391, 0.022298, -0.001170, 90.928329, 89.598678, 0.000000, 1.000000}, // - 71
	{0.090391, 0.039580, -0.001170, 90.928329, 89.598678, 0.000000, 1.000000}, // - 72
	{0.090391, 0.038224, -0.001170, 90.928329, 89.598678, 0.000000, 1.000000}, // - 73
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, // - 74
	{0.083113, 0.038224, -0.001170, 90.928329, 89.598678, 0.000000, 1.000000}, // - 75
	{0.072957, 0.028956, -0.001170, 90.928329, 89.598678, 0.000000, 1.000000}, // - 76
	{0.069398, 0.039981, -0.001170, 90.928329, 89.598678, 0.000000, 1.000000}, // - 77
	{0.105738, 0.010001, 0.004508, 90.928329, 79.030494, 0.000000, 1.000000},  // - 78
	{0.078264, 0.019668, 0.004508, 90.928329, 79.030494, 0.000000, 1.000000},  // - 79
	{0.087377, 0.022096, -0.001993, 90.928329, 79.030494, 0.000000, 1.000000}, // - 80
	{0.087377, 0.022096, -0.001635, 90.928329, 79.030494, 0.000000, 1.000000}, // - 81
	{0.100623, 0.043063, -0.001635, 90.928329, 87.672645, 0.000000, 1.000000}, // - 82
	{0.092528, 0.027493, -0.001635, 90.928329, 87.672645, 0.000000, 1.000000}, // - 83
	{0.102086, 0.027493, -0.001635, 90.928329, 87.672645, 0.000000, 1.000000}, // - 84
	{0.081954, 0.041672, -0.001635, 90.928329, 87.672645, 0.000000, 1.000000}, // - 85
	{0.025608, -0.003408, 281.516479, 106.686721, 167.551193, 0.965358}, // - 86
	{0.077010, 0.046925, -0.003438, 90.928329, 91.590301, 0.000000, 1.000000}, // - 87
	{0.069952, 0.042635, -0.003438, 90.928329, 86.722587, 0.000000, 1.000000}, // - 88
	{0.093827, 0.019258, -0.003438, 90.928329, 86.722587, 0.000000, 1.000000}, // - 89
	{0.066464, 0.035685, -0.000843, 90.928329, 86.722587, 0.000000, 1.000000}, // - 90
	{0.066464, 0.035685, -0.000843, 90.928329, 86.722587, 0.000000, 1.000000}, // - 91
	{0.066464, 0.038135, -0.000843, 90.928329, 86.722587, 0.000000, 1.000000}, // - 92
	{0.066464, 0.038135, -0.001690, 90.928329, 86.722587, 0.000000, 1.000000}, // - 93
	{0.048124, 0.010598, -0.001690, 90.928329, 86.722587, 0.000000, 1.000000}, // - 94
	{0.084997, 0.006773, -0.001690, 90.928329, 86.722587, 0.000000, 1.000000}, // - 95
	{0.100076, 0.026633, -0.001690, 90.928329, 80.020179, 0.000000, 1.000000}, // - 96
	{0.061686, 0.027537, -0.001690, 90.928329, 80.020179, 0.000000, 1.000000}, // - 97
	{0.098318, 0.053993, -0.001690, 90.928329, 89.237678, 0.000000, 1.000000}, // - 98
	{0.098318, 0.033702, -0.001690, 90.928329, 89.237678, 0.000000, 1.000000}, // - 99
	{0.086149, 0.042526, -0.001690, 90.928329, 77.587478, 0.000000, 1.000000}, // - 100
	{0.081864, 0.030555, -0.001690, 90.928329, 78.145759, 0.000000, 1.000000}, // - 101
	{0.081864, 0.047914, -0.005079, 90.928329, 78.145759, 0.000000, 1.000000}, // - 102
	{0.089607, 0.036717, -0.005079, 90.928329, 78.145759, 0.000000, 1.000000}, // - 103
	{0.079655, 0.042021, -0.005079, 90.928329, 78.145759, 0.000000, 1.000000}, // - 104
	{0.091779, 0.037620, -0.005079, 90.928329, 78.145759, 0.000000, 1.000000}, // - 105
	{0.084179, 0.035251, -0.005079, 90.928329, 78.145759, 0.000000, 1.000000}, // - 106
	{0.089387, 0.040297, -0.006006, 90.928329, 78.145759, 0.000000, 1.000000}, // - 107
	{0.081930, 0.030756, 0.001523, 90.928329, 78.145759, 0.000000, 1.000000},  // - 108
	{0.092857, 0.043070, -0.006084, 90.928329, 85.326652, 0.000000, 1.000000}, // - 109
	{0.092857, 0.043070, -0.006084, 90.928329, 85.326652, 0.000000, 1.000000}, // - 110
	{0.106601, 0.028021, -0.003537, 90.928329, 90.217376, 0.000000, 1.000000}, // - 111
	{0.096335, 0.015873, -0.003537, 90.928329, 90.217376, 0.000000, 1.000000}, // - 112
	{0.105827, 0.046620, -0.001395, 90.928329, 90.217376, 0.000000, 1.000000}, // - 113
	{0.097520, 0.044296, -0.007286, 90.928329, 90.217376, 0.000000, 1.000000}, // - 114
	{0.097408, 0.043470, -0.007286, 90.928329, 90.217376, 0.000000, 1.000000}, // - 115
	{0.092588, 0.049832, -0.007286, 90.928329, 90.217376, 0.000000, 1.000000}, // - 116
	{0.081444, 0.037602, -0.003125, 90.928329, 90.217376, 0.000000, 1.000000}, // - 117
	{0.078678, 0.037602, -0.001816, 90.928329, 90.217376, 0.000000, 1.000000}, // - 118
	{0.093011, 0.037032, -0.001987, 281.516479, 94.968688, 167.551193, 1.051324}, // - 119
	{0.089214, 0.029291, -0.000784, 90.928329, 84.624763, 0.000000, 1.000000}, // - 120
	{0.086825, 0.033424, -0.000784, 90.928329, 77.233818, 0.000000, 1.000000}, // - 121
	{0.082869, 0.030783, -0.000950, 90.928329, 77.233818, 0.000000, 1.000000}, // - 122
	{0.096117, 0.048957, -0.006245, 90.928329, 87.579650, 0.000000, 1.000000}, // - 123
	{0.103663, 0.040022, 0.000449, 90.928329, 87.579650, 0.000000, 1.000000},  // - 124
	{0.099326, 0.031202, -0.001180, 90.928329, 87.579650, 0.000000, 1.000000}, // - 125
	{0.099326, 0.031132, -0.001180, 90.928329, 87.579650, 0.000000, 1.000000}, // - 126
	{0.099326, 0.039279, -0.001180, 90.928329, 87.579650, 0.000000, 1.000000}, // - 127
	{0.099326, 0.047422, -0.001180, 90.928329, 87.579650, 0.000000, 1.000000}, // - 128
	{0.088817, 0.021210, 0.000730, 90.928329, 87.579650, 0.000000, 1.000000},  // - 129
	{0.025784, 0.028323, 0.000730, 90.928329, 59.394767, 0.000000, 1.000000},  // - 130
	{0.068455, 0.031841, -0.004470, 90.928329, 79.979003, 0.000000, 1.000000}, // - 131
	{0.012930, 0.008392, -0.004470, 90.928329, 72.129173, 0.000000, 1.000000}, // - 132
	{0.102457, 0.032260, -0.003338, 90.928329, 84.534217, 0.000000, 1.000000}, // - 133
	{0.085976, 0.014956, -0.003338, 90.928329, 80.308830, 0.000000, 1.000000}, // - 134
	{0.071574, 0.028186, -0.001588, 90.928329, 80.308830, 0.000000, 1.000000}, // - 135
	{0.085219, 0.016666, -0.000738, 90.928329, 80.308830, 0.000000, 1.000000}, // - 136
	{0.065114, 0.009318, -0.000738, 90.928329, 80.308830, 0.000000, 1.000000}, // - 137
	{0.066890, 0.040024, -0.000738, 90.928329, 87.341934, 0.000000, 1.000000}, // - 138
	{0.072037, 0.036141, -0.000702, 90.928329, 87.341934, 0.000000, 1.000000}, // - 139
	{0.069108, 0.042194, -0.000436, 90.928329, 87.341934, 0.000000, 1.000000}, // - 140
	{0.058717, 0.043547, -0.000436, 90.928329, 87.209770, 0.000000, 1.000000}, // - 141
	{0.104196, 0.039601, -0.005481, 90.928329, 87.209770, 0.000000, 1.000000}, // - 142
	{0.090929, 0.045881, -0.012780, 90.928329, 87.209770, 0.000000, 1.000000}, // - 143
	{0.098291, 0.042464, -0.006952, 90.928329, 83.081665, 0.000000, 1.000000}, // - 144
	{0.080087, 0.030122, 0.000606, 90.928329, 83.081665, 0.000000, 1.000000},  // - 145
	{0.093500, 0.030690, -0.001545, 90.928329, 83.081665, 0.000000, 1.000000}, // - 146
	{0.079566, 0.020138, 0.004838, 90.928329, 73.715591, 0.000000, 1.000000},  // - 147
	{0.073564, 0.028430, -0.000527, 90.928329, 88.295433, 0.000000, 1.000000}, // - 148
	{0.099901, 0.011976, 0.001273, 281.516479, 97.607620, 167.551193, 1.190787}, // - 149
	{0.073564, 0.028430, -0.000527, 90.928329, 88.295433, 0.000000, 1.000000}, // - 150
	{0.083426, 0.032359, -0.005717, 90.928329, 88.295433, 0.000000, 1.000000}, // - 151
	{0.072349, 0.019623, -0.000747, 90.928329, 82.624351, 0.000000, 1.000000}, // - 152
	{0.075065, 0.015351, 0.006545, 90.928329, 71.041442, 0.000000, 1.000000},  // - 153
	{0.062227, 0.029731, -0.004938, 90.928329, 84.602760, 0.000000, 1.000000}, // - 154
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, // - 155
	{0.079936, 0.049000, -0.000304, 90.928329, 82.926010, 0.000000, 1.000000}, // - 156
	{0.067550, 0.035686, -0.000017, 90.928329, 82.926010, 0.000000, 1.000000}, // - 157
	{0.090676, 0.039383, -0.001726, 90.928329, 88.667900, 0.000000, 1.000000}, // - 158
	{0.090676, 0.039383, -0.003532, 90.928329, 88.667900, 0.000000, 1.000000}, // - 159
	{0.098662, 0.017441, -0.001589, 90.928329, 88.667900, 0.000000, 1.000000}, // - 160
	{0.105388, 0.038409, 0.003155, 90.928329, 88.667900, 0.000000, 1.000000},  // - 161
	{0.097415, 0.036904, -0.000525, 90.928329, 88.667900, 0.000000, 1.000000}, // - 162
	{0.088934, 0.023302, -0.004153, 90.928329, 80.393875, 0.000000, 1.000000}, // - 163
	{0.088934, 0.023302, -0.004153, 90.928329, 80.393875, 0.000000, 1.000000}, // - 164
	{0.087018, 0.051364, 0.000484, 90.928329, 94.584838, 0.000000, 1.000000},  // - 165
	{0.087018, 0.051364, 0.000484, 90.928329, 94.584838, 0.000000, 1.000000},  // - 166
	{0.095996, 0.038787, 0.000484, 90.928329, 84.315711, 0.000000, 1.000000},  // - 167
	{0.089094, 0.034001, -0.006451, 90.928329, 84.315711, 0.000000, 1.000000}, // - 168
	{0.075700, 0.028082, -0.006451, 90.928329, 84.315711, 0.000000, 1.000000}, // - 169
	{0.093751, 0.041968, -0.005545, 90.928329, 84.315711, 0.000000, 1.000000}, // - 170
	{0.090124, 0.031055, -0.000505, 90.928329, 84.315711, 0.000000, 1.000000}, // - 171
	{0.066033, 0.032915, -0.002713, 90.928329, 84.315711, 0.000000, 1.000000}, // - 172
	{0.088287, 0.045350, -0.005384, 90.928329, 84.315711, 0.000000, 1.000000}, // - 173
	{0.087750, 0.042129, -0.005384, 90.928329, 84.315711, 0.000000, 1.000000}, // - 174
	{0.092384, 0.039294, -0.005384, 90.928329, 84.315711, 0.000000, 1.000000}, // - 175
	{0.097661, 0.039065, -0.006344, 90.928329, 80.736480, 0.000000, 1.000000}, // - 176
	{0.097114, 0.039641, -0.006692, 90.928329, 80.736480, 0.000000, 1.000000}, // - 177
	{0.069354, 0.039641, -0.000474, 90.928329, 80.736480, 0.000000, 1.000000}, // - 178
	{0.091414, 0.039641, -0.005617, 90.928329, 80.736480, 0.000000, 1.000000}, // - 179
	{0.094914, 0.039641, -0.005617, 90.928329, 80.736480, 0.000000, 1.000000}, // - 180
	{0.117232, 0.033217, -0.001099, 90.928329, 82.396362, 0.000000, 1.000000}, // - 181
	{0.082569, 0.032748, -0.003248, 90.928329, 87.394371, 0.000000, 1.000000}, // - 182
	{0.095527, 0.027237, -0.001960, 90.928329, 86.443649, 0.000000, 1.000000}, // - 183
	{0.095527, 0.040994, -0.006878, 90.928329, 86.443649, 0.000000, 1.000000}, // - 184
	{0.085663, 0.030601, -0.002345, 90.928329, 81.496513, 0.000000, 1.000000}, // - 185
	{0.085663, 0.030601, -0.001015, 90.928329, 81.496513, 0.000000, 1.000000}, // - 186
	{0.076527, 0.027211, 0.008500, 90.928329, 74.401092, 0.000000, 1.000000},  // - 187
	{0.096669, 0.032578, 0.001662, 90.928329, 83.502502, 0.000000, 1.000000},  // - 188
	{0.098753, 0.032129, -0.001659, 90.928329, 90.153724, 0.000000, 1.000000}, // - 189
	{0.092821, 0.035572, -0.001659, 90.928329, 90.153724, 0.000000, 1.000000}, // - 190
	{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000, 1.000000}, // - 191
	{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000, 1.000000}, // - 192
	{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000, 1.000000}, // - 193
	{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000, 1.000000}, // - 194
	{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000, 1.000000}, // - 195
	{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000, 1.000000}, // - 196
	{0.100630, 0.020568, -0.001132, 90.928329, 90.153724, 0.000000, 1.000000}, // - 197
	{0.077905, 0.028523, 0.000000, 89.675476, 89.270309, 0.000000, 1.000000},  // - 198
	{0.099095, 0.022463, 0.000000, 89.675476, 89.270309, 0.000000, 1.000000},  // - 199
	{0.103182, 0.031106, 0.000000, 89.675476, 89.270309, 0.000000, 1.000000},  // - 200
	{0.078426, 0.038546, 0.000000, 89.675476, 89.270309, 0.000000, 1.000000},  // - 201
	{0.101092, 0.035797, -0.002997, 89.675476, 82.081153, 0.000000, 1.000000}, // - 202
	{0.092009, 0.042780, -0.005841, 89.675476, 84.463294, 0.000000, 1.000000}, // - 203
	{0.092009, 0.042780, -0.005841, 89.675476, 84.463294, 0.000000, 1.000000}, // - 204
	{0.092969, 0.027782, -0.002959, 89.675476, 84.463294, 0.000000, 1.000000}, // - 205
	{0.105109, 0.036128, -0.000471, 89.675476, 84.463294, 0.000000, 1.000000}, // - 206
	{0.066892, 0.024410, -0.002792, 89.675476, 84.463294, 0.000000, 1.000000}, // - 207
	{0.088610, 0.043561, 0.001273, 281.516479, 89.674781, 167.551193, 1.000000}, // - 208
	{0.084046, 0.013608, -0.002792, 89.675476, 81.667831, 0.000000, 1.000000}, // - 209
	{0.084046, 0.013608, -0.001034, 89.675476, 81.667831, 0.000000, 1.000000}, // - 210
	{0.067610, 0.033777, -0.001034, 89.675476, 85.214485, 0.000000, 1.000000}, // - 211
	{0.094159, 0.020717, 0.000715, 89.675476, 85.214485, 0.000000, 1.000000},  // - 212
	{0.098744, 0.036786, -0.001770, 89.675476, 85.214485, 0.000000, 1.000000}, // - 213
	{0.068755, 0.036786, -0.001770, 89.675476, 85.214485, 0.000000, 1.000000}, // - 214
	{0.068755, 0.026863, -0.001770, 89.675476, 85.214485, 0.000000, 1.000000}, // - 215
	{0.068755, 0.026863, -0.001770, 89.675476, 85.214485, 0.000000, 1.000000}, // - 216
	{0.095765, 0.030034, -0.001770, 89.675476, 85.214485, 0.000000, 1.000000}, // - 217
	{0.085486, 0.039427, -0.003311, 89.675476, 85.214485, 0.000000, 1.000000}, // - 218
	{0.068874, 0.027850, -0.001021, 89.675476, 85.214485, 0.000000, 1.000000}, // - 219
	{0.052931, 0.050390, -0.002062, 89.675476, 88.113647, 0.000000, 1.000000}, // - 220
	{0.094479, 0.034432, 0.000875, 89.675476, 83.572830, 0.000000, 1.000000},  // - 221
	{0.094479, 0.034432, -0.000596, 89.675476, 83.572830, 0.000000, 1.000000}, // - 222
	{0.094479, 0.062073, -0.003098, 89.675476, 83.572830, 0.000000, 1.000000}, // - 223
	{0.064458, 0.029760, -0.001460, 89.675476, 83.572830, 0.000000, 1.000000}, // - 224
	{0.064458, 0.029760, -0.001460, 89.675476, 83.572830, 0.000000, 1.000000}, // - 225
	{0.072095, 0.029760, -0.001460, 89.675476, 83.572830, 0.000000, 1.000000}, // - 226
	{0.110619, 0.043037, -0.001466, 89.675476, 86.927627, 0.000000, 1.000000}, // - 227
	{0.099446, 0.050772, -0.001466, 89.675476, 85.103805, 0.000000, 1.000000}, // - 228
	{0.078635, 0.023680, -0.000275, 89.675476, 73.445220, 0.000000, 1.000000}, // - 229
	{0.043357, 0.028726, -0.000275, 89.675476, 73.445220, 0.000000, 1.000000}, // - 230
	{0.092488, 0.049972, -0.000275, 89.675476, 88.981941, 0.000000, 1.000000}, // - 231
	{0.092488, 0.016739, -0.000275, 89.675476, 88.981941, 0.000000, 1.000000}, // - 232
	{0.071677, 0.037055, -0.002878, 89.675476, 88.981941, 0.000000, 1.000000}, // - 233
	{0.082745, 0.004209, -0.002878, 89.675476, 88.981941, 0.000000, 1.000000}, // - 234
	{0.057909, 0.021331, -0.002878, 89.675476, 88.981941, 0.000000, 1.000000}, // - 235
	{0.079016, 0.021331, -0.000419, 89.675476, 77.678733, 0.000000, 1.000000}, // - 236
	{0.074572, 0.021331, -0.000419, 89.675476, 84.527442, 0.000000, 1.000000}, // - 237
	{0.074572, 0.038346, -0.001500, 89.675476, 84.527442, 0.000000, 1.000000}, // - 238
	{0.111645, 0.011549, 0.006237, 89.675476, 84.527442, 0.000000, 1.000000},  // - 239
	{0.090766, 0.044221, -0.000423, 89.675476, 89.461883, 0.000000, 1.000000}, // - 240
	{0.069491, 0.049021, -0.000423, 89.675476, 89.461883, 0.000000, 1.000000}, // - 241
	{0.059706, 0.031911, -0.000423, 89.675476, 89.461883, 0.000000, 1.000000}, // - 242
	{0.065242, 0.031911, -0.000423, 89.675476, 89.461883, 0.000000, 1.000000}, // - 243
	{0.065242, 0.051077, -0.001103, 89.675476, 89.461883, 0.000000, 1.000000}, // - 244
	{0.082393, 0.038233, 0.000410, 89.675476, 89.461883, 0.000000, 1.000000},  // - 245
	{0.079338, 0.044859, -0.002535, 89.675476, 89.461883, 0.000000, 1.000000}, // - 246
	{0.101566, 0.037019, 0.000750, 89.675476, 83.514060, 0.000000, 1.000000},  // - 247
	{0.091887, 0.047776, -0.000040, 89.675476, 83.514060, 0.000000, 1.000000}, // - 248
	{0.089745, 0.044044, 0.004071, 89.675476, 83.514060, 0.000000, 1.000000},  // - 249
	{0.094214, 0.044044, -0.007274, 89.675476, 83.514060, 0.000000, 1.000000}, // - 250
	{0.072282, 0.044044, -0.001468, 89.675476, 90.444763, 0.000000, 1.000000}, // - 251
	{0.095764, 0.034224, -0.000264, 89.675476, 82.959915, 0.000000, 1.000000}, // - 252
	{0.087454, 0.026208, -0.000264, 89.675476, 82.959915, 0.000000, 1.000000}, // - 253
	{0.099198, 0.037362, -0.000264, 89.675476, 82.959915, 0.000000, 1.000000}, // - 254
	{0.070845, 0.019943, 0.003505, 89.675476, 73.529716, 0.000000, 1.000000},  // - 255
	{0.065373, 0.033656, -0.001141, 89.675476, 83.002151, 0.000000, 1.000000}, // - 256
	{0.070077, 0.033656, -0.001141, 89.675476, 83.002151, 0.000000, 1.000000}, // - 257
	{0.089536, 0.041904, 0.000715, 89.675476, 83.002151, 0.000000, 1.000000},  // - 258
	{0.084822, 0.041904, 0.000715, 89.675476, 83.002151, 0.000000, 1.000000},  // - 259
	{0.093009, 0.031491, -0.001568, 89.675476, 83.002151, 0.000000, 1.000000}, // - 260
	{0.093009, 0.015023, -0.001477, 89.675476, 83.002151, 0.000000, 1.000000}, // - 261
	{0.076580, 0.039782, -0.001477, 89.675476, 88.620780, 0.000000, 1.000000}, // - 262
	{0.076580, 0.028967, -0.001477, 89.675476, 88.620780, 0.000000, 1.000000}, // - 263
	{0.075424, 0.043059, -0.001477, 89.675476, 88.620780, 0.000000, 1.000000}, // - 264
	{0.089655, 0.021726, -0.001477, 89.675476, 88.620780, 0.000000, 1.000000}, // - 265
	{0.096792, 0.014114, -0.003062, 89.675476, 85.166038, 0.000000, 1.000000}, // - 266
	{0.094886, 0.024989, -0.003184, 89.675476, 85.166038, 0.000000, 1.000000}, // - 267
	{0.094886, 0.024989, -0.003184, 89.675476, 85.166038, 0.000000, 1.000000}, // - 268
	{0.102252, 0.024989, -0.003184, 89.675476, 85.166038, 0.000000, 1.000000}, // - 269
	{0.102252, 0.024989, 0.000529, 89.675476, 85.166038, 0.000000, 1.000000},  // - 270
	{0.096134, 0.025462, 0.000529, 89.675476, 79.225112, 0.000000, 1.000000},  // - 271
	{0.099226, 0.032663, 0.000529, 89.675476, 79.225112, 0.000000, 1.000000},  // - 272
	{0.080779, 0.028227, -0.001415, 281.516479, 91.776855, 167.551193, 1.061396}, // - 273
	{0.089833, 0.022466, -0.001590, 89.675476, 88.636062, 0.000000, 1.000000}, // - 274
	{0.089833, 0.022466, -0.001590, 89.675476, 88.636062, 0.000000, 1.000000}, // - 275
	{0.089833, 0.022466, -0.001590, 89.675476, 88.636062, 0.000000, 1.000000}, // - 276
	{0.082718, 0.062596, -0.000201, 89.675476, 88.636062, 0.000000, 1.000000}, // - 277
	{0.082718, 0.062596, -0.000201, 89.675476, 88.636062, 0.000000, 1.000000}, // - 278
	{0.087652, 0.059379, -0.000201, 89.675476, 88.636062, 0.000000, 1.000000}, // - 279
	{0.087652, 0.023702, -0.003091, 89.675476, 88.636062, 0.000000, 1.000000}, // - 280
	{0.087652, 0.023702, -0.003091, 89.675476, 88.636062, 0.000000, 1.000000}, // - 281
	{0.090877, 0.026643, -0.003091, 89.675476, 88.636062, 0.000000, 1.000000}, // - 282
	{0.090877, 0.026643, -0.003091, 89.675476, 88.636062, 0.000000, 1.000000}, // - 283
	{0.090877, 0.053674, 0.009879, 89.675476, 88.636062, 0.000000, 1.000000},  // - 284
	{0.104320, 0.041487, 0.008021, 89.675476, 88.636062, 0.000000, 1.000000},  // - 285
	{0.087062, 0.021779, -0.003307, 89.675476, 88.636062, 0.000000, 1.000000}, // - 286
	{0.073173, 0.048856, 0.005337, 89.675476, 92.561180, 0.000000, 1.000000},  // - 287
	{0.090294, 0.027592, -0.003497, 89.675476, 92.561180, 0.000000, 1.000000}, // - 288
	{0.081684, 0.015000, 0.001780, 281.516479, 108.106758, 169.790878, 1.042815}, // - 289
	{0.086562, 0.042698, -0.000612, 89.675476, 92.561180, 0.000000, 1.000000}, // - 290
	{0.096768, 0.039233, -0.000612, 89.675476, 83.550270, 0.000000, 1.000000}, // - 291
	{0.079939, 0.020731, -0.005162, 89.675476, 83.550270, 0.000000, 1.000000}, // - 292
	{0.097107, 0.027826, -0.005162, 89.675476, 88.505996, 0.000000, 1.000000}, // - 293
	{0.097107, 0.037636, 0.000618, 89.675476, 88.505996, 0.000000, 1.000000},  // - 294
	{0.079985, 0.035006, -0.000826, 89.675476, 87.533462, 0.000000, 1.000000}, // - 295
	{0.088445, 0.024209, -0.002076, 89.675476, 73.285072, 0.000000, 1.000000}, // - 296
	{0.094039, 0.035411, 0.000490, 89.675476, 84.277572, 0.000000, 1.000000},  // - 297
	{0.099553, 0.024683, -0.002919, 89.675476, 84.277572, 0.000000, 1.000000}, // - 298
	{0.099553, 0.044356, -0.000285, 89.675476, 84.277572, 0.000000, 1.000000}  // - 299
};
new Float:SkinesHairPos[300][9] = {
	{0.108588, -0.004280, 0.000000, 0.000000, 0.000000, 0.504608, 1.004458, 1.004458, 1.000000 }, // Hair3 - 0
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 1
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 2
	{0.070000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.399999, 1.500000, 1.200000 }, // Hair3 - 3
	{0.108999, 0.004999, 0.000000, 0.000000, 0.000000, 0.000000, 1.299999, 1.100000, 1.200000 }, // Hair3 - 4
	{0.093999, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.299999, 1.200000, 1.200000 }, // Hair3 - 5
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 6
	{0.099690, 0.006124, -0.003632, 0.000000, 0.000000, 0.504608, 1.004458, 1.004458, 1.178597 }, // Hair3 - 7
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 8
	{0.075812, 0.007086, -0.003632, 0.000000, 0.000000, 0.504608, 2.675273, 1.004458, 1.130290 }, // Hair3 - 9
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 10
	{0.073011, -0.000845, 0.005339, 0.000000, 0.000000, 0.504608, 1.004458, 1.004458, 1.149878 }, // Hair3 - 11
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 12
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 13
	{0.088216, 0.009086, 0.005339, 0.000000, 0.000000, 0.504608, 1.004458, 1.004458, 1.149878 }, // Hair3 - 14
	{0.069295, -0.023192, -0.001476, 0.000000, 0.000000, 0.504608, 1.004458, 1.004458, 0.998685 }, // Hair3 - 15
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 16
	{0.100861, -0.000708, 0.001642, 0.000000, 0.000000, 0.504608, 1.004458, 1.004458, 1.033313 }, // Hair3 - 17
	{0.062683, -0.000708, 0.001642, 0.000000, 0.000000, 0.504608, 1.004458, 1.004458, 1.022677 }, // Hair3 - 18
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 19
	{0.097281, -0.006789, 0.000686, 0.000000, 0.000000, 0.504608, 1.004458, 1.004458, 1.089968 }, // Hair3 - 20
	{0.080904, -0.002786, -0.005819, 0.000000, 0.000000, 0.504608, 1.004458, 1.004458, 1.118435 }, // Hair3 - 21
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 22
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 23
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 24
	{0.080904, 0.002488, -0.000037, 0.000000, 0.000000, 0.504608, 1.004458, 1.004458, 1.043299 }, // Hair3 - 25
	{0.062522, 0.013497, -0.000037, 0.000000, 0.000000, 0.504608, 1.004458, 1.004458, 1.175585 }, // Hair3 - 26
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 27
	{0.087827, 0.022751, -0.005296, 0.000000, 0.000000, 0.504608, 1.004458, 1.004458, 1.219193 }, // Hair3 - 28
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 29
	{0.077708, 0.011525, -0.005296, 0.000000, 0.000000, 0.504608, 1.004458, 1.004458, 1.219193 }, // Hair3 - 30
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 31
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 32
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 33
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 34
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 35
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 36
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 37
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 38
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 39
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 40
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 41
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 42
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 43
	{0.079044, 0.014414, -0.000931, 0.000000, 0.000000, 357.597473, 1.004458, 1.004458, 0.900948 }, // Hair3 - 44
	{0.060674, 0.006197, -0.000931, 0.000000, 0.000000, 357.597473, 1.004458, 1.004458, 1.019663 }, // Hair3 - 45
	{0.087941, 0.018147, -0.000931, 0.000000, 0.000000, 357.597473, 1.004458, 1.004458, 1.139707 }, // Hair3 - 46
	{0.084668, 0.006726, -0.000931, 0.000000, 0.000000, 357.597473, 1.004458, 1.004458, 1.142034 }, // Hair3 - 47
	{0.099493, -0.017821, -0.002006, 0.000000, 0.000000, 357.597473, 1.004458, 1.004458, 1.142034 }, // Hair3 - 48
	{0.079672, 0.012987, -0.001040, 0.000000, 0.000000, 357.597473, 1.004458, 1.004458, 0.986149 }, // Hair3 - 49
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 50
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 51
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 52
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 53
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 54
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 55
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 56
	{0.119527, 0.015450, -0.002653, 0.000000, 0.000000, 357.597473, 1.004458, 1.004458, 1.060347 }, // Hair3 - 57
	{0.075583, -0.001295, -0.002653, 0.000000, 0.000000, 357.597473, 1.004458, 1.004458, 0.948482 }, // Hair3 - 58
	{0.095139, 0.003601, -0.002653, 0.000000, 0.000000, 4.176807, 1.004458, 1.004458, 1.128250 }, // Hair3 - 59
	{0.095139, 0.003562, -0.002653, 0.000000, 0.000000, 4.176807, 1.004458, 1.004458, 1.100457 }, // Hair3 - 60
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 61
	{0.093398, 0.018343, 0.006919, 0.000000, 0.000000, 4.176807, 1.004458, 1.004458, 1.009026 }, // Hair3 - 62
	{0.084164, -0.001245, 0.000018, 0.000000, 0.000000, 4.176807, 1.004458, 1.004458, 1.179215 }, // Hair3 - 63
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 64
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 65
	{0.095307, 0.009252, 0.000018, 0.000000, 0.000000, 4.176807, 1.004458, 1.004458, 1.051705 }, // Hair3 - 66
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 67
	{0.101020, 0.016734, -0.003369, 0.000000, 0.000000, 4.176807, 1.004458, 1.004458, 0.997687 }, // Hair3 - 68
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 69
	{0.087212, 0.017980, 0.007104, 0.000000, 0.000000, 4.176807, 1.004458, 1.004458, 1.049646 }, // Hair3 - 70
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 71
	{0.089513, 0.014271, -0.001790, 0.000000, 0.000000, 4.176807, 1.004458, 1.004458, 1.032754 }, // Hair3 - 72
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 73
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 74
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 75
	{0.077374, -0.010765, 0.002583, 0.000000, 0.000000, 4.176807, 1.004458, 1.004458, 1.166910 }, // Hair3 - 76
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 77
	{0.079938, 0.012189, 0.002583, 0.000000, 0.000000, 4.176807, 1.004458, 1.004458, 1.166910 }, // Hair3 - 78
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 79
	{0.076820, -0.014839, 0.002583, 0.000000, 0.000000, 350.695648, 1.004458, 1.004458, 1.071538 }, // Hair3 - 80
	{0.076820, -0.014839, 0.002583, 0.000000, 0.000000, 350.695648, 1.004458, 1.004458, 1.071538 }, // Hair3 - 81
	{0.104624, 0.014979, 0.002583, 0.000000, 0.000000, 356.442108, 1.004458, 1.004458, 1.141624 }, // Hair3 - 82
	{0.093609, 0.006488, 0.002583, 0.000000, 0.000000, 356.442108, 1.004458, 1.004458, 1.141624 }, // Hair3 - 83
	{0.106974, 0.006488, 0.002583, 0.000000, 0.000000, 356.442108, 1.004458, 1.004458, 1.141624 }, // Hair3 - 84
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 85
	{0.070000, -0.009999, 0.000000, 0.000000, 0.000000, 350.000000, 1.200000, 1.200000, 1.100000 }, // Hair3 - 86
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 87
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 88
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 89
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 90
	{0.076668, -0.010447, -0.003085, 0.000000, 0.000000, 3.968300, 1.004458, 1.004458, 1.169261 }, // Hair3 - 91
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 92
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 93
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 94
	{0.070631, -0.016430, 0.000185, 0.000000, 0.000000, 3.968300, 1.004458, 1.004458, 1.079532 }, // Hair3 - 95
	{0.085213, 0.007071, -0.002542, 0.000000, 0.000000, 3.968300, 1.004458, 1.004458, 1.094804 }, // Hair3 - 96
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 97
	{0.081412, 0.025877, 0.000684, 0.000000, 0.000000, 3.968300, 1.004458, 1.004458, 1.156216 }, // Hair3 - 98
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 99
	{0.096130, -0.002822, 0.002127, 0.000000, 0.000000, 358.993652, 1.004458, 1.004458, 1.156216 }, // Hair3 - 100
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 101
	{0.088931, 0.009656, -0.003107, 0.000000, 0.000000, 358.993652, 1.004458, 1.004458, 1.042739 }, // Hair3 - 102
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 103
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 104
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 105
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 106
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 107
	{0.111707, 0.012517, 0.000836, 1.349158, 0.000000, 349.588562, 1.004458, 1.004458, 0.861656 }, // Hair3 - 108
	{0.111707, 0.024860, 0.000836, 1.349158, 0.000000, 355.732360, 1.004458, 1.004458, 0.893029 }, // Hair3 - 109
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 110
	{0.091159, 0.003268, -0.001098, 1.349158, 0.000000, 359.983459, 1.004458, 1.004458, 1.003022 }, // Hair3 - 111
	{0.083389, 0.004525, -0.001098, 1.349158, 0.000000, 6.963862, 1.004458, 1.004458, 0.915353 }, // Hair3 - 112
	{0.098555, -0.000253, -0.001098, 1.349158, 0.000000, 2.182152, 1.004458, 1.004458, 1.080508 }, // Hair3 - 113
	{0.105434, 0.007519, -0.003082, 1.349158, 0.000000, 3.462919, 1.004458, 1.004458, 0.996621 }, // Hair3 - 114
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 115
	{0.105434, 0.007519, -0.003082, 1.349158, 0.000000, 3.462919, 1.004458, 1.004458, 0.996621 }, // Hair3 - 116
	{0.073719, 0.011567, -0.001081, 1.349158, 0.000000, 358.537384, 1.004458, 1.004458, 1.053219 }, // Hair3 - 117
	{0.078061, 0.011567, -0.001081, 1.349158, 0.000000, 2.812902, 1.004458, 1.004458, 1.053219 }, // Hair3 - 118
	{0.070000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.200000, 1.200000, 1.100000 }, // Hair3 - 119
	{0.088413, -0.004958, -0.001081, 1.349158, 0.000000, 356.769927, 1.004458, 1.004458, 1.134856 }, // Hair3 - 120
	{0.098040, -0.013431, 0.000846, 1.349158, 0.000000, 352.953826, 1.004458, 1.004458, 1.165797 }, // Hair3 - 121
	{0.097684, -0.008173, 0.000846, 1.349158, 0.000000, 352.953826, 1.004458, 1.004458, 1.069886 }, // Hair3 - 122
	{0.082243, -0.000975, -0.003736, 1.349158, 0.000000, 352.953826, 1.004458, 1.004458, 1.270665 }, // Hair3 - 123
	{0.083105, -0.000273, -0.001209, 1.349158, 0.000000, 352.953826, 1.004458, 1.004458, 1.167312 }, // Hair3 - 124
	{0.089598, 0.003350, -0.001209, 1.349158, 0.000000, 7.936543, 1.004458, 1.004458, 1.055302 }, // Hair3 - 125
	{0.107306, -0.014673, 0.000547, 1.162765, 0.000000, 0.930281, 1.004458, 1.004458, 1.133381 }, // Hair3 - 126
	{0.097297, 0.002157, 0.000547, 1.162765, 0.000000, 356.993957, 1.004458, 1.004458, 1.132299 }, // Hair3 - 127
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 128
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 129
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 130
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 131
	{-0.000896, 0.005557, 0.000547, 1.162765, 0.000000, 349.529785, 1.004458, 1.004458, 0.975846 }, // Hair3 - 132
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 133
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 134
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 135
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 136
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 137
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 138
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 139
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 140
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 141
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 142
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 143
	{0.089415, -0.005394, -0.003360, 1.162765, 0.000000, 354.949035, 1.004458, 1.004458, 1.377530 }, // Hair3 - 144
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 145
	{0.084664, -0.005025, -0.003360, 1.162765, 0.000000, 354.949035, 1.004458, 1.004458, 1.063808 }, // Hair3 - 146
	{0.068039, -0.006231, 0.003438, 1.162765, 0.000000, 348.373596, 1.004458, 1.004458, 1.091637 }, // Hair3 - 147
	{0.077481, -0.006293, 0.003438, 1.162765, 0.000000, 3.232684, 1.004458, 1.004458, 1.143243 }, // Hair3 - 148
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 149
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 150
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 151
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 152
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 153
	{0.061059, -0.000941, 0.003438, 1.162765, 0.000000, 354.961517, 1.004458, 1.004458, 1.064656 }, // Hair3 - 154
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 155
	{0.088869, -0.006497, 0.003438, 1.162765, 0.000000, 354.961517, 1.004458, 1.004458, 1.322631 }, // Hair3 - 156
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 157
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 158
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 159
	{0.080472, -0.006497, 0.000619, 1.162765, 0.000000, 354.961517, 1.004458, 1.004458, 1.024554 }, // Hair3 - 160
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 161
	{0.099750, -0.004397, 0.000619, 1.162765, 0.000000, 357.063781, 1.004458, 1.004458, 1.093557 }, // Hair3 - 162
	{0.085568, -0.002210, -0.000876, 1.162765, 0.000000, 353.987701, 1.004458, 1.004458, 1.017031 }, // Hair3 - 163
	{0.085617, -0.002210, -0.000876, 1.162765, 0.000000, 353.987701, 1.004458, 1.004458, 1.017031 }, // Hair3 - 164
	{0.076236, 0.004471, -0.000876, 1.162765, 0.000000, 353.987701, 1.004458, 1.004458, 1.126474 }, // Hair3 - 165
	{0.076236, 0.004471, -0.000876, 1.162765, 0.000000, 353.987701, 1.004458, 1.004458, 1.126474 }, // Hair3 - 166
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 167
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 168
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 169
	{0.082516, 0.004471, -0.000876, 1.162765, 0.000000, 356.341644, 1.004458, 1.004458, 1.126474 }, // Hair3 - 170
	{0.095091, -0.004251, -0.000876, 1.162765, 0.000000, 356.341644, 1.004458, 1.004458, 1.145727 }, // Hair3 - 171
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 172
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 173
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 174
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 175
	{0.110327, -0.012279, -0.003095, 1.162765, 0.000000, 353.170532, 1.004458, 1.004458, 1.138159 }, // Hair3 - 176
	{0.096507, -0.004908, -0.003095, 1.162765, 0.000000, 353.170532, 1.004458, 1.004458, 1.256144 }, // Hair3 - 177
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 178
	{0.093613, 0.001893, -0.003095, 1.162765, 0.000000, 355.963073, 1.004458, 1.004458, 1.097507 }, // Hair3 - 179
	{0.097174, -0.011787, -0.003095, 1.162765, 0.000000, 355.963073, 1.004458, 1.004458, 1.176252 }, // Hair3 - 180
	{0.098671, 0.026786, -0.000061, 1.162765, 0.000000, 355.963073, 1.004458, 1.004458, 1.074810 }, // Hair3 - 181
	{0.077510, 0.012967, -0.000061, 1.162765, 0.000000, 1.151019, 1.004458, 1.004458, 1.132787 }, // Hair3 - 182
	{0.086433, 0.000554, -0.000061, 1.162765, 0.000000, 1.151019, 1.004458, 1.004458, 1.167121 }, // Hair3 - 183
	{0.101167, -0.003799, -0.001940, 1.162765, 0.000000, 0.578940, 1.004458, 1.004458, 1.100660 }, // Hair3 - 184
	{0.088131, -0.001998, -0.001940, 1.162765, 0.000000, 0.578940, 1.004458, 1.004458, 1.100660 }, // Hair3 - 185
	{0.101592, -0.012444, -0.001830, 1.162765, 0.000000, 0.578940, 1.004458, 1.004458, 1.129892 }, // Hair3 - 186
	{0.079601, -0.016813, 0.007176, 1.162765, 0.000000, 355.034423, 1.004458, 1.004458, 1.090405 }, // Hair3 - 187
	{0.090677, -0.000343, 0.002180, 1.162765, 0.000000, 355.034423, 1.004458, 1.004458, 1.055292 }, // Hair3 - 188
	{0.095982, -0.001331, 0.002180, 1.162765, 0.000000, 357.113464, 1.004458, 1.004458, 1.142861 }, // Hair3 - 189
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 190
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 191
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 192
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 193
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 194
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 195
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 196
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 197
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 198
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 199
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 200
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 201
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 202
	{0.087364, 0.004175, -0.001923, 1.162765, 0.000000, 357.113464, 1.004458, 1.004458, 1.105261 }, // Hair3 - 203
	{0.087364, 0.004175, -0.001923, 1.162765, 0.000000, 357.113464, 1.004458, 1.004458, 1.105261 }, // Hair3 - 204
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 205
	{0.110781, 0.006567, -0.001923, 1.162765, 0.000000, 357.113464, 1.004458, 1.004458, 1.007790 }, // Hair3 - 206
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 207
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 208
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 209
	{0.082535, -0.005237, -0.001923, 1.162765, 0.000000, 357.113464, 1.004458, 1.004458, 0.995132 }, // Hair3 - 210
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 211
	{0.062871, -0.001359, -0.001923, 1.162765, 0.000000, 357.113464, 1.004458, 1.004458, 1.048056 }, // Hair3 - 212
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 213
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 214
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 215
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 216
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 217
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 218
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 219
	{0.059144, 0.013152, -0.001230, 1.162765, 0.000000, 357.113464, 1.004458, 1.004458, 1.073572 }, // Hair3 - 220
	{0.094527, -0.006164, 0.002706, 1.162765, 0.000000, 357.113464, 1.004458, 1.004458, 1.247534 }, // Hair3 - 221
	{0.094527, -0.011945, 0.002706, 1.162765, 0.000000, 357.113464, 1.004458, 1.004458, 1.226916 }, // Hair3 - 222
	{0.089071, 0.014463, 0.002706, 1.162765, 0.000000, 357.113464, 1.004458, 1.004458, 1.192765 }, // Hair3 - 223
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 224
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 225
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 226
	{0.101175, 0.014766, 0.002706, 1.162765, 0.000000, 357.113464, 1.004458, 1.004458, 1.126656 }, // Hair3 - 227
	{0.092572, 0.007272, 0.002706, 1.162765, 0.000000, 357.113464, 1.004458, 1.004458, 1.235207 }, // Hair3 - 228
	{0.079486, -0.015010, 0.000872, 1.162765, 0.000000, 350.970611, 1.004458, 1.004458, 1.098212 }, // Hair3 - 229
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 230
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 231
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 232
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 233
	{0.078231, -0.017629, 0.000872, 1.162765, 0.000000, 351.789215, 1.004458, 1.004458, 1.018379 }, // Hair3 - 234
	{0.049378, -0.001035, 0.000872, 1.162765, 0.000000, 348.162139, 1.004458, 1.004458, 0.966751 }, // Hair3 - 235
	{0.080933, -0.007481, 0.000872, 1.162765, 0.000000, 348.162139, 1.004458, 1.004458, 1.095109 }, // Hair3 - 236
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 237
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 238
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 239
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 240
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 241
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 242
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 243
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 244
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 245
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 246
	{0.087829, -0.001369, 0.000872, 1.162765, 0.000000, 3.899056, 1.004458, 1.004458, 1.201375 }, // Hair3 - 247
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 248
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 249
	{0.078370, 0.009865, 0.000872, 1.162765, 0.000000, 352.236450, 1.004458, 1.004458, 1.166651 }, // Hair3 - 250
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 251
	{0.088582, -0.006075, 0.000872, 1.162765, 0.000000, 352.236450, 1.004458, 1.004458, 1.210478 }, // Hair3 - 252
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 253
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 254
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 255
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 256
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 257
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 258
	{0.072341, -0.001438, 0.002612, 1.162765, 0.000000, 352.128753, 1.004458, 1.004458, 1.218888 }, // Hair3 - 259
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 260
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 261
	{0.075398, 0.005842, 0.002612, 1.162765, 0.000000, 357.731414, 1.004458, 1.004458, 1.057977 }, // Hair3 - 262
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 263
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 264
	{0.074374, -0.003570, 0.002612, 1.162765, 0.000000, 353.925384, 1.004458, 1.004458, 1.109009 }, // Hair3 - 265
	{0.080137, -0.009302, 0.002612, 1.162765, 0.000000, 353.925384, 1.004458, 1.004458, 1.131146 }, // Hair3 - 266
	{0.067543, 0.001360, 0.002612, 1.162765, 0.000000, 349.140075, 1.004458, 1.004458, 1.146864 }, // Hair3 - 267
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 },  // Hair3 - 269
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 },  // Hair3 - 269
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 },  // Hair3 - 270
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 },  // Hair3 - 271
	{0.084866, 0.000078, 0.002612, 1.162765, 0.000000, 350.338287, 1.004458, 1.004458, 1.146864 }, // Hair3 - 272
	{0.059999, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.200000, 1.200000, 1.100000 }, // Hair3 - 273
	{0.082516, 0.006275, 0.002612, 1.162765, 0.000000, 350.338287, 1.004458, 1.004458, 1.090817 }, // Hair3 - 274
	{0.088237, 0.005707, -0.000952, 1.162765, 0.000000, 354.032653, 1.004458, 1.004458, 1.042391 }, // Hair3 - 275
	{0.093156, 0.002306, -0.000952, 1.162765, 0.000000, 357.562286, 1.004458, 1.004458, 0.996686 }, // Hair3 - 276
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 277
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 278
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 279
	{0.089934, 0.005118, -0.000952, 1.162765, 0.000000, 354.893707, 1.004458, 1.004458, 1.037778 }, // Hair3 - 280
	{0.089934, 0.005118, -0.000952, 1.162765, 0.000000, 354.893707, 1.004458, 1.004458, 1.037778 }, // Hair3 - 281
	{0.084915, 0.003095, -0.000952, 1.162765, 0.000000, 354.893707, 1.004458, 1.004458, 1.104662 }, // Hair3 - 282
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 283
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 284
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 285
	{0.086468, 0.001470, -0.000952, 1.162765, 0.000000, 354.893707, 1.004458, 1.004458, 1.092748 }, // Hair3 - 286
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 287
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 288
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 289
	{0.066092, -0.004346, -0.000952, 1.162765, 0.000000, 354.893707, 1.004458, 1.004458, 1.234344 }, // Hair3 - 290
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 291
	{0.074633, 0.006723, -0.000952, 1.162765, 0.000000, 354.744812, 1.004458, 1.004458, 1.020303 }, // Hair3 - 292
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 293
	{0.091338, 0.011203, -0.000952, 1.162765, 0.000000, 7.673956, 1.004458, 1.004458, 1.129834 }, // Hair3 - 294
	{0.077449, 0.006221, 0.002460, 1.162765, 0.000000, 355.039520, 1.004458, 1.004458, 1.108941 }, // Hair3 - 295
	{0.069757, -0.014896, 0.002460, 1.162765, 0.000000, 339.120452, 1.004458, 1.004458, 1.179332 }, // Hair3 - 296
	{0.086319, -0.014856, 0.002460, 1.162765, 0.000000, 357.547332, 1.004458, 1.004458, 1.285995 }, // Hair3 - 297
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 298
	{0.091403, 0.024850, 0.002460, 1.162765, 0.000000, 357.547332, 1.004458, 1.004458, 1.193961 } // Hair3 - 299
};
new DescriptionsPerColors[14] =
{
	0x00CDFFFF, //Celeste
	0xCA3022FF, //Rojo oscuro
	0x4A4AFFFF, //Azul Claro
	0xAA00FFFF, //Violeta
	0x7D0000FF, //Marrón
	0xC00000FF, //Rojo
	0xD40000FF, //Rojo Claro
	0x0000E0FF, //Azul
	0xD4D438FF, //Amarillo
	0x686884FF, //Gris
	0x7650A8FF, //Púrpura
	0xD46C00FF, //Naranja
	0x00D4A1FF,  //Menta
	0x008228FF  //Verde Oscuro

};
new DescriptionsPerColorsHTML[14][7] =
{
	"00CDFF",
	"C33022",
	"4A4AAF",
	"AA00FF",
	"7D0000",
	"C00000",
	"D40000",
	"0000E0",
	"D4D438",
	"686884",
	"7650A8",
	"D46C00",
	"00D4A1",
	"008228"
};
new DescriptionsColors[13] =
{
	0x00CDFFFF, //Felíz
	0xCA3022FF, //Enojado
	0x4A4AFFFF, //Triste
	0x0000A8FF, //Aburrido
	0x006238FF, //Amargado
	0xC00000FF, //Molesto
	0xD40000FF, //Furioso
	0x0000E0FF, //Relajado
	0xD4D438FF, //Nostálgico
	0x686884FF, //Serio
	0x7650A8FF, //Deprimido
	0xD46C00FF, //Nervioso
	0x00D4A1FF  //Emocionado
};
/*new SlotPickupWeapon[47][25] =
{
	"Nada", 					// 0 - Unarmed
	"Manopla", 					// 1 - Brass Knuckles
	"Palo de Golf", 			// 2 - Golf Club
	"Bastón policial", 			// 3 - Nite Stick
	"Cuchillo", 				// 4 - Knife
	"Bate", 					// 5 - Baseball Bat
	"Pala", 					// 6 - Shovel
	"Palo de Billar",			// 7 - Pool Cue
	"Sable", 					// 8 - Katana
	"Motosierra", 				// 9 - Chainsaw
	"Consolador Rosado", 		// 10 - Purple Dildo
	"Consolador Pequeño", 		// 11 - Small White Vibrator
	"Consolador Largo", 		// 12 - Large White Vibrator
	"Consolador Plateado", 		// 13 - Silver Vibrator
	"Flores", 					// 14 - Flowers
	"Bastón", 					// 15 - Cane
	"Granadas", 				// 16 - Grenade
	"Granadas de Gas",		 	// 17 - Tear Gas *
	"Cóctel Molotov", 			// 18 - Molotov Cocktail
	-1, // 19 -
	-1, // 20 -
	-1, // 21 -
	"Pistola 9mm", 				// 22 - 9mm
	"Silenciada 9mm", 			// 23 - Silenced 9mm
	"Desert Eagle", 			// 24 - Desert Eagle
	"Escopeta", 				// 25 - Shotgun
	"Recortada", 				// 26 - Sawn-off Shotgun
	"Escopeta de Combate", 		// 27 - Combat Shotgun
	"Micro SMG", 				// 28 - Micro SMG
	"MP5", 						// 29 - MP5
	"AK-47", 					// 30 - AK-47
	"M4", 						// 31 - M4
	"Tec9", 					// 32 - Tec9
	"Rifle Corto Alcance", 		// 33 - Country Rifle
	"Rifle Largo Alcance", 		// 34 - Sniper Rifle
	"Cohete", 					// 35 - Rocket Launcher
	"RPG Cohete", 				// 36 - HS Rocket Launcher **
	"Lanzallamas", 				// 37 - Flamethrower
	"Minigun", 					// 38 - Minigun
	"Explosivos", 				// 39 - Satchel Charge ***
	"Detonador", 				// 40 - Detonator
	"Spray Policial", 			// 41 - Spraycan
	"Extintor de incendios", 	// 42 - Fire Extinguisher
	"Cámara Fotográfica", 		// 43 - Camera
	"Gafas de visión nocturna", // 44 - Nightvision Goggles ****
	"Gafas térmicas", 			// 45 - Thermal Goggles ****
	"Paracaídas" 				// 46 - Parachute
};*/
new ModeWalkID[15] =
{
	263,                  // 00 - WALK_player
	257,                  // 01 - WALK_drunk
	254,                  // 02 - WALK_civi
	258,                  // 03 - WALK_fat
	260,                  // 04 - WALK_gang1
	261,                 // 05 - WALK_gang2
	262,                 // 06 - WALK_old
	265,                 // 07 - WALK_shuffle
	264,                 // 08 - WALK_rocket
	270,                 // 09 - Walk_Wuzi
	275,                 // 10 - WOMAN_runfatold
	278,                  // 11 - WOMAN_walkbusy
	280,                  // 12 - WOMAN_walkpro
	283,                  // 13 - WOMAN_walksexy
	279                  // 14 - WOMAN_walkfatold
};
new BombasOjectsID[8] =
{
	1654, // 0
	1265, // 1
	1580, // 2
	1210, // 3
	1576, // 4
	1577, // 5
	1578, // 6
	1579  // 7
};
new ModeWalkName[15][MAX_PLAYER_NAME] =
	{
		"Normal",       // 00 -
		"Borracho",     // 01 -
		"Civil",        // 02 -
		"Chambado",     // 03 -
		"Pandillero 1", // 04 -
		"Pandillero 2", // 05 -
		"Viejo 1",      // 06 -
		"Viejo 2",      // 07 -
		"Lesionado",    // 08 -
		"Ciego",        // 09 -
		"Cansado",      // 10 -
		"Mujer 1",      // 11 -
		"Mujer 2",      // 12 -
		"Mujer Sexy",   // 13 -
		"Vieja"         // 14 -
};
new EnfermedadName[7][16] =
	{
		"Ninguna",      // 00 -
		"Dengue",     	// 01 -
		"Gripe A",  	// 02 -
		"Sífilis",     	// 03 -
		"Conjunctivitis",// 04 -
		"Fiebre", 		// 05 -
		"Gonorrea"      // 06 -
};
new EnfermedadColoresFijos[7]=
{
	0x7B0000FF,     // 00 - Ninguna
	0x002462FF,  	// 01 - Dengue-
	0x00683CFF,  	// 02 - Gripe A-
	0x4B006FFF,     // 03 - Sida-
	0xA15200FF, 	// 04 - Cancer-
	0x008EA4FF, 	// 05 - Fiebre
	0xA88C38FF      // 06 - Gonorrea
};
new EnfermedadColores[7]=
{
	0xFF261DFF,     // 00 - Ninguna
	0x1D4BA1FF,     // 01 - Dengue-
	0x00D400FF,  	// 02 - Gripe A -
	0x6F00D6FF,    	// 03 - Sida -
	0xEE6F00FF, 	// 04 - Cancer -
	0x38CAE0FF, 	// 05 - Fiebre
	0xCDE000FF      // 06 - Gonorrea
};
new EnfermedadTiempo[7]=
	{
		80,     // 00 - Ninguna
		50,     // 01 - Dengue
		60,  	// 02 - Gripe A
		40,    	// 03 - Sida
		30, 	// 04 - Cancer
		45, 	// 05 - Fiebre
		70      // 06 - Gonorrea
};
new ModeTalkLibraryAnim[7][8] =
{
		"PED",
		"RAPPING",
		"GANGS",
		"GANGS",
		"GANGS",
		"GANGS",
		"GANGS"
};
new ModeTalkNameAnim[7][15] =
{
		"IDLE_chat",
		"RAP_A_Loop",
		"prtial_gngtlkB",
		"prtial_gngtlkE",
		"prtial_gngtlkF",
		"prtial_gngtlkG",
		"prtial_gngtlkH"
};
new ModeTalkName[7][11] =
	{
		"Normal",       // 00 -
		"Bárbaro",     // 01 -
		"Guapo",        // 02 -
		"Rapero",     // 03 -
		"Pandillero", // 04 -
		"Negociante", // 05 -
		"Expresivo" // 06 -
};
new CarteraNames[4][9] =
{
		"Nada",
		"Cheque",
		"Ticket",
		"Condones"
};
new CarteraChequeType[2][9] =
{
		"Efectivo",
		"Personal"
};
new PistasType[2][10] =
{
	"Vehículos",
	"Aereos"
};
new PistasTypeEstados[2][8] =
{
	"Pública",
	"Privada"
};
new PistasTypeUses[4][13] =
{
	"Detenida",
	"Esperando...",
	"Conteo...",
	"En Uso"
};
new PistasTypeFinal[6][20] =
{
	"Desconectó",
	"Expulsado",
	"Terminó",
	"Murió",
	"Explotó",
	"Salida Voluntaria"
};
/*new ModeSprintLibraryAnim[4][MAX_PLAYER_NAME] =
{
		"FAT",
		"PED",
		"PED",
		"PED"
};
new ModeSprintNameAnim[4][MAX_PLAYER_NAME] =
{
		"FatSprint",
		"sprint_civi",
		"sprint_panic",
		"Sprint_Wuzi"
};
new ModeSprintName[4][MAX_PLAYER_NAME] =
	{
		"Civil",     // 00 -
		"Atlético",     // 01 -
		"Miedo",     // 02 -
		"Ciego"     // 03 -
};*/
new IdArmasTraficantes[16] =
{
	1,                  // 00 - ID: 0 | Nombre: Brass Knuckles
	4,                  // 01 - ID: 0 | Nombre: Cuchillo
	5,                  // 02 - ID: 0 | Nombre: Bate
	6,                  // 03 - ID: 0 | Nombre: Pala
	8,                  // 04 - ID: 0 | Nombre: Katana
	22,                 // 05 - ID: 0 | Nombre: 9mm
	23,                 // 06 - ID: 0 | Nombre: Silenciada 9mm
	24,                 // 07 - ID: 0 | Nombre: Desert Eagle
	25,                 // 08 - ID: 0 | Nombre: Shotgun
	29,                 // 09 - ID: 0 | Nombre: MP5
	30,                 // 10 - ID: 0 | Nombre: AK-47
	31,                 // 11 - ID: 0 | Nombre: M4
	33,                 // 12 - ID: 0 | Nombre: Country Rifle
	34                  // 13 - ID: 0 | Nombre: Sniper Rifle
};
new MaterialesArmasTraficantes[16] =
{
	50,                  // 00 - ID: 0 | Nombre: Brass Knuckles
	100,                 // 01 - ID: 0 | Nombre: Cuchillo
	50,                  // 02 - ID: 0 | Nombre: Bate
	75,                  // 03 - ID: 0 | Nombre: Pala
	100,                 // 04 - ID: 0 | Nombre: Katana
	175,                 // 05 - ID: 0 | Nombre: 9mm
	150,                 // 06 - ID: 0 | Nombre: Silenciada 9mm
	300,                 // 07 - ID: 0 | Nombre: Desert Eagle
	250,                 // 08 - ID: 0 | Nombre: Shotgun
	350,                 // 09 - ID: 0 | Nombre: MP5
	400,                 // 10 - ID: 0 | Nombre: AK-47
	425,                 // 11 - ID: 0 | Nombre: M4
	500,                 // 12 - ID: 0 | Nombre: Country Rifle
	600,                  // 13 - ID: 0 | Nombre: Sniper Rifle
	1000                 // 14 - ID: 0 | Nombre: Bomba
};
new MunicionArmasTraficantes[16] =
{
	1,                  // 00 - ID: 0 | Nombre: Brass Knuckles
	1,                  // 01 - ID: 0 | Nombre: Cuchillo
	1,                  // 02 - ID: 0 | Nombre: Bate
	1,                  // 03 - ID: 0 | Nombre: Pala
	1,  	            // 04 - ID: 0 | Nombre: Katana
	50,                 // 05 - ID: 0 | Nombre: 9mm
	50,                 // 06 - ID: 0 | Nombre: Silenciada 9mm
	50,                 // 07 - ID: 0 | Nombre: Desert Eagle
	50,                 // 08 - ID: 0 | Nombre: Shotgun
	280,                // 09 - ID: 0 | Nombre: MP5
	280,                // 10 - ID: 0 | Nombre: AK-47
	280,                // 11 - ID: 0 | Nombre: M4
	50,                 // 12 - ID: 0 | Nombre: Country Rifle
	50	                // 13 - ID: 0 | Nombre: Sniper Rifle
};
new NamesLook[2][10] =
	{
		"Abrió",
		"Cerró"
	};
new NamesLookReverse[2][10] =
	{
		"Cerró",
		"Abrió"
	};
new NamesAlarma[2][10] =
	{
		"Desactivó",
		"Activó"
	};
new SiOrNo[2][3] =
	{
		"No",
		"Si"
	};
new SiOrNoBank[2][11] =
	{
		"{F50000}No",
		"{00F50A}Si"
	};
new Ciudades[2][11] =
	{
		"Los Santos",
		"San Fierro"
	};
new Sexos[2][20] =
	{
		"Hombre",
		"Mujer"
	};
new LataName[3][MAX_PLAYER_NAME] =
	{
		"Vacía",         // 1
		"Gas",           // 2
		"Aceíte"         // 3
	};
new HabilidadesID[6] =
	{
	    4,
	    5,
	    7,
	    6,
	    26,
	    15
	};
new HabilidadesName[6][MAX_PLAYER_NAME] =
	{
		"Normal",           // 1
		"Boxeo",            // 2
		"Kneehead",         // 3
		"Kungfu",           // 4
		"Elbow",            // 5
		"Grabkick"          // 6
	};
new SendChatStreamColors[6] =
	{
		0xF0F0F0FA,     // 1
	    0xDCDCDCFA,     // 2
	    0xC8C8C8FA,     // 3
	    0xAFAFAFC8,     // 4
	    0x9696A096,     // 5
	    0x7D7D7D64      // 6
	};
new COLOR_MESSAGES[4] =
	{   0xFFA97FFF,      // 0 - COLOR ERROR
		0xFFD97FFF,      // 1 - COLOR AYUDA
		0xC8C8C8CD,      // 2 - COLOR INFORMACIÓN
		0x33CCFFAA       // 3 - COLOR AFIRMATIVO
	};
new AccionesColors[20] =
	{
	    0xACC97F22A,        // 0 - ME - LILA
	    0xFFFF00FF,         // 1 - AME - AMARILLO
	    0x00FF00FF,         // 2 - INTENTAR OK - VERDE
	    0xE10000FF,         // 3 - INTENTAR FAIL - ROJO
	    0xFFFFFFFF,         // 4 - GRITAR - BLANCO
	    0xE600FFFF,         // 5 - SUSURRAR - BLANCO
	    0xF0F0F0FF,         // 6 - CANAL OOC - MEDIO GRIS
	    0xFFFF00FF,         // 7 - AME FIX - AMARILLO
	    0xACC97F22A,        // 8 - ME FIX - 0xACC97F22A
	    0xFFFF00FF         // 9 - MEGAFONO
	};
new Float:AccionesRadios[20] =
	{
	    30.0,        // 0 - ME
	    30.0,        // 1 - AME
	    30.0,        // 2 - INTENTAR OK
	    30.0,        // 3 - INTENTAR FAIL
	    50.0,        // 4 - GRITAR
	    3.0,         // 5 - SUSURRAR
	    30.0,        // 6 - CANAL OOC
	    30.0,        // 7 - AME
	    30.0,         // 8 - ME
	    60.0         // 9 - MEGAFONO
	};
new IdiomasNames[6][MAX_PLAYER_NAME] =
	{
		"Alemán",           // 00 - Alemán
		"Francés",          // 01 - Francés
		"Portugués",        // 02 - Portugués
		"Italiano",         // 03 - Italiano
		"Inglés",           // 04 - Inglés
		"Japonés"           // 05 - Japonés
	};
new LicenciasNames[8][7] =
	{
		"Armas", 	          // 00 - Armas
		"Coche",           	  // 01 - Coche
		"Camión",             // 02 - Camión
		"Moto",          	  // 03 - Moto
		"Vuelo",        	  // 04 - Vuelo
		"Botes",         	  // 05 - Bote
		"Tren",	    	      // 06 - Tren
		"Pesca"    	          // 07 - Pesca
	};
new CochesPistaNames[6][10] =
	{
		"TODOS",
		"Coches",
		"Camiones",
		"Motos",
		"Aviones",
		"Bote"
	};
new Float:CamerasPresent[58][7] =
{
	{148.2775,-1940.7916,41.1581, 0.001, 154.1154,-1952.1362,51.3438},
	{158.4620,-1952.5027,60.7858, 0.001, 154.1154,-1952.1362,51.3438},
	{157.5774,-1960.6683,60.7858, 0.001, 154.1154,-1952.1362,51.3438},
	{157.6724,-1960.7848,47.9010, 0.001, 154.1154,-1952.1362,51.3438},
	{140.3312,-1957.0142,47.9010, 0.001, 154.1154,-1952.1362,51.3438},
	{163.0442,-1938.8516,53.2219, 0.001, 154.1154,-1952.1362,51.3438},
	{164.0951,-1937.9269,60.8537, 0.001, 154.1154,-1952.1362,51.3438},
	{149.1857,-1960.2377,60.8537, 0.001, 154.1154,-1952.1362,51.3438},
	{169.3949,-1985.1768,16.9529, 0.001, 154.1154,-1952.1362,51.3438},
	{175.9827,-1934.3521,59.2550, 0.04, 154.1154,-1952.1362,51.3438},
	{139.1381,-1977.8539,59.2550, 0.04, 154.1154,-1952.1362,51.3438},
	{132.6389,-1923.6466,59.2550, 0.01, 154.1154,-1952.1362,51.3438},
	{186.8577,-1976.6010,59.2550, 0.01, 154.1154,-1952.1362,51.3438},
	{152.6268,-2006.2003,59.2550, 0.01, 154.1154,-1952.1362,51.3438},
	{153.5124,-1944.0731,51.5831, 0.04, 154.1154,-1952.1362,51.3438}, // 14 - Tutorial

	{1552.7028,-1736.9661,22.7690, 0.01, 1476.5753,-1693.8572,14.0469},
	{1422.2134,-1653.6403,22.7690, 0.01, 1476.5753,-1693.8572,14.0469},
	{1577.7903,-1638.8691,36.5066, 0.01, 1476.5753,-1693.8572,14.0469},
	{1422.0381,-1743.0465,13.5469, 0.01, 1476.5753,-1693.8572,14.0469}, // 18 - Ayuntamiento

	{-468.3676,-489.1411,25.5178, 0.01, -537.0579,-489.6430,25.5234},
	{-604.5347,-487.9308,25.5178, 0.01, -537.0579,-489.6430,25.5234},
	{-543.1189,-566.5915,75.8019, 0.01, -537.0579,-489.6430,25.5234},
	{-508.0062,-439.7100,42.6914, 0.01, -537.0579,-489.6430,25.5234},
	{-473.1769,-536.4239,34.0925, 0.01, -537.0579,-489.6430,25.5234}, // 23 - Camioneros

	{1833.1136,-1862.4054,22.0158, 0.01, 1772.3267,-1925.0500,13.5531},
	{1799.9946,-1962.3739,22.0158, 0.01, 1772.3267,-1925.0500,13.5531},
	{1753.2750,-1888.0272,14.0089, 0.01, 1772.3267,-1925.0500,13.5531},
	{1836.8906,-1926.1384,35.0145, 0.01, 1772.3267,-1925.0500,13.5531},
	{-1986.5505,-59.5914,53.6414, 0.01, 1772.3267,-1925.0500,13.5531}, // 28 - Taxís


	{-1957.5889,-58.2921,25.8763, 0.01, -2052.3401,-121.0279,35.2839},
	{-1982.0291,-92.4851,45.9537, 0.01, -2052.3401,-121.0279,35.2839},
	{-2084.8523,-90.1077,45.9537, 0.01, -2052.3401,-121.0279,35.2839},
	{-2078.4849,-205.9824,45.9537, 0.01, -2052.3401,-121.0279,35.2839},
	{-2007.9824,-57.5748,53.0982, 0.01, -2052.3401,-121.0279,35.2839}, // 33 - Licencieros

	{-2852.0374,464.9544,4.0999, 0.01, -2933.6436,470.1097,10.2238},
	{-3033.6431,474.5834,24.5588, 0.01, -2933.6436,470.1097,10.2238},
	{-2974.8450,478.0240,5.9347, 0.01, -2933.6436,470.1097,10.2238},
	{-2869.7942,420.7149,39.4711, 0.01, -2933.6436,470.1097,10.2238},
	{-2946.9832,540.7787,8.8698, 0.01, -2933.6436,470.1097,10.2238}, // 38 - Taller

	{-2145.3135,1311.4968,53.4459, 0.01, -2075.9697,1422.3066,10.5946},
	{-2053.8140,1343.1326,10.4069, 0.01, -2075.9697,1422.3066,10.5946},
	{-2042.5265,1443.1073,30.2435, 0.04, -2075.9697,1422.3066,10.5946},
	{-2093.3276,1370.9908,6.5817, 0.01, -2075.9697,1422.3066,10.5946},
	{-2064.6157,1389.7963,7.6273, 0.009, -2075.9697,1422.3066,10.5946},
	{-2089.9099,1342.4470,26.3686, 0.01, -2075.9697,1422.3066,10.5946}, // 44 - Detectives

	{742.4728,-1387.9087,13.6842, 0.01, 740.4363,-1347.4310,13.5120},
	{585.3113,-1327.5784,204.9761, 0.01, 740.4363,-1347.4310,13.5120},
	{773.4609,-1334.0858,13.5413, 0.04, 740.4363,-1347.4310,13.5120},
	{776.6302,-1398.9143,19.0551, 0.01, 740.4363,-1347.4310,13.5120},
	{599.7180,-1375.1670,42.9928, 0.04, 740.4363,-1347.4310,13.5120},
	{744.0721,-1286.2228,42.9928, 0.01, 740.4363,-1347.4310,13.5120},
	{756.7815,-1402.7537,32.0593, 0.01, 740.4363,-1347.4310,13.5120}, // 51 - CNN

	{1228.2329,2025.8304,17.0191, 0.01, 1228.2788,1954.7325,6.7344}, // Pruebas Race
	{1237.0281,1843.9073,6.0734, 0.01, 1228.2788,1954.7325,6.7344},
	{1258.5016,1956.2878,11.5732, 0.01, 1228.2788,1954.7325,6.7344},
	{1223.6178,1958.3763,6.7344, 0.01, 1228.2788,1954.7325,6.7344},
	{1231.4329,1964.6942,9.7664, 0.01, 1228.2788,1954.7325,6.7344},
	{1216.5686,1931.3027,21.1213, 0.01, 1228.2788,1954.7325,6.7344} // 57 - Pruebas
};

new ATTRACTORS_ANIMATIONS   [3][30];	// ATTRACTORS - 2
new BAR_ANIMATIONS      	[12][30];	// BAR - 11
new BAT_ANIMATIONS      	[11][30];	// BAT - 10
new FIRE_ANIMATIONS      	[13][30];	// FIRE - 12
new PLAYA_ANIMATIONS      	[5][30];	// PLAYA - 4
new GYM_ANIMATIONS      	[7][30];	// GYM - 6
new BFINJECT_ANIMATIONS     [4][30];	// BFINJECT - 3
new BICID_ANIMATIONS      	[19][30];	// BICID - 18
new BICIH_ANIMATIONS      	[18][30];	// BICIH - 17
new BICIL_ANIMATIONS      	[9][30];	// BICIL - 8
new BICIS_ANIMATIONS      	[20][30];	// BICIS - 19
new BICIV_ANIMATIONS      	[18][30];	// BICIV - 17
new BICI_ANIMATIONS      	[4][30];	// BICI - 3
new GOLPE_ANIMATIONS      	[12][30];	// GOLPE - 11
new BMX_ANIMATIONS      	[18][30];	// BMX - 17
new BOMBER_ANIMATIONS      	[6][30];	// BOMBER - 5
new BOX_ANIMATIONS      	[10][30];	// BOX - 9
new BALL_ANIMATIONS      	[41][30];	// BALL - 40
new BUDDY_ANIMATIONS      	[5][30];	// BUDDY - 4
new BUS_ANIMATIONS      	[9][30];	// BUS - 8
new CAM_ANIMATIONS      	[14][30];	// CAM - 13
new CAR_ANIMATIONS      	[11][30];	// CAR - 10
new CARRY_ANIMATIONS      	[7][30];	// CARRY - 6
new CARCHAT_ANIMATIONS     	[21][30];	// CARCHAT - 20
new CASINO_ANIMATIONS      	[25][30];	// CASINO - 24
new CHAINSAW_ANIMATIONS     [11][30];	// CHAINSAW - 10
new CHOPA_ANIMATIONS      	[18][30];	// CHOPA - 17
new CLOTHES_ANIMATIONS     	[13][30];	// CLOTHES - 12
new COACH_ANIMATIONS      	[6][30];	// COACH - 5
new COLT_ANIMATIONS      	[7][30];	// COLT - 6
new COP_ANIMATIONS      	[12][30];	// COP - 11
new COPD_ANIMATIONS      	[4][30];	// COPD - 3
new CRACK_ANIMATIONS      	[10][30];	// CRACK - 9
new CRIB_ANIMATIONS      	[5][30];	// CRIB - 4
new DAM_ANIMATIONS      	[5][30];	// DAM - 4
new DANCE_ANIMATIONS      	[13][30];	// DANCE - 12
new DEALER_ANIMATIONS      	[7][30];	// DEALER - 6
new DILDO_ANIMATIONS      	[9][30];	// DILDO - 8
new DODGE_ANIMATIONS      	[4][30];	// DODGE - 3
new DOZER_ANIMATIONS      	[10][30];	// DOZER - 9
new DRIVE_ANIMATIONS      	[8][30];	// DRIVE - 7
new FAT_ANIMATIONS      	[18][30];	// FAT - 17
new FIGHTB_ANIMATIONS      	[10][30];	// FIGHTB - 9
new FIGHTC_ANIMATIONS      	[12][30];	// FIGHTC - 11
new FIGHTD_ANIMATIONS      	[10][30];	// FIGHTD - 9
new FIGHTE_ANIMATIONS      	[4][30];	// FIGHTE - 3
new FINALE_ANIMATIONS      	[16][30];	// FINALE - 15
new FINALE2_ANIMATIONS      [8][30];	// FINALE2 - 7
new FLAME_ANIMATIONS      	[1][30];	// FLAME - 0
new FLOWERS_ANIMATIONS     	[3][30];	// FLOWERS - 2
new FOOD_ANIMATIONS      	[33][30];	// FOOD - 32
new GYMA_ANIMATIONS      	[9][30];	// GYMA - 8
new GANGS_ANIMATIONS      	[33][30];	// GANGS - 32
new GHANDS_ANIMATIONS      	[20][30];	// GHANDS - 19
new GHETTO_ANIMATIONS      	[7][30];	// GHETTO - 6
new GOGGLES_ANIMATIONS     	[1][30];	// GOGGLES - 0
new GRAFFITI_ANIMATIONS     [2][30];	// GRAFFITI - 1
new GRAVE_ANIMATIONS      	[3][30];	// GRAVE - 2
new GRENADE_ANIMATIONS     	[3][30];	// GRENADE - 2
new GYMB_ANIMATIONS      	[24][30];	// GYMB - 23
new HAIR_ANIMATIONS      	[13][30];	// HAIR - 12
new HEIST_ANIMATIONS      	[10][30];	// HEIST - 9
new HOUSE_ANIMATIONS      	[10][30];	// HOUSE - 9
new OFFICE_ANIMATIONS      	[10][30];	// OFFICE - 9
new INTSHOP_ANIMATIONS     	[8][30];	// SHOP - 7
new BUISNESS_ANIMATIONS     [4][30];	// BUISNESS - 3
new KART_ANIMATIONS      	[4][30];	// KART - 3
new KISSING_ANIMATIONS     	[15][30];	// KISSING - 14
new KNIFE_ANIMATIONS      	[16][30];	// KNIFE - 15
new LAPDAN1_ANIMATIONS      [2][30];	// LAPDAN - 1
new LAPDAN2_ANIMATIONS     	[2][30];	// LAPDAN - 2
new LAPDAN3_ANIMATIONS     	[2][30];	// LAPDAN - 3
new LOWRIDER_ANIMATIONS    	[39][30];	// LOWRIDER - 38
new CHASE_ANIMATIONS      	[25][30];	// CHASE - 24
new END_ANIMATIONS      	[8][30];	// END - 7
new MEDIC_ANIMATIONS      	[1][30];	// MEDIC - 0
new MISC_ANIMATIONS      	[41][30];	// MISC - 40
new MTB_ANIMATIONS      	[18][30];	// MTB - 17
//new MUSCULAR_ANIMATIONS     [17][30];	// MUSCULAR - 16
//new NEVADA_ANIMATIONS      	[2][30];	// NEVADA - 1
new LOOKERS_ANIMATIONS     	[29][30];	// LOOKERS - 28
new OTB_ANIMATIONS      	[11][30];	// OTB - 10
new PARA_ANIMATIONS      	[22][30];	// PARA - 21
new PARK_ANIMATIONS      	[3][30];	// PARK - 2
new PAUL_ANIMATIONS      	[12][30];	// PAUL - 11
new PLAYER_ANIMATIONS      	[4][30];	// PLAYER - 3
new PLAYID_ANIMATIONS      	[5][30];	// PLAYID - 4
new POLICE_ANIMATIONS      	[10][30];	// POLICE - 9
new POOL_ANIMATIONS      	[21][30];	// POOL - 20
new POOR_ANIMATIONS      	[2][30];	// POOR - 1
new PYTHON_ANIMATIONS      	[5][30];	// PYTHON - 4
new QUAD_ANIMATIONS      	[17][30];	// QUAD - 16
new QUADD_ANIMATIONS      	[4][30];	// QUADD - 3
new RAP_ANIMATIONS      	[8][30];	// RAP - 7
new RIFLE_ANIMATIONS      	[5][30];	// RIFLE - 4
new RIOT_ANIMATIONS      	[7][30];	// RIOT - 6
new ROB_ANIMATIONS      	[5][30];	// ROB - 4
new ROCKET_ANIMATIONS      	[5][30];	// ROCKET - 4
new RUSTLER_ANIMATIONS     	[5][30];	// RUSTLER - 4
new RYDER_ANIMATIONS      	[16][30];	// RYDER - 15
new SCRAT_ANIMATIONS      	[12][30];	// SCRAT - 11
new SHAMAL_ANIMATIONS      	[4][30];	// SHAMAL - 3
new SHOP_ANIMATIONS      	[25][30];	// SHOP - 24
new SHOTGUN_ANIMATIONS     	[3][30];	// SHOTGUN - 2
new SILENCED_ANIMATIONS    	[4][30];	// SILENCED - 3
new SKATE_ANIMATIONS      	[3][30];	// SKATE - 2
new SMOK_ANIMATIONS      	[8][30];	// SMOK - 7
new SNIPER_ANIMATIONS      	[1][30];	// SNIPER - 0
new SPRAY_ANIMATIONS      	[2][30];	// SPRAY - 1
new STRIP_ANIMATIONS      	[20][30];	// STRIP - 19
new SUNBA_ANIMATIONS      	[18][30];	// SUNBA - 17
new SWAT_ANIMATIONS      	[23][30];	// SWAT - 22
new SWEET_ANIMATIONS      	[7][30];	// SWEET - 6
new SWIM_ANIMATIONS      	[7][30];	// SWIM - 6
new SWORD_ANIMATIONS      	[10][30];	// SWORD - 9
new TANK_ANIMATIONS      	[6][30];		// TANK - 5
new TATTOO_ANIMATIONS      	[57][30];	// TATTOO - 56
new TEC_ANIMATIONS      	[4][30];	// TEC - 3
new TRAIN_ANIMATIONS      	[4][30];	// TRAIN - 3
new TRUCK_ANIMATIONS      	[17][30];	// TRUCK - 16
new UZI_ANIMATIONS      	[5][30];	// UZI - 4
new VAN_ANIMATIONS      	[8][30];	// VAN - 7
new VENDING_ANIMATIONS      [6][30];	// VENDING - 5
new VORTEX_ANIMATIONS      	[4][30];	// VORTEX - 3
new WAYFA_ANIMATIONS      	[18][30];	// WAYFA - 17
new ARMA_ANIMATIONS      	[17][30];	// ARMA - 16
new WUZI_ANIMATIONS      	[12][30];	// WUZI - 11
new PED_ANIMATIONS      	[286][30]; 	// PED - 285

main()
{
}

public OnGameModeInit()
{
//	ConvertMap("Mecas ARREGLADO", 1);

  /*  new DB:USERDB;
    USERDB = db_open("users.db");
    db_query(USERDB, "SELECT * FROM users");
*/

	for (new i = 0; i < MAX_PLAYERS; i++)
	{
		PlayersDataOnline[i][MarcaZZ] = true;
	}

	print("\n\n\n\n\n\n\n___________________ INICIANDO GAMEMODE ___________________");
	MySQLConnect();
	
	SetGameModeText(GAMEMODE_VERSION);
	

	// LOGO
	Url_WebShadow = TextDrawCreateEx(32.1, 428.1, URL_WEB_SHADOW);
	TextDrawColor(Url_WebShadow, 0xFFFEFFFF);
	TextDrawSetShadow(Url_WebShadow ,1);
	TextDrawFont(Url_WebShadow, 2);
	TextDrawLetterSize(Url_WebShadow, 0.3 , 0.9);

	Url_Web = TextDrawCreateEx(32.0, 428.0, URL_WEB);
	TextDrawColor(Url_Web, 0xFFFEFFFF);
	TextDrawSetShadow(Url_Web ,1);
	TextDrawFont(Url_Web, 2);
	TextDrawLetterSize(Url_Web, 0.3 , 0.9);

/////////////////////// OTROS
	ManualVehicleEngineAndLights();
	SetNameTagDrawDistance(NAME_TAG_DISTANCE_DEFAULT);
    DisableInteriorEnterExits();
	EnableStuntBonusForAll(0);
	Streamer_TickRate(10);
	ShowPlayerMarkers(0);
    UsePlayerPedAnims();
	SetWeather(14);
	WeatherCurrent = 14;
	LoadDoors();
	LoadPriceAndNameVehicles();
	LoadCajeros();
	LoadStaticObjects();
	LoadTelesPublics();
	LoadTelesLock();
	LoadMenuStatic();
	LoadTypeObjectsBolsillos();
	LoadTextDrawEnfermedad();
	LoadAllAnims();
	CreateTextDrawFijosVelocimetros();
	LoadGasolineras();
	LoadTypeJails();
	LoadTypeHouse();
	LoadGarageType();
	LoadPointsExtraction();
	CleanVCP();
	LoadDataPistas();
	LoadTexDrawsTutorial();
	LoadPeajes();
	LoadGaragesEx();
	LoadGaragesExLock();
	LoadTextDrawInfo();
	LoadJobs();
	LoadCameras();
	CreateTextDrawCansansio();
	CreateTextDrawDamage();
	LoadCamerasLogin();
	CreateTextDrawGas();
	CreateTextDrawNumbers();
	CreateTextDrawOil();
	LoadIconsPlayers();
	LoadTypeArticulosR();
	LoadRobosInfo();
/////////// NEGOCIOS
	LoadDataBizzType();
	for (new i = 1; i < MAX_BIZZ_COUNT; i++)
	{
		if (!DataLoadBizz(i))
		{
		    MAX_BIZZ = i - 1;
		    break;
		}
	}
/////////// CASAS
	for (new i = 1; i < MAX_HOUSE_COUNT; i++)
	{
		if (!LoadHouse(i))
		{
		    MAX_HOUSE = i - 1;
		    break;
		}
	}
	LoadGarages();
	LoadIncendios();
	LoadBombas();
	LoadVCP();
/////////// VEHICLES
	// NORMALES
	for (new i = 1; i < MAX_VEHICLE_COUNT; i++)
	{
		DataCars[i][StationID]     		= -1;
		DataCars[i][VolumenVehicle]     = DEFAULT_AUDIO_VOLUMEN;
		
		if (!LoadDataVehicle(i, DIR_VEHICLES, true))
		{
		    MAX_CAR_DUENO = i - 1;
		    MAX_CAR = MAX_CAR_DUENO;
		    break;
		}
		else
		{
			if ( DataCars[i][IsLastSpawn] )
			{
				SetLastSettingVehicle(i);
			}
			else
			{
				CreateVehicleEx(DataCars[i][Modelo], DataCars[i][PosX], DataCars[i][PosY], DataCars[i][PosZ], DataCars[i][PosZZ], DataCars[i][Color1], DataCars[i][Color2], i);
			}
		}
		DataCars[i][IsLastSpawn] = false;
	}
	// FACCIONES
	LoadCarsFaccion();
	for ( new i = MAX_CAR_DUENO + 1; i <= MAX_CAR_FACCION; i++)
	{
		SetPlateToCarFaccion(i, DataCars[i][Time]);
	    if ( LoadDataVehicle(i, DIR_VEHICLESF, false) && DataCars[i][IsLastSpawn] )
	    {
			SetLastSettingVehicle(i);
	    }
	    else
	    {
			CreateVehicleEx(DataCars[i][Modelo], DataCars[i][PosX], DataCars[i][PosY], DataCars[i][PosZ], DataCars[i][PosZZ], DataCars[i][Color1], DataCars[i][Color2], i);
			DataCars[i][Gas] = MAX_GAS_VEHICLE;
			DataCars[i][Oil] = MAX_OIL_VEHICLE;
			DataCars[i][Lock] = LOCK_FACCION_CAR;
		}
		DataCars[i][IsLastSpawn] = false;
//		printf("%i -- %i - %f - %f - %f - %f - %i - %i", DataCars[i][Time], DataCars[i][Modelo], DataCars[i][PosX], DataCars[i][PosY], DataCars[i][PosZ], DataCars[i][PosZZ], DataCars[i][Color1], DataCars[i][Color2]);
	}
	// PÚBLICOS
	LoadCarsPublic();
	for ( new i = MAX_CAR_FACCION + 1; i <= MAX_CAR_PUBLIC; i++)
	{
	    if ( LoadDataVehicle(i, DIR_VEHICLESP, false) && DataCars[i][IsLastSpawn] )
	    {
			SetLastSettingVehicle(i);
	    }
	    else
	    {
			CreateVehicleEx(DataCars[i][Modelo], DataCars[i][PosX], DataCars[i][PosY], DataCars[i][PosZ], DataCars[i][PosZZ], DataCars[i][Color1], DataCars[i][Color2], i);
			DataCars[i][Gas] = MAX_GAS_VEHICLE;
			DataCars[i][Oil] = MAX_OIL_VEHICLE;
		}
		DataCars[i][IsLastSpawn] = false;
//		printf("%i -- %i - %f - %f - %f - %f - %i - %i", DataCars[i][Time], DataCars[i][Modelo], DataCars[i][PosX], DataCars[i][PosY], DataCars[i][PosZ], DataCars[i][PosZZ], DataCars[i][Color1], DataCars[i][Color2]);
	}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////// FACCIONES
	for (new i = 0; i < MAX_FACCION_COUNT; i++)
	{
	    for (new s = 0; s < MAX_FACCION_RANGOS; s++)
	    {
		    FaccionData[i][Paga][s] = 0;
			format(FaccionesRangos[i][s], MAX_FACCION_NAME, "0");
			for ( new h; h < MAX_FACCION_SKIN; h++)
			{
				RangosSkins[i][s][h] = 0;
			}
		}
	}
// CIVIL ID - 0
	format(FaccionData[CIVIL][NameFaccion], MAX_FACCION_NAME, "Civil");
	FaccionData[CIVIL][Spawn_X][0] 		= 1726.7014;
	FaccionData[CIVIL][Spawn_Y][0] 		= -1687.1825;
	FaccionData[CIVIL][Spawn_Z][0] 		= 13.5164;
	FaccionData[CIVIL][Spawn_ZZ][0]		= 178.1227;
	FaccionData[CIVIL][Family] 			= false;
	FaccionData[CIVIL][Radio] 			= false;

	FaccionesRangos[CIVIL][7]  = "Ninguno"; 			RangosSkins[CIVIL][7][0] 	= 0; FaccionData[CIVIL][Paga][7] = 250;
//	FaccionData[CIVIL][PickupidOutF] 	= CreatePickup	(1239, 	1, 	1478.9347,-1672.9708,14.0469,	 	-1);

// GOBIERNO ID - 1
	format(FaccionData[GOBIERNO][NameFaccion], MAX_FACCION_NAME, "Gobierno");
	FaccionData[GOBIERNO][Extorsion] 		= 0;
	FaccionData[GOBIERNO][Spawn_X][0]		= 1481.2837;
	FaccionData[GOBIERNO][Spawn_Y][0]   	= -1768.4972;
	FaccionData[GOBIERNO][Spawn_Z][0]		= 18.7958;
	FaccionData[GOBIERNO][Spawn_ZZ][0]   	= 0.2469;
	FaccionData[GOBIERNO][Spawn_X][1]		= -2650.7922;
	FaccionData[GOBIERNO][Spawn_Y][1]   	= 362.9865;
	FaccionData[GOBIERNO][Spawn_Z][1]		= 4.3797;
	FaccionData[GOBIERNO][Spawn_ZZ][1]   	= 88.3630;
	FaccionData[GOBIERNO][PickupOut_X] 		= 1481.1428;
	FaccionData[GOBIERNO][PickupOut_Y] 		= -1772.0159;
	FaccionData[GOBIERNO][PickupOut_Z] 		= 18.7958;
	FaccionData[GOBIERNO][PickupOut_ZZ] 	= 359.3538;
	FaccionData[GOBIERNO][PickupIn_X] 		= 390.6746;
	FaccionData[GOBIERNO][PickupIn_Y] 		= 173.8038;
	FaccionData[GOBIERNO][PickupIn_Z] 		= 1008.3828;
	FaccionData[GOBIERNO][PickupIn_ZZ] 		= 91.3626;
	FaccionData[GOBIERNO][InteriorFaccion] 	= 3;
	FaccionData[GOBIERNO][PickupidOutF]		= CreatePickup	(1239, 	1, 	FaccionData[GOBIERNO][PickupOut_X], FaccionData[GOBIERNO][PickupOut_Y], FaccionData[GOBIERNO][PickupOut_Z],	 	WORLD_NORMAL);
	FaccionData[GOBIERNO][PickupidInF] 		= CreatePickup	(1239, 	1, 	FaccionData[GOBIERNO][PickupIn_X], FaccionData[GOBIERNO][PickupIn_Y], FaccionData[GOBIERNO][PickupIn_Z],	 	WORLD_DEFAULT_INTERIOR);
	FaccionData[GOBIERNO][PrecioFaccion] 	= 0;
	FaccionData[GOBIERNO][Lock] 			= 0;
	FaccionData[GOBIERNO][World] 			= WORLD_DEFAULT_INTERIOR;
	FaccionData[GOBIERNO][Family] 			= true;
	FaccionData[GOBIERNO][Radio] 			= false;

	FaccionesRangos[GOBIERNO][0]  = "Presidente"; 		RangosSkins[GOBIERNO][0][0] 	= 147; 	RangosSkins[GOBIERNO][0][1] 	= 216;  RangosSkins[GOBIERNO][0][2] 	= 148; 	FaccionData[GOBIERNO][Paga][0] = 1000;
	FaccionesRangos[GOBIERNO][1]  = "Vicepresidente"; 	RangosSkins[GOBIERNO][1][0] 	= 17;  	RangosSkins[GOBIERNO][1][1] 	= 216;  RangosSkins[GOBIERNO][1][2] 	= 148;	FaccionData[GOBIERNO][Paga][1] = 800;
	FaccionesRangos[GOBIERNO][2]  = "Alcalde LS"; 		RangosSkins[GOBIERNO][2][0] 	= 227;  RangosSkins[GOBIERNO][2][1] 	= 216;  RangosSkins[GOBIERNO][2][2] 	= 148;	FaccionData[GOBIERNO][Paga][2] = 500;
	FaccionesRangos[GOBIERNO][3]  = "Alcalde SF"; 		RangosSkins[GOBIERNO][3][0] 	= 227;  RangosSkins[GOBIERNO][3][1] 	= 216;  RangosSkins[GOBIERNO][3][2] 	= 148;	FaccionData[GOBIERNO][Paga][3] = 500;
	FaccionesRangos[GOBIERNO][4]  = "Secretario(a)"; 	RangosSkins[GOBIERNO][4][0] 	= 189; 	RangosSkins[GOBIERNO][4][1]		= 150;  RangosSkins[GOBIERNO][4][2] 	= 148;  FaccionData[GOBIERNO][Paga][4] = 400;
	FaccionesRangos[GOBIERNO][5]  = "Asistente"; 		RangosSkins[GOBIERNO][5][0] 	= 189; 	RangosSkins[GOBIERNO][5][1] 	= 150;  RangosSkins[GOBIERNO][5][2] 	= 148;	FaccionData[GOBIERNO][Paga][5] = 400;

// LICENCIEROSID - 2
	format(FaccionData[LICENCIEROS][NameFaccion], MAX_FACCION_NAME, "Licencieros");
	FaccionData[LICENCIEROS][Extorsion] 		= 0;
	FaccionData[LICENCIEROS][Spawn_X][0] 		= -2045.7384;
	FaccionData[LICENCIEROS][Spawn_Y][0] 		= -108.8351;
	FaccionData[LICENCIEROS][Spawn_Z][0] 		= 35.2307;
	FaccionData[LICENCIEROS][Spawn_ZZ][0] 		= 177.6654;
	FaccionData[LICENCIEROS][Spawn_X][1] 		= -1494.6835;
	FaccionData[LICENCIEROS][Spawn_Y][1] 		= 936.5883;
	FaccionData[LICENCIEROS][Spawn_Z][1] 		= 7.1875;
	FaccionData[LICENCIEROS][Spawn_ZZ][1] 		= 89.4762;
	FaccionData[LICENCIEROS][PickupOut_X] 		= -2026.6021;
	FaccionData[LICENCIEROS][PickupOut_Y] 		= -101.7902;
	FaccionData[LICENCIEROS][PickupOut_Z] 		= 35.1641;
	FaccionData[LICENCIEROS][PickupOut_ZZ] 		= 7.1465;
	FaccionData[LICENCIEROS][PickupIn_X] 		= -2027.0356;
	FaccionData[LICENCIEROS][PickupIn_Y] 		= -103.7437;
	FaccionData[LICENCIEROS][PickupIn_Z] 		= 1035.1719;
	FaccionData[LICENCIEROS][PickupIn_ZZ] 		= 183.3053;
	FaccionData[LICENCIEROS][InteriorFaccion] 	= 3;
	FaccionData[LICENCIEROS][PickupidOutF]		= CreatePickup	(1239, 	1, 	FaccionData[LICENCIEROS][PickupOut_X], FaccionData[LICENCIEROS][PickupOut_Y], FaccionData[LICENCIEROS][PickupOut_Z],	 	WORLD_NORMAL);
	FaccionData[LICENCIEROS][PickupidInF] 		= CreatePickup	(1239, 	1, 	FaccionData[LICENCIEROS][PickupIn_X], FaccionData[LICENCIEROS][PickupIn_Y], FaccionData[LICENCIEROS][PickupIn_Z],	 	WORLD_DEFAULT_INTERIOR);
	FaccionData[LICENCIEROS][PrecioFaccion] 	= 0;
	FaccionData[LICENCIEROS][Lock] 				= 0;
	FaccionData[LICENCIEROS][World] 			= WORLD_DEFAULT_INTERIOR;
	FaccionData[LICENCIEROS][Family] 			= true;
	FaccionData[LICENCIEROS][Radio] 			= false;

	FaccionesRangos[LICENCIEROS][0]  = "Director"; 				RangosSkins[LICENCIEROS][0][0] 	= 171; 	RangosSkins[LICENCIEROS][0][1] 	= 194; RangosSkins[LICENCIEROS][0][2] 	= 172; 	FaccionData[LICENCIEROS][Paga][0] = 500;
	FaccionesRangos[LICENCIEROS][1]  = "Sub Director"; 			RangosSkins[LICENCIEROS][1][0] 	= 59;  	RangosSkins[LICENCIEROS][1][1] 	= 60;  RangosSkins[LICENCIEROS][1][2] 	= 194;	FaccionData[LICENCIEROS][Paga][1] = 450;
	FaccionesRangos[LICENCIEROS][2]  = "Jefe de Licencieros"; 	RangosSkins[LICENCIEROS][2][0] 	= 59;  	RangosSkins[LICENCIEROS][2][1] 	= 60;  RangosSkins[LICENCIEROS][2][2] 	= 194;	FaccionData[LICENCIEROS][Paga][2] = 450;
	FaccionesRangos[LICENCIEROS][3]  = "Jefe de Profesores"; 	RangosSkins[LICENCIEROS][3][0] 	= 59;  	RangosSkins[LICENCIEROS][3][1] 	= 60;  RangosSkins[LICENCIEROS][3][2] 	= 194;	FaccionData[LICENCIEROS][Paga][3] = 450;
	FaccionesRangos[LICENCIEROS][4]  = "Licenciero"; 			RangosSkins[LICENCIEROS][4][0] 	= 59; 	RangosSkins[LICENCIEROS][4][1]	= 60;  RangosSkins[LICENCIEROS][4][2] 	= 194;  FaccionData[LICENCIEROS][Paga][4] = 400;
	FaccionesRangos[LICENCIEROS][5]  = "Profesor"; 				RangosSkins[LICENCIEROS][5][0] 	= 59; 	RangosSkins[LICENCIEROS][5][1] 	= 60;  RangosSkins[LICENCIEROS][5][2] 	= 194;	FaccionData[LICENCIEROS][Paga][5] = 400;

// TRAFICANTES ID - 3
	format(FaccionData[TRAFICANTES][NameFaccion], MAX_FACCION_NAME, "Traficantes");
	FaccionData[TRAFICANTES][Extorsion] 		= 0;
	FaccionData[TRAFICANTES][AlmacenX][0] 		= 2811.0068;
	FaccionData[TRAFICANTES][AlmacenY][0] 		= 1995.9684;
	FaccionData[TRAFICANTES][AlmacenZ][0] 		= 16.7722;
	FaccionData[TRAFICANTES][AlmacenWorld][0]	= WORLD_DEFAULT_INTERIOR;
	FaccionData[TRAFICANTES][AlmacenX][1] 		= 0;
	FaccionData[TRAFICANTES][AlmacenY][1] 		= 0;
	FaccionData[TRAFICANTES][AlmacenZ][1] 		= 0;
	FaccionData[TRAFICANTES][Spawn_X][0]		= 1070.0868;
	FaccionData[TRAFICANTES][Spawn_Y][0]		= -342.7817;
	FaccionData[TRAFICANTES][Spawn_Z][0]		= 73.9922;
	FaccionData[TRAFICANTES][Spawn_ZZ][0]		= 0;
	FaccionData[TRAFICANTES][PickupOut_X] 		= 1073.1631;
	FaccionData[TRAFICANTES][PickupOut_Y] 		= -345.3519;
	FaccionData[TRAFICANTES][PickupOut_Z] 		= 73.9922;
	FaccionData[TRAFICANTES][PickupOut_ZZ] 		= 360;
	FaccionData[TRAFICANTES][PickupIn_X] 		= 2532.2322;
	FaccionData[TRAFICANTES][PickupIn_Y] 		= -1281.7468;
	FaccionData[TRAFICANTES][PickupIn_Z] 		= 1048.2891;
	FaccionData[TRAFICANTES][PickupIn_ZZ] 		= 271.4886;
	FaccionData[TRAFICANTES][InteriorFaccion] 	= 2;
	FaccionData[TRAFICANTES][PickupidOutF]		= CreatePickup	(1279, 	1, 	FaccionData[TRAFICANTES][PickupOut_X], FaccionData[TRAFICANTES][PickupOut_Y], FaccionData[TRAFICANTES][PickupOut_Z],	 	WORLD_NORMAL);
	FaccionData[TRAFICANTES][PickupidInF] 		= CreatePickup	(1279, 	1, 	FaccionData[TRAFICANTES][PickupIn_X], FaccionData[TRAFICANTES][PickupIn_Y], FaccionData[TRAFICANTES][PickupIn_Z],	 	WORLD_DEFAULT_INTERIOR);
	FaccionData[TRAFICANTES][PrecioFaccion] 	= 0;
	FaccionData[TRAFICANTES][Lock] 				= 0;
	FaccionData[TRAFICANTES][World] 			= WORLD_DEFAULT_INTERIOR;
	FaccionData[TRAFICANTES][Family] 			= true;
	FaccionData[TRAFICANTES][Radio] 			= false;

	FaccionesRangos[TRAFICANTES][0]  = "El Jefe"; 				RangosSkins[TRAFICANTES][0][0] 	= 72; 																																																																									FaccionData[TRAFICANTES][Paga][0] = 430;
	FaccionesRangos[TRAFICANTES][1]  = "Mano Derecha"; 			RangosSkins[TRAFICANTES][1][0] 	= 73;  	RangosSkins[TRAFICANTES][1][1] 	= 261;	RangosSkins[TRAFICANTES][1][2] 	= 183;	RangosSkins[TRAFICANTES][1][3] 	= 131;	RangosSkins[TRAFICANTES][1][4] 	= 133;	RangosSkins[TRAFICANTES][1][5] 	= 4;		RangosSkins[TRAFICANTES][1][6] 	= 5;		RangosSkins[TRAFICANTES][1][7] 	= 6;	FaccionData[TRAFICANTES][Paga][1] = 400;
	FaccionesRangos[TRAFICANTES][2]  = "Vendedor de Armas"; 	RangosSkins[TRAFICANTES][2][0] 	= 73; 	RangosSkins[TRAFICANTES][2][1]	= 261; 	RangosSkins[TRAFICANTES][2][2] 	= 183;	RangosSkins[TRAFICANTES][2][3] 	= 131;	RangosSkins[TRAFICANTES][2][4] 	= 133;	RangosSkins[TRAFICANTES][2][5] 	= 4;		RangosSkins[TRAFICANTES][2][6] 	= 5;		RangosSkins[TRAFICANTES][2][7] 	= 6;	FaccionData[TRAFICANTES][Paga][2] = 370;
	FaccionesRangos[TRAFICANTES][3]  = "Vendedor de Drogas"; 	RangosSkins[TRAFICANTES][3][0] 	= 73; 	RangosSkins[TRAFICANTES][3][1]	= 261; 	RangosSkins[TRAFICANTES][3][2] 	= 183;	RangosSkins[TRAFICANTES][3][3] 	= 131;	RangosSkins[TRAFICANTES][3][4] 	= 133;	RangosSkins[TRAFICANTES][3][5] 	= 4;		RangosSkins[TRAFICANTES][3][6] 	= 5;		RangosSkins[TRAFICANTES][3][7] 	= 6;	FaccionData[TRAFICANTES][Paga][3] = 370;
	FaccionesRangos[TRAFICANTES][4]  = "Pichón"; 				RangosSkins[TRAFICANTES][4][0] 	= 73;   RangosSkins[TRAFICANTES][4][1]	= 261; 	RangosSkins[TRAFICANTES][4][2] 	= 183;	RangosSkins[TRAFICANTES][4][3] 	= 131;	RangosSkins[TRAFICANTES][4][4] 	= 133;	RangosSkins[TRAFICANTES][4][5] 	= 4;		RangosSkins[TRAFICANTES][4][6] 	= 5;		RangosSkins[TRAFICANTES][4][7] 	= 6;	FaccionData[TRAFICANTES][Paga][4] = 370;

// LA COSA NOSTRA ID - 4
	format(FaccionData[LCN][NameFaccion], MAX_FACCION_NAME, "LCN");
	FaccionData[LCN][Extorsion] 		= 0;
	FaccionData[LCN][AlmacenX][0] 			= 679.22473144531;
	FaccionData[LCN][AlmacenY][0] 			= 1843.6361083984;
	FaccionData[LCN][AlmacenZ][0] 			= 5.5982542037964;
	FaccionData[LCN][AlmacenWorld][0]	= WORLD_DEFAULT_INTERIOR;
	FaccionData[LCN][Spawn_X][0]		= 1132.9468;
	FaccionData[LCN][Spawn_Y][0]		= -2036.7697;
	FaccionData[LCN][Spawn_Z][0]		= 69.0078;
	FaccionData[LCN][Spawn_ZZ][0]		= 269.1363;
	FaccionData[LCN][PickupOut_X] 		= 1124.0889;
	FaccionData[LCN][PickupOut_Y] 		= -2037.1730;
	FaccionData[LCN][PickupOut_Z] 		= 69.8851;
	FaccionData[LCN][PickupOut_ZZ] 		= 263.7051;
	FaccionData[LCN][PickupIn_X] 		= 1261.6130;
	FaccionData[LCN][PickupIn_Y] 		= -785.2961;
	FaccionData[LCN][PickupIn_Z] 		= 1091.9063;
	FaccionData[LCN][PickupIn_ZZ] 		= 272.4865;
	FaccionData[LCN][InteriorFaccion] 	= 5;
	FaccionData[LCN][PickupidOutF]		= CreatePickup	(1254, 	1, 	FaccionData[LCN][PickupOut_X], FaccionData[LCN][PickupOut_Y], FaccionData[LCN][PickupOut_Z],	 	WORLD_NORMAL);
	FaccionData[LCN][PickupidInF] 		= CreatePickup	(1254, 	1, 	FaccionData[LCN][PickupIn_X], FaccionData[LCN][PickupIn_Y], FaccionData[LCN][PickupIn_Z],	 	WORLD_DEFAULT_INTERIOR);
	FaccionData[LCN][PrecioFaccion] 	= 0;
	FaccionData[LCN][Lock] 				= 0;
	FaccionData[LCN][World] 			= WORLD_DEFAULT_INTERIOR;
	FaccionData[LCN][Family] 			= true;
	FaccionData[LCN][Radio] 			= false;

	FaccionesRangos[LCN][0]  = "Capi di tutti capi"; 	RangosSkins[LCN][0][0] 	= 113; 	RangosSkins[LCN][0][1] 	= 216;	RangosSkins[LCN][0][2] 	= 3;	FaccionData[LCN][Paga][0] = 430;
	FaccionesRangos[LCN][1]  = "Don"; 					RangosSkins[LCN][1][0] 	= 126;  RangosSkins[LCN][1][1] 	= 216;	RangosSkins[LCN][1][2] 	= 3;	FaccionData[LCN][Paga][1] = 450;
	FaccionesRangos[LCN][2]  = "Sottocapo"; 			RangosSkins[LCN][2][0] 	= 111; 	RangosSkins[LCN][2][1]	= 141;  								FaccionData[LCN][Paga][2] = 400;
	FaccionesRangos[LCN][3]  = "Consigliere"; 			RangosSkins[LCN][3][0] 	= 98; 	RangosSkins[LCN][3][1] 	= 141;									FaccionData[LCN][Paga][3] = 400;
	FaccionesRangos[LCN][4]  = "Capo"; 					RangosSkins[LCN][4][0] 	= 125; 	RangosSkins[LCN][4][1] 	= 141;									FaccionData[LCN][Paga][4] = 370;
	FaccionesRangos[LCN][5]  = "Soldado"; 				RangosSkins[LCN][5][0] 	= 124; 	RangosSkins[LCN][5][1] 	= 141;									FaccionData[LCN][Paga][5] = 370;
	FaccionesRangos[LCN][6]  = "Asociado"; 				RangosSkins[LCN][6][0] 	= 127; 	RangosSkins[LCN][6][1] 	= 141;									FaccionData[LCN][Paga][6] = 370;

// YAKUZA ID - 5
	format(FaccionData[YKZ][NameFaccion], MAX_FACCION_NAME, "Yakuza");
	FaccionData[YKZ][Extorsion] 		= 0;
	FaccionData[YKZ][AlmacenX][0] 		= -2178.54296875;
	FaccionData[YKZ][AlmacenY][0] 		= 715.53643798828;
	FaccionData[YKZ][AlmacenZ][0] 		= 53.890625;
	FaccionData[YKZ][AlmacenX][1] 		= 0;
	FaccionData[YKZ][AlmacenY][1] 		= 0;
	FaccionData[YKZ][AlmacenZ][1] 		= 0;
	FaccionData[YKZ][Spawn_X][0] 		= -2279.9204;
	FaccionData[YKZ][Spawn_Y][0] 		= 2300.8733;
	FaccionData[YKZ][Spawn_Z][0] 		= 4.9637;
	FaccionData[YKZ][Spawn_ZZ][0] 		= 272.4753;
	FaccionData[YKZ][PickupOut_X] 		= -2281.6987;
	FaccionData[YKZ][PickupOut_Y] 		= 2288.2117;
	FaccionData[YKZ][PickupOut_Z] 		= 4.9706;
	FaccionData[YKZ][PickupOut_ZZ] 		= 265.5353;
	FaccionData[YKZ][PickupIn_X] 		= 2317.8542;
	FaccionData[YKZ][PickupIn_Y] 		= -1026.7068;
	FaccionData[YKZ][PickupIn_Z] 		= 1050.2178;
	FaccionData[YKZ][PickupIn_ZZ] 		= 0.7340;
	FaccionData[YKZ][InteriorFaccion] 	= 9;
	FaccionData[YKZ][PickupidOutF]		= CreatePickup	(1254, 	1, 	FaccionData[YKZ][PickupOut_X], FaccionData[YKZ][PickupOut_Y], FaccionData[YKZ][PickupOut_Z],	 	WORLD_NORMAL);
	FaccionData[YKZ][PickupidInF] 		= CreatePickup	(1254, 	1, 	FaccionData[YKZ][PickupIn_X], FaccionData[YKZ][PickupIn_Y], FaccionData[YKZ][PickupIn_Z],	 	WORLD_DEFAULT_INTERIOR);
	FaccionData[YKZ][PrecioFaccion] 	= 0;
	FaccionData[YKZ][Lock] 				= 0;
	FaccionData[YKZ][World] 			= WORLD_DEFAULT_INTERIOR;
	FaccionData[YKZ][Family] 			= true;
	FaccionData[YKZ][Radio] 			= false;

	FaccionesRangos[YKZ][0]  = "Oyabun"; 			RangosSkins[YKZ][0][0] 	= 208; 	RangosSkins[YKZ][0][1] 	= 228;	 RangosSkins[YKZ][0][2] 	= 263; 	FaccionData[YKZ][Paga][0] = 500;
	FaccionesRangos[YKZ][1]  = "Wakashu"; 			RangosSkins[YKZ][1][0] 	= 186;  RangosSkins[YKZ][1][1] 	= 263;										FaccionData[YKZ][Paga][1] = 480;
	FaccionesRangos[YKZ][2]  = "Wakagashira"; 		RangosSkins[YKZ][2][0] 	= 120;  RangosSkins[YKZ][2][1] 	= 224;										FaccionData[YKZ][Paga][2] = 450;
	FaccionesRangos[YKZ][3]  = "Shateigashira"; 	RangosSkins[YKZ][3][0] 	= 123; 	RangosSkins[YKZ][3][1]	= 169; 										FaccionData[YKZ][Paga][3] = 420;
	FaccionesRangos[YKZ][4]  = "Kyodai"; 			RangosSkins[YKZ][4][0] 	= 122; 	RangosSkins[YKZ][4][1] 	= 169;										FaccionData[YKZ][Paga][4] = 400;
	FaccionesRangos[YKZ][5]  = "Shatei"; 			RangosSkins[YKZ][5][0] 	= 121; 	RangosSkins[YKZ][5][1] 	= 169;										FaccionData[YKZ][Paga][5] = 370;

// TAXIS ID - 6
	format(FaccionData[TAXI][NameFaccion], MAX_FACCION_NAME, "Tax\xa2stas");
	FaccionData[TAXI][Extorsion] 		= 0;
	FaccionData[TAXI][Spawn_X][0]		= 1754.0756;
	FaccionData[TAXI][Spawn_Y][0]		= -1912.3319;
	FaccionData[TAXI][Spawn_Z][0]		= 13.5679;
	FaccionData[TAXI][Spawn_ZZ][0] 		= 269.3793;
	FaccionData[TAXI][Spawn_X][1]		= -1973.7559;
	FaccionData[TAXI][Spawn_Y][1]		= 162.0670;
	FaccionData[TAXI][Spawn_Z][1]		= 27.6940;
	FaccionData[TAXI][Spawn_ZZ][1] 		= 180.3988;
	FaccionData[TAXI][PickupOut_X] 		= 1743.0270;
	FaccionData[TAXI][PickupOut_Y] 		= -1864.1876;
	FaccionData[TAXI][PickupOut_Z] 		= 13.5742;
	FaccionData[TAXI][PickupOut_ZZ] 	= 1.1633;
	FaccionData[TAXI][PickupIn_X] 		= 2215.1392;
	FaccionData[TAXI][PickupIn_Y] 		= -1150.6198;
	FaccionData[TAXI][PickupIn_Z] 		= 1025.7969;
	FaccionData[TAXI][PickupIn_ZZ] 		= 268.8355;
	FaccionData[TAXI][InteriorFaccion] 	= 15;
	FaccionData[TAXI][PickupidOutF]		= CreatePickup	(1239, 	1, 	FaccionData[TAXI][PickupOut_X], FaccionData[TAXI][PickupOut_Y], FaccionData[TAXI][PickupOut_Z],	 	WORLD_NORMAL);
	FaccionData[TAXI][PickupidInF] 		= CreatePickup	(1239, 	1, 	FaccionData[TAXI][PickupIn_X], FaccionData[TAXI][PickupIn_Y], FaccionData[TAXI][PickupIn_Z],	 	WORLD_DEFAULT_INTERIOR);
	FaccionData[TAXI][PrecioFaccion] 	= 0;
	FaccionData[TAXI][Lock] 			= 0;
	FaccionData[TAXI][World] 			= WORLD_DEFAULT_INTERIOR;
	FaccionData[TAXI][Family] 			= false;
	FaccionData[TAXI][Radio] 			= true;

	FaccionesRangos[TAXI][0]  = "Director"; 			RangosSkins[TAXI][0][0] 	= 61;	RangosSkins[TAXI][0][1] 	= 69;  	FaccionData[TAXI][Paga][0] = 700;
	FaccionesRangos[TAXI][1]  = "Sub Director"; 		RangosSkins[TAXI][1][0] 	= 240;	RangosSkins[TAXI][1][1] 	= 69;  	FaccionData[TAXI][Paga][1] = 650;
	FaccionesRangos[TAXI][2]  = "Instructor";	 		RangosSkins[TAXI][2][0] 	= 240;	RangosSkins[TAXI][2][1] 	= 69;  	FaccionData[TAXI][Paga][2] = 600;
	FaccionesRangos[TAXI][3]  = "Conductor de Taxí";	RangosSkins[TAXI][3][0] 	= 255; 	RangosSkins[TAXI][3][1] 	= 69;  	FaccionData[TAXI][Paga][3] = 550;
	FaccionesRangos[TAXI][4]  = "Conductor de Autobús"; RangosSkins[TAXI][4][0] 	= 255; 	RangosSkins[TAXI][4][1] 	= 69;  	FaccionData[TAXI][Paga][4] = 500;
	FaccionesRangos[TAXI][5]  = "Conductor de Tren"; 	RangosSkins[TAXI][5][0] 	= 253; 	RangosSkins[TAXI][5][1] 	= 69;  	FaccionData[TAXI][Paga][5] = 450;
	FaccionesRangos[TAXI][6]  = "Principiante";		 	RangosSkins[TAXI][6][0] 	= 36; 	RangosSkins[TAXI][6][1] 	= 69;  	FaccionData[TAXI][Paga][6] = 350;

// SFPD ID - 7
	format(FaccionData[SFPD][NameFaccion], MAX_FACCION_NAME, "SFPD");
	FaccionData[SFPD][Extorsion] 		= 0;
	FaccionData[SFPD][Spawn_X][0]		= -1605.7463;
	FaccionData[SFPD][Spawn_Y][0]		= 676.1434;
	FaccionData[SFPD][Spawn_Z][0]		= -5.2422;
	FaccionData[SFPD][Spawn_ZZ][0] 		= 359.9802;
	FaccionData[SFPD][PickupOut_X] 		= -1605.4266;
	FaccionData[SFPD][PickupOut_Y] 		= 711.5508;
	FaccionData[SFPD][PickupOut_Z] 		= 13.8672;
	FaccionData[SFPD][PickupOut_ZZ] 		= 0.3981;
	FaccionData[SFPD][PickupIn_X] 		= 246.2979;
	FaccionData[SFPD][PickupIn_Y] 		= 108.0498;
	FaccionData[SFPD][PickupIn_Z] 		= 1003.2188;
	FaccionData[SFPD][PickupIn_ZZ] 		= 358.3208;
	FaccionData[SFPD][InteriorFaccion] 	= 10;
	FaccionData[SFPD][PickupidOutF]		= CreatePickup	(1247, 	1, 	FaccionData[SFPD][PickupOut_X], FaccionData[SFPD][PickupOut_Y], FaccionData[SFPD][PickupOut_Z],	 	WORLD_NORMAL);
	FaccionData[SFPD][PickupidInF] 		= CreatePickup	(1247, 	1, 	FaccionData[SFPD][PickupIn_X], FaccionData[SFPD][PickupIn_Y], FaccionData[SFPD][PickupIn_Z],	 	WORLD_DEFAULT_INTERIOR);
	FaccionData[SFPD][PrecioFaccion] 	= 0;
	FaccionData[SFPD][Lock] 				= 0;
	FaccionData[SFPD][World] 			= WORLD_DEFAULT_INTERIOR;
	FaccionData[SFPD][Family] 			= false;
	FaccionData[SFPD][Radio] 			= true;

	FaccionesRangos[SFPD][0]  = "Comisario";	RangosSkins[SFPD][0][0] 	= 283; 	RangosSkins[SFPD][0][1] 	= 285; 	RangosSkins[SFPD][0][2] 	= 284;   RangosSkins[SFPD][0][3] 	= 150; 	RangosSkins[SFPD][0][4] 	= 101; 	RangosSkins[SFPD][0][5] 	= 250; 	RangosSkins[SFPD][0][6] 	= 60; 	RangosSkins[SFPD][0][7] 	= 170; 	RangosSkins[SFPD][0][8] 	= 184; 	RangosSkins[SFPD][0][9] 	= 148; 	RangosSkins[SFPD][0][10] 	= 191;		FaccionData[SFPD][Paga][0] = 600;
	FaccionesRangos[SFPD][1]  = "Sub-Comisario";RangosSkins[SFPD][1][0] 	= 282;  RangosSkins[SFPD][1][1] 	= 285; 	RangosSkins[SFPD][1][2] 	= 284;	RangosSkins[SFPD][1][3] 	= 150; 	RangosSkins[SFPD][1][4] 	= 101; 	RangosSkins[SFPD][1][5] 	= 250; 	RangosSkins[SFPD][1][6] 	= 60; 	RangosSkins[SFPD][1][7] 	= 170; 	RangosSkins[SFPD][1][8] 	= 184;	RangosSkins[SFPD][1][9] 	= 148; 	RangosSkins[SFPD][1][10] 	= 191;	 	FaccionData[SFPD][Paga][1] = 550;
	FaccionesRangos[SFPD][2]  = "Inspector"; 	RangosSkins[SFPD][2][0] 	= 266; 	RangosSkins[SFPD][2][1]		= 285; 	RangosSkins[SFPD][2][2] 	= 284;   RangosSkins[SFPD][2][3] 	= 150; 	RangosSkins[SFPD][2][4] 	= 101; 	RangosSkins[SFPD][2][5] 	= 250; 	RangosSkins[SFPD][2][6] 	= 60; 	RangosSkins[SFPD][2][7] 	= 170; 	RangosSkins[SFPD][2][8] 	= 184;  RangosSkins[SFPD][2][9] 	= 148; 	RangosSkins[SFPD][2][10] 	= 191;	 	FaccionData[SFPD][Paga][2] = 500;
	FaccionesRangos[SFPD][3]  = "Sargento"; 	RangosSkins[SFPD][3][0] 	= 265; 	RangosSkins[SFPD][3][1] 	= 285; 	RangosSkins[SFPD][3][2] 	= 284;	RangosSkins[SFPD][3][3] 	= 150; 	RangosSkins[SFPD][3][4] 	= 101; 	RangosSkins[SFPD][3][5] 	= 250; 	RangosSkins[SFPD][3][6] 	= 60; 	RangosSkins[SFPD][3][7] 	= 170; 	RangosSkins[SFPD][3][8] 	= 184;	RangosSkins[SFPD][3][9] 	= 148; 	RangosSkins[SFPD][3][10] 	= 191;	 	FaccionData[SFPD][Paga][3] = 500;
	FaccionesRangos[SFPD][4]  = "Cabo";			RangosSkins[SFPD][4][0] 	= 267; 	RangosSkins[SFPD][4][1] 	= 285; 	RangosSkins[SFPD][4][2] 	= 284; 	RangosSkins[SFPD][4][3] 	= 150; 	RangosSkins[SFPD][4][4] 	= 101; 	RangosSkins[SFPD][4][5] 	= 250; 	RangosSkins[SFPD][4][6] 	= 60; 	RangosSkins[SFPD][4][7] 	= 170; 	RangosSkins[SFPD][4][8] 	= 184; 	RangosSkins[SFPD][4][9] 	= 148; 	RangosSkins[SFPD][4][10] 	= 191;	 	FaccionData[SFPD][Paga][4] = 400;
	FaccionesRangos[SFPD][5]  = "Oficial"; 		RangosSkins[SFPD][5][0] 	= 267; 	RangosSkins[SFPD][5][1] 	= 285; 	RangosSkins[SFPD][5][2] 	= 284;	RangosSkins[SFPD][5][3] 	= 150; 	RangosSkins[SFPD][5][4] 	= 101; 	RangosSkins[SFPD][5][5] 	= 250; 	RangosSkins[SFPD][5][6] 	= 60; 	RangosSkins[SFPD][5][7] 	= 170; 	RangosSkins[SFPD][5][8] 	= 184;  RangosSkins[SFPD][5][9] 	= 148; 	RangosSkins[SFPD][5][10] 	= 191;	 	FaccionData[SFPD][Paga][5] = 400;
	FaccionesRangos[SFPD][6]  = "Cadete";		RangosSkins[SFPD][6][0] 	= 71; 	RangosSkins[SFPD][6][1] 	= 285; 	RangosSkins[SFPD][6][2] 	= 284;	RangosSkins[SFPD][6][3] 	= 150; 	RangosSkins[SFPD][6][4] 	= 101; 	RangosSkins[SFPD][6][5] 	= 250; 	RangosSkins[SFPD][6][6] 	= 60; 	RangosSkins[SFPD][6][7] 	= 170; 	RangosSkins[SFPD][6][8] 	= 184; 	RangosSkins[SFPD][6][9] 	= 148; 	RangosSkins[SFPD][6][10] 	= 191;	 	FaccionData[SFPD][Paga][6] = 350;
	
// NFS ID - 8
	format(FaccionData[NFS][NameFaccion], MAX_FACCION_NAME, "NFS");
	FaccionData[NFS][Extorsion] 		= 0;
	FaccionData[NFS][Spawn_X][0]		= 561.3279;
	FaccionData[NFS][Spawn_Y][0]		= -1289.2629;
	FaccionData[NFS][Spawn_Z][0]		= 17.2482;
	FaccionData[NFS][Spawn_ZZ][0]		= 24.4206;
	FaccionData[NFS][Spawn_X][1]		= -1954.0232;
	FaccionData[NFS][Spawn_Y][1]		= 301.1528;
	FaccionData[NFS][Spawn_Z][1]		= 35.4688;
	FaccionData[NFS][Spawn_ZZ][1]		= 131.0429;
	FaccionData[NFS][PickupOut_X] 		= 535.2281;
	FaccionData[NFS][PickupOut_Y] 		= -1293.8947;
	FaccionData[NFS][PickupOut_Z] 		= 17.2422;
	FaccionData[NFS][PickupOut_ZZ] 		= 4.3904;
	FaccionData[NFS][PickupIn_X] 		= 1494.3948;
	FaccionData[NFS][PickupIn_Y] 		= 1309.5096;
	FaccionData[NFS][PickupIn_Z] 		= 1093.2820;
	FaccionData[NFS][PickupIn_ZZ] 		= 175.4568;
	FaccionData[NFS][InteriorFaccion] 	= 3;
	FaccionData[NFS][PickupidOutF]		= CreatePickup	(1239, 	1, 	FaccionData[NFS][PickupOut_X], FaccionData[NFS][PickupOut_Y], FaccionData[NFS][PickupOut_Z],	 	WORLD_NORMAL);
	FaccionData[NFS][PickupidInF] 		= CreatePickup	(1239, 	1, 	FaccionData[NFS][PickupIn_X], FaccionData[NFS][PickupIn_Y], FaccionData[NFS][PickupIn_Z],	 	WORLD_DEFAULT_INTERIOR);
	FaccionData[NFS][PrecioFaccion] 	= 0;
	FaccionData[NFS][Lock] 				= 0;
	FaccionData[NFS][World] 			= WORLD_DEFAULT_INTERIOR;
	FaccionData[NFS][Family] 			= true;
	FaccionData[NFS][Radio] 			= false;

	FaccionesRangos[NFS][0]  = "Jefe"; 			RangosSkins[NFS][0][0] 	= 185; 	RangosSkins[NFS][0][1] 	= 29; 	 	RangosSkins[NFS][0][2] 	= 170; 	 	RangosSkins[NFS][0][3] 	= 192; 	FaccionData[NFS][Paga][0] = 350;
	FaccionesRangos[NFS][1]  = "Encargado"; 	RangosSkins[NFS][1][0] 	= 185;  RangosSkins[NFS][1][1]	= 29; 	 	RangosSkins[NFS][1][2] 	= 170; 	 	RangosSkins[NFS][1][3] 	= 192;	FaccionData[NFS][Paga][1] = 340;
	FaccionesRangos[NFS][2]  = "Vendedor"; 		RangosSkins[NFS][2][0] 	= 185; 	RangosSkins[NFS][2][1]	= 29; 	 	RangosSkins[NFS][2][2] 	= 170; 	 	RangosSkins[NFS][2][3] 	= 192;  FaccionData[NFS][Paga][2] = 320;
	FaccionesRangos[NFS][3]  = "Conductor"; 	RangosSkins[NFS][3][0] 	= 185; 	RangosSkins[NFS][3][1] 	= 29; 	 	RangosSkins[NFS][3][2] 	= 170; 	 	RangosSkins[NFS][3][3] 	= 192;	FaccionData[NFS][Paga][3] = 320;

// SFMD ID - 9
	format(FaccionData[SFMD][NameFaccion], MAX_FACCION_NAME, "SFMD");
	FaccionData[SFMD][Extorsion] 		= 0;
	FaccionData[SFMD][Spawn_X][0]		= -2682.5623;
	FaccionData[SFMD][Spawn_Y][0]		= 637.0119;
	FaccionData[SFMD][Spawn_Z][0]		= 14.4531;
	FaccionData[SFMD][Spawn_ZZ][0]		= 179.4986;
	FaccionData[SFMD][Spawn_X][1]		= -2060.1667;
	FaccionData[SFMD][Spawn_Y][1]		= 95.2241;
	FaccionData[SFMD][Spawn_Z][1]		= 28.3906;
	FaccionData[SFMD][Spawn_ZZ][1]		= 176.9378;
	FaccionData[SFMD][PickupOut_X] 		= -2655.1401;
	FaccionData[SFMD][PickupOut_Y] 		= 640.1343;
	FaccionData[SFMD][PickupOut_Z] 		= 14.4545;
	FaccionData[SFMD][PickupOut_ZZ] 	= 181.8197;
	FaccionData[SFMD][PickupIn_X] 		= 1673.9072;
	FaccionData[SFMD][PickupIn_Y] 		= 731.5582;
	FaccionData[SFMD][PickupIn_Z] 		= 10.8768;
	FaccionData[SFMD][PickupIn_ZZ] 		= 180;
	FaccionData[SFMD][InteriorFaccion] 	= 11;
	FaccionData[SFMD][PickupidOutF]		= CreatePickup	(1239, 	1, 	FaccionData[SFMD][PickupOut_X], FaccionData[SFMD][PickupOut_Y], FaccionData[SFMD][PickupOut_Z],	 	WORLD_NORMAL);
	FaccionData[SFMD][PickupidInF] 		= CreatePickup	(1239, 	1, 	FaccionData[SFMD][PickupIn_X], FaccionData[SFMD][PickupIn_Y], FaccionData[SFMD][PickupIn_Z],	 	WORLD_DEFAULT_INTERIOR);
	FaccionData[SFMD][PrecioFaccion] 	= 0;
	FaccionData[SFMD][Lock] 			= 0;
	FaccionData[SFMD][World] 			= WORLD_DEFAULT_INTERIOR;
	FaccionData[SFMD][Family] 			= false;
	FaccionData[SFMD][Radio] 			= true;

	FaccionesRangos[SFMD][0]  = "Director"; 		RangosSkins[SFMD][0][0] 	= 70; 	RangosSkins[SFMD][0][1] = 150; 	RangosSkins[SFMD][0][2] = 277; 	RangosSkins[SFMD][0][3] = 278; 	RangosSkins[SFMD][0][4]	= 279;		FaccionData[SFMD][Paga][0] = 700;
	FaccionesRangos[SFMD][1]  = "Sub Director"; 	RangosSkins[SFMD][1][0] 	= 223;  RangosSkins[SFMD][1][1] = 191;  RangosSkins[SFMD][1][2] = 277; 	RangosSkins[SFMD][1][3] = 278; 	RangosSkins[SFMD][1][4]	= 279;	 	FaccionData[SFMD][Paga][1] = 600;
	FaccionesRangos[SFMD][2]  = "Jefe de Bomberos";	RangosSkins[SFMD][2][0] 	= 279; 	RangosSkins[SFMD][2][1]	= 191;																										FaccionData[SFMD][Paga][2] = 650;
	FaccionesRangos[SFMD][3]  = "Doctor"; 			RangosSkins[SFMD][3][0] 	= 156; 	RangosSkins[SFMD][3][1]	= 191; 	RangosSkins[SFMD][3][2]	= 274; 	RangosSkins[SFMD][3][3]	= 275; 	RangosSkins[SFMD][3][4]	= 276;		FaccionData[SFMD][Paga][3] = 500;
	FaccionesRangos[SFMD][4]  = "Paramédico"; 		RangosSkins[SFMD][4][0] 	= 274; 	RangosSkins[SFMD][4][1] = 191; 	RangosSkins[SFMD][4][2]	= 274; 	RangosSkins[SFMD][4][3]	= 275; 	RangosSkins[SFMD][4][4]	= 276;	 	FaccionData[SFMD][Paga][4] = 450;
	FaccionesRangos[SFMD][5]  = "Bombero"; 			RangosSkins[SFMD][5][0] 	= 277; 	RangosSkins[SFMD][5][1] = 278; 	RangosSkins[SFMD][5][2]	= 191; 																		FaccionData[SFMD][Paga][5] = 550;
	FaccionesRangos[SFMD][6]  = "Apréndiz"; 		RangosSkins[SFMD][6][0] 	= 275; 	RangosSkins[SFMD][6][1] = 191; 		 																								FaccionData[SFMD][Paga][6] = 400;

// CNN ID - 10
	format(FaccionData[CNN][NameFaccion], MAX_FACCION_NAME, "CNN");
	FaccionData[CNN][Extorsion] 		= 0;
	FaccionData[CNN][Spawn_X][0] 		= 742.8419;
	FaccionData[CNN][Spawn_Y][0] 		= -1343.8962;
	FaccionData[CNN][Spawn_Z][0] 		= 13.5198;
	FaccionData[CNN][Spawn_ZZ][0] 		= 268.8462;
	FaccionData[CNN][PickupOut_X] 		= 647.8735;
	FaccionData[CNN][PickupOut_Y] 		= -1359.2740;
	FaccionData[CNN][PickupOut_Z] 		= 13.5826;
	FaccionData[CNN][PickupOut_ZZ] 		= 91.5791;
	FaccionData[CNN][PickupIn_X] 		= 2150.8496;
	FaccionData[CNN][PickupIn_Y] 		= 1602.8657;
	FaccionData[CNN][PickupIn_Z] 		= 1001.9693;
	FaccionData[CNN][PickupIn_ZZ] 		= 272.0121;
	FaccionData[CNN][InteriorFaccion]	= 1;
	FaccionData[CNN][PickupidOutF]		= CreatePickup	(1239, 	1, 	FaccionData[CNN][PickupOut_X], FaccionData[CNN][PickupOut_Y], FaccionData[CNN][PickupOut_Z],	 	WORLD_NORMAL);
	FaccionData[CNN][PickupidInF] 		= CreatePickup	(1239, 	1, 	FaccionData[CNN][PickupIn_X], FaccionData[CNN][PickupIn_Y], FaccionData[CNN][PickupIn_Z],	 	WORLD_DEFAULT_INTERIOR);
	FaccionData[CNN][PrecioFaccion] 	= 0;
	FaccionData[CNN][Lock] 				= 0;
	FaccionData[CNN][World] 			= WORLD_DEFAULT_INTERIOR;
	FaccionData[CNN][Family] 			= false;
	FaccionData[CNN][Radio] 			= true;

	FaccionesRangos[CNN][0]  = "Director"; 			RangosSkins[CNN][0][0] 	= 290; 	RangosSkins[CNN][0][1] 	= 40; 	RangosSkins[CNN][0][2] 	= 219; 	FaccionData[CNN][Paga][0] = 500;
	FaccionesRangos[CNN][1]  = "Sub Director";		RangosSkins[CNN][1][0] 	= 223;  RangosSkins[CNN][1][1]	= 40;	RangosSkins[CNN][1][2] 	= 219; 	FaccionData[CNN][Paga][1] = 450;
	FaccionesRangos[CNN][2]  = "Supervisor";		RangosSkins[CNN][2][0] 	= 223;  RangosSkins[CNN][2][1]	= 40;	RangosSkins[CNN][2][2] 	= 219; 	FaccionData[CNN][Paga][2] = 450;
	FaccionesRangos[CNN][3]  = "Cronísta";			RangosSkins[CNN][3][0] 	= 223;  RangosSkins[CNN][3][1]	= 40;	RangosSkins[CNN][3][2] 	= 219; 	FaccionData[CNN][Paga][3] = 400;
	FaccionesRangos[CNN][4]  = "Auxiliar"; 			RangosSkins[CNN][4][0] 	= 188; 	RangosSkins[CNN][4][1]	= 40; 	RangosSkins[CNN][4][2] 	= 219; 	FaccionData[CNN][Paga][4] = 350;


// DETECTIVES ID - 11
	format(FaccionData[ADP][NameFaccion], MAX_FACCION_NAME, "Detectives");
	FaccionData[ADP][Extorsion] 		= 0;
	FaccionData[ADP][Spawn_X][0] 		= -2081.1680;
	FaccionData[ADP][Spawn_Y][0] 		= 1418.5831;
	FaccionData[ADP][Spawn_Z][0] 		= 7.1007;
	FaccionData[ADP][Spawn_ZZ][0]		= 177.9662;
	FaccionData[ADP][PickupOut_X] 		= -2076.1250;
	FaccionData[ADP][PickupOut_Y] 		= 1421.0328;
	FaccionData[ADP][PickupOut_Z] 		= 7.1295;
	FaccionData[ADP][PickupOut_ZZ] 		= 178.4612;
	FaccionData[ADP][PickupIn_X] 		= 2602.4689941406;
	FaccionData[ADP][PickupIn_Y] 		= 1352.4586181641;
	FaccionData[ADP][PickupIn_Z] 		= 78.476387023926;
	FaccionData[ADP][PickupIn_ZZ] 		= 171.9440;
	FaccionData[ADP][InteriorFaccion]	= 9;
	FaccionData[ADP][PickupidOutF]		= CreatePickup	(1239, 	1, 	FaccionData[ADP][PickupOut_X], FaccionData[ADP][PickupOut_Y], FaccionData[ADP][PickupOut_Z],	 	WORLD_NORMAL);
	FaccionData[ADP][PickupidInF] 		= CreatePickup	(1239, 	1, 	FaccionData[ADP][PickupIn_X], FaccionData[ADP][PickupIn_Y], FaccionData[ADP][PickupIn_Z],	 	WORLD_DEFAULT_INTERIOR);
	FaccionData[ADP][PrecioFaccion] 	= 0;
	FaccionData[ADP][Lock] 			= 0;
	FaccionData[ADP][World] 			= WORLD_DEFAULT_INTERIOR;
	FaccionData[ADP][Family] 			= false;
	FaccionData[ADP][Radio] 			= true;

	FaccionesRangos[ADP][0]  = "Director"; 				RangosSkins[ADP][0][0] 	= 187; 	RangosSkins[ADP][0][1]  = 91; 									FaccionData[ADP][Paga][0] = 450;
	FaccionesRangos[ADP][1]  = "Sub Director";			RangosSkins[ADP][1][0] 	= 166;  RangosSkins[ADP][1][1]	= 165;  RangosSkins[ADP][1][2]	= 91;	FaccionData[ADP][Paga][1] = 430;
	FaccionesRangos[ADP][2]  = "Jefe de Detectives"; 	RangosSkins[ADP][2][0] 	= 166; 	RangosSkins[ADP][2][1]	= 165; 	RangosSkins[ADP][2][2]	= 93; 	FaccionData[ADP][Paga][2] = 400;
	FaccionesRangos[ADP][3]  = "Jefe de Guardaespaldas";RangosSkins[ADP][3][0] 	= 164; 	RangosSkins[ADP][3][1]  = 163; 	RangosSkins[ADP][3][2]	= 93;	FaccionData[ADP][Paga][3] = 370;
	FaccionesRangos[ADP][4]  = "Detective";				RangosSkins[ADP][4][0] 	= 164; 	RangosSkins[ADP][4][1]  = 163; 	RangosSkins[ADP][4][2]	= 93;	FaccionData[ADP][Paga][4] = 350;
	FaccionesRangos[ADP][5]  = "Guardaespaldas"; 		RangosSkins[ADP][5][0] = 164; 	RangosSkins[ADP][5][1] = 163; 	RangosSkins[ADP][5][2]	= 93;	FaccionData[ADP][Paga][5] = 350;

// CAMIONEROS ID - 12
	format(FaccionData[CAMIONEROS][NameFaccion], MAX_FACCION_NAME, "Camioneros");
	FaccionData[CAMIONEROS][Extorsion] 		= 0;
	FaccionData[CAMIONEROS][AlmacenX][0] 	= -557.5335;
	FaccionData[CAMIONEROS][AlmacenY][0] 	= -539.6166;
	FaccionData[CAMIONEROS][AlmacenZ][0] 	= 25.5234;
	FaccionData[CAMIONEROS][AlmacenX][1] 	= 0;
	FaccionData[CAMIONEROS][AlmacenY][1] 	= 0;
	FaccionData[CAMIONEROS][AlmacenZ][1] 	= 0;
	FaccionData[CAMIONEROS][Spawn_X][0]		= -481.5168;
	FaccionData[CAMIONEROS][Spawn_Y][0] 	= -525.3063;
	FaccionData[CAMIONEROS][Spawn_Z][0]		= 25.5178;
	FaccionData[CAMIONEROS][Spawn_ZZ][0] 		= 357.6488;
	FaccionData[CAMIONEROS][PickupOut_X] 	= -516.1653;
	FaccionData[CAMIONEROS][PickupOut_Y] 	= -506.0323;
	FaccionData[CAMIONEROS][PickupOut_Z] 	= 25.5234;
	FaccionData[CAMIONEROS][PickupOut_ZZ] 	= 1.8267;
	FaccionData[CAMIONEROS][PickupIn_X] 	= 948.5826;
	FaccionData[CAMIONEROS][PickupIn_Y] 	= 2177.1912;
	FaccionData[CAMIONEROS][PickupIn_Z] 	= 1011.0234;
	FaccionData[CAMIONEROS][PickupIn_ZZ] 	= 173.6383;
	FaccionData[CAMIONEROS][InteriorFaccion]= 1;
	FaccionData[CAMIONEROS][PickupidOutF]		= CreatePickup	(1239, 	1, 	FaccionData[CAMIONEROS][PickupOut_X], FaccionData[CAMIONEROS][PickupOut_Y], FaccionData[CAMIONEROS][PickupOut_Z],	 	WORLD_NORMAL);
	FaccionData[CAMIONEROS][PickupidInF] 		= CreatePickup	(1239, 	1, 	FaccionData[CAMIONEROS][PickupIn_X], FaccionData[CAMIONEROS][PickupIn_Y], FaccionData[CAMIONEROS][PickupIn_Z],	 	WORLD_DEFAULT_INTERIOR);
	FaccionData[CAMIONEROS][PrecioFaccion] 	= 0;
	FaccionData[CAMIONEROS][Lock] 			= 0;
	FaccionData[CAMIONEROS][World] 			= WORLD_DEFAULT_INTERIOR;
	FaccionData[CAMIONEROS][Family] 		= true;
	FaccionData[CAMIONEROS][Radio] 			= false;

	FaccionesRangos[CAMIONEROS][0]  = "Empresario"; 		RangosSkins[CAMIONEROS][0][0] = 187; 											FaccionData[CAMIONEROS][Paga][0] = 450;
	FaccionesRangos[CAMIONEROS][1]  = "Encargado";			RangosSkins[CAMIONEROS][1][0] = 182;											FaccionData[CAMIONEROS][Paga][1] = 400;
	FaccionesRangos[CAMIONEROS][2]  = "Camionero Experto"; 	RangosSkins[CAMIONEROS][2][0] = 234; 	RangosSkins[CAMIONEROS][2][1] = 15; 		FaccionData[CAMIONEROS][Paga][2] = 370;
	FaccionesRangos[CAMIONEROS][3]  = "Camionero Novato"; 	RangosSkins[CAMIONEROS][3][0] = 206; 	RangosSkins[CAMIONEROS][3][1] = 15; 	FaccionData[CAMIONEROS][Paga][3] = 350;
	FaccionesRangos[CAMIONEROS][4]  = "Marinero"; 			RangosSkins[CAMIONEROS][4][0] = 95; 	RangosSkins[CAMIONEROS][4][1] = 15; 	FaccionData[CAMIONEROS][Paga][4] = 350;
	FaccionesRangos[CAMIONEROS][5]  = "Ayudante"; 			RangosSkins[CAMIONEROS][5][0] = 202; 	RangosSkins[CAMIONEROS][5][1] = 15; 	FaccionData[CAMIONEROS][Paga][5] = 300;

// TALLER_SF ID - 13
	format(FaccionData[TALLER_SF][NameFaccion], MAX_FACCION_NAME, "Taller SF");
	FaccionData[TALLER_SF][Extorsion] 		= 0;
	FaccionData[TALLER_SF][Spawn_X][0] 		= -2886.9814;
	FaccionData[TALLER_SF][Spawn_Y][0] 		= 491.8529;
	FaccionData[TALLER_SF][Spawn_Z][0] 		= 4.9066;
	FaccionData[TALLER_SF][Spawn_ZZ][0]		= 175.1927;
	FaccionData[TALLER_SF][PickupOut_X] 	= -2880.8650;
	FaccionData[TALLER_SF][PickupOut_Y] 	= 493.2147;
	FaccionData[TALLER_SF][PickupOut_Z] 	= 4.9066;
	FaccionData[TALLER_SF][PickupOut_ZZ] 	= 179.5445;
	FaccionData[TALLER_SF][PickupIn_X] 	= 627.0047;
	FaccionData[TALLER_SF][PickupIn_Y] 	= -11.8298;
	FaccionData[TALLER_SF][PickupIn_Z] 	= 1000.9219;
	FaccionData[TALLER_SF][PickupIn_ZZ] 	= 80.4997;
	FaccionData[TALLER_SF][InteriorFaccion]= 1;
	FaccionData[TALLER_SF][PickupidOutF]		= CreatePickup	(1239, 	1, 	FaccionData[TALLER_SF][PickupOut_X], FaccionData[TALLER_SF][PickupOut_Y], FaccionData[TALLER_SF][PickupOut_Z],	 	WORLD_NORMAL);
	FaccionData[TALLER_SF][PickupidInF] 		= CreatePickup	(1239, 	1, 	FaccionData[TALLER_SF][PickupIn_X], FaccionData[TALLER_SF][PickupIn_Y], FaccionData[TALLER_SF][PickupIn_Z],	 	WORLD_DEFAULT_INTERIOR);
	FaccionData[TALLER_SF][PrecioFaccion] 	= 0;
	FaccionData[TALLER_SF][Lock] 			= 0;
	FaccionData[TALLER_SF][World] 			= WORLD_DEFAULT_INTERIOR;
	FaccionData[TALLER_SF][Family] 		= false;
	FaccionData[TALLER_SF][Radio] 			= true;

	FaccionesRangos[TALLER_SF][0]  = "Empresario"; 			RangosSkins[TALLER_SF][0][0] 	= 42;	RangosSkins[TALLER_SF][0][1]	= 55; 																					FaccionData[TALLER_SF][Paga][0] = 460;
	FaccionesRangos[TALLER_SF][1]  = "Encargado";			RangosSkins[TALLER_SF][1][0] 	= 268;	RangosSkins[TALLER_SF][1][1]	= 55;	RangosSkins[TALLER_SF][1][2] 	= 58; 											FaccionData[TALLER_SF][Paga][1] = 430;
	FaccionesRangos[TALLER_SF][2]  = "Maquinista"; 			RangosSkins[TALLER_SF][2][0] 	= 16; 	RangosSkins[TALLER_SF][2][1] 	= 55;	RangosSkins[TALLER_SF][2][2] 	= 8;	RangosSkins[TALLER_SF][2][3]	= 55; 	FaccionData[TALLER_SF][Paga][2] = 400;
	FaccionesRangos[TALLER_SF][3]  = "Mecánico"; 			RangosSkins[TALLER_SF][3][0] 	= 50; 	RangosSkins[TALLER_SF][3][1] 	= 55;	RangosSkins[TALLER_SF][3][2] 	= 8;											FaccionData[TALLER_SF][Paga][3] = 370;
	FaccionesRangos[TALLER_SF][4]  = "Mecánico Novato"; 	RangosSkins[TALLER_SF][4][0] 	= 50; 	RangosSkins[TALLER_SF][4][1] 	= 55; 	RangosSkins[TALLER_SF][4][2] 	= 8;										 	FaccionData[TALLER_SF][Paga][4] = 350;

// LSPD ID - 14
	format(FaccionData[LSPD][NameFaccion], MAX_FACCION_NAME, "LSPD");
	FaccionData[LSPD][Extorsion] 		= 0;
	FaccionData[LSPD][Spawn_X][0]		= 1568.3663;
	FaccionData[LSPD][Spawn_Y][0]		= -1692.7303;
	FaccionData[LSPD][Spawn_Z][0]		= 5.8906;
	FaccionData[LSPD][Spawn_ZZ][0] 		= 179.8354;
	FaccionData[LSPD][PickupOut_X] 		= 1555.3457;
	FaccionData[LSPD][PickupOut_Y] 		= -1675.6763;
	FaccionData[LSPD][PickupOut_Z] 		= 16.1953;
	FaccionData[LSPD][PickupOut_ZZ] 	= 88.9913;
	FaccionData[LSPD][PickupIn_X] 		= 246.8211;
	FaccionData[LSPD][PickupIn_Y] 		= 62.4470;
	FaccionData[LSPD][PickupIn_Z] 		= 1003.6406;
	FaccionData[LSPD][PickupIn_ZZ] 		= 0.6504;
	FaccionData[LSPD][InteriorFaccion]	= 6;
	FaccionData[LSPD][PickupidOutF]		= CreatePickup	(1247, 	1, 	FaccionData[LSPD][PickupOut_X], FaccionData[LSPD][PickupOut_Y], FaccionData[LSPD][PickupOut_Z],	 	WORLD_NORMAL);
	FaccionData[LSPD][PickupidInF] 		= CreatePickup	(1247, 	1, 	FaccionData[LSPD][PickupIn_X], FaccionData[LSPD][PickupIn_Y], FaccionData[LSPD][PickupIn_Z],	 	WORLD_DEFAULT_INTERIOR);
	FaccionData[LSPD][PrecioFaccion] 	= 0;
	FaccionData[LSPD][Lock] 			= 0;
	FaccionData[LSPD][World] 			= WORLD_DEFAULT_INTERIOR;
	FaccionData[LSPD][Family] 			= false;
	FaccionData[LSPD][Radio] 			= true;

	FaccionesRangos[LSPD][0]  = "General";		RangosSkins[LSPD][0][0] 	= 283;	RangosSkins[LSPD][0][1]	= 150; 	RangosSkins[LSPD][0][2] 	= 101; 	RangosSkins[LSPD][0][3] 	= 250; 	RangosSkins[LSPD][0][4] 	= 60; 	RangosSkins[LSPD][0][5] 	= 170; 	RangosSkins[LSPD][0][6] 	= 184;  RangosSkins[LSPD][0][7] 	= 285; 	RangosSkins[LSPD][0][8] 	= 287;  	RangosSkins[LSPD][0][9] 	= 148;   	RangosSkins[LSPD][0][10] 	= 191; FaccionData[LSPD][Paga][0] = 600;
	FaccionesRangos[LSPD][1]  = "Coronel"; 		RangosSkins[LSPD][1][0] 	= 288;  RangosSkins[LSPD][1][1]	= 150; 	RangosSkins[LSPD][1][2] 	= 101; 	RangosSkins[LSPD][1][3] 	= 250; 	RangosSkins[LSPD][1][4] 	= 60; 	RangosSkins[LSPD][1][5] 	= 170; 	RangosSkins[LSPD][1][6] 	= 184;  RangosSkins[LSPD][1][7] 	= 285; 	RangosSkins[LSPD][1][8] 	= 287;  	RangosSkins[LSPD][1][9] 	= 148;   	RangosSkins[LSPD][1][10] 	= 191; FaccionData[LSPD][Paga][1] = 550;
	FaccionesRangos[LSPD][2]  = "Capitán";		RangosSkins[LSPD][2][0] 	= 282; 	RangosSkins[LSPD][2][1]	= 150; 	RangosSkins[LSPD][2][2] 	= 101; 	RangosSkins[LSPD][2][3] 	= 250; 	RangosSkins[LSPD][2][4] 	= 60; 	RangosSkins[LSPD][2][5] 	= 170; 	RangosSkins[LSPD][2][6] 	= 184;  RangosSkins[LSPD][2][7] 	= 285; 	RangosSkins[LSPD][2][8] 	= 287;  	RangosSkins[LSPD][2][9] 	= 148;   	RangosSkins[LSPD][2][10] 	= 191; FaccionData[LSPD][Paga][2] = 500;
	FaccionesRangos[LSPD][3]  = "Teniente";		RangosSkins[LSPD][3][0] 	= 281; 	RangosSkins[LSPD][3][1] = 150;	RangosSkins[LSPD][3][2] 	= 101; 	RangosSkins[LSPD][3][3] 	= 250; 	RangosSkins[LSPD][3][4] 	= 60; 	RangosSkins[LSPD][3][5] 	= 170; 	RangosSkins[LSPD][3][6] 	= 184;  RangosSkins[LSPD][3][7] 	= 285; 	RangosSkins[LSPD][3][8] 	= 287;  	RangosSkins[LSPD][3][9] 	= 148;   	RangosSkins[LSPD][3][10] 	= 191; FaccionData[LSPD][Paga][3] = 500;
	FaccionesRangos[LSPD][4]  = "Sargento";		RangosSkins[LSPD][4][0] 	= 281; 	RangosSkins[LSPD][4][1] = 150;	RangosSkins[LSPD][4][2] 	= 101; 	RangosSkins[LSPD][4][3] 	= 250; 	RangosSkins[LSPD][4][4] 	= 60; 	RangosSkins[LSPD][4][5] 	= 170; 	RangosSkins[LSPD][4][6] 	= 184;  RangosSkins[LSPD][4][7] 	= 285; 	RangosSkins[LSPD][4][8] 	= 287;  	RangosSkins[LSPD][4][9] 	= 148;   	RangosSkins[LSPD][4][10] 	= 191; FaccionData[LSPD][Paga][4] = 500;
	FaccionesRangos[LSPD][5]  = "Oficial";		RangosSkins[LSPD][5][0] 	= 280; 	RangosSkins[LSPD][5][1] = 150;	RangosSkins[LSPD][5][2] 	= 101; 	RangosSkins[LSPD][5][3] 	= 250; 	RangosSkins[LSPD][5][4] 	= 60; 	RangosSkins[LSPD][5][5] 	= 170; 	RangosSkins[LSPD][5][6] 	= 184;  RangosSkins[LSPD][5][7] 	= 285; 	RangosSkins[LSPD][5][8] 	= 287;  	RangosSkins[LSPD][5][9] 	= 148;   	RangosSkins[LSPD][5][10] 	= 191; FaccionData[LSPD][Paga][5] = 450;
	FaccionesRangos[LSPD][6]  = "Cabo";			RangosSkins[LSPD][6][0] 	= 280; 	RangosSkins[LSPD][6][1] = 150;	RangosSkins[LSPD][6][2] 	= 101; 	RangosSkins[LSPD][6][3] 	= 250; 	RangosSkins[LSPD][6][4] 	= 60; 	RangosSkins[LSPD][6][5] 	= 170; 	RangosSkins[LSPD][6][6] 	= 184; 	RangosSkins[LSPD][6][7] 	= 285; 	RangosSkins[LSPD][6][8] 	= 287;  	RangosSkins[LSPD][6][9] 	= 148;   	RangosSkins[LSPD][6][10] 	= 191; FaccionData[LSPD][Paga][6] = 400;
	FaccionesRangos[LSPD][7]  = "Raso";			RangosSkins[LSPD][7][0] 	= 71; 	RangosSkins[LSPD][7][1] = 150;	RangosSkins[LSPD][7][2] 	= 101; 	RangosSkins[LSPD][7][3] 	= 250; 	RangosSkins[LSPD][7][4] 	= 60; 	RangosSkins[LSPD][7][5] 	= 170; 	RangosSkins[LSPD][7][6] 	= 184;  RangosSkins[LSPD][7][7] 	= 285; 	RangosSkins[LSPD][7][8] 	= 287;  	RangosSkins[LSPD][7][9] 	= 148;   	RangosSkins[LSPD][7][10] 	= 191; FaccionData[LSPD][Paga][7] = 350;

// CONTRABANDISTAS ID - 15
	format(FaccionData[CONTRABANDISTAS][NameFaccion], MAX_FACCION_NAME, "Contrabandistas");
	FaccionData[CONTRABANDISTAS][Extorsion] 		= 0;
	FaccionData[CONTRABANDISTAS][AlmacenX][0] 		= 1893.3990;
	FaccionData[CONTRABANDISTAS][AlmacenY][0] 		= 1018.0084;
	FaccionData[CONTRABANDISTAS][AlmacenZ][0] 		= 31.8828;
	FaccionData[CONTRABANDISTAS][AlmacenWorld][0]	= WORLD_DEFAULT_INTERIOR;
	FaccionData[CONTRABANDISTAS][Spawn_X][0] 		= 724.5375;
	FaccionData[CONTRABANDISTAS][Spawn_Y][0] 		= -1475.2960;
	FaccionData[CONTRABANDISTAS][Spawn_Z][0] 		= 17.6891;
	FaccionData[CONTRABANDISTAS][Spawn_ZZ][0]		= 181.4021;
	FaccionData[CONTRABANDISTAS][PickupOut_X] 		= 725.6380;
	FaccionData[CONTRABANDISTAS][PickupOut_Y] 		= -1439.9681;
	FaccionData[CONTRABANDISTAS][PickupOut_Z] 		= 13.5318;
	FaccionData[CONTRABANDISTAS][PickupOut_ZZ] 	= 355.9068;
	FaccionData[CONTRABANDISTAS][PickupIn_X] 		= -2171.1570;
	FaccionData[CONTRABANDISTAS][PickupIn_Y] 		= 645.3072;
	FaccionData[CONTRABANDISTAS][PickupIn_Z] 		= 1057.5938;
	FaccionData[CONTRABANDISTAS][PickupIn_ZZ] 		= 269.4647;
	FaccionData[CONTRABANDISTAS][InteriorFaccion]	= 1;
	FaccionData[CONTRABANDISTAS][PickupidOutF]		= CreatePickup	(1212, 	1, 	FaccionData[CONTRABANDISTAS][PickupOut_X], FaccionData[CONTRABANDISTAS][PickupOut_Y], FaccionData[CONTRABANDISTAS][PickupOut_Z],	 	WORLD_NORMAL);
	FaccionData[CONTRABANDISTAS][PickupidInF] 		= CreatePickup	(1212, 	1, 	FaccionData[CONTRABANDISTAS][PickupIn_X], FaccionData[CONTRABANDISTAS][PickupIn_Y], FaccionData[CONTRABANDISTAS][PickupIn_Z],	 	WORLD_DEFAULT_INTERIOR);
	FaccionData[CONTRABANDISTAS][PrecioFaccion] 	= 0;
	FaccionData[CONTRABANDISTAS][Lock] 			= 0;
	FaccionData[CONTRABANDISTAS][World] 			= WORLD_DEFAULT_INTERIOR;
	FaccionData[CONTRABANDISTAS][Family] 			= true;
	FaccionData[CONTRABANDISTAS][Radio] 			= false;

	FaccionesRangos[CONTRABANDISTAS][0]  = "Narco";				RangosSkins[CONTRABANDISTAS][0][0] 	= 120; 	RangosSkins[CONTRABANDISTAS][0][1] = 141; RangosSkins[CONTRABANDISTAS][0][2]	= 169; FaccionData[CONTRABANDISTAS][Paga][0] = 410;
	FaccionesRangos[CONTRABANDISTAS][1]  = "Encargado"; 		RangosSkins[CONTRABANDISTAS][1][0] 	= 120;  RangosSkins[CONTRABANDISTAS][1][1] = 141; RangosSkins[CONTRABANDISTAS][1][2]	= 169; FaccionData[CONTRABANDISTAS][Paga][1] = 400;
	FaccionesRangos[CONTRABANDISTAS][2]  = "Contrabandista";	RangosSkins[CONTRABANDISTAS][2][0] 	= 118; 	RangosSkins[CONTRABANDISTAS][2][1] = 141; RangosSkins[CONTRABANDISTAS][2][2]	= 169; FaccionData[CONTRABANDISTAS][Paga][2] = 370;
	FaccionesRangos[CONTRABANDISTAS][3]  = "Comerciante";		RangosSkins[CONTRABANDISTAS][3][0] 	= 118; 	RangosSkins[CONTRABANDISTAS][3][1] = 141; RangosSkins[CONTRABANDISTAS][3][2]	= 169; FaccionData[CONTRABANDISTAS][Paga][3] = 370;
	FaccionesRangos[CONTRABANDISTAS][4]  = "Aliado";			RangosSkins[CONTRABANDISTAS][4][0] 	= 117; 	RangosSkins[CONTRABANDISTAS][4][1] = 141; RangosSkins[CONTRABANDISTAS][4][2]	= 169; FaccionData[CONTRABANDISTAS][Paga][4] = 350;
	FaccionesRangos[CONTRABANDISTAS][5]  = "Novato";			RangosSkins[CONTRABANDISTAS][5][0] 	= 117; 	RangosSkins[CONTRABANDISTAS][5][1] = 141; RangosSkins[CONTRABANDISTAS][5][2]	= 169; FaccionData[CONTRABANDISTAS][Paga][5] = 350;

// SICARIOS ID - 16
	format(FaccionData[SICARIOS][NameFaccion], MAX_FACCION_NAME, "Sicarios");
	FaccionData[SICARIOS][Extorsion] 		= 0;
	FaccionData[SICARIOS][AlmacenX][0] 		= 1041.1677246094;
	FaccionData[SICARIOS][AlmacenY][0] 		= 1279.3204345703;
	FaccionData[SICARIOS][AlmacenZ][0] 		= 20.464794158936;
	FaccionData[SICARIOS][AlmacenWorld][0]	= WORLD_DEFAULT_INTERIOR;
	FaccionData[SICARIOS][Spawn_X][0] 		= 1549.6040039063;
	FaccionData[SICARIOS][Spawn_Y][0] 		= 25.535907745361;
	FaccionData[SICARIOS][Spawn_Z][0] 		= 24.140625;
	FaccionData[SICARIOS][Spawn_ZZ][0] 		= 283.095703125;
	FaccionData[SICARIOS][PickupOut_X] 		= 1566.8322753906;
	FaccionData[SICARIOS][PickupOut_Y] 		= 23.247451782227;
	FaccionData[SICARIOS][PickupOut_Z] 		= 24.1640625;
	FaccionData[SICARIOS][PickupOut_ZZ] 	= 90;
	FaccionData[SICARIOS][PickupIn_X] 		= 2807.5412597656;
	FaccionData[SICARIOS][PickupIn_Y] 		= -1174.7557373047;
	FaccionData[SICARIOS][PickupIn_Z] 		= 1025.5703125;
	FaccionData[SICARIOS][PickupIn_ZZ] 		= 0;
	FaccionData[SICARIOS][InteriorFaccion]	= 8;
	FaccionData[SICARIOS][PickupidOutF]		= CreatePickup	(1314, 	1, 	FaccionData[SICARIOS][PickupOut_X], FaccionData[SICARIOS][PickupOut_Y], FaccionData[SICARIOS][PickupOut_Z],	 	WORLD_NORMAL);
	FaccionData[SICARIOS][PickupidInF] 		= CreatePickup	(1314, 	1, 	FaccionData[SICARIOS][PickupIn_X], FaccionData[SICARIOS][PickupIn_Y], FaccionData[SICARIOS][PickupIn_Z],	 	WORLD_DEFAULT_INTERIOR);
	FaccionData[SICARIOS][PrecioFaccion] 	= 0;
	FaccionData[SICARIOS][Lock] 			= 0;
	FaccionData[SICARIOS][World] 			= WORLD_DEFAULT_INTERIOR;
	FaccionData[SICARIOS][Family] 			= true;
	FaccionData[SICARIOS][Radio] 			= false;

	FaccionesRangos[SICARIOS][0]  = "El Capo";			RangosSkins[SICARIOS][0][0] 	= 294; 	RangosSkins[SICARIOS][0][1] 	= 68;   RangosSkins[SICARIOS][0][2] = 93; 	FaccionData[SICARIOS][Paga][0] = 650;
	FaccionesRangos[SICARIOS][1]  = "Encargado"; 		RangosSkins[SICARIOS][1][0] 	= 295;  RangosSkins[SICARIOS][1][1] 	= 93; 										FaccionData[SICARIOS][Paga][1] = 630;
	FaccionesRangos[SICARIOS][2]  = "Extorsionador";	RangosSkins[SICARIOS][2][0] 	= 165; 	RangosSkins[SICARIOS][2][1] 	= 93; 										FaccionData[SICARIOS][Paga][2] = 610;
	FaccionesRangos[SICARIOS][3]  = "Exterminador";		RangosSkins[SICARIOS][3][0] 	= 46; 	RangosSkins[SICARIOS][3][1] 	= 93; 										FaccionData[SICARIOS][Paga][3] = 590;
	FaccionesRangos[SICARIOS][4]  = "Matón";			RangosSkins[SICARIOS][4][0] 	= 272; 	RangosSkins[SICARIOS][4][1] 	= 93; 										FaccionData[SICARIOS][Paga][4] = 550;
	FaccionesRangos[SICARIOS][5]  = "Integrándose";		RangosSkins[SICARIOS][5][0] 	= 112; 	RangosSkins[SICARIOS][5][1] 	= 93; 										FaccionData[SICARIOS][Paga][5] = 430;

	// TALLER_LS ID - 17
	format(FaccionData[TALLER_LS][NameFaccion], MAX_FACCION_NAME, "Taller LS");
	FaccionData[TALLER_LS][Extorsion] 		= 0;
	FaccionData[TALLER_LS][Spawn_X][0] 		= 1809.9860;
	FaccionData[TALLER_LS][Spawn_Y][0] 		= -2053.1816;
	FaccionData[TALLER_LS][Spawn_Z][0] 		= 13.5557;
	FaccionData[TALLER_LS][Spawn_ZZ][0]		= 359.7606;
	FaccionData[TALLER_LS][PickupOut_X] 	= 1764.5760;
	FaccionData[TALLER_LS][PickupOut_Y] 	= -2021.4382;
	FaccionData[TALLER_LS][PickupOut_Z] 	= 14.1501;
	FaccionData[TALLER_LS][PickupOut_ZZ] 	= 276.4366;
	FaccionData[TALLER_LS][PickupIn_X] 	= 1762.9645;
	FaccionData[TALLER_LS][PickupIn_Y] 	= -2023.0339;
	FaccionData[TALLER_LS][PickupIn_Z] 	= 20.6677;
	FaccionData[TALLER_LS][PickupIn_ZZ] 	= 84.5109;
	FaccionData[TALLER_LS][InteriorFaccion]= 15;
	FaccionData[TALLER_LS][PickupidOutF]		= CreatePickup	(1239, 	1, 	FaccionData[TALLER_LS][PickupOut_X], FaccionData[TALLER_LS][PickupOut_Y], FaccionData[TALLER_LS][PickupOut_Z],	 	WORLD_NORMAL);
	FaccionData[TALLER_LS][PickupidInF] 		= CreatePickup	(1239, 	1, 	FaccionData[TALLER_LS][PickupIn_X], FaccionData[TALLER_LS][PickupIn_Y], FaccionData[TALLER_LS][PickupIn_Z],	 	WORLD_DEFAULT_INTERIOR);
	FaccionData[TALLER_LS][PrecioFaccion] 	= 0;
	FaccionData[TALLER_LS][Lock] 			= 0;
	FaccionData[TALLER_LS][World] 			= WORLD_DEFAULT_INTERIOR;
	FaccionData[TALLER_LS][Family] 		= false;
	FaccionData[TALLER_LS][Radio] 			= true;

	FaccionesRangos[TALLER_LS][0]  = "Empresario"; 			RangosSkins[TALLER_LS][0][0] 	= 42;	RangosSkins[TALLER_LS][0][1]	= 55; 																					FaccionData[TALLER_LS][Paga][0] = 460;
	FaccionesRangos[TALLER_LS][1]  = "Encargado";			RangosSkins[TALLER_LS][1][0] 	= 268;	RangosSkins[TALLER_LS][1][1]	= 55;	RangosSkins[TALLER_LS][1][2] 	= 58; 											FaccionData[TALLER_LS][Paga][1] = 430;
	FaccionesRangos[TALLER_LS][2]  = "Maquinista"; 			RangosSkins[TALLER_LS][2][0] 	= 16; 	RangosSkins[TALLER_LS][2][1] 	= 55;	RangosSkins[TALLER_LS][2][2] 	= 8;	RangosSkins[TALLER_LS][2][3]	= 55; 	FaccionData[TALLER_LS][Paga][2] = 400;
	FaccionesRangos[TALLER_LS][3]  = "Mecánico"; 			RangosSkins[TALLER_LS][3][0] 	= 50; 	RangosSkins[TALLER_LS][3][1] 	= 55;	RangosSkins[TALLER_LS][3][2] 	= 8;											FaccionData[TALLER_LS][Paga][3] = 370;
	FaccionesRangos[TALLER_LS][4]  = "Mecánico Novato"; 	RangosSkins[TALLER_LS][4][0] 	= 50; 	RangosSkins[TALLER_LS][4][1] 	= 55; 	RangosSkins[TALLER_LS][4][2] 	= 8;										 	FaccionData[TALLER_LS][Paga][4] = 350;

	// COLTS ID - 18
	format(FaccionData[COLTS][NameFaccion], MAX_FACCION_NAME, "Colts");
	FaccionData[COLTS][Extorsion] 		= 0;
	FaccionData[COLTS][AlmacenX][0] 	= 1088.6768;
	FaccionData[COLTS][AlmacenY][0] 	= 1712.8599;
	FaccionData[COLTS][AlmacenZ][0] 	= 10.9153;
	FaccionData[COLTS][AlmacenWorld][0]	= WORLD_DEFAULT_INTERIOR;
	FaccionData[COLTS][Spawn_X][0] 		= 2662.7495;
	FaccionData[COLTS][Spawn_Y][0] 		= -2028.8191;
	FaccionData[COLTS][Spawn_Z][0] 		= 13.5510;
	FaccionData[COLTS][Spawn_ZZ][0]		= 175.8332;
	FaccionData[COLTS][PickupOut_X] 	= 2650.703125;
	FaccionData[COLTS][PickupOut_Y] 	= -2021.836059;
	FaccionData[COLTS][PickupOut_Z] 	= 14.1766281;
	FaccionData[COLTS][PickupOut_ZZ] 	= 90;
	FaccionData[COLTS][PickupIn_X] 	= 2352.930664;
	FaccionData[COLTS][PickupIn_Y] 	= -1180.936645;
	FaccionData[COLTS][PickupIn_Z] 	= 1027.9765625;
	FaccionData[COLTS][PickupIn_ZZ] 	= 90;
	FaccionData[COLTS][InteriorFaccion]= 5;
	FaccionData[COLTS][PickupidOutF]		= CreatePickup	(1314, 	1, 	FaccionData[COLTS][PickupOut_X], FaccionData[COLTS][PickupOut_Y], FaccionData[COLTS][PickupOut_Z],	 	WORLD_NORMAL);
	FaccionData[COLTS][PickupidInF] 		= CreatePickup	(1314, 	1, 	FaccionData[COLTS][PickupIn_X], FaccionData[COLTS][PickupIn_Y], FaccionData[COLTS][PickupIn_Z],	 	WORLD_DEFAULT_INTERIOR);
	FaccionData[COLTS][PrecioFaccion] 	= 0;
	FaccionData[COLTS][Lock] 			= 0;
	FaccionData[COLTS][World] 			= WORLD_DEFAULT_INTERIOR;
	FaccionData[COLTS][Family] 			= true;
	FaccionData[COLTS][Radio] 			= false;

	FaccionesRangos[COLTS][0]  = "Colt";		RangosSkins[COLTS][0][0] 	= 115;	RangosSkins[COLTS][0][1]	= 190; 	RangosSkins[COLTS][0][2]	= 114;	RangosSkins[COLTS][0][3] 	= 116;	FaccionData[COLTS][Paga][0] = 460;
	FaccionesRangos[COLTS][1]  = "El Menor";	RangosSkins[COLTS][1][0] 	= 116;	RangosSkins[COLTS][1][1]	= 190; 	RangosSkins[COLTS][1][2]	= 114;										FaccionData[COLTS][Paga][1] = 430;
	FaccionesRangos[COLTS][2]  = "Activo"; 		RangosSkins[COLTS][2][0] 	= 116; 	RangosSkins[COLTS][2][1]	= 190; 	RangosSkins[COLTS][2][2]	= 114;										FaccionData[COLTS][Paga][2] = 400;
	FaccionesRangos[COLTS][3]  = "Chismoso"; 	RangosSkins[COLTS][3][0] 	= 116; 	RangosSkins[COLTS][3][1] 	= 190; 																			FaccionData[COLTS][Paga][3] = 370;
	FaccionesRangos[COLTS][4]  = "Pibe"; 		RangosSkins[COLTS][4][0] 	= 116; 	RangosSkins[COLTS][4][1] 	= 190; 																			FaccionData[COLTS][Paga][4] = 350;

	// AK ID - 19
	format(FaccionData[AK][NameFaccion], MAX_FACCION_NAME, "AK");
	FaccionData[AK][Extorsion] 		= 0;
	FaccionData[AK][AlmacenX][0] 	= 2686.5295;
	FaccionData[AK][AlmacenY][0] 	= 819.5256;
	FaccionData[AK][AlmacenZ][0] 	= 10.9638;
	FaccionData[AK][AlmacenWorld][0]	= WORLD_DEFAULT_INTERIOR;
	FaccionData[AK][Spawn_X][0] 	= -2463.8672;
	FaccionData[AK][Spawn_Y][0] 	= -93.7012;
	FaccionData[AK][Spawn_Z][0] 	= 25.8586;
	FaccionData[AK][Spawn_ZZ][0]	= 179.7161;
	FaccionData[AK][PickupOut_X] 	= -2454.5942382813;
	FaccionData[AK][PickupOut_Y] 	= -135.9363861084;
	FaccionData[AK][PickupOut_Z] 	= 26.191596984863;
	FaccionData[AK][PickupOut_ZZ] 	= 90;
	FaccionData[AK][PickupIn_X] 	= 2674.3801269531;
	FaccionData[AK][PickupIn_Y] 	= 804.61590576172;
	FaccionData[AK][PickupIn_Z] 	= 10.963800430298;
	FaccionData[AK][PickupIn_ZZ] 	= 0;
	FaccionData[AK][InteriorFaccion]= 6;
	FaccionData[AK][PickupidOutF]		= CreatePickup	(1314, 	1, 	FaccionData[AK][PickupOut_X], FaccionData[AK][PickupOut_Y], FaccionData[AK][PickupOut_Z],	 	WORLD_NORMAL);
	FaccionData[AK][PickupidInF] 		= CreatePickup	(1314, 	1, 	FaccionData[AK][PickupIn_X], FaccionData[AK][PickupIn_Y], FaccionData[AK][PickupIn_Z],	 	WORLD_DEFAULT_INTERIOR);
	FaccionData[AK][PrecioFaccion] 	= 0;
	FaccionData[AK][Lock] 			= 0;
	FaccionData[AK][World] 			= WORLD_DEFAULT_INTERIOR;
	FaccionData[AK][Family] 		= true;
	FaccionData[AK][Radio] 			= false;

	FaccionesRangos[AK][0]  = "AK"; 		RangosSkins[AK][0][0] 	= 248;	RangosSkins[AK][0][1]	= 195; 	RangosSkins[AK][0][2]	= 254;	RangosSkins[AK][0][3] 	= 247;	RangosSkins[AK][0][4]	= 181;	RangosSkins[AK][0][4]	= 100; 	FaccionData[AK][Paga][0] = 460;
	FaccionesRangos[AK][1]  = "El Menor";	RangosSkins[AK][1][0] 	= 247;	RangosSkins[AK][1][1]	= 195; 	RangosSkins[AK][1][2]	= 254;	RangosSkins[AK][1][3]	= 181;																	FaccionData[AK][Paga][1] = 430;
	FaccionesRangos[AK][2]  = "Activo"; 	RangosSkins[AK][2][0] 	= 247; 	RangosSkins[AK][2][1]	= 195; 	RangosSkins[AK][2][2]	= 254;  RangosSkins[AK][2][3]	= 181;																	FaccionData[AK][Paga][2] = 400;
	FaccionesRangos[AK][3]  = "Chismoso"; 	RangosSkins[AK][3][0] 	= 247; 	RangosSkins[AK][3][1] 	= 195; 	RangosSkins[AK][3][2]	= 181;																									FaccionData[AK][Paga][3] = 370;
	FaccionesRangos[AK][4]  = "Pibe"; 		RangosSkins[AK][4][0] 	= 247; 	RangosSkins[AK][4][1] 	= 195; 	RangosSkins[AK][4][2]	= 181;																									FaccionData[AK][Paga][4] = 350;
	
	// VELTRAN ID - 20
	/////////////////////////////////////////////////////////////////////
	format(FaccionData[VELTRAN][NameFaccion], MAX_FACCION_NAME, "Veltran");
	FaccionData[VELTRAN][Extorsion] 		= 0;
	FaccionData[VELTRAN][AlmacenX][0] 	= 34.3752;
	FaccionData[VELTRAN][AlmacenY][0] 	= 2495.5813;
	FaccionData[VELTRAN][AlmacenZ][0] 	= 16.4937;
	FaccionData[VELTRAN][AlmacenWorld][0]	= WORLD_DEFAULT_INTERIOR;
	FaccionData[VELTRAN][Spawn_X][0] 	= -2088.4094;
	FaccionData[VELTRAN][Spawn_Y][0] 	= 903.1467;
	FaccionData[VELTRAN][Spawn_Z][0] 	= 65.5231;
	FaccionData[VELTRAN][Spawn_ZZ][0]	= 353.4789;
	FaccionData[VELTRAN][PickupOut_X] 	= -2099.6032714844;
	FaccionData[VELTRAN][PickupOut_Y] 	= 897.35711669922;
	FaccionData[VELTRAN][PickupOut_Z] 	= 76.7109375;
	FaccionData[VELTRAN][PickupOut_ZZ] 	= 0;
	FaccionData[VELTRAN][PickupIn_X] 	= 30.553499221802;
	FaccionData[VELTRAN][PickupIn_Y] 	= 2495.8635253906;
	FaccionData[VELTRAN][PickupIn_Z] 	= 16.494745254517;
	FaccionData[VELTRAN][PickupIn_ZZ] 	= 0;
	FaccionData[VELTRAN][InteriorFaccion]= 5;
	FaccionData[VELTRAN][PickupidOutF]		= CreatePickup	(1314, 	1, 	FaccionData[VELTRAN][PickupOut_X], FaccionData[VELTRAN][PickupOut_Y], FaccionData[VELTRAN][PickupOut_Z],	 	WORLD_NORMAL);
	FaccionData[VELTRAN][PickupidInF] 		= CreatePickup	(1314, 	1, 	FaccionData[VELTRAN][PickupIn_X], FaccionData[VELTRAN][PickupIn_Y], FaccionData[VELTRAN][PickupIn_Z],	 	WORLD_DEFAULT_INTERIOR);
	FaccionData[VELTRAN][PrecioFaccion] 	= 0;
	FaccionData[VELTRAN][Lock] 			= 0;
	FaccionData[VELTRAN][World] 			= WORLD_DEFAULT_INTERIOR;
	FaccionData[VELTRAN][Family] 		= true;
	FaccionData[VELTRAN][Radio] 			= false;

	FaccionesRangos[VELTRAN][0]  = "Veltran"; 	RangosSkins[VELTRAN][0][0] 	= 175;	RangosSkins[VELTRAN][0][1]	= 201; 	RangosSkins[VELTRAN][0][2]	= 173;		RangosSkins[VELTRAN][0][3] 	= 174;		FaccionData[VELTRAN][Paga][0] = 460;
	FaccionesRangos[VELTRAN][1]  = "El Menor";	RangosSkins[VELTRAN][1][0] 	= 174;	RangosSkins[VELTRAN][1][1]	= 201; 	RangosSkins[VELTRAN][1][2]	= 173;											FaccionData[VELTRAN][Paga][1] = 430;
	FaccionesRangos[VELTRAN][2]  = "Activo"; 	RangosSkins[VELTRAN][2][0] 	= 173; 	RangosSkins[VELTRAN][2][1]	= 201; 	RangosSkins[VELTRAN][2][2]	= 174;																				FaccionData[VELTRAN][Paga][2] = 400;
	FaccionesRangos[VELTRAN][3]  = "Chismoso"; 	RangosSkins[VELTRAN][3][0] 	= 173; 	RangosSkins[VELTRAN][3][1] 	= 201; 																				FaccionData[VELTRAN][Paga][3] = 370;
	FaccionesRangos[VELTRAN][4]  = "Pibe"; 		RangosSkins[VELTRAN][4][0] 	= 173; 	RangosSkins[VELTRAN][4][1] 	= 201; 																				FaccionData[VELTRAN][Paga][4] = 350;
	
	// HEORS ID - 21
	format(FaccionData[HEORS][NameFaccion], MAX_FACCION_NAME, "Heors");
	FaccionData[HEORS][Extorsion] 		= 0;
	FaccionData[HEORS][AlmacenX][0] 	= 1725.7097;
	FaccionData[HEORS][AlmacenY][0] 	= -2447.1138;
	FaccionData[HEORS][AlmacenZ][0] 	= 13.6246;
	FaccionData[HEORS][AlmacenWorld][0]	= WORLD_DEFAULT_INTERIOR;
	FaccionData[HEORS][AlmacenX][1] 	= 2447.7646;
	FaccionData[HEORS][AlmacenY][1] 	= 2085.1616;
	FaccionData[HEORS][AlmacenZ][1] 	= 62.3593;
	FaccionData[HEORS][AlmacenWorld][1]	= WORLD_DEFAULT_INTERIOR;
	FaccionData[HEORS][Spawn_X][0] 		= 2045.4813;
	FaccionData[HEORS][Spawn_Y][0] 		= -1111.6809;
	FaccionData[HEORS][Spawn_Z][0] 		= 26.3617;
	FaccionData[HEORS][Spawn_ZZ][0]		= 175.9550;
	FaccionData[HEORS][Spawn_X][1] 		= 2793.3169;
	FaccionData[HEORS][Spawn_Y][1] 		= -1624.8368;
	FaccionData[HEORS][Spawn_Z][1] 		= 10.9219;
	FaccionData[HEORS][Spawn_ZZ][1]		= 81.8914;
	FaccionData[HEORS][PickupOut_X] 	= 2045.5537;
	FaccionData[HEORS][PickupOut_Y] 	= -1116.4283;
	FaccionData[HEORS][PickupOut_Z] 	= 26.3617;
	FaccionData[HEORS][PickupOut_ZZ] 	= 0;
	FaccionData[HEORS][PickupIn_X] 	= 1781.7933349609;
	FaccionData[HEORS][PickupIn_Y] 	= -2454.0107421875;
	FaccionData[HEORS][PickupIn_Z] 	= 13.5546875;
	FaccionData[HEORS][PickupIn_ZZ] 	= 0;
	FaccionData[HEORS][InteriorFaccion]= 13;
	FaccionData[HEORS][PickupidOutF]		= CreatePickup	(1314, 	1, 	FaccionData[HEORS][PickupOut_X], FaccionData[HEORS][PickupOut_Y], FaccionData[HEORS][PickupOut_Z],	 	WORLD_NORMAL);
	FaccionData[HEORS][PickupidInF] 		= CreatePickup	(1314, 	1, 	FaccionData[HEORS][PickupIn_X], FaccionData[HEORS][PickupIn_Y], FaccionData[HEORS][PickupIn_Z],	 	WORLD_DEFAULT_INTERIOR);
	FaccionData[HEORS][PrecioFaccion] 	= 0;
	FaccionData[HEORS][Lock] 			= 0;
	FaccionData[HEORS][World] 			= WORLD_DEFAULT_INTERIOR;
	FaccionData[HEORS][Family] 		= true;
	FaccionData[HEORS][Radio] 			= false;

	FaccionesRangos[HEORS][0]  = "Heor";	 	RangosSkins[HEORS][0][0] 	= 292;  RangosSkins[HEORS][0][1] 	= 110;	RangosSkins[HEORS][0][2]	= 207; 	RangosSkins[HEORS][0][3]	= 108;		RangosSkins[HEORS][0][3] 	= 109;		FaccionData[HEORS][Paga][0] = 460;
	FaccionesRangos[HEORS][1]  = "El Menor";	RangosSkins[HEORS][1][0] 	= 109;	RangosSkins[HEORS][1][1]	= 207; 	RangosSkins[HEORS][1][2]	= 108;																					FaccionData[HEORS][Paga][1] = 430;
	FaccionesRangos[HEORS][2]  = "Activo"; 		RangosSkins[HEORS][2][0] 	= 108; 	RangosSkins[HEORS][2][1]	= 207; 	RangosSkins[HEORS][2][2]	= 108;																					FaccionData[HEORS][Paga][2] = 400;
	FaccionesRangos[HEORS][3]  = "Chismoso"; 	RangosSkins[HEORS][3][0] 	= 108; 	RangosSkins[HEORS][3][1] 	= 207; 																														FaccionData[HEORS][Paga][3] = 370;
	FaccionesRangos[HEORS][4]  = "Pibe"; 		RangosSkins[HEORS][4][0] 	= 108; 	RangosSkins[HEORS][4][1] 	= 207; 																														FaccionData[HEORS][Paga][4] = 350;

// SFMD ID - 22
	format(FaccionData[LSMD][NameFaccion], MAX_FACCION_NAME, "LSMD");
	FaccionData[LSMD][Extorsion] 		= 0;
	FaccionData[LSMD][Spawn_X][0] 		= 1174.4027;
	FaccionData[LSMD][Spawn_Y][0] 		= -1307.2732;
	FaccionData[LSMD][Spawn_Z][0] 		= 19.4473;
	FaccionData[LSMD][Spawn_ZZ][0]		= 178.7280;
	FaccionData[LSMD][Spawn_X][1] 		= 2036.5618;
	FaccionData[LSMD][Spawn_Y][1] 		= -1438.7203;
	FaccionData[LSMD][Spawn_Z][1] 		= 17.3176;
	FaccionData[LSMD][Spawn_ZZ][1]		= 87.8400;
	FaccionData[LSMD][PickupOut_X] 		= 1172.0863037109;
	FaccionData[LSMD][PickupOut_Y] 		= -1323.3535;
	FaccionData[LSMD][PickupOut_Z] 		= 15.406188964844;
	FaccionData[LSMD][PickupOut_ZZ] 	= 270;
	FaccionData[LSMD][PickupIn_X] 		= 388.37915039063;
	FaccionData[LSMD][PickupIn_Y] 		= 1906.3463134766;
	FaccionData[LSMD][PickupIn_Z] 		= 17.715625762939;
	FaccionData[LSMD][PickupIn_ZZ] 		= 90;
	FaccionData[LSMD][InteriorFaccion] 	= 18;
	FaccionData[LSMD][PickupidOutF]		= CreatePickup	(1239, 	1, 	FaccionData[LSMD][PickupOut_X], FaccionData[LSMD][PickupOut_Y], FaccionData[LSMD][PickupOut_Z],	 	WORLD_NORMAL);
	FaccionData[LSMD][PickupidInF] 		= CreatePickup	(1239, 	1, 	FaccionData[LSMD][PickupIn_X], FaccionData[LSMD][PickupIn_Y], FaccionData[LSMD][PickupIn_Z],	 	WORLD_DEFAULT_INTERIOR);
	FaccionData[LSMD][PrecioFaccion] 	= 0;
	FaccionData[LSMD][Lock] 			= 0;
	FaccionData[LSMD][World] 			= WORLD_DEFAULT_INTERIOR;
	FaccionData[LSMD][Family] 			= false;
	FaccionData[LSMD][Radio] 			= true;

	FaccionesRangos[LSMD][0]  = "Director"; 		RangosSkins[LSMD][0][0] 	= 70; 	RangosSkins[LSMD][0][1] = 150; 	RangosSkins[LSMD][0][2] = 277; 	RangosSkins[LSMD][0][3] = 278; 	RangosSkins[LSMD][0][4]	= 279;		FaccionData[LSMD][Paga][0] = 700;
	FaccionesRangos[LSMD][1]  = "Sub Director"; 	RangosSkins[LSMD][1][0] 	= 223;  RangosSkins[LSMD][1][1] = 191;  RangosSkins[LSMD][1][2] = 277; 	RangosSkins[LSMD][1][3] = 278; 	RangosSkins[LSMD][1][4]	= 279;	 	FaccionData[LSMD][Paga][1] = 600;
	FaccionesRangos[LSMD][2]  = "Jefe de Bomberos";	RangosSkins[LSMD][2][0] 	= 279; 	RangosSkins[LSMD][2][1]	= 191;																										FaccionData[LSMD][Paga][2] = 650;
	FaccionesRangos[LSMD][3]  = "Doctor"; 			RangosSkins[LSMD][3][0] 	= 156; 	RangosSkins[LSMD][3][1]	= 191; 	RangosSkins[LSMD][3][2]	= 274; 	RangosSkins[LSMD][3][3]	= 275; 	RangosSkins[LSMD][3][4]	= 276;		FaccionData[LSMD][Paga][3] = 500;
	FaccionesRangos[LSMD][4]  = "Paramédico"; 		RangosSkins[LSMD][4][0] 	= 274; 	RangosSkins[LSMD][4][1] = 191; 	RangosSkins[LSMD][4][2]	= 274; 	RangosSkins[LSMD][4][3]	= 275; 	RangosSkins[LSMD][4][4]	= 276;	 	FaccionData[LSMD][Paga][4] = 450;
	FaccionesRangos[LSMD][5]  = "Bombero"; 			RangosSkins[LSMD][5][0] 	= 277; 	RangosSkins[LSMD][5][1] = 278; 	RangosSkins[LSMD][5][2]	= 191; 																		FaccionData[LSMD][Paga][5] = 550;
	FaccionesRangos[LSMD][6]  = "Apréndiz"; 		RangosSkins[LSMD][6][0] 	= 275; 	RangosSkins[LSMD][6][1] = 191; 		 																								FaccionData[LSMD][Paga][6] = 400;

//////////////////////////////// FACCIONES ////////////////////////////////
	for (new i = 0; i < MAX_FACCION_COUNT; i++ )
	{
	    new TempDirFaccion[25];
	    format(TempDirFaccion, sizeof(TempDirFaccion), "%s%i.ulp", DIR_FACCIONES, i);

		if ( fexist(TempDirFaccion) )
		{
			LoadDataFaccion(i);
		}
		else
		{
		    break;
		}
	}

	// AGREGAR CLASS
	SKIN_CIVILES[0]    = 1;
	SKIN_CIVILES[1]    = 2;
	SKIN_CIVILES[2]    = 7;
	SKIN_CIVILES[3]    = 9;
	SKIN_CIVILES[4]    = 10;
	SKIN_CIVILES[5]    = 12;
	SKIN_CIVILES[6]    = 18;
	SKIN_CIVILES[7]    = 19;
	SKIN_CIVILES[8]    = 20;
	SKIN_CIVILES[9]    = 21;
	SKIN_CIVILES[10]    = 22;
	SKIN_CIVILES[11]    = 23;
	SKIN_CIVILES[12]    = 24;
	SKIN_CIVILES[13]    = 25;
	SKIN_CIVILES[14]    = 26;
	SKIN_CIVILES[15]    = 27;
	SKIN_CIVILES[16]    = 30;
	SKIN_CIVILES[17]    = 32;
	SKIN_CIVILES[18]    = 33;
	SKIN_CIVILES[19]    = 34;
	SKIN_CIVILES[20]    = 41;
	SKIN_CIVILES[21]    = 45;
	SKIN_CIVILES[22]    = 38;
	SKIN_CIVILES[23]    = 47;
	SKIN_CIVILES[24]    = 49;
	SKIN_CIVILES[25]    = 56;
	SKIN_CIVILES[26]    = 62;
	SKIN_CIVILES[27]    = 63;
	SKIN_CIVILES[28]    = 64;
	SKIN_CIVILES[29]    = 66;
	SKIN_CIVILES[30]    = 67;
	SKIN_CIVILES[31]    = 75;
	SKIN_CIVILES[32]    = 76;
	SKIN_CIVILES[33]    = 77;
	SKIN_CIVILES[34]    = 78;
	SKIN_CIVILES[35]    = 79;
	SKIN_CIVILES[36]    = 80;
	SKIN_CIVILES[37]    = 81;
	SKIN_CIVILES[38]    = 82;
	SKIN_CIVILES[39]    = 83;
	SKIN_CIVILES[40]    = 84;
	SKIN_CIVILES[41]    = 85;
	SKIN_CIVILES[42]    = 87;
	SKIN_CIVILES[43]    = 90;
	SKIN_CIVILES[44]    = 92;
	SKIN_CIVILES[45]    = 94;
	SKIN_CIVILES[46]    = 96;
	SKIN_CIVILES[47]    = 97;
	SKIN_CIVILES[48]    = 99;
	SKIN_CIVILES[49]    = 119;
	SKIN_CIVILES[50]    = 128;
	SKIN_CIVILES[51]    = 134;
	SKIN_CIVILES[52]    = 136;
	SKIN_CIVILES[53]    = 137;
	SKIN_CIVILES[54]    = 138;
	SKIN_CIVILES[55]    = 139;
	SKIN_CIVILES[56]    = 140;
	SKIN_CIVILES[57]    = 142;
	SKIN_CIVILES[58]    = 143;
	SKIN_CIVILES[59]    = 144;
	SKIN_CIVILES[60]    = 151;
	SKIN_CIVILES[61]    = 152;
	SKIN_CIVILES[62]    = 153;
	SKIN_CIVILES[63]    = 154;
	SKIN_CIVILES[64]    = 155;
	SKIN_CIVILES[65]    = 156;
	SKIN_CIVILES[66]    = 157;
	SKIN_CIVILES[67]    = 160;
	SKIN_CIVILES[68]    = 161;
	SKIN_CIVILES[69]    = 162;
	SKIN_CIVILES[70]    = 167;
	SKIN_CIVILES[71]    = 168;
	SKIN_CIVILES[72]    = 178;
	SKIN_CIVILES[73]    = 179;
	SKIN_CIVILES[74]    = 180;
	SKIN_CIVILES[75]    = 181;
	SKIN_CIVILES[76]    = 193;
	SKIN_CIVILES[77]    = 198;
	SKIN_CIVILES[78]    = 199;
	SKIN_CIVILES[79]    = 200;
	SKIN_CIVILES[80]    = 203;
	SKIN_CIVILES[81]    = 204;
	SKIN_CIVILES[82]    = 205;
	SKIN_CIVILES[83]    = 209;
	SKIN_CIVILES[84]    = 210;
	SKIN_CIVILES[85]    = 211;
	SKIN_CIVILES[86]    = 212;
	SKIN_CIVILES[87]    = 213;
	SKIN_CIVILES[88]    = 214;
	SKIN_CIVILES[89]    = 215;
	SKIN_CIVILES[90]    = 217;
	SKIN_CIVILES[91]    = 218;
	SKIN_CIVILES[92]    = 220;
	SKIN_CIVILES[93]    = 222;
	SKIN_CIVILES[94]    = 224;
	SKIN_CIVILES[95]    = 225;
	SKIN_CIVILES[96]    = 226;
	SKIN_CIVILES[97]    = 229;
	SKIN_CIVILES[98]    = 230;
	SKIN_CIVILES[99]    = 231;
	SKIN_CIVILES[100]    = 232;
	SKIN_CIVILES[101]    = 235;
	SKIN_CIVILES[102]    = 237;
	SKIN_CIVILES[103]    = 238;
	SKIN_CIVILES[104]    = 239;
	SKIN_CIVILES[105]    = 241;
	SKIN_CIVILES[106]    = 242;
	SKIN_CIVILES[107]    = 246;
	SKIN_CIVILES[108]    = 249;
	SKIN_CIVILES[109]    = 251;
	SKIN_CIVILES[110]    = 252;
	SKIN_CIVILES[111]    = 260;
	SKIN_CIVILES[112]    = 264;
	SKIN_CIVILES[113]    = 291;
	SKIN_CIVILES[114]    = 293;
	SKIN_CIVILES[115]    = 297;
	SKIN_CIVILES[116]    = 299;
	SKIN_CIVILES[117]    = 999;

	LoadLastOptionsServer();
	
	// Deleting data.
	/*// Vehicles
	for (new i = 1; i <= MAX_CAR_DUENO; i++ )
	{
		RemoveDuenoOfVehicle(i, 3);
	}
	// Bizz
	for (new i = 1; i <= MAX_BIZZ; i++)
	{
		RemoveDuenoOfBizz(i);
	}
	// Houses
	for (new i = 1; i <= MAX_HOUSE; i++)
	{
		RemoveDuenoOfHouse(i);
	}*/
	
	ShowServerStats(-1);
	print("___________________ GAMEMODE CARGADO CORRECTAMENTE! ___________________");
	print("\n______________ NO SE CARGARÓN FILESCRIPTS/FILTERSCRIPTS ________________");
	return 1;
}

public MySQLConnect()
{
    print("___________________ CONECTANDO CON BASE DE DATOS... ___________________");
    new errno;
    dataBase = mysql_connect_file("mysql.ini");
    errno = mysql_errno(dataBase);
    if(errno != 0)
    {
        new error[100];
        mysql_error(error, 100, dataBase);
        print("\n\n\n ERROR AL CONECTAR CON LA BASE DE DATOS !!!!!!");
        printf("[MySQL]: Connection Error: #%d '%s'\n\n\n", errno, error);
        SendRconCommand("exit");
    }
    else print("________________ BASE DE DATOS CONECTADA CORRECTAMENTE! ________________");
	return 1;
}

public OnQueryError(errorid, const error[], const callback[], const query[], MySQL:handle)
{
	switch(errorid)
	{
		case CR_SERVER_GONE_ERROR:
		{
			print("Lost connection to server");
		}
		case ER_SYNTAX_ERROR:
		{
			printf("Something is wrong in your syntax, query: %s",query);
		}
	}
	return 1;
}

public OnGameModeExit()
{
	if ( !ResetGM )
	{
		OnGameModeExitEx();
  	}
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
	if ( PlayersDataOnline[playerid][State] == 0 )
	{
	    SetPlayerOrginalTime(playerid);
	    PlayerPlaySound(playerid, 1185, 0.0, 0.0, 0.0);
		for (new AE = 0; AE <= 20; AE++)
		{
		    SendClientMessage(playerid, 0xFFFFFFFF, "");
		}

		SendInfoMessage(playerid, 2, "0", LOGO_UNPLAYER);

		new query[100], Cache:cacheid, cuentaExiste;
		mysql_format(dataBase, query, 100, "SELECT * FROM `%s` WHERE `Nombre`='%e';", DIR_USERS, PlayersDataOnline[playerid][NameOnline]);
		cacheid = mysql_query(dataBase, query);
		cache_get_row_count(cuentaExiste);
		cache_delete(cacheid);

		// LOGIN
		if ( cuentaExiste )
		{
		    PlayersDataOnline[playerid][State] = 1;
		    DataUserLoad(playerid);
 			ShowPlayerLogin(playerid, true);
		}
		// REGISTRO
		else
		{
		    PlayersDataOnline[playerid][State] = 2;
			ShowPlayerRegister(playerid, true);
		}

		PlayersData[playerid][CameraLogin]--;
		SetCameraLogin(playerid, PlayersData[playerid][CameraLogin], true);

		PlayersDataOnline[playerid][StateDeath] = 3;
	}
	else if ( !PlayersDataOnline[playerid][StateDeath] || PlayersDataOnline[playerid][State] == 3)
	{
		if ( PlayersData[playerid][InTutorial] )
		{
	    	PlayersDataOnline[playerid][StateDeath] = 5;
    	}
		UpdateSpawnPlayer(playerid);
	    SpawnPlayerEx(playerid);
	}
	else if ( PlayersDataOnline[playerid][State] )
	{
		SetCameraLogin(playerid, PlayersData[playerid][CameraLogin], true);
	}
	return 1;
}
public OnPlayerConnect(playerid)
{
	SetPlayerColor(playerid, 0xAAAAAAFF);
	TextDrawShowForPlayer(playerid, Url_WebShadow);
	TextDrawShowForPlayer(playerid, Url_Web);
	SetPlayerVirtualWorld(playerid, 1337);
	DataUserClean(playerid);
	GetPlayerName(playerid, PlayersDataOnline[playerid][NameOnline], MAX_PLAYER_NAME);
	PlayersDataOnline[playerid][TimerLoginId] = SetTimerEx("IsPlayerOff", 60000, false, "d", playerid);
    SaveIpUser(playerid, true);
	if (IsValidName(PlayersDataOnline[playerid][NameOnline]))
	{
		if ( RemoveRallaName(playerid) )
		{
			GivePlayerWeaponReturn(playerid);
		 	for (new i = 0; i < MAX_OBJECTS_PLAYERS; i++)
			{
				RemovePlayerAttachedObject(playerid, i);
			}
		}
		else
		{
				printf("Kickeado por Nick: %s", PlayersDataOnline[playerid][NameOnline]);
				SendClientMessage(playerid, 0x002DFFFF, "Has sido Kickedo del servidor.");
				SendClientMessage(playerid, 0x002DFFFF, "Para el servidor de Role Play es requerido que utilice el formato de nick name Nombre_Apellido.");
				SendClientMessage(playerid, 0x002DFFFF, "{F5FF00}Ejemplo: {00F50A}Juan_Perez, Jorge_Pelaez");
				SendClientMessage(playerid, 0x002DFFFF, " ");
				SendClientMessage(playerid, 0x002DFFFF, "Cualquier duda al respecto sobre el regístro puede consultarlo en "WEBPAGE"");
				KickEx(playerid, 99);
		}
	}
	else
	{
		SendInfoMessage(playerid, 0, "100", "El nick que usa esta deshabilitado por cuestiones de seguridad.");
		print("Error 119");
		KickEx(playerid, 1);
	}
}
public OnPlayerDisconnect(playerid, reason)
{
	if ( !ResetGM )
	{
		if(PlayersDataOnline[playerid][IsEspectando])
		{
			UpdateSpectatedPlayers(playerid, true, false, false);
		}
	    SaveDatosPlayerDisconnect(playerid);
    }
	return 1;
}
public OnPlayerSpawn(playerid)
{
	if ( PlayersDataOnline[playerid][StateDeath] && PlayersDataOnline[playerid][State] == 3 )
	{
		if ( PlayersDataOnline[playerid][StateDeath] == 5 )
		{
			SendInfoMessage(playerid, 0, "828", "Jugador Fuera de Lugar, reloguee y no vuelva a intentar retornar de class u otros inventos extraños");
		    KickEx(playerid, 0);
		    return 1;
		}
		if ( !PlayersDataOnline[playerid][ModeDM] )
		{
			UpdateSpawnPlayer(playerid);
		}
		//Streamer_UpdateEx(playerid, FaccionData[PlayersData[playerid][Faccion]][Spawn_X], FaccionData[PlayersData[playerid][Faccion]][Spawn_Y], FaccionData[PlayersData[playerid][Faccion]][Spawn_Z]);
		SetPlayerLockAllVehicles(playerid);
		new MoneyCount = 0;
		if ( PlayersDataOnline[playerid][StateDeath] == 2 && PlayersData[playerid][Jail] == 0)
		{
          	SetPlayerVirtualWorldEx(playerid, 0);
	        PlayersDataOnline[playerid][VidaOn] = 80.0;
	        PlayersDataOnline[playerid][ChalecoOn] = 0.0;
            if ( !PlayersDataOnline[playerid][ModeDM] )
            {
				SetPlayerTeam(playerid, -1);
				MoneyCount = 10;
				SendInfoMessage(playerid, 2, "0", "El hospital te ha costado $10");
				ResetPlayerWeaponsEx(playerid);
			}
			else if (PlayersDataOnline[playerid][ModeDM])
			{
				ResetPlayerWeapons(playerid);
                for (new i = 0; i < 47; i++)
				{
        			if ( WeaponEnableDM[i] )
				    {
					    GivePlayerWeapon(playerid, i, 9999);
					}
				}
				if ( IsDMTeam )
				{
					SetPlayerTeam(playerid, PlayersDataOnline[playerid][TeamDM] + 1);
				}
				SetPlayerVirtualWorldEx(playerid, WorldDM[PlayersDataOnline[playerid][TeamDM]]);
				SetPlayerInteriorEx(playerid, InteriorDM[PlayersDataOnline[playerid][TeamDM]]);
				if ( InteriorDM[PlayersDataOnline[playerid][TeamDM]] != 0 )
				{
					SetPlayerPos(playerid, PosDM[PlayersDataOnline[playerid][TeamDM]][0], PosDM[PlayersDataOnline[playerid][TeamDM]][1], PosDM[PlayersDataOnline[playerid][TeamDM]][2]);
				}
			}
		}
		if ( PlayersData[playerid][Jail] > 0 )
		{
		    SetPlayerJail(playerid);
	        PlayersDataOnline[playerid][VidaOn] = 80.0;
	        PlayersDataOnline[playerid][ChalecoOn] = 0.0;
		}
		GivePlayerMoneyEx(playerid, -MoneyCount);
	    SetPlayerWeather(playerid, WeatherCurrent);
		PlayersDataOnline[playerid][StateDeath] = false;

		SetPlayerDrunkLevel(playerid, 0);

		if ( PlayersDataOnline[playerid][PistaIDp] != -1 )
		{
	        new PistasDialogText[MAX_TEXT_CHAT];
		    format(PistasDialogText, sizeof(PistasDialogText), "{F5FF00}%s{00F50A} ha salido de la carrera ((Murió)).", PlayersDataOnline[playerid][NameOnlineFix]);
			SendMessageToRaceChat(PlayersDataOnline[playerid][PistaIDp], PistasDialogText, true);
			RemovePlayerToRace(playerid, true, true, STATE_RACE_EXIT_DEATH);
		}
		UpdateTextEnfermedad(playerid);
		ReturnObjetsToPlayer(playerid);
	}
	else
	{
		SendInfoMessage(playerid, 0, "827", "Jugador Fuera de Lugar, reloguee y no vuelva a intentar retornar de class u otros inventos extraños");
	    KickEx(playerid, 2);
	}
	return 1;
}
public OnPlayerDeath(playerid, killerid, reason)
{
	PlayersDataOnline[playerid][StateDeath] = 2;
	TextDrawHideForPlayer(playerid, PlayersDataOnline[playerid][TextEnfermedad]);
	if(PlayersDataOnline[playerid][IsEspectando])
	{
		UpdateSpectatedPlayers(playerid, true, false, false);
	}
	if ( PlayersDataOnline[playerid][ModeDM] )
	{
		if ( SkinDM[PlayersDataOnline[playerid][TeamDM]] )
		{
		    if ( IsDMTeam )
		    {
				SetSpawnInfo(playerid, PlayersDataOnline[playerid][TeamDM] + 1, SkinDM[PlayersDataOnline[playerid][TeamDM]],	PosDM[PlayersDataOnline[playerid][TeamDM]][0], PosDM[PlayersDataOnline[playerid][TeamDM]][1], PosDM[PlayersDataOnline[playerid][TeamDM]][2], PosDM[PlayersDataOnline[playerid][TeamDM]][3], 0, 0, 0, 0, 0, 0);
			}
			else
			{
				SetSpawnInfo(playerid, -1, SkinDM[PlayersDataOnline[playerid][TeamDM]],	PosDM[PlayersDataOnline[playerid][TeamDM]][0], PosDM[PlayersDataOnline[playerid][TeamDM]][1], PosDM[PlayersDataOnline[playerid][TeamDM]][2], PosDM[PlayersDataOnline[playerid][TeamDM]][3], 0, 0, 0, 0, 0, 0);
			}
		}
		else
		{
		    if ( IsDMTeam )
		    {
				SetSpawnInfo(playerid, PlayersDataOnline[playerid][TeamDM] + 1, PlayersData[playerid][Skin],	PosDM[PlayersDataOnline[playerid][TeamDM]][0], PosDM[PlayersDataOnline[playerid][TeamDM]][1], PosDM[PlayersDataOnline[playerid][TeamDM]][2], PosDM[PlayersDataOnline[playerid][TeamDM]][3], 0, 0, 0, 0, 0, 0);
			}
			else
			{
				SetSpawnInfo(playerid, -1, PlayersData[playerid][Skin],	PosDM[PlayersDataOnline[playerid][TeamDM]][0], PosDM[PlayersDataOnline[playerid][TeamDM]][1], PosDM[PlayersDataOnline[playerid][TeamDM]][2], PosDM[PlayersDataOnline[playerid][TeamDM]][3], 0, 0, 0, 0, 0, 0);
			}
		}
	}
	if ( IsPlayerConnected(killerid) && killerid != INVALID_PLAYER_ID )
	{
		if ( PlayersDataOnline[playerid][ModeDM] )
		{
		    PlayersDataOnline[killerid][PointDm]++;
		    SendMessageDeathMatch(killerid);
			UpdateTextDrawDM(0);
			UpdateTextDrawDM(1);
			SendMessageToPlayerDeathMatch(playerid, killerid, reason);
		}
		else
		{
		    SendClientMessage(killerid, COLOR_MESSAGES[0], "  Has cometido un crimen!");
	    }
		PlayersData[killerid][KilledCount]++;

	}
    SetPlayerWeather(playerid, -45);
	PlayersData[playerid][DeahtCount]++;
	PlayersDataOnline[playerid][StateMoneyPass] 	= gettime() + 5;
	CleanDataDeath(playerid);
	return 1;
}
public OnVehicleSpawn(vehicleid)
{
	if ( coches_Todos_Type[DataCars[vehicleid][Modelo] - 400] != TREN )
	{
		new RaceIDR = IsVehiceInRace(vehicleid);
		if ( RaceIDR == -1)
		{
			DestroyVehicle(vehicleid);
			CleanTunningSlots(vehicleid);
			CreateVehicleEx(DataCars[vehicleid][Modelo],
			DataCars[vehicleid][PosX],
			DataCars[vehicleid][PosY],
			DataCars[vehicleid][PosZ],
			DataCars[vehicleid][PosZZ],
			DataCars[vehicleid][Color1],
			DataCars[vehicleid][Color2],
			vehicleid
			);
			if ( DataCars[vehicleid][VehicleDeath] )
			{
				DataCars[vehicleid][VehicleDeath] = false;
				KillTimer(DataCars[vehicleid][TimerIdBug]);
			}
			GetVehicleHealth(vehicleid, DataCars[vehicleid][LastDamage]);
			SetVehicleHidden(vehicleid);
		}
		else
		{
			RemovePlayerToRace(RaceIDR, true, true, STATE_RACE_EXIT_EXPLOTO);
	        new PistasDialogText[MAX_TEXT_CHAT];
		    format(PistasDialogText, sizeof(PistasDialogText), "{F5FF00}%s{00F50A} ha salido de la carrera ((Le explotó el vehículo II)).", PlayersDataOnline[RaceIDR][NameOnlineFix]);
			SendMessageToRaceChat(PlayersDataOnline[RaceIDR][PistaIDp], PistasDialogText, true);
		}
	}
	return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{
	new RaceIDR = IsVehiceInRace(vehicleid);
	if ( RaceIDR == -1)
	{
	    DataCars[vehicleid][VehicleDeath] = true;
		DataCars[vehicleid][TimerIdBug] = SetTimerEx("SetVehicleBugToRespawn", 10000, false, "d", vehicleid);
		DataCars[vehicleid][Puente] = true;
	}
	else
	{
	    if ( PlayersDataOnline[RaceIDR][StateDeath] != 2 )
	    {
	        new PistasDialogText[MAX_TEXT_CHAT];
		    format(PistasDialogText, sizeof(PistasDialogText), "{F5FF00}%s{00F50A} ha salido de la carrera ((Le explotó el vehículo)).", PlayersDataOnline[RaceIDR][NameOnlineFix]);
			SendMessageToRaceChat(PlayersDataOnline[RaceIDR][PistaIDp], PistasDialogText, true);
			RemovePlayerToRace(RaceIDR, true, true, STATE_RACE_EXIT_EXPLOTO);
		}
	}
	return 1;
}
public OnEnterExitModShop(playerid, enterexit, interiorid)
{
	new MsgAvisoBug[MAX_TEXT_CHAT];
    if(enterexit == 0)
    {
	    format(MsgAvisoBug, sizeof(MsgAvisoBug), "%s Tunning´s Shop Owned - El jugador %s[%i] salió de una tienda de tunning", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline], playerid);
		MsgCheatsReportsToAdmins(MsgAvisoBug);
    }
    else
    {
	    format(MsgAvisoBug, sizeof(MsgAvisoBug), "%s Tunning´s Shop Owned - El jugador %s[%i] entró a una tienda de tunning", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline], playerid);
    }
	MsgCheatsReportsToAdmins(MsgAvisoBug);
    return 1;
}
public OnPlayerText(playerid, text[])
{
	if (PlayersDataOnline[playerid][State] == 3 && PlayersDataOnline[playerid][IsNotSilenciado] )
	{
	    if ( !PlayersDataOnline[playerid][InCamera] )
	    {
			SendChatStream(playerid, text);
		}
		else
		{
			SendInfoMessage(playerid, 0, "1090", "No puede utilizar comandos mientras está en las cámaras de seguridad!");
		}
	}
	else
	{
		SendInfoMessage(playerid, 0, "850", "Debe ingresar a el servidor antes de utilizar cualquier comando o ha sido silenciado.");
	}
	PlayersDataOnline[playerid][IsAFK] = false;
	return 0;
}
public OnPlayerCommandText(playerid, cmdtext[])
{
	new LenGet = strlen(cmdtext);
	for ( new i = 0; i < LenGet; i++ )
	{
	    if ( cmdtext[i] == '}' || cmdtext[i] == '{' )
	    {
	        cmdtext[i] = ' ';
	    }
	}
	if (PlayersDataOnline[playerid][State] == 3 && PlayersDataOnline[playerid][IsNotSilenciado])
	{
	    if ( !PlayersDataOnline[playerid][InCamera] )
	    {
		    if ( strlen(cmdtext) > 1 )
		    {
		    	printf("%s[%i] || %s", PlayersDataOnline[playerid][NameOnline], playerid, cmdtext);

		        PlayersDataOnline[playerid][IsAFK] = false;

				// COMANDO: /Ayuda
				if (strfind(cmdtext, "/Ayuda", true) == 0)
				{
				  	if (strcmp("/Ayuda", cmdtext, true, 6) == 0 && strlen(cmdtext) == 6)
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
	      				SendInfoMessage(playerid, 1, "/Copyright - /Reglas - /Duda - /Stats - /Cuenta - /Hora - /Hablar - /Caminar - /Reportar [ID] [Razón]", "Principales: ");
					    SendInfoMessage(playerid, 1, "/Ayuda {Básicos, Canales, Facción, Rangos, Banco, Crear, Coche, Móvil, Casa, Negocio, Estados, Dar, Coger, Dejar, Usar, Otros}", "Info Extra: ");
					    SendInfoMessage(playerid, 1, "/Ayuda {Idiomas, Trabajo, Radio, Tirar, Móvil, Luces, Canales, Aceptar, Llaves, DeathMatch, Carreras, Animaciones 1 - 3}", "Info Extra: ");
						SendInfoMessage(playerid, 1, "Para más información visite nuestros foros en "WEBPAGE". Use /Duda o puede whispear a un admin con /W [ID] [Duda] (Ver /Staff)", " ");
			    	}
			    	// COMANDO: /Ayuda Canales
				  	else if (strcmp("/Ayuda Básicos", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14 ||
							 strcmp("/Ayuda Basicos", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14					  )
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "/Pagar [ID] [Cantidad] - /Bolsa [ID] - /Bolsillos [ID] - /Pasaporte [ID] - /Licencias [ID] - /Idiomas [ID]", "Básicos: ");
					    SendInfoMessage(playerid, 1, "/Ad [Anuncio]- /Nacer - /Online - /Trabajar - /Bar - /Parqueo - /Contrato [ID] [Cantidad] - /Peaje", "Básicos: ");
					    SendInfoMessage(playerid, 1, "/Llamar 911 (LSPD) /Llamar 912 (SFPD) - /Llamar 105 (SFMD) - /Llamar 106 (LSMD) - /Llamar 145 (Taxí) - ", "Básicos: ");
					    SendInfoMessage(playerid, 1, "/Llamar 555 (Taller SF) - /Llamar 888 (CNN) - /Llamar 777 (Taller LS) - /Id [Parte del Nombre] - /Objetos", "Básicos: ");
			    	}
			    	// COMANDO: /Ayuda Canales
				  	else if (strcmp("/Ayuda Canales", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "/Me [Acción] - /Intentar [Acción] - /Ame [Efecto] - /G [Gritar] - /S [Susurrar]", "Canales: ");
			    	}
			    	// COMANDO: /Ayuda Otros
				  	else if (strcmp("/Ayuda Otros", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12)
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "/Dormir - /Nacer - /Nacer Amigo - /Cartera - /Sexo - /Estado - /Staff", "Otros: ");
			    	}
			    	// COMANDO: /Ayuda DeathMatch
				  	else if (strcmp("/Ayuda DeathMatch", cmdtext, true, 17) == 0 && strlen(cmdtext) == 17)
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "/P [General] - /E [Equipo] - /Online Dm", "DeathMatch: ");
				    }
			    	// COMANDO: /Ayuda Carreras
				  	else if (strcmp("/Ayuda Carreras", cmdtext, true, 15) == 0 && strlen(cmdtext) == 15)
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "/Carreras - /Salir Carrera", "Carreras: ");
				    }
			    	// COMANDO: /Ayuda Animaciones 1
				  	else if (strcmp("/Ayuda Animaciones 1", cmdtext, true, 20) == 0 && strlen(cmdtext) == 20)
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "/Anim [Opción] [Número] {1=Loop}", "Animaciones: ");
					    SendInfoMessage(playerid, 1, "/Sentarse - /Acostarse - /Borracho - /Fuck - /Miedo - /Apuntar - /Rendirse - /Mear", "Animaciones Básicas: ");
					    SendInfoMessage(playerid, 1, "/Anim [ATTRACTORS - 2, BAR - 11, BAT - 10, FIRE - 12, PLAYA - 4, GYM - 6, BFINJECT - 3, BICID - 18]", "Animaciones: ");
					    SendInfoMessage(playerid, 1, "/Anim [BICIH - 17, BICIL - 8, BICIS - 19, BICIV - 17, BICI - 3, GOLPE - 11, BMX - 17, BOMBER - 5]", "Animaciones: ");
					    SendInfoMessage(playerid, 1, "/Anim [BOX - 9, BALL - 40, BUDDY - 4, BUS - 8, CAM - 13, CAR - 10, CARRY - 6, CARCHAT - 20, CASINO - 24]", "Animaciones: ");
					    SendInfoMessage(playerid, 1, "/Anim [CHAINSAW - 10, CHOPA - 17, CLOTHES - 12, COACH - 5, COLT - 6, COP - 11, COPD - 3, CRACK - 9]", "Animaciones: ");
					    SendInfoMessage(playerid, 1, "/Anim [CRIB - 4, DAM - 4, DANCE - 12, DEALER - 6, DILDO - 8, DODGE - 3, DOZER - 9, DRIVE - 7, FAT - 17]", "Animaciones: ");
					}
			    	// COMANDO: /Ayuda Animaciones 2
				  	else if (strcmp("/Ayuda Animaciones 2", cmdtext, true, 20) == 0 && strlen(cmdtext) == 20)
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "/Anim [Opción] [Número] {1=Loop}", "Animaciones: ");
						SendInfoMessage(playerid, 1, "/Anim [FIGHTB - 9, FIGHTC - 11, FIGHTD - 9, FIGHTE - 3, FINALE - 15, FINALE2 - 7, FLAME - 0, FLOWERS - 2]", "Animaciones: ");
					    SendInfoMessage(playerid, 1, "/Anim [FOOD - 32, GYMA - 8, GANGS - 32, GHANDS - 19, GHETTO - 6, GOGGLES - 0, GRAFFITI - 1, GRAVE - 2]", "Animaciones: ");
					    SendInfoMessage(playerid, 1, "/Anim [GRENADE - 2, GYMB - 23, HAIR - 12, HEIST - 9, HOUSE - 9, OFFICE - 9, INTSHOP - 7, BUISNESS - 3]", "Animaciones: ");
					    SendInfoMessage(playerid, 1, "/Anim [KART - 3, KISSING - 14, KNIFE - 15, LAPDAN - 1, LOWRIDER - 38, CHASE - 24, END - 7, MEDIC - 0]", "Animaciones: ");
					    SendInfoMessage(playerid, 1, "/Anim [MISC - 40, MTB - 17, LOOKERS - 28, OTB - 10, PARA - 21, PARK - 2]", "Animaciones: "); // MUSCULAR - 16
			    	}
			    	// COMANDO: /Ayuda Animaciones 3
				  	else if (strcmp("/Ayuda Animaciones 3", cmdtext, true, 20) == 0 && strlen(cmdtext) == 20)
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "/Anim [Opción] [Número] {1=Loop}", "Animaciones: ");
					    SendInfoMessage(playerid, 1, "/Anim [PAUL - 11, PLAYER - 3, PLAYID - 4, POLICE - 9, POOL - 20, POOR - 1, PYTHON - 4, QUAD - 16, QUADD - 3]", "Animaciones: ");
					    SendInfoMessage(playerid, 1, "/Anim [RAP - 7, RIFLE - 4, RIOT - 6, ROB - 4, ROCKET - 4, RUSTLER - 4, RYDER - 15, SCRAT - 11, SHAMAL - 4]", "Animaciones: ");
					    SendInfoMessage(playerid, 1, "/Anim [SHOP - 24, SHOTGUN - 2, SILENCED - 3, SMOK - 7, SNIPER - 0, SPRAY - 1, STRIP - 19, SUNBA - 17]", "Animaciones: "); // SKATE - 2
					    SendInfoMessage(playerid, 1, "/Anim [SWAT - 22, SWEET - 6, SWIM - 6, SWORD - 9, TANK - 5, TATTOO - 56, TEC - 3, TRAIN - 3, TRUCK - 16]", "Animaciones: ");
						SendInfoMessage(playerid, 1, "/Anim [UZI - 4, VAN - 7, VENDING - 5, VORTEX - 3, WAYFA - 17, ARMA - 16, WUZI - 11]", "Animaciones: ");
			    	}
			    	// COMANDO: /Ayuda Móvil
				  	else if (strcmp("/Ayuda Móvil", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12 ||
					         strcmp("/Ayuda Movil", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12)
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "/Agenda - /N [Normal] - /Tirar Móvil - /Dar Móvil [ID] - /Llamar [Número] - /C (Colgar) - /D (Descolgar)", "Móvil: ");
					    SendInfoMessage(playerid, 1, "/Estado Móvil - /Ver Saldo - /Tirar Agenda - /Dar Agenda [ID] - /SMS [Número] - /Altavoz", "Móvil: ");
			    	}
			    	// COMANDO: /Ayuda Habilidades
				  	else if (strcmp("/Ayuda Habilidades", cmdtext, true, 18) == 0 && strlen(cmdtext) == 18)
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "1 - Normal", "Habilidades: ");
					    SendInfoMessage(playerid, 1, "2 - Boxeo", "Habilidades: ");
					    SendInfoMessage(playerid, 1, "3 - Kneehead", "Habilidades: ");
					    SendInfoMessage(playerid, 1, "4 - Kungfu", "Habilidades: ");
					    SendInfoMessage(playerid, 1, "5 - Elbow", "Habilidades: ");
					    SendInfoMessage(playerid, 1, "6 - Grabkick", "Habilidades: ");
			    	}
			    	// COMANDO: /Ayuda Idiomas
				  	else if (strcmp("/Ayuda Idiomas", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "/Al [Alemán] - /Fr [Francés] - /Po [Portugés] - /It [Italiano] - /In [Inglés] - /Ja [Japonés]", "Idiomas: ");
			    	}
		    	// COMANDO: /Ayuda Llaves
				  	else if (strcmp("/Ayuda Llaves", cmdtext, true, 13) == 0 && strlen(cmdtext) == 13)
			    	{
						SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "/Llaves Coche - /Llaves Puerta - /Llaves PuertaEx - /Llaves Facción - /Llaves Refrigerador - /Llaves Casa", "Llaves: ");
					    SendInfoMessage(playerid, 1, "/Llaves Armario - /Llaves Garage - /Llaves GarageEx - /Llaves Amigos - /Llaves Maletero", "Llaves: ");

			    	}
			    	// COMANDO: /Ayuda Estados
				  	else if (strcmp("/Ayuda Estados", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "/Estado OOC - /Estado Family - /Estado Radio - /Estado CNN - /Estado Móvil - /Estado Trabajo", "Estados: ");
			    	}
			    	// COMANDO: /Ayuda Tirar
				  	else if (strcmp("/Ayuda Tirar", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12)
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "/Tirar Coche [ID]- /Tirar Móvil - /Tirar Dados - /Tirar Patines - /Tirar Chaleco - /Tirar Arma - /Tirar Agenda", "Tirar: ");
					    SendInfoMessage(playerid, 1, "/Tirar Artículo [ID_Bolsa] - /Tirar Cartera [ID_Cartera]", "Tirar: ");
			    	}
			    	// COMANDO: /Ayuda Dar
				  	else if (strcmp("/Ayuda Dar", cmdtext, true, 10) == 0 && strlen(cmdtext) == 10)
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "/Dar Arma [ID] - /Dar ArmaEx [ID] [Munición] - /Dar Chaleco [ID] - /Dar Drogas [ID] [Cantidad]", "Dar: ");
					    SendInfoMessage(playerid, 1, "/Dar Ganzúas [ID] [Cantidad] - /Dar Materiales [ID] [Cantidad] - /Dar Bombas [ID] [Cantidad] - /Dar Llaves [ID]", "Dar: ");
					    SendInfoMessage(playerid, 1, "/Dar Extorsión [ID] - /Dar Dados [ID] - /Dar Patines [ID] - /Dar Móvil [ID] - /Dar Agenda [ID] - /Dar Bolsa [ID]", "Dar: ");
					    SendInfoMessage(playerid, 1, "/Dar Artículo [ID] [ID_Bolsa] - /Dar Cartera [ID] [ID_Cartera]", "Dar: ");
			    	}
			    	// COMANDO: /Ayuda Radio
				  	else if (strcmp("/Ayuda Radio", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12)
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "/R Radio] - /Cambiar Frecuencia - /Ver Frecuencia - /Estado Radio", "Radio: ");
			    	}
			    	// COMANDO: /Ayuda Trabajo
				  	else if (strcmp("/Ayuda Trabajo", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
			    	{
			    	    if ( PlayersData[playerid][Job] != NINGUNO )
			    	    {
						    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
			    	        if ( PlayersData[playerid][Job] == PESCA )
			    	        {
						    	SendInfoMessage(playerid, 1, "/Pescar - /Vender Peces", "Pesca: ");
			    	        }
			    	        else if ( PlayersData[playerid][Job] == VENDEDOR_MOVIL )
			    	        {
						    	SendInfoMessage(playerid, 1, "/Vender Móvil [ID] [Precio] [Número]", "Vendedor de Móviles: ");
							}
			    	    }
			    	    else
			    	    {
							SendInfoMessage(playerid, 0, "963", "Tú no tienes trabajo");
						}
			    	}
			    	// COMANDO: /Ayuda Facción
				  	else if (strcmp("/Ayuda Facción", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14 ||
					         strcmp("/Ayuda Faccion", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
			    	{
			    	    if ( PlayersData[playerid][Faccion] != CIVIL )
			    	    {
						    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
			    	        if ( PlayersData[playerid][Rango] == 0 )
			    	        {
						    	SendInfoMessage(playerid, 1, "/Llaves Coche - /Invitar [ID] - /Rango [ID] [ID_RANGO] - /Expulsar [ID]", "Facción: ");
						    	SendInfoMessage(playerid, 1, "/Consultar Facción - /Depositar Facción [Cantidad] - /Retirar Facción [Cantidad]", "Facción: ");
					    	}
			    	        if ( PlayersData[playerid][Rango] <= 1 )
			    	        {
						    	SendInfoMessage(playerid, 1, "/Asignar [ID] - /Desasignar [ID] [SLOT] - /Ver Horas [ID] - /Reiniciar Horas [ID] - /Escoger Spawn [ID] [Spawnid]", "Facción: ");
			    	        }
						    // GOBIERNO
							if ( PlayersData[playerid][Faccion] == GOBIERNO )
							{
							    SendInfoMessage(playerid, 1, "/Gob [Texto] - /Ver Deposito - /Cambiar Ciudad [ID] - /Casar [ID] [ID]- /Divorciar [ID] [ID]", "Facción: ");
							}
						    // LICENCIEROS
							else if ( PlayersData[playerid][Faccion] == LICENCIEROS )
							{
							    SendInfoMessage(playerid, 1, "/Dar Idioma Alemán [ID] - /Dar Idioma Francés [ID] - /Dar Idioma Portugués [ID] - /Dar Idioma Italiano [ID]", "Facción: ");
							    SendInfoMessage(playerid, 1, "/Dar Idioma Inglés [ID] - /Dar Idioma Japonés [ID] - /Dar LicenciaArmas [ID] - /Dar Licencia Coche [ID]", "Facción: ");
							    SendInfoMessage(playerid, 1, "/Dar Licencia Camión [ID] - /Dar Licencia Moto [ID] - /Dar Licencia Vuelo [ID] - /Dar Licencia Bote [ID]", "Facción: ");
							    SendInfoMessage(playerid, 1, "/Dar Licencia Pesca [ID] - /Dar Licencia Tren [ID] - /Dar Habilidad [ID] [ID_Habilidad] - /Prueba [ID]", "Facción: ");
							    SendInfoMessage(playerid, 1, "/Ayuda Habilidades", "Facción: ");
							}
						    // TRAFICANTES
							else if ( PlayersData[playerid][Faccion] == TRAFICANTES )
							{
							    SendInfoMessage(playerid, 1, "/Retirar Almacén [Cantidad] - /Almacén - /Vender Drogas [ID] [Cantidad] [Precio] - /Obtener Drogas", "Facción: ");
							    SendInfoMessage(playerid, 1, "/Llaves Almacén - /Consultar Almacén - /Depositar Almacén [Cantidad] - /Retirar Almacén [Cantidad]", "Facción: ");
							}
						    // LCN
							else if ( PlayersData[playerid][Faccion] == LCN )
							{
							    SendInfoMessage(playerid, 1, "/Crear Arma - /Almacén - /Llaves Almacén - /Consultar Almacén - /Depositar Almacén [Cantidad]", "Facción: ");
							    SendInfoMessage(playerid, 1, "/Retirar Almacén [Cantidad] - /Atar [ID]", "Facción: ");
							}
							// YKZ
							else if ( PlayersData[playerid][Faccion] == YKZ )
							{
							    SendInfoMessage(playerid, 1, "/Crear Arma - /Almacén - /Llaves Almacén - /Consultar Almacén - /Depositar Almacén [Cantidad]", "Facción: ");
							    SendInfoMessage(playerid, 1, "/Retirar Almacén [Cantidad] - /Atar [ID]", "Facción: ");
							}
							// TAXI
							else if ( PlayersData[playerid][Faccion] == TAXI )
							{
							    SendInfoMessage(playerid, 1, "/Llamadas - /Estado Trabajo - /Estado Taxí - /Tren [Anuncio] - /Informar [Informe]", "Facción: ");
							}
							// SFPD
							else if ( PlayersData[playerid][Faccion] == SFPD )
							{
							    SendInfoMessage(playerid, 1, "/Llamadas - /Quitar Licencia Armas [ID] - /Quitar Licencia Coche [ID] - /Quitar Licencia Camión [ID]", "Facción: ");
							    SendInfoMessage(playerid, 1, "/Quitar Licencia Vuelo [ID] - /Quitar Licencia Bote [ID] - /Quitar Licencia Pesca [ID] - /Quitar Licencia Moto [ID]", "Facción: ");
							    SendInfoMessage(playerid, 1, "/Quitar Licencia Tren [ID] - /Multar [ID] [Precio] [Razón] - /Esposar [ID] - /Recoger - /Poner Uniforme - /Sirena", "Facción: ");
							    SendInfoMessage(playerid, 1, "/Poner Equipo [ID_EQUIPO] - /Chequear [ID] - /Arrestar [ID] [Tiempo] - /Poner Candado [Razón] - /Meg [Texto]", "Facción: ");
							    SendInfoMessage(playerid, 1, "/Decomisar [ID] - /Meter [ID] - /Autorizar [ID] - /Desactivar Bomba - /Alarmas - /Rg [Radio General] - /Estado Rg", "Facción: ");
							    SendInfoMessage(playerid, 1, "/Poner Cono - /Poner Valla - /Poner Pincho", "Facción: ");
							}
							// NFS
							else if ( PlayersData[playerid][Faccion] == NFS )
							{
							    SendInfoMessage(playerid, 1, "/Vender Coche [ID] - /Precio Coche - /Aparcar NFS - /Dropear", "Facción: ");
							}
							// SFMD
							else if ( PlayersData[playerid][Faccion] == SFMD )
							{
							    SendInfoMessage(playerid, 1, "/Llamadas - /Llamadas Bomberos - /Curar [ID] - /Estado Trabajo - /Obtener Extintor - /Debilitar Incendio", "Facción: ");
							    SendInfoMessage(playerid, 1, "/Curar Enfermedad [ID] - /Poner Cono - /Poner Valla - /Recoger - /Rg [Radio General] - /Estado Rg", "Facción: ");
							    SendInfoMessage(playerid, 1, "/Examinar Enfermedad [ID]", "Facción: ");
							}
							// CNN
							else if ( PlayersData[playerid][Faccion] == CNN )
							{
							    SendInfoMessage(playerid, 1, "/Na [Narrar] - /Tr [Transmitir] - /Entrevistar [ID] - /Sacar [ID] - /Finalizar Entrevista - /Obtener Cámara", "Facción: ");
							    SendInfoMessage(playerid, 1, "/Conectar [Número] - /Desconectar - /En [Texto]", "Facción: ");
							}
							// ADP
							else if ( PlayersData[playerid][Faccion] == ADP )
							{
							    SendInfoMessage(playerid, 1, "/Localizar Coche [Matrícula] - /Localizar Persona [ID] - /Datos [ID] - /Proteger [ID] - /Servicio [ID] [Precio] [Razón]", "Facción: ");
							}
							// CAMIONEROS
							else if ( PlayersData[playerid][Faccion] == CAMIONEROS )
							{
							    SendInfoMessage(playerid, 1, "/Obtener Mercancía - /Depositar Mercancía - /Abastecer Gasolinera - /Abastecer Negocio - /Ver Precio", "Facción: ");
							    SendInfoMessage(playerid, 1, "/Abastecer Almacén - /Almacén - /Llaves Almacén - /Consultar Almacén - /Depositar Almacén [Cantidad]", "Facción: ");
							    SendInfoMessage(playerid, 1, "/Retirar Almacén [Cantidad] - /Poner Cono - /Recoger - /Ver Deposito", "Facción: ");
							}
							// TALLER_SF
							else if ( PlayersData[playerid][Faccion] == TALLER_SF)
							{
							    SendInfoMessage(playerid, 1, "/Llamadas - /Taller - /Reparar [ID] [Precio] - /Factura [ID] [Precio] [Razón] - /Echar Aceíte", "Facción: ");
							    SendInfoMessage(playerid, 1, "/Pistas - /Reparar [ID] [Precio] - /Vender Ganzúas [ID] [Precio] - /Aceíte [ID] [Precio]", "Facción: ");
							}
							// LSPD
							else if ( PlayersData[playerid][Faccion] == LSPD )
							{
							    SendInfoMessage(playerid, 1, "/Llamadas - /Quitar Licencia Armas [ID] - /Quitar Licencia Coche [ID] - /Quitar Licencia Camión [ID]", "Facción: ");
							    SendInfoMessage(playerid, 1, "/Quitar Licencia Vuelo [ID] - /Quitar Licencia Bote [ID] - /Quitar Licencia Pesca [ID] - /Quitar Licencia Moto [ID]", "Facción: ");
							    SendInfoMessage(playerid, 1, "/Quitar Licencia Tren [ID] - /Multar [ID] [Precio] [Razón] - /Esposar [ID] - /Recoger - /Poner Uniforme - /Sirena", "Facción: ");
							    SendInfoMessage(playerid, 1, "/Poner Equipo [ID_EQUIPO] - /Chequear [ID] - /Arrestar [ID] [Tiempo] - /Poner Candado [Razón] - /Meg [Texto]", "Facción: ");
							    SendInfoMessage(playerid, 1, "/Decomisar [ID] - /Meter [ID] - /Autorizar [ID] - /Desactivar Bomba - /Alarmas - /Rg [Radio General] - /Estado Rg", "Facción: ");
							    SendInfoMessage(playerid, 1, "/Poner Cono - /Poner Valla - /Poner Pincho", "Facción: ");
							}
							// CONTRABANDISTAS
							else if ( PlayersData[playerid][Faccion] == CONTRABANDISTAS )
							{
							    SendInfoMessage(playerid, 1, "/Obtener Mercancía - /Depositar Mercancía - /Abastecer Tienda - /Ver Precio", "Facción: ");
							    SendInfoMessage(playerid, 1, "/Abastecer Almacén - /Almacén - /Llaves Almacén - /Consultar Almacén - /Depositar Almacén [Cantidad]", "Facción: ");
							    SendInfoMessage(playerid, 1, "/Retirar Almacén [Cantidad]", "Facción: ");
							}
							// SICARIOS
							else if ( PlayersData[playerid][Faccion] == SICARIOS )
							{
							    SendInfoMessage(playerid, 1, "/Atar [ID] - /Crear Arma - /Bombas - /Desactivar Bomba - /Ver Bomba - /Poner Bomba [Tipo] - /Detonar Todas", "Facción: ");
							}
							// TALLER_LS
							else if ( PlayersData[playerid][Faccion] == TALLER_LS)
							{
							    SendInfoMessage(playerid, 1, "/Llamadas - /Taller - /Reparar [ID] [Precio] - /Factura [ID] [Precio] [Razón] - /Echar Aceíte", "Facción: ");
							    SendInfoMessage(playerid, 1, "/Pistas - /Reparar [ID] [Precio] - /Vender Ganzúas [ID] [Precio] - /Aceíte [ID] [Precio]", "Facción: ");
							}
							// COLTS
							else if ( PlayersData[playerid][Faccion] == COLTS )
							{
							    if ( PlayersData[playerid][Rango] == 0 )
							    {
								    SendInfoMessage(playerid, 1, "/Robar Local", "Facción: ");
							    }
							    SendInfoMessage(playerid, 1, "/Obtener Bate - /Atar [ID] - /Terminar Robo", "Facción: ");
							}
							// AK
							else if ( PlayersData[playerid][Faccion] == AK)
							{
							    if ( PlayersData[playerid][Rango] == 0 )
							    {
								    SendInfoMessage(playerid, 1, "/Robar Local", "Facción: ");
							    }
							    SendInfoMessage(playerid, 1, "/Obtener Bate - /Atar [ID] - /Terminar Robo", "Facción: ");
							}
							// VELTRAN
							else if ( PlayersData[playerid][Faccion] == VELTRAN)
							{
							    if ( PlayersData[playerid][Rango] == 0 )
							    {
								    SendInfoMessage(playerid, 1, "/Robar Local", "Facción: ");
							    }
							    SendInfoMessage(playerid, 1, "/Obtener Bate - /Atar [ID] - /Terminar Robo", "Facción: ");
							}
							// HEORS
							else if ( PlayersData[playerid][Faccion] == HEORS)
							{
							    if ( PlayersData[playerid][Rango] == 0 )
							    {
								    SendInfoMessage(playerid, 1, "/Robar Local", "Facción: ");
							    }
							    SendInfoMessage(playerid, 1, "/Obtener Bate - /Atar [ID] - /Terminar Robo", "Facción: ");
							}
							// LSMD
							else if ( PlayersData[playerid][Faccion] == LSMD )
							{
							    SendInfoMessage(playerid, 1, "/Llamadas - /Llamadas Bomberos - /Curar [ID] - /Estado Trabajo - /Obtener Extintor - /Debilitar Incendio", "Facción: ");
							    SendInfoMessage(playerid, 1, "/Curar Enfermedad [ID] - /Poner Cono - /Poner Valla - /Recoger - /Rg [Radio General] - /Estado Rg", "Facción: ");
							    SendInfoMessage(playerid, 1, "/Examinar Enfermedad [ID]", "Facción: ");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "381", "Tu facción no tiene comandos");
						}
			    	}
			    	// COMANDO: /Ayuda Luces
				  	else if (strcmp("/Ayuda Luces", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12)
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "/Luces - /Izquierda - /Derecha - /Estacionamiento", "Luces: ");
			    	}
			    	// COMANDO: /Ayuda Coche
				  	else if (strcmp("/Ayuda Coche", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12)
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "/Llaves Coche - /Aparcar - /Vender Mi Coche - /Dar Llaves [ID] - /Maletero - /Matrícula - /Papeles [ID] - /Llenar Lata", "Coche: ");
					    SendInfoMessage(playerid, 1, "/Echar Lata - /Tiempo Coche - /Llenar Deposito [Cantidad]- /Apagar - /Apagar Alarma - /Encender - /Encender Alarma - /Puente", "Coche: ");
					    SendInfoMessage(playerid, 1, "/Estado Alarma - /Llaves Maletero - /Estado Capó - /Robar Gas - /Ayuda Coger - /Ayuda Dejar - /Estéreo - /Guantera", "Coche: ");
					    SendInfoMessage(playerid, 1, "/Llaves Guantera", "Coche: ");
			    	}
			    	// COMANDO: /Ayuda Casa
				  	else if (strcmp("/Ayuda Casa", cmdtext, true, 11) == 0 && strlen(cmdtext) == 11)
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "/Llaves Casa - /Llaves Armario - /Llaves Garage - /Comprar Casa - /Vender Casa - /Cambiar Precio Alquiler [Precio]", "Casa: ");
					    SendInfoMessage(playerid, 1, "/Desalojar Todos - /Desalojar [ID] - /Alquilar - /Consultar Casa - /Retirar Casa - /Timbre - /Info Casa - /Armario", "Casa: ");
					    SendInfoMessage(playerid, 1, "/Dar Llaves Amigo [ID] - /Llaves Amigos - /Llaves Refrigerador - /Refrigerador - /Cocinar [ID_Refrigerador]", "Casa: ");
					    SendInfoMessage(playerid, 1, "/Ayuda Coger - /Ayuda Dejar - /Música - /Gaveta - /Llaves Gaveta", "Casa: ");
			    	}
			    	// COMANDO: /Ayuda Banco
				  	else if (strcmp("/Ayuda Banco", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12)
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "/Banco - /Consultar Cajero - /Depositar Cajero [Cantidad] - /RetirarCajero [Cantidad] - /Crear Cheque Efectivo [ID] [Cantidad]", "Banco: ");
					    SendInfoMessage(playerid, 1, "/Crear Cheque Personal [ID] [Cantidad]", "Banco: ");
			    	}
			    	// COMANDO: /Ayuda Aceptar
				  	else if (strcmp("/Ayuda Aceptar", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "/Aceptar Invite - /Aceptar Coche - /Aceptar Contrato - /Aceptar Factura - /Aceptar Reparación", "Aceptar: ");
					    SendInfoMessage(playerid, 1, "/Aceptar Protección - /Aceptar Drogas - /Aceptar Multa - /Aceptar Ganzúas - /Aceptar Aceíte", "Aceptar: ");
					    SendInfoMessage(playerid, 1, "/Aceptar Servicios - /Aceptar Sexo - /Aceptar Móvil", "Aceptar: ");
			    	}
			    	// COMANDO: /Ayuda Coger
				  	else if (strcmp("/Ayuda Coger", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12)
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "/Coger Arma - /Coger ArmaEx [ID_SLOT] - /Coger Chaleco - /Coger Drogas [Cantidad] - /Dar Ganzúas [Cantidad]", "Coger: ");
					    SendInfoMessage(playerid, 1, "/Coger Materiales [Cantidad] - /Coger Bombas [Cantidad] - /Coger Artículo [ID_Refrigerador] - /Coger Objeto", "Coger: ");
					    SendInfoMessage(playerid, 1, "/Coger ObjetoEx [ID_SLOT]", "Coger: ");
			    	}
			    	// COMANDO: /Ayuda Usar
				  	else if (strcmp("/Ayuda Usar", cmdtext, true, 11) == 0 && strlen(cmdtext) == 11)
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "/Usar Bolsa [ID_Bolsa] - /Usar Refrigerador [ID_Refrigerador]", "Usar: ");
			    	}
			    	// COMANDO: /Ayuda Quitar
				  	else if (strcmp("/Ayuda Quitar", cmdtext, true, 13) == 0 && strlen(cmdtext) == 13)
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "/Quitar Extorsión [ID] - /Quitar Arma [ID]", "Quitar: ");
			    	}
			    	// COMANDO: /Ayuda Dejar
				  	else if (strcmp("/Ayuda Dejar", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12)
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "/Dejar Arma - /Dejar ArmaEx [ID_SLOT] - /Dejar Chaleco - /Dejar Drogas [Cantidad] - /Dejar Ganzúas [Cantidad]", "Dejar: ");
					    SendInfoMessage(playerid, 1, "/Dejar Materiales [Cantidad] - /Dejar Bombas [Cantidad] - /Dejar Artículo [ID_Bolsa]", "Dejar: ");
			    	}
			    	// COMANDO: /Ayuda Canales
				  	else if (strcmp("/Ayuda Canales", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "/O [OOC General] - /B [OOC Local] - /W [ID] [Duda] - /N [Fuera de Móvil]", "Canales: ");
					    SendInfoMessage(playerid, 1, "/F [Family] - /R [Radio] - /Cambiar Frecuencia", "Canales: ");
			    	}
			    	// COMANDO: /Ayuda Rangos
				  	else if (strcmp("/Ayuda Rangos", cmdtext, true, 13) == 0 && strlen(cmdtext) == 13)
			    	{
			    	    if ( PlayersData[playerid][Faccion] != CIVIL )
			    	    {
			    	        new MsgRangos[MAX_TEXT_CHAT];
	       				    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
							for (new i = 0; i <= GetMaxFaccionRango(PlayersData[playerid][Faccion]); i++)
							{
							    format(MsgRangos, sizeof(MsgRangos), "%i - %s", i + 1, FaccionesRangos[PlayersData[playerid][Faccion]][i]);
	   				    		SendInfoMessage(playerid, 1, MsgRangos, "Rango: ");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "182", "Tu facción no tiene rangos");
						}
			    	}

			    	// COMANDO: /Ayuda Crear
				  	else if (strcmp("/Ayuda Crear", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12)
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "/Crear Arma - /Crear Cheque Efectivo [ID] [Cantidad] - /Crear Cheque Personal [ID] [Cantidad]", "Crear: ");
			    	}
			    	// COMANDO: /Ayuda Rangos
				  	else if (strcmp("/Ayuda Negocio", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
			    	{
					    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
					    SendInfoMessage(playerid, 1, "/Comprar Negocio - /Vender Negocio - /Consultar Negocio - /Retirar Negocio [Cantidad] - /Depositar Negocio [Cantidad]", "Negocios: ");
					    SendInfoMessage(playerid, 1, "/Cambiar Nombre [Nuevo Nombre] - /Cambiar Precio Entrada [Nuevo Precio] - /Cambiar Precio Materiales [Nuevo Precio]", "Negocios: ");
					    SendInfoMessage(playerid, 1, "/Dar Extorsión [ID] - /Quitar Extorsión [ID] - /Retirar Extorsión - /Consultar Extorsión - /Llaves Negocio - /Info Negocio", "Negocios: ");
			    	}
					// COMANDO: /Ayuda Owned
				  	else if (strcmp("/Ayuda Owned", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12)
				    {
						if (PlayersData[playerid][Admin] >= 1)
						{
							SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
		      				SendInfoMessage(playerid, 1, "/AdminOn - /A [Texto] - /Estado Whisper - /Test [ID] - /Borrar - /Jail [ID] [Tiempo] [Razón]",																											"Owned Level 1: ");
		      				SendInfoMessage(playerid, 1, "/Kick [ID] [Razón] - /Revisar [ID] - /Traer [ID] - /Ir [ID] - /Res [ID] [DUDA] - /Espectar [ID]",													"Owned Level 1: ");
		      				SendInfoMessage(playerid, 1, "/Ver - /Ip [Ip]", 																																			"Owned Level 1: ");
							if (PlayersData[playerid][Admin] >= 2)
							{
			      				SendInfoMessage(playerid, 1, "/Spawn [ID] - /Parar [ID] - /Warn [ID] [Razón] - /Tutorial [ID] - /Teles [ID_TELE]", 															"Owned Level 2: ");
					   	   		if (PlayersData[playerid][Admin] >= 3)
								{
				      				SendInfoMessage(playerid, 1, "/Estado Todos - /Número [Número] - /Respawn [ID] - /Ban [ID] [Razón] - /Silenciar [ID] - /Matar [ID]",									"Owned Level 3: ");
				      				SendInfoMessage(playerid, 1, "/Vida [ID] - /Chaleco [ID]",																									"Owned Level 3: ");
						   	   		if (PlayersData[playerid][Admin] >= 4)
									{
					      				SendInfoMessage(playerid, 1, "/Clima [Tipo] - /Recoger Todos - /Tele [InteriorID] [X] [Y] [Z]", 																	"Owned Level 4: ");
							   	   		if (PlayersData[playerid][Admin] >= 5)
										{
						      				SendInfoMessage(playerid, 1, "/Respawn Facción [ID_Facción] - /Estado Dudas - /Limpiar [ID]",																	"Owned Level 5: ");
								   	   		if (PlayersData[playerid][Admin] >= 6)
											{
							      				SendInfoMessage(playerid, 1, "/ICoche - /ICocheEx [ID] - /Skin [ID] - /Race [ID]", 																			"Owned Level 6: ");
									   	   		if (PlayersData[playerid][Admin] >= 7)
												{
								      				SendInfoMessage(playerid, 1, "/Borrar Warn [ID] - /DivorciarEx [ID] - /BanEx [Nombre_Del_Jugador] - /Editar Pistas - /StatsEx [ID]", 					"Owned Level 7: ");
								      				SendInfoMessage(playerid, 1, "/IrC [ID_Coche] - IrN [ID_Negocio] - /IrCa [ID_Casa] - /Incendios - /Desactivar Bomba Todos - /Respawn Todos", 			"Owned Level 7: ");
								      				SendInfoMessage(playerid, 1, "/Enfermar [ID] [ID_Enfermedad] - /Cnivel [Nivel] - /Nnivel [Nivel] - /Crear Incendio [ID_Casa] - /AparcarEx", 			"Owned Level 7: ");
								      				SendInfoMessage(playerid, 1, "/TraerC [ID_COCHE] - /Desbanear [Nombre_Del_Jugador] - /DmArmas - /Dm Equipo - /Matar DM - /DM [ID] [Equipo]", 			"Owned Level 7: ");
								      				SendInfoMessage(playerid, 1, "/SkinDM [Equipo] [Skin_ID] [Equipo] - /FacciónEx [Nombre_Apellido] [ID_Faccion] [Rango] - /DM Off", 						"Owned Level 7: ");
											 		SendInfoMessage(playerid, 1, "/Facción [ID] [ID_Facción] [Rango] - /Respawn TodosEx - /Nombre [ID] [Nombre]", 											"Owned Level 7: ");
										   	   		if (PlayersData[playerid][Admin] >= 8)
													{
									      				SendInfoMessage(playerid, 1, "/Cambiar Logo [Nuevo_Logo] - /Reiniciar - /Map Point [Point]", 		"Owned Level 8: ");
									      				SendInfoMessage(playerid, 1, "/Vcasa - /Vnegocio - /Ctipo [ID] - /Cprecio [Precio] - /Ntipo [ID] - /Nprecio [Precio] - /CCambiar [ID_COCHE]", 		"Owned Level 8: ");
														SendInfoMessage(playerid, 1, "/Map Off - /SpawnDM [Equipo]- /CPos [ID_Casa] - /NPos [ID_Negocio] - /Traerc Bug - /VCoche - /Gtipo [ID]", 			"Owned Level 8: ");
									      				SendInfoMessage(playerid, 1, "/Crear Negocio [ID] [Precio] [Nivel] - /Crear Casa [ID] [Precio] [Nivel] - /Info Garage - /Garages [ID_Casa]", 		"Owned Level 8: ");
									      				SendInfoMessage(playerid, 1, "/Ver Design - /Dg A (Afuera) - /Dg C (Coche) - /Dg D (Dentro) - /Dg Rand [ID_Casa] [ID_Garage] - /Map",				"Owned Level 8: ");
									      				SendInfoMessage(playerid, 1, "/Crear Garage [ID_Casa] [Tipo_Garage] - /Design Garage [ID_Design] - /Dg dP [ID_Casa] [ID_Garage]", 					"Owned Level 8: ");
									      				SendInfoMessage(playerid, 1, "/Dg aP [ID_Casa] [ID_Garage] - /Dg cP [ID_Casa] [ID_Garage] - /Server Stats - /Cerrar Servidor",		 				"Owned Level 8: ");
									      				SendInfoMessage(playerid, 1, "/Cambiar Password [Nombre_Apellido] [Nueva Passowrd]", 																"Owned Level 8: ");
											   	   		if (PlayersData[playerid][Admin] >= 9)
														{
										      				SendInfoMessage(playerid, 1, "/Staff [ID] [Nivel] - /Estado Commands - /MsgEX [Estilo] [Texto]", 																			"Owed Level Líder: ");
														}
								      				}
							      				}
						      				}
					      				}
						   	   		}
					   	   		}
					   	   	}
						}
						else
						{
							SendInfoMessage(playerid, 0, "101", "Tú no tienes acceso a el comando /Ayuda Owned.");
						}
					}
			    	else
					{
						SendInfoMessage(playerid, 0, "102", "Quizás quiso decir: /Ayuda");
					}
				}
				// COMANDO: /Reglas
			  	else if (strcmp("/Reglas", cmdtext, true, 7) == 0 && strlen(cmdtext) == 7)
		    	{
				    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
				    SendInfoMessage(playerid, 1, " - No se permite nada de lo siguiente:", "Reglas: ");
				    SendInfoMessage(playerid, 1, "/DM - DeathMatch", "Reglas: ");
				    SendInfoMessage(playerid, 1, "/CK - CarKill", "Reglas: ");
				    SendInfoMessage(playerid, 1, "/DB - DriverBy", "Reglas: ");
				    SendInfoMessage(playerid, 1, "/MG - MetaGaming", "Reglas: ");
				    SendInfoMessage(playerid, 1, "/PG - PowerGaming", "Reglas: ");
				    SendInfoMessage(playerid, 1, "/Flood - Flood", "Reglas: ");
				    SendInfoMessage(playerid, 1, "Faltas de respeto entre usuarios", "Reglas: ");
				    SendInfoMessage(playerid, 1, "/CJ - /RK - /HQ", "Otras: ");
				    SendInfoMessage(playerid, 1, " - LA LISTA NO TERMINA ACÁ CONSULTE EL FORO PARA INFORMACIÓN MÁS EXTENSA -", " ");
		    	}
			  	else if (strcmp("/HQ", cmdtext, true, 3) == 0 && strlen(cmdtext) == 3)
		    	{
				    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
				    SendInfoMessage(playerid, 1, "Es entrar dentro o en el area de una facción, sin haber sido llevado por ningún miembro de la misma, y sin Rol", "HeadQuarters: ");
		    	}
			  	else if (strcmp("/RK", cmdtext, true, 3) == 0 && strlen(cmdtext) == 3)
		    	{
				    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
				    SendInfoMessage(playerid, 1, "Es cuando un jugador te mata y tú lo buscas para volverlo a matar. Se supone que cuando mueres no recuerdas nada de lo que te pasó", "RevengeKill: ");
		    	}
			  	else if (strcmp("/CJ", cmdtext, true, 3) == 0 && strlen(cmdtext) == 3)
		    	{
				    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
				    SendInfoMessage(playerid, 1, "Es cuando un jugador va pasando en un vehículo y otro jugador lo saca del vehículo porque si, sin ningún motivo", "CarJacked: ");
		    	}
			  	else if (strcmp("/DM", cmdtext, true, 3) == 0 && strlen(cmdtext) == 3)
		    	{
				    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
				    SendInfoMessage(playerid, 1, "Es cuando un jugador empieza a golpear o mata a otro sin tener motivo", "DeathMatch: ");
		    	}
			  	else if (strcmp("/CK", cmdtext, true, 3) == 0 && strlen(cmdtext) == 3)
		    	{
				    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
				    SendInfoMessage(playerid, 1, "Cuando vamos en un vehículo y atropellamos gente sin motivo alguno, simplemente porque mola", "CarKill: ");
		    	}
			  	else if (strcmp("/DB", cmdtext, true, 3) == 0 && strlen(cmdtext) == 3)
		    	{
				    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
				    SendInfoMessage(playerid, 1, "Si disparas de dentro de un Coche/Moto y te encuentras en el puesto de conductor, allí estás haciendo DriverBy", "DriverBy: ");
		    	}
			  	else if (strcmp("/MG", cmdtext, true, 3) == 0 && strlen(cmdtext) == 3)
		    	{
				    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
				    SendInfoMessage(playerid, 1, "Usar información totalmente OOC y usarla IC, por ejemplo cuando vemos el nombre en la cabeza del jugador", "MetaGaming: ");
				    SendInfoMessage(playerid, 1, "y lo llamamos por su nombre", "MetaGaming: ");
		    	}
			  	else if (strcmp("/PG", cmdtext, true, 3) == 0 && strlen(cmdtext) == 3)
		    	{
				    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
				    SendInfoMessage(playerid, 1, "Es cuando el jugador hace acciones exageradas, que no son posibles en la realidad o dentro del juego", "PowerGaming: ");
		    	}
			  	else if (strcmp("/Flood", cmdtext, true, 6) == 0 && strlen(cmdtext) == 6)
		    	{
				    SendClientMessage(playerid, COLOR_TITULO_DE_AYUDA, TITULO_AYUDA);
				    SendInfoMessage(playerid, 1, "Repetir consecutivamente el mismo texto u similar en 3 o más líneas", "Flood: ");
		    	}
				// COMANDO: /Escoger Spawn [ID] [Spawnid]
				else if (strfind(cmdtext, "/Escoger Spawn ", true) == 0 )
				{
				    if( PlayersData[playerid][Faccion] != CIVIL && PlayersData[playerid][Rango] <= 1 )
				    {
				        new playeridAsignar = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
				        new SpawnIDAsignar = strval(cmdtext[GetPosSpace(cmdtext, 3)]);
					    if ( playerid == playeridAsignar || IsPlayerNear(playerid, playeridAsignar,
							 "1522",
							 "1523",
							 "1524",
							 "El jugador que desea asginarle un spawn no se encuentra conectado",
							 "El jugador que desea asginarle un spawn no se encuentra logueado",
							 "El jugador que desea asginarle un spawn no se encuentra cerca de tí") )
					    {
							if ( PlayersData[playeridAsignar][Faccion] == PlayersData[playerid][Faccion] )
							{
							    if ( SpawnIDAsignar >= 1 && SpawnIDAsignar <= 2 )
							    {
							        SpawnIDAsignar--;
							        if ( FaccionData[PlayersData[playerid][Faccion]][Spawn_X][SpawnIDAsignar] != 0.0 )
							        {
							            if ( PlayersData[playeridAsignar][SpawnFac] != SpawnIDAsignar )
							            {
	       							        PlayersData[playeridAsignar][SpawnFac] = SpawnIDAsignar;
                                            UpdateSpawnPlayer(playerid);
											new MsgAsignadosToPlayer[MAX_TEXT_CHAT];
							                if ( playerid != playeridAsignar )
							                {
												format(MsgAsignadosToPlayer, sizeof(MsgAsignadosToPlayer), "%s te ha cambiado el spawn de facción por el ID %i.", PlayersDataOnline[playerid][NameOnlineFix], PlayersData[playeridAsignar][SpawnFac] + 1);
					                            SendInfoMessage(playeridAsignar, 3, "0", MsgAsignadosToPlayer);
												format(MsgAsignadosToPlayer, sizeof(MsgAsignadosToPlayer), "Le has cambiado el spawn de facción a %s por el ID %i.", PlayersDataOnline[playeridAsignar][NameOnlineFix], PlayersData[playeridAsignar][SpawnFac] + 1);
					                            SendInfoMessage(playerid, 3, "0", MsgAsignadosToPlayer);
				                            }
				                            else
				                            {
												format(MsgAsignadosToPlayer, sizeof(MsgAsignadosToPlayer), "Te has cambiado el spawn de facción al ID %i.", PlayersData[playeridAsignar][SpawnFac] + 1);
					                            SendInfoMessage(playerid, 3, "0", MsgAsignadosToPlayer);
											}
			                            }
			                            else
			                            {
											SendInfoMessage(playerid, 0, "1525", "Ya este jugador tiene ese ID de spawn asiganado.");
										}
		                            }
		                            else
		                            {
										SendInfoMessage(playerid, 0, "1526", "El ID de spawn introducido, no está definido en su facción");
		                            }
	                            }
	                            else
	                            {
									SendInfoMessage(playerid, 0, "1527", "El ID de spawn debe estar comprendido entre 1 y 2.");
								}
						    }
						    else
						    {
								SendInfoMessage(playerid, 0, "1528", "El jugador que desea asignarle un spawn no pertenece a su facción");
							}
					    }
					}
					else
					{
						SendInfoMessage(playerid, 0, "1529", "Usted no es líder ni sub-líder!");
					}
				}
				// COMANDO: /Ver
				else if (strfind(cmdtext, "/Ver", true) == 0)
				{
			//		17-	*		/Ver							- Ver los miembros del Staff que esten Online
					if (strcmp("/Ver", cmdtext, true, 4) == 0 && strlen(cmdtext) == 4)
					{
					    MsgAdminUseCommands(9, playerid, cmdtext);
						if (PlayersData[playerid][Admin] >= 1)
						{
							Comandos_Admin(17, playerid, 0, PlayersData[playerid][Admin], 0, "0");
							return 1;
						}
						else
						{
							SendInfoMessage(playerid, 0, "187", "Tú no tienes acceso a el comando /Ver.");
					        return 1;
						}

					}
					// COMANDO: /Ver Precio
				  	else if ( strcmp("/Ver Precio", cmdtext, true, 11) == 0 && strlen(cmdtext) == 11 )
			    	{
						if ( PlayersData[playerid][Faccion] == CAMIONEROS && PlayersData[playerid][Rango] <= 3 ||
							 PlayersData[playerid][Faccion] == CONTRABANDISTAS && PlayersData[playerid][Rango] <= 3 )
					    {
							if ( PlayersDataOnline[playerid][InPickup] >= NegociosData[1][PickupOutId] &&
					             PlayersDataOnline[playerid][InPickup] <= NegociosData[MAX_BIZZ][PickupOutId] )
					        {
					            if ( NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][Type] >= 6 && PlayersData[playerid][Faccion] == CAMIONEROS )
					            {
							        if ( NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][PricePiece] == 0 )
							        {
							        	SendInfoMessage(playerid, 2, "0", "Este negocio no está aceptando materiales");
									}
									else
									{
									    new MsgVerPrecio[MAX_TEXT_CHAT];
									    format(MsgVerPrecio, sizeof(MsgVerPrecio), "Este negocio paga el material a $%i. Actualmente tiene [%i/5000]", NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][PricePiece], NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][Materiales]);
										SendInfoMessage(playerid, 2, "0", MsgVerPrecio);
									}
								}
								else if ( NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][Type] <= 5 && PlayersData[playerid][Faccion] == CONTRABANDISTAS )
								{
							        if ( NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][PricePiece] == 0 )
							        {
							        	SendInfoMessage(playerid, 2, "0", "Esta tienda no está aceptando materiales");
									}
									else
									{
									    new MsgVerPrecio[MAX_TEXT_CHAT];
									    format(MsgVerPrecio, sizeof(MsgVerPrecio), "Esta tienda paga el material a $%i. Actualmente tiene [%i/5000]", NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][PricePiece], NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][Materiales]);
										SendInfoMessage(playerid, 2, "0", MsgVerPrecio);
									}
								}
						        else
						        {
									SendInfoMessage(playerid, 0, "784", "No puedes ver el precio de compra de este negocio");
								}
					        }
					        else
					        {
								SendInfoMessage(playerid, 0, "785", "No te encuentras en ningún negocio");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "786", "Usted no puedes ver el precio del producto!");
						}
				    }
				    //
					// COMANDO: /Ver Asignados [ID]
					else if (strfind(cmdtext, "/Ver Asignados ", true) == 0 )
					{
					    if( PlayersData[playerid][Faccion] != CIVIL && PlayersData[playerid][Rango] <= 1 )
					    {
						    if ( IsPlayerNear(playerid, strval(cmdtext[15]),
								 "1202",
								 "1203",
								 "1204",
								 "El jugador que desea verle los vehículos asignados no se encuentra conectado",
								 "El jugador que desea verle los vehículos asignados no se encuentra logueado",
								 "El jugador que desea verle los vehículos asignados no se encuentra cerca de tí") )
						    {
								if ( PlayersData[strval(cmdtext[15])][Faccion] == PlayersData[playerid][Faccion] )
								{
									new MsgAsignadosToPlayer[MAX_TEXT_CHAT];
									format(MsgAsignadosToPlayer, sizeof(MsgAsignadosToPlayer), "%s mira los vehículos que tienes asignados con el comando /Ver Asignados.", PlayersDataOnline[playerid][NameOnlineFix]);
		                            SendInfoMessage(strval(cmdtext[15]), 3, "0", MsgAsignadosToPlayer);

									ShowAsignados(strval(cmdtext[15]), playerid);
							    }
							    else
							    {
									SendInfoMessage(playerid, 0, "1358", "El jugador que desea verle los vehículos asignados no pertenece a su facción");
								}
						    }
						}
						else
						{
							SendInfoMessage(playerid, 0, "1205", "Usted no es líder ni sub-líder!");
						}
					}
					// COMANDO: /Ver Horas [ID]
					else if (strfind(cmdtext, "/Ver Horas ", true) == 0 )
					{
					    if( PlayersData[playerid][Faccion] != CIVIL && PlayersData[playerid][Rango] <= 1 )
					    {
						    if ( IsPlayerNear(playerid, strval(cmdtext[11]),
								 "1361",
								 "1362",
								 "1363",
								 "El jugador que desea verle las horas jugadas no se encuentra conectado",
								 "El jugador que desea verle las horas jugadas no se encuentra logueado",
								 "El jugador que desea verle las horas jugadas no se encuentra cerca de tí") )
						    {
								if ( PlayersData[strval(cmdtext[11])][Faccion] == PlayersData[playerid][Faccion] )
								{
									new MsgAsignadosToPlayer[MAX_TEXT_CHAT];
									format(MsgAsignadosToPlayer, sizeof(MsgAsignadosToPlayer), "%s mira las horas jugadas desde el último reinicio de horas con el comando /Ver Horas.", PlayersDataOnline[playerid][NameOnlineFix]);
		                            SendInfoMessage(strval(cmdtext[11]), 3, "0", MsgAsignadosToPlayer);
									format(MsgAsignadosToPlayer, sizeof(MsgAsignadosToPlayer), "%s tiene %i horas jugadas desde el último reinicio de horas.", PlayersDataOnline[strval(cmdtext[11])][NameOnlineFix], PlayersData[strval(cmdtext[11])][HorasWork]);
		                            SendInfoMessage(playerid, 3, "0", MsgAsignadosToPlayer);
							    }
							    else
							    {
									SendInfoMessage(playerid, 0, "1359", "El jugador que desea verle las horas jugadas no pertenece a su facción");
								}
						    }
						}
						else
						{
							SendInfoMessage(playerid, 0, "1360", "Usted no es líder ni sub-líder!");
						}
					}
					//////////--- /Ver Design
					else if (strcmp("/Ver Design", cmdtext, true, 11) == 0 && strlen(cmdtext) == 11)
					{
   					    MsgAdminUseCommands(9, playerid, cmdtext);
						if ( PlayersData[playerid][Admin] >= 8 )
						{
	                        new MsgChangeDesing[MAX_TEXT_CHAT];
	                        format(MsgChangeDesing, sizeof(MsgChangeDesing), "   -  Desing ID [%i]  -", PlayersDataOnline[playerid][DesignGarageId]);
			                SendInfoMessage(playerid, 2, "0", MsgChangeDesing);
	                        format(MsgChangeDesing, sizeof(MsgChangeDesing), "   -  X_Afuera: %f | Y_Afuera: %f  | Z_Afuera: %f | ZZ_Afuera: %f ", GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][Xg], GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][Yg], GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][Zg], GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][ZZg]);
			                SendInfoMessage(playerid, 2, "0", MsgChangeDesing);
	                        format(MsgChangeDesing, sizeof(MsgChangeDesing), "   -  X_Afuera_C: %f | Y_Afuera_C: %f  | Z_Afuera_C: %f | ZZ_Afuera_C: %f ", GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][XgOut], GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][YgOut], GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][ZgOut], GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][ZZgOut]);
			                SendInfoMessage(playerid, 2, "0", MsgChangeDesing);
	                        format(MsgChangeDesing, sizeof(MsgChangeDesing), "   -  X_Dentro: %f | Y_Dentro: %f  | Z_Dentro: %f | ZZ_Dentro: %f ", GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][XgIn], GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][YgIn], GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][ZgIn], GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][ZZgIn]);
			                SendInfoMessage(playerid, 2, "0", MsgChangeDesing);
						}
						else
						{
							SendInfoMessage(playerid, 0, "1169", "No tienes acceso al comando /Ver Design");
						}
					}
					// COMANDO: /Ver Frecuencia
				  	else if ( strcmp("/Ver Frecuencia", cmdtext, true, 15) == 0 && strlen(cmdtext) == 15 )
			    	{
					    if ( FaccionData[PlayersData[playerid][Faccion]][Radio] )
					    {
							if ( PlayersDataOnline[playerid][StateChannelRadio] )
							{
							    new MsgFrecuencia[MAX_TEXT_CHAT];
								Acciones(playerid, 8, "mira en que frecuencia está su radio");
								format(MsgFrecuencia, sizeof(MsgFrecuencia), "Se ecuentra en la frecuencia [%i]", PlayersDataOnline[playerid][Frecuencia] );
								SendInfoMessage(playerid, 2, "0", MsgFrecuencia);
					        }
					        else
					        {
								SendInfoMessage(playerid, 0, "1016", "Tú tienes cerrado el canal Radio personal, abrelo con /Estado Radio y luego usa /Ver Frecuencia");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1017", "Su Facción no tiene canal /R [Radio], no puedes usar /Ver Frecuencia");
						}
			    	}
					// COMANDO: /Ver Saldo
				  	else if ( strcmp("/Ver Saldo", cmdtext, true, 10) == 0 && strlen(cmdtext) == 10 )
			    	{
					    new MsgSaldoCheck[MAX_TEXT_CHAT];
						Acciones(playerid, 8, "chequea su saldo");
						format(MsgSaldoCheck, sizeof(MsgSaldoCheck), "Tiene $%i de saldo en su móvil.", PlayersData[playerid][Saldo] );
						SendInfoMessage(playerid, 2, "0", MsgSaldoCheck);
			    	}
					// COMANDO: /Ver Desposito
				  	else if (strcmp("/Ver Deposito", cmdtext, true, 13) == 0 && strlen(cmdtext) == 13)
				  	{
				  	    if ( PlayersData[playerid][Faccion] == GOBIERNO && PlayersData[playerid][Rango] == 0 ||
   							 PlayersData[playerid][Faccion] == CAMIONEROS && PlayersData[playerid][Rango] <= 3)
				  	    {
					  	    new MyNearGas = GetMyNearGas(playerid);
					  	    if ( MyNearGas != -1 )
					  	    {
					  	        new MsgConsultarDepositoGas[MAX_TEXT_CHAT];
					  	        format(MsgConsultarDepositoGas, sizeof(MsgConsultarDepositoGas), "Esta gasolinera tiene [%i/10000] litros de gas",  Gasolineras[MyNearGas][Fuel]);
								SendInfoMessage(playerid, 2, "0", MsgConsultarDepositoGas);
					  	    }
				  	    }
				  	    else
				  	    {
							SendInfoMessage(playerid, 0, "523", "Usted no es el presidente");
						}
					}
					// COMANDO: /Ver Bomba
				  	else if (strcmp("/Ver Bomba", cmdtext, true, 10) == 0 && strlen(cmdtext) == 10)
				  	{
						if ( PlayersData[playerid][Faccion] == SICARIOS &&
							 PlayersData[playerid][Rango] <= 4 )
					    {
					        new IsBombNear = IsPlayerNearBomba(playerid, 1.5, -1);
					        if ( IsBombNear != -1 )
					        {
							    new MsgVerBomba[MAX_TEXT_CHAT];
							    format(MsgVerBomba, sizeof(MsgVerBomba), "Esta bomba tiene el número de control #%i", IsBombNear);
								SendInfoMessage(playerid, 2, "0", MsgVerBomba);
			            	}
			            	else
			            	{
								SendInfoMessage(playerid, 0, "1300", "No te encuentras cerca de una bomba");
							}
					    }
					    else
					    {
							SendInfoMessage(playerid, 0, "1297", "Usted no puede ver el número de control en una bomba!");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1018", "Quizás quiso decir: /Ver {Frecuencia, Precio, Saldo, Deposito, Asignados, Bomba, Horas [ID]}");
					}
				}
				// COMANDO: /Reiniciar Horas [ID]
				else if (strfind(cmdtext, "/Reiniciar Horas ", true) == 0 )
				{
				    if( PlayersData[playerid][Faccion] != CIVIL && PlayersData[playerid][Rango] <= 1 )
				    {
					    if ( IsPlayerNear(playerid, strval(cmdtext[17]),
							 "1366",
							 "1367",
							 "1368",
							 "El jugador que deseas reiniciarles las horas no se encuentra conectado",
							 "El jugador que deseas reiniciarles las horas no se encuentra logueado",
							 "El jugador que deseas reiniciarles las horas no se encuentra cerca de tí") )
					    {
							if ( PlayersData[strval(cmdtext[17])][Faccion] == PlayersData[playerid][Faccion] )
							{
								new MsgAsignadosToPlayer[MAX_TEXT_CHAT];
								format(MsgAsignadosToPlayer, sizeof(MsgAsignadosToPlayer), "%s te reinicio las horas de trabajo.", PlayersDataOnline[playerid][NameOnlineFix]);
	                            SendInfoMessage(strval(cmdtext[17]), 3, "0", MsgAsignadosToPlayer);
								format(MsgAsignadosToPlayer, sizeof(MsgAsignadosToPlayer), "Reiniciaste las horas de trabajo a %s .", PlayersDataOnline[strval(cmdtext[17])][NameOnlineFix]);
	                            SendInfoMessage(playerid, 3, "0", MsgAsignadosToPlayer);
	                            PlayersData[strval(cmdtext[17])][HorasWork] = 0;
						    }
						    else
						    {
								SendInfoMessage(playerid, 0, "1364", "El jugador que desea verle las horas jugadas no pertenece a su facción");
							}
					    }
					}
					else
					{
						SendInfoMessage(playerid, 0, "1365", "Usted no es líder ni sub-líder!");
					}
				}
				// COMANDO: /Abastecer
				else if (strfind(cmdtext, "/Abastecer", true) == 0)
				{
					// COMANDO: /Abastecer Mercancías
				  	if ( strcmp("/Abastecer Gasolinera", cmdtext, true, 21) == 0 && strlen(cmdtext) == 21 )
			    	{
						if ( PlayersData[playerid][Faccion] == CAMIONEROS && PlayersData[playerid][Rango] <= 3 )
					    {
					        if ( PlayersData[playerid][MyBonus] )
					        {
					            if ( IsPlayerInAnyVehicle(playerid) && GetVehicleModel(GetPlayerVehicleID(playerid)) == 514 ||
									 IsPlayerInAnyVehicle(playerid) && GetVehicleModel(GetPlayerVehicleID(playerid)) == 515 ||
									 IsPlayerInAnyVehicle(playerid) && GetVehicleModel(GetPlayerVehicleID(playerid)) == 456 ||
									 IsPlayerInAnyVehicle(playerid) && GetVehicleModel(GetPlayerVehicleID(playerid)) == 403 ||
									 IsPlayerInAnyVehicle(playerid) && GetVehicleModel(GetPlayerVehicleID(playerid)) == 578 ||
									 IsPlayerInAnyVehicle(playerid) && GetVehicleModel(GetPlayerVehicleID(playerid)) == 454 ||
 									 IsPlayerInAnyVehicle(playerid) && GetVehicleModel(GetPlayerVehicleID(playerid)) == 484 )

					            {
									new MyNearGas = GetMyNearGas(playerid);
							  	    if ( MyNearGas != -1 )
							  	    {
						                if ( Gasolineras[MyNearGas][Fuel] + 2000 <= 10000 )
						                {
											Gasolineras[MyNearGas][Fuel] = Gasolineras[MyNearGas][Fuel] + 2000;
			                                SendInfoMessage(playerid, 3, "0", "Abasteciste con 2000 litros esta gasolinera!");
			                                PlayersData[playerid][MyBonus] = false;
		                                }
										else
										{
											SendInfoMessage(playerid, 0, "798", "El deposito de esta gasolinera esta llena o los 2000 litros más lo que tiene actualmente sobrepasan el límite de 10000 litros");
										}
							  	    }
		  					    }
								else
								{
									SendInfoMessage(playerid, 0, "787", "Suba a un trailer para abastecer una gasolinera");
								}
	  					    }
							else
							{
								SendInfoMessage(playerid, 0, "788", "No tiene mercancías para abastecer una gasolinera");
							}
					    }
						else
						{
							SendInfoMessage(playerid, 0, "789", "Usted no puede abastecer gasolineras!");
						}
			    	}
					// COMANDO: /Abastecer Tienda
				  	else if ( strcmp("/Abastecer Tienda", cmdtext, true, 17) == 0 && strlen(cmdtext) == 17 )
			    	{
						if ( PlayersData[playerid][Faccion] == CONTRABANDISTAS && PlayersData[playerid][Rango] <= 3 )
					    {
							if ( PlayersDataOnline[playerid][InPickup] >= NegociosData[1][PickupOutId] &&
					             PlayersDataOnline[playerid][InPickup] <= NegociosData[MAX_BIZZ][PickupOutId] )
					        {
								new MyNearCar = IsPlayerInNearVehicle(playerid);
								if ( MyNearCar )
								{
								    // DataCars[MyNearCar][Time]
						            if (  MyNearCar > MAX_CAR_DUENO && MyNearCar <= MAX_CAR_FACCION && DataCars[MyNearCar][Time] == PlayersData[playerid][Faccion] )
						            {
										if ( coches_Todos_Maleteros[MyNearCar][10][0] != 0 )
										{
								            if ( NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][Type] <= 5 )
								            {
									            if ( NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][PricePiece] != 0  )
									            {
									                if ( NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][Materiales] + coches_Todos_Maleteros[MyNearCar][10][0] <= 5000 )
									                {
										                if ( NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][Deposito] >= coches_Todos_Maleteros[MyNearCar][10][0] * NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][PricePiece] )
										                {
												            NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][Materiales] = NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][Materiales] + coches_Todos_Maleteros[MyNearCar][10][0];
												            NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][Deposito] = NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][Deposito] -(coches_Todos_Maleteros[MyNearCar][10][0] * NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][PricePiece]);
															FaccionData[CONTRABANDISTAS][Deposito] = FaccionData[CONTRABANDISTAS][Deposito] + (coches_Todos_Maleteros[MyNearCar][10][0] * NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][PricePiece]);

												            new MsgAbastecerNegocio[MAX_TEXT_CHAT];
												            format(MsgAbastecerNegocio, sizeof(MsgAbastecerNegocio), "Has abastecido este negocio con %i materiales, se le ha enviado $%i a la cuenta de la empresa", coches_Todos_Maleteros[MyNearCar][10][0], coches_Todos_Maleteros[MyNearCar][10][0] * NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][PricePiece]);
					                	                    SendInfoMessage(playerid, 3, "0", MsgAbastecerNegocio);
					                	                    coches_Todos_Maleteros[MyNearCar][10][0] = 0;
											            }
												        else
												        {
															SendInfoMessage(playerid, 0, "810", "Esta tienda no le quedá suficiente dinero para comprale todos los materiales del la furgona");
														}
													}
													else
													{
														SendInfoMessage(playerid, 0, "809", "El almacén del la tienda esta lleno o los materiales que quieres depositar ya sobrepasan el límite de 5000");
													}
									            }
										        else
										        {
													SendInfoMessage(playerid, 0, "808", "Esta tienda no esta aceptando compra de materiales, conctacte con el dueño");
												}
								            }
									        else
									        {
												SendInfoMessage(playerid, 0, "807", "Sólo puedes abastecer tiendas de ropa");
											}
										}
										else
										{
											SendInfoMessage(playerid, 0, "806", "No le quedán materiales a esta furgona");
										}
						            }
						            else
						            {
										SendInfoMessage(playerid, 0, "805", "Éste vehículo no sirve para abastecer las tiendas de ropa");
									}
								}
					        }
					        else
					        {
								SendInfoMessage(playerid, 0, "804", "No te encuentras en ninguna Tienda de Ropas");
							}
					    }
						else
						{
							SendInfoMessage(playerid, 0, "803", "Usted no puede abastecer Tiendas!");
						}
			    	}
					// COMANDO: /Abastecer Negocio
				  	else if ( strcmp("/Abastecer Negocio", cmdtext, true, 18) == 0 && strlen(cmdtext) == 18 )
			    	{
						if ( PlayersData[playerid][Faccion] == CAMIONEROS && PlayersData[playerid][Rango] <= 3 )
					    {
							if ( PlayersDataOnline[playerid][InPickup] >= NegociosData[1][PickupOutId] &&
					             PlayersDataOnline[playerid][InPickup] <= NegociosData[MAX_BIZZ][PickupOutId] )
					        {
								new MyNearCar = IsPlayerInNearVehicle(playerid);
								if ( MyNearCar )
								{
						            if ( GetVehicleModel(MyNearCar) == 514 || GetVehicleModel(MyNearCar) == 515 || GetVehicleModel(MyNearCar) == 403 || GetVehicleModel(MyNearCar) == 456 || GetVehicleModel(MyNearCar) == 578)
						            {
										if ( coches_Todos_Maleteros[MyNearCar][10][0] != 0 )
										{
								            if ( NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][Type] >= 6 )
								            {
									            if ( NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][PricePiece] != 0  )
									            {
									                if ( NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][Materiales] + coches_Todos_Maleteros[MyNearCar][10][0] <= 5000 )
									                {
										                if ( NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][Deposito] >= coches_Todos_Maleteros[MyNearCar][10][0] * NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][PricePiece] )
										                {
												            NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][Materiales] = NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][Materiales] + coches_Todos_Maleteros[MyNearCar][10][0];
												            NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][Deposito] = NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][Deposito] -(coches_Todos_Maleteros[MyNearCar][10][0] * NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][PricePiece]);
															FaccionData[CAMIONEROS][Deposito] = FaccionData[CAMIONEROS][Deposito] + (coches_Todos_Maleteros[MyNearCar][10][0] * NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][PricePiece]);

												            new MsgAbastecerNegocio[MAX_TEXT_CHAT];
												            format(MsgAbastecerNegocio, sizeof(MsgAbastecerNegocio), "Has abastecido este negocio con %i materiales, se le ha enviado $%i a la cuenta de la empresa", coches_Todos_Maleteros[MyNearCar][10][0], coches_Todos_Maleteros[MyNearCar][10][0] * NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][PricePiece]);
					                	                    SendInfoMessage(playerid, 3, "0", MsgAbastecerNegocio);
					                	                    coches_Todos_Maleteros[MyNearCar][10][0] = 0;
											            }
												        else
												        {
															SendInfoMessage(playerid, 0, "790", "Este negocio no le quedá suficiente dinero para comprale todos los materiales del camión");
														}
													}
													else
													{
														SendInfoMessage(playerid, 0, "799", "El almacén del negocio esta lleno o los materiales que quieres depositar ya sobrepasan el límite de 5000");
													}
										        }
										        else
										        {
													SendInfoMessage(playerid, 0, "791", "Este negocio no esta aceptando compra de materiales, conctacte con el dueño");
												}
											}
									        else
									        {
												SendInfoMessage(playerid, 0, "792", "No puedes abastecer tiendas de ropa");
											}
										}
										else
										{
											SendInfoMessage(playerid, 0, "793", "No le quedán materiales a este camión");
										}
									}
									else
									{
										SendInfoMessage(playerid, 0, "794", "Éste vehículo no es un camión de materiales, busque uno y aparquelo junto al negocio y luego use (/Abastecer Negocio)");
									}
								}
					        }
					        else
					        {
								SendInfoMessage(playerid, 0, "795", "No te encuentras en ningún negocio");
							}
					    }
						else
						{
							SendInfoMessage(playerid, 0, "796", "Usted no puede abastecer negocios!");
						}
			    	}
					// COMANDO: /Abastecer Almacén
				  	else if ( strcmp("/Abastecer Almacén", cmdtext, true, 18) == 0 && strlen(cmdtext) == 18 ||
					          strcmp("/Abastecer Almacen", cmdtext, true, 18) == 0 && strlen(cmdtext))
			    	{
						if ( PlayersData[playerid][Faccion] == CAMIONEROS && PlayersData[playerid][Rango] <= 3 ||
							 PlayersData[playerid][Faccion] == CONTRABANDISTAS )
					    {
							new FaccionID = -1;

					        if ( IsPlayerInRangeOfPoint(playerid, 10.0,
								 FaccionData[LCN][AlmacenX][0],
								 FaccionData[LCN][AlmacenY][0],
								 FaccionData[LCN][AlmacenZ][0]) )
							{
								FaccionID = LCN;
							}
					        else if ( IsPlayerInRangeOfPoint(playerid, 10.0,
								 FaccionData[YKZ][AlmacenX][0],
								 FaccionData[YKZ][AlmacenY][0],
								 FaccionData[YKZ][AlmacenZ][0]) )
							{
								FaccionID = YKZ;
							}

							if ( FaccionID != -1 )
					        {
								new MyNearCar = IsPlayerInNearVehicle(playerid);
								if ( MyNearCar )
								{
						            if ( GetVehicleModel(MyNearCar) == 514 || GetVehicleModel(MyNearCar) == 515 || GetVehicleModel(MyNearCar) == 403 || GetVehicleModel(MyNearCar) == 456 || GetVehicleModel(MyNearCar) == 578 ||
										 MyNearCar > MAX_CAR_DUENO && MyNearCar <= MAX_CAR_FACCION && DataCars[MyNearCar][Time] == CONTRABANDISTAS )
						            {
										if ( coches_Todos_Maleteros[MyNearCar][10][0] != 0 )
										{
		         							FaccionData[FaccionID][Almacen][0] = FaccionData[FaccionID][Almacen][0] + coches_Todos_Maleteros[MyNearCar][10][0];

											new MsgAbastecerAlmacen[MAX_TEXT_CHAT];
											format(MsgAbastecerAlmacen, sizeof(MsgAbastecerAlmacen), "Has abastecido este almacén con %i materiales", coches_Todos_Maleteros[MyNearCar][10][0]);
											SendInfoMessage(playerid, 3, "0", MsgAbastecerAlmacen);

		         							coches_Todos_Maleteros[MyNearCar][10][0] = 0;
										}
										else
										{
											SendInfoMessage(playerid, 0, "865", "No le quedán materiales a este camión");
										}
									}
									else
									{
										SendInfoMessage(playerid, 0, "866", "Éste vehículo no es un camión o furgona de materiales, busque uno y aparquelo junto al almacén y luego use (/Abastecer Almacén)");
									}
								}
					        }
					        else
					        {
								SendInfoMessage(playerid, 0, "867", "No te encuentras en ningún almacén que puedas abastecer!");
							}
					    }
						else
						{
							SendInfoMessage(playerid, 0, "868", "Usted no puede abastecer almacenes!");
						}
			    	}
					else
					{
						SendInfoMessage(playerid, 0, "797", "Quizás quiso decir: /Abastecer {Gasolinera, Negocio, Tienda, Almacén}");
					}
				}
				// COMANDO: /Obtener
				else if (strfind(cmdtext, "/Obtener", true) == 0)
				{
					// COMANDO: /Obtener Mercancías
				  	if ( strcmp("/Obtener Mercancía", cmdtext, true, 18) == 0 && strlen(cmdtext) == 18 ||
					  	 strcmp("/Obtener Mercancia", cmdtext, true, 18) == 0 && strlen(cmdtext) == 18)
			    	{
						if ( PlayersData[playerid][Faccion] == CAMIONEROS ||
							 PlayersData[playerid][Faccion] == CONTRABANDISTAS ||
							 PlayersData[playerid][Faccion] == TRAFICANTES	 )
					    {
					        if ( !PlayersData[playerid][MyBonus] )
					        {
								// CAMIONEROS
								if ( PlayersData[playerid][Faccion] == CAMIONEROS )
								{
								    if ( IsPlayerInRangeOfPoint(playerid, 5.0, FaccionesMercancias[CAMIONEROS][PosX], FaccionesMercancias[CAMIONEROS][PosY], FaccionesMercancias[CAMIONEROS][PosZ]) )
								    {
	                                    PlayersData[playerid][MyBonus] = true;
	                                    SendInfoMessage(playerid, 3, "0", "Has obtenido mercancías!");

										GivePlayerMoneyEx(playerid, 25);
									}
									else
									{
										SendInfoMessage(playerid, 0, "783", "No se encuentra en la petrolera para obtener mercancías");
									}
								}
								else if ( PlayersData[playerid][Faccion] == CONTRABANDISTAS )
								{
								    if ( IsPlayerInRangeOfPoint(playerid, 5.0, FaccionesMercancias[CONTRABANDISTAS][PosX], FaccionesMercancias[CONTRABANDISTAS][PosY], FaccionesMercancias[CONTRABANDISTAS][PosZ]) )
								    {
	                                    PlayersData[playerid][MyBonus] = true;
	                                    SendInfoMessage(playerid, 3, "0", "Has obtenido mercancías!");

										GivePlayerMoneyEx(playerid, 25);
									}
									else
									{
										SendInfoMessage(playerid, 0, "801", "No se encuentra en la cabaña de la Isla");
									}
								}
								else if ( PlayersData[playerid][Faccion] == TRAFICANTES )
								{
								    if ( IsPlayerInRangeOfPoint(playerid, 5.0, FaccionesMercancias[TRAFICANTES][PosX], FaccionesMercancias[TRAFICANTES][PosY], FaccionesMercancias[TRAFICANTES][PosZ]) )
								    {
	                                    PlayersData[playerid][MyBonus] = true;
	                                    SendInfoMessage(playerid, 3, "0", "Has obtenido mercancías!");

										GivePlayerMoneyEx(playerid, 25);
									}
									else
									{
										SendInfoMessage(playerid, 0, "800", "No se encuentra en la cima de la montaña");
									}
								}
						    }
							else
							{
								SendInfoMessage(playerid, 0, "782", "Ya usted tiene mercancías, deposite esas para obtener otras");
							}
					    }
						else
						{
							SendInfoMessage(playerid, 0, "781", "Usted no puede obtener mercancías!");
						}
			    	}
					// COMANDO: /Obtener Cámara
					else if (strcmp("/Obtener Cámara", cmdtext, true, 15) == 0 && strlen(cmdtext) == 15 ||
							 strcmp("/Obtener Camara", cmdtext, true, 15) == 0 && strlen(cmdtext) == 15)
					{
						if ( PlayersData[playerid][Faccion] == CNN)
					    {
							if ( PlayersData[playerid][TimeEquipo] <= gettime() )
						    {
								if ( CheckWeapondCheat(playerid) && IsPlayerInRangeOfPoint(playerid, 20.0, 1118.3374,1260.9243,10.8203) )
							    {
										PlayersData[playerid][TimeEquipo] = gettime() + 900;
										GivePlayerWeaponEx(playerid, 43, 50);

										Acciones(playerid, 8, "coge una cámara fotográfica del estudio");
							    }
							    else
							    {
									SendInfoMessage(playerid, 0, "908", "Aquí no se encuentra el estudio");
								}
						    }
						    else
						    {
								new MsgPersonalizado[MAX_TEXT_CHAT];
								format(MsgPersonalizado, sizeof(MsgPersonalizado), "Debe esperar %i minutos con %i segundos para volver a coger una cámara", (PlayersData[playerid][TimeEquipo] - gettime()) / 60, ((PlayersData[playerid][TimeEquipo] - gettime()) % 60));
								SendInfoMessage(playerid, 0, "909", MsgPersonalizado);
							}
					    }
					    else
					    {
							SendInfoMessage(playerid, 0, "910", "Usted no es CNN");
						}
				  	}
					// COMANDO: /Obtener Bate
					else if (strcmp("/Obtener Bate", cmdtext, true, 15) == 0 && strlen(cmdtext) == 13 )
					{
						if ( PlayersData[playerid][Faccion] == COLTS ||
						     PlayersData[playerid][Faccion] == AK  ||
							 PlayersData[playerid][Faccion] == HEORS ||
							 PlayersData[playerid][Faccion] == VELTRAN
							 )
					    {
							if ( PlayersData[playerid][TimeEquipo] <= gettime() )
						    {
								if ( CheckWeapondCheat(playerid) && (
		       						 PlayersData[playerid][Faccion] == COLTS && IsPlayerInRangeOfPoint(playerid, 20.0, 1090.2321,1712.0156,10.9153) ||
								     PlayersData[playerid][Faccion] == AK && IsPlayerInRangeOfPoint(playerid, 20.0, 2686.5295,819.5256,10.9638) ||
								     PlayersData[playerid][Faccion] == HEORS && ( IsPlayerInRangeOfPoint(playerid, 20.0, 303.9115, 303.7705, 999.1484) || IsPlayerInRangeOfPoint(playerid, 20.0, 2447.7646, 2085.1616, 62.3593) ) ||
									 PlayersData[playerid][Faccion] == VELTRAN && IsPlayerInRangeOfPoint(playerid, 20.0, 34.3752,2495.5813,16.4937)
									 ) )
							    {
										PlayersData[playerid][TimeEquipo] = gettime() + 900;
										GivePlayerWeaponEx(playerid, 5, 1);

										Acciones(playerid, 8, "coge un bate del armario");
							    }
							    else
							    {
									SendInfoMessage(playerid, 0, "1468", "Aquí no se encuentra el armario");
								}
						    }
						    else
						    {
								new MsgPersonalizado[MAX_TEXT_CHAT];
								format(MsgPersonalizado, sizeof(MsgPersonalizado), "Debe esperar %i minutos con %i segundos para volver a coger un bate", (PlayersData[playerid][TimeEquipo] - gettime()) / 60, ((PlayersData[playerid][TimeEquipo] - gettime()) % 60));
								SendInfoMessage(playerid, 0, "909", MsgPersonalizado);
							}
					    }
					    else
					    {
							SendInfoMessage(playerid, 0, "1469", "Usted no es pandillero!");
						}
				  	}
					// COMANDO: /Obtener Extinguidor
					else if (strcmp("/Obtener Extintor", cmdtext, true, 17) == 0 && strlen(cmdtext) == 17)
					{
						if ( PlayersData[playerid][Faccion] == SFMD ||
							 PlayersData[playerid][Faccion] == LSMD)
					    {
							if ( PlayersData[playerid][TimeEquipo] <= gettime() )
						    {
								if ( CheckWeapondCheat(playerid) && (PlayersData[playerid][Faccion] == SFMD && IsPlayerInRangeOfPoint(playerid, 20.0, 1491.9310,2863.6858,13.7608) ||
																	 PlayersData[playerid][Faccion] == LSMD && IsPlayerInRangeOfPoint(playerid, 20.0, 1859.0066,1402.4146,16.9622) ))
							    {
										PlayersData[playerid][TimeEquipo] = gettime() + 900;
										GivePlayerWeaponEx(playerid, 42, 3000);

										Acciones(playerid, 8, "coge un extintor de la estación");
							    }
							    else
							    {
									SendInfoMessage(playerid, 0, "1282", "Aquí no se encuentra la estación de bomberos");
								}
						    }
						    else
						    {
								new MsgPersonalizado[MAX_TEXT_CHAT];
								format(MsgPersonalizado, sizeof(MsgPersonalizado), "Debe esperar %i minutos con %i segundos para volver a coger un extintor", (PlayersData[playerid][TimeEquipo] - gettime()) / 60, ((PlayersData[playerid][TimeEquipo] - gettime()) % 60));
								SendInfoMessage(playerid, 0, "1283", MsgPersonalizado);
							}
					    }
					    else
					    {
							SendInfoMessage(playerid, 0, "1284", "Usted no es bombero!");
						}
				  	}
					// COMANDO: /Obtener Drogas
				  	else if (strcmp("/Obtener Drogas", cmdtext, true, 15) == 0 && strlen(cmdtext) == 15)
			    	{
						if ( PlayersData[playerid][Faccion] == TRAFICANTES && PlayersData[playerid][Rango] <= 1 ||
							 PlayersData[playerid][Faccion] == TRAFICANTES && PlayersData[playerid][Rango] == 3 )
					    {
							if ( TimerDrogas <= gettime() )
							{
								if ( IsPlayerInAlmacen(playerid, true) != -1 )
								{
								    TimerDrogas = gettime() + 1200;
								    SendInfoMessage(playerid, 3, "0", "Ha obtenido 30 drogas del almacén");
								    PlayersData[playerid][Drogas] = PlayersData[playerid][Drogas] + 30;
								}
							}
							else
							{
							    new MsgObtenerDrogasError[MAX_TEXT_CHAT];
							    format(MsgObtenerDrogasError, sizeof(MsgObtenerDrogasError), "No se puede retirar más droga hasta dentro de %i minutos", (TimerDrogas - gettime()) / 60 );
								SendInfoMessage(playerid, 0, "764", MsgObtenerDrogasError);
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "763", "Usted no es vendedor de drogas");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "762", "Quizás quiso decir: /Obtener {Drogas, Mercancía, Cámara, Extintor, Bate}");
					}
				}
				// COMANDO: /Apagar
				else if (strfind(cmdtext, "/Apagar", true) == 0)
				{
					// /Apagar
				  	if (strcmp("/Apagar", cmdtext, true, 7) == 0 && strlen(cmdtext) == 7)
				  	{
						ApagarVehicle(playerid);
				  	}
					// /Apagar Alarma
				  	else if (strcmp("/Apagar Alarma", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
				  	{
						if ( IsPlayerInAnyVehicle(playerid) )
						{
						    new MyVehicleID = GetPlayerVehicleID(playerid);
							if ( DataCars[MyVehicleID][AlarmOn])
							{
							    if ( IsVehicleNotBici(playerid, MyVehicleID) )
							    {
							  	    new MsgAlarmaDinamico[MAX_TEXT_CHAT];
							  	    if ( GetPlayerVehicleSeat(playerid) == 0 )
							  	    {
							  	    	format(MsgAlarmaDinamico, sizeof(MsgAlarmaDinamico), "apagar la alarma del vehículo");
									}
									else
									{
							  	    	format(MsgAlarmaDinamico, sizeof(MsgAlarmaDinamico), "ayudar a apagar la alarma del vehículo");
									}

			  						if (IntentarAccion(playerid, MsgAlarmaDinamico, random(2)))
			   						{
									    Acciones(playerid, 7, "Alarma: Apagada...");
				   						DataCars[MyVehicleID][AlarmOn] = false;
		       	   						IsVehicleOff(MyVehicleID);
			   						}
		   						}
							}
							else
							{
								SendInfoMessage(playerid, 0, "991", "Éste vehículo ya tiene la alarma apagada");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "990", "Suba al vehículo que desea apagarle la alarma y use (/Apagar Alarma)");
						}
				  	}
					else
					{
						SendInfoMessage(playerid, 0, "989", "Quizás quiso decir: /Apagar - /Apagar Alarma");
					}
			  	}
				// COMANDO: /Encender
				else if (strfind(cmdtext, "/Encender", true) == 0)
				{
					// /Encender
				  	if (strcmp("/Encender", cmdtext, true, 9) == 0 && strlen(cmdtext) == 9 )
				  	{
						EncenderVehicle(playerid);
				  	}
					// /Apagar Alarma
				  	else if (strcmp("/Encender Alarma", cmdtext, true, 16) == 0 && strlen(cmdtext) == 16)
				  	{
						if ( IsPlayerInAnyVehicle(playerid))
						{
						    if ( GetPlayerVehicleSeat(playerid) == 0 )
						    {
							    new MyVehicleID = GetPlayerVehicleID(playerid);
							    if ( IsVehicleNotBici(playerid, MyVehicleID) )
							    {
									if ( !DataCars[MyVehicleID][AlarmOn] )
									{
									    Acciones(playerid, 8, "enciende la alarma del vehículo");
									    Acciones(playerid, 7, "Alarma: Encendida...");
									    DataCars[MyVehicleID][AlarmOn] = true;
									    IsVehicleOff(MyVehicleID);
									}
									else
									{
										SendInfoMessage(playerid, 0, "1002", "Éste vehículo ya tiene la alarma encendida");
									}
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "1003", "Sólo puede encender la alarma en el asiento del conductor");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1004", "Suba al vehículo que desea apagarle la alarma y use (/Encender Alarma)");
						}
				  	}
					else
					{
						SendInfoMessage(playerid, 0, "1005", "Quizás quiso decir: /Encender - /Encender Alarma");
					}

			  	}
				// /Parqueo
			  	else if (strcmp("/Parqueo", cmdtext, true, 8) == 0 && strlen(cmdtext) == 8 )
			  	{
				  	IsPlayerNearPeaje(playerid, 1, 10);
			  	}
				// /Peaje
			  	else if (strcmp("/Peaje", cmdtext, true, 6) == 0 && strlen(cmdtext) == 6 )
			  	{
				  	IsPlayerNearPeaje(playerid, 0, 10);
			  	}
				// /Cuenta
			  	else if (strcmp("/Cuenta", cmdtext, true, 7) == 0 && strlen(cmdtext) == 7 )
			  	{
					ShowDialogAccount(playerid);
			  	}
				// /Puente
			  	else if (strcmp("/Puente", cmdtext, true, 7) == 0 && strlen(cmdtext) == 7 )
			  	{
					if ( IsPlayerInAnyVehicle(playerid) )
					{
					    new MyVehicleID = GetPlayerVehicleID(playerid);
						if ( MyVehicleID <= MAX_CAR_DUENO && DataCars[MyVehicleID][Puente] && strlen(DataCars[MyVehicleID][Dueno]) == 1)
						{
						  	if ( PlayersData[playerid][Ganzuas] != 0 )
						  	{
						        if ( !DataCars[MyVehicleID][LlenandoGas] )
						        {
							  	    new MsgPuenteDinamico[MAX_TEXT_CHAT];
							  	    if ( GetPlayerVehicleSeat(playerid) == 0 )
							  	    {
							  	    	format(MsgPuenteDinamico, sizeof(MsgPuenteDinamico), "hacerle un puente al vehículo");
									}
									else
									{
							  	    	format(MsgPuenteDinamico, sizeof(MsgPuenteDinamico), "ayudar hacer el puente");
									}

			  						if (IntentarAccion(playerid, MsgPuenteDinamico, random(2)))
			   						{
					   					DataCars[MyVehicleID][Puente] = false;
										DataCars[MyVehicleID][StateEncendido] = true;
									    Acciones(playerid, 7, "Vehículo: Puenteado...");
										IsVehicleOff(MyVehicleID);
										new IsBomb = IsVehicleHaveBomba(MyVehicleID);
										if ( IsBomb != -1 )
										{
										    ActivarBomba(IsBomb, 20);
											SetVehicleHealthEx(MyVehicleID, 0.0);
										}
			   						}
									PlayersData[playerid][Ganzuas]--;
								}
								else
								{
									SendInfoMessage(playerid, 0, "1456", "Éste vehículo está llenando el deposito, espere que termine para encenderlo!");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "654", "No tienes ganzúas!");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "652", "Éste vehículo no necesita puente");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "653", "Suba al vehículo que desea hacerle el puente y use (/Puente)");
					}
			  	}
				// /Fumar
			  	else if (strcmp("/Fumar", cmdtext, true, 6) == 0 && strlen(cmdtext) == 6)
			  	{
				  	if ( PlayersData[playerid][Drogas] >= 2 )
				  	{
					  	PlayersData[playerid][Drogas] = PlayersData[playerid][Drogas] - 2;
						Acciones(playerid, 8, "saca un cigarrillo y lo enciende");
						SetPlayerSpecialAction(playerid,21);
					}
					else
					{
						SendInfoMessage(playerid, 0, "651", "No tienes suficientes drogas para fumar");
					}
			  	}
			    // /Echar Aceíte
			  	else if (strcmp("/Echar Aceíte", cmdtext, true, 13) == 0 && strlen(cmdtext) == 13 ||
					     strcmp("/Echar Aceite", cmdtext, true, 13) == 0 && strlen(cmdtext) == 13)
			  	{
					if ( PlayersData[playerid][Faccion] == TALLER_LS || PlayersData[playerid][Faccion] == TALLER_SF)
				    {
				  	    new MyNearVehicle = IsPlayerInNearVehicle(playerid);
				  	    if ( MyNearVehicle )
				  	    {
						    if ( !IsPlayerInAnyVehicle(playerid) )
						    {
								if ( DataCars[MyNearVehicle][Oil] + 10 <= MAX_OIL_VEHICLE )
								{
									if ( PlayersData[playerid][TimeEquipo] <= gettime() )
									{
										if ( !DataCars[MyNearVehicle][StateEncendido] )
										{
											PlayersData[playerid][TimeEquipo] = gettime() + 600;
											if (coches_Todos_Type[DataCars[MyNearVehicle][Modelo] - 400] != TREN ||
												coches_Todos_Type[DataCars[MyNearVehicle][Modelo] - 400] != VUELO)
											{
												DataCars[MyNearVehicle][Oil] = DataCars[MyNearVehicle][Oil] + 10;

												UpdateGasAndOil(MyNearVehicle);
											}
											else
											{
												DataCars[MyNearVehicle][Oil] = MAX_OIL_VEHICLE;
											}
											Acciones(playerid, 8, "echa el un poco de aceíte en el vehículo");
				                            SendInfoMessage(playerid, 3, "0", "Has echado un poco de aceíte a éste vehículo");
			                            }
										else
										{
											SendInfoMessage(playerid, 0, "1137", "Apague el vehículo para echarle aceíte!");
										}
									}
									else
									{
										new MsgPersonalizado[MAX_TEXT_CHAT];
										format(MsgPersonalizado, sizeof(MsgPersonalizado), "Debe esperar %i minutos con %i segundos para volver a echar aceíte a un vehículo", (PlayersData[playerid][TimeEquipo] - gettime()) / 60, ((PlayersData[playerid][TimeEquipo] - gettime()) % 60));
										SendInfoMessage(playerid, 0, "1136", MsgPersonalizado);
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "1135", "Éste vehículo no necesita aceíte!");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "1134", "No puede echar aceíte desde adentro del vehículo");
							}
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1133", "Usted no es mecánico");
					}
			  	}
			    // /Echar Lata
			  	else if (strcmp("/Echar Lata", cmdtext, true, 11) == 0 && strlen(cmdtext) == 11)
			  	{
			  	    new MyNearVehicle = IsPlayerInNearVehicle(playerid);
			  	    if ( MyNearVehicle )
			  	    {
					    if ( !IsPlayerInAnyVehicle(playerid) )
					    {
				  	        if ( PlayersData[playerid][Lata] )
							{
						        if ( !DataCars[MyNearVehicle][LlenandoGas] )
						        {
									if ( DataCars[MyNearVehicle][Gas] + 20 <= MAX_GAS_VEHICLE )
									{
										if ( gettime() - PlayersDataOnline[playerid][TimeLata] >= 60 )
										{
											if ( !DataCars[MyNearVehicle][StateEncendido] )
											{
												DataCars[MyNearVehicle][Gas] = DataCars[MyNearVehicle][Gas] + 20;
												PlayersData[playerid][Lata] = false;
												PlayersDataOnline[playerid][TimeLata] = gettime();

												UpdateGasAndOil(MyNearVehicle);

												Acciones(playerid, 8, "echa el gas de su lata en el deposito del vehículo");
					                            SendInfoMessage(playerid, 3, "0", "Ha echado el gas de su lata en éste vehículo");
				                            }
											else
											{
												SendInfoMessage(playerid, 0, "1087", "Apague el vehículo para echarle la lata!");
											}
										}
										else
										{
											new MsgErrorLata[MAX_TEXT_CHAT];
											format(MsgErrorLata, sizeof(MsgErrorLata), "No puede volver a echar una lata hasta dentro de %i segundos", 60 - (gettime() - PlayersDataOnline[playerid][TimeLata]));
											SendInfoMessage(playerid, 0, "1061", MsgErrorLata);
										}
									}
									else
									{
										SendInfoMessage(playerid, 0, "524", "Éste vehículo tiene el deposito lleno");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "1059", "Éste vehículo está llenando el deposito, no puede echarle una lata");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "525", "Ha su lata no le queda gas");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1104", "No puede echar gas desde adentro del vehículo");
						}
					}
			  	}
				// COMANDO: /Llenar
				else if (strfind(cmdtext, "/Llenar ", true) == 0)
				{
					// COMANDO: /Llenar Lata
				  	if (strcmp("/Llenar Lata", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12)
				  	{
				  	    new MyNearGas = GetMyNearGas(playerid);
				  	    if ( MyNearGas != -1 )
				  	    {
				  	        if ( !PlayersData[playerid][Lata] )
							{
								if ( Gasolineras[MyNearGas][Fuel] >= 20 )
								{
							        if (PlayersData[playerid][Dinero] >= 40 )
							        {
								        GivePlayerMoneyEx(playerid, -40);
										Gasolineras[MyNearGas][Fuel] = Gasolineras[MyNearGas][Fuel] - 20;

										FaccionData[GOBIERNO][Deposito] += 40;

										PlayersData[playerid][Lata] = true;
										Acciones(playerid, 8, "llena su lata de gas");
		                                SendInfoMessage(playerid, 3, "0", "Ha llenado su lata de gas por $40");
							        }
							        else
							        {
										SendInfoMessage(playerid, 0, "526", "No tiene suficiente dinero para llenar su lata de gas!");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "527", "Ésta gasolinera tiene el deposito agotado");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "528", "Su lata ya se encuentra llena de gas");
							}
						}
					}
				  	else if (strfind(cmdtext, "/Llenar Deposito", true) == 0)
				  	{
						if ( IsPlayerInNearVehicle(playerid) )
						{
					  	    new MyNearGas = GetMyNearGas(playerid);
					  	    if ( MyNearGas != -1 )
							{
								if ( IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) == 0)
								{
			    					new MyCarFill = GetPlayerVehicleID(playerid);
			    					if ( IsVehicleNotBici(playerid, MyCarFill) )
			    					{
										if ( DataCars[MyCarFill][Gas] < MAX_GAS_VEHICLE )
										{
										    new GasToFill;
										    if ( strcmp("/Llenar Deposito", cmdtext, true, 16) == 0 && strlen(cmdtext) == 16 )
										    {
												GasToFill = MAX_GAS_VEHICLE - DataCars[MyCarFill][Gas];
										    }
										    else
										    {
										        GasToFill = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
											}
											if ( GasToFill > 0 )
											{
											    if ( DataCars[MyCarFill][Gas] + GasToFill <= MAX_GAS_VEHICLE )
											    {
													if ( Gasolineras[MyNearGas][Fuel] >= GasToFill )
													{
													    if ( PlayersData[playerid][Dinero] >= (GasToFill * 2) )
													    {
													        if ( !DataCars[MyCarFill][LlenandoGas] )
													        {
													            if ( !DataCars[MyCarFill][StateEncendido] )
													            {
																    new MsgLlenarDeposito[MAX_TEXT_CHAT];
																    format(MsgLlenarDeposito, sizeof(MsgLlenarDeposito), "Mandó a llenar el deposito del vehículo por $%i", (GasToFill * 2));

															        GivePlayerMoneyEx(playerid, -(GasToFill * 2));

																    Gasolineras[MyNearGas][Fuel] = Gasolineras[MyNearGas][Fuel] - GasToFill;

																	FaccionData[GOBIERNO][Deposito] = FaccionData[GOBIERNO][Deposito] + (GasToFill * 2);

																	Acciones(playerid, 8, "comienza a llenar el deposito del vehículo");
										                            SendInfoMessage(playerid, 3, "0", MsgLlenarDeposito);

																	DataCars[MyCarFill][LlenandoGas] = DataCars[MyCarFill][Gas] + GasToFill;
																	FillVehicleGas(MyCarFill);

																	GameTextForPlayer(playerid, "~G~Llenando deposito...", 1000, 3);
																}
									                            else
									                            {
																	SendInfoMessage(playerid, 0, "1060", "Apague el vehículo para echarle gas!");
																}
								                            }
								                            else
								                            {
																SendInfoMessage(playerid, 0, "1058", "Ya éste vehículo está llenando el deposito");
															}
							                            }
							                            else
							                            {
															SendInfoMessage(playerid, 0, "531", "No tienes suficiente dinero para llenar el deposito de éste vehículo");
														}
													}
													else
													{
														SendInfoMessage(playerid, 0, "529", "Está gasolinera tiene el deposito agotado");
													}
												}
												else
												{
													SendInfoMessage(playerid, 0, "1062", "Con esa cantidad de gas sobrepasas el límite del tanque, intenta con un cantidad menor");
												}
											}
											else
											{
												SendInfoMessage(playerid, 0, "1056", "Mínimo debes echarle $1 al vehículo");
											}
										}
										else
										{
											SendInfoMessage(playerid, 0, "1063", "Ya el tanque de éste vehículo se encuenta lleno!");
										}
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "1064", "Montese al vehículo que desea llenar el deposito y pongase de conductor");
								}
							}
						}
				  	}
					else
					{
						SendInfoMessage(playerid, 0, "532", "Quizás quiso decir: /Llenar {Lata, Deposito}");
					}
			  	}
				// COMANDO: /Rendirse
			  	else if (strcmp("/Rendirse", cmdtext, true, 9) == 0 && strlen(cmdtext) == 9)
			  	{
					ApplyPlayerAnimCustom(playerid,
					"ROB_BANK",
					ROB_ANIMATIONS[4], false);
			    }
				// COMANDO: /Apuntar
			  	else if (strcmp("/Apuntar", cmdtext, true, 8) == 0 && strlen(cmdtext) == 8)
			  	{
					ApplyPlayerAnimCustom(playerid,
					"PED",
					PED_ANIMATIONS[150], false);
			    }
				// COMANDO: /Miedo
			  	else if (strcmp("/Miedo", cmdtext, true, 6) == 0 && strlen(cmdtext) == 6)
			  	{
					ApplyPlayerAnimCustom(playerid,
					"PED",
					PED_ANIMATIONS[71], false);
			    }
				// COMANDO: /Borracho
			  	else if (strcmp("/Borracho", cmdtext, true, 9) == 0 && strlen(cmdtext) == 9)
			  	{
					ApplyPlayerAnimCustom(playerid,
					"PED",
					PED_ANIMATIONS[257], true);
			    }
				// COMANDO: /Sentarse
			  	else if (strcmp("/Sentarse", cmdtext, true, 9) == 0 && strlen(cmdtext) == 9)
			  	{
					ApplyPlayerAnimCustom(playerid,
					"BEACH",
					PLAYA_ANIMATIONS[2], false);
			    }
				// COMANDO: /Acostarse
			  	else if (strcmp("/Acostarse", cmdtext, true, 10) == 0 && strlen(cmdtext) == 10)
			  	{
					ApplyPlayerAnimCustom(playerid,
					"BEACH",
					PLAYA_ANIMATIONS[0], false);
			    }
				// COMANDO: /Crack
			  	else if (strcmp("/Crack", cmdtext, true, 6) == 0 && strlen(cmdtext) == 6)
			  	{
					ApplyPlayerAnimCustom(playerid,
					"CRACK",
					CRACK_ANIMATIONS[3], false);
			    }
				// COMANDO: /Fuck
			  	else if (strcmp("/Fuck", cmdtext, true, 5) == 0 && strlen(cmdtext) == 5)
			  	{
					ApplyPlayerAnimCustom(playerid,
					"PED",
					PED_ANIMATIONS[149], false);
			    }
				// COMANDO: /Crear
				else if (strfind(cmdtext, "/Crear ", true) == 0)
				{
					// COMANDO: /Crear Arma
				  	if (strcmp("/Crear Arma", cmdtext, true, 11) == 0 && strlen(cmdtext) == 11)
				    {
						if ( PlayersData[playerid][Faccion] == TRAFICANTES && PlayersData[playerid][Rango] <= 2 ||
		 					 PlayersData[playerid][Faccion] == LCN ||
							 PlayersData[playerid][Faccion] == YKZ ||
							 PlayersData[playerid][Faccion] == SICARIOS)
					    {
						    SetMenuTraficante(playerid);
					    }
					    else
					    {
							SendInfoMessage(playerid, 0, "420", "Usted no puede crear armas");
						}
				    }
					//////////--- /Crear Cheque Efectivo [ID] [Cantidad]              - CREAR UN CHEQUE EFECTIVO
					else if (strfind(cmdtext, "/Crear Cheque Efectivo ", true) == 0)
					{
					    if ( PlayersData[playerid][HoursPlaying] >= 24 )
					    {
					        new PlayerIDCheque = strval(cmdtext[GetPosSpace(cmdtext, 3)]);
					        new ChequeCantidad = strval(cmdtext[GetPosSpace(cmdtext, 4)]);
						    if ( PlayerIDCheque == playerid || IsPlayerNear(playerid, PlayerIDCheque,
								 "1334",
								 "1335",
								 "1336",
								 "El jugador que le deseas darle un cheque no se encuentra conectado",
								 "El jugador que le deseas darle un cheque no se ha logueado",
								 "El jugador que le deseas darle un cheque no se encuentra cerca de tí") )
						    {
						        new NextChequeID = IsNotChequesFull(playerid);
						        if ( NextChequeID != -1 )
						        {
							        if( ChequeCantidad > 0 && ChequeCantidad < 500000 )
							        {
							            if( PlayerIDCheque != playerid )
							            {
											if ( IsNotFullCartera(playerid, PlayerIDCheque, "El jugador que desea darle un cheque tiene la cartera llena!") )
										    {
										    	CrearCheque(playerid, PlayerIDCheque, 0, ChequeCantidad, NextChequeID);

												new MsgCrearCheque[MAX_TEXT_CHAT];
												new MsgCrearChequeMe[MAX_TEXT_CHAT];
												new MsgCrearChequeYou[MAX_TEXT_CHAT];
										        format(MsgCrearCheque, sizeof(MsgCrearCheque), "Le has dado un cheque tipo efectivo a %s por la suma de $%i",
												PlayersDataOnline[PlayerIDCheque][NameOnlineFix],
												ChequeCantidad);
										        format(MsgCrearChequeYou, sizeof(MsgCrearChequeYou), "%s te ha dado un cheque tipo efectivo por la suma de $%i",
												PlayersDataOnline[playerid][NameOnlineFix],
												ChequeCantidad);

										        format(MsgCrearChequeMe, sizeof(MsgCrearChequeMe), "crea un cheque y se lo pasa a %s", PlayersDataOnline[PlayerIDCheque][NameOnlineFix]);
										        Acciones(playerid, 8, MsgCrearChequeMe);
										        SendInfoMessage(playerid, 2, "0", MsgCrearCheque);
										        SendInfoMessage(PlayerIDCheque, 2, "0", MsgCrearChequeYou);

										        printf("De %s para %s || %s", PlayersDataOnline[playerid][NameOnline], PlayersDataOnline[PlayerIDCheque][NameOnline], MsgCrearCheque);
										    }
									    }
									    else
									    {
											if ( IsNotFullCartera(playerid, PlayerIDCheque, "Usted tiene la cartera llena!") )
										    {
										    	CrearCheque(playerid, PlayerIDCheque, 0, ChequeCantidad, NextChequeID);
												new MsgCrearCheque[MAX_TEXT_CHAT];
										        format(MsgCrearCheque, sizeof(MsgCrearCheque), "Creaste un cheque tipo efectivo por la suma de $%i", ChequeCantidad);
										        Acciones(playerid, 8, "crea un cheque y lo guarada en su cartera");
										        SendInfoMessage(playerid, 2, "0", MsgCrearCheque);
										        printf("De %s || %s", PlayersDataOnline[playerid][NameOnline], MsgCrearCheque);
										    }
										}
									}
									else
									{
										SendInfoMessage(playerid, 0, "1333", "El valor del cheque tiene que ser mayor de $0 y menor de $500000!");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "1426", "Debes cancelar o esperar que sean cobrados los cheques para poder repartír más!");
								}
						    }
					    }
					    else
					    {
							SendInfoMessage(playerid, 0, "1338", "Debes ser mayor de nivel 3 para crear cheques");
						}
					}
					//////////--- /Crear Cheque Personal [ID] [Cantidad]              - CREAR UN CHEQUE PERSONAL
					else if (strfind(cmdtext, "/Crear Cheque Personal ", true) == 0)
					{
					    if ( PlayersData[playerid][HoursPlaying] >= 24 )
					    {
					        new PlayerIDCheque = strval(cmdtext[GetPosSpace(cmdtext, 3)]);
					        new ChequeCantidad = strval(cmdtext[GetPosSpace(cmdtext, 4)]);
						    if ( IsPlayerNear(playerid, PlayerIDCheque,
								 "1329",
								 "1330",
								 "1331",
								 "El jugador que le deseas darle un cheque no se encuentra conectado",
								 "El jugador que le deseas darle un cheque no se ha logueado",
								 "El jugador que le deseas darle un cheque no se encuentra cerca de tí") )
						    {
						        new NextChequeID = IsNotChequesFull(playerid);
						        if ( NextChequeID != -1 )
						        {
							        if( ChequeCantidad > 0 && ChequeCantidad < 500000 )
							        {

										if ( IsNotFullCartera(playerid, PlayerIDCheque, "El jugador que desea darle un cheque tiene la cartera llena!") )
									    {
									    	CrearCheque(playerid, PlayerIDCheque, 1, ChequeCantidad, NextChequeID);

											new MsgCrearCheque[MAX_TEXT_CHAT];
											new MsgCrearChequeMe[MAX_TEXT_CHAT];
											new MsgCrearChequeYou[MAX_TEXT_CHAT];
									        format(MsgCrearCheque, sizeof(MsgCrearCheque), "Le has dado un cheque tipo personal a %s por la suma de $%i",
											PlayersDataOnline[PlayerIDCheque][NameOnlineFix],
											ChequeCantidad);
									        format(MsgCrearChequeYou, sizeof(MsgCrearChequeYou), "%s te ha dado un cheque tipo personal por la suma de $%i",
											PlayersDataOnline[playerid][NameOnlineFix],
											ChequeCantidad);
									        format(MsgCrearChequeMe, sizeof(MsgCrearChequeMe), "crea un cheque y se lo pasa a %s",
											PlayersDataOnline[PlayerIDCheque][NameOnlineFix]);

									        Acciones(playerid, 8, MsgCrearChequeMe);
									        SendInfoMessage(playerid, 2, "0", MsgCrearCheque);
									        SendInfoMessage(PlayerIDCheque, 2, "0", MsgCrearChequeYou);
									        printf("De %s para %s || %s", PlayersDataOnline[playerid][NameOnline], PlayersDataOnline[PlayerIDCheque][NameOnline], MsgCrearCheque);
									    }
									}
									else
									{
										SendInfoMessage(playerid, 0, "1332", "El valor del cheque tiene que ser mayor de $0 y menor de $500000!");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "1425", "Debes cancelar o esperar que sean cobrados los cheques para poder repartír más!");
								}
						    }
					    }
					    else
					    {
							SendInfoMessage(playerid, 0, "1337", "Debes ser mayor de nivel 3 para crear cheques");
						}
					}
					//////////--- /Crear Negocio [ID]              - CREAR UN NEGOCIO
					else if (strfind(cmdtext, "/Crear Negocio ", true) == 0)
					{
   					    MsgAdminUseCommands(9, playerid, cmdtext);
						if ( PlayersData[playerid][Admin] >= 8 )
						{
					        new TypeBizz = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
					        new PrecioN = strval(cmdtext[GetPosSpace(cmdtext, 3)]);
					        new NivelN = strval(cmdtext[GetPosSpace(cmdtext, 4)]);
							if ( TypeBizz >= 0 &&  TypeBizz <= MAX_BIZZ_TYPE )
							{
							    new MyNextBizz = GetMyNextBizz();
							    if ( MyNextBizz )
							    {
							        new Float:PlayerPosBizz[4];
							        GetPlayerPos(playerid, PlayerPosBizz[0], PlayerPosBizz[1], PlayerPosBizz[2]);
							        GetPlayerFacingAngle(playerid, PlayerPosBizz[3]);

								    NegociosData[MyNextBizz][PosOutX]       = PlayerPosBizz[0];
								    NegociosData[MyNextBizz][PosOutY]		= PlayerPosBizz[1];
								    NegociosData[MyNextBizz][PosOutZ]		= PlayerPosBizz[2];
								    NegociosData[MyNextBizz][PosOutZZ] 		= PlayerPosBizz[3];
								    NegociosData[MyNextBizz][InteriorOut]   = GetPlayerInteriorEx(playerid);
								    NegociosData[MyNextBizz][Deposito]      = 0;
								    if ( PrecioN > 0 && PrecioN < 500000)
								    {
								    	NegociosData[MyNextBizz][Precio]        = PrecioN;
							    	}
							    	else
							    	{
								    	NegociosData[MyNextBizz][Precio]        = 150000;
							    	}
								    NegociosData[MyNextBizz][Lock]          = true;
								    NegociosData[MyNextBizz][Type]        	= TypeBizz;
								    NegociosData[MyNextBizz][PriceJoin]     = 0;
								    NegociosData[MyNextBizz][PricePiece]    = 0;
		                            format(NegociosData[MyNextBizz][NameBizz], 	MAX_BIIZ_NAME, "Ninguno");
	                                format(NegociosData[MyNextBizz][Dueno], MAX_PLAYER_NAME, "0");
	                                format(NegociosData[MyNextBizz][Extorsion], MAX_PLAYER_NAME, "No");
									if ( NivelN > 0 && NivelN < 99 )
									{
										NegociosData[MyNextBizz][Level]  		= NivelN;
									}
									else
									{
										NegociosData[MyNextBizz][Level]  		= 10;
									}

								    DataSaveBizz(MyNextBizz, false);

								    new MsgPersonalizado[MAX_TEXT_CHAT];
								    format(MsgPersonalizado, sizeof(MsgPersonalizado), "%s Has creado un negocio tipo \"%s\"[%i] con ID %i, Precio: $%i", LOGO_STAFF, NegociosType[TypeBizz][TypeName], TypeBizz, MyNextBizz, NegociosData[MyNextBizz][Precio]);

									SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, MsgPersonalizado);
									printf("%s", MsgPersonalizado);
								}
								else
								{
									SendInfoMessage(playerid, 0, "1153", "Ya no se pueden agregar más negocios, se ha alcanzado el límite!");
								}
							}
							else
							{
							    new MsgPersonalizado[MAX_TEXT_CHAT];
							    format(MsgPersonalizado, sizeof(MsgPersonalizado), "El número del tipo de negocio debe estár comprendído entre 0 y %i",MAX_BIZZ_TYPE);
								SendInfoMessage(playerid, 0, "1154", MsgPersonalizado);
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1152", "No tienes acceso al comando /Crear Negocio");
						}
					}
					//////////--- /Crear Garage [ID_Casa] [Tipo_Garage]            - COMENZAR A DISEñAR UN GARAGE
					else if (strfind(cmdtext, "/Crear Garage ", true) == 0)
					{
   					    MsgAdminUseCommands(9, playerid, cmdtext);
						if ( PlayersData[playerid][Admin] >= 8 )
						{
					        new IdHouse = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
					        new TypeGarageS = strval(cmdtext[GetPosSpace(cmdtext, 3)]);
							if ( IdHouse > 0 && IdHouse <= MAX_HOUSE )
							{
								if ( TypeGarageS >= 0 && TypeGarageS <= MAX_GARAGE_TYPE )
								{
								    if ( CreateGarage(playerid, IdHouse, PlayersDataOnline[playerid][DesignGarageId], TypeGarageS) )
								    {
				                        new MsgChangeDesing[MAX_TEXT_CHAT];
				                        format(MsgChangeDesing, sizeof(MsgChangeDesing), "Creaste un garage tipo [%i], para la Casa ID[%i] (Desing ID [%i]", TypeGarageS, IdHouse, PlayersDataOnline[playerid][DesignGarageId]);
						                SendInfoMessage(playerid, 2, "0", MsgChangeDesing);
					                }
				                }
				                else
				                {
									SendInfoMessage(playerid, 0, "680", "El ID del tipo de garage introducido no existe!");
								}
			                }
			                else
			                {
								SendInfoMessage(playerid, 0, "1170", "El ID de casa introducido no existe!");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1171", "No tienes acceso al comando /Desing Garage");
						}
					}
					//////////--- /Crear Incendio [ID]              - CREAR UN INCENDIO
					else if (strfind(cmdtext, "/Crear Incendio ", true) == 0)
					{
   					    MsgAdminUseCommands(9, playerid, cmdtext);
						if ( PlayersData[playerid][Admin] >= 7 )
						{
					        new IdHouse = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
							if ( IdHouse > 0 && IdHouse <= MAX_HOUSE )
							{
								new StringFormat[MAX_TEXT_CHAT];
								new nextFire = GetFireNext();
								if ( CreateFire(IdHouse, GetFireNext()) )
								{
									format(StringFormat, sizeof(StringFormat), "%s Has creado un incendio con ID[%i] en la casa ID[%i]",LOGO_STAFF,nextFire, IdHouse);
			            		}
			            		else
			            		{
									format(StringFormat, sizeof(StringFormat), "%s Se ha alcanzado el número máximo de incendios",LOGO_STAFF);
								}
			            		SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, StringFormat);
			                }
			                else
			                {
								SendInfoMessage(playerid, 0, "1280", "El ID de casa introducido no existe!");
							}

						}
						else
						{
							SendInfoMessage(playerid, 0, "1279", "No tienes acceso al comando /Crear Incendio");
						}
					}
					//////////--- /Crear Casa [ID]              - CREAR UNA CASA
					else if (strfind(cmdtext, "/Crear Casa ", true) == 0)
					{
   					    MsgAdminUseCommands(9, playerid, cmdtext);
						if ( PlayersData[playerid][Admin] >= 8 )
						{
					        new TypeHouseC = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
					        new PrecioC = strval(cmdtext[GetPosSpace(cmdtext, 3)]);
					        new NivelC = strval(cmdtext[GetPosSpace(cmdtext, 4)]);
							if ( TypeHouseC >= 0 &&  TypeHouseC <= MAX_HOUSE_TYPE_COUNT )
							{
							    new MyNextHouse = GetMyNextHouse();
							    if ( MyNextHouse )
							    {
							        new Float:PlayerPosHouse[4];
							        GetPlayerPos(playerid, PlayerPosHouse[0], PlayerPosHouse[1], PlayerPosHouse[2]);
							        GetPlayerFacingAngle(playerid, PlayerPosHouse[3]);

									format(HouseData[MyNextHouse][Dueno], MAX_PLAYER_NAME, "No");
									HouseData[MyNextHouse][PosX] 			= PlayerPosHouse[0];
									HouseData[MyNextHouse][PosY] 			= PlayerPosHouse[1];
									HouseData[MyNextHouse][PosZ] 			= PlayerPosHouse[2];
									HouseData[MyNextHouse][PosZZ] 			= PlayerPosHouse[3];
									HouseData[MyNextHouse][Interior] 		= GetPlayerInteriorEx(playerid);
									HouseData[MyNextHouse][TypeHouseId]		= TypeHouseC;
									HouseData[MyNextHouse][PriceRent] 		= 0;
									if ( NivelC > 0 && NivelC < 99 )
									{
										HouseData[MyNextHouse][Level] 			= NivelC;
									}
									else
									{
										HouseData[MyNextHouse][Level] 			= 10;
									}
									HouseData[MyNextHouse][Lock]            = true;
								    if ( PrecioC > 0 && PrecioC < 1000000)
								    {
								    	HouseData[MyNextHouse][Price]        = PrecioC;
							    	}
							    	else
							    	{
								    	HouseData[MyNextHouse][Price]        = 150000;
							    	}

								    SaveHouse(MyNextHouse, false);

								    new MsgPersonalizado[MAX_TEXT_CHAT];
								    format(MsgPersonalizado, sizeof(MsgPersonalizado), "%s Has creado una casa tipo \"%s\" [%i] con ID %i, Precio: $%i", LOGO_STAFF, TypeHouse[TypeHouseC][TypeName], TypeHouseC, MyNextHouse, HouseData[MyNextHouse][Price]);

									SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, MsgPersonalizado);
									printf("%s", MsgPersonalizado);
								}
								else
								{
									SendInfoMessage(playerid, 0, "1157", "Ya no se pueden agregar más casas, se ha alcanzado el límite!");
								}
							}
							else
							{
							    new MsgPersonalizado[MAX_TEXT_CHAT];
							    format(MsgPersonalizado, sizeof(MsgPersonalizado), "El número del tipo de casa debe estár comprendído entre 0 y %i",MAX_HOUSE_TYPE);
								SendInfoMessage(playerid, 0, "1156", MsgPersonalizado);
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1155", "No tienes acceso al comando /Crear Casa");
						}
					}
			    	else
					{
						SendInfoMessage(playerid, 0, "421", "Quizás quiso decir: /Crear {Arma, Cheque Efectivo [ID] [Cantidad], Cheque Personal [ID] [Cantidad]}");
					}
				}
			// COMANDO: /Aceíte [ID] [Precio]
				else if (strfind(cmdtext, "/Aceíte ", true) == 0 ||
						 strfind(cmdtext, "/Aceite ", true) == 0)
				{
			        new playerid_aceite = strval(cmdtext[GetPosSpace(cmdtext, 1)]);
			        new dinero_aceite = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
					if ( PlayersData[playerid][Faccion] == TALLER_LS || PlayersData[playerid][Faccion] == TALLER_SF )
				    {
			            if ( IsPlayerInTaller(playerid) )
			            {
			                if ( playerid_aceite == playerid )
			                {
			                    if ( IsPlayerInAnyVehicle(playerid) )
			                    {
		                            SendInfoMessage(playerid, 3, "0", "Has rellenedo éste vehículo de aceíte");
									DataCars[GetPlayerVehicleID(playerid)][Oil] = MAX_OIL_VEHICLE;

									UpdateGasAndOil(GetPlayerVehicleID(playerid));
								}
								else
								{
									SendInfoMessage(playerid, 0, "1122", "Suba al vehículo que desea rellenar aceíte");
								}
							}
						    else if ( IsPlayerNear(playerid, playerid_aceite,
								 "1123",
								 "1124",
								 "1125",
								 "El jugador que desea rellenar de aceíte el vehículo no se encuentra conectado",
								 "El jugador que desea rellenar de aceíte el vehículo no se encuentra logueado",
								 "El jugador que desea rellenar de aceíte el vehículo no se encuentra cerca de tí") )
						    {
		                        if ( IsPlayerInAnyVehicle(playerid_aceite) )
		                        {
							        if ( dinero_aceite > 0 && dinero_aceite <= 20000 )
							        {
										new MsgRapair[MAX_TEXT_CHAT];
										new MsgRepairToPlayer[MAX_TEXT_CHAT];
										format(MsgRapair, sizeof(MsgRapair), "Ofresiste rellenar el vehículo de aceíte a %s por $%i", PlayersDataOnline[playerid_aceite][NameOnlineFix], dinero_aceite);
										format(MsgRepairToPlayer, sizeof(MsgRepairToPlayer), "El mecánico %s quiere rellenarle el vehículo de aceíte por $%i usa (/Aceptar Aceíte)", PlayersDataOnline[playerid][NameOnlineFix], dinero_aceite);

			                            SendInfoMessage(playerid, 3, "0", MsgRapair);
			                            SendInfoMessage(playerid_aceite, 3, "0", MsgRepairToPlayer);

										PlayersDataOnline[playerid_aceite][VAceite][0] = playerid;
										PlayersDataOnline[playerid_aceite][VAceite][1] = dinero_aceite;
									}
									else
									{
										SendInfoMessage(playerid, 0, "1126", "El monto mínimo para relleno de aceíte es es $1 y máximo $20000");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "1127", "Pídale al cliente que suba a su vehículo para rellenarlo de aceíte");
								}
						    }
					    }
					}
					else
					{
						SendInfoMessage(playerid, 0, "1128", "Usted no es mecánico");
					}
				}
				// COMANDO: /Reparar [ID] [Precio]
				else if (strfind(cmdtext, "/Reparar ", true) == 0)
				{
			        new playerid_repair = strval(cmdtext[GetPosSpace(cmdtext, 1)]);
			        new dinero_repair = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
					if ( PlayersData[playerid][Faccion] == TALLER_LS || PlayersData[playerid][Faccion] == TALLER_SF )
				    {
			            if ( IsPlayerInTaller(playerid) )
			            {
			                if ( playerid_repair == playerid )
			                {
			                    if ( IsPlayerInAnyVehicle(playerid) )
			                    {
		                            SendInfoMessage(playerid, 3, "0", "Has reparado éste vehículo");
									RepairVehicle(GetPlayerVehicleID(playerid));
									SetVehicleHealthEx(GetPlayerVehicleID(playerid), 1000.0);
									new Float:SaveRepair = 1000.0;
							    	UpdateDamage(playerid, SaveRepair);
								}
								else
								{
									SendInfoMessage(playerid, 0, "690", "Suba al vehículo que desea reparar");
								}
							}
						    else if ( IsPlayerNear(playerid, playerid_repair,
								 "691",
								 "692",
								 "693",
								 "El jugador que desea repararle el vehículo no se encuentra conectado",
								 "El jugador que desea repararle el vehículo no se encuentra logueado",
								 "El jugador que desea repararle el vehículo no se encuentra cerca de tí") )
						    {
		                        if ( IsPlayerInAnyVehicle(playerid_repair) )
		                        {
							        if ( dinero_repair > 0 && dinero_repair <= 20000 )
							        {
										new MsgRapair[MAX_TEXT_CHAT];
										new MsgRepairToPlayer[MAX_TEXT_CHAT];
										format(MsgRapair, sizeof(MsgRapair), "Ofresiste repararle el vehículo a %s por $%i", PlayersDataOnline[playerid_repair][NameOnlineFix], dinero_repair);
										format(MsgRepairToPlayer, sizeof(MsgRepairToPlayer), "El mecánico %s quiere reparte el vehículo por $%i usa (/Aceptar Reparación)", PlayersDataOnline[playerid][NameOnlineFix], dinero_repair);

			                            SendInfoMessage(playerid, 3, "0", MsgRapair);
			                            SendInfoMessage(playerid_repair, 3, "0", MsgRepairToPlayer);

										PlayersDataOnline[playerid_repair][VRepair][0] = playerid;
										PlayersDataOnline[playerid_repair][VRepair][1] = dinero_repair;
									}
									else
									{
										SendInfoMessage(playerid, 0, "699", "El monto mínimo de una reparación es $1 y máximo $20000");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "694", "Pídale al cliente que suba a su vehículo para repararselo");
								}
						    }
					    }
					}
					else
					{
						SendInfoMessage(playerid, 0, "695", "Usted no es mecánico");
					}
				}
				// COMANDO: /Factura [ID] [Precio] [Razón]
				else if (strfind(cmdtext, "/Factura ", true) == 0)
				{
					if ( PlayersData[playerid][Faccion] == TALLER_LS || PlayersData[playerid][Faccion] == TALLER_SF )
				    {
				        new playerid_factura = strval(cmdtext[GetPosSpace(cmdtext, 1)]);
				        new dinero_factura = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
					    if ( IsPlayerNear(playerid, playerid_factura,
							 "685",
							 "686",
							 "687",
							 "El jugador que desea darle una factura no se encuentra conectado",
							 "El jugador que desea darle una factura no se encuentra logueado",
							 "El jugador que desea darle una factura no se encuentra cerca de tí") )
					    {
					        if ( dinero_factura > 0 && dinero_factura <= 20000 )
					        {
								new MsgFactura[MAX_TEXT_CHAT];
								new MsgFacturaToPlayer[MAX_TEXT_CHAT];
								format(MsgFactura, sizeof(MsgFactura), "Le has dado una factura de $%i a %s; Razón: %s", dinero_factura, PlayersDataOnline[playerid_factura][NameOnlineFix], cmdtext[GetPosSpace(cmdtext, 3)]);
								format(MsgFacturaToPlayer, sizeof(MsgFacturaToPlayer), "%s te ha dado una factura $%i usa (/Aceptar Factura); Razón: %s", PlayersDataOnline[playerid][NameOnlineFix], dinero_factura, cmdtext[GetPosSpace(cmdtext, 3)]);
	                            SendInfoMessage(playerid, 3, "0", MsgFactura);
	                            SendInfoMessage(playerid_factura, 3, "0", MsgFacturaToPlayer);

								PlayersDataOnline[playerid_factura][VFactura][0] = playerid;
								PlayersDataOnline[playerid_factura][VFactura][1] = dinero_factura;
							}
							else
							{
								SendInfoMessage(playerid, 0, "688", "El monto mínimo de una factura es $1 y máximo $20000");
							}
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "689", "Usted no es mecánico");
					}
				}
				// COMANDO: /Servicio [ID] [Precio] [Razón]
				else if (strfind(cmdtext, "/Servicio ", true) == 0)
				{
					if ( PlayersData[playerid][Faccion] == ADP)
				    {
				        new playerid_factura = strval(cmdtext[GetPosSpace(cmdtext, 1)]);
				        new dinero_factura = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
					    if ( IsPlayerNear(playerid, playerid_factura,
							 "1354",
							 "1355",
							 "1356",
							 "El jugador que desea darle un servicio no se encuentra conectado",
							 "El jugador que desea darle un servicio no se encuentra logueado",
							 "El jugador que desea darle un servicio no se encuentra cerca de tí") )
					    {
					        if ( dinero_factura > 100 && dinero_factura <= 20000 )
					        {
								new MsgFactura[MAX_TEXT_CHAT];
								new MsgFacturaToPlayer[MAX_TEXT_CHAT];
								format(MsgFactura, sizeof(MsgFactura), "Le ofreciste servicios por $%i a %s; Razón: %s", dinero_factura, PlayersDataOnline[playerid_factura][NameOnlineFix], cmdtext[GetPosSpace(cmdtext, 3)]);
								format(MsgFacturaToPlayer, sizeof(MsgFacturaToPlayer), "%s te ofrece sus servicios por $%i usa (/Aceptar Servicios); Razón: %s", PlayersDataOnline[playerid][NameOnlineFix], dinero_factura, cmdtext[GetPosSpace(cmdtext, 3)]);
	                            SendInfoMessage(playerid, 3, "0", MsgFactura);
	                            SendInfoMessage(playerid_factura, 3, "0", MsgFacturaToPlayer);

								PlayersDataOnline[playerid_factura][VServicio][0] = playerid;
								PlayersDataOnline[playerid_factura][VServicio][1] = dinero_factura;
							}
							else
							{
								SendInfoMessage(playerid, 0, "1357", "El monto mínimo de un servicio es $100 y máximo $20000");
							}
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1353", "Usted no es ADP");
					}
				}
				// COMANDO: /Pistas
			  	else if (strcmp("/Pistas", cmdtext, true, 7) == 0 && strlen(cmdtext) == 7)
	  			{
				    MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Faccion] == TALLER_LS && PlayersData[playerid][Rango] == 0 ||
						 PlayersData[playerid][Faccion] == TALLER_SF && PlayersData[playerid][Rango] == 0 ||
						 PlayersData[playerid][Admin] >= 4)
				    {
                        ShowPistas(playerid);
			        }
			        else
			        {
						SendInfoMessage(playerid, 0, "1432", "Usted no puede organizar carreras!");
					}
	  			}
				// COMANDO: /Taller
			  	else if (strcmp("/Taller", cmdtext, true, 7) == 0 && strlen(cmdtext) == 7)
	  			{
					if ( PlayersData[playerid][Faccion] == TALLER_LS || PlayersData[playerid][Faccion] == TALLER_SF )
				    {
					    new MyNearVehicle = IsPlayerInNearVehicle(playerid);
				        if ( MyNearVehicle )
				        {
				            if ( IsPlayerInTaller(playerid) )
				            {
								TogglePlayerControllableEx(playerid, false);
								ShowMenuForPlayer(TallerPrincipal, playerid);
								PlayersDataOnline[playerid][InMenu] = GetPlayerMenu(playerid);
								PlayersDataOnline[playerid][MyIDVehicleTunning] = MyNearVehicle;
							}
						}
			        }
			        else
			        {
						SendInfoMessage(playerid, 0, "681", "Usted no es mecánico");
					}
	  			}
				// COMANDO: /Dropear
			  	else if (strcmp("/Dropear", cmdtext, true, 8) == 0 && strlen(cmdtext) == 8)
	  			{
				    if ( PlayersData[playerid][Faccion] == NFS && PlayersData[playerid][Rango] <= 1 ||
						 PlayersData[playerid][Faccion] == NFS && PlayersData[playerid][Rango] == 3 )
				    {
						if ( PlayersDataOnline[playerid][PistaIDp] == -1 )
						{
					        new IsDrop = GetMyNearCity(playerid);
							// San Fierro
							if ( IsDrop )
							{
								SetPlayerRaceCheckpoint(playerid, 1, -1720.5479,1018.1831,17.2422, 0,0,0,10);
							}
							// Los Santos
							else
							{
								SetPlayerRaceCheckpoint(playerid, 1, 2804.9290,-1432.0378,39.7068, 0,0,0,10);
							}
							SendInfoMessage(playerid, 2, "0", "Se le ha marcado en el mapa un \"CheckPoint\" que es donde debe dropear el vehículo");
						}
						else
						{
							SendInfoMessage(playerid, 0, "1446", "No puede dropear vehículos en una carrera");
						}
				    }
			        else
			        {
						SendInfoMessage(playerid, 0, "717", "Usted no es NFS");
					}
			    }
				// COMANDO: /Alarmas
				else if (strcmp("/Alarmas", cmdtext, true, 8) == 0 && strlen(cmdtext) == 8)
				{
					if ( PlayersData[playerid][Faccion] == SFPD ||
						 PlayersData[playerid][Faccion] == LSPD )
				    {
						ShowAlarmas(playerid);
			        }
			        else
			        {
						SendInfoMessage(playerid, 0, "1501", "Usted no es LSPD ni SFPD!");
					}
				}
				// COMANDO: /Sirena
				else if (strcmp("/Sirena", cmdtext, true, 7) == 0 && strlen(cmdtext) == 7)
				{
					if ( PlayersData[playerid][Faccion] == SFPD ||
						 PlayersData[playerid][Faccion] == LSPD )
				    {
				        if ( PlayersDataOnline[playerid][InCarId] && PlayersDataOnline[playerid][InCarId] > MAX_CAR_DUENO && PlayersDataOnline[playerid][InCarId] <= MAX_CAR_FACCION && DataCars[PlayersDataOnline[playerid][InCarId]][Modelo] == 405 && (DataCars[PlayersDataOnline[playerid][InCarId]][Time] == LSPD && PlayersData[playerid][Faccion] == LSPD || DataCars[PlayersDataOnline[playerid][InCarId]][Time] == SFPD && PlayersData[playerid][Faccion] == SFPD) )
				        {
							ShowAndHideSirena(playerid, PlayersDataOnline[playerid][InCarId]);
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "1556", "Suba al sentinel del su cuerpo policíal como conductor y luego use /Sirena!");
				        }
			        }
			        else
			        {
						SendInfoMessage(playerid, 0, "1557", "Usted no es LSPD ni SFPD!");
					}
				}
				// COMANDO: /Táser [ID]
				/*else if (strfind(cmdtext, "/Táser ", true) == 0 ||
						 strfind(cmdtext, "/Taser ", true) == 0)
				{
					if ( PlayersData[playerid][Faccion] == SFPD ||
						 PlayersData[playerid][Faccion] == LSPD )
				    {
					    if ( IsPlayerNear(playerid, strval(cmdtext[7]),
							 "",
							 "",
							 "",
							 "El jugador que le deseas tasear no se encuentra conectado",
							 "El jugador que le deseas tasear no se ha logueado",
							 "El jugador que le deseas tasear no se encuentra cerca de tí") )
					    {
					        new MsgEsposarIntentar[MAX_TEXT_CHAT];
					        if ( PlayersDataOnline[strval(cmdtext[7])][IsTeazer] <= gettime() )
					        {
						        format(MsgEsposarIntentar, sizeof(MsgEsposarIntentar), "darle con el táser a %s", PlayersDataOnline[strval(cmdtext[7])][NameOnlineFix]);
								if (IntentarAccion(playerid, MsgEsposarIntentar, random(3)))
								{
								    PlayersDataOnline[strval(cmdtext[7])][IsTeazer] = gettime() + 180;
									SetPlayerDrunkLevel(strval(cmdtext[7]), 5000);
								}
								PlayPlayerStreamSound(playerid, 6003);
							}
							else
							{
								SendInfoMessage(playerid, 0, "", "Ya ha ese jugador le dierón con un táser");
							}
						}
			        }
			        else
			        {
						SendInfoMessage(playerid, 0, "", "Usted no es LSPD ni SFPD!");
					}
				}*/
				// COMANDO: /Esposar [ID]
				else if (strfind(cmdtext, "/Esposar ", true) == 0)
				{
					if ( PlayersData[playerid][Faccion] == SFPD ||
						 PlayersData[playerid][Faccion] == LSPD )
				    {
					    if ( IsPlayerNear(playerid, strval(cmdtext[9]),
							 "743",
							 "744",
							 "745",
							 "El jugador que le deseas esposar no se encuentra conectado",
							 "El jugador que le deseas esposar no se ha logueado",
							 "El jugador que le deseas esposar no se encuentra cerca de tí") )
					    {
					        new MsgEsposarIntentar[MAX_TEXT_CHAT];
					        if ( !PlayersDataOnline[strval(cmdtext[9])][IsEsposas] )
					        {
						        format(MsgEsposarIntentar, sizeof(MsgEsposarIntentar), "esposar a %s", PlayersDataOnline[strval(cmdtext[9])][NameOnlineFix]);
								if (IntentarAccion(playerid, MsgEsposarIntentar, random(3)))
								{
									TogglePlayerControllableEx(strval(cmdtext[9]), false);
									PlayersDataOnline[strval(cmdtext[9])][IsEsposas] = true;
								}
							}
							else
							{
								format(MsgEsposarIntentar, sizeof(MsgEsposarIntentar), "le quitó las esposas a %s", PlayersDataOnline[strval(cmdtext[9])][NameOnlineFix]);
								Acciones(playerid, 8, MsgEsposarIntentar);
							    PlayersDataOnline[strval(cmdtext[9])][IsEsposas] = false;
								TogglePlayerControllableEx(strval(cmdtext[9]), true);
							}
						}
			        }
			        else
			        {
						SendInfoMessage(playerid, 0, "742", "Usted no es LSPD ni SFPD!");
					}
				}
				// COMANDO: /Atar [ID]
				else if (strfind(cmdtext, "/Atar ", true) == 0)
				{
					if ( PlayersData[playerid][Faccion] == LCN ||
						 PlayersData[playerid][Faccion] == YKZ ||
						 PlayersData[playerid][Faccion] == SICARIOS ||
						 PlayersData[playerid][Rango] <= 2 && (
						 PlayersData[playerid][Faccion] == COLTS 	 ||
						 PlayersData[playerid][Faccion] == AK 	 	 ||
						 PlayersData[playerid][Faccion] == VELTRAN 	 ||
						 PlayersData[playerid][Faccion] == HEORS
						 ) )
				    {
					    if ( IsPlayerNear(playerid, strval(cmdtext[6]),
							 "738",
							 "739",
							 "740",
							 "El jugador que le deseas atar no se encuentra conectado",
							 "El jugador que le deseas atar no se ha logueado",
							 "El jugador que le deseas atar no se encuentra cerca de tí") )
					    {
					        new MsgAtarIntentar[MAX_TEXT_CHAT];
					        if ( !PlayersDataOnline[strval(cmdtext[6])][IsAtado] )
					        {
						        format(MsgAtarIntentar, sizeof(MsgAtarIntentar), "atar a %s", PlayersDataOnline[strval(cmdtext[6])][NameOnlineFix]);
								if (IntentarAccion(playerid, MsgAtarIntentar, random(3)))
								{
									TogglePlayerControllableEx(strval(cmdtext[6]), false);
									PlayersDataOnline[strval(cmdtext[6])][IsAtado] = true;
								}
							}
							else
							{
								format(MsgAtarIntentar, sizeof(MsgAtarIntentar), "desató a %s", PlayersDataOnline[strval(cmdtext[6])][NameOnlineFix]);
								Acciones(playerid, 8, MsgAtarIntentar);
							    PlayersDataOnline[strval(cmdtext[6])][IsAtado] = false;
								TogglePlayerControllableEx(strval(cmdtext[6]), true);
							}
						}
			        }
			        else
			        {
						SendInfoMessage(playerid, 0, "741", "Usted no es Sicario ni Mafioso!");
					}
				}
				// COMANDO: /Poner
				else if (strfind(cmdtext, "/Recoger", true) == 0)
				{
					// COMANDO: /Recoger
					if (strcmp("/Recoger", cmdtext, true, 8) == 0 && strlen(cmdtext) == 8)
				  	{
						if ( PlayersData[playerid][Faccion] == SFPD ||
							 PlayersData[playerid][Faccion] == LSPD ||
							 PlayersData[playerid][Faccion] == CAMIONEROS ||
							 PlayersData[playerid][Faccion] == SFMD ||
							 PlayersData[playerid][Faccion] == LSMD)
					    {
					        new MyNearVCP = IsNearVCP(playerid);
					        if ( MyNearVCP != -1 )
					        {
					            if ( PlayersData[playerid][Faccion] == CAMIONEROS && VCP[MyNearVCP][objectmodel] == CONO ||
						             PlayersData[playerid][Faccion] == CAMIONEROS && VCP[MyNearVCP][objectmodel] == VALLA ||
									 PlayersData[playerid][Faccion] == LSPD || PlayersData[playerid][Faccion] == SFPD ||
									 PlayersData[playerid][Faccion] == LSMD && PlayersData[playerid][Rango] <= 2 && VCP[MyNearVCP][objectmodel] == CONO ||
									 PlayersData[playerid][Faccion] == LSMD && PlayersData[playerid][Rango] <= 2 && VCP[MyNearVCP][objectmodel] == VALLA ||
						 	 		 PlayersData[playerid][Faccion] == LSMD && PlayersData[playerid][Rango] == 5 && VCP[MyNearVCP][objectmodel] == CONO ||
						 	 		 PlayersData[playerid][Faccion] == LSMD && PlayersData[playerid][Rango] == 5 && VCP[MyNearVCP][objectmodel] == VALLA ||
									 PlayersData[playerid][Faccion] == SFMD && PlayersData[playerid][Rango] <= 2 && VCP[MyNearVCP][objectmodel] == CONO ||
									 PlayersData[playerid][Faccion] == SFMD && PlayersData[playerid][Rango] <= 2 && VCP[MyNearVCP][objectmodel] == VALLA ||
						 	 		 PlayersData[playerid][Faccion] == SFMD && PlayersData[playerid][Rango] == 5 && VCP[MyNearVCP][objectmodel] == CONO ||
						 	 		 PlayersData[playerid][Faccion] == SFMD && PlayersData[playerid][Rango] == 5 && VCP[MyNearVCP][objectmodel] == VALLA 			   )
					            {
									RemoveVCP(MyNearVCP);
								}
							    else
							    {
							        if ( PlayersData[playerid][Faccion] != SFMD && PlayersData[playerid][Faccion] != LSMD)
							        {
										SendInfoMessage(playerid, 0, "887", "Los camioneros solo pueden recoger conos!");
									}
									else
									{
										SendInfoMessage(playerid, 0, "1288", "Los bomberos solo pueden recoger vallas y conos!");
									}
								}
							}
						    else
						    {
								SendInfoMessage(playerid, 0, "834", "Aquí no hay ningún Cono, Valla ni Pincho!");
							}
					    }
					    else
					    {
							SendInfoMessage(playerid, 0, "835", "Usted no es LSPD, SFPD, Camionero ni Bombero");
						}
				  	}
					// /Recoger Todos
				  	else if (strcmp("/Recoger Todos", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
		  			{
					    MsgAdminUseCommands(9, playerid, cmdtext);
						if (PlayersData[playerid][Admin] >= 4)
						{
			             	for (new i=0; i < MAX_OBJECTS_VALLAS_CONOS_PINCHOS; i++)
			             	{
							    if ( VCP[i][objectid_vcp] != -1 )
							    {
								    RemoveVCP(i);
							    }
						    }
							new StringFormat[MAX_TEXT_CHAT];
							format(StringFormat, sizeof(StringFormat), "%s Has recogido todos los objetos puestos por LSPD, SFPD y Camioneros",LOGO_STAFF);
		            		SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, StringFormat);
						}
						else
						{
							SendInfoMessage(playerid, 0, "890", "Tú no tienes acceso a el comando /Recoger Todos.");
					        return 1;
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "836", "Quizás quiso decir: /Recoger");
					}
			  	}
				// COMANDO: /Chequear [ID]
				else if (strfind(cmdtext, "/Chequear ", true) == 0)
				{
					if ( PlayersData[playerid][Faccion] == SFPD ||
						 PlayersData[playerid][Faccion] == LSPD ||
						 PlayersData[playerid][Faccion] == LCN ||
						 PlayersData[playerid][Faccion] == YKZ ||
						 PlayersData[playerid][Faccion] == SICARIOS )
				    {
					    if ( playerid == strval(cmdtext[10]) || IsPlayerNear(playerid, strval(cmdtext[10]),
							 "852",
							 "853",
							 "854",
							 "El jugador que le deseas chequear no se encuentra conectado",
							 "El jugador que le deseas chequear no se ha logueado",
							 "El jugador que le deseas chequear no se encuentra cerca de tí") )
					    {
					        if ( playerid == strval(cmdtext[10]) )
					        {
								Acciones(playerid, 8, "ser revisa el mismo");
							}
							else
							{
								new MsgCheckMe[MAX_TEXT_CHAT];
								format(MsgCheckMe, sizeof(MsgCheckMe), "revisa a %s en busca de algo ilegal", PlayersDataOnline[strval(cmdtext[10])][NameOnlineFix]);
								Acciones(playerid, 8, MsgCheckMe);
							}

							new YourWeaponAndaAmmo[2];
							new IsWeapon = false;
					        new MsgCheckWeapon[MAX_TEXT_CHAT];
							for (new i = 0; i < 13; i++)
							{
							    GetPlayerWeaponData(strval(cmdtext[10]), i, YourWeaponAndaAmmo[0], YourWeaponAndaAmmo[1]);
							    if ( YourWeaponAndaAmmo[0] != 0 )
							    {
									format(MsgCheckWeapon, sizeof(MsgCheckWeapon), "Arma: %s || Munición: %i", SlotNameWeapon[YourWeaponAndaAmmo[0]], YourWeaponAndaAmmo[1]);
								    SendClientMessage(playerid, COLOR_MESSAGES[2], MsgCheckWeapon);
								    IsWeapon = true;
								}
							}
							if ( !IsWeapon )
							{
							    SendClientMessage(playerid, COLOR_MESSAGES[2], " No se encontrarón armas");
							}
							format(MsgCheckWeapon, sizeof(MsgCheckWeapon), "Ganzúas: %i | Drogas: %i | Materiales: %i | Bombas: %i | Dinero: %i",
								PlayersData[strval(cmdtext[10])][Ganzuas],
								PlayersData[strval(cmdtext[10])][Drogas],
								PlayersData[strval(cmdtext[10])][Materiales],
								PlayersData[strval(cmdtext[10])][Bombas],
								PlayersData[strval(cmdtext[10])][Dinero]);
						    SendClientMessage(playerid, COLOR_MESSAGES[2], MsgCheckWeapon);
						}
				    }
				    else
				    {
						SendInfoMessage(playerid, 0, "851", "Usted no es LSPD, SFPD, YKZ, LCN ni Sicario.");
					}
				}
				// COMANDO: º
				else if (strfind(cmdtext, "/Desasignar ", true) == 0)
				{
				    if( PlayersData[playerid][Faccion] != CIVIL && PlayersData[playerid][Rango] <= 1 )
				    {
					    new playeridDesasignar = strval(cmdtext[GetPosSpace(cmdtext, 1)]);
					    new AsignarID = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
					    if ( IsPlayerNear(playerid, playeridDesasignar,
							 "1009",
							 "1010",
							 "1011",
							 "El jugador que le deseas desasignarle un vehículo no se encuentra conectado",
							 "El jugador que le deseas desasignarle un vehículo no se ha logueado",
							 "El jugador que le deseas desasignarle un vehículo no se encuentra cerca de tí") )
					    {
					        if( PlayersData[playerid][Faccion] == PlayersData[playeridDesasignar][Faccion] )
							{
							    if ( PlayersData[playeridDesasignar][Rango] > 1 )
							    {
							        if ( AsignarID >= 1 && AsignarID <= 3 )
							        {
										new ReturnRemoveAsignados = RemoveAsignados(playeridDesasignar, AsignarID - 1);
								        if ( ReturnRemoveAsignados )
								        {
											new MsgAsignarMe[MAX_TEXT_CHAT];
											new MsgAsignarYou[MAX_TEXT_CHAT];

											format(MsgAsignarMe, sizeof(MsgAsignarMe), "Le has desasignado a %s el vehículo con matrícula %i", PlayersDataOnline[playeridDesasignar][NameOnlineFix], DataCars[ReturnRemoveAsignados][Matricula]);
											format(MsgAsignarYou, sizeof(MsgAsignarYou), "%s te ha desasignado el vehículo con matrícula %i", PlayersDataOnline[playerid][NameOnlineFix], DataCars[ReturnRemoveAsignados][Matricula]);
											SendInfoMessage(playerid, 3, "0", MsgAsignarMe);
											SendInfoMessage(playeridDesasignar, 3, "0", MsgAsignarYou);
		                                }
		                                else
		                                {
		                                    new MsgAsignarFail[MAX_TEXT_CHAT];
											format(MsgAsignarFail, sizeof(MsgAsignarFail), "%s no tiene ningún vehículo asignado en el Vehículo número %i!", PlayersDataOnline[playeridDesasignar][NameOnlineFix], AsignarID);
											SendInfoMessage(playerid, 0, "1012", MsgAsignarFail);
										}
									}
									else
									{
										SendInfoMessage(playerid, 0, "1201", "El número del Slot de vehículos asignados tiene que estár comprendido entre 1 y 3");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "1013", "El jugador que desea desasignarle éste vehículo, es Líder o Sin-Líder, no necesita desasignación");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "1013", "El jugador que desea desasignarle éste vehículo, no pertenece a su facción");
							}
					    }
					}
					else
					{
						SendInfoMessage(playerid, 0, "1014", "Usted no es líder ni sub-líder!");
					}
				}
				// COMANDO: /Asignar [ID]
				else if (strfind(cmdtext, "/Asignar ", true) == 0)
				{
				    if( PlayersData[playerid][Faccion] != CIVIL && PlayersData[playerid][Rango] <= 1 )
				    {
						new MyNearCar = IsPlayerInNearVehicle(playerid);
						if ( MyNearCar )
						{
							if ( IsVehicleMyFaccion(playerid, MyNearCar) )
							{
							    if ( IsPlayerNear(playerid, strval(cmdtext[9]),
									 "992",
									 "993",
									 "994",
									 "El jugador que le deseas asignarle un vehículo no se encuentra conectado",
									 "El jugador que le deseas asignarle un vehículo no se ha logueado",
									 "El jugador que le deseas asignarle un vehículo no se encuentra cerca de tí") )
							    {
							        if( PlayersData[playerid][Faccion] == PlayersData[strval(cmdtext[9])][Faccion] )
									{
									    if ( PlayersData[strval(cmdtext[9])][Rango] > 1 )
									    {
											new ResponseAddA = AddAsignados(strval(cmdtext[9]), MyNearCar);
									        if ( ResponseAddA == 1 )
									        {
												new MsgAsignarMe[MAX_TEXT_CHAT];
												new MsgAsignarYou[MAX_TEXT_CHAT];

												format(MsgAsignarMe, sizeof(MsgAsignarMe), "Le has asignado a %s el vehículo con matrícula %i.", PlayersDataOnline[strval(cmdtext[9])][NameOnlineFix], DataCars[MyNearCar][Matricula]);
												format(MsgAsignarYou, sizeof(MsgAsignarYou), "%s te ha asignado el vehículo con matrícula %i", PlayersDataOnline[playerid][NameOnlineFix], DataCars[MyNearCar][Matricula]);
												SendInfoMessage(playerid, 3, "0", MsgAsignarMe);
												SendInfoMessage(strval(cmdtext[9]), 3, "0", MsgAsignarYou);
		                                    }
		                                    else
		                                    {

		                                        new MsgAsignarFail[MAX_TEXT_CHAT];
		                                        if ( ResponseAddA == 2 )
		                                        {
													format(MsgAsignarFail, sizeof(MsgAsignarFail), "%s ya tiene asignado éste vehículo!", PlayersDataOnline[strval(cmdtext[9])][NameOnlineFix]);
													SendInfoMessage(playerid, 0, "147", MsgAsignarFail);
												}
												else
												{
													format(MsgAsignarFail, sizeof(MsgAsignarFail), "Al jugador %s ya no se le puede asignar más vehículos!", PlayersDataOnline[strval(cmdtext[9])][NameOnlineFix]);
													SendInfoMessage(playerid, 0, "1200", MsgAsignarFail);
												}
											}
										}
										else
										{
											SendInfoMessage(playerid, 0, "246", "El jugador que desea asignarle éste vehículo, es Líder o Sin-Líder, no necesita asignación");
										}
									}
									else
									{
										SendInfoMessage(playerid, 0, "995", "El jugador que desea asignarle éste vehículo, no pertenece a su facción");
									}
							    }
							}
							else
							{
								SendInfoMessage(playerid, 0, "996", "Éste vehículo no pertenece a su facción!");
							}
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "997", "Usted no es líder ni sub-líder!");
					}
				}
				// COMANDO: /Meter [ID]
				else if (strfind(cmdtext, "/Meter ", true) == 0)
				{
					if ( PlayersData[playerid][Faccion] == SFPD ||
						 PlayersData[playerid][Faccion] == LSPD )
				    {
					    if ( IsPlayerNear(playerid, strval(cmdtext[7]),
							 "945",
							 "946",
							 "947",
							 "El jugador que le deseas meter o sacar de un vehículo no se encuentra conectado",
							 "El jugador que le deseas meter o sacar de un vehículo no se ha logueado",
							 "El jugador que le deseas meter o sacar de un vehículo no se encuentra cerca de tí") )
					    {
							new MsgMeter[MAX_TEXT_CHAT];
					        if ( IsPlayerInAnyVehicle(strval(cmdtext[7])) )
					        {
						        if ( !IsPlayerInAnyVehicle(playerid) )
						        {
						            format(MsgMeter, sizeof(MsgMeter), "sacar del vehículo a %s", PlayersDataOnline[strval(cmdtext[7])][NameOnlineFix]);
									if ( IntentarAccion(playerid, MsgMeter, random(3)) )
									{
									    RemovePlayerFromVehicle(strval(cmdtext[7]));
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "944", "Desde adentro del vehículo no puedes sacar a nadie que este adentro del mismo");
								}
							}
							else
							{
						        if ( !IsPlayerInAnyVehicle(playerid) )
						        {
							  	    new MyNearVehicle = IsPlayerInNearVehicle(playerid);
							  	    if ( MyNearVehicle )
							  	    {
									    new MySeatFree = -1;
									    new MySeatSave[4];

										for (new i = 0; i < MAX_PLAYERS; i++)
										{
											if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleID(playerid) == MyNearVehicle && GetPlayerVehicleSeat(playerid) != 0)
											{
		                                        MySeatSave[GetPlayerVehicleSeat(playerid)] = true;
											}
										}
										if ( !MySeatSave[3] )
										{
	                                        MySeatFree = 3;
										}
										else if ( !MySeatSave[2] )
										{
	                                        MySeatFree = 2;
										}
										else if ( !MySeatSave[1] )
										{
	                                        MySeatFree = 1;
										}

										if ( MySeatFree != -1 )
										{
								            format(MsgMeter, sizeof(MsgMeter), "meter al vehículo a %s", PlayersDataOnline[strval(cmdtext[7])][NameOnlineFix]);
											if ( IntentarAccion(playerid, MsgMeter, random(3)) )
											{
											    PutPlayerInVehicle(strval(cmdtext[7]), MyNearVehicle, MySeatFree);
											}
										}
										else
										{
											SendInfoMessage(playerid, 0, "948", "No hay acientos vacíos para meter a este jugador en el vehículo y en el asiento de conductor no puede ir!");
										}
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "949", "Desde adentro del vehículo no puedes meter a nadie que este afuera del mismo");
								}
							}

					    }
				    }
				    else
				    {
						SendInfoMessage(playerid, 0, "950", "Usted no es LSPD ni SFPD!");
					}
				}
				// COMANDO: /Bombas
			  	else if (strcmp("/Bombas", cmdtext, true, 7) == 0 && strlen(cmdtext) == 7)
			  	{
				    MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Faccion] == SICARIOS &&
						 PlayersData[playerid][Rango] <= 4 || PlayersData[playerid][Admin] >= 8 && PlayersDataOnline[playerid][AdminOn] )
				    {
					    ShowBombas(playerid);
				    }
				    else
				    {
						SendInfoMessage(playerid, 0, "1298", "Usted no puede usar el control de bombas!");
					}
			  	}
				// COMANDO: /Detonar Todas
			  	else if (strcmp("/Detonar Todas", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
				{
				    MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Faccion] == SICARIOS &&
						 PlayersData[playerid][Rango] <= 1  || PlayersData[playerid][Admin] >= 8 && PlayersDataOnline[playerid][AdminOn])
				    {
				        new Found;
						for (new i = 0; i < MAX_BOMBAS_COUNT; i++ )
					  	{
						    if ( BombasO[i][TypeBomba] != BOMBA_TYPE_NONE )
						    {
								ActivarBomba(i, 1);
								Found++;
							}
						}
						if ( Found )
						{
							new StringFormat[MAX_TEXT_CHAT];
							format(StringFormat, sizeof(StringFormat), "Detonaste todas las bombas actuales en total erán %i.", Found);
							SendInfoMessage(playerid, 2, "0", StringFormat);
						}
						else
						{
							SendInfoMessage(playerid, 0, "1306", "No hay bombas para detonar!");
						}
				    }
				    else
				    {
						SendInfoMessage(playerid, 0, "1305", "No te encuentras cerca de una bomba!");
					}
				}
				// COMANDO: /Desactivar
				else if (strfind(cmdtext, "/Desactivar ", true) == 0)
				{
					// COMANDO: /Desactivar Bomba
				  	if (strcmp("/Desactivar Bomba", cmdtext, true, 17) == 0 && strlen(cmdtext) == 17)
				  	{
						if ( PlayersData[playerid][Faccion] == SICARIOS &&
							 PlayersData[playerid][Rango] <= 4 ||
							PlayersData[playerid][Faccion] == SFPD && PlayersData[playerid][Rango] <= 6 ||
							PlayersData[playerid][Faccion] == LSPD && PlayersData[playerid][Rango] <= 6  )
					    {

					        new IsBombNear = IsPlayerNearBomba(playerid, 1.5, -1);
					        if ( IsBombNear != -1 )
					        {
					            if ( PlayersData[playerid][Faccion] == SFPD || PlayersData[playerid][Faccion] == LSPD )
						        {
									if (IntentarAccion(playerid, "desactivar la bomba", random(3)))
									{
									    DesactivarBomba(playerid, IsBombNear);
									    Acciones(playerid, 7, "Bomba: Desactivada...");
									}
									else
									{
										ActivarBomba(IsBombNear, 20);
									    Acciones(playerid, 7, "Bomba: Activada...");
									}
								}
								else
								{
					            	if ( DesactivarBomba(playerid, IsBombNear) )
					            	{
										SendInfoMessage(playerid, 2, "0", "Desactivaste está bomba!");
					            	}
					            	else
					            	{
										SendInfoMessage(playerid, 0, "1304", "Ocurrió un error al desactivar la bomba!");
									}
								}
			            	}
			            	else
			            	{
								SendInfoMessage(playerid, 0, "1301", "No te encuentras cerca de una bomba!");
							}
					    }
					    else
					    {
							SendInfoMessage(playerid, 0, "1295", "Usted no es no puede desactivar bombas!");
						}
				  	}
					// COMANDO: /Desactivar Bomba
				  	else if (strcmp("/Desactivar Bomba Todos", cmdtext, true, 23) == 0 && strlen(cmdtext) == 23)
				  	{
					    MsgAdminUseCommands(9, playerid, cmdtext);
						if ( PlayersData[playerid][Admin] >= 7 )
					    {
							for (new i = 0; i < MAX_BOMBAS_COUNT; i++ )
							{
								RemoveBomba(i);
							}
							new StringFormat[MAX_TEXT_CHAT];
							format(StringFormat, sizeof(StringFormat), "%s Has desactivado todas las bombas",LOGO_STAFF);
		            		SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, StringFormat);
					    }
					    else
					    {
							SendInfoMessage(playerid, 0, "1299", "Tú no tienes acceso a el comando /Desactivar Bomba Todos.");
						}
				  	}
				  	else
				  	{
						SendInfoMessage(playerid, 0, "1296", "Quizás quiso decir: /Desactivar Bomba");
					}
			  	}
				// COMANDO: /Poner
				else if (strfind(cmdtext, "/Poner ", true) == 0)
				{
					// COMANDO: /Poner Cono
				  	if (strcmp("/Poner Cono", cmdtext, true, 11) == 0 && strlen(cmdtext) == 11)
				  	{
						if ( PlayersData[playerid][Faccion] == SFPD && PlayersData[playerid][Rango] <= 6 ||
							 PlayersData[playerid][Faccion] == LSPD && PlayersData[playerid][Rango] <= 6 ||
							 PlayersData[playerid][Faccion] == CAMIONEROS && PlayersData[playerid][Rango] <= 3 ||
							 PlayersData[playerid][Faccion] == SFMD && PlayersData[playerid][Rango] <= 2 ||
						 	 PlayersData[playerid][Faccion] == SFMD && PlayersData[playerid][Rango] == 5 ||
							 PlayersData[playerid][Faccion] == LSMD && PlayersData[playerid][Rango] <= 2 ||
						 	 PlayersData[playerid][Faccion] == LSMD && PlayersData[playerid][Rango] == 5  )
					    {
					        AddVCP(playerid, CONO, 0.0,0.0,0.0,0.0);
					    }
					    else
					    {
							SendInfoMessage(playerid, 0, "837", "Usted no es LSPD, SFPD, Camionero ni Bombero!");
						}
				  	}
					// COMANDO: /Poner Uniforme
				  	else if (strcmp("/Poner Uniforme", cmdtext, true, 15) == 0 && strlen(cmdtext) == 15)
				  	{
						if ( PlayersData[playerid][Faccion] == SFPD ||
							 PlayersData[playerid][Faccion] == LSPD )
					    {
							if 	( PlayersData[playerid][Faccion] == SFPD && IsPlayerInRangeOfPoint(playerid, 10.0, 225.2609,121.4485,999.0762) ||
								  PlayersData[playerid][Faccion] == LSPD && IsPlayerInRangeOfPoint(playerid, 10.0, 256.1825,77.9571,1003.6406) )
						    {
								SetPlayerSelectedTypeSkin(playerid, true);
							}
							else
							{
								SendInfoMessage(playerid, 0, "1513", "No te encuentras en el vestuario!");
							}
					    }
					    else
					    {
							SendInfoMessage(playerid, 0, "1514", "Usted no es LSPD ni SFPD!");
						}
				  	}
					// COMANDO: /Poner Bomba
					else if (strfind(cmdtext, "/Poner Bomba", true) == 0)
				  	{
					    MsgAdminUseCommands(9, playerid, cmdtext);
						if ( PlayersData[playerid][Faccion] == SICARIOS &&
							 PlayersData[playerid][Rango] <= 4 ||
							 PlayersData[playerid][Admin] >= 8 && PlayersDataOnline[playerid][AdminOn] )
					    {
					        if ( PlayersData[playerid][Bombas] > 0 || PlayersData[playerid][Admin] >= 8 && PlayersDataOnline[playerid][AdminOn] )
					        {
       					        new ObjectIDBomb = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
					            new ResultadoPlanted;
								new Float:PosPlayer[3]; GetPlayerPos(playerid, PosPlayer[0], PosPlayer[1], PosPlayer[2]);
								if ( PlayersDataOnline[playerid][InCarId] && IsPlayerInAnyVehicle(playerid) ||
									 PlayersDataOnline[playerid][InVehicle] && IsPlayerInAnyVehicle(playerid) )
								{
						            ResultadoPlanted = AddBomba(playerid, BOMBA_TYPE_CAR, GetPlayerVehicleID(playerid), PosPlayer[0], PosPlayer[1], PosPlayer[2], 0);
									ApplyPlayerAnimCustom(playerid,
									"CAR_CHAT",
									CARCHAT_ANIMATIONS[15], false);
								}
								else
								{
								    if ( ObjectIDBomb >= 0 && ObjectIDBomb < 8 )
								    {
							            ResultadoPlanted = AddBomba(playerid, BOMBA_TYPE_FOOT, false, PosPlayer[0], PosPlayer[1], PosPlayer[2], BombasOjectsID[ObjectIDBomb]);
										ApplyPlayerAnimCustom(playerid,
										"BOMBER",
										BOMBER_ANIMATIONS[0], false);
									}
									else
									{
										SendInfoMessage(playerid, 0, "1303", "El tipo de bomba debe estár comprendido entre 0 y 7!");
									}
								}
							    if ( ResultadoPlanted )
								{
								    if ( PlayersData[playerid][Admin] >= 8 && PlayersDataOnline[playerid][AdminOn] )
								    {

									}
									else
									{
										PlayersData[playerid][Bombas]--;
									}
								}
						    }
						    else
						    {
								SendInfoMessage(playerid, 0, "1302", "No tienes bombas!");
							}
					    }
					    else
					    {
							SendInfoMessage(playerid, 0, "1294", "Usted no es no puede poner bombas!");
						}
				  	}
					// COMANDO: /Poner Candado [Razón]
				  	else if (strfind(cmdtext, "/Poner Candado ", true) == 0)
				  	{
						if ( PlayersData[playerid][Faccion] == SFPD && PlayersData[playerid][Rango] <= 4 ||
							 PlayersData[playerid][Faccion] == LSPD && PlayersData[playerid][Rango] <= 5)
					    {
		          			new MyNearCar = IsPlayerInNearVehicle(playerid);
		          			if ( MyNearCar )
		          			{
							    if ( !IsPlayerInAnyVehicle(playerid) )
							    {
							  	    if ( !DataCars[MyNearCar][LockPolice] )
							  	    {
										if ( strlen(cmdtext[15]) >= 3 && strlen(cmdtext[15]) <= 50 )
										{
								  	        if ( IsValidStringServer(playerid, cmdtext[15]) )
								  	        {
												if (IntentarAccion(playerid, "ponerle un candado policial al vehículo", random(3)))
												{
												    DataCars[MyNearCar][LockPolice] = true;
										    		format(DataCars[MyNearCar][ReasonLock], 50, "%s %s: %s", FaccionData[PlayersData[playerid][Faccion]][NameFaccion], PlayersDataOnline[playerid][NameOnlineFix], cmdtext[15]);
												}
											}
										}
										else
										{
											SendInfoMessage(playerid, 0, "943", "La razón del candado debe ser mayor de 3 caracteres y menor de 50");
										}
							  	    }
							  	    else
							  	    {
										Acciones(playerid, 8, "le quitó el candado al vehículo");
									    DataCars[MyNearCar][LockPolice] = false;
							    		format(DataCars[MyNearCar][ReasonLock], 50, "0");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "879", "Desde adentro del vehículo no puedes ponerle candado");
								}
					  	    }
					    }
					    else
					    {
							SendInfoMessage(playerid, 0, "878", "Usted no es no puede poner candados!");
						}

				  	}
					// COMANDO: /Poner Pincho
				  	else if (strcmp("/Poner Pincho", cmdtext, true, 13) == 0 && strlen(cmdtext) == 13)
				  	{
						if ( PlayersData[playerid][Faccion] == SFPD && PlayersData[playerid][Rango] <= 6 ||
							 PlayersData[playerid][Faccion] == LSPD && PlayersData[playerid][Rango] <= 6)
					    {
					        AddVCP(playerid, PINCHO, 0.0,0.0,0.0,0.0);
					    }
					    else
					    {
							SendInfoMessage(playerid, 0, "838", "Usted no es LSPD ni SFPD");
						}
				  	}
					// COMANDO: /Poner Valla
				  	else if (strcmp("/Poner Valla", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12)
				  	{
						if ( PlayersData[playerid][Faccion] == SFPD && PlayersData[playerid][Rango] <= 6 ||
							 PlayersData[playerid][Faccion] == LSPD && PlayersData[playerid][Rango] <= 6 ||
							 PlayersData[playerid][Faccion] == CAMIONEROS && PlayersData[playerid][Rango] <= 3 ||
							 PlayersData[playerid][Faccion] == SFMD && PlayersData[playerid][Rango] <= 2 ||
						 	 PlayersData[playerid][Faccion] == SFMD && PlayersData[playerid][Rango] == 5 ||
							 PlayersData[playerid][Faccion] == LSMD && PlayersData[playerid][Rango] <= 2 ||
						 	 PlayersData[playerid][Faccion] == LSMD && PlayersData[playerid][Rango] == 5							  )
					    {
					        AddVCP(playerid, VALLA, 0.0,0.0,0.0,0.0);
					    }
					    else
					    {
							SendInfoMessage(playerid, 0, "838", "Usted no puede poner vallas!");
						}
				  	}
					// COMANDO: /Poner Equipo [ID]
					else if (strfind(cmdtext, "/Poner Equipo ", true) == 0)
					{
						if ( PlayersData[playerid][Faccion] == SFPD ||
							 PlayersData[playerid][Faccion] == LSPD && PlayersData[playerid][Rango] != 7 )
					    {
							if ( PlayersData[playerid][TimeEquipo] <= gettime() )
						    {
								if ( CheckWeapondCheat(playerid) && (
									 PlayersData[playerid][Faccion] == SFPD && IsPlayerInRangeOfPoint(playerid, 10.0, 225.2609,121.4485,999.0762) ||
									 PlayersData[playerid][Faccion] == LSPD && IsPlayerInRangeOfPoint(playerid, 10.0, 256.1825,77.9571,1003.6406) ) )
							    {
							        if ( strval(cmdtext[14]) >= 1 && strval(cmdtext[14]) <= 5 )
							        {
										new equipoid = strval(cmdtext[14]);
										new NoAutirizado;
										PlayersData[playerid][TimeEquipo] = gettime() + 900;
	        							switch (equipoid)
								        {
								            case 1:
								            {
												GivePlayerWeaponEx(playerid, 3, 1);
												GivePlayerWeaponEx(playerid, 41, 200);
											}
								            case 2:
								            {
												if ( PlayersData[playerid][Rango] <= 6  || PlayersDataOnline[playerid][IsAutorizado])
												{
													GivePlayerWeaponEx(playerid, 3, 1);
													GivePlayerWeaponEx(playerid, 41, 200);
													GivePlayerWeaponEx(playerid, 23, 60);
												}
												else
												{
	  												NoAutirizado = true;
												}
											}
								            case 3:
								            {
												if ( PlayersData[playerid][Rango] <= 5 || PlayersDataOnline[playerid][IsAutorizado])
												{
													GivePlayerWeaponEx(playerid, 43, 200);
													GivePlayerWeaponEx(playerid, 3, 1);
													GivePlayerWeaponEx(playerid, 41, 200);
													GivePlayerWeaponEx(playerid, 24, 60);
												}
												else
												{
	  												NoAutirizado = true;
												}
											}
								            case 4:
								            {
												if ( PlayersData[playerid][Rango] <= 4 || PlayersDataOnline[playerid][IsAutorizado] )
												{
													GivePlayerWeaponEx(playerid, 3, 1);
													GivePlayerWeaponEx(playerid, 41, 200);
													GivePlayerWeaponEx(playerid, 24, 60);
													GivePlayerWeaponEx(playerid, 29, 250);
													GivePlayerWeaponEx(playerid, 17, 5);
													
												}
												else
												{
	  												NoAutirizado = true;
												}
											}
								            case 5:
								            {
												if ( PlayersData[playerid][Rango] <= 3 || PlayersDataOnline[playerid][IsAutorizado])
												{
													GivePlayerWeaponEx(playerid, 3, 1);
													GivePlayerWeaponEx(playerid, 41, 200);
													GivePlayerWeaponEx(playerid, 24, 60);
													GivePlayerWeaponEx(playerid, 29, 250);
													GivePlayerWeaponEx(playerid, 31, 250);
													GivePlayerWeaponEx(playerid, 27, 250);
													GivePlayerWeaponEx(playerid, 34, 100);
													GivePlayerWeaponEx(playerid, 17, 5);
												}
												else
												{
	  												NoAutirizado = true;
												}
											}
	          							}
	          							if ( !NoAutirizado )
	          							{
											SetPlayerArmourEx(playerid, 85);
											new MsgEquipoMe[MAX_TEXT_CHAT];
											format(MsgEquipoMe, sizeof(MsgEquipoMe), "coge un equipo número %i del armario", strval(cmdtext[14]));
											Acciones(playerid, 8, MsgEquipoMe);
											PlayersDataOnline[playerid][IsAutorizado] = false;
											
											if ( GetObjectByType(playerid, TYPE_TASER) == -1 )
											{
												AddObjectHoldToPlayer(playerid, 18642);
											}
										}
										else
										{
											SendInfoMessage(playerid, 0, "1033", "Usted no está autizado a coger ese equipo");
										}
								    }
								    else
								    {
										SendInfoMessage(playerid, 0, "841", "El ID del equipo tiene que estar entre 1 y 5");
									}
							    }
							    else
							    {
									SendInfoMessage(playerid, 0, "842", "Aquí no esta el armario de equipos");
								}
						    }
						    else
						    {
								new MsgPersonalizado[MAX_TEXT_CHAT];
								format(MsgPersonalizado, sizeof(MsgPersonalizado), "Debe esperar %i minutos con %i segundos para volver a usar otro equipo", (PlayersData[playerid][TimeEquipo] - gettime()) / 60, ((PlayersData[playerid][TimeEquipo] - gettime()) % 60));
								SendInfoMessage(playerid, 0, "843", MsgPersonalizado);
							}
					    }
					    else
					    {
							if ( PlayersData[playerid][Faccion] == LSPD && PlayersData[playerid][Rango] == 7 )
							{
								SendInfoMessage(playerid, 0, "1555", "Usted no puede ponerse equipos todavía!");
							}
							else
							{
								SendInfoMessage(playerid, 0, "844", "Usted no es LSPD ni SFPD");
							}
						}
				  	}
					else
					{
						SendInfoMessage(playerid, 0, "839", "Quizás quiso decir: /Poner {Candado [Razón], Cono, Pincho, Valla, Equipo [ID_EQUIPO], Bomba, Uniforme}");
					}
			  	}

				// COMANDO: /Debilitar Incendio
			  	else if (strcmp("/Debilitar Incendio", cmdtext, true, 19) == 0 && strlen(cmdtext) == 19)
				{
					if ( PlayersData[playerid][Faccion] == LSMD && PlayersData[playerid][Rango] <= 2 ||
						 PlayersData[playerid][Faccion] == LSMD && PlayersData[playerid][Rango] == 5 ||
						 PlayersData[playerid][Faccion] == SFMD && PlayersData[playerid][Rango] <= 2 ||
						 PlayersData[playerid][Faccion] == SFMD && PlayersData[playerid][Rango] == 5						 )
				    {
				        new FireID = IsPlayerNearFire(playerid);
				        if (FireID != -1)
				        {
					        if ( IntentarAccion(playerid, "debilitar el incendio", random(5)) )
					        {
                                DestroyParticleFire(FireID);
							}
						}
				    }
			        else
			        {
						SendInfoMessage(playerid, 0, "1281", "Usted no es bombero!");
					}
			    }
				// COMANDO: /Examinar Enfermedad [ID]
				else if (strfind(cmdtext, "/Examinar Enfermedad ", true) == 0)
				{
					if ( (PlayersData[playerid][Faccion] == LSMD || PlayersData[playerid][Faccion] == SFMD ) && PlayersData[playerid][Rango] <= 3)
				    {
					    if ( PlayersData[playerid][Faccion] == SFMD && (IsPlayerInRangeOfPoint(playerid, 10.0, 2800.7007,2518.0408,10.8770) ||
																    	IsPlayerInRangeOfPoint(playerid, 10.0, 2794.0745,2509.6274,17.6810)) ||
							 PlayersData[playerid][Faccion] == LSMD && (IsPlayerInRangeOfPoint(playerid, 10.0, 303.2898,1904.9742,17.7344) ||
																    	IsPlayerInRangeOfPoint(playerid, 10.0, 293.0114,1874.8575,17.6406))
																		 )
					    {
	   				        new PlayerIDEnfermo = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
						    if ( IsPlayerNear(playerid, PlayerIDEnfermo,
								 "1515",
								 "1516",
								 "1517",
								 "El jugador que le deseas examinar no se encuentra conectado",
								 "El jugador que le deseas examinar no se ha logueado",
								 "El jugador que le deseas examinar no se encuentra cerca de tí") )
						    {
						        new MsgCurarIntentar[MAX_TEXT_CHAT];
						        format(MsgCurarIntentar, sizeof(MsgCurarIntentar), "examinar a %s", PlayersDataOnline[PlayerIDEnfermo][NameOnlineFix]);
	    						if (IntentarAccion(playerid, MsgCurarIntentar, random(5)))
	    						{
									if ( PlayersData[PlayerIDEnfermo][Enfermedad] != 0 )
									{
								        format(MsgCurarIntentar, sizeof(MsgCurarIntentar), "Se le ha detectado %s a %s con el examen", PlayersDataOnline[PlayerIDEnfermo][NameOnlineFix], EnfermedadName[PlayersData[PlayerIDEnfermo][Enfermedad]]);
									}
									else
									{
								        format(MsgCurarIntentar, sizeof(MsgCurarIntentar), "No se le ha detectado ninguna enfermedad a %s", PlayersDataOnline[PlayerIDEnfermo][NameOnlineFix]);
									}
									SendInfoMessage(playerid, 3, "0", MsgCurarIntentar);
	 							}
						    }
					    }
						else
						{
							SendInfoMessage(playerid, 0, "1518", "No te encuentras en el salón de operaciones ni en la consulta");
						}
			        }
			        else
			        {
						SendInfoMessage(playerid, 0, "1519", "Usted no es médico");
					}
				}
				// COMANDO: /Curar Enfermedad [ID]
				else if (strfind(cmdtext, "/Curar Enfermedad ", true) == 0)
				{
					if ( (PlayersData[playerid][Faccion] == LSMD || PlayersData[playerid][Faccion] == SFMD ) && PlayersData[playerid][Rango] <= 3)
				    {
					    if ( PlayersData[playerid][Faccion] == SFMD && (IsPlayerInRangeOfPoint(playerid, 10.0, 2800.7007,2518.0408,10.8770) ||
																    	IsPlayerInRangeOfPoint(playerid, 10.0, 2794.0745,2509.6274,17.6810)) ||
							 PlayersData[playerid][Faccion] == LSMD && (IsPlayerInRangeOfPoint(playerid, 10.0, 303.2898,1904.9742,17.7344) ||
																    	IsPlayerInRangeOfPoint(playerid, 10.0, 293.0114,1874.8575,17.6406))
																		 )
					    {
	   				        new PlayerIDEnfermo = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
						    if ( IsPlayerNear(playerid, PlayerIDEnfermo,
								 "1416",
								 "1415",
								 "1414",
								 "El jugador que le deseas curar una enfermedad no se encuentra conectado",
								 "El jugador que le deseas curar una enfermedad no se ha logueado",
								 "El jugador que le deseas curar una enfermedad no se encuentra cerca de tí") )
						    {
								if ( PlayersData[PlayerIDEnfermo][Enfermedad] )
								{
							        new MsgCurarIntentar[MAX_TEXT_CHAT];
							        format(MsgCurarIntentar, sizeof(MsgCurarIntentar), "curarle la enfermedad a %s", PlayersDataOnline[PlayerIDEnfermo][NameOnlineFix]);
		    						if (IntentarAccion(playerid, MsgCurarIntentar, random(5)))
		    						{

										SetPlayerHealthEx(PlayerIDEnfermo, 30);

										GivePlayerMoneyEx(playerid, 50);

										ChangeEnfermedad(PlayerIDEnfermo, 0);

										FaccionData[PlayersData[playerid][Faccion]][Deposito] = FaccionData[PlayersData[playerid][Faccion]][Deposito] + 50;
		 							}
								}
								else
								{
									SendInfoMessage(playerid, 0, "1412", "Este jugador no necesitan que lo curen");
								}
						    }
					    }
						else
						{
							SendInfoMessage(playerid, 0, "1413", "No te encuentras en el salón de operaciones ni en la consulta");
						}
			        }
			        else
			        {
						SendInfoMessage(playerid, 0, "1417", "Usted no es médico");
					}
				}
				// COMANDO: /Curar
				else if (strfind(cmdtext, "/Curar ", true) == 0)
				{
					if ( PlayersData[playerid][Faccion] == SFMD || PlayersData[playerid][Faccion] == LSMD)
				    {
					    if ( IsPlayerNear(playerid, strval(cmdtext[7]),
							 "414",
							 "415",
							 "416",
							 "El jugador que le deseas curar no se encuentra conectado",
							 "El jugador que le deseas curar no se ha logueado",
							 "El jugador que le deseas curar no se encuentra cerca de tí") )
					    {
							new Float:Vida1;
							GetPlayerHealth(strval(cmdtext[7]), Vida1);
							if ( Vida1 <= VIDA_CRACK || PlayersData[strval(cmdtext[7])][Cansansio] <= 1 )
							{
								ApplyPlayerAnimCustom(playerid,
								"MEDIC",
								MEDIC_ANIMATIONS[0], false);
								ApplyPlayerAnimCustom(playerid,
								"MEDIC",
								MEDIC_ANIMATIONS[0], false);

						        new MsgCurarIntentar[MAX_TEXT_CHAT];
						        format(MsgCurarIntentar, sizeof(MsgCurarIntentar), "reanimar a %s", PlayersDataOnline[strval(cmdtext[7])][NameOnlineFix]);
	    						if (IntentarAccion(playerid, MsgCurarIntentar, random(3)))
	    						{
									if ( PlayersData[strval(cmdtext[7])][Cansansio] == 1 )
									{
										TextDrawHideForPlayer(strval(cmdtext[7]), BarsCansansio[PlayersData[strval(cmdtext[7])][Cansansio]]);
										PlayersData[strval(cmdtext[7])][Cansansio] = 5;
										ShowPlayerTextDrawCansansio(strval(cmdtext[7]));
									}

									SetPlayerHealthEx(strval(cmdtext[7]), 30);

									GivePlayerMoneyEx(playerid, 20);

									FaccionData[PlayersData[playerid][Faccion]][Deposito] = FaccionData[PlayersData[playerid][Faccion]][Deposito] + 10;

									ApplyAnimation(strval(cmdtext[7]),"PED",PED_ANIMATIONS[ModeWalkID[PlayersData[playerid][MyStyleWalk]]], 4.0, 0, 1, 1, 0, 1, 1);
	 							}
							}
							else
							{
								SendInfoMessage(playerid, 0, "417", "Este jugador no necesitan que lo curen");
							}
					    }
			        }
			        else
			        {
						SendInfoMessage(playerid, 0, "418", "Usted no es médico");
					}
				}
			    // /Bailar [ID]
	  			else if (strfind(cmdtext, "/Bailar ", true) == 0)
			    {
				    new IDDance[3];
					strmid(IDDance, cmdtext, 8, strlen(cmdtext), sizeof(IDDance));
					if ( strval(IDDance) >= 1 && strval(IDDance) <=4 )
					{
						SetPlayerSpecialAction(playerid, strval(IDDance) + 4);
						PlayersDataOnline[playerid][InAnim] = true;
					}
					else
					{
						SendInfoMessage(playerid, 0, "363", "El ID a bailar tiene que estar comprendida entre 1 y 4.");
					}
			    }
			    /*// /Salir
			  	else if (strcmp("/Salir", cmdtext, true, 6) == 0 && strlen(cmdtext) == 6)
	  			{
					if ( IsPlayerInAnyVehicle(playerid) )
					{
						if ( GetPlayerVehicleSeat(playerid) == 0 )
						{
							RemovePlayerFromVehicle(playerid);
						}
						else
						{
							SendInfoMessage(playerid, 0, "520", "Tiene que estar en el puesto del conductor para utilizar /Salir");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "521", "No se encuentra en ningún vehículo");
					}
				}*/
			    // /Desconectar
			  	else if (strcmp("/Desconectar", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12)
	  			{
				    if ( PlayersData[playerid][Faccion] == CNN && PlayersData[playerid][Rango] <= 5 )
			        {

						if ( CallCNN != -1 )
					    {
							PayCall(CallCNN);
			    			SendClientMessageToAll(0x0FFF00FF, "* CNN: Conexión telefónica finalizada.");
							Acciones(CallCNN, 8, "guarda su móvil");
							SendClientMessage(CallCNN, COLOR_COLGAR_DESCOLGAR, " Han colgado!");
							SetPlayerColgar(CallCNN);
			                PlayersDataOnline[CallCNN][InCall] = -1;
			    			CallCNN = -1;
					    }
					    else
					    {
							SendInfoMessage(playerid, 0, "911", "No hay nadie en la línea de CNN");
						}
				    }
				    else
				    {
						SendInfoMessage(playerid, 0, "912", "Tú no eres reportero!");
					}
	  			}
				// COMANDO: /Conectar [Número]
				else if (strfind(cmdtext, "/Conectar ", true) == 0)
				{
				    if ( PlayersData[playerid][Faccion] == CNN && PlayersData[playerid][Rango] <= 5 )
				    {
						if ( CallCNN == -1 )
					    {
							new numberphoneCnn = strval(cmdtext[10]);
							new NotFoundNumber = true;
				            for (new i = 0; i < MAX_PLAYERS; i++)
				            {
								if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersData[i][Phone] == numberphoneCnn && PlayersDataOnline[i][PhoneOnline] )
								{
									NotFoundNumber = false;
									if ( PlayersDataOnline[i][InCall] == 888 )
									{
									    PlayersDataOnline[i][TimeCall] = gettime();
										SendClientMessageToAll(0x0FFF00FF, "* CNN: Conexión telefónica establecida.");
										CallCNN = i;
										SendClientMessage(CallCNN, COLOR_COLGAR_DESCOLGAR, " Han descolgado!");
									}
									else
									{
										SendInfoMessage(playerid, 0, "913", "El móvil que desea conectar no está en la lista de espera en línea!");
									}
								}
							}
							if ( NotFoundNumber )
							{
								SendInfoMessage(playerid, 0, "914", "El móvil que desea conectar se encuentra apagado o no existe!");
							}
					    }
					    else
					    {
							SendInfoMessage(playerid, 0, "915", "Ya la línea de CNN está ocupada");
						}
				    }
				    else
				    {
						SendInfoMessage(playerid, 0, "916", "Tú no eres reportero!");
					}
				}
			    // /Llamar 888
			  	else if (strcmp("/Llamar 888", cmdtext, true, 11) == 0 && strlen(cmdtext) == 11)
	  			{
				    if ( PlayersData[playerid][Phone] != 0)
				    {
		                if ( PlayersDataOnline[playerid][PhoneOnline] )
		                {
							if ( !IsPlayerInCall(playerid) && IsReadyCallPublic(playerid))
							{
								if ( PlayersData[playerid][Saldo] >= 1 )
								{
								    if ( CallCNN == -1 )
								    {
										Acciones(playerid, 8, "saca su móvil y marca unos números");
										SendClientMessage(playerid, COLOR_INFO_MOVIL, " El número 888 está dando timbre!");
										PlayersDataOnline[playerid][IsDescolgado] 	= true;
										PlayersDataOnline[playerid][InCall] = 888;
										SetPlayerDescolgar(playerid);
										SendMessageToCallCNN(playerid);
										PlayersDataOnline[playerid][ICall] = true;
									}
									else
									{
										SendInfoMessage(playerid, 0, "917", "El número al que llama se encuentra ocupado");
									}
								}
							    else
							    {
									SendInfoMessage(playerid, 0, "1019", "No tienes saldo para realizar una llamada!");
								}
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1506", "Tiene el móvil apagado, enciendelo si desea realizar una llamada!");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "918", "Tú no tienes móvil");
					}
				}
			    // /Llamar 912 - SFPD       	ID - 4
			  	else if (strcmp("/Llamar 912", cmdtext, true, 11) == 0 && strlen(cmdtext) == 11)
	  			{
				    if ( PlayersData[playerid][Phone] != 0)
				    {
		                if ( PlayersDataOnline[playerid][PhoneOnline] )
		                {
							if ( !IsPlayerInCall(playerid) && IsReadyCallPublic(playerid))
							{
								PlayersDataOnline[playerid][NumberCallPublic] = true;
								Acciones(playerid, 8, "saca su móvil y marca unos números");
								ShowConnectedPolice(playerid);
								SetPlayerDescolgar(playerid);
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1507", "Tiene el móvil apagado, enciendelo si desea realizar una llamada!");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "869", "Tú no tienes móvil");
					}
				}
			    // /Llamar 911 - LSPD       	ID - 0
			  	else if (strcmp("/Llamar 911", cmdtext, true, 11) == 0 && strlen(cmdtext) == 11)
	  			{
				    if ( PlayersData[playerid][Phone] != 0)
				    {
		                if ( PlayersDataOnline[playerid][PhoneOnline] )
		                {
							if ( !IsPlayerInCall(playerid) && IsReadyCallPublic(playerid))
							{
								PlayersDataOnline[playerid][NumberCallPublic] = false;
								Acciones(playerid, 8, "saca su móvil y marca unos números");
								ShowConnectedPolice(playerid);
								SetPlayerDescolgar(playerid);
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1508", "Tiene el móvil apagado, enciendelo si desea realizar una llamada!");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "771", "Tú no tienes móvil");
					}
				}
			    // /Llamar 105 - SFMD
			  	else if (strcmp("/Llamar 105", cmdtext, true, 11) == 0 && strlen(cmdtext) == 11)
	  			{
				    if ( PlayersData[playerid][Phone] != 0)
				    {
		                if ( PlayersDataOnline[playerid][PhoneOnline] )
		                {
							if ( !IsPlayerInCall(playerid) && IsReadyCallPublic(playerid))
							{
                                PlayersDataOnline[playerid][SaveAfterAgenda][50] = false;
								Acciones(playerid, 8, "saca su móvil y marca unos números");
								ShowConnectedSAMD(playerid);
								SetPlayerDescolgar(playerid);
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1509", "Tiene el móvil apagado, enciendelo si desea realizar una llamada!");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "770", "Tú no tienes móvil");
					}
				}
			    // /Llamar 105 - LSMD
			  	else if (strcmp("/Llamar 106", cmdtext, true, 11) == 0 && strlen(cmdtext) == 11)
	  			{
				    if ( PlayersData[playerid][Phone] != 0)
				    {
		                if ( PlayersDataOnline[playerid][PhoneOnline] )
		                {
							if ( !IsPlayerInCall(playerid) && IsReadyCallPublic(playerid))
							{
                                PlayersDataOnline[playerid][SaveAfterAgenda][50] = true;
								Acciones(playerid, 8, "saca su móvil y marca unos números");
								ShowConnectedSAMD(playerid);
								SetPlayerDescolgar(playerid);
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1515", "Tiene el móvil apagado, enciendelo si desea realizar una llamada!");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1516", "Tú no tienes móvil");
					}
				}
			    // /Llamar 145 - Taxí      		ID - 0
			  	else if (strcmp("/Llamar 145", cmdtext, true, 11) == 0 && strlen(cmdtext) == 11)
	  			{
				    if ( PlayersData[playerid][Phone] != 0)
				    {
		                if ( PlayersDataOnline[playerid][PhoneOnline] )
		                {
							if ( IsFoundCall(PlayersData[playerid][Phone], 0) == -1 )
							{
								if ( !IsPlayerInCall(playerid) && IsReadyCallPublic(playerid))
								{
									new MsgLlamar[MAX_TEXT_CHAT];
									format(MsgLlamar, sizeof(MsgLlamar), "Un cliente ha llamado un taxí, Use (/Llamadas). Número: %i (%s).", PlayersData[playerid][Phone], Ciudades[GetMyNearCity(playerid)]);
									SendAlertCallRequest(TAXI, MsgLlamar);

									PlayersDataOnline[playerid][NumberCallPublic] = 0;
									AddCallPublics(playerid, PlayersData[playerid][Phone], 0);

									Acciones(playerid, 8, "saca su móvil y marca unos números");
									SendInfoMessage(playerid, 2, "0", "Llamó a la estación de taxís, espere que venga un taxí y no se mueva del lugar");
									SetPlayerDescolgar(playerid);
									SetTimerEx("SetPlayerColgar", 5000, false, "d", playerid);
						        }
							}
							else
							{
								SendInfoMessage(playerid, 0, "1108", "Ya usted tiene regístrada una llamada en la central de taxís, espere que le contesten");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1510", "Tiene el móvil apagado, enciendelo si desea realizar una llamada!");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "769", "Tú no tienes móvil");
					}
				}
			    // /Llamar 555 - Mecánicos SF     ID - 1
			  	else if (strcmp("/Llamar 555", cmdtext, true, 11) == 0 && strlen(cmdtext) == 11)
	  			{
				    if ( PlayersData[playerid][Phone] != 0)
				    {
		                if ( PlayersDataOnline[playerid][PhoneOnline] )
		                {
							if ( IsFoundCall(PlayersData[playerid][Phone], 1) == -1)
							{
								if ( !IsPlayerInCall(playerid) && IsReadyCallPublic(playerid))
								{
									new MsgLlamar[MAX_TEXT_CHAT];
									format(MsgLlamar, sizeof(MsgLlamar), "Han solicitado un mecánico, Use (/Llamadas). Número: %i (%s).", PlayersData[playerid][Phone], Ciudades[GetMyNearCity(playerid)]);
									SendAlertCallRequest(TALLER_SF, MsgLlamar);

									PlayersDataOnline[playerid][NumberCallPublic] = 1;
									AddCallPublics(playerid, PlayersData[playerid][Phone], 1);

									Acciones(playerid, 8, "saca su móvil y marca unos números");
									SendInfoMessage(playerid, 2, "0", "Los mecánicos del taller en San Fierro vendrán atenderle lo más prontó posible, espere en esta posición");
									SetPlayerDescolgar(playerid);
									SetTimerEx("SetPlayerColgar", 5000, false, "d", playerid);
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "767", "Ya usted tiene regístrada una llamada en la central del taller en San Fierro, espere que le contesten");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1511", "Tiene el móvil apagado, enciendelo si desea realizar una llamada!");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "768", "Tú no tienes móvil");
					}
				}
			    // /Llamar 777 - Mecánicos LS       ID - 1
			  	else if (strcmp("/Llamar 777", cmdtext, true, 11) == 0 && strlen(cmdtext) == 11)
	  			{
				    if ( PlayersData[playerid][Phone] != 0)
				    {
		                if ( PlayersDataOnline[playerid][PhoneOnline] )
		                {
							if ( IsFoundCall(PlayersData[playerid][Phone], 2) == -1)
							{
								if ( !IsPlayerInCall(playerid) && IsReadyCallPublic(playerid))
								{
									new MsgLlamar[MAX_TEXT_CHAT];
									format(MsgLlamar, sizeof(MsgLlamar), "Han solicitado un mecánico, Use (/Llamadas). Número: %i (%s).", PlayersData[playerid][Phone], Ciudades[GetMyNearCity(playerid)]);
									SendAlertCallRequest(TALLER_LS, MsgLlamar);

									PlayersDataOnline[playerid][NumberCallPublic] = 2;
									AddCallPublics(playerid, PlayersData[playerid][Phone], 2);

									Acciones(playerid, 8, "saca su móvil y marca unos números");
									SendInfoMessage(playerid, 2, "0", "Los mecánicos del taller en Los Santos vendrán atenderle lo más prontó posible, espere en esta posición");
									SetPlayerDescolgar(playerid);
									SetTimerEx("SetPlayerColgar", 5000, false, "d", playerid);
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "1290", "Ya usted tiene regístrada una llamada en la central del taller en Los Santos, espere que le contesten");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1512", "Tiene el móvil apagado, enciendelo si desea realizar una llamada!");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "734", "Tú no tienes móvil");
					}
				}
			    // /Cámaras
			  	else if (strcmp("/Cámaras", cmdtext, true, 8) == 0 && strlen(cmdtext) == 8 ||
				  		 strcmp("/Camaras", cmdtext, true, 8) == 0 && strlen(cmdtext) == 8)
	  			{
					if ( PlayersData[playerid][Faccion] == LSPD ||
						 PlayersData[playerid][Faccion] == SFPD)
				    {
						if ( PlayersData[playerid][Faccion] == LSPD && IsPlayerInRangeOfPoint(playerid, 2.0, 2365.8909,1559.6465,27.9562) ||
							 PlayersData[playerid][Faccion] == SFPD && IsPlayerInRangeOfPoint(playerid, 2.0, 1961.4952,973.3851,21.8714) )
						{
					     	PlayersDataOnline[playerid][InCamera] = true;
							ShowMenuForPlayer(CamerasM[0], playerid);
							PlayersDataOnline[playerid][InMenu] = GetPlayerMenu(playerid);

					        PlayersDataOnline[playerid][Spawn]      = false;
				            GetSpawnInfo(playerid);
							PlayersDataOnline[playerid][StateDeath] = true;
							TogglePlayerSpectating(playerid, 1);

							SetPlayerCameraPos(playerid, Cameras[0][PosXLook], Cameras[0][PosYLook], Cameras[0][PosZLook]);
							SetPlayerCameraLookAt(playerid, Cameras[0][PosXAt], Cameras[0][PosYAt], Cameras[0][PosZAt]);
						    SetPlayerInteriorEx(playerid, Cameras[0][Interior]);
					     	SetPlayerVirtualWorldEx(playerid, Cameras[0][World]);
						}
						else
						{
							SendInfoMessage(playerid, 0, "1089", "No se encuentra en el sistema de cámaras!");
						}
				    }
			        else
			        {
						SendInfoMessage(playerid, 0, "1088", "Usted no es LSPD ni SFPD!");
					}
			    }
			    // /Llamadas
			  	else if (strcmp("/Llamadas Bomberos", cmdtext, true, 18) == 0 && strlen(cmdtext) == 18)
	  			{
					if ( PlayersData[playerid][Faccion] == SFMD && PlayersData[playerid][Rango] <= 2 ||
                         PlayersData[playerid][Faccion] == SFMD && PlayersData[playerid][Rango] == 5 ||
						 PlayersData[playerid][Faccion] == LSMD && PlayersData[playerid][Rango] <= 2 ||
                         PlayersData[playerid][Faccion] == LSMD && PlayersData[playerid][Rango] == 5 )

					{
						PlayersDataOnline[playerid][NumberCallPublic] = 0;
					    if ( PlayersData[playerid][Faccion] == SFMD )
					    {
							PlayersDataOnline[playerid][SaveAfterAgenda][50] = false;
						}
						else
						{
							PlayersDataOnline[playerid][SaveAfterAgenda][50] = true;
						}
						ShowCallSAMD(playerid);
	  				}
	  				else
	  				{
						SendInfoMessage(playerid, 0, "1285", "Usted no es bombero!");
					}
	  			}
			    // /Llamadas
			  	else if (strcmp("/Llamadas", cmdtext, true, 9) == 0 && strlen(cmdtext) == 9)
	  			{
					if ( PlayersData[playerid][Faccion] == SFPD ||
						 PlayersData[playerid][Faccion] == LSPD)
				    {
				        if ( PlayersData[playerid][Faccion] == LSPD )
				        {
							PlayersDataOnline[playerid][NumberCallPublic] = false;
						}
						else
						{
							PlayersDataOnline[playerid][NumberCallPublic] = true;
						}
						ShowCallPolice(playerid);
				    }
					else if ( PlayersData[playerid][Faccion] == TAXI ||
						 	  PlayersData[playerid][Faccion] == TALLER_SF ||
						 	  PlayersData[playerid][Faccion] == TALLER_LS )
				    {
						if ( PlayersData[playerid][Faccion] == TAXI )
						{
							PlayersDataOnline[playerid][NumberCallPublic] = 0;
						}
						else if ( PlayersData[playerid][Faccion] == TALLER_SF )
						{
							PlayersDataOnline[playerid][NumberCallPublic] = 1;
						}
						else if ( PlayersData[playerid][Faccion] == TALLER_LS )
						{
							PlayersDataOnline[playerid][NumberCallPublic] = 2;
						}
						ShowCallPublics(playerid);
				    }
					else if ( PlayersData[playerid][Faccion] == LSMD || PlayersData[playerid][Faccion] == SFMD)
				    {
				        if ( PlayersData[playerid][Faccion] == SFMD )
				        {
                                PlayersDataOnline[playerid][SaveAfterAgenda][50] = false;
				        }
				        else
				        {
                                PlayersDataOnline[playerid][SaveAfterAgenda][50] = true;
				        }
				        if ( PlayersData[playerid][Rango] == 5 )
				        {
							PlayersDataOnline[playerid][NumberCallPublic] = false;
				        }
				        else
				        {
							PlayersDataOnline[playerid][NumberCallPublic] = true;
						}
						ShowCallSAMD(playerid);
				    }
				    else
				    {
						SendInfoMessage(playerid, 0, "772", "Usted no es médico, bombero, policía, taxísta ni mecánico!");
					}
	  			}
				// COMANDO: /Dormir
			  	else if (strcmp("/Dormir", cmdtext, true, 7) == 0 && strlen(cmdtext) == 7)
	  			{
					if ( PlayersData[playerid][IsPlayerInHouse] || PlayersDataOnline[playerid][IsPlayerInHotel] )
					{
						if ( PlayersData[playerid][Cansansio] < MAX_CANSANSIO )
						{
						    if ( !PlayersDataOnline[playerid][InSleep] )
						    {
								PlayersDataOnline[playerid][InSleep] = true;
								SetPlayerSleep(playerid);
								TogglePlayerControllableEx(playerid, false);
								ApplyPlayerAnimCustom(playerid,
								"PARACHUTE",
								PARA_ANIMATIONS[2], false);
							}
							else
						  	{
								SendInfoMessage(playerid, 0, "1121", "Ya usted está durmiendo, presione ENTER si desea terminar de dormir");
						   	}
						}
						else
						{
							SendInfoMessage(playerid, 0, "845", "No te encuentras lo suficietemente cansado como para dormir");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "846", "No se encuentra dentro de una casa");
					}
				}
				// COMANDO: /Timbre
			  	else if (strcmp("/Timbre", cmdtext, true, 7) == 0 && strlen(cmdtext) == 7)
	  			{
					if ( PlayersDataOnline[playerid][InPickup] >= HouseData[1][PickupId] &&
					     PlayersDataOnline[playerid][InPickup] <= HouseData[MAX_HOUSE][PickupId] )
					{
	                    if ( gettime() - HouseData[PlayersDataOnline[playerid][MyPickupWorld]][RingHouseTime] >= 20 )
	                    {
							for (new i = 0; i < MAX_PLAYERS; i++)
							{
							    if (i != playerid && IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersData[i][IsPlayerInHouse] == PlayersDataOnline[playerid][MyPickupWorld])
							    {
							        SendClientMessage(i, COLOR_DE_WISPEO, "** TIMBRE: RING RING!!!");
							    }
						    }
					        Acciones(playerid, 8, "tocó el timbre de la casa");
					        HouseData[PlayersDataOnline[playerid][MyPickupWorld]][RingHouseTime] = gettime();
						}
						else
						{
						    new MsgRingHouse[MAX_TEXT_CHAT];
						    format(MsgRingHouse, sizeof(MsgRingHouse), "El timbre de está casa ha sido tocado recientemente, tiene que esperar %i segundos para volver a usarlo", 20 - (gettime() - HouseData[PlayersDataOnline[playerid][MyPickupWorld]][RingHouseTime]));
						    SendInfoMessage(playerid, 0, "886", MsgRingHouse);
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "885", "No te encuentras en la puerta de ninguna casa");
					}
				}
				// COMANDO: /Online
			  	else if (strcmp("/Online DM", cmdtext, true, 10) == 0 && strlen(cmdtext) == 10)
	  			{
	  			    if ( PlayersDataOnline[playerid][ModeDM] )
	  			    {
						new MsgOnline[MAX_TEXT_CHAT];
						for (new i = 0; i < MAX_PLAYERS; i++)
						{
							if ( IsPlayerConnected(i) && PlayersDataOnline[i][ModeDM] && PlayersDataOnline[i][State] == 3 )
							{
								format(MsgOnline, sizeof(MsgOnline), "** {E6E6E6}%s[%i] está en modo {00F50A}DeathMatch {E6E6E6}pertenece al equipo número [%i] Tiene {F50000}%i {E6E6E6}muertes!", PlayersDataOnline[i][NameOnlineFix], i,PlayersDataOnline[i][TeamDM] + 1,PlayersDataOnline[i][PointDm]);
								SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, MsgOnline);
							}
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1117", "No te encuentas en modo DeathMatch!");
					}
	  			}
				// COMANDO: /Online
			  	else if (strcmp("/Online", cmdtext, true, 7) == 0 && strlen(cmdtext) == 7)
	  			{
	  			    if ( PlayersData[playerid][Faccion] != CIVIL )
	  			    {
						new MsgOnline[MAX_TEXT_CHAT];
						for (new i = 0; i < MAX_PLAYERS; i++)
						{
							if ( IsPlayerConnected(i) && PlayersData[i][Faccion] == PlayersData[playerid][Faccion] && PlayersDataOnline[i][State] == 3 )
							{
								format(MsgOnline, sizeof(MsgOnline), "* %s %s Conectado! [%i]", FaccionesRangos[PlayersData[i][Faccion]][PlayersData[i][Rango]], PlayersDataOnline[i][NameOnlineFix], i);
								SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, MsgOnline);
							}
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "952", "No tienes facción!");
					}
	  			}
				// COMANDO: /Caminar
			  	else if (strcmp("/Caminar", cmdtext, true, 8) == 0 && strlen(cmdtext) == 8)
	  			{
					ShowPlayerMenuSelectWalk(playerid);
	  			}
				// COMANDO: /Hablar
			  	else if (strcmp("/Hablar", cmdtext, true, 7) == 0 && strlen(cmdtext) == 7)
	  			{
					ShowPlayerMenuSelectTalk(playerid);
	  			}
/*				// COMANDO: /Correr
			  	else if (strcmp("/Correr", cmdtext, true, 7) == 0 && strlen(cmdtext) == 7)
	  			{
					ShowPlayerMenuSelectSprint(playerid);
	  			}*/
				// COMANDO: /Trabajar
			  	else if (strcmp("/Trabajar", cmdtext, true, 9) == 0 && strlen(cmdtext) == 9)
	  			{
	  			    new FoundJob;
		            for(new i=1;i<MAX_JOB;i++)
		            {
		                if ( Jobs[i][pickupidGet] == PlayersDataOnline[playerid][InPickup] )
		                {
		                    FoundJob = true;
				            if ( PlayersData[playerid][Job] == NINGUNO || PlayersData[playerid][Job] == i)
				            {
				                if ( PlayersData[playerid][Job] == i )
				                {
		                            PlayersData[playerid][Job] = NINGUNO;
		                            SendInfoMessage(playerid, 3, "0", "Has dejado el trabajo, ahora no desempeñarás ninguna labor.");
				                }
				                else
				                {
				                    if ( i == VENDEDOR_MOVIL && GetPlayerScore(playerid) <= 2 )
				                    {
				       					SendInfoMessage(playerid, 0, "967", "Debes ser mayor de nivel 2 para ser vendedor de móviles.");
				       					return 1;
									}
									else if ( i == VENDEDOR_MOVIL && PlayersData[playerid][Faccion] != CIVIL )
									{
				       					SendInfoMessage(playerid, 0, "1287", "Debes ser civil para poder trabajar como vendedor de teléfonos.");
				       					return 1;
									}
		                            PlayersData[playerid][Job] = i;
		                            new MsgJob[MAX_TEXT_CHAT];
		                            format(MsgJob, sizeof(MsgJob), "Ahora tienes un nuevo trabajo, serás: %s.", Jobs[i][NameJob]);
		                            SendInfoMessage(playerid, 3, "0", MsgJob);
	                            }
				            }
				            else
				            {
		       					SendInfoMessage(playerid, 0, "967", "Ya tienes un trabajo, debes dejarlo antes de entrar en otro.");
							}
	      					break;
			            }
		            }
		            if ( !FoundJob )
		            {
	 					SendInfoMessage(playerid, 0, "968", "No te encuetras en ningún trabajo!");
					}
				}
				// COMANDO: /Bar
			  	else if (strcmp("/Bar", cmdtext, true, 4) == 0 && strlen(cmdtext) == 4)
	  			{
					if ( PlayersData[playerid][IsPlayerInBizz] && IsBizzBar(playerid, NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]) )
					{
						if ( IsPlayerInRangeOfPoint(playerid, 2.0, NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInX_PC], NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInY_PC], NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInZ_PC]) )
						{
							ShowPlayerDialogEx(playerid,29,DIALOG_STYLE_LIST,"{00A5FF}Bar", "{E6E6E6}Agua          {00F50A}$10\r\n{E6E6E6}Refresco     {00F50A}$20\r\n{E6E6E6}Cerveza      {00F50A}$30\r\n{E6E6E6}Vodka        {00F50A}$40", "Comprar", "Salir");
						}
						else
						{
							SendInfoMessage(playerid, 0, "998", "No te encuentras cerca del la barra");
						}
					}
					else if ( IsBizzBarra(playerid) )
					{
						ShowPlayerDialogEx(playerid,76,DIALOG_STYLE_LIST,"{00A5FF}Barra", "{E6E6E6}Agua          {00F50A}$5\r\n{E6E6E6}Refresco     {00F50A}$10\r\n{E6E6E6}Cerveza      {00F50A}$15\r\n{E6E6E6}Vodka        {00F50A}$20", "Comprar", "Salir");
					}
					else
					{
						SendInfoMessage(playerid, 0, "999", "No estas en un bar");
					}
				}
				// COMANDO: /Tren [Anuncio]
				else if (strfind(cmdtext, "/Tren ", true) == 0 )
		    	{
		    	    if ( PlayersData[playerid][Faccion] == TAXI && PlayersData[playerid][Rango] == 5 ||
						 PlayersData[playerid][Faccion] == TAXI && PlayersData[playerid][Rango] <= 2 )
		    	    {
						if ( IsPlayerInAnyVehicle(playerid) && GetVehicleModel(GetPlayerVehicleID(playerid)) == 538 )
						{
			    	        if ( strlen(cmdtext) > 7 )
			    	        {
				    	        if (TimeTren <= gettime())
				    	        {
				    	            TimeTren = gettime() + 180;
	       		    	            new MensajeAD[MAX_TEXT_CHAT];
				    	            new MensajeADA[MAX_TEXT_CHAT];
									format(MensajeADA, sizeof(MensajeADA), "* Anuncio Tren: %s. ([%i]))", cmdtext[6], playerid);
									format(MensajeAD, sizeof(MensajeAD), "* Anuncio Tren: %s.", cmdtext[6]);

									for (new i = 0; i < MAX_PLAYERS; i++)
									{
										if (IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3)
										{
										    if ( PlayersData[i][Admin] >= 1 )
										    {
										        SendClientMessage(i, 0x0FFF00FF, MensajeADA);
										    }
										    else
										    {
										        SendClientMessage(i, 0x0FFF00FF, MensajeAD);
											}
										}
									}
								}
								else
								{
									new MsgPersonalizado[MAX_TEXT_CHAT];
									format(MsgPersonalizado, sizeof(MsgPersonalizado), "Debe esperar %i minutos con %i segundos para volver a poner un anuncio del Tren", (TimeTren - gettime()) / 60, ((TimeTren - gettime()) % 60));
									SendInfoMessage(playerid, 0, "1165", MsgPersonalizado);
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "1166", "Debe colocar un texto para el anuncio del tren");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1168", "Sólo puede poner anuncios desde el tren!");
						}
		    	    }
		    	    else
		    	    {
						SendInfoMessage(playerid, 0, "1167", "Usted no es Trensísta!");
					}
	    	    }
				// COMANDO: /Informar [Informe]
				else if (strfind(cmdtext, "/Informar ", true) == 0 )
		    	{
		    	    if ( PlayersData[playerid][Faccion] == TAXI && PlayersData[playerid][Rango] == 5 ||
						 PlayersData[playerid][Faccion] == TAXI && PlayersData[playerid][Rango] <= 2 )
		    	    {
						if ( IsPlayerInAnyVehicle(playerid) && GetVehicleModel(GetPlayerVehicleID(playerid)) == 538 )
						{
			    	        if ( strlen(cmdtext) > 11 )
			    	        {
			    	            new MensajeADA[MAX_TEXT_CHAT];
			    	            new Float:PlayerPos[3]; GetPlayerPos(playerid, PlayerPos[0], PlayerPos[1], PlayerPos[2]);
								format(MensajeADA, sizeof(MensajeADA), "* %s [Audio del Tren]: %s", PlayersDataOnline[playerid][NameOnlineFix], cmdtext[10]);

								for (new i = 0; i < MAX_PLAYERS; i++)
								{
									if (IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3)
									{
									    if ( IsPlayerInRangeOfPoint(i, 70.0,
											 PlayerPos[0], PlayerPos[1], PlayerPos[2]) ||
											 PlayersData[i][IsPlayerInVehInt] && coches_Todos_Type[GetVehicleModel(PlayersData[i][IsPlayerInVehInt]) - 400] == TREN)
										{
								        	SendClientMessage(i, 0xFFFF00FF, MensajeADA);
							        	}
									}
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "1293", "Debe colocar un texto de información para los pasajeros del tren");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1292", "Sólo puede informar desde el tren!");
						}
		    	    }
		    	    else
		    	    {
						SendInfoMessage(playerid, 0, "1291", "Usted no es Trensísta!");
					}
	    	    }
				// COMANDO: /Copyright
			  	else if (strcmp("/Copyright", cmdtext, true, 10) == 0 && strlen(cmdtext) == 10)
		    	{
		    	    //
		    	    new MsgDialogCopyright[500];
		    	    format(MsgDialogCopyright, sizeof(MsgDialogCopyright),
					"{00F50A}Específicaciones:\n\n{00A5FF}Versión: {F0F0F0}%s\n",
					GAMEMODE_VERSION);
		    	    strcat(MsgDialogCopyright, "{00A5FF}Creadores: {F0F0F0}Equipo de Un Player.\n\n");
		    	    strcat(MsgDialogCopyright, "{F5FF00}Agradecimientos: \n{F0F0F0}San Andrea Multiplayer (SA-MP)\n{F0F0F0}Rockstar Games\n{F0F0F0}Incognito");
		    	    strcat(MsgDialogCopyright, "\n\n\n\n{F5FF00}Copyright © 2015-2016 Un Player. Todos los derechos reservados.");
					ShowPlayerDialogEx(playerid, 999, DIALOG_STYLE_MSGBOX, "{00A5FF}Copyright © Un Player.", MsgDialogCopyright, "Aceptar", "");
				}
				// COMANDO: /Grúa
			  	/*else if (strcmp("/Grúa", cmdtext, true, 5) == 0 && strlen(cmdtext) == 5 ||
				  		 strcmp("/Grua", cmdtext, true, 5) == 0 && strlen(cmdtext) == 5)
		    	{
			    	GetMyNearDoor(playerid, true, true);
				}*/
				// COMANDO: /Sexo [ID]
		  		else if (strfind(cmdtext, "/Sexo ", true) == 0) //20
			    {
					new PlayerIDSexo = strval(cmdtext[GetPosSpace(cmdtext, 1)]);
				    if ( IsPlayerNear(playerid, PlayerIDSexo,
						 "1422",
						 "1423",
						 "1424",
						 "El jugador que le deseas tener sexo con el no se encuentra conectado",
						 "El jugador que le deseas tener sexo con el no se ha logueado",
						 "El jugador que le deseas tener sexo con el no se encuentra cerca de tí") )
				    {
						new MsgSexoMe[MAX_TEXT_CHAT];
						new MsgSexoYou[MAX_TEXT_CHAT];
						format(MsgSexoMe, sizeof(MsgSexoMe), "Ofreciste tener sexo a %s", PlayersDataOnline[PlayerIDSexo][NameOnlineFix]);
						format(MsgSexoYou, sizeof(MsgSexoYou), "%s quiere tener sexo contigo use (/Aceptar Sexo)", PlayersDataOnline[playerid][NameOnlineFix]);

						SendInfoMessage(playerid, 3, "0", MsgSexoMe);
						SendInfoMessage(PlayerIDSexo, 3, "0", MsgSexoYou);

						PlayersDataOnline[PlayerIDSexo][PlayerSexo] = playerid;
				    }
			    }
				// COMANDO: /Carreras
			  	else if (strcmp("/Carreras", cmdtext, true, 9) == 0 && strlen(cmdtext) == 9)
	  			{
		  			ShowPistaPlayerPublics(playerid);
				}
				// COMANDO: /Salir Carrera
			  	else if (strcmp("/Salir Carrera", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
	  			{
	  			    if ( PlayersDataOnline[playerid][PistaIDp] == -1 )
		  			{
						ShowPlayerDialogEx(playerid,999,DIALOG_STYLE_MSGBOX,"{00A5FF}Carreras - Error", "{E6E6E6}No te encuentras en ninguna carrera", "Ok", "");
	  				}
	  				else
	  				{
				        new PistasDialogText[MAX_TEXT_CHAT];
					    format(PistasDialogText, sizeof(PistasDialogText), "{F5FF00}%s{00F50A} ha salido de la carrera ((Voluntariamente)).", PlayersDataOnline[playerid][NameOnlineFix]);
						SendMessageToRaceChat(PlayersDataOnline[playerid][PistaIDp], PistasDialogText, true);
						ShowPlayerDialogEx(playerid,999,DIALOG_STYLE_MSGBOX,"{00A5FF}Carreras - Salir de la Carrra", "{00F50A}Saliste de la carrera correctamente!", "Ok", "");
						RemovePlayerToRace(playerid, true, true, STATE_RACE_EXIT_SALIDA);
					}
				}
				// COMANDO: /Música
			  	else if (strcmp("/Música", cmdtext, true, 7) == 0 && strlen(cmdtext) == 7 ||
				  		 strcmp("/Musica", cmdtext, true, 7) == 0 && strlen(cmdtext) == 7)
	  			{
			        if ( PlayersData[playerid][IsPlayerInHouse] )
			        {
						if ( PlayersData[playerid][House] == PlayersData[playerid][IsPlayerInHouse] ||
							 PlayersData[playerid][Alquiler] == PlayersData[playerid][IsPlayerInHouse] ||
							 IsPlayerInHouseFriend(playerid, PlayersData[playerid][IsPlayerInHouse]) != -1 ||
							 PlayersData[playerid][Admin] >= 7 && PlayersDataOnline[playerid][AdminOn])
			            {
				            ShowStations(playerid, HouseData[PlayersData[playerid][IsPlayerInHouse]][StationID], true);
						}
						else
						{
							SendInfoMessage(playerid, 0, "1466", "Ésta no es su casa");
						}
			        }
			        else
			        {
						SendInfoMessage(playerid, 0, "1467", "No te encuentras en ninguna casa");
					}
				}
				// COMANDO: /Estéreo
			  	else if (strcmp("/Estéreo", cmdtext, true, 8) == 0 && strlen(cmdtext) == 8 ||
				  		 strcmp("/Estereo", cmdtext, true, 8) == 0 && strlen(cmdtext) == 8)
	  			{
					if (  PlayersDataOnline[playerid][InCarId] )
					{
			        	ShowStations(playerid, DataCars[PlayersDataOnline[playerid][InCarId]][StationID], false);
					}
					else
					{
						SendInfoMessage(playerid, 0, "1535", "Suba al vehículo al asiento de conductor y luego use /Estéreo");
					}
				}
				// COMANDO: /Duda
			  	else if (strcmp("/Duda", cmdtext, true, 5) == 0 && strlen(cmdtext) == 5)
	  			{
				    if ( CanalDudas )
				    {
						if ( AreAdminsOnline() )
						{
							ShowDudasDialog(playerid);
						}
						else
						{
							SendInfoMessage(playerid, 0, "1483", "No hay administradores online para resolver dudas intentelo más tarde.");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1484", "El canal /Duda se encuentra cerrado.");
					}
				}
				// COMANDO: /Terminar Robo
			    else if (strcmp("/Terminar Robo", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
			    {
					if ( PlayersData[playerid][Faccion] == COLTS ||
					     PlayersData[playerid][Faccion] == AK  ||
						 PlayersData[playerid][Faccion] == HEORS ||
						 PlayersData[playerid][Faccion] == VELTRAN
					 )
					 {
			  	        new fac;
			  	        if ( PlayersData[playerid][Faccion] == COLTS )
			  	        {
			  	            fac = COLTS_R;
						}
						else if ( PlayersData[playerid][Faccion] == AK )
						{
						    fac = AK_R;
						}
						else if ( PlayersData[playerid][Faccion] == VELTRAN )
						{
						    fac = VELTRAN_R;
						}
						else if ( PlayersData[playerid][Faccion] == HEORS )
						{
						    fac = HEORS_R;
						}
			  	        if ( RobosInfo[fac][BizzIDR] )
			  	        {
                            if ( RobosInfo[fac][RoboState] )
                            {
						        if ( PlayersDataOnline[playerid][InPickup] >= NegociosData[1][PickupOutId] &&
						             PlayersDataOnline[playerid][InPickup] <= NegociosData[MAX_BIZZ][PickupOutId]
									 && PlayersDataOnline[playerid][MyPickupWorld] == RobosInfo[fac][BizzIDR] )
						        {
	                                new MSGRobo[MAX_TEXT_CHAT];
	                               	if ( NegociosData[RobosInfo[fac][BizzIDR]][Deposito]      > 0 )
	                               	{
	//                                	FaccionData[RobosInfo[fac][FaccionIDR]][Deposito] 		+= NegociosData[RobosInfo[fac][BizzIDR]][Deposito];
										GivePlayerMoneyEx(playerid, NegociosData[RobosInfo[fac][BizzIDR]][Deposito]);
		                                format(MSGRobo, sizeof(MSGRobo), "[Robo]: Robado $%i del deposito del negocio!", NegociosData[RobosInfo[fac][BizzIDR]][Deposito]);
										SendMessageRobosFaccion(RobosInfo[fac][FaccionIDR], MSGRobo);
		                                NegociosData[RobosInfo[fac][BizzIDR]][Deposito]          = 0;
	                               	}
	                                if ( NegociosData[RobosInfo[fac][BizzIDR]][DepositoExtorsion] > 0 )
	                                {
	//                                	FaccionData[RobosInfo[fac][FaccionIDR]][Deposito]		+= NegociosData[RobosInfo[fac][BizzIDR]][DepositoExtorsion];
		                                format(MSGRobo, sizeof(MSGRobo), "[Robo]: Robado $%i de la extorsión del negocio!", NegociosData[RobosInfo[fac][BizzIDR]][DepositoExtorsion]);
										GivePlayerMoneyEx(playerid, NegociosData[RobosInfo[fac][BizzIDR]][DepositoExtorsion]);
										SendMessageRobosFaccion(RobosInfo[fac][FaccionIDR], MSGRobo);
		                                NegociosData[RobosInfo[fac][BizzIDR]][DepositoExtorsion] = 0;
	                               	}
									if ( NegociosData[RobosInfo[fac][BizzIDR]][Materiales] > 0 )
									{
	//									FaccionData[RobosInfo[fac][FaccionIDR]][Almacen][0] 	+= NegociosData[RobosInfo[fac][BizzIDR]][Materiales];
	                                    PlayersData[playerid][Materiales]                       += NegociosData[RobosInfo[fac][BizzIDR]][Materiales];
										format(MSGRobo, sizeof(MSGRobo), "[Robo]: Robado %i de materiales del negocio!", NegociosData[RobosInfo[fac][BizzIDR]][Materiales]);
										SendMessageRobosFaccion(RobosInfo[fac][FaccionIDR], MSGRobo);
										NegociosData[RobosInfo[fac][BizzIDR]][Materiales]        = 0;
									}
									format(MSGRobo, sizeof(MSGRobo), "[Robo]: %s ha finalizado el robo! Vamonos!", PlayersDataOnline[playerid][NameOnlineFix]);
									SendMessageRobosFaccion(RobosInfo[fac][FaccionIDR], MSGRobo);
	                                CancelRobo(fac);
                                }
						        else
						        {
									SendInfoMessage(playerid, 0, "1488", "Debes estar en la puerta de un negocio para terminar el robo!");
								}
                            }
                            else
                            {
								SendInfoMessage(playerid, 0, "1489", "Todavía no puedes terminar de robar el local!");
							}
					  	}
					  	else
					  	{
							SendInfoMessage(playerid, 0, "1490", "No hay ningún robo en proceso en estos momentos!");
					    }
				  	}
				  	else
				  	{
						SendInfoMessage(playerid, 0, "1491", "Usted no puede robar locales!");
				    }
				}
				// COMANDO: /Id [Parte del Nombre]
				else if (strfind(cmdtext, "/Id ", true) == 0)
				{
				    new FoundName;
				    new MsgUsersFound[MAX_TEXT_CHAT];
                    for ( new i = 0; i < MAX_PLAYERS; i++)
                    {
						if ( i != playerid && IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 )
						{
						    if ( strfind(PlayersDataOnline[i][NameOnlineFix], cmdtext[4], true) != -1 || strfind( PlayersDataOnline[i][NameOnline], cmdtext[4], true) != -1)
						    {
								FoundName++;
						        format(MsgUsersFound, sizeof(MsgUsersFound), " [%i] %s", i, PlayersDataOnline[i][NameOnlineFix]);
							    SendClientMessage(playerid, 0x969696FF, MsgUsersFound);
						    }
						}
					}
					if ( !FoundName )
					{
					    SendClientMessage(playerid, 0x969696FF, " No se encontrarón usuarios!");
					}
				}
				//		/Ip [Ip]				- Buscar usuarios por la IP
				else if (strfind(cmdtext, "/Ip ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 1)
					{
					    new FoundName;
					    new MsgUsersFound[MAX_TEXT_CHAT];
					    new IpGet[20];
	                    for ( new i = 0; i < MAX_PLAYERS; i++)
	                    {
							if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 )
							{
							    if ( strfind(PlayersData[i][MyIP], cmdtext[4], true) != -1)
							    {
									FoundName++;
									if ( FoundName == 1 )
									{
								        format(MsgUsersFound, sizeof(MsgUsersFound), " Usuarios encontrados para la IP: {F50000}%s", cmdtext[4]);
									    SendClientMessage(playerid, 0x969696FF, MsgUsersFound);
									}
									GetPlayerIp(i, IpGet, sizeof(IpGet));
							        format(MsgUsersFound, sizeof(MsgUsersFound), " %s[%i] - %s", PlayersDataOnline[i][NameOnlineFix], i, IpGet);
								    SendClientMessage(playerid, 0x969696FF, MsgUsersFound);
							    }
							}
						}
						if ( !FoundName )
						{
						    SendClientMessage(playerid, 0x969696FF, " No se encontrarón usuarios!");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1577", "Tú no tienes acceso a el comando /Ip.");
				        return 1;
					}
				}
				// COMANDO: /Mear
			  	else if (strcmp("/Mear", cmdtext, true, 5) == 0 && strlen(cmdtext) == 5)
	  			{
					SetPlayerSpecialAction(playerid, 68);
					PlayersDataOnline[playerid][InAnim] = true;
				}
				// COMANDO: /Anim
				else if (strfind(cmdtext, "/Anim ", true) == 0)
				{
		    	    new PosShearh; PosShearh = strfind(cmdtext, " ", false, 8);
		    	    new PosShearh2; PosShearh2 = strfind(cmdtext, " ", false, PosShearh + 1);
				    new MsgErrorAnimaciones[MAX_TEXT_CHAT];
				    new MAX_ID;
					if (strfind(cmdtext, "/Anim ATTRACTORS ", true) == 0)				// ATTRACTORS - 2
			    	{
			    	    MAX_ID = sizeof(ATTRACTORS_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"Attractors",
							ATTRACTORS_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim BAR ", true) == 0)				// BAR - 11
			    	{
			    	    MAX_ID = sizeof(BAR_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"BAR",
							BAR_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim BAT ", true) == 0)				// BAT - 10
			    	{
			    	    MAX_ID = sizeof(BAT_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"BASEBALL",
							BAT_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim FIRE ", true) == 0)				// FIRE - 12
			    	{
			    	    MAX_ID = sizeof(FIRE_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"BD_FIRE",
							FIRE_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim PLAYA ", true) == 0)				// PLAYA - 4
			    	{
			    	    MAX_ID = sizeof(PLAYA_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"BEACH",
							PLAYA_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim GYM ", true) == 0)					// GYM - 6
			    	{
			    	    MAX_ID = sizeof(GYM_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"benchpress",
							GYM_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim BFINJECT ", true) == 0)				// BFINJECT - 3
			    	{
			    	    MAX_ID = sizeof(BFINJECT_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"BF_injection",
							BFINJECT_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim BICID ", true) == 0)				// BICID - 18
			    	{
			    	    MAX_ID = sizeof(BICID_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"BIKED",
							BICID_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim BICIH ", true) == 0)				// BICIH - 17
			    	{
			    	    MAX_ID = sizeof(BICIH_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"BIKEH",
							BICIH_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim BICIL ", true) == 0)				// BICIL - 8
			    	{
			    	    MAX_ID = sizeof(BICIL_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"BIKELEAP",
							BICIL_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim BICIS ", true) == 0)				// BICIS - 19
			    	{
			    	    MAX_ID = sizeof(BICIS_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"BIKES",
							BICIS_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim BICIV ", true) == 0)				// BICIV - 17
			    	{
			    	    MAX_ID = sizeof(BICIV_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"BIKEV",
							BICIV_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim BICI ", true) == 0)				// BICI - 3
			    	{
			    	    MAX_ID = sizeof(BICI_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"BIKE_DBZ",
							BICI_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim GOLPE ", true) == 0)				// GOLPE - 11
			    	{
			    	    MAX_ID = sizeof(GOLPE_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"BLOWJOBZ",
							GOLPE_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim BMX ", true) == 0)				// BMX - 17
			    	{
			    	    MAX_ID = sizeof(BMX_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"BMX",
							BMX_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim BOMBER ", true) == 0)				// BOMBER - 5
			    	{
			    	    MAX_ID = sizeof(BOMBER_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"BOMBER",
							BOMBER_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim BOX ", true) == 0)				// BOX - 9
			    	{
			    	    MAX_ID = sizeof(BOX_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"BOX",
							BOX_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim BALL ", true) == 0)				// BALL - 40
			    	{
			    	    MAX_ID = sizeof(BALL_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"BSKTBALL",
							BALL_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim BUDDY ", true) == 0)				// BUDDY - 4
			    	{
			    	    MAX_ID = sizeof(BUDDY_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"BUDDY",
							BUDDY_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim BUS ", true) == 0)				// BUS - 8
			    	{
			    	    MAX_ID = sizeof(BUS_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"BUS",
							BUS_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim CAM ", true) == 0)				// CAM - 13
			    	{
			    	    MAX_ID = sizeof(CAM_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"CAMERA",
							CAM_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim CAR ", true) == 0)				// CAR - 10
			    	{
			    	    MAX_ID = sizeof(CAR_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"CAR",
							CAR_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim CARRY ", true) == 0)				// CARRY - 6
			    	{
			    	    MAX_ID = sizeof(CARRY_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"CARRY",
							CARRY_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim CARCHAT ", true) == 0)				// CARCHAT - 20
			    	{
			    	    MAX_ID = sizeof(CARCHAT_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"CAR_CHAT",
							CARCHAT_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim CASINO ", true) == 0)				// CASINO - 24
			    	{
			    	    MAX_ID = sizeof(CASINO_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"CASINO",
							CASINO_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim CHAINSAW ", true) == 0)				// CHAINSAW - 10
			    	{
			    	    MAX_ID = sizeof(CHAINSAW_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"CHAINSAW",
							CHAINSAW_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim CHOPA ", true) == 0)				// CHOPA - 17
			    	{
			    	    MAX_ID = sizeof(CHOPA_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"CHOPPA",
							CHOPA_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim CLOTHES ", true) == 0)				// CLOTHES - 12
			    	{
			    	    MAX_ID = sizeof(CLOTHES_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"CLOTHES",
							CLOTHES_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim COACH ", true) == 0)				// COACH - 5
			    	{
			    	    MAX_ID = sizeof(COACH_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"COACH",
							COACH_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim COLT ", true) == 0)				// COLT - 6
			    	{
			    	    MAX_ID = sizeof(COLT_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"COLT45",
							COLT_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim COP ", true) == 0)				// COP - 11
			    	{
			    	    MAX_ID = sizeof(COLT_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"COP_AMBIENT",
							COLT_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim COPD ", true) == 0)				// COPD - 3
			    	{
			    	    MAX_ID = sizeof(COPD_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"COP_DVBYZ",
							COPD_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim CRACK ", true) == 0)				// CRACK - 9
			    	{
			    	    MAX_ID = sizeof(CRACK_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"CRACK",
							CRACK_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim CRIB ", true) == 0)				// CRIB - 4
			    	{
			    	    MAX_ID = sizeof(CRIB_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"CRIB",
							CRIB_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim DAM ", true) == 0)				// DAM - 4
			    	{
			    	    MAX_ID = sizeof(DAM_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"DAM_JUMP",
							DAM_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim DANCE ", true) == 0)				// DANCE - 13
			    	{
			    	    MAX_ID = sizeof(DANCE_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"DANCING",
							DANCE_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim DEALER ", true) == 0)				// DEALER - 6
			    	{
			    	    MAX_ID = sizeof(DEALER_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"DEALER",
							DEALER_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim DILDO ", true) == 0)				// DILDO - 8
			    	{
			    	    MAX_ID = sizeof(DILDO_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"DILDO",
							DILDO_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim DODGE ", true) == 0)				// DODGE - 3
			    	{
			    	    MAX_ID = sizeof(DODGE_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"DODGE",
							DODGE_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim DOZER ", true) == 0)				// DOZER - 9
			    	{
			    	    MAX_ID = sizeof(DOZER_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"DOZER",
							DOZER_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim DRIVE ", true) == 0)				// DRIVE - 7
			    	{
			    	    MAX_ID = sizeof(DRIVE_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"DRIVEBYS",
							DRIVE_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim FAT ", true) == 0)				// FAT - 17
			    	{
			    	    MAX_ID = sizeof(FAT_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"FAT",
							FAT_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim FIGHTB ", true) == 0)				// FIGHTB - 9
			    	{
			    	    MAX_ID = sizeof(FIGHTB_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"FIGHT_B",
							FIGHTB_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim FIGHTC ", true) == 0)				// FIGHTC - 11
			    	{
			    	    MAX_ID = sizeof(FIGHTC_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"FIGHT_C",
							FIGHTC_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim FIGHTD ", true) == 0)				// FIGHTD - 9
			    	{
			    	    MAX_ID = sizeof(FIGHTD_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"FIGHT_D",
							FIGHTD_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim FIGHTE ", true) == 0)				// FIGHTE - 3
			    	{
			    	    MAX_ID = sizeof(FIGHTE_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"FIGHT_E",
							FIGHTE_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim FINALE ", true) == 0)				// FINALE - 15
			    	{
			    	    MAX_ID = sizeof(FINALE_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"FINALE",
							FINALE_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim FINALE2 ", true) == 0)				// FINALE2 - 7
			    	{
			    	    MAX_ID = sizeof(FINALE2_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"FINALE2",
							FINALE2_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim FLAME ", true) == 0)				// FLAME - 0
			    	{
			    	    MAX_ID = sizeof(FLAME_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"FLAME",
							FLAME_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim FLOWERS ", true) == 0)				// FLOWERS - 2
			    	{
			    	    MAX_ID = sizeof(FLOWERS_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"Flowers",
							FLOWERS_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim FOOD ", true) == 0)				// FOOD - 32
			    	{
			    	    MAX_ID = sizeof(FOOD_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"FOOD",
							FOOD_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim GYMA ", true) == 0)				// GYMA - 8
			    	{
			    	    MAX_ID = sizeof(GYMA_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"Freeweights",
							GYMA_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim GANGS ", true) == 0)				// GANGS - 32
			    	{
			    	    MAX_ID = sizeof(GANGS_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"GANGS",
							GANGS_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim GHANDS ", true) == 0)				// GHANDS - 19
			    	{
			    	    MAX_ID = sizeof(GHANDS_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"GHANDS",
							GHANDS_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim GHETTO ", true) == 0)				// GHETTO - 6
			    	{
			    	    MAX_ID = sizeof(GHETTO_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"GHETTO_DB",
							GHETTO_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim GOGGLES ", true) == 0)				// GOGGLES - 0
			    	{
			    	    MAX_ID = sizeof(GOGGLES_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"goggles",
							GOGGLES_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim GRAFFITI ", true) == 0)				// GRAFFITI - 1
			    	{
			    	    MAX_ID = sizeof(GRAFFITI_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"GRAFFITI",
							GRAFFITI_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim GRAVE ", true) == 0)				// GRAVE - 2
			    	{
			    	    MAX_ID = sizeof(GRAVE_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"GRAVEYARD",
							GRAVE_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim GRENADE ", true) == 0)				// GRENADE - 2
			    	{
			    	    MAX_ID = sizeof(GRENADE_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"GRENADE",
							GRENADE_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim GYMB ", true) == 0)				// GYMB - 23
			    	{
			    	    MAX_ID = sizeof(GYMB_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"GYMNASIUM",
							GYMB_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim HAIR ", true) == 0)				// HAIR - 12
			    	{
			    	    MAX_ID = sizeof(HAIR_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"HAIRCUTS",
							HAIR_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim HEIST ", true) == 0)				// HEIST - 9
			    	{
			    	    MAX_ID = sizeof(HEIST_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"HEIST9",
							HEIST_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim HOUSE ", true) == 0)				// HOUSE - 9
			    	{
			    	    MAX_ID = sizeof(HOUSE_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"INT_HOUSE",
							HOUSE_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim OFFICE ", true) == 0)				// OFFICE - 9
			    	{
			    	    MAX_ID = sizeof(OFFICE_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"INT_OFFICE",
							OFFICE_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim INTSHOP ", true) == 0)				// INTSHOP - 7
			    	{
			    	    MAX_ID = sizeof(INTSHOP_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"INT_SHOP",
							INTSHOP_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim BUISNESS ", true) == 0)				// BUISNESS - 3
			    	{
			    	    MAX_ID = sizeof(BUISNESS_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"JST_BUISNESS",
							BUISNESS_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim KART ", true) == 0)				// KART - 3
			    	{
			    	    MAX_ID = sizeof(KART_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"KART",
							KART_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim KISSING ", true) == 0)				// KISSING - 14
			    	{
			    	    MAX_ID = sizeof(KISSING_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"KISSING",
							KISSING_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim KNIFE ", true) == 0)				// KNIFE - 15
			    	{
			    	    MAX_ID = sizeof(KNIFE_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"KNIFE",
							KNIFE_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim LAPDAN ", true) == 0)				// LAPDAN - 1
			    	{
			    	    MAX_ID = sizeof(LAPDAN1_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"LAPDAN1",
							LAPDAN1_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim LAPDAN ", true) == 0)				// LAPDAN - 2
			    	{
			    	    MAX_ID = sizeof(LAPDAN2_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"LAPDAN2",
							LAPDAN2_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim LAPDAN ", true) == 0)				// LAPDAN - 3
			    	{
			    	    MAX_ID = sizeof(LAPDAN3_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"LAPDAN3",
							LAPDAN3_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim LOWRIDER ", true) == 0)				// LOWRIDER - 38
			    	{
			    	    MAX_ID = sizeof(LOWRIDER_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"LOWRIDER",
							LOWRIDER_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim CHASE ", true) == 0)				// CHASE - 24
			    	{
			    	    MAX_ID = sizeof(CHASE_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"MD_CHASE",
							CHASE_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim END ", true) == 0)				// END - 7
			    	{
			    	    MAX_ID = sizeof(END_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"MD_END",
							END_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim MEDIC ", true) == 0)				// MEDIC - 0
			    	{
			    	    MAX_ID = sizeof(MEDIC_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"MEDIC",
							MEDIC_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim MISC ", true) == 0)				// MISC - 40
			    	{
			    	    MAX_ID = sizeof(MISC_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
						    if ( strval(cmdtext[PosShearh]) == 29 )
						    {
								ApplyPlayerAnimCustom(playerid,
								"MISC",
								MISC_ANIMATIONS[28], strval(cmdtext[PosShearh2]));
							}
							else
							{
								ApplyPlayerAnimCustom(playerid,
								"MISC",
								MISC_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
							}
						}
					}
					else if (strfind(cmdtext, "/Anim MTB ", true) == 0)				// MTB - 17
			    	{
			    	    MAX_ID = sizeof(MTB_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"MTB",
							MTB_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
/*					else if (strfind(cmdtext, "/Anim MUSCULAR ", true) == 0)				// MUSCULAR - 16
			    	{
			    	    MAX_ID = sizeof(MUSCULAR_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"MUSCULAR",
							MUSCULAR_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}*/
	/*				else if (strfind(cmdtext, "/Anim NEVADA ", true) == 0)				// NEVADA - 1
			    	{
			    	    MAX_ID = sizeof(NEVADA_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"NEVADA",
							NEVADA_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}*/
					else if (strfind(cmdtext, "/Anim LOOKERS ", true) == 0)				// LOOKERS - 28
			    	{
			    	    MAX_ID = sizeof(LOOKERS_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"ON_LOOKERS",
							LOOKERS_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim OTB ", true) == 0)				// OTB - 10
			    	{
			    	    MAX_ID = sizeof(OTB_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"OTB",
							OTB_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim PARA ", true) == 0)				// PARA - 21
			    	{
			    	    MAX_ID = sizeof(PARA_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"PARACHUTE",
							PARA_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim PARK ", true) == 0)				// PARK - 2
			    	{
			    	    MAX_ID = sizeof(PARK_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"PARK",
							PARK_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim PAUL ", true) == 0)				// PAUL - 11
			    	{
			    	    MAX_ID = sizeof(PAUL_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"PAULNMAC",
							PAUL_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim PED ", true) == 0)				// PED - 999
			    	{
			    	    MAX_ID = sizeof(PED_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"PED",
							PED_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim PLAYER ", true) == 0)				// PLAYER - 3
			    	{
			    	    MAX_ID = sizeof(PLAYER_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"PLAYER_DVBYS",
							PLAYER_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim PLAYID ", true) == 0)				// PLAYID - 4
			    	{
			    	    MAX_ID = sizeof(PLAYID_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"PLAYIDLES",
							PLAYID_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim POLICE ", true) == 0)				// POLICE - 9
			    	{
			    	    MAX_ID = sizeof(POLICE_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"POLICE",
							POLICE_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim POOL ", true) == 0)				// POOL - 20
			    	{
			    	    MAX_ID = sizeof(POOL_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"POOL",
							POOL_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim POOR ", true) == 0)				// POOR - 1
			    	{
			    	    MAX_ID = sizeof(POOR_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"POOR",
							POOR_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim PYTHON ", true) == 0)				// PYTHON - 4
			    	{
			    	    MAX_ID = sizeof(PYTHON_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"PYTHON",
							PYTHON_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim QUAD ", true) == 0)				// QUAD - 16
			    	{
			    	    MAX_ID = sizeof(QUAD_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"QUAD",
							QUAD_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim QUADD ", true) == 0)				// QUADD - 3
			    	{
			    	    MAX_ID = sizeof(QUADD_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"QUAD_DBZ",
							QUADD_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim RAP ", true) == 0)				// RAP - 7
			    	{
			    	    MAX_ID = sizeof(RAP_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"RAPPING",
							RAP_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim RIFLE ", true) == 0)				// RIFLE - 4
			    	{
			    	    MAX_ID = sizeof(RIFLE_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"RIFLE",
							RIFLE_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim RIOT ", true) == 0)				// RIOT - 6
			    	{
			    	    MAX_ID = sizeof(RIOT_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"RIOT",
							RIOT_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim ROB ", true) == 0)				// ROB - 4
			    	{
			    	    MAX_ID = sizeof(ROB_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"ROB_BANK",
							ROB_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim ROCKET ", true) == 0)				// ROCKET - 4
			    	{
			    	    MAX_ID = sizeof(ROCKET_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"ROCKET",
							ROCKET_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim RUSTLER ", true) == 0)				// RUSTLER - 4
			    	{
			    	    MAX_ID = sizeof(RUSTLER_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"RUSTLER",
							RUSTLER_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim RYDER ", true) == 0)				// RYDER - 15
			    	{
			    	    MAX_ID = sizeof(RYDER_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"RYDER",
							RYDER_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim SCRAT ", true) == 0)				// SCRAT - 11
			    	{
			    	    MAX_ID = sizeof(SCRAT_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"SCRATCHING",
							SCRAT_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim SHAMAL ", true) == 0)				// SHAMAL - 4
			    	{
			    	    MAX_ID = sizeof(SHAMAL_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"SHAMAL",
							SHAMAL_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim SHOP ", true) == 0)				// SHOP - 24
			    	{
			    	    MAX_ID = sizeof(SHOP_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"SHOP",
							SHOP_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim SHOTGUN ", true) == 0)				// SHOTGUN - 2
			    	{
			    	    MAX_ID = sizeof(SHOTGUN_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"SHOTGUN",
							SHOTGUN_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim SILENCED ", true) == 0)				// SILENCED - 3
			    	{
			    	    MAX_ID = sizeof(SILENCED_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"SILENCED",
							SILENCED_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
/*					else if (strfind(cmdtext, "/Anim SKATE ", true) == 0)				// SKATE - 2
			    	{
			    	    MAX_ID = sizeof(SKATE_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"SKATE",
							SKATE_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}*/
					else if (strfind(cmdtext, "/Anim SMOK ", true) == 0)				// SMOK - 2
			    	{
			    	    MAX_ID = sizeof(SMOK_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"SMOKING",
							SMOK_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim SNIPER ", true) == 0)				// SNIPER - 0
			    	{
			    	    MAX_ID = sizeof(SNIPER_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"SNIPER",
							SNIPER_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim SPRAY ", true) == 0)				// SPRAY - 1
			    	{
			    	    MAX_ID = sizeof(SPRAY_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"SPRAYCAN",
							SPRAY_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim STRIP ", true) == 0)				// STRIP - 19
			    	{
			    	    MAX_ID = sizeof(STRIP_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"STRIP",
							STRIP_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim SUNBA ", true) == 0)				// SUNBA - 17
			    	{
			    	    MAX_ID = sizeof(SUNBA_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"SUNBATHE",
							SUNBA_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim SWAT ", true) == 0)				// SWAT - 22
			    	{
			    	    MAX_ID = sizeof(SWAT_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"SWAT",
							SWAT_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim SWEET ", true) == 0)				// SWEET - 6
			    	{
			    	    MAX_ID = sizeof(SWEET_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"SWEET",
							SWEET_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim SWIM ", true) == 0)				// SWIM - 6
			    	{
			    	    MAX_ID = sizeof(SWIM_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"SWIM",
							SWIM_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim SWORD ", true) == 0)				// SWORD - 9
			    	{
			    	    MAX_ID = sizeof(SWORD_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"SWORD",
							SWORD_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim TANK ", true) == 0)				// TANK - 5
			    	{
			    	    MAX_ID = sizeof(TANK_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"TANK",
							TANK_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim TATTOO ", true) == 0)				// TATTOO - 56
			    	{
			    	    MAX_ID = sizeof(TATTOO_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"TATTOOS",
							TATTOO_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim TEC ", true) == 0)				// TEC - 3
			    	{
			    	    MAX_ID = sizeof(TEC_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"TEC",
							TEC_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim TRAIN ", true) == 0)				// TRAIN - 3
			    	{
			    	    MAX_ID = sizeof(TRAIN_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"TRAIN",
							TRAIN_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim TRUCK ", true) == 0)				// TRUCK - 16
			    	{
			    	    MAX_ID = sizeof(TRUCK_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"TRUCK",
							TRUCK_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim UZI ", true) == 0)				// UZI - 4
			    	{
			    	    MAX_ID = sizeof(UZI_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"UZI",
							UZI_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim VAN ", true) == 0)				// VAN - 7
			    	{
			    	    MAX_ID = sizeof(VAN_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"VAN",
							VAN_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim VENDING ", true) == 0)				// VENDING - 5
			    	{
			    	    MAX_ID = sizeof(VENDING_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"VENDING",
							VENDING_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim VORTEX ", true) == 0)				// VORTEX - 3
			    	{
			    	    MAX_ID = sizeof(VORTEX_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"VORTEX",
							VORTEX_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim WAYFA ", true) == 0)				// WAYFA - 17
			    	{
			    	    MAX_ID = sizeof(WAYFA_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"WAYFARER",
							WAYFA_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim ARMA ", true) == 0)				// ARMA - 16
			    	{
			    	    MAX_ID = sizeof(ARMA_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"WEAPONS",
							ARMA_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
					else if (strfind(cmdtext, "/Anim WUZI ", true) == 0)				// WUZI - 11
			    	{
			    	    MAX_ID = sizeof(WUZI_ANIMATIONS) - 1;
				    	if (strval(cmdtext[PosShearh]) >= 0 &&
							strval(cmdtext[PosShearh]) <= MAX_ID )
						{
							ApplyPlayerAnimCustom(playerid,
							"WUZI",
							WUZI_ANIMATIONS[strval(cmdtext[PosShearh])], strval(cmdtext[PosShearh2]));
						}
					}
			    	else
					{
						SendInfoMessage(playerid, 0, "361", "Si no se sabe alguna ID o quiere ver más sobre animaciones consulte /Ayuda Animaciones");
						return 1;
					}
			    	if (strval(cmdtext[PosShearh]) < 0 ||
						strval(cmdtext[PosShearh]) > MAX_ID )
					{
					    format(MsgErrorAnimaciones, sizeof(MsgErrorAnimaciones), "En esta categoría de animaciones la ID máxima es \"%i\"",
						MAX_ID);
						SendInfoMessage(playerid, 0, "362", MsgErrorAnimaciones);
					}
				}
				// COMANDO: /Alquilar
			  	else if (strcmp("/Alquilar", cmdtext, true, 9) == 0 && strlen(cmdtext) == 9)
			    {
			        if ( PlayersDataOnline[playerid][InPickup] >= HouseData[1][PickupId] &&
				         PlayersDataOnline[playerid][InPickup] <= HouseData[MAX_HOUSE][PickupId] )
			        {
				        if ( PlayersData[playerid][House] == -1 )
				        {
						    if ( PlayersData[playerid][Alquiler] == -1 )
						    {
								if (strlen(HouseData[PlayersDataOnline[playerid][MyPickupWorld]][Dueno]) != 2 && HouseData[PlayersDataOnline[playerid][MyPickupWorld]][PriceRent] != 0)
								{
									if ( PlayersData[playerid][Dinero] >= HouseData[PlayersDataOnline[playerid][MyPickupWorld]][PriceRent] )
									{
										new MsgRenta[MAX_TEXT_CHAT];
										format(MsgRenta, sizeof(MsgRenta), "Te has rentado en esta casa por $%i", HouseData[PlayersDataOnline[playerid][MyPickupWorld]][PriceRent] );
										SendInfoMessage(playerid, 3, "0", MsgRenta);
										PlayersData[playerid][Alquiler] = PlayersDataOnline[playerid][MyPickupWorld];
										GivePlayerMoneyEx(playerid, -HouseData[PlayersDataOnline[playerid][MyPickupWorld]][PriceRent]);
										HouseData[PlayersDataOnline[playerid][MyPickupWorld]][Deposito] = HouseData[PlayersDataOnline[playerid][MyPickupWorld]][Deposito] + HouseData[PlayersDataOnline[playerid][MyPickupWorld]][PriceRent];
									}
									else
									{
										SendInfoMessage(playerid, 0, "606", "No tienes suficiente dinero para alquilarte en esta Casa!");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "607", "Ésta casa no esta en renta!");
								}
							}
							else if( PlayersData[playerid][Alquiler] == PlayersDataOnline[playerid][MyPickupWorld] )
							{
								SendInfoMessage(playerid, 3, "0", "Has salido de este alquiler existosamente!");
								PlayersData[playerid][Alquiler] = -1;
								PlayersData[playerid][House] 	= -1;
							}
							else
							{
								SendInfoMessage(playerid, 0, "608", "Debe salir del alquiler de la casa donde vive, para poder alquilar esta");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "650", "Debe vender su casa, para poder alquilar esta");
						}
			        }
			        else
			        {
						SendInfoMessage(playerid, 0, "609", "No te encuentras en ninguna casa");
					}
				}
				else if (strfind(cmdtext, "/Nacer", true) == 0)
		    	{
					// COMANDO: /Nacer Amigo
				  	if (strcmp("/Nacer Amigo", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12)
			    	{
				        if ( PlayersDataOnline[playerid][InPickup] >= HouseData[1][PickupId] &&
				             PlayersDataOnline[playerid][InPickup] <= HouseData[MAX_HOUSE][PickupId] ||
							 PlayersDataOnline[playerid][InPickup] >= TypeHouse[0][PickupId] &&
				             PlayersDataOnline[playerid][InPickup] <= TypeHouse[MAX_HOUSE_TYPE][PickupId])
				        {
							new houseid;
							if ( PlayersDataOnline[playerid][InPickup] >= TypeHouse[0][PickupId] &&
				             PlayersDataOnline[playerid][InPickup] <= TypeHouse[MAX_HOUSE_TYPE][PickupId] && PlayersData[playerid][IsPlayerInHouse])
							{
						    	houseid = PlayersData[playerid][IsPlayerInHouse];
							}
							else
							{
							    houseid = PlayersDataOnline[playerid][MyPickupWorld];
							}

							if ( IsPlayerInHouseFriend(playerid, houseid) != -1)
				            {
								SendInfoMessage(playerid, 2, "0", "Has asignado tu Spawn de Amigo en esta casa.");
								PlayersData[playerid][SpawnAmigo] = houseid;
							}
							else
							{
								SendInfoMessage(playerid, 0, "1372", "No tienes las llaves de amigo de está casa");
							}
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "1374", "No te encuentras en ninguna casa");
						}
			    	}
					// COMANDO: /Nacer
				  	else if (strcmp("/Nacer", cmdtext, true, 6) == 0 && strlen(cmdtext) == 6)
			    	{
			    	    if ( PlayersData[playerid][Nacer] == 2)
			    	    {
							SendInfoMessage(playerid, 2, "0", "Ha cambiado su Spawn, ahora nacerá en su facción.");
				    	    PlayersData[playerid][Nacer] = 0;
						}
						else if ( PlayersData[playerid][Nacer] == 0 )
						{
							SendInfoMessage(playerid, 2, "0", "Ha cambiado su Spawn, ahora nacerá en su casa o alquiler si es que tiene uno.");
							PlayersData[playerid][Nacer] = 1;
						}
						else
						{
							SendInfoMessage(playerid, 2, "0", "Has cambiado su Spawn, ahora nacerá en la casa de amigo que tengas asignado si es que tiene uno.");
							PlayersData[playerid][Nacer] = 2;
						}
						UpdateSpawnPlayer(playerid);
			    	}
			    	else
			    	{
						SendInfoMessage(playerid, 0, "1373", "Quizás quiso decir: /Nacer - /Nacer Amigo");
					}
				}
				// COMANDO: /Decomisar [ID]
				else if (strfind(cmdtext, "/Decomisar ", true) == 0)
				{
					if ( PlayersData[playerid][Faccion] == SFPD ||
						 PlayersData[playerid][Faccion] == LSPD )
				    {
				        new playeridRemove = strval(cmdtext[11]);
					    if ( IsPlayerNear(playerid, playeridRemove,
							 "896",
							 "897",
							 "898",
							 "El jugador que le deseas decomisar no se encuentra conectado",
							 "El jugador que le deseas decomisar no se ha logueado",
							 "El jugador que le deseas decomisar no se encuentra cerca de tí") )
					    {
							new MsgCheckMe[MAX_TEXT_CHAT];
							format(MsgCheckMe, sizeof(MsgCheckMe), "descomisa todos los materiales ilegales a %s", PlayersDataOnline[playeridRemove][NameOnlineFix]);
							Acciones(playerid, 8, MsgCheckMe);

							ResetPlayerWeaponsEx(playeridRemove);
							PlayersData[playeridRemove][Ganzuas]		= 0;
							PlayersData[playeridRemove][Drogas]        = 0;
							PlayersData[playeridRemove][Materiales]    = 0;
							PlayersData[playeridRemove][Bombas]        = 0;
							
							new HaveTaser = GetObjectByType(playeridRemove, TYPE_TASER);
							if ( HaveTaser != -1 )
							{
								RemoveObjectHoldToPlayer(playeridRemove, -1, HaveTaser);
							}
						}
				    }
				    else
				    {
						SendInfoMessage(playerid, 0, "899", "Usted no es LSPD ni SFPD");
					}
				}
				// COMANDO: /Desalojar Todos
			  	else if (strcmp("/Desalojar Todos", cmdtext, true, 16) == 0 && strlen(cmdtext) == 16)
		    	{
					if ( PlayersData[playerid][House] != -1 )
		            {
	                    for ( new i = 0; i < MAX_PLAYERS; i++)
	                    {
							if ( i != playerid && IsPlayerConnected(i) &&  PlayersDataOnline[i][State] == 3 && PlayersData[i][Alquiler] == PlayersData[playerid][House] )
							{
								PlayersData[i][Alquiler] = -1;
								PlayersData[i][House] 	= -1;
								SendInfoMessage(i, 3, "0", "Has sido desalojado de su alquiler!");
							}
						}
						SendInfoMessage(playerid, 3, "0", "Has desalojado a todos de su casa");
					}
					else
					{
						SendInfoMessage(playerid, 0, "585", "Usted no tiene casa!");
					}
		    	}
				// COMANDO: /Desalojar [ID]
				else if (strfind(cmdtext, "/Desalojar ", true) == 0)
				{
					if ( PlayersData[playerid][House] != -1 )
		            {
					    if ( IsPlayerNear(playerid, strval(cmdtext[11]),
							 "594",
							 "595",
							 "596",
							 "El jugador que le deseas desalojarlo de su casa, no se encuentra conectado",
							 "El jugador que le deseas desalojarlo de su casa no se ha logueado",
							 "El jugador que le deseas desalojarlo de su casa no se encuentra cerca de tí") )
					    {
					        if ( PlayersData[playerid][House] == PlayersData[strval(cmdtext[11])][Alquiler] )
					        {
								new MsgDesalojar[MAX_TEXT_CHAT];
								new MsgDesalojarToPlayer[MAX_TEXT_CHAT];
						        format(MsgDesalojar, sizeof(MsgDesalojar), "Has desalojado a %s.", PlayersDataOnline[strval(cmdtext[11])][NameOnlineFix]);
						        format(MsgDesalojarToPlayer, sizeof(MsgDesalojarToPlayer), "%s te ha desalojado de su casa", PlayersDataOnline[playerid][NameOnlineFix]);
						        SendInfoMessage(playerid, 3, "0", MsgDesalojar);
						        SendInfoMessage(strval(cmdtext[11]), 3, "0", MsgDesalojarToPlayer);

	                            PlayersData[strval(cmdtext[11])][House] = -1;
	                            PlayersData[strval(cmdtext[11])][Alquiler] = -1;
							}
							else
							{
								SendInfoMessage(playerid, 0, "597", "Este jugador no se encuentra alquilado en su casa!");
							}
					    }
					}
					else
					{
						SendInfoMessage(playerid, 0, "598", "Usted no tiene casa!");
					}
		    	}
				// COMANDO: /Llaves
				else if (strfind(cmdtext, "/Llaves ", true) == 0)
				{
					// COMANDO: /Llaves PuertaEx
				  	if (strcmp("/Llaves PuertaEx", cmdtext, true, 16) == 0 && strlen(cmdtext) == 16 ||
					    strcmp("/Llaves PuertaEx", cmdtext, true, 16) == 0 && strlen(cmdtext) == 16 )
			    	{
				        if ( PlayersDataOnline[playerid][InPickup] >= Teles[0][PickupID] &&
	   	  					 PlayersDataOnline[playerid][InPickup] <= Teles[MAX_TELE][PickupID] )
				        {
				            for(new i=0;i<=MAX_TELE;i++)
				            {
				                if ( Teles[i][PickupID] == PlayersDataOnline[playerid][InPickup] )
				                {
				                    if ( Teles[i][Dueno] == CIVIL || Teles[i][Dueno] == PlayersData[playerid][Faccion] )
				                    {
					                	if ( Teles[i][Lock] )
							            {
						                	Teles[i][Lock] = false;
						                	Teles[Teles[i][PickupIDGo]][Lock] = false;
	                   						GameTextForPlayer(playerid, "~W~Puerta ~G~Abierta!", 1000, 6);
						                }
						                else
						                {
						                	Teles[i][Lock] = true;
											Teles[Teles[i][PickupIDGo]][Lock] = true;
			           						GameTextForPlayer(playerid, "~W~Puerta ~R~Cerrada!", 1000, 6);
						                }
				                  		PlayPlayerStreamSound(playerid, 1027);
				                  		UpdateLockDoorForPlayer(PlayersDataOnline[playerid][InPickup], Teles[i][Lock], Teles[i][PickupIDGo]);
					                }
					                else
					                {
										SendInfoMessage(playerid, 0, "811", "No tienes las llaves de esta puerta!");
									}
									break;
				                }
			                }
		                }
		                else
		                {
							SendInfoMessage(playerid, 0, "812", "No te encuentras al lado de ninguna puerta");
						}
			    	}
					// COMANDO: /Llaves Amigos
				  	else if (strcmp("/Llaves Amigos", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
				    {
				        if ( PlayersDataOnline[playerid][InPickup] >= HouseData[1][PickupId] &&
					         PlayersDataOnline[playerid][InPickup] <= HouseData[MAX_HOUSE][PickupId] )
				        {
							new HouseId = PlayersDataOnline[playerid][MyPickupWorld];
							if ( IsMyHouse(playerid, HouseId) || PlayersData[playerid][Admin] >= 8)
				            {
								ShowHouseFriends(playerid, HouseId);
							}
							else
							{
								SendInfoMessage(playerid, 0, "1207", "Ésta no es su casa");
							}
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "1208", "No te encuentras en ninguna casa");
						}
					}
					// COMANDO: /Llaves Facción
				  	else if (strcmp("/Llaves Facción", cmdtext, true, 15) == 0 && strlen(cmdtext) == 15 ||
					    strcmp("/Llaves Faccion", cmdtext, true, 15) == 0 && strlen(cmdtext) == 15)
			    	{
					    new MyNearFaccion = GetNearFaccion(playerid);
					    if ( MyNearFaccion != -1 )
					    {
					        if ( PlayersData[playerid][Faccion] == MyNearFaccion )
					        {
							    if(	 FaccionData[PlayersData[playerid][Faccion]][Lock] )
					            {
					                FaccionData[PlayersData[playerid][Faccion]][Lock] = false;
	          						GameTextForPlayer(playerid, "~W~Puerta ~G~Abierta!", 1000, 6);
				                }
				                else
				                {
									FaccionData[PlayersData[playerid][Faccion]][Lock] = true;
	           						GameTextForPlayer(playerid, "~W~Puerta ~R~Cerrada!", 1000, 6);
				                }
		                  		PlayPlayerStreamSound(playerid, 1027);



								UpdateLockDoorForPlayer(FaccionData[PlayersData[playerid][Faccion]][PickupidInF], FaccionData[PlayersData[playerid][Faccion]][Lock], FaccionData[PlayersData[playerid][Faccion]][PickupidOutF]);
	                  		}
	                  		else
	                  		{
								SendInfoMessage(playerid, 0, "813", "Ésta no es la puerta de su facción");
							}
					    }
			    	}
					// COMANDO: /Llaves Almacén
					else if (strcmp("/Llaves Almacén", cmdtext, true, 15) == 0 && strlen(cmdtext) == 15 ||
							 strcmp("/Llaves Almacen", cmdtext, true, 15) == 0 && strlen(cmdtext) == 15)
					{
					    new MyNearAlmacen = IsPlayerInAlmacen(playerid, true);
					    if ( MyNearAlmacen != -1)
					    {
	        				if ( PlayersData[playerid][Rango] <= 1 )
	        				{
					            if ( FaccionData[PlayersData[playerid][Faccion]][LockA][MyNearAlmacen] )
					            {
						        	FaccionData[PlayersData[playerid][Faccion]][LockA][MyNearAlmacen] = false;
					                SendInfoMessage(playerid, 2, "0", "Cerró este Almacén");
					        	}
					        	else
					        	{
						        	FaccionData[PlayersData[playerid][Faccion]][LockA][MyNearAlmacen] = true;
					                SendInfoMessage(playerid, 2, "0", "Abrió este Almacén");
								}
		                  		PlayPlayerStreamSound(playerid, 1027);
	                  		}
							else
							{
								SendInfoMessage(playerid, 0, "905", "No tienes las llaves de este almacén");
							}
						}
			    	}
					// COMANDO: /Llaves Puerta
				  	else if (strcmp("/Llaves Puerta", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
			    	{
				    	GetMyNearDoor(playerid, false, false);
					}
					// COMANDO: /Llaves Coche
				  	else if (strcmp("/Llaves Coche", cmdtext, true, 13) == 0 && strlen(cmdtext) == 13)
			    	{
						LockVehicle(playerid);
			    	}
					// COMANDO: /Llaves Guantera
				  	else if (strcmp("/Llaves Guantera", cmdtext, true, 16) == 0 && strlen(cmdtext) == 16)
			    	{
						LockGuantera(playerid);
			    	}
					// COMANDO: /Llaves Guantera
				  	else if (strcmp("/Llaves Gaveta", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
			    	{
				        if ( PlayersData[playerid][IsPlayerInHouse] )
				        {
							if ( PlayersData[playerid][House] == PlayersData[playerid][IsPlayerInHouse] ||
								 PlayersData[playerid][Alquiler] == PlayersData[playerid][IsPlayerInHouse] ||
								 IsPlayerInHouseFriend(playerid, PlayersData[playerid][IsPlayerInHouse]) != -1 )
				            {
					            if ( HouseData[PlayersData[playerid][IsPlayerInHouse]][GavetaLock] )
					            {
					                HouseData[PlayersData[playerid][IsPlayerInHouse]][GavetaLock] = false;
	           						GameTextForPlayer(playerid, "~W~Gaveta ~G~Abierta!", 1000, 6);
				                }
				                else
				                {
									HouseData[PlayersData[playerid][IsPlayerInHouse]][GavetaLock] = true;
	           						GameTextForPlayer(playerid, "~W~Gaveta ~R~Cerrada!", 1000, 6);
				                }
								PlayPlayerStreamSound(playerid, 1002);
							}
							else
							{
								SendInfoMessage(playerid, 0, "750", "Ésta no es su casa");
							}
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "749", "No te encuentras en ninguna casa");
						}
			    	}
					// COMANDO: /Llaves Maletero
				  	else if (strcmp("/Llaves Maletero", cmdtext, true, 16) == 0 && strlen(cmdtext) == 16)
			    	{
						LockMaletero(playerid);
			    	}
	 				// COMANDO: /Llaves Armario
				  	else if (strcmp("/Llaves Armario", cmdtext, true, 15) == 0 && strlen(cmdtext) == 15)
			    	{
				        if ( PlayersData[playerid][IsPlayerInHouse] )
				        {
							if ( PlayersData[playerid][House] == PlayersData[playerid][IsPlayerInHouse] ||
								 PlayersData[playerid][Alquiler] == PlayersData[playerid][IsPlayerInHouse] ||
								 IsPlayerInHouseFriend(playerid, PlayersData[playerid][IsPlayerInHouse]) != -1 )
				            {
					            if ( HouseData[PlayersData[playerid][IsPlayerInHouse]][ArmarioLock] )
					            {
					                HouseData[PlayersData[playerid][IsPlayerInHouse]][ArmarioLock] = false;
	           						GameTextForPlayer(playerid, "~W~Armario ~G~Abierto!", 1000, 6);
				                }
				                else
				                {
									HouseData[PlayersData[playerid][IsPlayerInHouse]][ArmarioLock] = true;
	           						GameTextForPlayer(playerid, "~W~Armario ~R~Cerrado!", 1000, 6);
				                }
								PlayPlayerStreamSound(playerid, 1027);
							}
							else
							{
								SendInfoMessage(playerid, 0, "1112", "Ésta no es su casa");
							}
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "1113", "No te encuentras en ninguna casa");
						}
			    	}
	 				// COMANDO: /Llaves Refrigerador
				  	else if (strcmp("/Llaves Refrigerador", cmdtext, true, 20) == 0 && strlen(cmdtext) == 20)
			    	{
				        if ( PlayersData[playerid][IsPlayerInHouse] )
				        {
							if ( PlayersData[playerid][House] == PlayersData[playerid][IsPlayerInHouse] ||
								 PlayersData[playerid][Alquiler] == PlayersData[playerid][IsPlayerInHouse] ||
								 IsPlayerInHouseFriend(playerid, PlayersData[playerid][IsPlayerInHouse]) != -1 )
				            {
					            if ( HouseData[PlayersData[playerid][IsPlayerInHouse]][RefrigeradorLock] )
					            {
					                HouseData[PlayersData[playerid][IsPlayerInHouse]][RefrigeradorLock] = false;
	           						GameTextForPlayer(playerid, "~W~Refrigerador ~G~Abierto!", 1000, 6);
				                }
				                else
				                {
									HouseData[PlayersData[playerid][IsPlayerInHouse]][RefrigeradorLock] = true;
	           						GameTextForPlayer(playerid, "~W~Refrigerador ~R~Cerrado!", 1000, 6);
				                }
								PlayPlayerStreamSound(playerid, 1002);
							}
							else
							{
								SendInfoMessage(playerid, 0, "1220", "Ésta no es su casa");
							}
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "1221", "No te encuentras en ninguna casa");
						}
			    	}
	 				// COMANDO: /Llaves GarageEx
				  	else if (strcmp("/Llaves GarageEx", cmdtext, true, 16) == 0 && strlen(cmdtext) == 16)
			    	{
			    	    new GarageID = IsPlayerInGarageEx(playerid);
				        if ( GarageID != -1 )
				        {
		                    if ( GaragesEx[GarageID][Dueno] == CIVIL || GaragesEx[GarageID][Dueno] == PlayersData[playerid][Faccion] )
		                    {
			                	if ( GaragesEx[GarageID][Lock] )
					            {
				                	GaragesEx[GarageID][Lock] = false;
               						GameTextForPlayer(playerid, "~W~Garage ~G~Abierto!", 1000, 6);
				                }
				                else
				                {
				                	GaragesEx[GarageID][Lock] = true;
	           						GameTextForPlayer(playerid, "~W~Garage ~R~Cerrado!", 1000, 6);
				                }
		                  		PlayPlayerStreamSound(playerid, 1027);
		                  		UpdateLockDoorForPlayer(GaragesEx[GarageID][PickupIDOneP], GaragesEx[GarageID][Lock], GaragesEx[GarageID][PickupIDTwoP]);
			                }
			                else
			                {
								SendInfoMessage(playerid, 0, "1286", "No tienes las llaves de este garage!");
							}
                        }
                        else
                        {
       						SendInfoMessage(playerid, 0, "1459", "No te encuentras al lado de ningún garage");
						}
			    	}
	 				// COMANDO: /Llaves Garage
				  	else if (strcmp("/Llaves Garage", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
			    	{
	       				new GarageID, HouseID, LockID; IsPlayerInGarageFun(playerid, HouseID, GarageID, LockID);
						if ( GarageID != -1 )
						{
							if ( PlayersData[playerid][House] == HouseID ||
								 PlayersData[playerid][Alquiler] == HouseID ||
								 IsPlayerInHouseFriend(playerid, HouseID) != -1)
				            {
								if ( LockID ||
									 PlayersDataOnline[playerid][InPickup] == TypeGarage[Garages[HouseID][GarageID][TypeGarageE]][PickupId] ||
									 PlayersDataOnline[playerid][InPickup] == Garages[HouseID][GarageID][PickupidOut] )
								{
						            if ( Garages[HouseID][GarageID][LockOut] )
						            {
						                Garages[HouseID][GarageID][LockOut] = false;
		           						GameTextForPlayer(playerid, "~W~Garage ~G~Abierto!", 1000, 6);
					                }
					                else
					                {
										Garages[HouseID][GarageID][LockOut] = true;
		           						GameTextForPlayer(playerid, "~W~Garage ~R~Cerrado!", 1000, 6);
					                }
									UpdateLockDoorForPlayer(TypeGarage[Garages[HouseID][GarageID][TypeGarageE]][PickupId], Garages[HouseID][GarageID][LockOut], Garages[HouseID][GarageID][PickupidOut]);
								}
								else if ( PlayersDataOnline[playerid][InPickup] == TypeGarage[Garages[HouseID][GarageID][TypeGarageE]][PickupIdh] ||
									 	  PlayersDataOnline[playerid][InPickup] == Garages[HouseID][GarageID][PickupidIn] )
								{
						            if ( Garages[HouseID][GarageID][LockIn] )
						            {
						                Garages[HouseID][GarageID][LockIn] = false;
		           						GameTextForPlayer(playerid, "~W~Puerta ~G~Abierta!", 1000, 6);
					                }
					                else
					                {
										Garages[HouseID][GarageID][LockIn] = true;
		           						GameTextForPlayer(playerid, "~W~Puerta ~R~Cerrada!", 1000, 6);
					                }
									UpdateLockDoorForPlayer(TypeGarage[Garages[HouseID][GarageID][TypeGarageE]][PickupIdh], Garages[HouseID][GarageID][LockIn], Garages[HouseID][GarageID][PickupidIn]);
								}
								PlayPlayerStreamSound(playerid, 1027);
							}
							else
							{
								SendInfoMessage(playerid, 0, "1175", "Usted no tiene las llaves de este garage");
							}
				        }
			    	}
	 				// COMANDO: /Llaves Casa
				  	else if (strcmp("/Llaves Casa", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12)
			    	{
				        if ( PlayersDataOnline[playerid][InPickup] >= HouseData[1][PickupId] &&
				             PlayersDataOnline[playerid][InPickup] <= HouseData[MAX_HOUSE][PickupId] ||
							 PlayersDataOnline[playerid][InPickup] >= TypeHouse[0][PickupId] &&
				             PlayersDataOnline[playerid][InPickup] <= TypeHouse[MAX_HOUSE_TYPE][PickupId])
				        {
							new houseid;
							if ( PlayersDataOnline[playerid][InPickup] >= TypeHouse[0][PickupId] &&
				             PlayersDataOnline[playerid][InPickup] <= TypeHouse[MAX_HOUSE_TYPE][PickupId] && PlayersData[playerid][IsPlayerInHouse])
							{
						    	houseid = PlayersData[playerid][IsPlayerInHouse];
							}
							else
							{
							    houseid = PlayersDataOnline[playerid][MyPickupWorld];
							}

							if ( PlayersData[playerid][House] == houseid ||
								 PlayersData[playerid][Alquiler] == houseid ||
								 IsPlayerInHouseFriend(playerid, houseid) != -1)
				            {
					            if ( HouseData[houseid][Lock] )
					            {
					                HouseData[houseid][Lock] = false;
	           						GameTextForPlayer(playerid, "~W~Puerta ~G~Abierta!", 1000, 6);
				                }
				                else
				                {
									HouseData[houseid][Lock] = true;
	           						GameTextForPlayer(playerid, "~W~Puerta ~R~Cerrada!", 1000, 6);
				                }
								PlayPlayerStreamSound(playerid, 1027);
								UpdateLockDoorForPlayer(HouseData[houseid][PickupId], HouseData[houseid][Lock], TypeHouse[HouseData[houseid][TypeHouseId]][PickupId]);
							}
							else
							{
								SendInfoMessage(playerid, 0, "592", "Ésta no es su casa");
							}
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "593", "No te encuentras en ninguna casa");
						}
			    	}
					// COMANDO: /Llaves Negocio
				  	else if (strcmp("/Llaves Negocio", cmdtext, true, 15) == 0 && strlen(cmdtext) == 15)
			    	{
				        if ( PlayersDataOnline[playerid][InPickup] >= NegociosData[1][PickupOutId] &&
				             PlayersDataOnline[playerid][InPickup] <= NegociosData[MAX_BIZZ][PickupOutId] ||
							 IsDoorInsideBizz(PlayersDataOnline[playerid][InPickup]) && PlayersData[playerid][IsPlayerInBizz])
				        {
					        new Saveit;
							if ( PlayersDataOnline[playerid][InPickup] >= NegociosData[1][PickupOutId] &&
				                 PlayersDataOnline[playerid][InPickup] <= NegociosData[MAX_BIZZ][PickupOutId] )
				            {
								Saveit = PlayersDataOnline[playerid][MyPickupWorld];
				            }
				            else
				            {
				                Saveit = PlayersData[playerid][IsPlayerInBizz];
							}
				            if ( IsMyBizz(playerid, Saveit, true)  )
				            {
								if ( !IsBizzOnRobo(playerid, Saveit) )
								{
						            if ( NegociosData[Saveit][Lock] )
						            {
						                NegociosData[Saveit][Lock] = false;
		           						GameTextForPlayer(playerid, "~W~Puerta ~G~Abierta!", 1000, 6);
					                }
					                else
					                {
										NegociosData[Saveit][Lock] = true;
		           						GameTextForPlayer(playerid, "~W~Puerta ~R~Cerrada!", 1000, 6);
					                }
					                PlayPlayerStreamSound(playerid, 1027);
									UpdateLockDoorForPlayer(NegociosData[Saveit][PickupOutId],NegociosData[Saveit][Lock], NegociosType[NegociosData[Saveit][Type]][PickupId]);
								}
				            }
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "347", "No te encuentras en ningún negocio");
						}
			    	}
			    	else
			    	{
						SendInfoMessage(playerid, 0, "288", "Quizás quiso decir: /Llaves {Coche, Negocio, Casa, Armario, Puerta, PuertaEx, Facción, Almacén, Garage, Amigos}");
						SendInfoMessage(playerid, 0, "288", "Quizás quiso decir: /Llaves {Refrigerador, GarageEx, Guantera, Gaveta}");
					}
			    }
				// COMANDO: /Cambiar
				else if (strfind(cmdtext, "/Cambiar ", true) == 0)
				{
					// COMANDO: /Cambiar Frecuencia
					if (strcmp("/Cambiar Frecuencia", cmdtext, true, 19) == 0 && strlen(cmdtext) == 19)
					{
					    if ( FaccionData[PlayersData[playerid][Faccion]][Radio] )
					    {
							if ( PlayersDataOnline[playerid][StateChannelRadio] )
							{
						        new MsgFrecuencia[MAX_TEXT_CHAT];
			                    switch (PlayersDataOnline[playerid][Frecuencia])
			                    {
			                        case 0:
									{
										PlayersDataOnline[playerid][Frecuencia] = 1;
									}
									case 1:
									{
									    PlayersDataOnline[playerid][Frecuencia] = 2;
									}
									case 2:
									{
										PlayersDataOnline[playerid][Frecuencia] = 0;
									}
								}
								Acciones(playerid, 8, "cambia de frecuencia su radio");
								format(MsgFrecuencia, sizeof(MsgFrecuencia), "Has cambiado a la frecuencia [%i]", PlayersDataOnline[playerid][Frecuencia] );
								SendInfoMessage(playerid, 2, "0", MsgFrecuencia);
					        }
					        else
					        {
								SendInfoMessage(playerid, 0, "112", "Tú tienes cerrado el canal Radio personal, abrelo con /Estado Radio y luego usa /Cambiar Frecuencia");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "113", "Su Facción no tiene canal /R [Radio], no puedes usar /Cambiar Frecuencia");
						}
					}
					//////////--- /Cambiar Password [Nombre_Del_Jugador] [Nueva Password]              - Cambiar la password a un jugador
					else if (strfind(cmdtext, "/Cambiar Password ", true) == 0)
					{
					    MsgAdminUseCommands(9, playerid, cmdtext);
						if ( PlayersData[playerid][Admin] >= 8 )
						{
						    if ( strlen(cmdtext[17]) >= 7 )
						    {
						        new saveName[MAX_PLAYER_NAME];
						        strmid(saveName, cmdtext, GetPosSpace(cmdtext, 2)+1, GetPosSpace(cmdtext, 3), sizeof(saveName));
								ChangePasswordUser(playerid, saveName, cmdtext[GetPosSpace(cmdtext, 3) + 1]);
							}
					        else
					        {
								SendInfoMessage(playerid, 0, "1460", "El nombre tiene que contener entre 3 y 24 caracteres y la password mayor de 3");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1461", "No tienes acceso al comando /Cambiar Password");
						}
					}
					// COMANDO: /Cambiar Nombre [Nuevo Nombre]
					else if (strfind(cmdtext, "/Cambiar Nombre ", true) == 0)
					{
				        if ( PlayersDataOnline[playerid][InPickup] >= NegociosData[1][PickupOutId] &&
				             PlayersDataOnline[playerid][InPickup] <= NegociosData[MAX_BIZZ][PickupOutId] )
				        {
				            if ( PlayersData[playerid][Admin] >= 8 || IsMyBizz(playerid, PlayersDataOnline[playerid][MyPickupWorld], true)  )
				            {
								if ( !IsBizzOnRobo(playerid, PlayersDataOnline[playerid][MyPickupWorld]) )
								{
						    	    if (strlen(cmdtext[16]) >= 2 && strlen(cmdtext[16]) <= 35 )
						    	    {
						    	        if ( IsValidStringServerOther(playerid, cmdtext) )
						    	        {
				                            format(NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][NameBizz], 	MAX_BIIZ_NAME, "%s", cmdtext[16]);
				                            ActTextDrawBizz(PlayersDataOnline[playerid][MyPickupWorld]);
				                            SendInfoMessage(playerid, 2, "0", "Has modificado el nombre de tu negocio");
			                            }
									}
									else
									{
										SendInfoMessage(playerid, 0, "313", "El nombre de su negocio tiene que ser mayor de 2 y menos de 35 caracteres");
									}
								}
				            }
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "314", "No te encuentras en ningún negocio");
						}
			    	}
					// COMANDO: /Cambiar Precio Alquiler [Nuevo_Precio]
					else if (strfind(cmdtext, "/Cambiar Precio Alquiler ", true) == 0)
					{
				        if ( PlayersDataOnline[playerid][InPickup] >= HouseData[1][PickupId] &&
				             PlayersDataOnline[playerid][InPickup] <= HouseData[MAX_HOUSE][PickupId] )
				        {
							if ( IsMyHouse(playerid, PlayersDataOnline[playerid][MyPickupWorld]) )
				            {
				                if ( strval(cmdtext[25]) >= 0 &&  strval(cmdtext[25]) <= 20000)
				                {
		                            HouseData[PlayersDataOnline[playerid][MyPickupWorld]][PriceRent] = strval(cmdtext[25]);
		                            ActTextDrawHouse(PlayersDataOnline[playerid][MyPickupWorld]);
		                            SendInfoMessage(playerid, 2, "0", "Has modificado el precio de alquiler de su casa");
									if ( !strval(cmdtext[25]) )
						            {
					                    for ( new i = 0; i < MAX_PLAYERS; i++)
					                    {
											if ( i != playerid && IsPlayerConnected(i) &&  PlayersDataOnline[i][State] == 3 && PlayersData[i][Alquiler] == PlayersData[playerid][House] )
											{
												PlayersData[i][Alquiler] = -1;
												PlayersData[i][House] 	= -1;
												SendInfoMessage(i, 3, "0", "Has sido desalojado de su alquiler!");
											}
										}
									}
	                            }
	                            else
	                            {
									SendInfoMessage(playerid, 0, "601", "El precio de alquiler mínimo es $1 y máximo $20000 (0 = No se renta)");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "599", "Ésta no es su casa");
							}
						}
				        else
				        {
							SendInfoMessage(playerid, 0, "600", "No te encuentras en ninguna casa");
						}
					}
					// COMANDO: /Cambiar Precio Entrada [Nuevo_Precio]
					else if (strfind(cmdtext, "/Cambiar Precio Entrada ", true) == 0)
					{
				        if ( PlayersDataOnline[playerid][InPickup] >= NegociosData[1][PickupOutId] &&
				             PlayersDataOnline[playerid][InPickup] <= NegociosData[MAX_BIZZ][PickupOutId] )
				        {
				            if ( IsMyBizz(playerid, PlayersDataOnline[playerid][MyPickupWorld], true)  )
				            {
								if ( !IsBizzOnRobo(playerid, PlayersDataOnline[playerid][MyPickupWorld]) )
								{
					                if ( strval(cmdtext[24]) >= 0 &&  strval(cmdtext[24]) <= 20000)
					                {
			                            NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][PriceJoin] = strval(cmdtext[24]);
			                            ActTextDrawBizz(PlayersDataOnline[playerid][MyPickupWorld]);
			                            SendInfoMessage(playerid, 2, "0", "Has modificado el precio de entrada del negocio");
		                            }
		                            else
		                            {
										SendInfoMessage(playerid, 0, "317", "El precio de entrada mínimo es $0 y máximo $20000");
									}
								}
				            }
						}
				        else
				        {
							SendInfoMessage(playerid, 0, "316", "No te encuentras en ningún negocio");
						}
					}
					// COMANDO: /Cambiar Precio Entrada [Nuevo_Precio]
					else if (strfind(cmdtext, "/Cambiar Precio Materiales ", true) == 0)
					{
				        if ( PlayersDataOnline[playerid][InPickup] >= NegociosData[1][PickupOutId] &&
				             PlayersDataOnline[playerid][InPickup] <= NegociosData[MAX_BIZZ][PickupOutId] )
				        {
				            if ( IsMyBizz(playerid, PlayersDataOnline[playerid][MyPickupWorld], true)  )
				            {
				                if ( strval(cmdtext[27]) >= 0 && strval(cmdtext[27]) <= 1000)
				                {
		                            NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][PricePiece] = strval(cmdtext[27]);
		                            ActTextDrawBizz(PlayersDataOnline[playerid][MyPickupWorld]);
		                            SendInfoMessage(playerid, 2, "0", "Has modificado el precio de los materiales");
	                            }
	                            else
	                            {
									SendInfoMessage(playerid, 0, "318", "El precio de compra de materiales mínimo es $0 y mayor $1000");
								}
				            }
						}
				        else
				        {
							SendInfoMessage(playerid, 0, "319", "No te encuentras en ningún negocio");
						}
					}
					// COMANDO: /Cambiar Precio Entrada [Nuevo_Precio]
					else if (strfind(cmdtext, "/Cambiar Ciudad ", true) == 0)
					{
						if ( PlayersData[playerid][Faccion] == GOBIERNO && PlayersData[playerid][Rango] <= 3 )
					    {
							new MsgCambioCiudad[MAX_TEXT_CHAT];
					        if ( strval(cmdtext[16]) == playerid )
					        {
								if ( PlayersData[playerid][Ciudad] )
								{
								    PlayersData[playerid][Ciudad] = false;
								}
								else
								{
								    PlayersData[playerid][Ciudad] = true;
								}
								format(MsgCambioCiudad, sizeof(MsgCambioCiudad), "Ahora en su pasaporte radica como que vive en la ciudad de %s", Ciudades[PlayersData[playerid][Ciudad]]);
								SendInfoMessage(playerid, 3, "0", MsgCambioCiudad);
							}
						    else if ( IsPlayerNear(playerid, strval(cmdtext[16]),
								 "873",
								 "874",
								 "875",
								 "El jugador que le desea cambiar de ciudad no se encuentra conectado",
								 "El jugador que le desea cambiar de ciudad no se ha logueado",
								 "El jugador que le desea cambiar de ciudad no se encuentra cerca de tí") )
						    {
								if ( PlayersData[strval(cmdtext[16])][Ciudad] )
								{
								    PlayersData[strval(cmdtext[16])][Ciudad] = false;
								}
								else
								{
								    PlayersData[strval(cmdtext[16])][Ciudad] = true;
								}
								new MsgCambioCiudadMe[MAX_TEXT_CHAT];
								format(MsgCambioCiudad, sizeof(MsgCambioCiudad), "El %s $s le ha cambiado en su pasaporte la ciudad donde vive a %s", FaccionesRangos[PlayersData[playerid][Faccion]][PlayersData[playerid][Rango]], PlayersDataOnline[playerid][NameOnlineFix], Ciudades[PlayersData[strval(cmdtext[16])][Ciudad]]);
								format(MsgCambioCiudadMe, sizeof(MsgCambioCiudadMe), "Le has cambiado al ciudadano %s a la ciudad %s",PlayersDataOnline[strval(cmdtext[16])][NameOnlineFix], Ciudades[PlayersData[strval(cmdtext[16])][Ciudad]]);
								SendInfoMessage(playerid, 3, "0", MsgCambioCiudadMe);
								SendInfoMessage(strval(cmdtext[16]), 3, "0", MsgCambioCiudad);
						    }
					    }
				        else
				        {
							SendInfoMessage(playerid, 0, "876", "Usted no es el Presidente ni Vicepresidente");
						}
					}
			//		23- * 		/Cambiar Logo                   - Cambiar el logo del Staff
					else if (strfind(cmdtext, "/Cambiar Logo ", true) == 0)
					{
						MsgAdminUseCommands(9, playerid, cmdtext);
						if (PlayersData[playerid][Admin] >= 8)
						{
							if ( strlen(cmdtext) > 16 )
							{
								new new_logo[30];
								strmid(new_logo, cmdtext, 14, strlen(cmdtext), sizeof(new_logo));
							    LOGO_STAFF = new_logo;
							    new msglogo[120];
							    format(msglogo, sizeof(msglogo), "El nuevo logo del staff es!: %s", new_logo);
							   	SendInfoMessage(playerid, 1, msglogo, "Ayuda: ");
							   	return 1;
							}
							else
							{
								SendInfoMessage(playerid, 0, "201", "El logo es a cambiar es muy corto.");
						    	return 1;
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "202", "Tú no tienes acceso a el comando /Cambiar Logo.");
					        return 1;
						}
					}
			    	else
			    	{
						SendInfoMessage(playerid, 0, "315", "Quizás quiso decir: /Cambiar {Frecuencia, Nombre [Nuevo Nombre], Precio Entrada [Nuevo Precio]}");
						SendInfoMessage(playerid, 0, "315", "Quizás quiso decir: /Cambiar {Precio Materiales [Nuevo Precio], Ciudad [ID]}");
					}
				}
				// COMANDO: /Info
				else if (strfind(cmdtext, "/Info", true) == 0)
				{
					// COMANDO: /Info Negocio
				  	if (strcmp("/Info Negocio", cmdtext, true, 13) == 0 && strlen(cmdtext) == 13)
			    	{
				        if ( PlayersDataOnline[playerid][InPickup] >= NegociosData[1][PickupOutId] &&
				             PlayersDataOnline[playerid][InPickup] <= NegociosData[MAX_BIZZ][PickupOutId] )
				        {
				            if ( PlayersData[playerid][Admin] >= 7 || IsMyBizz(playerid, PlayersDataOnline[playerid][MyPickupWorld], true) )
				            {
				                new MsgInfoNegocio[5][MAX_TEXT_CHAT];
				                format(MsgInfoNegocio[0], MAX_TEXT_CHAT, "(( ID del Negocio: %i ))Nombre del Negocio: %s | Materiales: [%i/5000]",
					                PlayersDataOnline[playerid][MyPickupWorld],
									NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][NameBizz],
									NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][Materiales]);
				                format(MsgInfoNegocio[1], MAX_TEXT_CHAT, "Precio Entrada: $%i",
									NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][PriceJoin]);
				                format(MsgInfoNegocio[2], MAX_TEXT_CHAT, "Precio que paga por Materiales(0  = Deshabilitado): $%i",
									NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][PricePiece]);
				                format(MsgInfoNegocio[3], MAX_TEXT_CHAT, "Deposito: $%i",
									NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][Deposito]);
				                format(MsgInfoNegocio[4], MAX_TEXT_CHAT, "Dinero extorsionado: $%i",
									NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][DepositoExtorsion]);

				    			SendInfoMessage(playerid, 1, " ", "|___________________  Negocio ___________________|");
				    			SendInfoMessage(playerid, 1, MsgInfoNegocio[0], "Negocio: ");
				    			SendInfoMessage(playerid, 1, MsgInfoNegocio[1], "Negocio: ");
				    			SendInfoMessage(playerid, 1, MsgInfoNegocio[2], "Negocio: ");
				    			SendInfoMessage(playerid, 1, MsgInfoNegocio[3], "Negocio: ");
				    			SendInfoMessage(playerid, 1, MsgInfoNegocio[4], "Negocio: ");
				    			SendInfoMessage(playerid, 1, " ", "|_____________________ Fin ____________________|");
				            }
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "312", "No te encuentras en ningún negocio");
						}
					}
					//////////--- /Info Garage [ID]              - VER INFORMACIóN DE UNA CASA
				  	else if (strcmp("/Info Garage", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12)
					{
						MsgAdminUseCommands(9, playerid, cmdtext);
						if ( PlayersData[playerid][Admin] >= 8 )
						{
       	       				new GarageID, HouseID, LockID; IsPlayerInGarageFun(playerid, HouseID, GarageID, LockID);
			                if ( GarageID != -1 )
			                {
		                        new MsgChangeType[MAX_TEXT_CHAT];
		                        format(MsgChangeType, sizeof(MsgChangeType), "Este garage es ID[%i], tipo [%i] pertenece a la casa ID[%i]",GarageID, Garages[HouseID][GarageID][TypeGarageE],HouseID);
				                SendInfoMessage(playerid, 2, "0", MsgChangeType);
                            }
						}
						else
						{
							SendInfoMessage(playerid, 0, "1173", "No tienes acceso al comando /Info Garage");
						}
					}
					// COMANDO: /Info Casa
				  	else if (strcmp("/Info Casa", cmdtext, true, 10) == 0 && strlen(cmdtext) == 10)
			    	{
				        if ( PlayersDataOnline[playerid][InPickup] >= HouseData[1][PickupId] &&
					         PlayersDataOnline[playerid][InPickup] <= HouseData[MAX_HOUSE][PickupId] )
				        {
							if ( IsMyHouse(playerid, PlayersDataOnline[playerid][MyPickupWorld]) || PlayersData[playerid][Admin] >= 7)
				            {
				                new MsgInfoCasa[4][MAX_TEXT_CHAT];
				                format(MsgInfoCasa[0], MAX_TEXT_CHAT, "(( ID de la Casa: %i Tipo: %i))",
					                PlayersDataOnline[playerid][MyPickupWorld],
									HouseData[PlayersDataOnline[playerid][MyPickupWorld]][TypeHouseId]);
				                format(MsgInfoCasa[1], MAX_TEXT_CHAT, "Precio Alquiler: $%i (0  = Deshabilitado)",
									HouseData[PlayersDataOnline[playerid][MyPickupWorld]][PriceRent]);
				                format(MsgInfoCasa[2], MAX_TEXT_CHAT, "Dinero del Alquiler: $%i",
									HouseData[PlayersDataOnline[playerid][MyPickupWorld]][Deposito]);
				                format(MsgInfoCasa[3], MAX_TEXT_CHAT, "Precio de la Casa: $%i",
									HouseData[PlayersDataOnline[playerid][MyPickupWorld]][Price]);

				    			SendInfoMessage(playerid, 1, " ", "|___________________  Casa ___________________|");
				    			SendInfoMessage(playerid, 1, MsgInfoCasa[0], "Casa: ");
				    			SendInfoMessage(playerid, 1, MsgInfoCasa[1], "Casa: ");
				    			SendInfoMessage(playerid, 1, MsgInfoCasa[2], "Casa: ");
				    			SendInfoMessage(playerid, 1, MsgInfoCasa[3], "Casa: ");
				    			SendInfoMessage(playerid, 1, " ", "|_____________________ Fin ____________________|");
				            }
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "1158", "No te encuentras en ningúna casa");
						}
					}
			    	else
			    	{
						SendInfoMessage(playerid, 0, "765", "Quizás quiso decir: /Info {Negocio, Casa}");
					}
				}
				// COMANDO: /Bolsa [ID]
			  	else if (strfind(cmdtext, "/Bolsa ", true) == 0 )
		    	{
		    		if ( PlayersData[playerid][HaveBolsa] )
		    		{
					    if ( playerid == strval(cmdtext[7]) )
					    {
					        Acciones(playerid, 8, "mira al interior de su bolsa");
					        ShowBolsaToPlayer(playerid, strval(cmdtext[7]));
					    }
					    else if ( IsPlayerNear(playerid, strval(cmdtext[7]),
							 "1222",
							 "1223",
							 "1224",
							 "El jugador que desea mostrarle su bolsa no se encuentra conectado",
							 "El jugador que desea mostrarle su bolsa no se encuentra logueado",
							 "El jugador que desea mostrarle su bolsa no se encuentra cerca de tí") )
					    {
							new MsgBolsaMe[MAX_TEXT_CHAT];
							format(MsgBolsaMe, sizeof(MsgBolsaMe), "le enseña su bolsa a %s", PlayersDataOnline[strval(cmdtext[7])][NameOnlineFix]);
					        Acciones(playerid, 8, MsgBolsaMe);
							ShowBolsaToPlayer(playerid, strval(cmdtext[7]));
					    }
				    }
				    else
				    {
						SendInfoMessage(playerid, 0, "1227", "Usted no tiene una bolsa");
					}
		    	}
				// COMANDO: /Cartera [ID]
			  	else if (strfind(cmdtext, "/Cartera ", true) == 0 )
		    	{
				    if ( playerid == strval(cmdtext[9]) )
				    {
				        Acciones(playerid, 8, "mira su cartera");
				        ShowCarteraToPlayer(playerid, strval(cmdtext[9]));
				    }
				    else if ( IsPlayerNear(playerid, strval(cmdtext[9]),
						 "1318",
						 "1319",
						 "1320",
						 "El jugador que desea mostrarle su cartera no se encuentra conectado",
						 "El jugador que desea mostrarle su cartera no se encuentra logueado",
						 "El jugador que desea mostrarle su cartera no se encuentra cerca de tí") )
				    {
						new MsgCarteraMe[MAX_TEXT_CHAT];
						format(MsgCarteraMe, sizeof(MsgCarteraMe), "le enseña su cartera a %s", PlayersDataOnline[strval(cmdtext[9])][NameOnlineFix]);
				        Acciones(playerid, 8, MsgCarteraMe);
						ShowCarteraToPlayer(playerid, strval(cmdtext[9]));
				    }
		    	}
				// COMANDO: /Bolsillos [ID]
			  	else if (strfind(cmdtext, "/Bolsillos ", true) == 0 )
		    	{
				    if ( playerid == strval(cmdtext[11]) )
				    {
				        Acciones(playerid, 8, "se revisa en los bolsillos");
				        ShowBolsillosToPlayer(playerid, strval(cmdtext[11]));
				    }
				    else if ( IsPlayerNear(playerid, strval(cmdtext[11]),
						 "1065",
						 "1066",
						 "1067",
						 "El jugador que desea mostrarle sus bolsillos no se encuentra conectado",
						 "El jugador que desea mostrarle sus bolsillos no se encuentra logueado",
						 "El jugador que desea mostrarle sus bolsillos no se encuentra cerca de tí") )
				    {
						new MsgBolsillosMe[MAX_TEXT_CHAT];
						format(MsgBolsillosMe, sizeof(MsgBolsillosMe), "le enseña su bolsillos a %s", PlayersDataOnline[strval(cmdtext[11])][NameOnlineFix]);
				        Acciones(playerid, 8, MsgBolsillosMe);
						ShowBolsillosToPlayer(playerid, strval(cmdtext[11]));
				    }
		    	}
				// COMANDO: /Retirar
				else if (strfind(cmdtext, "/Retirar", true) == 0)
				{
					// COMANDO: /Retirar Almacén
					if (strfind(cmdtext, "/Retirar Almacén ", true) == 0 ||
					    strfind(cmdtext, "/Retirar Almacen ", true) == 0)
					{
					    new MyNearAlmacen = IsPlayerInAlmacen(playerid,true);
					    if ( MyNearAlmacen != -1)
					    {
							if ( PlayersData[playerid][Faccion] == CAMIONEROS && PlayersData[playerid][Rango] <= 3  ||
								 PlayersData[playerid][Faccion] == CONTRABANDISTAS && PlayersData[playerid][Rango] <= 3 	||
								 PlayersData[playerid][Faccion] == TRAFICANTES && PlayersData[playerid][Rango] <= 2	||
								 PlayersData[playerid][Faccion] == YKZ ||
								 PlayersData[playerid][Faccion] == LCN ||
								 PlayersData[playerid][Faccion] == SICARIOS && PlayersData[playerid][Rango] <= 3 ||
 								 PlayersData[playerid][Faccion] == COLTS    && PlayersData[playerid][Rango] <= 1 ||
 								 PlayersData[playerid][Faccion] == AK	    && PlayersData[playerid][Rango] <= 1 ||
 								 PlayersData[playerid][Faccion] == VELTRAN	&& PlayersData[playerid][Rango] <= 1 ||
 								 PlayersData[playerid][Faccion] == HEORS    && PlayersData[playerid][Rango] <= 1   )
							{
						        if ( strval(cmdtext[17]) >= 1 && strval(cmdtext[17]) <= 2000)
						        {
						            if ( FaccionData[PlayersData[playerid][Faccion]][LockA][MyNearAlmacen] )
						            {
							            if ( FaccionData[PlayersData[playerid][Faccion]][Almacen][MyNearAlmacen] >= strval(cmdtext[17]) )
							            {
							                if ( IsNotFullMaterialsPlayer(playerid, strval(cmdtext[17])) )
								            {
												FaccionData[PlayersData[playerid][Faccion]][Almacen][MyNearAlmacen] = FaccionData[PlayersData[playerid][Faccion]][Almacen][MyNearAlmacen] - strval(cmdtext[17]);
												PlayersData[playerid][Materiales] =  PlayersData[playerid][Materiales] + strval(cmdtext[17]);

										        new MsgRetirarAlmacen[MAX_TEXT_CHAT];
										        format(MsgRetirarAlmacen, sizeof(MsgRetirarAlmacen), "Ha retirado %i de materiales de este almacén, ahora quedan %i de materiales", strval(cmdtext[17]), FaccionData[PlayersData[playerid][Faccion]][Almacen][MyNearAlmacen]);
								    			SendInfoMessage(playerid, 1, " ", "|___________________  Almacén ___________________|");
								    			SendInfoMessage(playerid, 1, MsgRetirarAlmacen, "Almacén: ");
								    			SendInfoMessage(playerid, 1, " ", "|_____________________ Fin ____________________|");
									        }
									        else
									        {
										    	SendInfoMessage(playerid, 0, "981", "No puedes cargar esa cantidad de materiales encima! Recuerda que el máximo es 2500");
											}
										}
										else
										{
											SendInfoMessage(playerid, 0, "735", "No queda esa cantidad de materiales para retirar del almacén");
										}
									}
									else
									{
										SendInfoMessage(playerid, 0, "900", "Este almacén se encuentra cerrado");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "737", "Mínimo puede retirar 1 de materiales y máximo 2000");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "802", "Usted no puede retirar materiales del almacén");
							}
						}
			    	}
					// COMANDO: /Retirar Facción
					else if (strfind(cmdtext, "/Retirar Facción ", true) == 0 ||
					    strfind(cmdtext, "/Retirar Faccion ", true) == 0)
					{
		    	        if ( PlayersData[playerid][Rango] == 0 )
		    	        {
						    new MyNearFaccion = GetNearFaccion(playerid);
						    if ( MyNearFaccion != -1 )
						    {
						        if ( MyNearFaccion == PlayersData[playerid][Faccion])
								{
							        if (FaccionData[MyNearFaccion][Deposito] >= strval(cmdtext[17]) )
							        {
									    if (IsNotZero(playerid, strval(cmdtext[17])))
									    {
									        new MsgConsultarFaccion[MAX_TEXT_CHAT];
									        format(MsgConsultarFaccion, sizeof(MsgConsultarFaccion), "Tiene usted $%i en su facción", FaccionData[MyNearFaccion][Deposito]);
							    			SendInfoMessage(playerid, 1, " ", "|___________________  Facción ___________________|");
							    			SendInfoMessage(playerid, 1, MsgConsultarFaccion, "Facción: ");
							    			SendInfoMessage(playerid, 1, " ", "|_____________________ Fin ____________________|");

								            FaccionData[MyNearFaccion][Deposito] = FaccionData[MyNearFaccion][Deposito] - strval(cmdtext[17]);
								            GivePlayerMoneyEx(playerid, strval(cmdtext[17]));

									        new MsgRetirarFaccion[MAX_TEXT_CHAT];
									        format(MsgRetirarFaccion, sizeof(MsgRetirarFaccion), "Ha retirado $%i del la facción, su nuevo saldo es: $%i", strval(cmdtext[17]), FaccionData[MyNearFaccion][Deposito]);
							    			SendInfoMessage(playerid, 1, " ", "|___________________  Facción ___________________|");
							    			SendInfoMessage(playerid, 1, MsgRetirarFaccion, "Facción: ");
							    			SendInfoMessage(playerid, 1, " ", "|_____________________ Fin ____________________|");
						    			}
									}
									else
									{
										SendInfoMessage(playerid, 0, "386", "No tienes esa cantidad de dinero para retirar del la facción");
									}
				    			}
								else
								{
									SendInfoMessage(playerid, 0, "858", "Esta no es su facción");
								}
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "387", "Usted no es líder");
						}
			    	}
					// COMANDO: /Retirar Extorsión
				  	else if (strcmp("/Retirar Extorsión", cmdtext, true, 18) == 0 && strlen(cmdtext) == 18 ||
	                    strcmp("/Retirar Extorsion", cmdtext, true, 18) == 0 && strlen(cmdtext) == 18
					  )
					{
						if ( PlayersDataOnline[playerid][InPickup] >= NegociosData[1][PickupOutId] &&
						     PlayersDataOnline[playerid][InPickup] <= NegociosData[MAX_BIZZ][PickupOutId] )
						{
	                        if ( IsMyExtorsion(playerid, PlayersDataOnline[playerid][MyPickupWorld]) )
	                        {
	                            if ( !IsBizzOnRobo(playerid, PlayersDataOnline[playerid][MyPickupWorld]) )
	                            {
									if ( NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][DepositoExtorsion] > 0 )
									{
							            GivePlayerMoneyEx(playerid, NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][DepositoExtorsion]);

										new MsgExtorsionRatirar[MAX_TEXT_CHAT];
										format(MsgExtorsionRatirar, sizeof(MsgExtorsionRatirar), "Ha retirado $%i extorsionados de este negocio", NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][DepositoExtorsion]);
										SendInfoMessage(playerid, 2, "0", MsgExtorsionRatirar);
										NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][DepositoExtorsion] = 0;
									}
									else
									{
										SendInfoMessage(playerid, 0, "353", "No hay dinero para extorsionar en este negocio");
									}
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "348", "Usted no extorsiona este negocio");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "349", "No te encuentras en ningún negocio");
						}
					}
					// COMANDO: /Retirar Cajero
					else if (strfind(cmdtext, "/Retirar Cajero ", true) == 0)
					{
						ShowRetirarBancoFunction(playerid, true, strval(cmdtext[16]));
			    	}
					// COMANDO: /Retirar Casa
					else if ( strcmp("/Retirar Casa", cmdtext, true, 13) == 0 && strlen(cmdtext) == 13 )
					{
						if ( PlayersDataOnline[playerid][InPickup] >= HouseData[1][PickupId] &&
						     PlayersDataOnline[playerid][InPickup] <= HouseData[MAX_HOUSE][PickupId] )
						{
	                        if ( IsMyHouse(playerid, PlayersDataOnline[playerid][MyPickupWorld]) )
	                        {
								if ( HouseData[PlayersDataOnline[playerid][MyPickupWorld]][Deposito] > 0 )
								{
						            GivePlayerMoneyEx(playerid, HouseData[PlayersDataOnline[playerid][MyPickupWorld]][Deposito]);

									new MsgCasaRatirar[MAX_TEXT_CHAT];
									format(MsgCasaRatirar, sizeof(MsgCasaRatirar), "Ha retirado $%i de ganancias de el alquiler", HouseData[PlayersDataOnline[playerid][MyPickupWorld]][Deposito]);
									SendInfoMessage(playerid, 2, "0", MsgCasaRatirar);
									HouseData[PlayersDataOnline[playerid][MyPickupWorld]][Deposito] = 0;
								}
								else
								{
									SendInfoMessage(playerid, 0, "605", "No hay dinero para retirar del alquiler");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "603", "Esta no es su casa");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "604", "No te encuentras en ninguna casa");
						}
					}
					// COMANDO: /Retirar Negocio
					else if (strfind(cmdtext, "/Retirar Negocio ", true) == 0)
					{
				        if ( PlayersDataOnline[playerid][InPickup] >= NegociosData[1][PickupOutId] &&
				             PlayersDataOnline[playerid][InPickup] <= NegociosData[MAX_BIZZ][PickupOutId] )
				        {
							new BizzId = PlayersDataOnline[playerid][MyPickupWorld];
				            if ( IsMyBizz(playerid, BizzId, true)  )
				            {
								if ( !IsBizzOnRobo(playerid, PlayersDataOnline[playerid][MyPickupWorld]) )
								{
							        if (NegociosData[BizzId][Deposito] >= strval(cmdtext[17]) )
							        {
									    if (IsNotZero(playerid, strval(cmdtext[17])))
									    {
								            NegociosData[BizzId][Deposito] = NegociosData[BizzId][Deposito] - strval(cmdtext[17]);
								            GivePlayerMoneyEx(playerid, strval(cmdtext[17]));

									        new MsgRetirarNegocio[MAX_TEXT_CHAT];
									        format(MsgRetirarNegocio, sizeof(MsgRetirarNegocio), "Ha retirado $%i del negocio, su nuevo saldo es: $%i", strval(cmdtext[17]), NegociosData[BizzId][Deposito]);
							    			SendInfoMessage(playerid, 1, " ", "|___________________  Negocio ___________________|");
							    			SendInfoMessage(playerid, 1, MsgRetirarNegocio, "Negocio: ");
							    			SendInfoMessage(playerid, 1, " ", "|_____________________ Fin ____________________|");
							    		}
							        }
									else
									{
										SendInfoMessage(playerid, 0, "308", "No tienes esa cantidad de dinero para retirar del negocio");
									}
								}
				            }
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "307", "No te encuentras en ningún negocio");
						}
					}
			    	else
			    	{
						SendInfoMessage(playerid, 0, "302", "Quizás quiso decir: /Retirar {Cajero [Cantidad], Negocio [Cantidad], Extorsión, Facción [Cantidad]}");
						SendInfoMessage(playerid, 0, "302", "Quizás quiso decir: /Retirar {Almacén [Cantidad], Casa}");
					}
				}
				// COMANDO: /Depositar
				else if (strfind(cmdtext, "/Depositar", true) == 0)
				{
					// COMANDO: /Depositar Mercancía
				  	if ( strcmp("/Depositar Mercancía", cmdtext, true, 20) == 0 && strlen(cmdtext) == 20 ||
					  	 strcmp("/Depositar Mercancia", cmdtext, true, 20) == 0 && strlen(cmdtext) == 20)
			    	{
					    new MyNearAlmacen = IsPlayerInAlmacen(playerid, true);
					    if ( MyNearAlmacen != -1)
					    {
					        if ( PlayersData[playerid][MyBonus] )
					        {
								new MiValueMateriales;
								if (PlayersData[playerid][Faccion] == CAMIONEROS)
								{
								    MiValueMateriales = 500;
								}
								else if (PlayersData[playerid][Faccion] == CONTRABANDISTAS)
								{
								    MiValueMateriales = 250;
								}
								else if (PlayersData[playerid][Faccion] == TRAFICANTES)
								{
								    MiValueMateriales = 250;
								}

								new MsgDepositarMercancia[MAX_TEXT_CHAT];
				    			SendInfoMessage(playerid, 1, " ", "|___________________  Almacén ___________________|");
								FaccionData[PlayersData[playerid][Faccion]][Almacen][MyNearAlmacen] = FaccionData[PlayersData[playerid][Faccion]][Almacen][MyNearAlmacen] + MiValueMateriales;
						        format(MsgDepositarMercancia, sizeof(MsgDepositarMercancia), "Ha depositado la mercancía y ahora el almacén cuenta con %i de materiales", FaccionData[PlayersData[playerid][Faccion]][Almacen][MyNearAlmacen]);
				    			SendInfoMessage(playerid, 1, MsgDepositarMercancia, "Almacén: ");
				    			SendInfoMessage(playerid, 1, " ", "|_____________________ Fin ____________________|");
								PlayersData[playerid][MyBonus] = false;
							}
							else
							{
									SendInfoMessage(playerid, 0, "780", "No tiene mercancía!");
							}
						}
			    	}
					// COMANDO: /Depositar Mercancía
					else if (strfind(cmdtext, "/Depositar Almacén ", true) == 0 ||
					    	 strfind(cmdtext, "/Depositar Almacen ", true) == 0)
					{
					    new MyNearAlmacen = IsPlayerInAlmacen(playerid, true);
					    if ( MyNearAlmacen != -1 )
					    {
							if ( strval(cmdtext[19]) >= 1 && strval(cmdtext[19]) <= 2000)
					        {
					            if ( PlayersData[playerid][Materiales] >= strval(cmdtext[19]) )
					            {
						            if ( FaccionData[PlayersData[playerid][Faccion]][LockA][MyNearAlmacen] )
						            {
										new MsgDepositarAlmacen[MAX_TEXT_CHAT];
						    			SendInfoMessage(playerid, 1, " ", "|___________________  Almacén ___________________|");
										FaccionData[PlayersData[playerid][Faccion]][Almacen][MyNearAlmacen] = FaccionData[PlayersData[playerid][Faccion]][Almacen][MyNearAlmacen] + strval(cmdtext[19]);
								        format(MsgDepositarAlmacen, sizeof(MsgDepositarAlmacen), "Ha depositado %i de materiales en este almacén, ahora tiene %i de materiales", strval(cmdtext[19]), FaccionData[PlayersData[playerid][Faccion]][Almacen][MyNearAlmacen]);
						    			SendInfoMessage(playerid, 1, MsgDepositarAlmacen, "Almacén: ");
						    			SendInfoMessage(playerid, 1, " ", "|_____________________ Fin ____________________|");
										PlayersData[playerid][Materiales] =  PlayersData[playerid][Materiales] - strval(cmdtext[19]);
									}
									else
									{
										SendInfoMessage(playerid, 0, "904", "Este almacén se encuentra cerrado");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "736", "No tiene esa cantidad de materiales para depositar");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "738", "Mínimo puede depositar 1 de materiales y máximo 2000");
							}
						}
			    	}
					// COMANDO: /Depositar Facción
					else if (strfind(cmdtext, "/Depositar Facción ", true) == 0 ||
						strfind(cmdtext, "/Depositar Faccion ", true) == 0)
					{
		    	        if ( PlayersData[playerid][Rango] == 0 )
		    	        {
						    new MyNearFaccion = GetNearFaccion(playerid);
						    if ( MyNearFaccion != -1 )
						    {
						        if ( MyNearFaccion == PlayersData[playerid][Faccion])
								{
							        if (PlayersData[playerid][Dinero] >= strval(cmdtext[19]) )
							        {
									    if (IsNotZero(playerid, strval(cmdtext[19])))
									    {
								            FaccionData[MyNearFaccion][Deposito] = FaccionData[MyNearFaccion][Deposito] + strval(cmdtext[19]);
								            GivePlayerMoneyEx(playerid, -strval(cmdtext[19]));

									        new MsgDepositarFaccion[MAX_TEXT_CHAT];
									        format(MsgDepositarFaccion, sizeof(MsgDepositarFaccion), "Ha depositado $%i en la facción, su nuevo saldo es: $%i", strval(cmdtext[19]), FaccionData[MyNearFaccion][Deposito]);
							    			SendInfoMessage(playerid, 1, " ", "|___________________  Facción ___________________|");
							    			SendInfoMessage(playerid, 1, MsgDepositarFaccion, "Facción: ");
							    			SendInfoMessage(playerid, 1, " ", "|_____________________ Fin ____________________|");
										}
									}
									else
									{
										SendInfoMessage(playerid, 0, "383", "No tienes esa cantidad de dinero para depositar en la facción");
									}
				    			}
								else
								{
									SendInfoMessage(playerid, 0, "859", "Esta no es su facción");
								}
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "384", "Usted no es líder");
						}
			    	}
					// COMANDO: /Depositar Cajero
					else if (strfind(cmdtext, "/Depositar Cajero ", true) == 0)
					{
						ShowDepositarBancoFunction(playerid, true, strval(cmdtext[18]));
			    	}
					// COMANDO: /Depositar Negocio
					else if (strfind(cmdtext, "/Depositar Negocio ", true) == 0)
					{
				        if ( PlayersDataOnline[playerid][InPickup] >= NegociosData[1][PickupOutId] &&
				             PlayersDataOnline[playerid][InPickup] <= NegociosData[MAX_BIZZ][PickupOutId] )
				        {
							new BizzId = PlayersDataOnline[playerid][MyPickupWorld];
				            if ( IsMyBizz(playerid, BizzId, true)  )
				            {
						        if (PlayersData[playerid][Dinero] >= strval(cmdtext[19]) )
						        {
								    if (IsNotZero(playerid, strval(cmdtext[19])))
								    {
							            NegociosData[BizzId][Deposito] = NegociosData[BizzId][Deposito] + strval(cmdtext[19]);
							            GivePlayerMoneyEx(playerid, -strval(cmdtext[19]));

								        new MsgDepositarNegocio[MAX_TEXT_CHAT];
								        format(MsgDepositarNegocio, sizeof(MsgDepositarNegocio), "Ha depositado $%i del negocio, su nuevo saldo es: $%i", strval(cmdtext[19]), NegociosData[BizzId][Deposito]);
						    			SendInfoMessage(playerid, 1, " ", "|___________________  Negocio ___________________|");
						    			SendInfoMessage(playerid, 1, MsgDepositarNegocio, "Negocio: ");
						    			SendInfoMessage(playerid, 1, " ", "|_____________________ Fin ____________________|");
					    			}
						        }
								else
								{
									SendInfoMessage(playerid, 0, "310", "No tienes esa cantidad de dinero para depositar en el negocio");
								}
				            }
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "309", "No te encuentras en ningún negocio");
						}
					}
			    	else
			    	{
						SendInfoMessage(playerid, 0, "305", "Quizás quiso decir: /Depositar Cajero [Cantidad], Negocio [Cantidad], Facción [Cantidad]}");
					}
				}
				// COMANDO: /Consultar
				else if (strfind(cmdtext, "/Consultar", true) == 0)
				{
					// COMANDO: /Consultar Almacén
				  	if (strcmp("/Consultar Almacén", cmdtext, true, 18) == 0 && strlen(cmdtext) == 18 ||
						strcmp("/Consultar Almacen", cmdtext, true, 18) == 0 && strlen(cmdtext) == 18 )
				    {
						new MyNearAlmacen = IsPlayerInAlmacen(playerid,true);
						if ( MyNearAlmacen != -1 )
						{
					        new MsgConsultarAlmacen[MAX_TEXT_CHAT];
					        new MaterialesAlmacen;
					        new OpenAlmacen;

				            if ( FaccionData[PlayersData[playerid][Faccion]][LockA][MyNearAlmacen] )
				            {
								MaterialesAlmacen = FaccionData[PlayersData[playerid][Faccion]][Almacen][MyNearAlmacen];
								OpenAlmacen = true;
							}
							else
							{
								SendInfoMessage(playerid, 0, "902", "Este almacén se encuentra cerrado");
							}

							if ( OpenAlmacen )
							{
						        format(MsgConsultarAlmacen, sizeof(MsgConsultarAlmacen), "Quedan %i materiales en este almacén", MaterialesAlmacen);
				    			SendInfoMessage(playerid, 1, " ", "|___________________ Almacén ___________________|");
				    			SendInfoMessage(playerid, 1, MsgConsultarAlmacen, "Almacén: ");
				    			SendInfoMessage(playerid, 1, " ", "|_____________________ Fin ____________________|");
			    			}
						}
				    }
					// COMANDO: /Consultar Facción
				  	else if (strcmp("/Consultar Facción", cmdtext, true, 18) == 0 && strlen(cmdtext) == 18 ||
						strcmp("/Consultar Faccion", cmdtext, true, 18) == 0 && strlen(cmdtext) == 18 )
				    {
		    	        if ( PlayersData[playerid][Rango] == 0 )
		    	        {
						    new MyNearFaccion = GetNearFaccion(playerid);
						    if ( MyNearFaccion != -1 )
						    {
						        if ( MyNearFaccion == PlayersData[playerid][Faccion])
								{
							        new MsgConsultarFaccion[MAX_TEXT_CHAT];
							        format(MsgConsultarFaccion, sizeof(MsgConsultarFaccion), "Tiene usted $%i en su facción", FaccionData[MyNearFaccion][Deposito]);
					    			SendInfoMessage(playerid, 1, " ", "|___________________  Facción ___________________|");
					    			SendInfoMessage(playerid, 1, MsgConsultarFaccion, "Facción: ");
					    			SendInfoMessage(playerid, 1, " ", "|_____________________ Fin ____________________|");
				    			}
								else
								{
									SendInfoMessage(playerid, 0, "857", "Esta no es su facción");
								}
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "385", "Usted no es líder");
						}
			    	}
					// COMANDO: /Consultar Cajero
				  	else if (strcmp("/Consultar Cajero", cmdtext, true, 17) == 0 && strlen(cmdtext) == 17)
				    {
					    if ( PlayersData[playerid][IsPlayerInBank] || IsPlayerNearCajero(playerid) != -1 )
					    {
					        new MsgConsultarBanco[MAX_TEXT_CHAT];
					        format(MsgConsultarBanco, sizeof(MsgConsultarBanco), "Tiene usted $%i en su cuenta bancaria", PlayersData[playerid][Banco]);
			    			SendInfoMessage(playerid, 1, " ", "|___________________  Banco ___________________|");
			    			SendInfoMessage(playerid, 1, MsgConsultarBanco, "Banco: ");
			    			SendInfoMessage(playerid, 1, " ", "|_____________________ Fin ____________________|");
						}
			    	}
					// COMANDO: /Consutlar Negocio
				  	else if (strcmp("/Consultar Negocio", cmdtext, true, 18) == 0 && strlen(cmdtext) == 18)
				    {
				        if ( PlayersDataOnline[playerid][InPickup] >= NegociosData[1][PickupOutId] &&
				             PlayersDataOnline[playerid][InPickup] <= NegociosData[MAX_BIZZ][PickupOutId] )
				        {
							new BizzId = PlayersDataOnline[playerid][MyPickupWorld];
				            if ( IsMyBizz(playerid, BizzId, true)  )
				            {
						        new MsgConsultarNegocio[MAX_TEXT_CHAT];
						        format(MsgConsultarNegocio, sizeof(MsgConsultarNegocio), "Tiene usted $%i en el fondo de su negocio", NegociosData[BizzId][Deposito]);
				    			SendInfoMessage(playerid, 1, " ", "|___________________  Negocio ___________________|");
				    			SendInfoMessage(playerid, 1, MsgConsultarNegocio, "Negocio: ");
				    			SendInfoMessage(playerid, 1, " ", "|_____________________ Fin ____________________|");
				            }
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "311", "No te encuentras en ningún negocio");
						}
					}
					// COMANDO: /Consultar Extorsión
				  	else if ( strcmp("/Consultar Casa", cmdtext, true, 15) == 0 && strlen(cmdtext) == 15 )
					{
						if ( PlayersDataOnline[playerid][InPickup] >= HouseData[1][PickupId] &&
						     PlayersDataOnline[playerid][InPickup] <= HouseData[MAX_HOUSE][PickupId] )
						{
	                        if ( IsMyHouse(playerid, PlayersDataOnline[playerid][MyPickupWorld]) )
	                        {
						        new MsgCasaConsultar[MAX_TEXT_CHAT];
						        format(MsgCasaConsultar, sizeof(MsgCasaConsultar), "Tiene $%i ganancias de alquiler en la casa", HouseData[PlayersDataOnline[playerid][MyPickupWorld]][Deposito]);
				    			SendInfoMessage(playerid, 1, " ", "|___________________ Casa ___________________|");
				    			SendInfoMessage(playerid, 1, MsgCasaConsultar, "Casa: ");
				    			SendInfoMessage(playerid, 1, " ", "|_____________________ Fin ____________________|");
							}
							else
							{
								SendInfoMessage(playerid, 0, "602", "Esta no es su casa");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "601", "No te encuentras en ninguna casa");
						}
					}
					// COMANDO: /Consultar Extorsión
				  	else if (strcmp("/Consultar Extorsión", cmdtext, true, 20) == 0 && strlen(cmdtext) == 20 ||
	                    	 strcmp("/Consultar Extorsion", cmdtext, true, 20) == 0 && strlen(cmdtext) == 20
					  )
					{
						if ( PlayersDataOnline[playerid][InPickup] >= NegociosData[1][PickupOutId] &&
						     PlayersDataOnline[playerid][InPickup] <= NegociosData[MAX_BIZZ][PickupOutId] )
						{
	                        if ( strfind(NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][Extorsion], PlayersDataOnline[playerid][NameOnline], false) == 0 && strlen(NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][Extorsion]) == strlen(PlayersDataOnline[playerid][NameOnline]) )
	                        {
						        new MsgExtorsionConsultar[MAX_TEXT_CHAT];
						        format(MsgExtorsionConsultar, sizeof(MsgExtorsionConsultar), "Tiene acumulado $%i de extorsión en este negocio", NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][DepositoExtorsion]);
				    			SendInfoMessage(playerid, 1, " ", "|___________________ Extorsión ___________________|");
				    			SendInfoMessage(playerid, 1, MsgExtorsionConsultar, "Extorsión: ");
				    			SendInfoMessage(playerid, 1, " ", "|_____________________ Fin ____________________|");
							}
							else
							{
								SendInfoMessage(playerid, 0, "355", "Usted no extorsiona este negocio");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "354", "No te encuentras en ningún negocio");
						}
					}
			    	else
			    	{
						SendInfoMessage(playerid, 0, "306", "Quizás quiso decir: /Consultar {Cajero, Negocio, Extorsión, Facción, Casa, Almacén}");
					}
				}
				// COMANDO: /Aparcar
			  	else if (strcmp("/Aparcar", cmdtext, true, 8) == 0 && strlen(cmdtext) == 8)
			    {
					if ( IsPlayerInAnyVehicle(playerid) )
					{
						if ( IsVehicleMyVehicle(playerid, GetPlayerVehicleID(playerid))  )
						{
						    AparcarVehicle(playerid, GetPlayerVehicleID(playerid));
						}
						else
						{
							SendInfoMessage(playerid, 0, "331", "Este no es su vehículo");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "332", "Suba a su vehículo para poder aparcarlo");
					}
			    }
				// COMANDO: /Comprar
		  		else if (strfind(cmdtext, "/Comprar", true) == 0)
			    {
					// COMANDO: /Comprar Ropa
				  	if (strcmp("/Comprar Ropa", cmdtext, true, 13) == 0 && strlen(cmdtext) == 13)
				    {
						if (PlayersData[playerid][IsPlayerInBizz] && strfind(NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][TypeName], "Ropa", false) == 0)
						{
						    if ( IsPlayerInRangeOfPoint(playerid, 2.0, NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInX_PC], NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInY_PC], NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInZ_PC]) )
						    {
								if (PlayersData[playerid][Dinero] >= 50 )
								{
								    if ( NegociosData[PlayersData[playerid][IsPlayerInBizz]][Materiales] >= 2 )
								    {
	                                    SetMoneyExtorsion(PlayersData[playerid][IsPlayerInBizz], 50);
									    GivePlayerMoneyEx(playerid, -50);
										SetPlayerSelectedTypeSkin(playerid, false);
									}
									else
									{
										SendInfoMessage(playerid, 0, "290", "Ésta tienda no tiene materiales");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "291", "No tienes suficiente dinero para comprar ropa, cuesta $50");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "292", "No te encuentras cerca del vestidor");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "293", "No estas en una tienda de ropas");
						}
				    }
					// COMANDO: /Comprar Lentes
				  	else if (strcmp("/Comprar Lentes", cmdtext, true, 15) == 0 && strlen(cmdtext) == 15)
				    {
						if (PlayersData[playerid][IsPlayerInBizz] && strfind(NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][TypeName], "Ropa", false) == 0)
						{
						    if ( IsPlayerInRangeOfPoint(playerid, 2.0, NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInX_PC], NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInY_PC], NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInZ_PC]) )
						    {
								if (PlayersData[playerid][Dinero] >= 100 )
								{
								    if ( NegociosData[PlayersData[playerid][IsPlayerInBizz]][Materiales] >= 2 )
								    {
										if ( IsAllowItSkinForGafas(PlayersData[playerid][Skin]) )
										{
										    if ( IsPlayerNotFullObjects(playerid, true) != -1 )
										    {
			                                    SetMoneyExtorsion(PlayersData[playerid][IsPlayerInBizz], 100);
											    GivePlayerMoneyEx(playerid, -100);
											    PlayersDataOnline[playerid][TypeBuy] = TYPE_GAFAS;
											    SetPlayerSelectedTypeHair(playerid);
										    }
									    }
									    else
									    {
											SendInfoMessage(playerid, 0, "1572", "Con éste skin no puedes usar lentes!");
									    }
									}
									else
									{
										SendInfoMessage(playerid, 0, "1539", "Ésta tienda no tiene materiales");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "1540", "No tienes suficiente dinero para comprar lentes, cuesta $100");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "1541", "No te encuentras cerca del probador");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1542", "No estas en una tienda de lentes");
						}
				    }
					// COMANDO: /Comprar Casco
				  	else if (strcmp("/Comprar Casco", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
				    {
						if (PlayersData[playerid][IsPlayerInBizz] && strfind(NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][TypeName], "Ropa", false) == 0)
						{
						    if ( IsPlayerInRangeOfPoint(playerid, 2.0, NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInX_PC], NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInY_PC], NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInZ_PC]) )
						    {
								if (PlayersData[playerid][Dinero] >= 100 )
								{
								    if ( NegociosData[PlayersData[playerid][IsPlayerInBizz]][Materiales] >= 2 )
								    {
										if ( IsAllowItSkinForCasco(PlayersData[playerid][Skin]) )
										{
										    if ( IsPlayerNotFullObjects(playerid, true) != -1 )
										    {
			                                    SetMoneyExtorsion(PlayersData[playerid][IsPlayerInBizz], 100);
											    GivePlayerMoneyEx(playerid, -100);
											    PlayersDataOnline[playerid][TypeBuy] = TYPE_CASCO;
											    SetPlayerSelectedTypeHair(playerid);
										    }
									    }
									    else
									    {
											SendInfoMessage(playerid, 0, "1576", "Con éste skin no puedes usar cascos!");
									    }
									}
									else
									{
										SendInfoMessage(playerid, 0, "1577", "Ésta tienda no tiene materiales");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "1578", "No tienes suficiente dinero para comprar cascos, cuesta $100");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "1579", "No te encuentras cerca del probador");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1580", "No estas en una tienda de cascos");
						}
				    }
					// COMANDO: /Comprar Reloj
				  	else if (strcmp("/Comprar Reloj", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
				    {
						if (PlayersData[playerid][IsPlayerInBizz] && strfind(NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][TypeName], "Ropa", false) == 0)
						{
						    if ( IsPlayerInRangeOfPoint(playerid, 2.0, NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInX_PC], NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInY_PC], NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInZ_PC]) )
						    {
								if (PlayersData[playerid][Dinero] >= 100 )
								{
								    if ( NegociosData[PlayersData[playerid][IsPlayerInBizz]][Materiales] >= 2 )
								    {
										if ( IsAllowItSkinForRelojes(PlayersData[playerid][Skin]) )
										{
										    if ( IsPlayerNotFullObjects(playerid, true) != -1 )
										    {
			                                    SetMoneyExtorsion(PlayersData[playerid][IsPlayerInBizz], 100);
											    GivePlayerMoneyEx(playerid, -100);
											    PlayersDataOnline[playerid][TypeBuy] = TYPE_RELOJES;
											    SetPlayerSelectedTypeHair(playerid);
										    }
									    }
									    else
									    {
											SendInfoMessage(playerid, 0, "1573", "Con éste skin no puedes usar relojes!");
									    }
									}
									else
									{
										SendInfoMessage(playerid, 0, "1564", "Ésta tienda no tiene materiales");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "1565", "No tienes suficiente dinero para comprar un reloj, cuesta $100");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "1566", "No te encuentras cerca del probador");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1567", "No estas en una tienda de relojes");
						}
				    }
					// COMANDO: /Comprar Gorra
				  	else if (strcmp("/Comprar Gorra", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
				    {
						if (PlayersData[playerid][IsPlayerInBizz] && strfind(NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][TypeName], "Ropa", false) == 0)
						{
						    if ( IsPlayerInRangeOfPoint(playerid, 2.0, NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInX_PC], NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInY_PC], NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInZ_PC]) )
						    {
								if (PlayersData[playerid][Dinero] >= 100 )
								{
								    if ( NegociosData[PlayersData[playerid][IsPlayerInBizz]][Materiales] >= 2 )
								    {
										if ( IsAllowItSkinForGorras(PlayersData[playerid][Skin]) )
										{
										    if ( IsPlayerNotFullObjects(playerid, true) != -1 )
										    {
			                                    SetMoneyExtorsion(PlayersData[playerid][IsPlayerInBizz], 100);
											    GivePlayerMoneyEx(playerid, -100);
											    PlayersDataOnline[playerid][TypeBuy] = TYPE_GORRAS;
											    SetPlayerSelectedTypeHair(playerid);
										    }
									    }
									    else
									    {
											SendInfoMessage(playerid, 0, "1574", "Con éste skin no puedes usar gorras!");
									    }
									}
									else
									{
										SendInfoMessage(playerid, 0, "1569", "Ésta tienda no tiene materiales");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "1568", "No tienes suficiente dinero para comprar una gorra, cuesta $100");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "1570", "No te encuentras cerca del probador");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1571", "No estas en una tienda de gorras");
						}
				    }
					// COMANDO: /Comprar Boina
				  	else if (strcmp("/Comprar Boina", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
				    {
						if (PlayersData[playerid][IsPlayerInBizz] && NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type] >= 27 && NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type] <= 29 )
						{
						    if ( IsPlayerInRangeOfPoint(playerid, 2.0, NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInX_PC], NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInY_PC], NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInZ_PC]) )
						    {
								if (PlayersData[playerid][Dinero] >= 150 )
								{
								    if ( NegociosData[PlayersData[playerid][IsPlayerInBizz]][Materiales] >= 2 )
								    {
										if ( IsAllowItSkinForBoina(PlayersData[playerid][Skin]) )
										{
											if ( IsPlayerNotFullObjects(playerid, true) != -1 )
											{
			                                    SetMoneyExtorsion(PlayersData[playerid][IsPlayerInBizz], 150);
											    GivePlayerMoneyEx(playerid, -150);
											    PlayersDataOnline[playerid][TypeBuy] = TYPE_BOINA;
											    SetPlayerSelectedTypeHair(playerid);
										    }
									    }
									    else
									    {
											SendInfoMessage(playerid, 0, "1558", "Con éste skin no puedes usar boinas!");
									    }
									}
									else
									{
										SendInfoMessage(playerid, 0, "1559", "Ésta barbería no tiene materiales");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "1560", "No tienes suficiente dinero para darte comprar una boina, cuesta $150");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "1561", "No te encuentras en el lugar para comprar boinas!");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1562", "No estas en una barbería");
						}
				    }
					// COMANDO: /Comprar Peluca
				  	else if (strcmp("/Comprar Peluca", cmdtext, true, 15) == 0 && strlen(cmdtext) == 15)
				    {
						if (PlayersData[playerid][IsPlayerInBizz] && NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type] >= 27 && NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type] <= 29 )
						{
						    if ( IsPlayerInRangeOfPoint(playerid, 2.0, NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInX_PC], NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInY_PC], NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInZ_PC]) )
						    {
								if (PlayersData[playerid][Dinero] >= 150 )
								{
								    if ( NegociosData[PlayersData[playerid][IsPlayerInBizz]][Materiales] >= 2 )
								    {
										if ( IsAllowItSkinForHair(PlayersData[playerid][Skin]) )
										{
										    if ( IsPlayerNotFullObjects(playerid, true) != -1 )
										    {
			                                    SetMoneyExtorsion(PlayersData[playerid][IsPlayerInBizz], 150);
											    GivePlayerMoneyEx(playerid, -150);
											    PlayersDataOnline[playerid][TypeBuy] = TYPE_PELO;
											    SetPlayerSelectedTypeHair(playerid);
										    }
									    }
									    else
									    {
											SendInfoMessage(playerid, 0, "1543", "Con éste skin no puedes usar pelucas!");
									    }
									}
									else
									{
										SendInfoMessage(playerid, 0, "1544", "Ésta barbería no tiene materiales");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "1545", "No tienes suficiente dinero para darte comprar una peluca, cuesta $150");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "1546", "No te encuentras en el lugar para comprar pelucas!");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1547", "No estas en una barbería");
						}
				    }
				  	else if (strcmp("/Comprar Casa", cmdtext, true, 13) == 0 && strlen(cmdtext) == 13)
				    {
				        if ( PlayersDataOnline[playerid][InPickup] >= HouseData[1][PickupId] &&
				             PlayersDataOnline[playerid][InPickup] <= HouseData[MAX_HOUSE][PickupId] )
				        {
							new HouseId = PlayersDataOnline[playerid][MyPickupWorld];
				            if ( strlen(HouseData[HouseId][Dueno]) == 2 )
				            {
							    if ( PlayersData[playerid][House] == -1 && PlayersData[playerid][Alquiler] == -1 )
							    {
					                if ( GetPlayerScore(playerid) >= HouseData[HouseId][Level] )
					                {
										if (PlayersData[playerid][Dinero] >= HouseData[HouseId][Price] )
										{
			                                format(HouseData[HouseId][Dueno], MAX_PLAYER_NAME, "%s", PlayersDataOnline[playerid][NameOnline]);
			                                GivePlayerMoneyEx(playerid, -HouseData[HouseId][Price]);
			                                SaveHouse(HouseId, true);
			                                GameTextForPlayer(playerid, "~B~Has ~G~comprado una Casa!", 2000, 0);
			                                PlayersData[playerid][House] = HouseId;
			                                PlayersData[playerid][Alquiler] = -1;
										}
										else
										{
											SendInfoMessage(playerid, 0, "588", "No tienes suficiente dinero para comprar esta Casa!");
										}
									}
									else
									{
										SendInfoMessage(playerid, 0, "589", "No tiene suficiente nivel para comprar esta casa");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "590", "Debe vender o salir de su actual alquiler de la casa donde vive, para poder comprar esta");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "591", "Esta casa ya tiene dueño");
							}
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "592", "No te encuentras en ninguna casa");
						}
					}
					// COMANDO: /Comprar Negocio
				  	else if (strcmp("/Comprar Negocio", cmdtext, true, 16) == 0 && strlen(cmdtext) == 16)
				    {
				        if ( PlayersDataOnline[playerid][InPickup] >= NegociosData[1][PickupOutId] &&
				             PlayersDataOnline[playerid][InPickup] <= NegociosData[MAX_BIZZ][PickupOutId] )
				        {
							new BizzId = PlayersDataOnline[playerid][MyPickupWorld];
				            if ( strlen(NegociosData[BizzId][Dueno]) == 1 )
				            {
				                if ( GetPlayerScore(playerid) >= NegociosData[BizzId][Level] )
				                {
									if (PlayersData[playerid][Dinero] >= NegociosData[BizzId][Precio] )
									{
		                                format(NegociosData[BizzId][Dueno], MAX_PLAYER_NAME, "%s", PlayersDataOnline[playerid][NameOnline]);
		                                format(NegociosData[BizzId][Extorsion], MAX_PLAYER_NAME, "No");
		                                GivePlayerMoneyEx(playerid, -NegociosData[BizzId][Precio]);
		                                DataSaveBizz(BizzId, true);
		                                GameTextForPlayer(playerid, "~B~Has ~G~comprado un negocio!", 2000, 0);
									}
									else
									{
										SendInfoMessage(playerid, 0, "296", "No tienes suficiente dinero para comprar este negocio");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "611", "No tiene suficiente nivel para comprar éste negocio");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "297", "Este negocio ya tiene dueño");
							}
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "298", "No te encuentras en ningún negocio");
						}
					}
					// COMANDO: /Comprar Agua
				  	else if (strcmp("/Comprar Agua", cmdtext, true, 13) == 0 && strlen(cmdtext) == 13)
				    {
						if ( PlayersData[playerid][IsPlayerInBizz] && IsBizzBar(playerid, NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]) )
						{
						    if ( IsPlayerInRangeOfPoint(playerid, 3.0, NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInX_PC], NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInY_PC], NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInZ_PC]) )
						    {
								if (PlayersData[playerid][Dinero] >= 5 )
								{
								    if ( NegociosData[PlayersData[playerid][IsPlayerInBizz]][Materiales] >= 2 )
								    {
								    	SetBuyBares(playerid, 0, true);
									}
									else
									{
										SendInfoMessage(playerid, 0, "424", "Este bar no tiene materiales");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "425", "No tienes suficiente dinero para comprar agua, cuesta $5");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "426", "No te encuentras cerca del la barra");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "427", "No estas en un bar");
						}
					}
					// COMANDO: /Comprar Refresco
				  	else if (strcmp("/Comprar Refresco", cmdtext, true, 18) == 0 && strlen(cmdtext) == 17)
				    {
						if ( PlayersData[playerid][IsPlayerInBizz] && IsBizzBar(playerid, NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]) )
						{
						    if ( IsPlayerInRangeOfPoint(playerid, 3.0, NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInX_PC], NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInY_PC], NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInZ_PC]) )
						    {
								if (PlayersData[playerid][Dinero] >= 10 )
								{
								    if ( NegociosData[PlayersData[playerid][IsPlayerInBizz]][Materiales] >= 2 )
								    {
	   							        SetBuyBares(playerid, 1, true);
									}
									else
									{
										SendInfoMessage(playerid, 0, "428", "Este bar no tiene materiales");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "429", "No tienes suficiente dinero para comprar un regfresco, cuesta $10");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "430", "No te encuentras cerca del la barra");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "431", "No estas en un bar");
						}
					}
					else if (strcmp("/Comprar Cerveza", cmdtext, true, 16) == 0 && strlen(cmdtext) == 16)
				    {
						if ( PlayersData[playerid][IsPlayerInBizz] && IsBizzBar(playerid, NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]) )
						{
						    if ( IsPlayerInRangeOfPoint(playerid, 3.0, NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInX_PC], NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInY_PC], NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInZ_PC]) )
						    {
								if (PlayersData[playerid][Dinero] >= 15 )
								{
								    if ( NegociosData[PlayersData[playerid][IsPlayerInBizz]][Materiales] >= 2 )
								    {
								        SetBuyBares(playerid, 2, true);
									}
									else
									{
										SendInfoMessage(playerid, 0, "432", "Este bar no tiene materiales");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "433", "No tienes suficiente dinero para comprar una cerveza, cuesta $5");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "434", "No te encuentras cerca del la barra");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "435", "No estas en un bar");
						}
				    }
					else if (strcmp("/Comprar Vodka", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
				    {
						if ( PlayersData[playerid][IsPlayerInBizz] && IsBizzBar(playerid, NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]) )
						{
						    if ( IsPlayerInRangeOfPoint(playerid, 3.0, NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInX_PC], NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInY_PC], NegociosType[NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type]][PosInZ_PC]) )
						    {
								if (PlayersData[playerid][Dinero] >= 20 )
								{
								    if ( NegociosData[PlayersData[playerid][IsPlayerInBizz]][Materiales] >= 2 )
								    {
								        SetBuyBares(playerid, 3, true);
									}
									else
									{
										SendInfoMessage(playerid, 0, "436", "Este bar no tiene materiales");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "437", "No tienes suficiente dinero para comprar una botella de Vodka, cuesta $20");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "438", "No te encuentras cerca del la barra");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "439", "No estas en un bar");
						}
				    }
				    else
				    {
						SendInfoMessage(playerid, 0, "440", "Quizás quiso decir: /Comprar {Ropa, Negocio, Agua, Vodka, Refresco, Cerveza, Casa, Peluca, Lentes, Boina, Gorra, Reloj, Casco}");
					}
			    }
			    // /Contrato [ID] [Precio]
	  			else if (strfind(cmdtext, "/Contrato ", true) == 0)
			    {
			        //
					new PlayeridSplit[5], MoneySplit[10];
					new fPos;
					fPos = strfind(cmdtext, " ", false, 11);
					strmid(PlayeridSplit, cmdtext, 10, fPos);
					strmid(MoneySplit, cmdtext, fPos, strlen(cmdtext));

				    if ( IsPlayerNear(playerid, strval(PlayeridSplit),
						 "564",
						 "563",
						 "562",
						 "El jugador que le deseas hacerle un contrato no se encuentra conectado",
						 "El jugador que le deseas hacerle un contrato no se ha logueado",
						 "El jugador que le deseas hacerle un contrato no se encuentra cerca de tí") )
				    {
				        if ( strval(MoneySplit) >= 1000 )
				        {
							new MsgContrato[MAX_TEXT_CHAT];
							new MsgContratoToPlayer[MAX_TEXT_CHAT];
							format(MsgContrato, sizeof(MsgContrato), "Has dado un contrato a %s, donde acuerdas el monto de $%i en el, espera que firme", PlayersDataOnline[strval(PlayeridSplit)][NameOnlineFix], strval(MoneySplit));
							format(MsgContratoToPlayer, sizeof(MsgContratoToPlayer), "Has recibido un contrato de %s, donde acuerda el monto de $%i, usa (/Aceptar Contrato), para finalizarlo", PlayersDataOnline[playerid][NameOnlineFix], strval(MoneySplit));

							SendInfoMessage(playerid, 3, "0", MsgContrato);
							SendInfoMessage(strval(PlayeridSplit),3, "0", MsgContratoToPlayer);
							PlayersDataOnline[strval(PlayeridSplit)][Contrato][0] = playerid;
							PlayersDataOnline[strval(PlayeridSplit)][Contrato][1] = strval(MoneySplit);
						}
						else
						{
							SendInfoMessage(playerid, 0, "561", "La cantidad mínima para un contrato es $1000");
						}
				    }
			    }
				// COMANDO: (Quitar
		  		else if (strfind(cmdtext, "/Quitar", true) == 0)
			    {
					// COMANDO: /Quitar Licencia [Tipo] [ID]
			  		if (strfind(cmdtext, "/Quitar Arma ", true) == 0)
				    {
					    if ( IsPlayerNear(playerid, strval(cmdtext[13]),
							 "774",
							 "775",
							 "776",
							 "El jugador que le deseas quitarle el arma no se encuentra conectado",
							 "El jugador que le deseas quitarle el arma no se ha logueado",
							 "El jugador que le deseas quitarle el arma no se encuentra cerca de tí") )
					    {
							new QuitarWeapons, QuitarAmmo; QuitarWeapons = GetPlayerWeapon(strval(cmdtext[13])); QuitarAmmo = GetPlayerAmmo(strval(cmdtext[13]));
					        if ( CheckWeapondCheat(playerid) && CheckWeapondCheat(strval(cmdtext[13])) && QuitarWeapons != 0 )
					        {
								if ( IsPlayerNotVehicleWeapondAction(playerid, strval(cmdtext[13])) )
								{
							        new MsgQuitarArmaIntentar[MAX_TEXT_CHAT];
							        format(MsgQuitarArmaIntentar, sizeof(MsgQuitarArmaIntentar), "quitar el arma a %s", PlayersDataOnline[strval(cmdtext[13])][NameOnlineFix]);
									if (IntentarAccion(playerid, MsgQuitarArmaIntentar, random(2)))
									{
										RemovePlayerWeapond(strval(cmdtext[13]), QuitarWeapons);
			                            GivePlayerWeaponEx(playerid, QuitarWeapons, QuitarAmmo);
									}
								}
					        }
					        else
					        {
								SendInfoMessage(playerid, 0, "773", "Este jugador no tiene ningún arma en las manos!");
							}
					    }
				    }
					// COMANDO: /Quitar Licencia [Tipo] [ID]
			  		else if (strfind(cmdtext, "/Quitar Licencia ", true) == 0)
				    {
						if ( PlayersData[playerid][Faccion] == LSPD ||
							 PlayersData[playerid][Faccion] == SFPD)
					    {
							// COMANDO: /Quitar Licencia Armas [ID]
					  		if (strfind(cmdtext, "/Quitar Licencia Armas ", true) == 0) // 17
						    {
							    if ( IsPlayerNear(playerid, strval(cmdtext[23]),
									 "546",
									 "545",
									 "544",
									 "El jugador que le deseas quitarle la licencia de Armas no se encuentra conectado",
									 "El jugador que le deseas quitarle la licencia de Armas no se ha logueado",
									 "El jugador que le deseas quitarle la licencia de Armas no se encuentra cerca de tí") )
							    {
							        if ( PlayersData[strval(cmdtext[23])][Licencias][0] )
							        {
										new MsgQuitarLicenciaMe[MAX_TEXT_CHAT];
										new MsgQuitarLicenciaInfo[MAX_TEXT_CHAT];
										new MsgQuitarLicenciaInfoToPlayer[MAX_TEXT_CHAT];
										format(MsgQuitarLicenciaMe, sizeof(MsgQuitarLicenciaMe), "le quitó la licencia de Armas a %s", PlayersDataOnline[strval(cmdtext[23])][NameOnlineFix]);
										format(MsgQuitarLicenciaInfo, sizeof(MsgQuitarLicenciaInfo), "Le has quitado la licenciad de Armas a %s", PlayersDataOnline[strval(cmdtext[23])][NameOnlineFix]);
										format(MsgQuitarLicenciaInfoToPlayer, sizeof(MsgQuitarLicenciaInfoToPlayer), "%s te ha quitado la licencia de Armas", PlayersDataOnline[playerid][NameOnlineFix]);

										Acciones(playerid, 8, MsgQuitarLicenciaMe);
										SendInfoMessage(playerid, 3, "0", MsgQuitarLicenciaInfo);
										SendInfoMessage(strval(cmdtext[23]),3, "0", MsgQuitarLicenciaInfoToPlayer);

										PlayersData[strval(cmdtext[23])][Licencias][0] = false;
									}
									else
									{
										SendInfoMessage(playerid, 0, "543", "Este jugador no tiene licencia de Armas!");
									}
							    }
						    }
							// COMANDO: /Quitar Licencia Coche [ID]
					  		else if (strfind(cmdtext, "/Quitar Licencia Coche ", true) == 0) // 17
						    {
							    if ( IsPlayerNear(playerid, strval(cmdtext[23]),
									 "542",
									 "541",
									 "540",
									 "El jugador que le deseas quitarle la licencia de Coche no se encuentra conectado",
									 "El jugador que le deseas quitarle la licencia de Coche no se ha logueado",
									 "El jugador que le deseas quitarle la licencia de Coche no se encuentra cerca de tí") )
							    {
							        if ( PlayersData[strval(cmdtext[23])][Licencias][1] )
							        {
										new MsgQuitarLicenciaMe[MAX_TEXT_CHAT];
										new MsgQuitarLicenciaInfo[MAX_TEXT_CHAT];
										new MsgQuitarLicenciaInfoToPlayer[MAX_TEXT_CHAT];
										format(MsgQuitarLicenciaMe, sizeof(MsgQuitarLicenciaMe), "le quitó la licencia de Coche a %s", PlayersDataOnline[strval(cmdtext[23])][NameOnlineFix]);
										format(MsgQuitarLicenciaInfo, sizeof(MsgQuitarLicenciaInfo), "Le has quitado la licenciad de Coche a %s", PlayersDataOnline[strval(cmdtext[23])][NameOnlineFix]);
										format(MsgQuitarLicenciaInfoToPlayer, sizeof(MsgQuitarLicenciaInfoToPlayer), "%s te ha quitado la licencia de Coche", PlayersDataOnline[playerid][NameOnlineFix]);

										Acciones(playerid, 8, MsgQuitarLicenciaMe);
										SendInfoMessage(playerid, 3, "0", MsgQuitarLicenciaInfo);
										SendInfoMessage(strval(cmdtext[23]),3, "0", MsgQuitarLicenciaInfoToPlayer);

										PlayersData[strval(cmdtext[23])][Licencias][1] = false;
									}
									else
									{
										SendInfoMessage(playerid, 0, "539", "Este jugador no tiene licencia de coche!");
									}
							    }
						    }
							// COMANDO: /Quitar Licencia Tren [ID]
					  		else if (strfind(cmdtext, "/Quitar Licencia Tren ", true) == 0) // 17
						    {
							    if ( IsPlayerNear(playerid, strval(cmdtext[22]),
									 "1051",
									 "1050",
									 "1048",
									 "El jugador que le deseas quitarle la licencia de Tren no se encuentra conectado",
									 "El jugador que le deseas quitarle la licencia de Tren no se ha logueado",
									 "El jugador que le deseas quitarle la licencia de Tren no se encuentra cerca de tí") )
							    {
							        if ( PlayersData[strval(cmdtext[22])][Licencias][1] )
							        {
										new MsgQuitarLicenciaMe[MAX_TEXT_CHAT];
										new MsgQuitarLicenciaInfo[MAX_TEXT_CHAT];
										new MsgQuitarLicenciaInfoToPlayer[MAX_TEXT_CHAT];
										format(MsgQuitarLicenciaMe, sizeof(MsgQuitarLicenciaMe), "le quitó la licencia de Tren a %s", PlayersDataOnline[strval(cmdtext[22])][NameOnlineFix]);
										format(MsgQuitarLicenciaInfo, sizeof(MsgQuitarLicenciaInfo), "Le has quitado la licenciad de Tren a %s", PlayersDataOnline[strval(cmdtext[22])][NameOnlineFix]);
										format(MsgQuitarLicenciaInfoToPlayer, sizeof(MsgQuitarLicenciaInfoToPlayer), "%s te ha quitado la licencia de Tren", PlayersDataOnline[playerid][NameOnlineFix]);

										Acciones(playerid, 8, MsgQuitarLicenciaMe);
										SendInfoMessage(playerid, 3, "0", MsgQuitarLicenciaInfo);
										SendInfoMessage(strval(cmdtext[22]),3, "0", MsgQuitarLicenciaInfoToPlayer);

										PlayersData[strval(cmdtext[22])][Licencias][6] = false;
									}
									else
									{
										SendInfoMessage(playerid, 0, "1047", "Este jugador no tiene licencia de tren!");
									}
							    }
						    }

							// COMANDO: /Quitar Licencia Camión [ID]
					  		else if (strfind(cmdtext, "/Quitar Licencia Camión ", true) == 0 ||
							  		 strfind(cmdtext, "/Quitar Licencia Camion ", true) == 0) // 17
						    {
							    if ( IsPlayerNear(playerid, strval(cmdtext[24]),
									 "538",
									 "537",
									 "536",
									 "El jugador que le deseas quitarle la licencia de Camión no se encuentra conectado",
									 "El jugador que le deseas quitarle la licencia de Camión no se ha logueado",
									 "El jugador que le deseas quitarle la licencia de Camión no se encuentra cerca de tí") )
							    {
							        if ( PlayersData[strval(cmdtext[24])][Licencias][2] )
							        {
										new MsgQuitarLicenciaMe[MAX_TEXT_CHAT];
										new MsgQuitarLicenciaInfo[MAX_TEXT_CHAT];
										new MsgQuitarLicenciaInfoToPlayer[MAX_TEXT_CHAT];
										format(MsgQuitarLicenciaMe, sizeof(MsgQuitarLicenciaMe), "le quitó la licencia de Camión a %s", PlayersDataOnline[strval(cmdtext[24])][NameOnlineFix]);
										format(MsgQuitarLicenciaInfo, sizeof(MsgQuitarLicenciaInfo), "Le has quitado la licenciad de Camión a %s", PlayersDataOnline[strval(cmdtext[24])][NameOnlineFix]);
										format(MsgQuitarLicenciaInfoToPlayer, sizeof(MsgQuitarLicenciaInfoToPlayer), "%s te ha quitado la licencia de Camión", PlayersDataOnline[playerid][NameOnlineFix]);

										Acciones(playerid, 8, MsgQuitarLicenciaMe);
										SendInfoMessage(playerid, 3, "0", MsgQuitarLicenciaInfo);
										SendInfoMessage(strval(cmdtext[24]),3, "0", MsgQuitarLicenciaInfoToPlayer);

										PlayersData[strval(cmdtext[24])][Licencias][2] = false;
									}
									else
									{
										SendInfoMessage(playerid, 0, "535", "Este jugador no tiene licencia de Camión!");
									}
							    }
						    }
							// COMANDO: /Quitar Licencia Moto [ID]
					  		else if (strfind(cmdtext, "/Quitar Licencia Moto ", true) == 0) // 17
						    {
							    if ( IsPlayerNear(playerid, strval(cmdtext[22]),
									 "534",
									 "533",
									 "532",
									 "El jugador que le deseas quitarle la licencia de Moto no se encuentra conectado",
									 "El jugador que le deseas quitarle la licencia de Moto no se ha logueado",
									 "El jugador que le deseas quitarle la licencia de Moto no se encuentra cerca de tí") )
							    {
							        if ( PlayersData[strval(cmdtext[22])][Licencias][3] )
							        {
										new MsgQuitarLicenciaMe[MAX_TEXT_CHAT];
										new MsgQuitarLicenciaInfo[MAX_TEXT_CHAT];
										new MsgQuitarLicenciaInfoToPlayer[MAX_TEXT_CHAT];
										format(MsgQuitarLicenciaMe, sizeof(MsgQuitarLicenciaMe), "le quitó la licencia de Moto a %s", PlayersDataOnline[strval(cmdtext[22])][NameOnlineFix]);
										format(MsgQuitarLicenciaInfo, sizeof(MsgQuitarLicenciaInfo), "Le has quitado la licenciad de Moto a %s", PlayersDataOnline[strval(cmdtext[22])][NameOnlineFix]);
										format(MsgQuitarLicenciaInfoToPlayer, sizeof(MsgQuitarLicenciaInfoToPlayer), "%s te ha quitado la licencia de Moto", PlayersDataOnline[playerid][NameOnlineFix]);

										Acciones(playerid, 8, MsgQuitarLicenciaMe);
										SendInfoMessage(playerid, 3, "0", MsgQuitarLicenciaInfo);
										SendInfoMessage(strval(cmdtext[22]),3, "0", MsgQuitarLicenciaInfoToPlayer);

										PlayersData[strval(cmdtext[22])][Licencias][3] = false;
									}
									else
									{
										SendInfoMessage(playerid, 0, "531", "Este jugador no tiene licencia de moto!");
									}
							    }
						    }
							// COMANDO: /Quitar Licencia Vuelo [ID]
					  		else if (strfind(cmdtext, "/Quitar Licencia Vuelo ", true) == 0) // 17
						    {
							    if ( IsPlayerNear(playerid, strval(cmdtext[23]),
									 "530",
									 "529",
									 "528",
									 "El jugador que le deseas quitarle la licencia de Vuelo no se encuentra conectado",
									 "El jugador que le deseas quitarle la licencia de Vuelo no se ha logueado",
									 "El jugador que le deseas quitarle la licencia de Vuelo no se encuentra cerca de tí") )
							    {
							        if ( PlayersData[strval(cmdtext[23])][Licencias][4] )
							        {
										new MsgQuitarLicenciaMe[MAX_TEXT_CHAT];
										new MsgQuitarLicenciaInfo[MAX_TEXT_CHAT];
										new MsgQuitarLicenciaInfoToPlayer[MAX_TEXT_CHAT];
										format(MsgQuitarLicenciaMe, sizeof(MsgQuitarLicenciaMe), "le quitó la licencia de Vuelo a %s", PlayersDataOnline[strval(cmdtext[23])][NameOnlineFix]);
										format(MsgQuitarLicenciaInfo, sizeof(MsgQuitarLicenciaInfo), "Le has quitado la licenciad de Vuelo a %s", PlayersDataOnline[strval(cmdtext[23])][NameOnlineFix]);
										format(MsgQuitarLicenciaInfoToPlayer, sizeof(MsgQuitarLicenciaInfoToPlayer), "%s te ha quitado la licencia de Vuelo", PlayersDataOnline[playerid][NameOnlineFix]);

										Acciones(playerid, 8, MsgQuitarLicenciaMe);
										SendInfoMessage(playerid, 3, "0", MsgQuitarLicenciaInfo);
										SendInfoMessage(strval(cmdtext[23]),3, "0", MsgQuitarLicenciaInfoToPlayer);

										PlayersData[strval(cmdtext[23])][Licencias][4] = false;
									}
									else
									{
										SendInfoMessage(playerid, 0, "527", "Este jugador no tiene licencia de Vuelo!");
									}
							    }
						    }
							// COMANDO: /Quitar Licencia Bote [ID]
					  		else if (strfind(cmdtext, "/Quitar Licencia Bote ", true) == 0) // 17
						    {
							    if ( IsPlayerNear(playerid, strval(cmdtext[22]),
									 "526",
									 "525",
									 "524",
									 "El jugador que le deseas quitarle la licencia de Bote no se encuentra conectado",
									 "El jugador que le deseas quitarle la licencia de Bote no se ha logueado",
									 "El jugador que le deseas quitarle la licencia de Bote no se encuentra cerca de tí") )
							    {
							        if ( PlayersData[strval(cmdtext[22])][Licencias][5] )
							        {
										new MsgQuitarLicenciaMe[MAX_TEXT_CHAT];
										new MsgQuitarLicenciaInfo[MAX_TEXT_CHAT];
										new MsgQuitarLicenciaInfoToPlayer[MAX_TEXT_CHAT];
										format(MsgQuitarLicenciaMe, sizeof(MsgQuitarLicenciaMe), "le quitó la licencia de Bote a %s", PlayersDataOnline[strval(cmdtext[22])][NameOnlineFix]);
										format(MsgQuitarLicenciaInfo, sizeof(MsgQuitarLicenciaInfo), "Le has quitado la licenciad de Bote a %s", PlayersDataOnline[strval(cmdtext[22])][NameOnlineFix]);
										format(MsgQuitarLicenciaInfoToPlayer, sizeof(MsgQuitarLicenciaInfoToPlayer), "%s te ha quitado la licencia de Bote", PlayersDataOnline[playerid][NameOnlineFix]);

										Acciones(playerid, 8, MsgQuitarLicenciaMe);
										SendInfoMessage(playerid, 3, "0", MsgQuitarLicenciaInfo);
										SendInfoMessage(strval(cmdtext[22]),3, "0", MsgQuitarLicenciaInfoToPlayer);

										PlayersData[strval(cmdtext[22])][Licencias][5] = false;
									}
									else
									{
										SendInfoMessage(playerid, 0, "522", "Este jugador no tiene licencia de Bote!");
									}
							    }
						    }
							// COMANDO: /Quitar Licencia Pesca [ID]
					  		else if (strfind(cmdtext, "/Quitar Licencia Pesca ", true) == 0) // 17
						    {
							    if ( IsPlayerNear(playerid, strval(cmdtext[23]),
									 "521",
									 "520",
									 "519",
									 "El jugador que le deseas quitarle la licencia de Pesca no se encuentra conectado",
									 "El jugador que le deseas quitarle la licencia de Pesca no se ha logueado",
									 "El jugador que le deseas quitarle la licencia de Pesca no se encuentra cerca de tí") )
							    {
							        if ( PlayersData[strval(cmdtext[23])][Licencias][6] )
							        {
										new MsgQuitarLicenciaMe[MAX_TEXT_CHAT];
										new MsgQuitarLicenciaInfo[MAX_TEXT_CHAT];
										new MsgQuitarLicenciaInfoToPlayer[MAX_TEXT_CHAT];
										format(MsgQuitarLicenciaMe, sizeof(MsgQuitarLicenciaMe), "le quitó la licencia de Pesca a %s", PlayersDataOnline[strval(cmdtext[23])][NameOnlineFix]);
										format(MsgQuitarLicenciaInfo, sizeof(MsgQuitarLicenciaInfo), "Le has quitado la licenciad de Pesca a %s", PlayersDataOnline[strval(cmdtext[23])][NameOnlineFix]);
										format(MsgQuitarLicenciaInfoToPlayer, sizeof(MsgQuitarLicenciaInfoToPlayer), "%s te ha quitado la licencia de Pesca", PlayersDataOnline[playerid][NameOnlineFix]);

										Acciones(playerid, 8, MsgQuitarLicenciaMe);
										SendInfoMessage(playerid, 3, "0", MsgQuitarLicenciaInfo);
										SendInfoMessage(strval(cmdtext[23]),3, "0", MsgQuitarLicenciaInfoToPlayer);

										PlayersData[strval(cmdtext[23])][LicenciaPesca] = false;
									}
									else
									{
										SendInfoMessage(playerid, 0, "518", "Este jugador no tiene licencia de Pesca!");
									}
							    }
						    }
							else
							{
								SendInfoMessage(playerid, 0, "517", "Quizás quiso decir: /Quitar Licencia {Armas [ID], Coche [ID], Camión [ID], Moto [ID], Vuelo [ID], Bote [ID], Pesca [ID], Tren [ID]}");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "522", "Usted no es LSPD ni SFPD");
						}
					}
					// COMANDO: /Quitar Extorsión [ID]
			  		else if (strfind(cmdtext, "/Quitar Extorsión ", true) == 0 || strfind(cmdtext, "/Quitar Extorsion ", true) == 0)
				    {
				        if ( PlayersDataOnline[playerid][InPickup] >= NegociosData[1][PickupOutId] &&
				             PlayersDataOnline[playerid][InPickup] <= NegociosData[MAX_BIZZ][PickupOutId] )
				        {
				            if ( IsMyBizz(playerid, PlayersDataOnline[playerid][MyPickupWorld], true)  )
				            {
							    if ( IsPlayerNear(playerid, strval(cmdtext[18]),
									 "343",
									 "344",
									 "345",
									 "El jugador que le deseas quitarle el poder de extorsión de su negocio no se encuentra conectado",
									 "El jugador que le deseas quitarle el poder de extorsión de su negocio no se ha logueado",
									 "El jugador que le deseas quitarle el poder de extorsión de su negocio no se encuentra cerca de tí") )
							    {
		                            if ( IsMyExtorsion(strval(cmdtext[18]), PlayersDataOnline[playerid][MyPickupWorld]) )
		                            {
									    format(NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][Extorsion], MAX_PLAYER_NAME, "No");
										new MsgToMe[MAX_TEXT_CHAT];
										new MsgToExtorsionista[MAX_TEXT_CHAT];
										format(MsgToMe, sizeof(MsgToMe), "Has dado el poder de extorsión de este negocio a %s", PlayersDataOnline[strval(cmdtext[18])][NameOnlineFix]);
										format(MsgToExtorsionista, sizeof(MsgToExtorsionista), "%s te ha dado el poder de extorsionarle este negocio", PlayersDataOnline[playerid][NameOnlineFix]);
										SendInfoMessage(playerid, 3, "0", MsgToMe);
										SendInfoMessage(strval(cmdtext[18]), 3, "0", MsgToExtorsionista);
										ActTextDrawBizz(PlayersDataOnline[playerid][MyPickupWorld]);
									}
									else
									{
										SendInfoMessage(playerid, 0, "350", "Este jugador no es extorsionista de su negocio");
									}
							    }
				            }
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "351", "No te encuentras en ningún negocio");
						}
				    }
				    else
				    {
						SendInfoMessage(playerid, 0, "346", "Quizás quiso decir: /Quitar Extorsión [ID]");
					}
			    }
				// COMANDO: /Finalizar Entrevista
				else if (strcmp("/Finalizar Entrevista", cmdtext, true, 21) == 0 && strlen(cmdtext) == 21)
			    {
					if ( PlayersData[playerid][Faccion] == CNN )
				    {
					    if ( EntrevistaState )
					    {
					        EntrevistaState = false;
							for (new i = 0; i < MAX_PLAYERS; i++)
							{
							    if ( IsPlayerConnected(i) && i != playerid && PlayersDataOnline[i][IsEntrevistado] )
							    {
									PlayersDataOnline[i][IsEntrevistado] = false;
									SendInfoMessage(i, 3, "0", "Ha finalizado la entrevista actual");
								}
							}
							PlayersDataOnline[playerid][IsEntrevistado] = false;
							SendInfoMessage(playerid, 3, "0", "Ha cerrado la entrevista actual");
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "565", "No hay ninguna entrevista abierta en estos momentos");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "566", "Usted no es CNN");
					}
			    }
				// COMANDO: /Sacar [ID]
		  		else if (strfind(cmdtext, "/Sacar ", true) == 0)
			    {
					if ( PlayersData[playerid][Faccion] == CNN )
				    {
					    if ( IsPlayerNear(playerid, strval(cmdtext[7]),
							 "567",
							 "568",
							 "569",
							 "El jugador que le deseas sacar de la entrevista no se encuentra conectado",
							 "El jugador que le deseas sacar de la entrevista no se ha logueado",
							 "El jugador que le deseas sacar de la entrevista no se encuentra cerca de tí") )
					    {
							if ( PlayersDataOnline[strval(cmdtext[7])][IsEntrevistado] )
					        {
								new MsgEntrevistar[MAX_TEXT_CHAT];
								new MsgEntrevistarToPlayer[MAX_TEXT_CHAT];
								format(MsgEntrevistar, sizeof(MsgEntrevistar), "Has sacado a %s de la entrevista", PlayersDataOnline[strval(cmdtext[7])][NameOnlineFix]);
								format(MsgEntrevistarToPlayer, sizeof(MsgEntrevistarToPlayer), "El reportero %s te ha sacado de la entrevista", PlayersDataOnline[playerid][NameOnlineFix]);

								SendInfoMessage(playerid, 3, "0", MsgEntrevistar);
								SendInfoMessage(strval(cmdtext[7]), 3, "0", MsgEntrevistarToPlayer);
								PlayersDataOnline[strval(cmdtext[7])][IsEntrevistado] = false;
					        }
					        else
					        {
								SendInfoMessage(playerid, 0, "570", "Este jugador no se encuentra en una entrevista!");
							}
					    }
					}
					else
					{
						SendInfoMessage(playerid, 0, "571", "Usted no es CNN");
					}
			    }
				// COMANDO: /En [Texto]
		  		else if (strfind(cmdtext, "/En ", true) == 0)
			    {
			        if ( PlayersDataOnline[playerid][IsEntrevistado] )
			        {
						new Float:MyPos[3];
						new FoundCNN;
						for (new i = 0; i < MAX_PLAYERS; i++)
						{
						    GetPlayerPos(i, MyPos[0], MyPos[1], MyPos[2]);
						    if ( IsPlayerConnected(i) && i != playerid && IsPlayerInRangeOfPoint(playerid, 4.0, MyPos[0], MyPos[1], MyPos[2]) && PlayersData[i][Faccion] == CNN )
						    {
						        FoundCNN = true;
							}
						}

				        if ( FoundCNN )
				        {
					        new MsgTransmision[MAX_TEXT_CHAT];
					        format(MsgTransmision, sizeof(MsgTransmision), "** Entrevistado %s: %s", PlayersDataOnline[playerid][NameOnlineFix], cmdtext[4]);

				            for (new i = 0; i < MAX_PLAYERS; i++)
				            {
								if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersDataOnline[i][StateChannelCNN] )
								{
							   		SendClientMessage(i, COLOR_DE_TRANSMISION, MsgTransmision);
						   		}
					   		}
						}
						else
						{
							SendInfoMessage(playerid, 0, "572", "Tienes que estar al lado de un CNN para poder ser entrevistado");
						}
			        }
			        else
			        {
						SendInfoMessage(playerid, 0, "573", "No te encuentras en ninguna entrevista!");
					}
			    }
				// COMANDO: /Entrevistar [ID]
		  		else if (strfind(cmdtext, "/Entrevistar ", true) == 0)
			    {
					if ( PlayersData[playerid][Faccion] == CNN )
				    {
					    if ( IsPlayerNear(playerid, strval(cmdtext[13]),
							 "574",
							 "575",
							 "576",
							 "El jugador que le deseas entrevistar no se encuentra conectado",
							 "El jugador que le deseas entrevistar no se ha logueado",
							 "El jugador que le deseas entrevistar no se encuentra cerca de tí") )
					    {
					        if ( !PlayersDataOnline[strval(cmdtext[13])][IsEntrevistado] )
					        {
								new MsgEntrevistar[MAX_TEXT_CHAT];
								new MsgEntrevistarToPlayer[MAX_TEXT_CHAT];
								if (!EntrevistaState)
								{
									format(MsgEntrevistar, sizeof(MsgEntrevistar), "Has agregado a la entrevista a %s", PlayersDataOnline[strval(cmdtext[13])][NameOnlineFix]);
									EntrevistaState = true;
								}
								else
								{
									format(MsgEntrevistar, sizeof(MsgEntrevistar), "Has abierto una nueva entrevista, con %s", PlayersDataOnline[strval(cmdtext[13])][NameOnlineFix]);
								}
								format(MsgEntrevistarToPlayer, sizeof(MsgEntrevistarToPlayer), "El reportero %s te a incluido en la entrevista", PlayersDataOnline[playerid][NameOnlineFix]);
								SendInfoMessage(playerid, 3, "0", MsgEntrevistar);
								SendInfoMessage(strval(cmdtext[13]), 3, "0", MsgEntrevistarToPlayer);
								PlayersDataOnline[strval(cmdtext[13])][IsEntrevistado] = true;
							}
							else
							{
								SendInfoMessage(playerid, 0, "577", "Ya ese jugador se encuentra en la entrevista!");
							}
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "578", "Usted no es reportero");
					}
				}
				// COMANDO: /Multar [ID] [Precio] [Razón]
		  		else if (strfind(cmdtext, "/Multar ", true) == 0)
			    {
					if ( PlayersData[playerid][Faccion] == SFPD ||
						 PlayersData[playerid][Faccion] == LSPD )
				    {
				        new playerid_multa = strval(cmdtext[GetPosSpace(cmdtext, 1)]);
				        new dinero_multa = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
						cmdtext[GetPosSpace(cmdtext, 3)];
					    if ( IsPlayerNear(playerid, playerid_multa,
							 "815",
							 "816",
							 "817",
							 "El jugador que desea darle una multa no se encuentra conectado",
							 "El jugador que desea darle una multa no se encuentra logueado",
							 "El jugador que desea darle una multa no se encuentra cerca de tí") )
					    {
					        if ( dinero_multa > 0 && dinero_multa <= 20000 )
					        {
								new MsgMulta[MAX_TEXT_CHAT];
								new MsgMultaToPlayer[MAX_TEXT_CHAT];
								format(MsgMulta, sizeof(MsgMulta), "Le has dado un multa de $%i a %s; Razón: %s", dinero_multa, PlayersDataOnline[playerid_multa][NameOnlineFix], cmdtext[GetPosSpace(cmdtext, 3)]);
								format(MsgMultaToPlayer, sizeof(MsgMultaToPlayer), "%s te ha dado una multa $%i usa (/Aceptar Multa); Razón: %s", PlayersDataOnline[playerid][NameOnlineFix], dinero_multa, cmdtext[GetPosSpace(cmdtext, 3)]);
	                            SendInfoMessage(playerid, 3, "0", MsgMulta);
	                            SendInfoMessage(playerid_multa, 3, "0", MsgMultaToPlayer);

								PlayersDataOnline[playerid_multa][VMulta][0] = playerid;
								PlayersDataOnline[playerid_multa][VMulta][1] = dinero_multa;
							}
							else
							{
								SendInfoMessage(playerid, 0, "814", "El monto mínimo de una factura es $1 y máximo $20000");
							}
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "813", "Usted no es LSPD ni SFPD");
					}
				}
				// COMANDO: /Arrestar [ID] [Tiempo]
		  		else if (strfind(cmdtext, "/Arrestar ", true) == 0)
			    {
					if ( PlayersData[playerid][Faccion] == SFPD ||
						 PlayersData[playerid][Faccion] == LSPD )
				    {
				        new TypeJail;
				        if ( PlayersData[playerid][Faccion] == SFPD )
				        {
					        TypeJail = 0;
						}
						else
						{
					        TypeJail = 1;
						}
						if ( IsPlayerInRangeOfPoint(playerid, 10.0,
							JailsType[TypeJail][PosX_Preso],
							JailsType[TypeJail][PosY_Preso],
							JailsType[TypeJail][PosZ_Preso]) )
						{
							new PlayeridSplit[5], TiempoSplit[5];
							new fPos;
							fPos = strfind(cmdtext, " ", false, 11);
							strmid(PlayeridSplit, cmdtext, 10, fPos);
							strmid(TiempoSplit, cmdtext, fPos, strlen(cmdtext));

						    if ( IsPlayerNear(playerid, strval(PlayeridSplit),
								 "579",
								 "580",
								 "581",
								 "El jugador que le deseas arrestar no se encuentra conectado",
								 "El jugador que le deseas arrestar no se ha logueado",
								 "El jugador que le deseas arrestar no se encuentra cerca de tí") )
						    {
								if ( strval(TiempoSplit) >= 0 && PlayersData[strval(PlayeridSplit)][IsInJail] != -1 && strval(TiempoSplit) <= 500 ||
									 strval(TiempoSplit) > 0 && PlayersData[strval(PlayeridSplit)][IsInJail] == -1 && strval(TiempoSplit) <= 500)
								{
									new MsgArestarMe[MAX_TEXT_CHAT];
									new MsgArestarInfo[MAX_TEXT_CHAT];
									new MsgArestarInfoToPlayer[MAX_TEXT_CHAT];

									if ( PlayersData[strval(PlayeridSplit)][IsInJail] == -1 )
									{
										format(MsgArestarMe, sizeof(MsgArestarMe), "arrestó a %s", PlayersDataOnline[strval(PlayeridSplit)][NameOnlineFix]);
										format(MsgArestarInfo, sizeof(MsgArestarInfo), "Has arrestado a %s", PlayersDataOnline[strval(PlayeridSplit)][NameOnlineFix]);
										format(MsgArestarInfoToPlayer, sizeof(MsgArestarInfoToPlayer), "Has sido arrestado por el %s",  FaccionesRangos[PlayersData[playerid][Faccion]][PlayersData[playerid][Rango]], PlayersDataOnline[playerid][NameOnlineFix]);
									}
									else if ( strval(TiempoSplit) == 0 )
									{
										format(MsgArestarMe, sizeof(MsgArestarMe), "le quitó el el arresto a %s", PlayersDataOnline[strval(PlayeridSplit)][NameOnlineFix]);
										format(MsgArestarInfo, sizeof(MsgArestarInfo), "Le quitaste el arresto a %s", PlayersDataOnline[strval(PlayeridSplit)][NameOnlineFix]);
										format(MsgArestarInfoToPlayer, sizeof(MsgArestarInfoToPlayer), "Has sido liberado por el %s",  FaccionesRangos[PlayersData[playerid][Faccion]][PlayersData[playerid][Rango]], PlayersDataOnline[playerid][NameOnlineFix]);
									}
									else
									{
										format(MsgArestarMe, sizeof(MsgArestarMe), "le modifico la condena a %s", PlayersDataOnline[strval(PlayeridSplit)][NameOnlineFix]);
										format(MsgArestarInfo, sizeof(MsgArestarInfo), "Le modificasnte la condena a %s por %i minutos", PlayersDataOnline[strval(PlayeridSplit)][NameOnlineFix], strval(TiempoSplit));
										format(MsgArestarInfoToPlayer, sizeof(MsgArestarInfoToPlayer), "El %s %s te ha modificado la condena a %i minutos", FaccionesRangos[PlayersData[playerid][Faccion]][PlayersData[playerid][Rango]], PlayersDataOnline[playerid][NameOnlineFix], strval(TiempoSplit));
									}

									PlayersData[strval(PlayeridSplit)][IsInJail] = TypeJail;
									PlayersData[strval(PlayeridSplit)][Jail] = gettime() + (strval(TiempoSplit) * 60);
									SetPlayerJail(strval(PlayeridSplit));

									Acciones(playerid, 8, MsgArestarMe);
									SendInfoMessage(playerid, 3, "0", MsgArestarInfo);
									SendInfoMessage(strval(PlayeridSplit),3, "0", MsgArestarInfoToPlayer);
								}
							    else
							    {
									SendInfoMessage(playerid, 0, "582", "El mínimo de tiempo para el arresto es 0 que sería liberar y 500 minutos como máximo");
								}
						    }
						}
						else
						{
							SendInfoMessage(playerid, 0, "583", "No se encuentra cerca de la celdas");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "584", "Usted no es SFPD ni LSPD");
					}
				}
			  	else if (strcmp("/Banco", cmdtext, true, 6) == 0 && strlen(cmdtext) == 6)
			  	{
				  	ShowHomeBanco(playerid);
				}
				// COMANDO: /Autorizar [ID]
		  		else if (strfind(cmdtext, "/Autorizar ", true) == 0 )
			    {
					if ( PlayersData[playerid][Faccion] == LSPD && PlayersData[playerid][Rango] <= 1 ||
						 PlayersData[playerid][Faccion] == SFPD && PlayersData[playerid][Rango] <= 1 )
				    {
				        new playeridAutorizar = strval(cmdtext[11]);
				        if ( PlayersData[playerid][Faccion] == PlayersData[playeridAutorizar][Faccion] )
				        {
							if ( PlayersData[playeridAutorizar][Rango] > 3 )
							{
							    if ( IsPlayerNear(playerid, playeridAutorizar,
									 "1034",
									 "1035",
									 "1036",
									 "El jugador que le deseas autorizar no se encuentra conectado",
									 "El jugador que le deseas autorizar no se ha logueado",
									 "El jugador que le deseas autorizar no se encuentra cerca de tí") )
							    {
							        if ( !PlayersDataOnline[playeridAutorizar][IsAutorizado] )
							        {
										new MsgAutorizarMe[MAX_TEXT_CHAT];
										new MsgAutorizarYou[MAX_TEXT_CHAT];

										format(MsgAutorizarMe, sizeof(MsgAutorizarMe), "Le has asignado a %s ponerse un equipo en el armario de la estación.", PlayersDataOnline[playeridAutorizar][NameOnlineFix]);
										format(MsgAutorizarYou, sizeof(MsgAutorizarYou), "%s te ha asignado ponerte un equipo en el armario de la estación", PlayersDataOnline[playerid][NameOnlineFix]);
										SendInfoMessage(playerid, 3, "0", MsgAutorizarMe);
										SendInfoMessage(playeridAutorizar, 3, "0", MsgAutorizarYou);

							            PlayersDataOnline[playeridAutorizar][IsAutorizado] = true;
									}
									else
									{
										SendInfoMessage(playerid, 0, "1037", "Ya el jugador ese está autorizado!");
									}
							    }
						    }
						    else
						    {
			   					SendInfoMessage(playerid, 0, "1038", "Este jugador no necesita autorización, es ya un gran rango en la facción");
							}
					    }
					    else
					    {
		   					SendInfoMessage(playerid, 0, "1039", "El jugador que desea darle autorización no pertenece a su facción");
						}
				    }
				    else
				    {
						SendInfoMessage(playerid, 0, "1040", "Usted no puede autorizar!");
					}
			    }
				// COMANDO: /Robar
		  		else if (strfind(cmdtext, "/Robar", true) == 0)
			    {
					// COMANDO: /Robar Local
				  	if (strcmp("/Robar Local", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12)
				  	{
				  	    if ( PlayersData[playerid][Rango] == 0 &&
						  	 (PlayersData[playerid][Faccion] == COLTS ||
							  PlayersData[playerid][Faccion] == AK ||
							  PlayersData[playerid][Faccion] == VELTRAN ||
							  PlayersData[playerid][Faccion] == HEORS) )
				  	    {
				  	        new fac;
				  	        if ( PlayersData[playerid][Faccion] == COLTS )
				  	        {
				  	            fac = COLTS_R;
							}
							else if ( PlayersData[playerid][Faccion] == AK )
							{
							    fac = AK_R;
							}
							else if ( PlayersData[playerid][Faccion] == VELTRAN )
							{
							    fac = VELTRAN_R;
							}
							else if ( PlayersData[playerid][Faccion] == HEORS )
							{
							    fac = HEORS_R;
							}
				  	        if ( RobosInfo[fac][TimeLast] <= gettime() )
				  	        {
						        if ( PlayersDataOnline[playerid][InPickup] >= NegociosData[1][PickupOutId] &&
						             PlayersDataOnline[playerid][InPickup] <= NegociosData[MAX_BIZZ][PickupOutId] )
						        {
									if ( !NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][Lock] )
									{
									    if ( !RobosInfo[fac][BizzIDR] )
									    {
										    RobosInfo[fac][City] = GetMyNearCity(playerid);
										    if ( RobosInfo[fac][City] )
										    {
										        RobosInfo[fac][City] = SFPD;
										    }
										    else
										    {
										        RobosInfo[fac][City] = LSPD;
											}

										    if ( GetMaxPlayersByFaccion(RobosInfo[fac][City]) >= 4 )
										    {
											    RobosInfo[fac][TimeLast] = gettime() + TIME_R_READY;
											    AddRobo(fac, PlayersDataOnline[playerid][MyPickupWorld]);
										    }
										    else
										    {
												SendInfoMessage(playerid, 0, "1492", "En estos momentos no puedes robar este negocio!");
											}
										}
										else
										{
											SendInfoMessage(playerid, 0, "1493", "Ya se encuentran en un robo, no puedes empezar otro!");
										}
									}
									else
									{
										SendInfoMessage(playerid, 0, "1494", "El negocio debe estar abierto para poder atracarlo!");
									}
						        }
						        else
						        {
									SendInfoMessage(playerid, 0, "1495", "Debes estar en la puerta de un negocio para robar!");
								}
				  	        }
							else
							{
								new MsgPersonalizado[MAX_TEXT_CHAT];
								format(MsgPersonalizado, sizeof(MsgPersonalizado), "Debe esperar %i minutos con %i segundos para volver a atracar un local", (RobosInfo[fac][TimeLast] - gettime()) / 60, ((RobosInfo[fac][TimeLast] - gettime()) % 60));
								SendInfoMessage(playerid, 0, "1496", MsgPersonalizado);
							}
					  	}
					  	else
					  	{
							SendInfoMessage(playerid, 0, "1497", "Usted no puede robar locales!");
					    }
				  	}
					// COMANDO: /Robar Gas
				  	else if (strcmp("/Robar Gas", cmdtext, true, 10) == 0 && strlen(cmdtext) == 10)
				  	{
						new MyNearCar = IsPlayerInNearVehicle(playerid);
						if ( MyNearCar )
						{
						    if ( !IsPlayerInAnyVehicle(playerid) )
						    {
							    if ( !DataCars[MyNearCar][Lock] ||
									 strlen(DataCars[MyNearCar][Dueno]) == 1 && MyNearCar <= MAX_CAR_DUENO )
								{
						  	        if ( !PlayersData[playerid][Lata] )
									{
								        if ( DataCars[MyNearCar][Gas] > 20 )
								        {
											if ( !DataCars[MyNearCar][LlenandoGas] )
											{
											    if ( !DataCars[MyNearCar][StateEncendido] )
											    {
												    if( IntentarAccion(playerid, "sacarle gas al vehículo", random(2)))
												    {
												        DataCars[MyNearCar][Gas] = DataCars[MyNearCar][Gas] - 20;
														PlayersData[playerid][Lata] = true;
														UpdateGasAndOil(MyNearCar);
													}
												}
												else
												{
													SendInfoMessage(playerid, 0, "1103", "El vehículo debe estár apagado para robarle gas");
												}
											}
											else
											{
												SendInfoMessage(playerid, 0, "1102", "Éste vehículo está llenando el deposito, no puede robarle gas");
											}
										}
										else
										{
											SendInfoMessage(playerid, 0, "1101", "Este coche no tiene gas para robarle!");
										}
									}
									else
									{
										SendInfoMessage(playerid, 0, "1100", "Su lata ya se encuentra llena de gas");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "1099", "Éste vehículo se encuentra cerrado!");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "1098", "No puede robar gas desde adentro del vehículo");
							}
						}
				  	}
				  	else
				  	{
						SendInfoMessage(playerid, 0, "1498", "Quizás quiso decir: /Robar {Gas, Local}");
				    }

			  	}
				// COMANDO: /Dar
		  		else if (strfind(cmdtext, "/Dar", true) == 0)
			    {
			    	// COMANDO: /Dar Habilidad [ID] [ID_Habilidad]
			    	if (strfind(cmdtext, "/Dar Habilidad ", true) == 0 )
				    {
						if ( PlayersData[playerid][Faccion] == LICENCIEROS && PlayersData[playerid][Rango] == 0 ||
							 PlayersData[playerid][Faccion] == LICENCIEROS && PlayersData[playerid][Rango] == 1 ||
							 PlayersData[playerid][Faccion] == LICENCIEROS && PlayersData[playerid][Rango] == 3 ||
							 PlayersData[playerid][Faccion] == LICENCIEROS && PlayersData[playerid][Rango] == 5 )
					    {
							new PlayeridSplit[5], HabilidadSplit[5];
							new fPos;
							fPos = strfind(cmdtext, " ", false, 16);
							strmid(PlayeridSplit, cmdtext, 15, fPos);
							strmid(HabilidadSplit, cmdtext, fPos, strlen(cmdtext));

						    if ( IsPlayerNear(playerid, strval(PlayeridSplit),
								 "481",
								 "482",
								 "483",
								 "El jugador que le deseas dar una habilidad no se encuentra conectado",
								 "El jugador que le deseas dar una habilidad no se ha logueado",
								 "El jugador que le deseas dar una habilidad no se encuentra cerca de tí") )
						    {
								if ( strval(HabilidadSplit) >= 1 && strval(HabilidadSplit) <= 6 )
								{
									if ( PlayersData[strval(PlayeridSplit)][Habilidad] != (strval(HabilidadSplit) - 1) )
									{
										new MsgDarHabilidadMe[MAX_TEXT_CHAT];
										new MsgDarHabilidadInfo[MAX_TEXT_CHAT];
										new MsgDarHabilidadInfoToPlayer[MAX_TEXT_CHAT];
										format(MsgDarHabilidadMe, sizeof(MsgDarHabilidadMe), "le da una habilidad de %s a %s", HabilidadesName[strval(HabilidadSplit) - 1], PlayersDataOnline[strval(PlayeridSplit)][NameOnlineFix]);
										format(MsgDarHabilidadInfo, sizeof(MsgDarHabilidadInfo), "Has dado una habilidad de %s a %s", HabilidadesName[strval(HabilidadSplit) - 1], PlayersDataOnline[strval(PlayeridSplit)][NameOnlineFix]);
										format(MsgDarHabilidadInfoToPlayer, sizeof(MsgDarHabilidadInfoToPlayer), "Has recibido una habilidad de %s del profesor %s", HabilidadesName[strval(HabilidadSplit) - 1], PlayersDataOnline[playerid][NameOnlineFix]);

										Acciones(playerid, 8, MsgDarHabilidadMe);
										SendInfoMessage(playerid, 3, "0", MsgDarHabilidadInfo);
										SendInfoMessage(strval(PlayeridSplit),3, "0", MsgDarHabilidadInfoToPlayer);

										PlayersData[strval(PlayeridSplit)][Habilidad] = strval(HabilidadSplit) - 1;
										SetPlayerFightingStyle(strval(PlayeridSplit), HabilidadesID[strval(HabilidadSplit) - 1]);
									}
									else
									{
										SendInfoMessage(playerid, 0, "484", "Este jugador ya tiene esa habildad");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "485", "Las habilidades tiene que estar entre 1 y 6, consulte /Ayuda Habilidades");
								}
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "486", "Usted no es profesor");
						}
				    }
					// COMANDO: /Dar Licencia [Licencia] [ID]
			  		else if (strfind(cmdtext, "/Dar Licencia ", true) == 0 )
				    {
						if ( PlayersData[playerid][Faccion] == LICENCIEROS && PlayersData[playerid][Rango] == 0 ||
							 PlayersData[playerid][Faccion] == LICENCIEROS && PlayersData[playerid][Rango] == 1 ||
							 PlayersData[playerid][Faccion] == LICENCIEROS && PlayersData[playerid][Rango] == 2 ||
							 PlayersData[playerid][Faccion] == LICENCIEROS && PlayersData[playerid][Rango] == 4 )
					    {
		   					// COMANDO: /Dar Licencia Armas [ID]
					  		if (strfind(cmdtext, "/Dar Licencia Armas ", true) == 0) //20
						    {
							    if ( IsPlayerNear(playerid, strval(cmdtext[20]),
									 "487",
									 "488",
									 "489",
									 "El jugador que le deseas dar una licencia de Armas no se encuentra conectado",
									 "El jugador que le deseas dar una licencia de Armas no se ha logueado",
									 "El jugador que le deseas dar una licencia de Armas no se encuentra cerca de tí") )
							    {
							        if ( !PlayersData[strval(cmdtext[20])][Licencias][0] )
							        {
										new MsgDarLicenciasMe[MAX_TEXT_CHAT];
										new MsgDarLicenciasInfo[MAX_TEXT_CHAT];
										new MsgDarLicenciasInfoToPlayer[MAX_TEXT_CHAT];
										format(MsgDarLicenciasMe, sizeof(MsgDarLicenciasMe), "le da una licencia de Armas a %s", PlayersDataOnline[strval(cmdtext[20])][NameOnlineFix]);
										format(MsgDarLicenciasInfo, sizeof(MsgDarLicenciasInfo), "Has dado una licencia de Armas a %s", PlayersDataOnline[strval(cmdtext[20])][NameOnlineFix]);
										format(MsgDarLicenciasInfoToPlayer, sizeof(MsgDarLicenciasInfoToPlayer), "Has recibido una licencia de Armas del licenciero %s", PlayersDataOnline[playerid][NameOnlineFix]);

										Acciones(playerid, 8, MsgDarLicenciasMe);
										SendInfoMessage(playerid, 3, "0", MsgDarLicenciasInfo);
										SendInfoMessage(strval(cmdtext[20]), 3, "0", MsgDarLicenciasInfoToPlayer);

										PlayersData[strval(cmdtext[20])][Licencias][0] = true;
									}
									else
									{
										SendInfoMessage(playerid, 0, "490", "Ya ese jugador tiene una licencia de Armas");
									}
							    }
						    }
		   					// COMANDO: /Dar Licencia Coche [ID]
							else if (strfind(cmdtext, "/Dar Licencia Coche ", true) == 0) //20
						    {
							    if ( IsPlayerNear(playerid, strval(cmdtext[20]),
									 "491",
									 "492",
									 "493",
									 "El jugador que le deseas dar una licencia de Coche no se encuentra conectado",
									 "El jugador que le deseas dar una licencia de Coche no se ha logueado",
									 "El jugador que le deseas dar una licencia de Coche no se encuentra cerca de tí") )
							    {
							        if ( !PlayersData[strval(cmdtext[20])][Licencias][1] )
							        {
										new MsgDarLicenciasMe[MAX_TEXT_CHAT];
										new MsgDarLicenciasInfo[MAX_TEXT_CHAT];
										new MsgDarLicenciasInfoToPlayer[MAX_TEXT_CHAT];
										format(MsgDarLicenciasMe, sizeof(MsgDarLicenciasMe), "le da una licencia de Coche a %s", PlayersDataOnline[strval(cmdtext[20])][NameOnlineFix]);
										format(MsgDarLicenciasInfo, sizeof(MsgDarLicenciasInfo), "Has dado una licencia de Coche a %s", PlayersDataOnline[strval(cmdtext[20])][NameOnlineFix]);
										format(MsgDarLicenciasInfoToPlayer, sizeof(MsgDarLicenciasInfoToPlayer), "Has recibido una licencia de Coche del licenciero %s", PlayersDataOnline[playerid][NameOnlineFix]);

										Acciones(playerid, 8, MsgDarLicenciasMe);
										SendInfoMessage(playerid, 3, "0", MsgDarLicenciasInfo);
										SendInfoMessage(strval(cmdtext[20]), 3, "0", MsgDarLicenciasInfoToPlayer);

										PlayersData[strval(cmdtext[20])][Licencias][1] = true;
									}
									else
									{
										SendInfoMessage(playerid, 0, "494", "Ya ese jugador tiene una licencia de Coche");
									}
							    }
						    }
		   					// COMANDO: /Dar Licencia Tren [ID]
							else if (strfind(cmdtext, "/Dar Licencia Tren ", true) == 0) //20
						    {
							    if ( IsPlayerNear(playerid, strval(cmdtext[19]),
									 "1046",
									 "1045",
									 "1044",
									 "El jugador que le deseas dar una licencia de Tren no se encuentra conectado",
									 "El jugador que le deseas dar una licencia de Tren no se ha logueado",
									 "El jugador que le deseas dar una licencia de Tren no se encuentra cerca de tí") )
							    {
							        if ( !PlayersData[strval(cmdtext[19])][Licencias][6] )
							        {
										new MsgDarLicenciasMe[MAX_TEXT_CHAT];
										new MsgDarLicenciasInfo[MAX_TEXT_CHAT];
										new MsgDarLicenciasInfoToPlayer[MAX_TEXT_CHAT];
										format(MsgDarLicenciasMe, sizeof(MsgDarLicenciasMe), "le da una licencia de Tren a %s", PlayersDataOnline[strval(cmdtext[19])][NameOnlineFix]);
										format(MsgDarLicenciasInfo, sizeof(MsgDarLicenciasInfo), "Has dado una licencia de Tren a %s", PlayersDataOnline[strval(cmdtext[19])][NameOnlineFix]);
										format(MsgDarLicenciasInfoToPlayer, sizeof(MsgDarLicenciasInfoToPlayer), "Has recibido una licencia de Tren del licenciero %s", PlayersDataOnline[playerid][NameOnlineFix]);

										Acciones(playerid, 8, MsgDarLicenciasMe);
										SendInfoMessage(playerid, 3, "0", MsgDarLicenciasInfo);
										SendInfoMessage(strval(cmdtext[19]), 3, "0", MsgDarLicenciasInfoToPlayer);

										PlayersData[strval(cmdtext[19])][Licencias][6] = true;
									}
									else
									{
										SendInfoMessage(playerid, 0, "1043", "Ya ese jugador tiene una licencia de Tren");
									}
							    }
						    }

							// COMANDO: /Dar Licencia Camión [ID]
							else if (strfind(cmdtext, "/Dar Licencia Camión ", true) == 0 ||
									 strfind(cmdtext, "/Dar Licencia Camion ", true) == 0 ) //20
						    {
							    if ( IsPlayerNear(playerid, strval(cmdtext[21]),
									 "514",
									 "515",
									 "516",
									 "El jugador que le deseas dar una licencia de Camión no se encuentra conectado",
									 "El jugador que le deseas dar una licencia de Camión no se ha logueado",
									 "El jugador que le deseas dar una licencia de Camión no se encuentra cerca de tí") )
							    {
							        if ( !PlayersData[strval(cmdtext[21])][Licencias][2] )
							        {
										new MsgDarLicenciasMe[MAX_TEXT_CHAT];
										new MsgDarLicenciasInfo[MAX_TEXT_CHAT];
										new MsgDarLicenciasInfoToPlayer[MAX_TEXT_CHAT];
										format(MsgDarLicenciasMe, sizeof(MsgDarLicenciasMe), "le da una licencia de Camión a %s", PlayersDataOnline[strval(cmdtext[21])][NameOnlineFix]);
										format(MsgDarLicenciasInfo, sizeof(MsgDarLicenciasInfo), "Has dado una licencia de Camión a %s", PlayersDataOnline[strval(cmdtext[21])][NameOnlineFix]);
										format(MsgDarLicenciasInfoToPlayer, sizeof(MsgDarLicenciasInfoToPlayer), "Has recibido una licencia de Camión del licenciero %s", PlayersDataOnline[playerid][NameOnlineFix]);

										Acciones(playerid, 8, MsgDarLicenciasMe);
										SendInfoMessage(playerid, 3, "0", MsgDarLicenciasInfo);
										SendInfoMessage(strval(cmdtext[21]), 3, "0", MsgDarLicenciasInfoToPlayer);

										PlayersData[strval(cmdtext[21])][Licencias][2] = true;
									}
									else
									{
										SendInfoMessage(playerid, 0, "495", "Ya ese jugador tiene una licencia de Camión");
									}
							    }
						    }
							// COMANDO: /Dar Licencia Moto [ID]
							else if (strfind(cmdtext, "/Dar Licencia Moto ", true) == 0 ) // 14
						    {
							    if ( IsPlayerNear(playerid, strval(cmdtext[19]),
									 "496",
									 "497",
									 "498",
									 "El jugador que le deseas dar una licencia de Moto no se encuentra conectado",
									 "El jugador que le deseas dar una licencia de Moto no se ha logueado",
									 "El jugador que le deseas dar una licencia de Moto no se encuentra cerca de tí") )
							    {
							        if ( !PlayersData[strval(cmdtext[19])][Licencias][3] )
							        {
										new MsgDarLicenciasMe[MAX_TEXT_CHAT];
										new MsgDarLicenciasInfo[MAX_TEXT_CHAT];
										new MsgDarLicenciasInfoToPlayer[MAX_TEXT_CHAT];
										format(MsgDarLicenciasMe, sizeof(MsgDarLicenciasMe), "le da una licencia de Moto a %s", PlayersDataOnline[strval(cmdtext[19])][NameOnlineFix]);
										format(MsgDarLicenciasInfo, sizeof(MsgDarLicenciasInfo), "Has dado una licencia de Moto a %s", PlayersDataOnline[strval(cmdtext[19])][NameOnlineFix]);
										format(MsgDarLicenciasInfoToPlayer, sizeof(MsgDarLicenciasInfoToPlayer), "Has recibido una licencia de Moto del licenciero %s", PlayersDataOnline[playerid][NameOnlineFix]);

										Acciones(playerid, 8, MsgDarLicenciasMe);
										SendInfoMessage(playerid, 3, "0", MsgDarLicenciasInfo);
										SendInfoMessage(strval(cmdtext[19]), 3, "0", MsgDarLicenciasInfoToPlayer);

										PlayersData[strval(cmdtext[19])][Licencias][3] = true;
									}
									else
									{
										SendInfoMessage(playerid, 0, "499", "Ya ese jugador tiene una licencia de Moto");
									}
							    }
						    }
							// COMANDO: /Dar Licencia Vuelo [ID]
							else if (strfind(cmdtext, "/Dar Licencia Vuelo ", true) == 0 ) //20
						    {
							    if ( IsPlayerNear(playerid, strval(cmdtext[20]),
									 "500",
									 "501",
									 "502",
									 "El jugador que le deseas dar una licencia de Vuelo no se encuentra conectado",
									 "El jugador que le deseas dar una licencia de Vuelo no se ha logueado",
									 "El jugador que le deseas dar una licencia de Vuelo no se encuentra cerca de tí") )
							    {
							        if ( !PlayersData[strval(cmdtext[20])][Licencias][4] )
							        {
										new MsgDarLicenciasMe[MAX_TEXT_CHAT];
										new MsgDarLicenciasInfo[MAX_TEXT_CHAT];
										new MsgDarLicenciasInfoToPlayer[MAX_TEXT_CHAT];
										format(MsgDarLicenciasMe, sizeof(MsgDarLicenciasMe), "le da una licencia de Vuelo a %s", PlayersDataOnline[strval(cmdtext[20])][NameOnlineFix]);
										format(MsgDarLicenciasInfo, sizeof(MsgDarLicenciasInfo), "Has dado una licencia de Vuelo a %s", PlayersDataOnline[strval(cmdtext[20])][NameOnlineFix]);
										format(MsgDarLicenciasInfoToPlayer, sizeof(MsgDarLicenciasInfoToPlayer), "Has recibido una licencia de Vuelo del licenciero %s", PlayersDataOnline[playerid][NameOnlineFix]);

										Acciones(playerid, 8, MsgDarLicenciasMe);
										SendInfoMessage(playerid, 3, "0", MsgDarLicenciasInfo);
										SendInfoMessage(strval(cmdtext[20]), 3, "0", MsgDarLicenciasInfoToPlayer);

										PlayersData[strval(cmdtext[20])][Licencias][4] = true;
									}
									else
									{
										SendInfoMessage(playerid, 0, "503", "Ya ese jugador tiene una licencia de Vuelo");
									}
							    }
						    }
						    // COMANDO: /Dar Licencia Bote [ID]
							else if (strfind(cmdtext, "/Dar Licencia Bote ", true) == 0 ) // 14
						    {
							    if ( IsPlayerNear(playerid, strval(cmdtext[19]),
									 "504",
									 "505",
									 "506",
									 "El jugador que le deseas dar una licencia de Bote no se encuentra conectado",
									 "El jugador que le deseas dar una licencia de Bote no se ha logueado",
									 "El jugador que le deseas dar una licencia de Bote no se encuentra cerca de tí") )
							    {
							        if ( !PlayersData[strval(cmdtext[19])][Licencias][5] )
							        {
										new MsgDarLicenciasMe[MAX_TEXT_CHAT];
										new MsgDarLicenciasInfo[MAX_TEXT_CHAT];
										new MsgDarLicenciasInfoToPlayer[MAX_TEXT_CHAT];
										format(MsgDarLicenciasMe, sizeof(MsgDarLicenciasMe), "le da una licencia de Bote a %s", PlayersDataOnline[strval(cmdtext[19])][NameOnlineFix]);
										format(MsgDarLicenciasInfo, sizeof(MsgDarLicenciasInfo), "Has dado una licencia de Bote a %s", PlayersDataOnline[strval(cmdtext[19])][NameOnlineFix]);
										format(MsgDarLicenciasInfoToPlayer, sizeof(MsgDarLicenciasInfoToPlayer), "Has recibido una licencia de Bote del licenciero %s", PlayersDataOnline[playerid][NameOnlineFix]);

										Acciones(playerid, 8, MsgDarLicenciasMe);
										SendInfoMessage(playerid, 3, "0", MsgDarLicenciasInfo);
										SendInfoMessage(strval(cmdtext[19]), 3, "0", MsgDarLicenciasInfoToPlayer);

										PlayersData[strval(cmdtext[19])][Licencias][5] = true;
									}
									else
									{
										SendInfoMessage(playerid, 0, "507", "Ya ese jugador tiene una licencia de Bote");
									}
							    }
						    }
							// COMANDO: /Dar Licencia Pesca [ID]
							else if (strfind(cmdtext, "/Dar Licencia Pesca ", true) == 0 ) //20
						    {
							    if ( IsPlayerNear(playerid, strval(cmdtext[20]),
									 "508",
									 "509",
									 "510",
									 "El jugador que le deseas dar una licencia de Pesca no se encuentra conectado",
									 "El jugador que le deseas dar una licencia de Pesca no se ha logueado",
									 "El jugador que le deseas dar una licencia de Pesca no se encuentra cerca de tí") )
							    {
							        if ( !PlayersData[strval(cmdtext[20])][LicenciaPesca] )
							        {
										new MsgDarLicenciasMe[MAX_TEXT_CHAT];
										new MsgDarLicenciasInfo[MAX_TEXT_CHAT];
										new MsgDarLicenciasInfoToPlayer[MAX_TEXT_CHAT];
										format(MsgDarLicenciasMe, sizeof(MsgDarLicenciasMe), "le da una licencia de Pesca a %s", PlayersDataOnline[strval(cmdtext[20])][NameOnlineFix]);
										format(MsgDarLicenciasInfo, sizeof(MsgDarLicenciasInfo), "Has dado una licencia de Pesca a %s", PlayersDataOnline[strval(cmdtext[20])][NameOnlineFix]);
										format(MsgDarLicenciasInfoToPlayer, sizeof(MsgDarLicenciasInfoToPlayer), "Has recibido una licencia de Pesca del licenciero %s", PlayersDataOnline[playerid][NameOnlineFix]);

										Acciones(playerid, 8, MsgDarLicenciasMe);
										SendInfoMessage(playerid, 3, "0", MsgDarLicenciasInfo);
										SendInfoMessage(strval(cmdtext[20]), 3, "0", MsgDarLicenciasInfoToPlayer);

										PlayersData[strval(cmdtext[20])][LicenciaPesca] = true;
									}
									else
									{
										SendInfoMessage(playerid, 0, "511", "Ya ese jugador tiene una licencia de Pesca");
									}
							    }
						    }
					        else
					        {
								SendInfoMessage(playerid, 0, "512", "Quizás quiso decir: /Dar Licencia {Armas [ID], Coche [ID], Camión [ID], Moto [ID], Vuelo [ID], Bote [ID], Pesca [ID], Tren [ID]}");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "513", "Usted no es licenciero");
						}
				    }
					// COMANDO: /Dar Idioma [Idioma] [ID]
			  		else if (strfind(cmdtext, "/Dar Idioma ", true) == 0 )
				    {
						if ( PlayersData[playerid][Faccion] == LICENCIEROS && PlayersData[playerid][Rango] == 0 ||
							 PlayersData[playerid][Faccion] == LICENCIEROS && PlayersData[playerid][Rango] == 1 ||
							 PlayersData[playerid][Faccion] == LICENCIEROS && PlayersData[playerid][Rango] == 3 ||
							 PlayersData[playerid][Faccion] == LICENCIEROS && PlayersData[playerid][Rango] == 5)
					    {
		   					// COMANDO: /Dar Idioma Alemán [ID]
					  		if (strfind(cmdtext, "/Dar Idioma Alemán ", true) == 0 || // 12
							  	strfind(cmdtext, "/Dar Idioma Aleman ", true) == 0)
						    {
							    if ( IsPlayerNear(playerid, strval(cmdtext[19]),
									 "479",
									 "478",
									 "477",
									 "El jugador que le deseas dar un título de alemán no se encuentra conectado",
									 "El jugador que le deseas dar un título de alemán no se ha logueado",
									 "El jugador que le deseas dar un título de alemán no se encuentra cerca de tí") )
							    {
							        if ( !PlayersData[strval(cmdtext[19])][Idiomas][0] )
							        {
										new MsgDarIdiomaMe[MAX_TEXT_CHAT];
										new MsgDarIdiomaInfo[MAX_TEXT_CHAT];
										new MsgDarIdiomaInfoToPlayer[MAX_TEXT_CHAT];
										format(MsgDarIdiomaMe, sizeof(MsgDarIdiomaMe), "le da un título alemán a %s", PlayersDataOnline[strval(cmdtext[19])][NameOnlineFix]);
										format(MsgDarIdiomaInfo, sizeof(MsgDarIdiomaInfo), "Has dado un título de alemán a %s", PlayersDataOnline[strval(cmdtext[19])][NameOnlineFix]);
										format(MsgDarIdiomaInfoToPlayer, sizeof(MsgDarIdiomaInfoToPlayer), "Has recibido un título de alemán de %s", PlayersDataOnline[playerid][NameOnlineFix]);

										Acciones(playerid, 8, MsgDarIdiomaMe);
										SendInfoMessage(playerid, 3, "0", MsgDarIdiomaInfo);
										SendInfoMessage(strval(cmdtext[19]), 3, "0", MsgDarIdiomaInfoToPlayer);

										PlayersData[strval(cmdtext[19])][Idiomas][0] = true;
									}
									else
									{
										SendInfoMessage(playerid, 0, "480", "Ya ese jugador tiene un título de alemán");
									}
							    }
						    }
							// COMANDO: /Dar Idioma Francés [ID]
							else if (strfind(cmdtext, "/Dar Idioma Francés ", true) == 0 || // 12
							  		 strfind(cmdtext, "/Dar Idioma Frances ", true) == 0)
						    {
							    if ( IsPlayerNear(playerid, strval(cmdtext[20]),
									 "476",
									 "475",
									 "474",
									 "El jugador que le deseas dar un título de Francés no se encuentra conectado",
									 "El jugador que le deseas dar un título de Francés no se ha logueado",
									 "El jugador que le deseas dar un título de Francés no se encuentra cerca de tí") )
							    {
							        if ( !PlayersData[strval(cmdtext[20])][Idiomas][1] )
							        {
										new MsgDarIdiomaMe[MAX_TEXT_CHAT];
										new MsgDarIdiomaInfo[MAX_TEXT_CHAT];
										new MsgDarIdiomaInfoToPlayer[MAX_TEXT_CHAT];
										format(MsgDarIdiomaMe, sizeof(MsgDarIdiomaMe), "le da un título Francés a %s", PlayersDataOnline[strval(cmdtext[20])][NameOnlineFix]);
										format(MsgDarIdiomaInfo, sizeof(MsgDarIdiomaInfo), "Has dado un título de Francés a %s", PlayersDataOnline[strval(cmdtext[20])][NameOnlineFix]);
										format(MsgDarIdiomaInfoToPlayer, sizeof(MsgDarIdiomaInfoToPlayer), "Has recibido un título de Francés de %s", PlayersDataOnline[playerid][NameOnlineFix]);

										Acciones(playerid, 8, MsgDarIdiomaMe);
										SendInfoMessage(playerid, 3, "0", MsgDarIdiomaInfo);
										SendInfoMessage(strval(cmdtext[20]), 3, "0", MsgDarIdiomaInfoToPlayer);

										PlayersData[strval(cmdtext[20])][Idiomas][1] = true;
									}
									else
									{
										SendInfoMessage(playerid, 0, "472", "Ya ese jugador tiene un título de francés");
									}
							    }
						    }
							// COMANDO: /Dar Idioma Portugués [ID]
							else if (strfind(cmdtext, "/Dar Idioma Portugués ", true) == 0 || // 12
							  		 strfind(cmdtext, "/Dar Idioma Portugues ", true) == 0)
						    {
							    if ( IsPlayerNear(playerid, strval(cmdtext[22]),
									 "471",
									 "470",
									 "469",
									 "El jugador que le deseas dar un título de Portugués no se encuentra conectado",
									 "El jugador que le deseas dar un título de Portugués no se ha logueado",
									 "El jugador que le deseas dar un título de Portugués no se encuentra cerca de tí") )
							    {
							        if ( !PlayersData[strval(cmdtext[22])][Idiomas][2] )
							        {
										new MsgDarIdiomaMe[MAX_TEXT_CHAT];
										new MsgDarIdiomaInfo[MAX_TEXT_CHAT];
										new MsgDarIdiomaInfoToPlayer[MAX_TEXT_CHAT];
										format(MsgDarIdiomaMe, sizeof(MsgDarIdiomaMe), "le da un título Portugués a %s", PlayersDataOnline[strval(cmdtext[22])][NameOnlineFix]);
										format(MsgDarIdiomaInfo, sizeof(MsgDarIdiomaInfo), "Has dado un título de Portugués a %s", PlayersDataOnline[strval(cmdtext[22])][NameOnlineFix]);
										format(MsgDarIdiomaInfoToPlayer, sizeof(MsgDarIdiomaInfoToPlayer), "Has recibido un título de Portugués de %s", PlayersDataOnline[playerid][NameOnlineFix]);

										Acciones(playerid, 8, MsgDarIdiomaMe);
										SendInfoMessage(playerid, 3, "0", MsgDarIdiomaInfo);
										SendInfoMessage(strval(cmdtext[22]), 3, "0", MsgDarIdiomaInfoToPlayer);

										PlayersData[strval(cmdtext[22])][Idiomas][2] = true;
									}
									else
									{
										SendInfoMessage(playerid, 0, "473", "Ya ese jugador tiene un título de Portugués");
									}
							    }
						    }
							// COMANDO: /Dar Idioma Italiano [ID]
							else if (strfind(cmdtext, "/Dar Idioma Italiano ", true) == 0 )
						    {
							    if ( IsPlayerNear(playerid, strval(cmdtext[21]),
									 "468",
									 "462",
									 "467",
									 "El jugador que le deseas dar un título de Italiano no se encuentra conectado",
									 "El jugador que le deseas dar un título de Italiano no se ha logueado",
									 "El jugador que le deseas dar un título de Italiano no se encuentra cerca de tí") )
							    {
							        if ( !PlayersData[strval(cmdtext[21])][Idiomas][3] )
							        {
										new MsgDarIdiomaMe[MAX_TEXT_CHAT];
										new MsgDarIdiomaInfo[MAX_TEXT_CHAT];
										new MsgDarIdiomaInfoToPlayer[MAX_TEXT_CHAT];
										format(MsgDarIdiomaMe, sizeof(MsgDarIdiomaMe), "le da un título Italiano a %s", PlayersDataOnline[strval(cmdtext[21])][NameOnlineFix]);
										format(MsgDarIdiomaInfo, sizeof(MsgDarIdiomaInfo), "Has dado un título de Italiano a %s", PlayersDataOnline[strval(cmdtext[21])][NameOnlineFix]);
										format(MsgDarIdiomaInfoToPlayer, sizeof(MsgDarIdiomaInfoToPlayer), "Has recibido un título de Italiano de %s", PlayersDataOnline[playerid][NameOnlineFix]);

										Acciones(playerid, 8, MsgDarIdiomaMe);
										SendInfoMessage(playerid, 3, "0", MsgDarIdiomaInfo);
										SendInfoMessage(strval(cmdtext[21]), 3, "0", MsgDarIdiomaInfoToPlayer);

										PlayersData[strval(cmdtext[21])][Idiomas][3] = true;
									}
									else
									{
										SendInfoMessage(playerid, 0, "461", "Ya ese jugador tiene un título de Italiano");
									}
							    }
						    }
							// COMANDO: /Dar Idioma Inglés [ID]
							else if (strfind(cmdtext, "/Dar Idioma Inglés ", true) == 0 || // 12
							  		 strfind(cmdtext, "/Dar Idioma Ingles ", true) == 0)
						    {
							    if ( IsPlayerNear(playerid, strval(cmdtext[19]),
									 "460",
									 "459",
									 "458",
									 "El jugador que le deseas dar un título de Inglés no se encuentra conectado",
									 "El jugador que le deseas dar un título de Inglés no se ha logueado",
									 "El jugador que le deseas dar un título de Inglés no se encuentra cerca de tí") )
							    {
							        if ( !PlayersData[strval(cmdtext[19])][Idiomas][4] )
							        {
										new MsgDarIdiomaMe[MAX_TEXT_CHAT];
										new MsgDarIdiomaInfo[MAX_TEXT_CHAT];
										new MsgDarIdiomaInfoToPlayer[MAX_TEXT_CHAT];
										format(MsgDarIdiomaMe, sizeof(MsgDarIdiomaMe), "le da un título Inglés a %s", PlayersDataOnline[strval(cmdtext[19])][NameOnlineFix]);
										format(MsgDarIdiomaInfo, sizeof(MsgDarIdiomaInfo), "Has dado un título de Inglés a %s", PlayersDataOnline[strval(cmdtext[19])][NameOnlineFix]);
										format(MsgDarIdiomaInfoToPlayer, sizeof(MsgDarIdiomaInfoToPlayer), "Has recibido un título de Inglés de %s", PlayersDataOnline[playerid][NameOnlineFix]);

										Acciones(playerid, 8, MsgDarIdiomaMe);
										SendInfoMessage(playerid, 3, "0", MsgDarIdiomaInfo);
										SendInfoMessage(strval(cmdtext[19]), 3, "0", MsgDarIdiomaInfoToPlayer);

										PlayersData[strval(cmdtext[19])][Idiomas][4] = true;
									}
									else
									{
										SendInfoMessage(playerid, 0, "457", "Ya ese jugador tiene un título de Inglés");
									}
							    }
						    }
							// COMANDO: /Dar Idioma Japonés [ID]
							else if (strfind(cmdtext, "/Dar Idioma Japonés ", true) == 0 || // 12
							  		 strfind(cmdtext, "/Dar Idioma Japones ", true) == 0)
						    {
							    if ( IsPlayerNear(playerid, strval(cmdtext[20]),
									 "456",
									 "455",
									 "454",
									 "El jugador que le deseas dar un título de Japonés no se encuentra conectado",
									 "El jugador que le deseas dar un título de Japonés no se ha logueado",
									 "El jugador que le deseas dar un título de Japonés no se encuentra cerca de tí") )
							    {
							        if ( !PlayersData[strval(cmdtext[20])][Idiomas][5] )
							        {
										new MsgDarIdiomaMe[MAX_TEXT_CHAT];
										new MsgDarIdiomaInfo[MAX_TEXT_CHAT];
										new MsgDarIdiomaInfoToPlayer[MAX_TEXT_CHAT];
										format(MsgDarIdiomaMe, sizeof(MsgDarIdiomaMe), "le da un título Japonés a %s", PlayersDataOnline[strval(cmdtext[20])][NameOnlineFix]);
										format(MsgDarIdiomaInfo, sizeof(MsgDarIdiomaInfo), "Has dado un título de Japonés a %s", PlayersDataOnline[strval(cmdtext[20])][NameOnlineFix]);
										format(MsgDarIdiomaInfoToPlayer, sizeof(MsgDarIdiomaInfoToPlayer), "Has recibido un título de Japonés de %s", PlayersDataOnline[playerid][NameOnlineFix]);

										Acciones(playerid, 8, MsgDarIdiomaMe);
										SendInfoMessage(playerid, 3, "0", MsgDarIdiomaInfo);
										SendInfoMessage(strval(cmdtext[20]), 3, "0", MsgDarIdiomaInfoToPlayer);

										PlayersData[strval(cmdtext[20])][Idiomas][5] = true;
									}
									else
									{
										SendInfoMessage(playerid, 0, "453", "Ya ese jugador tiene un título de Japonés");
									}
							    }
						    }
					        else
					        {
								SendInfoMessage(playerid, 0, "451", "Quizás quiso decir: /Dar Idioma {Alemán [ID], Francés [ID], Portugués [ID], Italiano [ID], Inglés [ID], Japonés [ID]}");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "452", "Usted no es profesor");
						}
				    }
					// COMANDO: /Dar Dados [ID]
			  		else if (strfind(cmdtext, "/Dar Dados ", true) == 0 )
				    {
					    if ( IsObjectInBolsillo(playerid, 2) )
					    {
						    if ( IsPlayerNear(playerid, strval(cmdtext[11]),
								 "1075",
								 "1076",
								 "1077",
								 "El jugador que le deseas dar los dados no se encuentra conectado",
								 "El jugador que le deseas dar los dados no se ha logueado",
								 "El jugador que le deseas dar los dados no se encuentra cerca de tí") )
						    {
						        if ( !IsObjectInBolsillo(strval(cmdtext[11]), 2) )
						        {
						            if ( IsNotFullBolsillo(playerid, strval(cmdtext[11]), "El jugador que le desea dar sus dados, tiene los bolsillos llenos") )
						            {
										RemoveObjectBolsillo(playerid, 2);
										AddObjectBolsillo(strval(cmdtext[11]), 2);
										new MsgMeDarDados[MAX_TEXT_CHAT];
										format(MsgMeDarDados, sizeof(MsgMeDarDados), "le ha dado unos dados a %s", PlayersDataOnline[strval(cmdtext[11])][NameOnlineFix]);
							        	Acciones(playerid, 8, MsgMeDarDados);
						        	}
								}
						        else
						        {
									SendInfoMessage(playerid, 0, "380", "El jugador que desea darle los dados ya tiene unos");
								}
					        }
						}
						else
						{
							SendInfoMessage(playerid, 0, "379", "Tú no tienes dados");
						}
				    }
					// COMANDO: /Dar Agenda [ID]
			  		else if (strfind(cmdtext, "/Dar Agenda ", true) == 0 )
				    {
					    if ( IsObjectInBolsillo(playerid, 4) )
					    {
						    if ( IsPlayerNear(playerid, strval(cmdtext[12]),
								 "1070",
								 "1071",
								 "1072",
								 "El jugador que le desea dar su agenda no se encuentra conectado",
								 "El jugador que le desea dar su agenda no se ha logueado",
								 "El jugador que le desea dar su agenda no se encuentra cerca de tí") )
						    {
						        if ( !IsObjectInBolsillo(strval(cmdtext[12]), 4) )
						        {
						            if ( IsNotFullBolsillo(playerid, strval(cmdtext[12]), "El jugador que le desea dar su agenda, tiene los bolsillos llenos") )
						            {
										RemoveObjectBolsillo(playerid, 4);
										AddObjectBolsillo(strval(cmdtext[12]), 4);

										for (new i = 0; i < MAX_PLAYER_CONTACT; i++)
										{
											format(AgendaData[strval(cmdtext[12])][i][NameC], MAX_AGENDA_NAME, "%s", AgendaData[playerid][i][NameC]);
											AgendaData[strval(cmdtext[12])][i][NumberC] = AgendaData[playerid][i][NumberC];
											AgendaData[strval(cmdtext[12])][i][IsBlackList] = AgendaData[playerid][i][IsBlackList];
										}

										new MsgMeDarDados[MAX_TEXT_CHAT];
										format(MsgMeDarDados, sizeof(MsgMeDarDados), "le ha dado una agenda a %s", PlayersDataOnline[strval(cmdtext[12])][NameOnlineFix]);
							        	Acciones(playerid, 8, MsgMeDarDados);
						        	}
								}
						        else
						        {
									SendInfoMessage(playerid, 0, "1069", "El jugador que desea darle su agenda ya tiene una");
								}
					        }
						}
						else
						{
							SendInfoMessage(playerid, 0, "1073", "Tú no tienes agenda!");
						}
				    }
					// COMANDO: /Dar Bolsa [ID]
			  		else if (strfind(cmdtext, "/Dar Bolsa ", true) == 0 )
				    {
				        new PlayerToGiveBolsa = strval(cmdtext[11]);
					    if ( PlayersData[playerid][HaveBolsa] )
					    {
						    if ( IsPlayerNear(playerid,PlayerToGiveBolsa,
								 "1232",
								 "1233",
								 "1234",
								 "El jugador que le desea dar su bolsa no se encuentra conectado",
								 "El jugador que le desea dar su bolsa no se ha logueado",
								 "El jugador que le desea dar su bolsa no se encuentra cerca de tí") )
						    {
						        if ( !PlayersData[PlayerToGiveBolsa][HaveBolsa] )
						        {
									PlayersData[playerid][HaveBolsa] = false;
									PlayersData[PlayerToGiveBolsa][HaveBolsa] = true;

									for(new i = 0; i<4; i++)
									{
										PlayersData[PlayerToGiveBolsa][Bolsa][i] = PlayersData[playerid][Bolsa][i];
										PlayersData[PlayerToGiveBolsa][BolsaC][i] = PlayersData[playerid][BolsaC][i];
									}
                                    CleanArticulosBolsa(playerid);

									new MsgMeDarBolsa[MAX_TEXT_CHAT];
									format(MsgMeDarBolsa, sizeof(MsgMeDarBolsa), "le ha dado una bolsa a %s", PlayersDataOnline[PlayerToGiveBolsa][NameOnlineFix]);
						        	Acciones(playerid, 8, MsgMeDarBolsa);
								}
						        else
						        {
									SendInfoMessage(playerid, 0, "1231", "El jugador que desea darle su bolsa ya tiene una");
								}
					        }
						}
						else
						{
							SendInfoMessage(playerid, 0, "1235", "Tú no tienes una bolsa");
						}
				    }
					// COMANDO: /Dar Patines [ID]
			  		else if (strfind(cmdtext, "/Dar Patines ", true) == 0 )
				    {
					    if ( IsObjectInBolsillo(playerid, 1) )
					    {
						    if ( IsPlayerNear(playerid, strval(cmdtext[13]),
								 "1078",
								 "1079",
								 "1080",
								 "El jugador que le deseas dar los patines no se encuentra conectado",
								 "El jugador que le deseas dar los patines no se ha logueado",
								 "El jugador que le deseas dar los patines no se encuentra cerca de tí") )
						    {
						        if ( !IsObjectInBolsillo(strval(cmdtext[13]), 1) )
						        {
						            if ( IsNotFullBolsillo(playerid, strval(cmdtext[13]), "El jugador que le desea dar sus patines, tiene los bolsillos llenos") )
						            {
										RemoveObjectBolsillo(playerid, 1);
										AddObjectBolsillo(strval(cmdtext[13]), 1);
										new MsgMeDarPatines[MAX_TEXT_CHAT];
										format(MsgMeDarPatines, sizeof(MsgMeDarPatines), "le ha dado unos patines a %s", PlayersDataOnline[strval(cmdtext[13])][NameOnlineFix]);
							        	Acciones(playerid, 8, MsgMeDarPatines);
						        	}
								}
						        else
						        {
									SendInfoMessage(playerid, 0, "378", "El jugador que desea darle los patines ya tiene unos");
								}
					        }
						}
						else
						{
							SendInfoMessage(playerid, 0, "377", "Tú no tienes patines");
						}
				    }
					// COMANDO: /Dar Cartera [ID] [ID_Cartera]
			  		else if (strfind(cmdtext, "/Dar Cartera ", true) == 0)
				    {
				        new PlayerGiveO = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
				        new CarteraID   = strval(cmdtext[GetPosSpace(cmdtext, 3)]);
					    if ( IsPlayerNear(playerid, PlayerGiveO,
							 "1325",
							 "1324",
							 "1326",
							 "El jugador que le deseas dar algo de su cartera no se encuentra conectado",
							 "El jugador que le deseas dar algo de su cartera no se ha logueado",
							 "El jugador que le deseas dar algo de su cartera no se encuentra cerca de tí") )
					    {
					        if ( CarteraID >= 1 && CarteraID <= MAX_COUNT_CARTERA )
					        {
						        if ( IsNotFullCartera(playerid, PlayerGiveO, "El jugador que desea darle algo de su cartera tiene su cartera llena!") )
						        {
						            CarteraID--;
						            if ( PlayersData[playerid][Cartera][CarteraID] != CARTERA_TYPE_NADA )
						            {
						                AddObjectToCartera(PlayerGiveO, PlayersData[playerid][Cartera][CarteraID], PlayersData[playerid][CarteraC][CarteraID], PlayersData[playerid][CarteraT][CarteraID], PlayersData[playerid][CarteraI][CarteraID]);
										new ObjectRemove = RemoveObjectToCartera(playerid, CarteraID);

  										new MsgMeCartera[MAX_TEXT_CHAT];

										format(MsgMeCartera, sizeof(MsgMeCartera), "le ha dado un %s a %s", CarteraNames[ObjectRemove], PlayersDataOnline[PlayerGiveO][NameOnlineFix]);
								        Acciones(playerid, 8, MsgMeCartera);

										new MsgDarCarteraME[MAX_TEXT_CHAT];
										new MsgDarCarteraYOU[MAX_TEXT_CHAT];
									    format(MsgDarCarteraME, sizeof(MsgDarCarteraME), "%s te dió un %s", PlayersDataOnline[playerid][NameOnlineFix], CarteraNames[ObjectRemove]);
									    format(MsgDarCarteraYOU, sizeof(MsgDarCarteraYOU), "Le díste un %s", CarteraNames[ObjectRemove], PlayersDataOnline[PlayerGiveO][NameOnlineFix]);
										SendInfoMessage(playerid, 2, "0", MsgDarCarteraYOU);
										SendInfoMessage(PlayerGiveO, 2, "0", MsgDarCarteraME);
						            }
						            else
						            {
										SendInfoMessage(playerid, 0, "1322", "No tienes nada en esa parte de la cartera!");
									}
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "1323", "El número de cartera debe estár comprendido entre 1 y 6");
							}
					    }
				    }
					// COMANDO: /Dar Móvil [ID]
			  		else if (strfind(cmdtext, "/Dar Móvil ", true) == 0 || strfind(cmdtext, "/Dar Movil ", true) == 0 )
				    {
					    if ( PlayersData[playerid][Phone] != 0 )
					    {
						    if (  PlayersDataOnline[playerid][InCall] == -1 )
						    {
							    if ( IsPlayerNear(playerid, strval(cmdtext[11]),
									 "1081",
									 "1082",
									 "1083",
									 "El jugador que le deseas dar su móvil no se encuentra conectado",
									 "El jugador que le deseas dar su móvil no se ha logueado",
									 "El jugador que le deseas dar su móvil no se encuentra cerca de tí") )
							    {
							        if ( PlayersData[strval(cmdtext[11])][Phone] == 0 )
							        {
										PlayersData[strval(cmdtext[11])][Phone] = PlayersData[playerid][Phone];
										PlayersData[playerid][Phone] = 0;
										RemoveObjectBolsillo(playerid, 3);
										AddObjectBolsillo(strval(cmdtext[11]), 3);

										new MsgMeDarMovil[MAX_TEXT_CHAT];
										format(MsgMeDarMovil, sizeof(MsgMeDarMovil), "le ha dado un móvil a %s", PlayersDataOnline[strval(cmdtext[11])][NameOnlineFix]);
							        	Acciones(playerid, 8, MsgMeDarMovil);
							        	
							        	new query[200];
							        	mysql_format(dataBase, query, 200, "UPDATE `%s` SET `Phone`='%i' WHERE `Nombre`='%e';", DIR_USERS, PlayersData[strval(cmdtext[11])][Phone], PlayersDataOnline[strval(cmdtext[11])][NameOnline]);
							        	mysql_query(dataBase, query, false);
							        	mysql_format(dataBase, query, 200, "UPDATE `%s` SET `Phone`='0' WHERE `Nombre`='%e';", DIR_USERS, PlayersData[playerid][Phone], PlayersDataOnline[playerid][NameOnline]);
							        	mysql_query(dataBase, query, false);
									}
							        else
							        {
										SendInfoMessage(playerid, 0, "374", "El jugador que desea darle su móvil ya tiene uno");
									}
						        }
							}
							else
							{
								SendInfoMessage(playerid, 0, "375", "Finalize su llamada telefónica antes de dar su móvil");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "376", "Tú no tienes móvil");
						}
				    }
					// COMANDO: /Dar Extorsión [ID]
			  		else if (strfind(cmdtext, "/Dar Extorsión ", true) == 0 || strfind(cmdtext, "/Dar Extorsion ", true) == 0)
				    {
				        if ( PlayersDataOnline[playerid][InPickup] >= NegociosData[1][PickupOutId] &&
				             PlayersDataOnline[playerid][InPickup] <= NegociosData[MAX_BIZZ][PickupOutId] )
				        {
				            if ( IsMyBizz(playerid, PlayersDataOnline[playerid][MyPickupWorld], true)  )
				            {
	                            if ( strlen(NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][Extorsion]) == 2 )
	                            {
								    if ( IsPlayerNear(playerid, strval(cmdtext[15]),
										 "1084",
										 "1085",
										 "1086",
										 "El jugador que le deseas darle el poder de extorsión de su negocio no se encuentra conectado",
										 "El jugador que le deseas darle el poder de extorsión de su negocio no se ha logueado",
										 "El jugador que le deseas darle el poder de extorsión de su negocio no se encuentra cerca de tí") )
								    {
									    format(NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][Extorsion], MAX_PLAYER_NAME, "%s", PlayersDataOnline[strval(cmdtext[15])][NameOnline]);
										new MsgToMe[MAX_TEXT_CHAT];
										new MsgToExtorsionista[MAX_TEXT_CHAT];
										format(MsgToMe, sizeof(MsgToMe), "Has dado el poder de extorsión de este negocio a %s", PlayersDataOnline[strval(cmdtext[15])][NameOnlineFix]);
										format(MsgToExtorsionista, sizeof(MsgToExtorsionista), "%s te ha dado el poder de extorsionarle este negocio", PlayersDataOnline[playerid][NameOnlineFix]);
										SendInfoMessage(playerid, 3, "0", MsgToMe);
										SendInfoMessage(strval(cmdtext[15]), 3, "0", MsgToExtorsionista);
										ActTextDrawBizz(PlayersDataOnline[playerid][MyPickupWorld]);
								    }
								}
								else
								{
									SendInfoMessage(playerid, 0, "352", "Sólo puede haber un extorsionista por negocio");
								}
				            }
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "320", "No te encuentras en ningún negocio");
						}
				    }
					// COMANDO: /Dar Llaves Amigo [ID]
			  		else if (strfind(cmdtext, "/Dar Llaves Amigo ", true) == 0)
				    {
				        if ( PlayersDataOnline[playerid][InPickup] >= HouseData[1][PickupId] &&
					         PlayersDataOnline[playerid][InPickup] <= HouseData[MAX_HOUSE][PickupId] )
				        {
							new HouseId = PlayersDataOnline[playerid][MyPickupWorld];
							if ( IsMyHouse(playerid, HouseId) )
				            {
							    if ( IsPlayerNear(playerid, strval(cmdtext[18]),
									 "1211",
									 "1212",
									 "1213",
									 "El jugador que le deseas dar las llaves de la casa no se encuentra conectado",
									 "El jugador que le deseas dar las llaves de la casa no se ha logueado",
									 "El jugador que le deseas dar las llaves de la casa no se encuentra cerca de tí") )
							    {
									if ( IsPlayerInHouseFriend(strval(cmdtext[18]), PlayersDataOnline[playerid][MyPickupWorld]) == -1 )
									{
										AddPlayerHouseFriend(strval(cmdtext[18]), PlayersDataOnline[playerid][MyPickupWorld]);

										new MsgLlavesCasaToMe[MAX_TEXT_CHAT];
										new MsgLlavesCasaToYou[MAX_TEXT_CHAT];
										new MsgLlavesCasaMe[MAX_TEXT_CHAT];
										format(MsgLlavesCasaMe, sizeof(MsgLlavesCasaMe), "le da una copia de las llaves de su casa a %s", PlayersDataOnline[strval(cmdtext[18])][NameOnlineFix]);
										format(MsgLlavesCasaToMe, sizeof(MsgLlavesCasaToMe), "Le diste una copia de las llaves de tu casa a %s", PlayersDataOnline[strval(cmdtext[18])][NameOnlineFix]);
										format(MsgLlavesCasaToYou, sizeof(MsgLlavesCasaToYou), "%s te dió una copia de las llaves de su casa", PlayersDataOnline[playerid][NameOnlineFix]);

										Acciones(playerid, 8, MsgLlavesCasaMe);
										SendInfoMessage(playerid, 3, "0", MsgLlavesCasaToMe);
										SendInfoMessage(strval(cmdtext[18]), 3, "0", MsgLlavesCasaToYou);
									}
									else
									{
										SendInfoMessage(playerid, 0, "1214", "Ya este jugador tiene las llaves de tu casa");
									}
							    }
							}
							else
							{
								SendInfoMessage(playerid, 0, "1209", "Ésta no es su casa");
							}
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "1210", "No te encuentras en ninguna casa");
						}
					}
					// COMANDO: /Dar Llaves [ID]
			  		else if (strfind(cmdtext, "/Dar Llaves ", true) == 0)
				    {
						new MyNearCar = IsPlayerInNearVehicle(playerid);
						if ( MyNearCar )
						{
							if ( IsVehicleMyVehicle(playerid, MyNearCar)  )
							{
							    if ( IsPlayerNear(playerid, strval(cmdtext[12]),
									 "340",
									 "341",
									 "342",
									 "El jugador que le deseas dar las llaves de su vehículo no se encuentra conectado",
									 "El jugador que le deseas dar las llaves de su vehículo no se ha logueado",
									 "El jugador que le deseas dar las llaves de su vehículo no se encuentra cerca de tí") )
							    {
									if ( PlayersData[strval(cmdtext[12])][Car] == -1 )
									{
										PlayersDataOnline[playerid][DarLlaves] = strval(cmdtext[12]);
										new MsgDialogDarLlaves[MAX_TEXT_CHAT];
										format( MsgDialogDarLlaves , sizeof(MsgDialogDarLlaves), "{F0F0F0}¿Seguro que quiere darle las llaves de su vehículo a %s?\n{F50000}IMPORTANTE: Perderá totalemnte el control de su vehículo!", PlayersDataOnline[strval(cmdtext[12])][NameOnlineFix]);
										ShowPlayerDialogEx(playerid, 7, DIALOG_STYLE_MSGBOX, "{00A5FF}Pasar llaves de jugador a jugador", MsgDialogDarLlaves, "Si", "No");
									}
									else
									{
										SendInfoMessage(playerid, 0, "339", "El jugador que le desea dar las llaves de su vehículo, ya tiene uno");
									}
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "338", "Este no es su vehículo");
							}
						}
				    }

					// COMANDO: /Dar Artículo [ID] [ID_Bolsa]
			  		else if (strfind(cmdtext, "/Dar Artículo ", true) == 0 ||
					  		 strfind(cmdtext, "/Dar Articulo ", true) == 0)
				    {
				        new playeridBolsa = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
				        new BolsaID = strval(cmdtext[GetPosSpace(cmdtext, 3)]);
					    if ( IsPlayerNear(playerid, strval(cmdtext[13]),
							 "1250",
							 "1251",
							 "1252",
							 "El jugador que le deseas dar un chaleco no se encuentra conectado",
							 "El jugador que le deseas dar un chaleco no se ha logueado",
							 "El jugador que le deseas dar un chaleco no se encuentra cerca de tí") )
					    {
							GiveArticlePlayerToPlayer(playerid, playeridBolsa, BolsaID);
						}
				    }
					// COMANDO: /Dar Chaleco [ID]
			  		else if (strfind(cmdtext, "/Dar Chaleco ", true) == 0)
				    {
					    if ( IsPlayerNear(playerid, strval(cmdtext[13]),
							 "273",
							 "274",
							 "275",
							 "El jugador que le deseas dar un chaleco no se encuentra conectado",
							 "El jugador que le deseas dar un chaleco no se ha logueado",
							 "El jugador que le deseas dar un chaleco no se encuentra cerca de tí") )
					    {
							new Float:Chaleco1;
							GetPlayerArmour(playerid, Chaleco1);
							if ( Chaleco1 != 0.0 )
							{
								new MsgDarMe[MAX_TEXT_CHAT];
								new MsgDar[MAX_TEXT_CHAT];

								SetPlayerArmourEx(strval(cmdtext[13]), Chaleco1);
								SetPlayerArmourEx(playerid, -Chaleco1);

								format(MsgDar, sizeof(MsgDar), "Le has dado un chaleco a %s", PlayersDataOnline[strval(cmdtext[13])][NameOnlineFix]);
								format(MsgDarMe, sizeof(MsgDarMe), "le ha dado un chaleco a %s", PlayersDataOnline[strval(cmdtext[13])][NameOnlineFix]);
						        Acciones(playerid, 8, MsgDarMe);
						        SendInfoMessage(playerid, 2, "0", MsgDar);
							}
							else
							{
								SendInfoMessage(playerid, 0, "276", "Usted no tienes ningún chaleco puesto encima.");
							}
						}
				    }
					// COMANDO: /Dar Arma [ID]
			  		else if (strfind(cmdtext, "/Dar Arma ", true) == 0)
				    {
					    if ( IsPlayerNear(playerid, strval(cmdtext[10]),
							 "277",
							 "278",
							 "279",
							 "El jugador que le deseas darle un arma no se encuentra conectado",
							 "El jugador que le deseas darle un arma no se ha logueado",
							 "El jugador que le deseas darle un arma no se encuentra cerca de tí") )
					    {
							new MyWeapons, MyAmmo; MyWeapons = GetPlayerWeapon(playerid); MyAmmo = GetPlayerAmmo(playerid);
					        if ( CheckWeapondCheat(playerid) && CheckWeapondCheat(strval(cmdtext[10])) && MyWeapons != 0)
					        {
					            if ( IsPlayerNotVehicleWeapondAction(playerid, strval(cmdtext[10])) )
					            {
						            RemovePlayerWeapond(playerid, MyWeapons);
						            GivePlayerWeaponEx(strval(cmdtext[10]), MyWeapons, MyAmmo);

									new MsgDar[MAX_TEXT_CHAT];
									new MsgDarMe[MAX_TEXT_CHAT];
							        format(MsgDar, sizeof(MsgDar), "Le has dado %s a %s.", SlotNameWeapon[MyWeapons], PlayersDataOnline[strval(cmdtext[10])][NameOnlineFix]);
							        format(MsgDarMe, sizeof(MsgDarMe), "le ha dado un arma tipo %s a %s", SlotNameWeapon[MyWeapons], PlayersDataOnline[strval(cmdtext[10])][NameOnlineFix]);
							        Acciones(playerid, 8, MsgDarMe);
							        SendInfoMessage(playerid, 2, "0", MsgDar);
						        }
							}
							else
							{
								SendInfoMessage(playerid, 0, "280", "No tienes un arma en las manos!");
							}
					    }
				    }
					// COMANDO: /Dar ArmaEx [ID] [Munición]
			  		else if (strfind(cmdtext, "/Dar ArmaEx ", true) == 0)
				    {
				        new PlayerGiveWeapon = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
				        new AmmoWeapon = strval(cmdtext[GetPosSpace(cmdtext, 3)]);
					    if ( IsPlayerNear(playerid, PlayerGiveWeapon,
							 "982",
							 "987",
							 "988",
							 "El jugador que le deseas darle un arma no se encuentra conectado",
							 "El jugador que le deseas darle un arma no se ha logueado",
							 "El jugador que le deseas darle un arma no se encuentra cerca de tí") )
					    {
							new MyWeapons, MyAmmo; MyWeapons = GetPlayerWeapon(playerid); MyAmmo = GetPlayerAmmo(playerid);
							new YouWeapons, YouAmmo; YouWeapons = GetPlayerWeapon(PlayerGiveWeapon); YouAmmo = GetPlayerAmmo(PlayerGiveWeapon);
					        if ( CheckWeapondCheat(playerid) && CheckWeapondCheat(PlayerGiveWeapon) && IsNotOneWeapon(MyWeapons) )
					        {
					            if ( IsPlayerNotVehicleWeapondAction(playerid, PlayerGiveWeapon) )
					            {
						            if ( MyAmmo >= 2 )
						            {
						                if ( MyWeapons == YouWeapons )
						                {
						                    if ( MyAmmo > AmmoWeapon )
						                    {
									            RemovePlayerWeapond(playerid, MyWeapons);
									            GivePlayerWeaponEx(playerid, MyWeapons, MyAmmo - AmmoWeapon);

									            RemovePlayerWeapond(PlayerGiveWeapon, MyWeapons);
									            GivePlayerWeaponEx(PlayerGiveWeapon, MyWeapons, YouAmmo + AmmoWeapon);

												new MsgDar[MAX_TEXT_CHAT];
												new MsgDarYou[MAX_TEXT_CHAT];
												new MsgDarMe[MAX_TEXT_CHAT];
										        format(MsgDar, sizeof(MsgDar), "Le has dado %i de munición de un arma %s a %s.", AmmoWeapon, SlotNameWeapon[MyWeapons], PlayersDataOnline[PlayerGiveWeapon][NameOnlineFix]);
										        format(MsgDarYou, sizeof(MsgDarYou), "%s te ha dado %i de munición de un arma %s.", PlayersDataOnline[playerid][NameOnlineFix], AmmoWeapon, SlotNameWeapon[MyWeapons]);
										        format(MsgDarMe, sizeof(MsgDarMe), "le ha dado algunas municiones de un arma tipo %s a %s", SlotNameWeapon[MyWeapons], PlayersDataOnline[PlayerGiveWeapon][NameOnlineFix]);
										        Acciones(playerid, 8, MsgDarMe);
										        SendInfoMessage(playerid, 2, "0", MsgDar);
										        SendInfoMessage(PlayerGiveWeapon, 2, "0", MsgDarYou);
									        }
									        else
									        {
												SendInfoMessage(playerid, 0, "983", "No tienes esa cantidad de munición para dar!");
											}
								        }
								        else
								        {
											SendInfoMessage(playerid, 0, "984", "El jugador que desea dárle municiones, debe tener la misma arma en la mano para dárselas");
										}
							        }
							        else
							        {
										SendInfoMessage(playerid, 0, "985", "Mínimo tienes que tener 2 de munición a dar");
									}
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "986", "No tienes un arma en las manos que puedas dar municiones!");
							}
					    }
				    }
					// COMANDO: /Dar Drogas [ID] [Cantidad]
			  		else if (strfind(cmdtext, "/Dar Drogas ", true) == 0)
				    {
				        new playeridto	= strval(cmdtext[GetPosSpace(cmdtext, 2)]);
				        new TheOption 	= strval(cmdtext[GetPosSpace(cmdtext, 3)]);
					    if ( IsPlayerNear(playerid, playeridto,
							 "627",
							 "625",
							 "626",
							 "El jugador que le deseas darle drogas no se encuentra conectado",
							 "El jugador que le deseas darle drogas no se ha logueado",
							 "El jugador que le deseas darle drogas no se encuentra cerca de tí") )
					    {
					        if ( PlayersData[playerid][Drogas] > 0 && PlayersData[playerid][Drogas] >= TheOption )
					        {
					            new MsgDarTempMe[MAX_TEXT_CHAT];
					            new MsgDarTemp[MAX_TEXT_CHAT];
					            new MsgDarTempToPlayer[MAX_TEXT_CHAT];
					            format(MsgDarTempMe, sizeof(MsgDarTempMe)	, "le da unas drogas a %s", PlayersDataOnline[playeridto][NameOnlineFix]);
					            format(MsgDarTemp, sizeof(MsgDarTemp)		, "Le has dado %i drogas a %s", TheOption, PlayersDataOnline[playeridto][NameOnlineFix]);
					            format(MsgDarTempToPlayer, sizeof(MsgDarTempToPlayer)	, "%s te ha dado %i drogas", PlayersDataOnline[playerid][NameOnlineFix], TheOption);
						        Acciones(playerid, 8, MsgDarTempMe);
						        SendInfoMessage(playerid, 2, "0", MsgDarTemp);
						        SendInfoMessage(playeridto, 2, "0", MsgDarTempToPlayer);

						        PlayersData[playerid][Drogas] = PlayersData[playerid][Drogas] - TheOption;
						        PlayersData[playeridto][Drogas] = PlayersData[playeridto][Drogas] + TheOption;
							}
							else
							{
								SendInfoMessage(playerid, 0, "624", "No tienes esa cantidad de drogas para dar!");
							}
					    }
				    }
					// COMANDO: /Dar Ganzúas [ID] [Cantidad]
			  		else if (strfind(cmdtext, "/Dar Ganzúas ", true) == 0 ||
						     strfind(cmdtext, "/Dar Ganzuas ", true) == 0)
				    {
				        new playeridto	= strval(cmdtext[GetPosSpace(cmdtext, 2)]);
				        new TheOption 	= strval(cmdtext[GetPosSpace(cmdtext, 3)]);
					    if ( IsPlayerNear(playerid, playeridto,
							 "622",
							 "622",
							 "620",
							 "El jugador que le deseas darle ganzúas no se encuentra conectado",
							 "El jugador que le deseas darle ganzúas no se ha logueado",
							 "El jugador que le deseas darle ganzúas no se encuentra cerca de tí") )
					    {
					        if ( PlayersData[playerid][Ganzuas] > 0 && PlayersData[playerid][Ganzuas] >= TheOption )
					        {
					            new MsgDarTempMe[MAX_TEXT_CHAT];
					            new MsgDarTemp[MAX_TEXT_CHAT];
					            new MsgDarTempToPlayer[MAX_TEXT_CHAT];
					            format(MsgDarTempMe, sizeof(MsgDarTempMe)	, "le da unas ganzúas a %s", PlayersDataOnline[playeridto][NameOnlineFix]);
					            format(MsgDarTemp, sizeof(MsgDarTemp)		, "Le has dado %i ganzúas a %s", TheOption, PlayersDataOnline[playeridto][NameOnlineFix]);
					            format(MsgDarTempToPlayer, sizeof(MsgDarTempToPlayer)	, "%s te ha dado %i ganzúas", PlayersDataOnline[playerid][NameOnlineFix], TheOption);
						        Acciones(playerid, 8, MsgDarTempMe);
						        SendInfoMessage(playerid, 2, "0", MsgDarTemp);
						        SendInfoMessage(playeridto, 2, "0", MsgDarTempToPlayer);

						        PlayersData[playerid][Ganzuas] = PlayersData[playerid][Ganzuas] - TheOption;
						        PlayersData[playeridto][Ganzuas] = PlayersData[playeridto][Ganzuas] + TheOption;
							}
							else
							{
								SendInfoMessage(playerid, 0, "621", "No tienes esa cantidad de ganzúas para dar!");
							}
					    }
				    }
					// COMANDO: /Dar Materiales [ID] [Cantidad]
			  		else if (strfind(cmdtext, "/Dar Materiales ", true) == 0)
				    {
				        new playeridto	= strval(cmdtext[GetPosSpace(cmdtext, 2)]);
				        new TheOption 	= strval(cmdtext[GetPosSpace(cmdtext, 3)]);
					    if ( IsPlayerNear(playerid, playeridto,
							 "619",
							 "618",
							 "617",
							 "El jugador que le deseas darle Materiales no se encuentra conectado",
							 "El jugador que le deseas darle Materiales no se ha logueado",
							 "El jugador que le deseas darle Materiales no se encuentra cerca de tí") )
					    {
					        if ( PlayersData[playerid][Materiales] > 0 && PlayersData[playerid][Materiales] >= TheOption )
					        {
					            if ( IsNotFullMaterialsPlayer(playeridto, TheOption) )
					            {
						            new MsgDarTempMe[MAX_TEXT_CHAT];
						            new MsgDarTemp[MAX_TEXT_CHAT];
						            new MsgDarTempToPlayer[MAX_TEXT_CHAT];
						            format(MsgDarTempMe, sizeof(MsgDarTempMe)	, "le da unas Materiales a %s", PlayersDataOnline[playeridto][NameOnlineFix]);
						            format(MsgDarTemp, sizeof(MsgDarTemp)		, "Le has dado %i Materiales a %s", TheOption, PlayersDataOnline[playeridto][NameOnlineFix]);
						            format(MsgDarTempToPlayer, sizeof(MsgDarTempToPlayer)	, "%s te ha dado %i Materiales", PlayersDataOnline[playerid][NameOnlineFix], TheOption);
							        Acciones(playerid, 8, MsgDarTempMe);
							        SendInfoMessage(playerid, 2, "0", MsgDarTemp);
							        SendInfoMessage(playeridto, 2, "0", MsgDarTempToPlayer);

							        PlayersData[playerid][Materiales] = PlayersData[playerid][Materiales] - TheOption;
							        PlayersData[playeridto][Materiales] = PlayersData[playeridto][Materiales] + TheOption;
						        }
						        else
						        {
							    	SendInfoMessage(playerid, 0, "980", "Al jugador que le deseas dar los materiales, no le cabe esa cantidad indícada!");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "616", "No tienes esa cantidad de Materiales para dar!");
							}
					    }
				    }
					// COMANDO: /Dar Bombas [ID] [Cantidad]
			  		else if (strfind(cmdtext, "/Dar Bombas ", true) == 0)
				    {
				        new playeridto	= strval(cmdtext[GetPosSpace(cmdtext, 2)]);
				        new TheOption 	= strval(cmdtext[GetPosSpace(cmdtext, 3)]);
					    if ( IsPlayerNear(playerid, playeridto,
							 "615",
							 "614",
							 "613",
							 "El jugador que le deseas darle Bombas no se encuentra conectado",
							 "El jugador que le deseas darle Bombas no se ha logueado",
							 "El jugador que le deseas darle Bombas no se encuentra cerca de tí") )
					    {
					        if ( PlayersData[playerid][Bombas] > 0 && PlayersData[playerid][Bombas] >= TheOption )
					        {
					            new MsgDarTempMe[MAX_TEXT_CHAT];
					            new MsgDarTemp[MAX_TEXT_CHAT];
					            new MsgDarTempToPlayer[MAX_TEXT_CHAT];
					            format(MsgDarTempMe, sizeof(MsgDarTempMe)	, "le da unas Bombas a %s", PlayersDataOnline[playeridto][NameOnlineFix]);
					            format(MsgDarTemp, sizeof(MsgDarTemp)		, "Le has dado %i Bombas a %s", TheOption, PlayersDataOnline[playeridto][NameOnlineFix]);
					            format(MsgDarTempToPlayer, sizeof(MsgDarTempToPlayer)	, "%s te ha dado %i Bombas", PlayersDataOnline[playerid][NameOnlineFix], TheOption);
						        Acciones(playerid, 8, MsgDarTempMe);
						        SendInfoMessage(playerid, 2, "0", MsgDarTemp);
						        SendInfoMessage(playeridto, 2, "0", MsgDarTempToPlayer);

						        PlayersData[playerid][Bombas] = PlayersData[playerid][Bombas] - TheOption;
						        PlayersData[playeridto][Bombas] = PlayersData[playeridto][Bombas] + TheOption;
							}
							else
							{
								SendInfoMessage(playerid, 0, "612", "No tienes esa cantidad de Bombas para dar!");
							}
					    }
				    }
				    else
				    {
						SendInfoMessage(playerid, 0, "272", "Quizás quiso decir: /Dar {Arma [ID], ArmaEx [ID] [Munición], Chaleco [ID], Drogas [ID] [Cantidad], Ganzúas [ID] [Cantidad]}");
						SendInfoMessage(playerid, 0, "272", "Quizás quiso decir: /Dar {Materiales [ID] [Cantidad], Habilidad [ID] [ID_Habilidad], Bombas [ID] [Cantidad], Llaves [ID]}");
						SendInfoMessage(playerid, 0, "272", "Quizás quiso decir: /Dar {Extorsión [ID], Dados [ID], Móvil [ID], Patines [ID], Llaves Amigo [ID], Artículo [ID] [ID_Bolsa]}");
						SendInfoMessage(playerid, 0, "272", "Quizás quiso decir: /Dar {Cartera [ID] [ID_Cartera]}");
					}
			    }
				// COMANDO: /Reportar [ID] [Razón]
				else if (strfind(cmdtext, "/Reportar ", true) == 0)
				{
					if (strval(cmdtext[10]) != playerid)
					{
						if (IsPlayerConnected(strval(cmdtext[10])) )
						{
							new MsgReportarInputText[MAX_TEXT_CHAT];
							PlayersDataOnline[playerid][MyLastIdReport] = strval(cmdtext[10]);
							format(MsgReportarInputText, sizeof(MsgReportarInputText), "{00A5FF}Reportar a %s", PlayersDataOnline[strval(cmdtext[10])][NameOnlineFix]);
						    ShowPlayerDialogEx(playerid, 11, DIALOG_STYLE_INPUT, MsgReportarInputText, "{F0F0F0}Describa brevemente la razón de su reporte", "Reportar", "Cancelar");
	   						return 1;
						}
						else
						{
							SendInfoMessage(playerid, 0, "283", "El jugador que desea reportar no se encuentra connectado");
							return 1;
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "284", "La ID que has introducído es la suya.");
	                    return 1;
					}
				}
				// COMANDO: /Aceptar
				else if (strfind(cmdtext, "/Aceptar", true) == 0)
				{
				    // COMANDO: /Aceptar Reparación
				  	if (strcmp("/Aceptar Reparación", cmdtext, true, 19) == 0 && strlen(cmdtext) == 19 ||
					    strcmp("/Aceptar Reparacion", cmdtext, true, 19) == 0 && strlen(cmdtext) == 19)
			    	{
			    	    if ( PlayersDataOnline[playerid][VRepair][0] != -1 )
			    	    {
				            if ( IsPlayerInTallerEx(playerid) )
				            {
				                if (IsPlayerInAnyVehicle(playerid))
				                {
						            if ( PlayersData[playerid][Dinero] >= PlayersDataOnline[playerid][VRepair][1] )
						            {
										new MsgRepair[MAX_TEXT_CHAT];
										format(MsgRepair, sizeof(MsgRepair), "Reparó éste vehículo por $%i", PlayersDataOnline[playerid][VRepair][1]);
				                        SendInfoMessage(playerid, 3, "0", MsgRepair);
										if ( IsPlayerConnected(PlayersDataOnline[playerid][VRepair][0]) )
										{
											new MsgRepairToPlayer[MAX_TEXT_CHAT];
											format(MsgRepairToPlayer, sizeof(MsgRepairToPlayer), "Has reparado el vehículo de %s por $%i", PlayersDataOnline[playerid][NameOnlineFix], PlayersDataOnline[playerid][VRepair][1]);
					                        SendInfoMessage(PlayersDataOnline[playerid][VRepair][0], 3, "0", MsgRepairToPlayer);
										}
										FaccionData[PlayersData[PlayersDataOnline[playerid][VRepair][0]][Faccion]][Deposito] = FaccionData[PlayersData[PlayersDataOnline[playerid][VRepair][0]][Faccion]][Deposito] + PlayersDataOnline[playerid][VRepair][1];

										RepairVehicle(GetPlayerVehicleID(playerid));
										SetVehicleHealthEx(GetPlayerVehicleID(playerid), 1000.0);

	    								GivePlayerMoneyEx(playerid, -PlayersDataOnline[playerid][VRepair][1]);

										PlayersDataOnline[playerid][VRepair][0] = -1;
										PlayersDataOnline[playerid][VRepair][1] = -1;
										new Float:SaveRepair = 1000.0;
								    	UpdateDamage(playerid, SaveRepair);
									}
									else
									{
										SendInfoMessage(playerid, 0, "696", "No tienes suficiente dinero para reparar el vehículo a ese precio!");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "697", "Suba nuevamente al vehículo q que deseaba reparar");
								}
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "698", "No has recibido ninguna oferta de reparación!");
						}
					}
				    // COMANDO: /Aceptar aceíte
				  	else if (strcmp("/Aceptar Aceíte", cmdtext, true, 15) == 0 && strlen(cmdtext) == 15 ||
					    strcmp("/Aceptar Aceite", cmdtext, true, 15) == 0 && strlen(cmdtext) == 15)
			    	{
			    	    if ( PlayersDataOnline[playerid][VAceite][0] != -1 )
			    	    {
				            if ( IsPlayerInTallerEx(playerid) )
				            {
				                if (IsPlayerInAnyVehicle(playerid))
				                {
						            if ( PlayersData[playerid][Dinero] >= PlayersDataOnline[playerid][VAceite][1] )
						            {
										new MsgRepair[MAX_TEXT_CHAT];
										format(MsgRepair, sizeof(MsgRepair), "Relleno de aceíte éste vehículo por $%i", PlayersDataOnline[playerid][VAceite][1]);
				                        SendInfoMessage(playerid, 3, "0", MsgRepair);
										if ( IsPlayerConnected(PlayersDataOnline[playerid][VAceite][0]) )
										{
											new MsgRepairToPlayer[MAX_TEXT_CHAT];
											format(MsgRepairToPlayer, sizeof(MsgRepairToPlayer), "Has rellenado éste vehículo de aceíte a %s por $%i", PlayersDataOnline[playerid][NameOnlineFix], PlayersDataOnline[playerid][VAceite][1]);
					                        SendInfoMessage(PlayersDataOnline[playerid][VAceite][0], 3, "0", MsgRepairToPlayer);
										}
										FaccionData[PlayersData[PlayersDataOnline[playerid][VAceite][0]][Faccion]][Deposito] = FaccionData[PlayersData[PlayersDataOnline[playerid][VAceite][0]][Faccion]][Deposito] + PlayersDataOnline[playerid][VAceite][1];

										DataCars[GetPlayerVehicleID(playerid)][Oil] = MAX_OIL_VEHICLE;

	    								GivePlayerMoneyEx(playerid, -PlayersDataOnline[playerid][VAceite][1]);

										PlayersDataOnline[playerid][VAceite][0] = -1;
										PlayersDataOnline[playerid][VAceite][1] = -1;

										UpdateGasAndOil(GetPlayerVehicleID(playerid));
									}
									else
									{
										SendInfoMessage(playerid, 0, "1129", "No tienes suficiente dinero para rellenar de aceíte el vehículo a ese precio!");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "1130", "Suba nuevamente al vehículo que deseaba rellenar de aceíte");
								}
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1131", "No has recibido ninguna oferta de aceíte!");
						}
					}
				    // COMANDO: /Aceptar Protección   VProteger
				  	else if (strcmp("/Aceptar Protección", cmdtext, true, 19) == 0 && strlen(cmdtext) == 19 ||
							 strcmp("/Aceptar Proteccion", cmdtext, true, 19) == 0 && strlen(cmdtext) == 19 )
			    	{
			    	    if ( PlayersDataOnline[playerid][VProteger][0] != -1 )
			    	    {
						    if ( IsPlayerNear(playerid, PlayersDataOnline[playerid][VProteger][0],
								 "727",
								 "728",
								 "729",
								 "El jugador que le iva a proteger se a desconectado",
								 "El jugador que le iva a proteger no se ha logueado",
								 "El jugador que le iva a proteger no se encuentra cerca de tí") )
						    {
					            if ( PlayersData[playerid][Dinero] >= PlayersDataOnline[playerid][VProteger][1] )
					            {
										new MsgProteger[MAX_TEXT_CHAT];
										new MsgProtegerToPlayer[MAX_TEXT_CHAT];
										format(MsgProteger, sizeof(MsgProteger), "Has aceptado que el Guardaespaldas %s te proteja por $%i", PlayersDataOnline[PlayersDataOnline[playerid][VProteger][0]][NameOnlineFix], PlayersDataOnline[playerid][VProteger][1]);
										format(MsgProtegerToPlayer, sizeof(MsgProtegerToPlayer), "%s a aceptado que lo protejas por $%i", PlayersDataOnline[playerid][NameOnlineFix],  PlayersDataOnline[playerid][VProteger][1]);

										SendInfoMessage(playerid, 3, "0", MsgProteger);
										SendInfoMessage(PlayersDataOnline[playerid][VProteger][0],3, "0", MsgProtegerToPlayer);

										GivePlayerMoneyEx(playerid, -PlayersDataOnline[playerid][VProteger][1]);
										GivePlayerMoneyEx(PlayersDataOnline[playerid][VProteger][0], PlayersDataOnline[playerid][VProteger][1]);

										SetPlayerArmourEx(playerid, 80.0);
										SetPlayerArmourEx(PlayersDataOnline[playerid][VProteger][0], 80.0);
								}
								else
								{
									SendInfoMessage(playerid, 0, "730", "No tienes suficiente dinero para que te protejan");
								}
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "731", "No has recibido ninguna oferta de protección!");
						}
						PlayersDataOnline[playerid][VProteger][0] = -1;
						PlayersDataOnline[playerid][VProteger][1] = -1;
			    	}
				    // COMANDO: /Aceptar Drogas
				  	else if (strcmp("/Aceptar Drogas", cmdtext, true, 15) == 0 && strlen(cmdtext) == 15)
			    	{
			    	    if ( PlayersDataOnline[playerid][VDrogas][0] != -1 )
			    	    {
						    if ( IsPlayerNear(playerid, PlayersDataOnline[playerid][VDrogas][0],
								 "752",
								 "753",
								 "751",
								 "El jugador que le iva a comprar drogas se a desconectado",
								 "El jugador que le iva a comprar drogas no se ha logueado",
								 "El jugador que le iva a comprar drogas no se encuentra cerca de tí") )
						    {
					            if ( PlayersData[playerid][Dinero] >= PlayersDataOnline[playerid][VDrogas][1] )
					            {
										new MsgDrogas[MAX_TEXT_CHAT];
										new MsgDrogasToPlayer[MAX_TEXT_CHAT];
										format(MsgDrogas, sizeof(MsgDrogas), "Has comprado %i drogas, a el vendedor de drogas %s, por $%i", PlayersDataOnline[playerid][VDrogas][2], PlayersDataOnline[PlayersDataOnline[playerid][VDrogas][0]][NameOnlineFix], PlayersDataOnline[playerid][VDrogas][1]);
										format(MsgDrogasToPlayer, sizeof(MsgDrogasToPlayer), "%s te ha comprado %i drogas por $%i", PlayersDataOnline[playerid][NameOnlineFix],  PlayersDataOnline[playerid][VDrogas][2], PlayersDataOnline[playerid][VDrogas][1]);

										SendInfoMessage(playerid, 3, "0", MsgDrogas);
										SendInfoMessage(PlayersDataOnline[playerid][VDrogas][0],3, "0", MsgDrogasToPlayer);

										GivePlayerMoneyEx(playerid, -PlayersDataOnline[playerid][VDrogas][1]);
										GivePlayerMoneyEx(PlayersDataOnline[playerid][VDrogas][0], PlayersDataOnline[playerid][VDrogas][1]);

										PlayersData[playerid][Drogas] = PlayersData[playerid][Drogas] + PlayersDataOnline[playerid][VDrogas][2];
										PlayersData[PlayersDataOnline[playerid][VDrogas][0]][Drogas] = PlayersData[PlayersDataOnline[playerid][VDrogas][0]][Drogas] - PlayersDataOnline[playerid][VDrogas][2];
								}
								else
								{
									SendInfoMessage(playerid, 0, "754", "No tienes suficiente dinero para comprar esas drogas!");
								}
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "755", "No has recibido ninguna oferta de drogas!");
						}
						PlayersDataOnline[playerid][VDrogas][0] = -1;
						PlayersDataOnline[playerid][VDrogas][1] = -1;
						PlayersDataOnline[playerid][VDrogas][2] = -1;
			    	}
				    // COMANDO: /Aceptar Móvil
				  	else if (strcmp("/Aceptar Móvil", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14 ||
		  			    	 strcmp("/Aceptar Movil", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
			    	{
			    	    if ( PlayersDataOnline[playerid][VPhone][0] != -1 )
			    	    {
						    if ( IsPlayerNear(playerid, PlayersDataOnline[playerid][VPhone][0],
								 "1470",
								 "1471",
								 "1472",
								 "El jugador que le iva a comprar un móvil se a desconectado",
								 "El jugador que le iva a comprar un móvil no se ha logueado",
								 "El jugador que le iva a comprar un móvil no se encuentra cerca de tí") )
						    {
						        if ( !PlayersData[playerid][Phone] )
						        {
						            if ( PlayersData[playerid][Dinero] >= PlayersDataOnline[playerid][VPhone][1] )
						            {
								        if ( PlayersDataOnline[playerid][VPhone][2] == 0 && BuyPhone24_7(playerid) || BuyPhoneNow(playerid, PlayersDataOnline[playerid][VPhone][2]) )
								        {
											new MsgMovil[MAX_TEXT_CHAT];
											new MsgMovilToPlayer[MAX_TEXT_CHAT];
											format(MsgMovil, sizeof(MsgMovil), "Has comprado un móvil a el vendedor de móviles %s, por $%i", PlayersDataOnline[PlayersDataOnline[playerid][VPhone][0]][NameOnlineFix], PlayersDataOnline[playerid][VPhone][1]);
											format(MsgMovilToPlayer, sizeof(MsgMovilToPlayer), "%s te ha comprado un móvil por $%i", PlayersDataOnline[playerid][NameOnlineFix], PlayersDataOnline[playerid][VPhone][1]);

											SendInfoMessage(playerid, 3, "0", MsgMovil);
											SendInfoMessage(PlayersDataOnline[playerid][VPhone][0],3, "0", MsgMovilToPlayer);

											GivePlayerMoneyEx(playerid, -PlayersDataOnline[playerid][VPhone][1]);
											GivePlayerMoneyEx(PlayersDataOnline[playerid][VPhone][0], PlayersDataOnline[playerid][VPhone][1]);
										}
										else
										{
											SendInfoMessage(playerid, 0, "1473", "El móvil que deseabas comprar ya fué comprado! Intenta comprar otro!");
										}
									}
									else
									{
										SendInfoMessage(playerid, 0, "1474", "No tienes suficiente dinero para comprar ese móvil!");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "1475", "Ya usted tiene un móvil! Deshágase de el si quiere comprar uno nuevo");
								}
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1476", "No has recibido ninguna oferta para comprar un móvil!");
						}
						PlayersDataOnline[playerid][VPhone][0] = -1;
						PlayersDataOnline[playerid][VPhone][1] = -1;
						PlayersDataOnline[playerid][VPhone][2] = -1;
			    	}
				    // COMANDO: /Aceptar Ganzúas
				  	else if (strcmp("/Aceptar Ganzúas", cmdtext, true, 16) == 0 && strlen(cmdtext) == 16 ||
							 strcmp("/Aceptar Ganzuas", cmdtext, true, 16) == 0 && strlen(cmdtext) == 16 )
			    	{
			    	    if ( PlayersDataOnline[playerid][VGanzuas][0] != -1 )
			    	    {
						    if ( IsPlayerNear(playerid, PlayersDataOnline[playerid][VGanzuas][0],
								 "706",
								 "708",
								 "709",
								 "El jugador que le iva a comprar ganzúas se a desconectado",
								 "El jugador que le iva a comprar ganzúas no se ha logueado",
								 "El jugador que le iva a comprar ganzúas no se encuentra cerca de tí") )
						    {
					            if ( PlayersData[playerid][Dinero] >= PlayersDataOnline[playerid][VGanzuas][1] )
					            {
										new MsgGanzuas[MAX_TEXT_CHAT];
										new MsgGanzuasToPlayer[MAX_TEXT_CHAT];
										format(MsgGanzuas, sizeof(MsgGanzuas), "Has comprado ganzúas a el mecánico %s, por $%i", PlayersDataOnline[PlayersDataOnline[playerid][VGanzuas][0]][NameOnlineFix], PlayersDataOnline[playerid][VGanzuas][1]);
										format(MsgGanzuasToPlayer, sizeof(MsgGanzuasToPlayer), "%s te ha comprado las ganzúas por $%i", PlayersDataOnline[playerid][NameOnlineFix],  PlayersDataOnline[playerid][VGanzuas][1]);

										SendInfoMessage(playerid, 3, "0", MsgGanzuas);
										SendInfoMessage(PlayersDataOnline[playerid][VGanzuas][0],3, "0", MsgGanzuasToPlayer);

										GivePlayerMoneyEx(playerid, -PlayersDataOnline[playerid][VGanzuas][1]);
										GivePlayerMoneyEx(PlayersDataOnline[playerid][VGanzuas][0], PlayersDataOnline[playerid][VGanzuas][1]);

										PlayersData[playerid][Ganzuas] = PlayersData[playerid][Ganzuas] + 5;
								}
								else
								{
									SendInfoMessage(playerid, 0, "710", "No tienes suficiente dinero para comprar ganzúas!");
								}
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "711", "No has recibido ninguna oferta de ganzúas!");
						}
						PlayersDataOnline[playerid][VGanzuas][0] = -1;
						PlayersDataOnline[playerid][VGanzuas][1] = -1;
			    	}
				    // COMANDO: /Aceptar Factura
				  	else if (strcmp("/Aceptar Factura", cmdtext, true, 16) == 0 && strlen(cmdtext) == 16)
			    	{
			    	    if ( PlayersDataOnline[playerid][VFactura][0] != -1 )
			    	    {
				            if ( PlayersData[playerid][Dinero] >= PlayersDataOnline[playerid][VFactura][1] )
				            {
								new MsgFactura[MAX_TEXT_CHAT];
								format(MsgFactura, sizeof(MsgFactura), "Pagaste una factura de $%i", PlayersDataOnline[playerid][VFactura][1]);
		                        SendInfoMessage(playerid, 3, "0", MsgFactura);
								if ( IsPlayerConnected(PlayersDataOnline[playerid][VFactura][0]) )
								{
									new MsgFacturaToPlayer[MAX_TEXT_CHAT];
									format(MsgFacturaToPlayer, sizeof(MsgFacturaToPlayer), "%s pago la factura de $%i", PlayersDataOnline[playerid][NameOnlineFix], PlayersDataOnline[playerid][VFactura][1]);
			                        SendInfoMessage(PlayersDataOnline[playerid][VFactura][0], 3, "0", MsgFacturaToPlayer);
								}
								FaccionData[PlayersData[PlayersDataOnline[playerid][VFactura][0]][Faccion]][Deposito] = FaccionData[PlayersData[PlayersDataOnline[playerid][VFactura][0]][Faccion]][Deposito] + PlayersDataOnline[playerid][VFactura][1];

								GivePlayerMoneyEx(playerid, -PlayersDataOnline[playerid][VFactura][1]);

								PlayersDataOnline[playerid][VFactura][0] = -1;
								PlayersDataOnline[playerid][VFactura][1] = -1;
							}
							else
							{
								SendInfoMessage(playerid, 0, "683", "No tienes suficiente dinero para pagar esta factura!");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "684", "No has recibido ninguna factura!");
						}
					}
				    // COMANDO: /Aceptar Sexo
				  	else if (strcmp("/Aceptar Sexo", cmdtext, true, 13) == 0 && strlen(cmdtext) == 13)
				    {
				        if (PlayersDataOnline[playerid][PlayerSexo] != -1)
				        {
						    if ( IsPlayerNear(playerid, PlayersDataOnline[playerid][PlayerSexo],
								 "1418",
								 "1419",
								 "1420",
								 "El jugador que deseas tener sexo con el no se encuentra conectado",
								 "El jugador que deseas tener sexo con el no se ha logueado",
								 "El jugador que deseas tener sexo con el no se encuentra cerca de tí") )
						    {
								new MsgSexoMe[MAX_TEXT_CHAT];
								new MsgSexoYou[MAX_TEXT_CHAT];
								format(MsgSexoMe, sizeof(MsgSexoMe), "Tuviste sexo con %s", PlayersDataOnline[PlayersDataOnline[playerid][PlayerSexo]][NameOnlineFix]);
								format(MsgSexoYou, sizeof(MsgSexoYou), "Tuviste sexo con %s", PlayersDataOnline[playerid][NameOnlineFix]);

								SendInfoMessage(playerid, 3, "0", MsgSexoMe);
								SendInfoMessage(PlayersDataOnline[playerid][PlayerSexo], 3, "0", MsgSexoYou);

								if ( !IsPlayerHaveCondones(playerid) || !IsPlayerHaveCondones(PlayersDataOnline[playerid][PlayerSexo]) )
								{
									new RandomSexo = random(8);
									if ( RandomSexo )
									{
									    switch(RandomSexo)
									    {
									        case 1:
									        {
												ChangeEnfermedad(playerid, 3);
												ChangeEnfermedad(PlayersDataOnline[playerid][PlayerSexo], 3);
											}
									        case 2:
									        {
												ChangeEnfermedad(playerid, 6);
												ChangeEnfermedad(PlayersDataOnline[playerid][PlayerSexo], 6);
											}
										}
									}
								}
								PlayersDataOnline[PlayersDataOnline[playerid][PlayerSexo]][PlayerSexo] = -1;
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1421", "Nadie te ha ofrecido tener sexo contigo");
						}
						PlayersDataOnline[playerid][PlayerSexo] = -1;
				    }
				    // COMANDO: /Aceptar Servicios
				  	else if (strcmp("/Aceptar Servicios", cmdtext, true, 18) == 0 && strlen(cmdtext) == 18)
			    	{
			    	    if ( PlayersDataOnline[playerid][VServicio][0] != -1 )
			    	    {
						    if ( IsPlayerNear(playerid, PlayersDataOnline[playerid][VServicio][0],
								 "1348",
								 "1349",
								 "1350",
								 "El jugador que desea aceptar sus servicios no se encuentra conectado",
								 "El jugador que desea aceptar sus servicios no se encuentra logueado",
								 "El jugador que desea aceptar sus servicios no se encuentra cerca de tí") )
						    {
					            if ( PlayersData[playerid][Dinero] >= PlayersDataOnline[playerid][VServicio][1] )
					            {
									new MsgFactura[MAX_TEXT_CHAT];
									new MsgFacturaToPlayer[MAX_TEXT_CHAT];
									format(MsgFactura, sizeof(MsgFactura), "Aceptaste los servicios por $%i", PlayersDataOnline[playerid][VServicio][1]);
									format(MsgFacturaToPlayer, sizeof(MsgFacturaToPlayer), "%s pago los servicios por el costo de $%i", PlayersDataOnline[playerid][NameOnlineFix], PlayersDataOnline[playerid][VServicio][1]);
			                        SendInfoMessage(PlayersDataOnline[playerid][VServicio][0], 3, "0", MsgFacturaToPlayer);
			                        SendInfoMessage(playerid, 3, "0", MsgFactura);

									FaccionData[ADP][Deposito] += PlayersDataOnline[playerid][VServicio][1] / 3;
									GivePlayerMoneyEx(playerid, -PlayersDataOnline[playerid][VServicio][1]);
									GivePlayerMoneyEx(PlayersDataOnline[playerid][VServicio][0], (PlayersDataOnline[playerid][VServicio][1] / 3) * 2);

									PlayersDataOnline[playerid][VServicio][0] = -1;
									PlayersDataOnline[playerid][VServicio][1] = -1;
								}
								else
								{
									SendInfoMessage(playerid, 0, "1351", "No tienes suficiente dinero para pagar esta factura!");
								}
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1352", "No has recibido ninguna factura!");
						}
					}
				    // COMANDO: /Aceptar Multa
				  	else if (strcmp("/Aceptar Multa", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
			    	{
			    	    if ( PlayersDataOnline[playerid][VMulta][0] != -1 )
			    	    {
				            if ( PlayersData[playerid][Dinero] >= PlayersDataOnline[playerid][VMulta][1] )
				            {
								new MsgMulta[MAX_TEXT_CHAT];
								format(MsgMulta, sizeof(MsgMulta), "Pagaste una multa de $%i", PlayersDataOnline[playerid][VMulta][1]);
		                        SendInfoMessage(playerid, 3, "0", MsgMulta);
								if ( IsPlayerConnected(PlayersDataOnline[playerid][VMulta][0]) )
								{
									new MsgMultaToPlayer[MAX_TEXT_CHAT];
									format(MsgMultaToPlayer, sizeof(MsgMultaToPlayer), "%s pago la multa de $%i", PlayersDataOnline[playerid][NameOnlineFix], PlayersDataOnline[playerid][VMulta][1]);
			                        SendInfoMessage(PlayersDataOnline[playerid][VMulta][0], 3, "0", MsgMultaToPlayer);
								}
								FaccionData[GOBIERNO][Deposito] = FaccionData[GOBIERNO][Deposito] + PlayersDataOnline[playerid][VMulta][1];

								GivePlayerMoneyEx(playerid, -PlayersDataOnline[playerid][VMulta][1]);

								PlayersDataOnline[playerid][VMulta][0] = -1;
								PlayersDataOnline[playerid][VMulta][1] = -1;
							}
							else
							{
								SendInfoMessage(playerid, 0, "818", "No tienes suficiente dinero para pagar esta multa!");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "819", "No has recibido ninguna factura!");
						}
					}
					//VMulta
					// COMANDO: /Aceptar Contrato
				  	else if (strcmp("/Aceptar Contrato", cmdtext, true, 17) == 0 && strlen(cmdtext) == 17)
			    	{
			    	    if ( PlayersDataOnline[playerid][Contrato][0] != -1 )
			    	    {
						    if ( IsPlayerNear(playerid, PlayersDataOnline[playerid][Contrato][0],
								 "558",
								 "557",
								 "556",
								 "El jugador que le iva hacer el contrato no se encuentra conectado",
								 "El jugador que le iva hacer el contrato no se ha logueado",
								 "El jugador que le iva hacer el contrato no se encuentra cerca de tí") )
						    {
	   				            if ( PlayersData[playerid][Dinero] >= PlayersDataOnline[playerid][Contrato][1] )
	   				            {
									new MsgContrato[MAX_TEXT_CHAT];
									new MsgContratoToPlayer[MAX_TEXT_CHAT];
									format(MsgContrato, sizeof(MsgContrato), "Has aceptado el contrato de %s, por $%i", PlayersDataOnline[PlayersDataOnline[playerid][Contrato][0]][NameOnlineFix], PlayersDataOnline[playerid][Contrato][1]);
									format(MsgContratoToPlayer, sizeof(MsgContratoToPlayer), "%s ha aceptado su contrato por el monto de $%i", PlayersDataOnline[playerid][NameOnlineFix],  PlayersDataOnline[playerid][Contrato][1]);

									SendInfoMessage(playerid, 3, "0", MsgContrato);
									SendInfoMessage(PlayersDataOnline[playerid][Contrato][0],3, "0", MsgContratoToPlayer);

									GivePlayerMoneyEx(playerid, -PlayersDataOnline[playerid][Contrato][1]);
									GivePlayerMoneyEx(PlayersDataOnline[playerid][Contrato][0], PlayersDataOnline[playerid][Contrato][1]);
								}
								else
								{
									SendInfoMessage(playerid, 0, "559", "No tienes suficiente dinero para aceptar este contrato!");
								}
						    }
							PlayersDataOnline[playerid][Contrato][0] = -1;
							PlayersDataOnline[playerid][Contrato][1] = -1;
						}
						else
						{
							SendInfoMessage(playerid, 0, "560", "No has recibido ningún contrato!");
						}
				    }
					// COMANDO: /Aceptar Invite
				  	else if (strcmp("/Aceptar Invite", cmdtext, true, 15) == 0 && strlen(cmdtext) == 15)
			    	{
			    	    if ( PlayersDataOnline[playerid][InviteFaccion] != 0 )
			    	    {
						    if ( IsPlayerNear(playerid, PlayersDataOnline[playerid][InvitePlayer],
								 "127",
								 "128",
								 "129",
								 "El líder que te invito se ha desconectado",
								 "El líder que te invito no se encuentra logueado",
								 "Te separaste mucho del líder que te invito, intentele de nuevo") )
						    {
	                            PlayersData[playerid][Faccion] = PlayersDataOnline[playerid][InviteFaccion];
	                            PlayersData[playerid][Rango]   = GetMaxFaccionRango(PlayersDataOnline[playerid][InviteFaccion]);
								new MsgAcceptUser[MAX_TEXT_CHAT]; format(MsgAcceptUser, sizeof(MsgAcceptUser), "Metíste a tu Facción a %s.", PlayersDataOnline[playerid][NameOnlineFix]);
								new MsgAcceptMe[MAX_TEXT_CHAT]; format(MsgAcceptMe, sizeof(MsgAcceptMe), "Bienvenido a la Facción \"%s\"!", FaccionData[PlayersDataOnline[playerid][InviteFaccion]][NameFaccion]);
	                            SendInfoMessage(PlayersDataOnline[playerid][InvitePlayer], 3, "0", MsgAcceptUser);
	                            SendInfoMessage(playerid, 3, "0", MsgAcceptMe);

	                            UpdateSpawnPlayer(playerid);
	  						   	PlayersDataOnline[playerid][InvitePlayer]  = 0;
								PlayersDataOnline[playerid][InviteFaccion] = 0;
								PlayersData[playerid][HorasWork] = 0;

								SetPlayerSelectedTypeSkin(playerid, true);
								SetPlayerLockAllVehicles(playerid);

								if ( PlayersData[playerid][Job] == VENDEDOR_MOVIL )
								{
								    PlayersData[playerid][Job] = NINGUNO;
								}
							}
							else
							{
							   	PlayersDataOnline[playerid][InvitePlayer]  = 0;
								PlayersDataOnline[playerid][InviteFaccion] = 0;
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "122", "No has recibido ningún invite");
						}
			    	}
	   				// COMANDO: /Aceptar Coche
				  	else if (strcmp("/Aceptar Coche", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
			    	{
			    	    if ( PlayersDataOnline[playerid][VCoche][0] != -1 )
			    	    {
						    if ( IsPlayerNear(playerid, PlayersDataOnline[playerid][VCoche][0],
								 "236",
								 "237",
								 "238",
								 "El jugador que te iva a vender el vehículo se ha desconectado",
								 "El jugador que te va  a vender el vehículo no se ha logueado",
								 "El jugador que te va a vender el vehículo no se encuentra cerca de tí") )
						    {
			   				    if (  strlen(DataCars[PlayersDataOnline[playerid][VCoche][1]][Dueno]) == 1 )
			   				    {
									if ( PlayersData[PlayersDataOnline[playerid][VCoche][0]][Faccion] == NFS && PlayersData[PlayersDataOnline[playerid][VCoche][0]][Rango] <= 2)
									{
				   				        if (PlayersData[playerid][Car] == -1)
				   				        {
				   				            if ( PlayersData[playerid][Dinero] >= coches_Todos_Precios[GetVehicleModel(PlayersDataOnline[playerid][VCoche][1]) - 400] )
				   				            {
					   				            PlayersData[playerid][Car] = PlayersDataOnline[playerid][VCoche][1];
					   				            format(DataCars[PlayersDataOnline[playerid][VCoche][1]][Dueno], MAX_PLAYER_NAME, "%s", PlayersDataOnline[playerid][NameOnline]);
					   				            DataCars[PlayersDataOnline[playerid][VCoche][1]][Time] = MAX_VEHICLE_TIME;
					   				            SaveDataVehicle(PlayersDataOnline[playerid][VCoche][1], DIR_VEHICLES);

												new MsgToComprador[MAX_TEXT_CHAT], MsgToVendedor[MAX_TEXT_CHAT];
												format(MsgToVendedor, sizeof(MsgToVendedor),
												"Has comprado al vendedor de vehículos %s, un vehículo modelo \"%s\" por $%i",
												PlayersDataOnline[PlayersDataOnline[playerid][VCoche][0]][NameOnline],
												coches_Todos_Nombres[GetVehicleModel(PlayersDataOnline[playerid][VCoche][1]) - 400],
												coches_Todos_Precios[GetVehicleModel(PlayersDataOnline[playerid][VCoche][1]) - 400]);
												format(MsgToComprador, sizeof(MsgToComprador),
												"Vendiste a %s un vehículo modelo \"%s\" por $%i, con un coste de $%i en papeles",
												PlayersDataOnline[playerid][NameOnlineFix],
												coches_Todos_Nombres[GetVehicleModel(PlayersDataOnline[playerid][VCoche][1]) - 400],
												coches_Todos_Precios[GetVehicleModel(PlayersDataOnline[playerid][VCoche][1]) - 400],
												coches_Todos_Precios[GetVehicleModel(PlayersDataOnline[playerid][VCoche][1]) - 400] / 3);
												SendInfoMessage(PlayersDataOnline[playerid][VCoche][0], 3, "0", MsgToComprador);
												SendInfoMessage(playerid, 3, "0", MsgToVendedor);

												FaccionData[NFS][Deposito] = FaccionData[NFS][Deposito] + coches_Todos_Precios[GetVehicleModel(PlayersDataOnline[playerid][VCoche][1]) - 400] / 3;

												GivePlayerMoneyEx(playerid, -coches_Todos_Precios[GetVehicleModel(PlayersDataOnline[playerid][VCoche][1]) - 400]);
												GivePlayerMoneyEx(PlayersDataOnline[playerid][VCoche][0], (coches_Todos_Precios[GetVehicleModel(PlayersDataOnline[playerid][VCoche][1]) - 400] / 3) * 2);
											}
											else
											{
												SendInfoMessage(playerid, 0, "242", "No tienes suficiente dinero para comprar éste vehículo!");
											}
				   				        }
				   				        else
				   				        {
		       								SendInfoMessage(playerid, 0, "241", "Usted ya tiene un vehículo!");
										}
									}
									else
									{
	       								SendInfoMessage(playerid, 0, "1457", "No te encuentras al lado de vendedor!");
									}
			   				    }
			   				    else
			   				    {
									SendInfoMessage(playerid, 0, "239", "Oops, te han comprado otro el vehículo en los ojos!");
							   	}
						    }
						}
						else
						{
							SendInfoMessage(playerid, 0, "240", "No has recibido ninguna oferta para venta de vehículo");
						}
						PlayersDataOnline[playerid][VCoche][0] = -1;
						PlayersDataOnline[playerid][VCoche][1] = -1;
			    	}
			    	else
					{
						SendInfoMessage(playerid, 0, "123", "Quizás quiso decir: /Aceptar {Invite, Coche, Contrato, Factura, Reparación, Protección, Drogas, Multa, Ganzúas}");
						SendInfoMessage(playerid, 0, "123", "Quizás quiso decir: /Aceptar {Aceíte, Servicios, Sexo}");
					}
				}
				// COMANDO: /Proteger
			  	else if (strfind(cmdtext, "/Proteger ", true) == 0)
			    {
			        new playerid_proteger = strval(cmdtext[GetPosSpace(cmdtext, 1)]);
			        new dinero_proteger = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
					if ( PlayersData[playerid][Faccion] == ADP && PlayersData[playerid][Rango] <= 1 ||
						 PlayersData[playerid][Faccion] == ADP && PlayersData[playerid][Rango] == 3  ||
						 PlayersData[playerid][Faccion] == ADP && PlayersData[playerid][Rango] == 5 )
				    {
					 	if ( IsPlayerNear(playerid, playerid_proteger,
							 "726",
							 "722",
							 "723",
							 "El jugador que desea darle protección no se encuentra conectado",
							 "El jugador que desea darle protección no se encuentra logueado",
							 "El jugador que desea darle protección no se encuentra cerca de tí") )
					    {
					        if ( dinero_proteger >= 50 && dinero_proteger <= 20000 )
					        {
								new MsgProteger[MAX_TEXT_CHAT];
								new MsgProtegerToPlayer[MAX_TEXT_CHAT];
								format(MsgProteger, sizeof(MsgProteger), "Ofresiste protección a %s por $%i", PlayersDataOnline[playerid_proteger][NameOnlineFix], dinero_proteger);
								format(MsgProtegerToPlayer, sizeof(MsgProtegerToPlayer), "El guardaespaldas %s quiere protegerte por $%i usa (/Aceptar Protección)", PlayersDataOnline[playerid][NameOnlineFix], dinero_proteger);

	                            SendInfoMessage(playerid, 3, "0", MsgProteger);
	                            SendInfoMessage(playerid_proteger, 3, "0", MsgProtegerToPlayer);

								PlayersDataOnline[playerid_proteger][VProteger][0] = playerid;
								PlayersDataOnline[playerid_proteger][VProteger][1] = dinero_proteger;
							}
							else
							{
								SendInfoMessage(playerid, 0, "724", "El monto mínimo del contrato de protección es de $50 y máximo $20000");
							}
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "725", "Usted no es guardaespaldas");
					}
				}
				// COMANDO: /Vender
				else if (strfind(cmdtext, "/Vender", true) == 0)
				{
					// COMANDO: /Vender Drogas
				  	if (strfind(cmdtext, "/Vender Drogas ", true) == 0 ||
	       				strfind(cmdtext, "/Vender Drogas ", true) == 0)
				    {
						if ( PlayersData[playerid][Faccion] == TRAFICANTES && PlayersData[playerid][Rango] <= 1 ||
							 PlayersData[playerid][Faccion] == TRAFICANTES && PlayersData[playerid][Rango] == 3 )
					    {
					        new playerid_drogas = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
					        new cantidad_drogas = strval(cmdtext[GetPosSpace(cmdtext, 3)]);
					        new dinero_drogas = strval(cmdtext[GetPosSpace(cmdtext, 4)]);
						 	if ( IsPlayerNear(playerid, playerid_drogas,
								 "756",
								 "756",
								 "757",
								 "El jugador que desea venderle drogas no se encuentra conectado",
								 "El jugador que desea venderle drogas no se encuentra logueado",
								 "El jugador que desea venderle drogas no se encuentra cerca de tí") )
						    {
						        if ( cantidad_drogas >= 1 && cantidad_drogas <= 500 )
						        {
						            if ( PlayersData[playerid][Drogas] >= cantidad_drogas )
						            {
								        if ( dinero_drogas >= 2 && dinero_drogas <= 20000 )
								        {
											new MsgDrogas[MAX_TEXT_CHAT];
											new MsgDrogasToPlayer[MAX_TEXT_CHAT];
											format(MsgDrogas, sizeof(MsgDrogas), "Ofresiste %i drogas a %s por $%i", cantidad_drogas, PlayersDataOnline[playerid_drogas][NameOnlineFix], dinero_drogas);
											format(MsgDrogasToPlayer, sizeof(MsgDrogasToPlayer), "El vendedor de drogas %s quiere venderte %i drogas por $%i usa (/Aceptar Drogas)", PlayersDataOnline[playerid][NameOnlineFix], cantidad_drogas, dinero_drogas);

				                            SendInfoMessage(playerid, 3, "0", MsgDrogas);
				                            SendInfoMessage(playerid_drogas, 3, "0", MsgDrogasToPlayer);

											PlayersDataOnline[playerid_drogas][VDrogas][0] = playerid;
											PlayersDataOnline[playerid_drogas][VDrogas][1] = dinero_drogas;
											PlayersDataOnline[playerid_drogas][VDrogas][2] = cantidad_drogas;
										}
										else
										{
											SendInfoMessage(playerid, 0, "758", "El monto mínimo de venta de drogas es $2 y máximo $20000");
										}
									}
									else
									{
										SendInfoMessage(playerid, 0, "759", "No tienes esa cantidad de drogas para vender");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "760", "El mínimo de drogas a vender 1 y máximo 500");
								}
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "761", "Usted no es vendedor de drogas");
						}
					}
					// COMANDO: /Vender Peces
					else if (strcmp("/Vender Peces", cmdtext, true, 13) == 0 && strlen(cmdtext) == 13)
				    {
		            	if ( PlayersData[playerid][Job] == PESCA )
		            	{
							if ( PlayersDataOnline[playerid][InPickup] == TextDrawInfo[JobsData[PESCA_PickupidVender]][PickupidTextInfo] )
							{
						        if ( PlayersDataOnline[playerid][JobBonus] )
						        {
							        SendInfoMessage(playerid, 3, "0", "Haz vendido los peces por $200!");
							        PlayersDataOnline[playerid][JobBonus] = false;
									GivePlayerMoneyEx(playerid, 200);
								}
								else
								{
									SendInfoMessage(playerid, 0, "969", "No tienes peces para vender!");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "970", "No estás en el punto de venta!");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "971", "No eres pescador!");
						}
				    }
					// COMANDO: /Vender Ganzúas
				  	else if (strfind(cmdtext, "/Vender Ganzúas ", true) == 0 ||
	       				strfind(cmdtext, "/Vender Ganzuas ", true) == 0)
				    {
				        new playerid_ganzuas = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
				        new dinero_ganzuas = strval(cmdtext[GetPosSpace(cmdtext, 3)]);
						if ( PlayersData[playerid][Faccion] == TALLER_SF || PlayersData[playerid][Faccion] == TALLER_LS)
					    {
						 	if ( IsPlayerNear(playerid, playerid_ganzuas,
								 "701",
								 "702",
								 "703",
								 "El jugador que desea venderle ganzúas no se encuentra conectado",
								 "El jugador que desea venderle ganzúas no se encuentra logueado",
								 "El jugador que desea venderle ganzúas no se encuentra cerca de tí") )
						    {
						        if ( dinero_ganzuas >= 10 && dinero_ganzuas <= 20000 )
						        {
									new MsgGanzuas[MAX_TEXT_CHAT];
									new MsgGanzuasToPlayer[MAX_TEXT_CHAT];
									format(MsgGanzuas, sizeof(MsgGanzuas), "Ofresiste ganzúas a %s por $%i", PlayersDataOnline[playerid_ganzuas][NameOnlineFix], dinero_ganzuas);
									format(MsgGanzuasToPlayer, sizeof(MsgGanzuasToPlayer), "El mecánico %s quiere venderte 5 ganzúas por $%i usa (/Aceptar Ganzúas)", PlayersDataOnline[playerid][NameOnlineFix], dinero_ganzuas);

		                            SendInfoMessage(playerid, 3, "0", MsgGanzuas);
		                            SendInfoMessage(playerid_ganzuas, 3, "0", MsgGanzuasToPlayer);

									PlayersDataOnline[playerid_ganzuas][VGanzuas][0] = playerid;
									PlayersDataOnline[playerid_ganzuas][VGanzuas][1] = dinero_ganzuas;
								}
								else
								{
									SendInfoMessage(playerid, 0, "704", "El monto mínimo de venta de ganzúas es $10 y máximo $20000");
								}
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "705", "Usted no es mecánico");
						}
					}
					// COMANDO: /Vender Coche
				  	else if (strfind(cmdtext, "/Vender Coche ", true) == 0)
				    {
					    if ( PlayersData[playerid][Faccion] == NFS && PlayersData[playerid][Rango] <= 2)
					    {
							new MyNearCar = IsPlayerInNearVehicle(playerid);
			   				if ( MyNearCar)
						    {
			   				    if ( MyNearCar <= MAX_CAR_DUENO )
			   				    {
				   				    if (  strlen(DataCars[MyNearCar][Dueno]) == 1 )
				   				    {
				   				        new PriceCar = coches_Todos_Precios[GetVehicleModel(MyNearCar) - 400];
				   				    	if ( PlayersData[playerid][Dinero] >= PriceCar / 3   )
				   				    	{
										    if ( IsPlayerNear(playerid, strval(cmdtext[14]),
												 "225",
												 "226",
												 "227",
												 "El jugador que desea venderle un vehículo no se encuentra conectado",
												 "El jugador que desea venderle un vehículo no se encuentra logueado",
												 "El jugador que desea venderle un vehículo no se encuentra cerca de tí") )
										    {
												new MsgToComprador[MAX_TEXT_CHAT], MsgToVendedor[MAX_TEXT_CHAT];
												format(MsgToComprador, sizeof(MsgToComprador),
												"El vendedor de vehículos %s, quiere venderte un vehículo modelo \"%s\" por $%i, Usa (/Aceptar Coche)",
												PlayersDataOnline[playerid][NameOnlineFix],
												coches_Todos_Nombres[GetVehicleModel(MyNearCar) - 400],
												PriceCar);
												format(MsgToVendedor, sizeof(MsgToVendedor),
												"Ofreciste vender un vehículos modelo \"%s\", a %s por $%i",
												coches_Todos_Nombres[GetVehicleModel(MyNearCar) - 400],
												PlayersDataOnline[strval(cmdtext[14])][NameOnlineFix],
												PriceCar);
												SendInfoMessage(strval(cmdtext[14]), 3, "0", MsgToComprador);
												SendInfoMessage(playerid, 3, "0", MsgToVendedor);

												PlayersDataOnline[strval(cmdtext[14])][VCoche][0] = playerid;
												PlayersDataOnline[strval(cmdtext[14])][VCoche][1] = MyNearCar;
											}
										}
										else
										{
											SendInfoMessage(playerid, 0, "234", "No tienes suficiente dinero para tramitar los papeles de éste vehículo!");
										}
									}
									else
									{
										SendInfoMessage(playerid, 0, "233", "Éste vehículo ya tiene dueño!");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "232", "Esta vehículo no está en venta!");
								}
							}
					    }
					    else
					    {
							SendInfoMessage(playerid, 0, "229", "No eres vendedor de vehículos!");
						}
				    }
					// COMANDO: /Vender Casa
				  	else if (strcmp("/Vender Casa", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12)
				    {
				        if ( PlayersDataOnline[playerid][InPickup] >= HouseData[1][PickupId] &&
					         PlayersDataOnline[playerid][InPickup] <= HouseData[MAX_HOUSE][PickupId] )
				        {
							new HouseId = PlayersDataOnline[playerid][MyPickupWorld];
							if ( IsMyHouse(playerid, HouseId) )
				            {
								PlayersDataOnline[playerid][MyPickupLock] = true;
                                format(HouseData[HouseId][Dueno], MAX_PLAYER_NAME, "No");
                                HouseData[HouseId][Lock] = true;
                                GivePlayerMoneyEx(playerid, HouseData[HouseId][Price]);
                                SaveHouse(HouseId, true);
                                GameTextForPlayer(playerid, "~B~Ha ~R~vendido su casa!", 2000, 0);
                                PlayersData[playerid][House] = -1;
                                PlayersData[playerid][Alquiler] = -1;

                                for ( new i = 0; i < MAX_PLAYERS; i++)
                                {
									CheckIsPlayerRentAndRemove(i, HouseId);
								}
								RemoveAllHouseFriend(HouseId);
							}
							else
							{
								SendInfoMessage(playerid, 0, "586", "Ésta no es su casa");
							}
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "587", "No te encuentras en ninguna casa");
						}
					}
					// COMANDO: /Vender Negocio
				  	else if (strcmp("/Vender Negocio", cmdtext, true, 15) == 0 && strlen(cmdtext) == 15)
				    {
				        if ( PlayersDataOnline[playerid][InPickup] >= NegociosData[1][PickupOutId] &&
				             PlayersDataOnline[playerid][InPickup] <= NegociosData[MAX_BIZZ][PickupOutId] )
				        {
							new BizzId = PlayersDataOnline[playerid][MyPickupWorld];
				            if ( IsMyBizz(playerid, BizzId, true)  )
				            {
				                if ( !IsBizzOnRobo(playerid, PlayersDataOnline[playerid][MyPickupWorld]) )
				                {
									PlayersDataOnline[playerid][MyPickupLock] = true;
									NegociosData[BizzId][Lock] = true;
	                                format(NegociosData[BizzId][Dueno], MAX_PLAYER_NAME, "0");
	                                format(NegociosData[BizzId][Extorsion], MAX_PLAYER_NAME, "No");
	                                GivePlayerMoneyEx(playerid, NegociosData[BizzId][Precio]);
	                                DataSaveBizz(BizzId, true);
	                                GameTextForPlayer(playerid, "~B~Has ~R~vendido un negocio!", 2000, 0);
                                }
							}
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "301", "No te encuentras en ningún negocio");
						}
					}
					// COMANDO: /Vender Mi Coche
				  	else if (strcmp("/Vender Mi Coche", cmdtext, true, 16) == 0 && strlen(cmdtext) == 16)
				    {
						if ( IsPlayerInAnyVehicle(playerid) )
						{
							if ( IsVehicleMyVehicle(playerid, GetPlayerVehicleID(playerid))  )
							{
								ShowPlayerDialogEx(playerid, 6, DIALOG_STYLE_MSGBOX, "{00A5FF}Venta de su vehículo al estado", "{F0F0F0}¿Seguro que desea vender su vehículo?\n{F50000}IMPORTANTE: No obtendrá nada a cambio!", "Si", "No");
							}
							else
							{
								SendInfoMessage(playerid, 0, "221", "Este no es su vehículo");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "218", "Suba a su vehículo para poder venderlo");
						}
				    }
					// COMANDO: /Vender Móvil [ID] [Precio] [Número]
				  	else if (strfind(cmdtext, "/Vender Móvil ", true) == 0 ||
					  		 strfind(cmdtext, "/Vender Movil ", true) == 0)
				    {
						if ( PlayersData[playerid][Job] == VENDEDOR_MOVIL )
					    {
 					        new playerSell = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
					        new priceSell  = strval(cmdtext[GetPosSpace(cmdtext, 3)]);
					        new phoneNumber = strval(cmdtext[GetPosSpace(cmdtext, 4)]);
						 	if ( IsPlayerNear(playerid, playerSell,
								 "1477",
								 "1478",
								 "1479",
								 "El jugador que desea venderle un móvil no se encuentra conectado",
								 "El jugador que desea venderle un móvil no se encuentra logueado",
								 "El jugador que desea venderle un móvil no se encuentra cerca de tí") )
						    {
						        if ( priceSell >= 100 && priceSell <= 20000 )
						        {
						            if ( phoneNumber == 0 || phoneNumber > 1000 && phoneNumber <= 99999 && CheckNumberAvalible(phoneNumber) )
						            {
										new MsgMovil[MAX_TEXT_CHAT];
										new MsgMovilToPlayer[MAX_TEXT_CHAT];
										if ( phoneNumber == 0 )
										{
											format(MsgMovil, sizeof(MsgMovil), "Ofresiste a %s venderle un móvil con número aleatorio por $%i", PlayersDataOnline[playerSell][NameOnlineFix], priceSell);
											format(MsgMovilToPlayer, sizeof(MsgMovilToPlayer), "%s quiere venderte un móvil con número aleatorio por $%i. Use (/Aceptar Móvil)", PlayersDataOnline[playerid][NameOnlineFix], priceSell);
										}
										else
										{
											format(MsgMovil, sizeof(MsgMovil), "Ofresiste a %s venderle un móvil con número personalizado (%i) por $%i", PlayersDataOnline[playerSell][NameOnlineFix], phoneNumber, priceSell);
											format(MsgMovilToPlayer, sizeof(MsgMovilToPlayer), "%s quiere venderte un móvil con número personalizado (%i) por $%i. Use (/Aceptar Móvil)", PlayersDataOnline[playerid][NameOnlineFix], phoneNumber, priceSell);
										}

			                            SendInfoMessage(playerid, 3, "0", MsgMovil);
			                            SendInfoMessage(playerSell, 3, "0", MsgMovilToPlayer);

										PlayersDataOnline[playerSell][VPhone][0] = playerid;
										PlayersDataOnline[playerSell][VPhone][1] = priceSell;
										PlayersDataOnline[playerSell][VPhone][2] = phoneNumber;
									}
									else
									{
										SendInfoMessage(playerid, 0, "1480", "El número introducido no esta disponible, recuerde que debe estar comprendido entre 1000 y 99999");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "1481", "El precio del móvil debe ser como mínimo $100 y máximo $20000");
								}
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1482", "Usted no es vendedor de móviles");
						}
				    }
				    else
				    {
						SendInfoMessage(playerid, 0, "228", "Quizás quiso decir: /Vender {Coche [ID], Negocio, Mi Coche, Casa, Peces, Móvil [ID] [Precio] [Número]}");
					}
				}
				// COMANDO: /Cocinar [ID_Refrigerador]
		  		else if (strfind(cmdtext, "/Cocinar ", true) == 0)
			    {
			        if( PlayersData[playerid][IsPlayerInHouse] )
			        {
			            if ( IsOpenRefrigerador(playerid, PlayersData[playerid][IsPlayerInHouse]) )
			            {
							new RefrigeradorID = strval(cmdtext[GetPosSpace(cmdtext, 1)]);
			                Cocinar(playerid, PlayersData[playerid][IsPlayerInHouse], RefrigeradorID);
		                }
                	}
                	else
                	{
						SendInfoMessage(playerid, 0, "1270", "No te encuentras en una casa");
					}
			    }
				// COMANDO: /Usar
				else if (strfind(cmdtext, "/Usar ", true) == 0)
				{
					// COMANDO: /Usar Bolsa [ID_Bolsa]
			  		if (strfind(cmdtext, "/Usar Bolsa ", true) == 0)
				    {
						new BolsaID = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
						EatArticle(playerid, BolsaID);
				    }
					// COMANDO: /Usar Refrigerador [ID_Refrigerador]
			  		else if (strfind(cmdtext, "/Usar Refrigerador ", true) == 0)
				    {
				        if( PlayersData[playerid][IsPlayerInHouse] )
				        {
				            if ( IsOpenRefrigerador(playerid, PlayersData[playerid][IsPlayerInHouse]) )
				            {
								new RefrigeradorID = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
				                EatArticleRefrigerador(playerid, PlayersData[playerid][IsPlayerInHouse], RefrigeradorID);
			                }
	                	}
	                	else
	                	{
							SendInfoMessage(playerid, 0, "1267", "No te encuentras en una casa");
						}
				    }
				    else
				    {
						SendInfoMessage(playerid, 0, "1259", "Quizás quiso decir: /Usar {Bolsa [ID_Bolsa], Refrigerador [ID_Refrigerador]}");
					}
				}
				// COMANDO: /Coger
				else if (strfind(cmdtext, "/Coger ", true) == 0)
				{
				    // ALL COGER
        			// COMANDO: /Coger Artículo [ID_Refrigerador]
			  		if ( strfind(cmdtext, "/Coger Artículo ", true) == 0 ||
				  		 strfind(cmdtext, "/Coger Articulo ", true) == 0)
				    {
						new HouseId = PlayersData[playerid][IsPlayerInHouse];
						if ( HouseId )
						{
						    if ( IsOpenRefrigerador(playerid, HouseId) )
					        {
						        new RefrigeradorID = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
								RemoveArticleRefrigeradorFun(playerid, HouseId, RefrigeradorID);
							}
						}
						else
						{
								SendInfoMessage(playerid, 0, "1582", "No estas en una casa");
						}
			    	}
        			// COMANDO: /Coger Objeto
        			else if (strcmp("/Coger Objeto", cmdtext, true, 13) == 0 && strlen(cmdtext) == 13)
        			{
        			    if ( IsPlayerNotFullObjects(playerid, true) != -1 )
						{
	        			    if ( IsPlayerInsideVehicle(playerid) )
	        			    {
							    if ( IsGuanteraOpen(playerid) )
							    {
		        			        new VehicleIDGuantera = IsGuanteraOpen(playerid);
		        			        new SlotIDGet = -1;
									for (new i = 0; i < MAX_GUANTERA_GAVETA_SLOTS; i++)
									{
									    if ( DataCars[VehicleIDGuantera][GuanteraObjects][i] )
									    {
									        SlotIDGet = i;
							                break;
									    }
									}
									if ( SlotIDGet != -1 )
									{
									    new saveType = GetObjectByType(playerid, GetTypeObjectEx(DataCars[VehicleIDGuantera][GuanteraObjects][SlotIDGet]));
									    if ( saveType == -1 )
									    {
											new MsgGiveGG[MAX_TEXT_CHAT];
											new MsgGiveGGME[MAX_TEXT_CHAT];
									        format(MsgGiveGG, sizeof(MsgGiveGG), "coge %s de la guantera", ObjectsNames[GetTypeObjectEx(DataCars[VehicleIDGuantera][GuanteraObjects][SlotIDGet])]);
									        format(MsgGiveGGME, sizeof(MsgGiveGGME), "has cogido %s de la guantera", ObjectsNames[GetTypeObjectEx(DataCars[VehicleIDGuantera][GuanteraObjects][SlotIDGet])]);
									        Acciones(playerid, 8, MsgGiveGG);
									        SendInfoMessage(playerid, 2, "0", MsgGiveGGME);

									        AddObjectHoldToPlayer(playerid, DataCars[VehicleIDGuantera][GuanteraObjects][SlotIDGet]);
									        DataCars[VehicleIDGuantera][GuanteraObjects][SlotIDGet] = false;
									    }
									    else
									    {
											SendInfoMessage(playerid, 0, "1585", "No puedes llevar más objetos de este tipo!");
									    }
									}
									else
									{
										SendInfoMessage(playerid, 0, "1586", "La guantera se encuentra vacía!");
									}
								}
	        			    }
	        			    else if ( PlayersData[playerid][IsPlayerInHouse] )
	        			    {
	        			        new Houseid = PlayersData[playerid][IsPlayerInHouse];
								if ( IsOpenGaveta(playerid, Houseid) )
								{
		        			        new SlotIDGet = -1;
									for (new i = 0; i < MAX_GUANTERA_GAVETA_SLOTS; i++)
									{
									    if ( HouseData[Houseid][GavetaObjects][i] )
									    {
									        SlotIDGet = i;
							                break;
									    }
									}
									if ( SlotIDGet != -1 )
									{
									    new saveType = GetObjectByType(playerid, GetTypeObjectEx(HouseData[Houseid][GavetaObjects][SlotIDGet]));
									    if ( saveType == -1 )
									    {
											new MsgGiveGG[MAX_TEXT_CHAT];
											new MsgGiveGGME[MAX_TEXT_CHAT];
									        format(MsgGiveGG, sizeof(MsgGiveGG), "coge %s de la gaveta", ObjectsNames[GetTypeObjectEx(HouseData[Houseid][GavetaObjects][SlotIDGet])]);
									        format(MsgGiveGGME, sizeof(MsgGiveGGME), "has cogido %s de la gaveta", ObjectsNames[GetTypeObjectEx(HouseData[Houseid][GavetaObjects][SlotIDGet])]);
									        Acciones(playerid, 8, MsgGiveGG);
									        SendInfoMessage(playerid, 2, "0", MsgGiveGGME);

									        AddObjectHoldToPlayer(playerid, HouseData[Houseid][GavetaObjects][SlotIDGet]);
									        HouseData[Houseid][GavetaObjects][SlotIDGet] = false;
									    }
									    else
									    {
											SendInfoMessage(playerid, 0, "1588", "No puedes llevar más objetos de este tipo!");
									    }
								    }
								    else
								    {
										SendInfoMessage(playerid, 0, "1593", "La gaveta se encuentra vacía!");
								    }
								}
	        			    }
	        			    else
	        			    {
								SendInfoMessage(playerid, 0, "1589", "No te encuentras en la guantera del coche ni en la gaveta de la casa!");
	        			    }
        			    }
        			}
        			// COMANDO: /Coger ObjetoEx
			  		else if (strfind(cmdtext, "/Coger ObjetoEx ", true) == 0)
			    	{
						new SlotIDGet = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
        			    if ( IsPlayerNotFullObjects(playerid, true) != -1 )
						{
	        			    if ( IsPlayerInsideVehicle(playerid) )
	        			    {
							    if ( IsGuanteraOpen(playerid) )
							    {
									if ( SlotIDGet >= 1 && SlotIDGet <= MAX_GUANTERA_GAVETA_SLOTS )
								    {
								        SlotIDGet--;
			        			        new VehicleIDGuantera = IsGuanteraOpen(playerid);
										if ( DataCars[VehicleIDGuantera][GuanteraObjects][SlotIDGet] )
										{
										    new saveType = GetObjectByType(playerid, GetTypeObjectEx(DataCars[VehicleIDGuantera][GuanteraObjects][SlotIDGet]));
										    if ( saveType == -1 )
										    {
												new MsgGiveGG[MAX_TEXT_CHAT];
												new MsgGiveGGME[MAX_TEXT_CHAT];
										        format(MsgGiveGG, sizeof(MsgGiveGG), "coge %s de la guantera", ObjectsNames[GetTypeObjectEx(DataCars[VehicleIDGuantera][GuanteraObjects][SlotIDGet])]);
										        format(MsgGiveGGME, sizeof(MsgGiveGGME), "has cogido %s de la guantera", ObjectsNames[GetTypeObjectEx(DataCars[VehicleIDGuantera][GuanteraObjects][SlotIDGet])]);
										        Acciones(playerid, 8, MsgGiveGG);
										        SendInfoMessage(playerid, 2, "0", MsgGiveGGME);

										        AddObjectHoldToPlayer(playerid, DataCars[VehicleIDGuantera][GuanteraObjects][SlotIDGet]);
										        DataCars[VehicleIDGuantera][GuanteraObjects][SlotIDGet] = false;
										    }
										    else
										    {
												SendInfoMessage(playerid, 0, "1598", "No puedes llevar más objetos de este tipo!");
										    }
										}
										else
										{
								            new TempError[50];
								            format(TempError, sizeof(TempError), "El Slot número \"%i\" esta vacío", SlotIDGet + 1 );
								            SendInfoMessage(playerid, 0, "1599", TempError);
										}
									}
									else
									{
	 									SendInfoMessage(playerid, 0, "1600", "El número del SLOT para la gaveta debe estar comprendido entre 1 y 8.");
									}
								}
	        			    }
	        			    else if ( PlayersData[playerid][IsPlayerInHouse] )
	        			    {
	        			        new Houseid = PlayersData[playerid][IsPlayerInHouse];
								if ( IsOpenGaveta(playerid, Houseid) )
								{
									if ( SlotIDGet >= 1 && SlotIDGet <= MAX_GUANTERA_GAVETA_SLOTS )
								    {
								        SlotIDGet--;
										if ( HouseData[Houseid][GavetaObjects][SlotIDGet] )
										{
										    new saveType = GetObjectByType(playerid, GetTypeObjectEx(HouseData[Houseid][GavetaObjects][SlotIDGet]));
										    if ( saveType == -1 )
										    {
												new MsgGiveGG[MAX_TEXT_CHAT];
												new MsgGiveGGME[MAX_TEXT_CHAT];
										        format(MsgGiveGG, sizeof(MsgGiveGG), "coge %s de la gaveta", ObjectsNames[GetTypeObjectEx(HouseData[Houseid][GavetaObjects][SlotIDGet])]);
										        format(MsgGiveGGME, sizeof(MsgGiveGGME), "has cogido %s de la gaveta", ObjectsNames[GetTypeObjectEx(HouseData[Houseid][GavetaObjects][SlotIDGet])]);
										        Acciones(playerid, 8, MsgGiveGG);
										        SendInfoMessage(playerid, 2, "0", MsgGiveGGME);

										        AddObjectHoldToPlayer(playerid, HouseData[Houseid][GavetaObjects][SlotIDGet]);
										        HouseData[Houseid][GavetaObjects][SlotIDGet] = false;
										    }
										    else
										    {
												SendInfoMessage(playerid, 0, "1594", "No puedes llevar más objetos de este tipo!");
										    }
										}
										else
										{
								            new TempError[50];
								            format(TempError, sizeof(TempError), "El Slot número \"%i\" esta vacío", SlotIDGet + 1 );
								            SendInfoMessage(playerid, 0, "1595", TempError);
										}
									}
									else
									{
	 									SendInfoMessage(playerid, 0, "1596", "El número del SLOT para la gaveta debe estar comprendido entre 1 y 8.");
									}
								}
	        			    }
	        			    else
	        			    {
								SendInfoMessage(playerid, 0, "1597", "No te encuentras en la guantera del coche ni en la gaveta de la casa!");
	        			    }
        			    }
			    	}
				    // COGER ALMACENES
					else if ( IsPlayerInAlmacen(playerid, false) != -1 )
					{
						new MyNearAlmacen = IsPlayerInAlmacen(playerid, false);
						new FaccionID = PlayersData[playerid][Faccion];
						if ( FaccionData[FaccionID][LockA][MyNearAlmacen] )
						{
		        			// COMANDO: /Coger Chaleco
					  		if (strfind(cmdtext, "/Coger Chaleco ", true) == 0)
					    	{
					    	    new ChalecoID = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
					    	    if ( ChalecoID >= 1 && ChalecoID <= 4 )
					    	    {
					    	        ChalecoID--;
									if ( FaccionesChaleco[FaccionID][MyNearAlmacen][ChalecoID] != 0 )
									{
		                                SetPlayerArmourEx(playerid, FaccionesChaleco[FaccionID][MyNearAlmacen][ChalecoID]);
									    FaccionesChaleco[FaccionID][MyNearAlmacen][ChalecoID] = 0;
								        Acciones(playerid, 8, "ha cogido un chaleco del almacén");
								        SendInfoMessage(playerid, 2, "0", "Has cogido un chaleco del almacén.");
									}
									else
									{
							            new TempError[50];
							            format(TempError, sizeof(TempError), "El Slot número \"%i\" esta vacío", ChalecoID + 1 );
							            SendInfoMessage(playerid, 0, "1383", TempError);
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "1384", "El número del SLOT para chaleco debe estar comprendido entre 1 y 4.");
								}
					    	}
		        			// COMANDO: /Coger Arma
							else if (strcmp("/Coger Arma", cmdtext, true, 11) == 0 && strlen(cmdtext) == 11)
					    	{
								new EmpySlot = -1;
								for (new i = 0; i < 10; i++)
								{
								    if (  WeaponsFaccion[FaccionID][MyNearAlmacen][i] != 0 )
								    {
		                                EmpySlot = i;
										break;
								    }
								}
								if ( CheckWeapondCheat(playerid) && EmpySlot != -1 )
								{
		                            GivePlayerWeaponEx(playerid, WeaponsFaccion[FaccionID][MyNearAlmacen][EmpySlot], AmmoFaccion[FaccionID][MyNearAlmacen][EmpySlot]);

									new MsgCoger[MAX_TEXT_CHAT];
									new MsgCogerMe[MAX_TEXT_CHAT];
							        format(MsgCoger, sizeof(MsgCoger), "Has cogido un %s del almacén.", SlotNameWeapon[WeaponsFaccion[FaccionID][MyNearAlmacen][EmpySlot]]);
							        format(MsgCogerMe, sizeof(MsgCogerMe), "ha cogido %s del almacén", SlotNameWeapon[WeaponsFaccion[FaccionID][MyNearAlmacen][EmpySlot]]);
							        Acciones(playerid, 8, MsgCogerMe);
							        SendInfoMessage(playerid, 2, "0", MsgCoger);
		                            WeaponsFaccion[FaccionID][MyNearAlmacen][EmpySlot] = 0;
		                            AmmoFaccion[FaccionID][MyNearAlmacen][EmpySlot] = 0;
								}
								else
								{
									SendInfoMessage(playerid, 0, "1385", "El almacén se encuentra vacío!");
								}
					    	}
		        			// COMANDO: /Coger ArmaEx [ID_Slot]
					  		else if (strfind(cmdtext, "/Coger ArmaEx ", true) == 0)
						    {
					    	    new SlotID = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
								if ( SlotID >= 1 && SlotID <= 10 )
							    {
							        SlotID--;
							        if ( CheckWeapondCheat(playerid) && WeaponsFaccion[FaccionID][MyNearAlmacen][SlotID] != 0 )
							        {
			                            GivePlayerWeaponEx(playerid, WeaponsFaccion[FaccionID][MyNearAlmacen][SlotID], AmmoFaccion[FaccionID][MyNearAlmacen][SlotID]);
										new MsgCoger[MAX_TEXT_CHAT];
										new MsgCogerMe[MAX_TEXT_CHAT];
								        format(MsgCoger, sizeof(MsgCoger), "Has cogido %s del almacén.", SlotNameWeapon[WeaponsFaccion[FaccionID][MyNearAlmacen][SlotID]]);
								        format(MsgCogerMe, sizeof(MsgCogerMe), "ha cogido %s del almacén", SlotNameWeapon[WeaponsFaccion[FaccionID][MyNearAlmacen][SlotID]]);
								        Acciones(playerid, 8, MsgCogerMe);
								        SendInfoMessage(playerid, 2, "0", MsgCoger);
		                                WeaponsFaccion[FaccionID][MyNearAlmacen][SlotID] 	= 0;
		                                AmmoFaccion[FaccionID][MyNearAlmacen][SlotID] 		= 0;
									}
									else
									{
							            new TempError[50];
							            format(TempError, sizeof(TempError), "En Slot número \"%i\" esta vacío", SlotID + 1 );
							            SendInfoMessage(playerid, 0, "1386", TempError);
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "1387", "La ID de el Slot a coger el arma tiene que estar comprendio entre 1 y 10");
								}
						    }
		        			// COMANDO: /Coger Drogas [Cantidad]
					  		else if (strfind(cmdtext, "/Coger Drogas ", true) == 0)
						    {
					    	    new CantidadItem = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
						        if ( FaccionData[FaccionID][Drogas][MyNearAlmacen] > 0 && FaccionData[FaccionID][Drogas][MyNearAlmacen] >= CantidadItem )
						        {
							        PlayersData[playerid][Drogas]  += CantidadItem;
							        FaccionData[FaccionID][Drogas][MyNearAlmacen] -= CantidadItem;

									new MsgCoger[MAX_TEXT_CHAT];
							        format(MsgCoger, sizeof(MsgCoger), "Has cogido %i drogas del almacén.", CantidadItem);
							        Acciones(playerid, 8, "ha cogido drogas del almacén");
							        SendInfoMessage(playerid, 2, "0", MsgCoger);
								}
								else
								{
									SendInfoMessage(playerid, 0, "1388", "El almacén no tiene esa cantidad de drogas a coger!");
								}
					    	}
		        			// COMANDO: /Coger Ganzúas [Cantidad]
					  		else if (strfind(cmdtext, "/Coger Ganzúas ", true) == 0 || strfind(cmdtext, "/Coger Ganzuas ", true) == 0)
						    {
					    	    new CantidadItem = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
						        if ( FaccionData[FaccionID][Ganzuas][MyNearAlmacen] > 0 && FaccionData[FaccionID][Ganzuas][MyNearAlmacen] >= CantidadItem )
						        {
							        PlayersData[playerid][Ganzuas]  += CantidadItem;
							        FaccionData[FaccionID][Ganzuas][MyNearAlmacen] -= CantidadItem;

									new MsgCoger[MAX_TEXT_CHAT];
							        format(MsgCoger, sizeof(MsgCoger), "Has cogido %i ganzúas del almacén.", CantidadItem);
							        Acciones(playerid, 8, "ha cogido ganzúas del almacén");
							        SendInfoMessage(playerid, 2, "0", MsgCoger);
								}
								else
								{
									SendInfoMessage(playerid, 0, "1389", "El almacén no tiene esa cantidad de ganzúas a coger!");
								}
					    	}
		        			// COMANDO: /Coger Materiales [Cantidad]
					  		else if (strfind(cmdtext, "/Coger Materiales ", true) == 0)
						    {
								if ( PlayersData[playerid][Faccion] == CAMIONEROS && PlayersData[playerid][Rango] <= 3  ||
									 PlayersData[playerid][Faccion] == CONTRABANDISTAS && PlayersData[playerid][Rango] <= 3 	||
									 PlayersData[playerid][Faccion] == TRAFICANTES && PlayersData[playerid][Rango] <= 2	||
									 PlayersData[playerid][Faccion] == YKZ ||
									 PlayersData[playerid][Faccion] == LCN ||
									 PlayersData[playerid][Faccion] == SICARIOS && PlayersData[playerid][Rango] <= 3 ||
	 								 PlayersData[playerid][Rango] <= 1 && (
									 PlayersData[playerid][Faccion] == COLTS    ||
	 								 PlayersData[playerid][Faccion] == AK	    ||
	 								 PlayersData[playerid][Faccion] == VELTRAN  ||
	 								 PlayersData[playerid][Faccion] == HEORS) 	)
								{
						    	    new CantidadItem = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
							        if ( FaccionData[FaccionID][Almacen][MyNearAlmacen] > 0 && FaccionData[FaccionID][Almacen][MyNearAlmacen] >= CantidadItem )
							        {
						                if ( IsNotFullMaterialsPlayer(playerid, CantidadItem) )
							            {
									        PlayersData[playerid][Materiales] 			   += CantidadItem;
									        FaccionData[FaccionID][Almacen][MyNearAlmacen] -= CantidadItem;

											new MsgCoger[MAX_TEXT_CHAT];
											format(MsgCoger, sizeof(MsgCoger), "Has cogido %i materiales del almacén.", CantidadItem);
											Acciones(playerid, 8, "ha cogido materiales del almacén");
									        SendInfoMessage(playerid, 2, "0", MsgCoger);
								        }
								        else
								        {
									    	SendInfoMessage(playerid, 0, "1390", "No puedes cargar esa cantidad de materiales encima! Recuerda que el máximo es 2500");
										}
									}
									else
									{
										SendInfoMessage(playerid, 0, "1391", "El almacén no tiene esa cantidad de materiales a coger!");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "1392", "Usted no puede retirar materiales del almacén");
								}
					    	}
		        			// COMANDO: /Coger Bombas [Cantidad]
					  		else if (strfind(cmdtext, "/Coger Bombas ", true) == 0)
						    {
					    	    new CantidadItem = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
						        if ( FaccionData[FaccionID][Bombas][MyNearAlmacen] > 0 && FaccionData[FaccionID][Bombas][MyNearAlmacen] >= CantidadItem )
						        {
							        PlayersData[playerid][Bombas] 					+= CantidadItem;
							        FaccionData[FaccionID][Bombas][MyNearAlmacen] 	-= CantidadItem;

									new MsgCoger[MAX_TEXT_CHAT];
							        format(MsgCoger, sizeof(MsgCoger), "Has cogido %i bombas del almacén.", CantidadItem);
							        Acciones(playerid, 8, "ha cogido bombas del almacén");
							        SendInfoMessage(playerid, 2, "0", MsgCoger);
								}
								else
								{
									SendInfoMessage(playerid, 0, "1393", "El almacén no tiene esa cantidad de bombas a coger!");
								}
					    	}
					    	else
					    	{
								SendInfoMessage(playerid, 0, "1394", "Quizás quiso decir: /Coger {Arma, ArmaEx [ID_SLOT], Chaleco, Drogas [Cantidad], Bombas [Cantidad], Ganzúas [Cantidad]}");
								SendInfoMessage(playerid, 0, "1394", "Quizás quiso decir: /Coger {Materiales [Cantidad], Artículo [ID_Refrigerador], Objeto, ObjetoEx [ID_SLOT]}");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1396", "El almacén se encuentra cerrado.");
						}
				    }
				    // COGER COCHES
				    else if ( GetPlayerInteriorEx(playerid) == 0 || PlayersData[playerid][IsPlayerInGarage] >= 0 || !PlayersData[playerid][IsPlayerInHouse] )
				    {
					    new MyMalteroOpen = IsMaleteroOpen(playerid);
					    if ( MyMalteroOpen )
					    {
		        			// COMANDO: /Coger Chaleco
						  	if (strcmp("/Coger Chaleco", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
					    	{
								if ( coches_Todos_Maleteros[MyMalteroOpen][7][0] != 0 )
								{
	                                SetPlayerArmourEx(playerid, coches_Todos_Maleteros[MyMalteroOpen][7][0]);
								    coches_Todos_Maleteros[MyMalteroOpen][7][0] = 0;
							        Acciones(playerid, 8, "ha cogido un chaleco del maletero");
							        SendInfoMessage(playerid, 2, "0", "Has cogido un chaleco del maletero.");
								}
								else
								{
									SendInfoMessage(playerid, 0, "263", "En el maletero no hay ningún chaleco.");
								}
					    	}
		        			// COMANDO: /Coger Arma
							else if (strcmp("/Coger Arma", cmdtext, true, 11) == 0 && strlen(cmdtext) == 11)
					    	{
								new EmpySlot = -1;
								for (new i = 0; i < 7; i++)
								{
								    if ( coches_Todos_Maleteros[MyMalteroOpen][i][0] != 0 )
								    {
		                                EmpySlot = i;
										break;
								    }
								}
								if ( CheckWeapondCheat(playerid) && EmpySlot != -1 )
								{
		                            GivePlayerWeaponEx(playerid, coches_Todos_Maleteros[MyMalteroOpen][EmpySlot][0], coches_Todos_Maleteros[MyMalteroOpen][EmpySlot][1]);
									new MsgCoger[MAX_TEXT_CHAT];
									new MsgCogerMe[MAX_TEXT_CHAT];
							        format(MsgCoger, sizeof(MsgCoger), "Has cogido un %s del maletero.", SlotNameWeapon[coches_Todos_Maleteros[MyMalteroOpen][EmpySlot][0]]);
							        format(MsgCogerMe, sizeof(MsgCogerMe), "ha cogido %s del maletero", SlotNameWeapon[coches_Todos_Maleteros[MyMalteroOpen][EmpySlot][0]]);
							        Acciones(playerid, 8, MsgCogerMe);
							        SendInfoMessage(playerid, 2, "0", MsgCoger);
		                            coches_Todos_Maleteros[MyMalteroOpen][EmpySlot][0] = 0;
		                            coches_Todos_Maleteros[MyMalteroOpen][EmpySlot][1] = 0;
								}
								else
								{
									SendInfoMessage(playerid, 0, "262", "El maletero se encuentra vacío!");
								}
					    	}
		        			// COMANDO: /Coger ArmaEx [ID_Slot]
					  		else if (strfind(cmdtext, "/Coger ArmaEx ", true) == 0)
						    {
								if ( strval(cmdtext[14]) >= 1 && strval(cmdtext[14]) <= 7 )
							    {
							        if ( CheckWeapondCheat(playerid) && coches_Todos_Maleteros[MyMalteroOpen][strval(cmdtext[14]) - 1][0] != 0 )
							        {
			                            GivePlayerWeaponEx(playerid, coches_Todos_Maleteros[MyMalteroOpen][strval(cmdtext[14]) - 1][0], coches_Todos_Maleteros[MyMalteroOpen][strval(cmdtext[14]) - 1][1]);
										new MsgCoger[MAX_TEXT_CHAT];
										new MsgCogerMe[MAX_TEXT_CHAT];
								        format(MsgCoger, sizeof(MsgCoger), "Has cogido %s del maletero.", SlotNameWeapon[coches_Todos_Maleteros[MyMalteroOpen][strval(cmdtext[14]) - 1][0]]);
								        format(MsgCogerMe, sizeof(MsgCogerMe), "ha cogido %s del maletero", SlotNameWeapon[coches_Todos_Maleteros[MyMalteroOpen][strval(cmdtext[14]) - 1][0]]);
								        Acciones(playerid, 8, MsgCogerMe);
								        SendInfoMessage(playerid, 2, "0", MsgCoger);
		                                coches_Todos_Maleteros[MyMalteroOpen][strval(cmdtext[14]) - 1][0] = 0;
		                                coches_Todos_Maleteros[MyMalteroOpen][strval(cmdtext[14]) - 1][1] = 0;
									}
									else
									{
							            new TempError[50];
							            format(TempError, sizeof(TempError), "En Slot número \"%i\" esta vacío", strval(cmdtext[14]) );
							            SendInfoMessage(playerid, 0, "261", TempError);
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "260", "La ID de el Slot a coger el arma tiene que estar comprendio entre 1 y 7");
								}
						    }
		        			// COMANDO: /Coger Drogas [Cantidad]
					  		else if (strfind(cmdtext, "/Coger Drogas ", true) == 0)
						    {
						        if ( coches_Todos_Maleteros[MyMalteroOpen][8][0] > 0 && coches_Todos_Maleteros[MyMalteroOpen][8][0] >= strval(cmdtext[14]) )
						        {
							        PlayersData[playerid][Drogas] = PlayersData[playerid][Drogas] + strval(cmdtext[14]);
							        coches_Todos_Maleteros[MyMalteroOpen][8][0] = coches_Todos_Maleteros[MyMalteroOpen][8][0] - strval(cmdtext[14]);

									new MsgCoger[MAX_TEXT_CHAT];
							        format(MsgCoger, sizeof(MsgCoger), "Has cogido %i drogas del maletero.", strval(cmdtext[14]));
							        Acciones(playerid, 8, "ha cogido drogas del maletero");
							        SendInfoMessage(playerid, 2, "0", MsgCoger);
								}
								else
								{
									SendInfoMessage(playerid, 0, "271", "El maletero no tiene esa cantidad de drogas a coger!");
								}
					    	}
		        			// COMANDO: /Coger Ganzúas [Cantidad]
					  		else if (strfind(cmdtext, "/Coger Ganzúas ", true) == 0 || strfind(cmdtext, "/Coger Ganzuas ", true) == 0)
						    {
						        if ( coches_Todos_Maleteros[MyMalteroOpen][9][0] > 0 && coches_Todos_Maleteros[MyMalteroOpen][9][0] >= strval(cmdtext[15]) )
						        {
							        PlayersData[playerid][Ganzuas] = PlayersData[playerid][Ganzuas] + strval(cmdtext[15]);
							        coches_Todos_Maleteros[MyMalteroOpen][9][0] = coches_Todos_Maleteros[MyMalteroOpen][9][0] - strval(cmdtext[15]);

									new MsgCoger[MAX_TEXT_CHAT];
							        format(MsgCoger, sizeof(MsgCoger), "Has cogido %i ganzúas del maletero.", strval(cmdtext[15]));
							        Acciones(playerid, 8, "ha cogido ganzúas del maletero");
							        SendInfoMessage(playerid, 2, "0", MsgCoger);
								}
								else
								{
									SendInfoMessage(playerid, 0, "270", "El maletero no tiene esa cantidad de ganzúas a coger!");
								}
					    	}
		        			// COMANDO: /Coger Materiales [Cantidad]
					  		else if (strfind(cmdtext, "/Coger Materiales ", true) == 0)
						    {
						        if ( coches_Todos_Maleteros[MyMalteroOpen][10][0] > 0 && coches_Todos_Maleteros[MyMalteroOpen][10][0] >= strval(cmdtext[17]) )
						        {
					                if ( IsNotFullMaterialsPlayer(playerid, strval(cmdtext[17])) )
						            {
								        PlayersData[playerid][Materiales] = PlayersData[playerid][Materiales] + strval(cmdtext[17]);
								        coches_Todos_Maleteros[MyMalteroOpen][10][0] = coches_Todos_Maleteros[MyMalteroOpen][10][0] - strval(cmdtext[17]);

										new MsgCoger[MAX_TEXT_CHAT];
								        format(MsgCoger, sizeof(MsgCoger), "Has cogido %i materiales del maletero.", strval(cmdtext[17]));
								        Acciones(playerid, 8, "ha cogido materiales del maletero");
								        SendInfoMessage(playerid, 2, "0", MsgCoger);
							        }
							        else
							        {
								    	SendInfoMessage(playerid, 0, "1041", "No puedes cargar esa cantidad de materiales encima! Recuerda que el máximo es 2500");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "269", "El maletero no tiene esa cantidad de materiales a coger!");
								}
					    	}
		        			// COMANDO: /Coger Bombas [Cantidad]
					  		else if (strfind(cmdtext, "/Coger Bombas ", true) == 0)
						    {
						        if ( coches_Todos_Maleteros[MyMalteroOpen][11][0] > 0 && coches_Todos_Maleteros[MyMalteroOpen][11][0] >= strval(cmdtext[14]) )
						        {
							        PlayersData[playerid][Bombas] = PlayersData[playerid][Bombas] + strval(cmdtext[14]);
							        coches_Todos_Maleteros[MyMalteroOpen][11][0] = coches_Todos_Maleteros[MyMalteroOpen][11][0] - strval(cmdtext[14]);

									new MsgCoger[MAX_TEXT_CHAT];
							        format(MsgCoger, sizeof(MsgCoger), "Has cogido %i bombas del maletero.", strval(cmdtext[14]));
							        Acciones(playerid, 8, "ha cogido bombas del maletero");
							        SendInfoMessage(playerid, 2, "0", MsgCoger);
								}
								else
								{
									SendInfoMessage(playerid, 0, "268", "El maletero no tiene esa cantidad de bombas a coger!");
								}
					    	}
					    	else
					    	{
								SendInfoMessage(playerid, 0, "259", "Quizás quiso decir: /Coger {Arma, ArmaEx [ID_SLOT], Chaleco, Drogas [Cantidad], Bombas [Cantidad], Ganzúas [Cantidad]}");
								SendInfoMessage(playerid, 0, "259", "Quizás quiso decir: /Coger {Materiales [Cantidad], Artículo [ID_Refrigerador], Objeto, ObjetoEx [ID_SLOT]}");
							}
						}
				    }
				    // COGER CASAS
					else if ( PlayersData[playerid][IsPlayerInHouse] )
					{
						new HouseId = PlayersData[playerid][IsPlayerInHouse];
	        			// COMANDO: /Coger Chaleco
					  	if (strcmp("/Coger Chaleco", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
				    	{
							if ( IsOpenCloset(playerid, HouseId) )
							{
								if ( HouseData[HouseId][Chaleco] != 0 )
								{
									SetPlayerArmourEx(playerid, HouseData[HouseId][Chaleco]);
								    HouseData[HouseId][Chaleco] = 0;
							        Acciones(playerid, 8, "ha cogido un chaleco del armario");
							        SendInfoMessage(playerid, 2, "0", "Has cogido un chaleco del armario.");
								}
								else
								{
									SendInfoMessage(playerid, 0, "641", "En el armario no hay ningún chaleco.");
								}
							}
				    	}
	        			// COMANDO: /Coger Arma
						else if (strcmp("/Coger Arma", cmdtext, true, 11) == 0 && strlen(cmdtext) == 11)
				    	{
							if ( IsOpenCloset(playerid, HouseId) )
							{
								new EmpySlot = -1;
								for (new i = 0; i < 7; i++)
								{
								    if ( HouseData[HouseId][ArmarioWeapon][i] != 0 )
								    {
		                                EmpySlot = i;
										break;
								    }
								}
								if ( CheckWeapondCheat(playerid) && EmpySlot != -1 )
								{
		                            GivePlayerWeaponEx(playerid, HouseData[HouseId][ArmarioWeapon][EmpySlot], HouseData[HouseId][ArmarioAmmo][EmpySlot]);
									new MsgCoger[MAX_TEXT_CHAT];
									new MsgCogerMe[MAX_TEXT_CHAT];
							        format(MsgCoger, sizeof(MsgCoger), "Has cogido un %s del armario.", SlotNameWeapon[HouseData[HouseId][ArmarioWeapon][EmpySlot]]);
							        format(MsgCogerMe, sizeof(MsgCogerMe), "ha cogido %s del armario", SlotNameWeapon[HouseData[HouseId][ArmarioWeapon][EmpySlot]]);
							        Acciones(playerid, 8, MsgCogerMe);
							        SendInfoMessage(playerid, 2, "0", MsgCoger);
		                            HouseData[HouseId][ArmarioWeapon][EmpySlot] = 0;
		                            HouseData[HouseId][ArmarioAmmo][EmpySlot] = 0;
								}
								else
								{
									SendInfoMessage(playerid, 0, "642", "El armario se encuentra vacío!");
								}
							}
				    	}
	        			// COMANDO: /Coger ArmaEx [ID_Slot]
				  		else if (strfind(cmdtext, "/Coger ArmaEx ", true) == 0)
					    {
							if ( IsOpenCloset(playerid, HouseId) )
							{
								if ( strval(cmdtext[14]) >= 1 && strval(cmdtext[14]) <= 7 )
							    {
							        if ( CheckWeapondCheat(playerid) && HouseData[HouseId][ArmarioWeapon][strval(cmdtext[14]) - 1] != 0 )
							        {
			                            GivePlayerWeaponEx(playerid, HouseData[HouseId][ArmarioWeapon][strval(cmdtext[14]) - 1], HouseData[HouseId][ArmarioAmmo][strval(cmdtext[14]) - 1]);
										new MsgCoger[MAX_TEXT_CHAT];
										new MsgCogerMe[MAX_TEXT_CHAT];
								        format(MsgCoger, sizeof(MsgCoger), "Has cogido %s del armario.", SlotNameWeapon[HouseData[HouseId][ArmarioWeapon][strval(cmdtext[14]) - 1]]);
								        format(MsgCogerMe, sizeof(MsgCogerMe), "ha cogido %s del armario", SlotNameWeapon[HouseData[HouseId][ArmarioWeapon][strval(cmdtext[14]) - 1]]);
								        Acciones(playerid, 8, MsgCogerMe);
								        SendInfoMessage(playerid, 2, "0", MsgCoger);
		                                HouseData[HouseId][ArmarioWeapon][strval(cmdtext[14]) - 1] = 0;
		                                HouseData[HouseId][ArmarioAmmo][strval(cmdtext[14]) - 1] = 0;
									}
									else
									{
							            new TempError[50];
							            format(TempError, sizeof(TempError), "En Slot número \"%i\" esta vacío", strval(cmdtext[14]) );
							            SendInfoMessage(playerid, 0, "643", TempError);
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "644", "La ID de el Slot a coger el arma tiene que estar comprendio entre 1 y 7");
								}
							}
					    }
	        			// COMANDO: /Coger Drogas [Cantidad]
				  		else if (strfind(cmdtext, "/Coger Drogas ", true) == 0)
					    {
							if ( IsOpenCloset(playerid, HouseId) )
							{
						        if ( HouseData[HouseId][Drogas] > 0 && HouseData[HouseId][Drogas] >= strval(cmdtext[14]) )
						        {
							        PlayersData[playerid][Drogas] = PlayersData[playerid][Drogas] + strval(cmdtext[14]);
							        HouseData[HouseId][Drogas] = HouseData[HouseId][Drogas] - strval(cmdtext[14]);

									new MsgCoger[MAX_TEXT_CHAT];
							        format(MsgCoger, sizeof(MsgCoger), "Has cogido %i drogas del armario.", strval(cmdtext[14]));
							        Acciones(playerid, 8, "ha cogido drogas del armario");
							        SendInfoMessage(playerid, 2, "0", MsgCoger);
								}
								else
								{
									SendInfoMessage(playerid, 0, "645", "El armario no tiene esa cantidad de drogas a coger!");
								}
							}
				    	}
	        			// COMANDO: /Coger Ganzúas [Cantidad]
				  		else if (strfind(cmdtext, "/Coger Ganzúas ", true) == 0 || strfind(cmdtext, "/Coger Ganzuas ", true) == 0)
					    {
							if ( IsOpenCloset(playerid, HouseId) )
							{
						        if ( HouseData[HouseId][Ganzuas] > 0 && HouseData[HouseId][Ganzuas] >= strval(cmdtext[15]) )
						        {
							        PlayersData[playerid][Ganzuas] = PlayersData[playerid][Ganzuas] + strval(cmdtext[15]);
							        HouseData[HouseId][Ganzuas] = HouseData[HouseId][Ganzuas] - strval(cmdtext[15]);

									new MsgCoger[MAX_TEXT_CHAT];
							        format(MsgCoger, sizeof(MsgCoger), "Has cogido %i ganzúas del armario.", strval(cmdtext[15]));
							        Acciones(playerid, 8, "ha cogido ganzúas del armario");
							        SendInfoMessage(playerid, 2, "0", MsgCoger);
								}
								else
								{
									SendInfoMessage(playerid, 0, "646", "El armario no tiene esa cantidad de ganzúas a coger!");
								}
							}
				    	}
	        			// COMANDO: /Coger Materiales [Cantidad]
				  		else if (strfind(cmdtext, "/Coger Materiales ", true) == 0)
					    {
							if ( IsOpenCloset(playerid, HouseId) )
							{
						        if ( HouseData[HouseId][Materiales] > 0 && HouseData[HouseId][Materiales] >= strval(cmdtext[17]) )
						        {
					                if ( IsNotFullMaterialsPlayer(playerid, strval(cmdtext[17])) )
						            {
								        PlayersData[playerid][Materiales] = PlayersData[playerid][Materiales] + strval(cmdtext[17]);
								        HouseData[HouseId][Materiales] = HouseData[HouseId][Materiales] - strval(cmdtext[17]);

										new MsgCoger[MAX_TEXT_CHAT];
								        format(MsgCoger, sizeof(MsgCoger), "Has cogido %i materiales del armario.", strval(cmdtext[17]));
								        Acciones(playerid, 8, "ha cogido materiales del armario");
								        SendInfoMessage(playerid, 2, "0", MsgCoger);
							        }
							        else
							        {
								    	SendInfoMessage(playerid, 0, "1042", "No puedes cargar esa cantidad de materiales encima! Recuerda que el máximo es 2500");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "647", "El maletero no tiene esa cantidad de materiales a coger!");
								}
							}
				    	}
	        			// COMANDO: /Coger Bombas [Cantidad]
				  		else if (strfind(cmdtext, "/Coger Bombas ", true) == 0)
					    {
							if ( IsOpenCloset(playerid, HouseId) )
							{
						        if ( HouseData[HouseId][Bombas] > 0 && HouseData[HouseId][Bombas] >= strval(cmdtext[14]) )
						        {
							        PlayersData[playerid][Bombas] = PlayersData[playerid][Bombas] + strval(cmdtext[14]);
							        HouseData[HouseId][Bombas] = HouseData[HouseId][Bombas] - strval(cmdtext[14]);

									new MsgCoger[MAX_TEXT_CHAT];
							        format(MsgCoger, sizeof(MsgCoger), "Has cogido %i bombas del armario.", strval(cmdtext[14]));
							        Acciones(playerid, 8, "ha cogido bombas del armario");
							        SendInfoMessage(playerid, 2, "0", MsgCoger);
								}
								else
								{
									SendInfoMessage(playerid, 0, "648", "El armario no tiene esa cantidad de bombas a coger!");
								}
							}
				    	}
				    	else
				    	{
							SendInfoMessage(playerid, 0, "649", "Quizás quiso decir: /Coger {Arma, ArmaEx [ID_SLOT], Chaleco, Drogas [Cantidad], Bombas [Cantidad], Ganzúas [Cantidad]}");
							SendInfoMessage(playerid, 0, "649", "Quizás quiso decir: /Coger {Materiales [Cantidad], Artículo [ID_Refrigerador], Objeto, ObjetoEx [ID_SLOT]}");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "628", "No estas en una casa");
					}
				}
				// COMANDO: /Dejar
				else if (strfind(cmdtext, "/Dejar ", true) == 0)
				{
				    // ALL DEJAR
					// COMANDO: /Dejar Artículo [ID_Bolsa]
			  		if ( strfind(cmdtext, "/Dejar Artículo ", true) == 0 ||
				  		 strfind(cmdtext, "/Dejar Articulo ", true) == 0)
				    {
						new HouseId = PlayersData[playerid][IsPlayerInHouse];
						if ( HouseId )
						{
					        if ( IsOpenRefrigerador(playerid, HouseId) )
					        {
						        new BolsaID = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
								if ( AddArticleRefrigeradorFun(playerid, HouseId, BolsaID) == -1)
								{
									SendInfoMessage(playerid, 0, "1590", "El refrigerador se encuentra lleno!");
								}
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1591", "No estas en una casa");
						}
			    	}
				    // DEJAR ALAMACENES
					else if ( IsPlayerInAlmacen(playerid, false) != -1 )
					{
						new MyNearAlmacen = IsPlayerInAlmacen(playerid, false);
						new FaccionID = PlayersData[playerid][Faccion];
						if ( FaccionData[FaccionID][LockA][MyNearAlmacen] )
						{
		        			// COMANDO: /Dejar Chaleco
					  		if (strfind(cmdtext, "/Dejar Chaleco ", true) == 0)
					    	{
					    	    new ChalecoID = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
					    	    if ( ChalecoID >= 1 && ChalecoID <= 4 )
					    	    {
					    	        ChalecoID--;
									new Float:Chaleco1;
									GetPlayerArmour(playerid, Chaleco1);
									if ( Chaleco1 != 0.0 )
									{
										SetPlayerArmourEx(playerid, -Chaleco1);
									    FaccionesChaleco[FaccionID][MyNearAlmacen][ChalecoID] = Chaleco1;

								        Acciones(playerid, 8, "ha dejado un chaleco en el almacén");
								        SendInfoMessage(playerid, 2, "0", "Has dejado un chaleco en el almacén.");
									}
									else
									{
										SendInfoMessage(playerid, 0, "1397", "Usted no tienes ningún chaleco puesto encima.");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "1398", "El número del SLOT para chaleco debe estar comprendido entre 1 y 4.");
								}
					    	}
		        			// COMANDO: /Dejar Arma
						  	else if (strcmp("/Dejar Arma", cmdtext, true, 11) == 0 && strlen(cmdtext) == 11)
					    	{
								new MyWeapons, MyAmmo; MyWeapons = GetPlayerWeapon(playerid); MyAmmo = GetPlayerAmmo(playerid);
						        if ( CheckWeapondCheat(playerid) && MyWeapons != 0 )
						        {
									new EmpySlot = -1;
									for (new i = 0; i < 10; i++)
									{
									    if ( WeaponsFaccion[FaccionID][MyNearAlmacen][i] == 0 )
									    {
		                                    EmpySlot = i;
											break;
									    }
									}
									if ( EmpySlot != -1 )
									{
			                            WeaponsFaccion[FaccionID][MyNearAlmacen][EmpySlot] 	= MyWeapons;
			                            AmmoFaccion[FaccionID][MyNearAlmacen][EmpySlot] 	= MyAmmo;

			                            RemovePlayerWeapond(playerid, MyWeapons);

										new MsgDejar[MAX_TEXT_CHAT];
										new MsgDejarMe[MAX_TEXT_CHAT];
								        format(MsgDejar, sizeof(MsgDejar), "Has dejado un %s en el almacén.", SlotNameWeapon[MyWeapons]);
								        format(MsgDejarMe, sizeof(MsgDejarMe), "ha dejado %s en el almacén", SlotNameWeapon[MyWeapons]);
								        Acciones(playerid, 8, MsgDejarMe);
								        SendInfoMessage(playerid, 2, "0", MsgDejar);
									}
									else
									{
										SendInfoMessage(playerid, 0, "1399", "El almacén se encuentra lleno!");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "1400", "No tienes un arma en las manos!");
								}
					    	}
		        			// COMANDO: /Dejar ArmaEx [ID_Slot]
					  		else if (strfind(cmdtext, "/Dejar ArmaEx ", true) == 0)
						    {
								new MyWeapons, MyAmmo; MyWeapons = GetPlayerWeapon(playerid); MyAmmo = GetPlayerAmmo(playerid);
						        if ( CheckWeapondCheat(playerid) && MyWeapons != 0 )
						        {
									new SlotID = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
								    if ( SlotID >= 1 && SlotID <= 10 )
								    {
								        SlotID--;
								        if ( WeaponsFaccion[FaccionID][MyNearAlmacen][SlotID] == 0 )
								        {
			                                WeaponsFaccion[FaccionID][MyNearAlmacen][SlotID] = MyWeapons;
			                                AmmoFaccion[FaccionID][MyNearAlmacen][SlotID]    = MyAmmo;
			                                RemovePlayerWeapond(playerid, MyWeapons);

											new MsgDejar[MAX_TEXT_CHAT];
											new MsgDejarMe[MAX_TEXT_CHAT];
									        format(MsgDejar, sizeof(MsgDejar), "Has dejado un %s en el almacén.", SlotNameWeapon[MyWeapons]);
									        format(MsgDejarMe, sizeof(MsgDejarMe), "ha dejado %s en el almacén", SlotNameWeapon[MyWeapons]);
									        Acciones(playerid, 8, MsgDejarMe);
									        SendInfoMessage(playerid, 2, "0", MsgDejar);
										}
										else
										{
								            new TempError[60];
								            format(TempError, sizeof(TempError), "En Slot número \"%i\" ya esta ocupado por otra arma",SlotID + 1 );
								            SendInfoMessage(playerid, 0, "1401", TempError);
										}
									}
									else
									{
										SendInfoMessage(playerid, 0, "1402", "La ID de el Slot a dejar el arma tiene que estar comprendio entre 1 y 10");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "1403", "No tienes un arma en las manos!");
								}
						    }
		        			// COMANDO: /Dejar Drogas [Cantidad]
					  		else if (strfind(cmdtext, "/Dejar Drogas ", true) == 0)
						    {
					    	    new CantidadItem = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
						        if ( PlayersData[playerid][Drogas] > 0 && PlayersData[playerid][Drogas] >= CantidadItem )
						        {
							        FaccionData[FaccionID][Drogas][MyNearAlmacen] += CantidadItem;
							        PlayersData[playerid][Drogas] -= CantidadItem;

									new MsgDejar[MAX_TEXT_CHAT];
							        format(MsgDejar, sizeof(MsgDejar), "Has dejado %i drogas en el almacén.", CantidadItem);
							        Acciones(playerid, 8, "ha dejado drogas en el almacén");
							        SendInfoMessage(playerid, 2, "0", MsgDejar);
								}
								else
								{
									SendInfoMessage(playerid, 0, "1404", "No tienes esa cantidad de drogas para dejar!");
								}
					    	}
	        			// COMANDO: /Dejar Ganzúas [Cantidad]
					  		else if (strfind(cmdtext, "/Dejar Ganzúas ", true) == 0 || strfind(cmdtext, "/Dejar Ganzuas ", true) == 0)
						    {
					    	    new CantidadItem = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
						        if ( PlayersData[playerid][Ganzuas] > 0 && PlayersData[playerid][Ganzuas] >= CantidadItem )
						        {
							        FaccionData[FaccionID][Ganzuas][MyNearAlmacen] += CantidadItem;
							        PlayersData[playerid][Ganzuas] -= CantidadItem;

									new MsgDejar[MAX_TEXT_CHAT];
							        format(MsgDejar, sizeof(MsgDejar), "Has dejado %i ganzúas en el almacén.", CantidadItem);
							        Acciones(playerid, 8, "ha dejado ganzúas en el almacén");
							        SendInfoMessage(playerid, 2, "0", MsgDejar);
								}
								else
								{
									SendInfoMessage(playerid, 0, "1405", "No tienes esa cantidad de ganzúas para dejar!");
								}
					    	}
		        			// COMANDO: /Dejar Materiales [Cantidad]
					  		else if (strfind(cmdtext, "/Dejar Materiales ", true) == 0)
						    {
					    	    new CantidadItem = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
						        if ( PlayersData[playerid][Materiales] > 0 && PlayersData[playerid][Materiales] >= CantidadItem )
						        {
							        FaccionData[FaccionID][Almacen][MyNearAlmacen] += CantidadItem;
							        PlayersData[playerid][Materiales] -= CantidadItem;

									new MsgDejar[MAX_TEXT_CHAT];
							        format(MsgDejar, sizeof(MsgDejar), "Has dejado %i materiales en el almacén.", CantidadItem);
							        Acciones(playerid, 8, "ha dejado materiales en el almacén");
							        SendInfoMessage(playerid, 2, "0", MsgDejar);
								}
								else
								{
									SendInfoMessage(playerid, 0, "1406", "No tienes esa cantidad de materiales para dejar!");
								}
					    	}
		        			// COMANDO: /Dejar Bombas [Cantidad]
					  		else if (strfind(cmdtext, "/Dejar Bombas ", true) == 0)
						    {
					    	    new CantidadItem = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
						        if ( PlayersData[playerid][Bombas] > 0 && PlayersData[playerid][Bombas] >= CantidadItem )
						        {
							        FaccionData[FaccionID][Bombas][MyNearAlmacen] += CantidadItem;
							        PlayersData[playerid][Bombas] -= CantidadItem;

									new MsgDejar[MAX_TEXT_CHAT];
							        format(MsgDejar, sizeof(MsgDejar), "Has dejado %i bombas en el almacén.", CantidadItem);
							        Acciones(playerid, 8, "ha dejado bombas en el almacén");
							        SendInfoMessage(playerid, 2, "0", MsgDejar);
								}
								else
								{
									SendInfoMessage(playerid, 0, "1382", "No tienes esa cantidad de bombas para dejar!");
								}
					    	}
					    	else
					    	{
								SendInfoMessage(playerid, 0, "1381", "Quizás quiso decir: /Dejar {Arma, ArmaEx [ID_SLOT], Chaleco [ID_SLOT], Drogas [Cantidad], Ganzúas [Cantidad]}");
								SendInfoMessage(playerid, 0, "1381", "Quizás quiso decir: /Dejar {Materiales [Cantidad], Bombas [Cantidad], Artículo [ID_Bolsa]}");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "901", "El almacén se encuentra cerrado.");
						}
					}
					// DEJAR COCHES
				    else if ( GetPlayerInteriorEx(playerid) == 0 || PlayersData[playerid][IsPlayerInGarage] >= 0 || !PlayersData[playerid][IsPlayerInHouse])
				    {
					    new MyMalteroOpen = IsMaleteroOpen(playerid);
					    if ( MyMalteroOpen )
					    {
		        			// COMANDO: /Dejar Chaleco
						  	if (strcmp("/Dejar Chaleco", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
					    	{
							    new Float:Chaleco1;
								GetPlayerArmour(playerid, Chaleco1);
								if ( Chaleco1 != 0.0 )
								{
								    coches_Todos_Maleteros[MyMalteroOpen][7][0] = floatround(Chaleco1);
									SetPlayerArmourEx(playerid, -Chaleco1);
							        Acciones(playerid, 8, "ha dejado un chaleco en el maletero");
							        SendInfoMessage(playerid, 2, "0", "Has dejado un chaleco en el maletero.");
								}
								else
								{
									SendInfoMessage(playerid, 0, "253", "Usted no tienes ningún chaleco puesto encima.");
								}
					    	}
		        			// COMANDO: /Dejar Arma
						  	else if (strcmp("/Dejar Arma", cmdtext, true, 11) == 0 && strlen(cmdtext) == 11)
					    	{
								new MyWeapons, MyAmmo; MyWeapons = GetPlayerWeapon(playerid); MyAmmo = GetPlayerAmmo(playerid);
						        if ( CheckWeapondCheat(playerid) && MyWeapons != 0 )
						        {
									new EmpySlot = -1;
									for (new i = 0; i < 7; i++)
									{
									    if ( coches_Todos_Maleteros[MyMalteroOpen][i][0] == 0 )
									    {
		                                    EmpySlot = i;
											break;
									    }
									}
									if ( EmpySlot != -1 )
									{
			                            coches_Todos_Maleteros[MyMalteroOpen][EmpySlot][0] = MyWeapons;
			                            coches_Todos_Maleteros[MyMalteroOpen][EmpySlot][1] = MyAmmo;
			                            RemovePlayerWeapond(playerid, MyWeapons);

										new MsgDejar[MAX_TEXT_CHAT];
										new MsgDejarMe[MAX_TEXT_CHAT];
								        format(MsgDejar, sizeof(MsgDejar), "Has dejado un %s en el maletero.", SlotNameWeapon[MyWeapons]);
								        format(MsgDejarMe, sizeof(MsgDejarMe), "ha dejado %s en el maletero", SlotNameWeapon[MyWeapons]);
								        Acciones(playerid, 8, MsgDejarMe);
								        SendInfoMessage(playerid, 2, "0", MsgDejar);
									}
									else
									{
										SendInfoMessage(playerid, 0, "258", "El maletero se encuentra lleno!");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "256", "No tienes un arma en las manos!");
								}
					    	}
		        			// COMANDO: /Dejar ArmaEx [ID_Slot]
					  		else if (strfind(cmdtext, "/Dejar ArmaEx ", true) == 0)
						    {
								new MyWeapons, MyAmmo; MyWeapons = GetPlayerWeapon(playerid); MyAmmo = GetPlayerAmmo(playerid);
						        if ( CheckWeapondCheat(playerid) && MyWeapons != 0 )
						        {
								    if ( strval(cmdtext[14]) >= 1 && strval(cmdtext[14]) <= 7 )
								    {
								        if ( coches_Todos_Maleteros[MyMalteroOpen][strval(cmdtext[14]) - 1][0] == 0 )
								        {
			                                coches_Todos_Maleteros[MyMalteroOpen][strval(cmdtext[14]) - 1][0] = MyWeapons;
			                                coches_Todos_Maleteros[MyMalteroOpen][strval(cmdtext[14]) - 1][1] = MyAmmo;
			                                RemovePlayerWeapond(playerid, MyWeapons);

											new MsgDejar[MAX_TEXT_CHAT];
											new MsgDejarMe[MAX_TEXT_CHAT];
									        format(MsgDejar, sizeof(MsgDejar), "Has dejado un %s en el maletero.", SlotNameWeapon[MyWeapons]);
									        format(MsgDejarMe, sizeof(MsgDejarMe), "ha dejado %s en el maletero", SlotNameWeapon[MyWeapons]);
									        Acciones(playerid, 8, MsgDejarMe);
									        SendInfoMessage(playerid, 2, "0", MsgDejar);
										}
										else
										{
								            new TempError[50];
								            format(TempError, sizeof(TempError), "En Slot número \"%i\" ya esta ocupado por otra arma", strval(cmdtext[14]) );
								            SendInfoMessage(playerid, 0, "255", TempError);
										}
									}
									else
									{
										SendInfoMessage(playerid, 0, "254", "La ID de el Slot a dejar el arma tiene que estar comprendio entre 1 y 7");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "257", "No tienes un arma en las manos!");
								}
						    }
		        			// COMANDO: /Dejar Drogas [Cantidad]
					  		else if (strfind(cmdtext, "/Dejar Drogas ", true) == 0)
						    {
						        if ( PlayersData[playerid][Drogas] > 0 && PlayersData[playerid][Drogas] >= strval(cmdtext[14]) )
						        {
							        coches_Todos_Maleteros[MyMalteroOpen][8][0] = coches_Todos_Maleteros[MyMalteroOpen][8][0] + strval(cmdtext[14]);
							        PlayersData[playerid][Drogas] = PlayersData[playerid][Drogas] - strval(cmdtext[14]);

									new MsgDejar[MAX_TEXT_CHAT];
							        format(MsgDejar, sizeof(MsgDejar), "Has dejado %i drogas en el maletero.", strval(cmdtext[14]));
							        Acciones(playerid, 8, "ha dejado drogas en el maletero");
							        SendInfoMessage(playerid, 2, "0", MsgDejar);
								}
								else
								{
									SendInfoMessage(playerid, 0, "267", "No tienes esa cantidad de drogas para dejar!");
								}
					    	}
		        			// COMANDO: /Dejar Ganzúas [Cantidad]
					  		else if (strfind(cmdtext, "/Dejar Ganzúas ", true) == 0 || strfind(cmdtext, "/Dejar Ganzuas ", true) == 0)
						    {
						        if ( PlayersData[playerid][Ganzuas] > 0 && PlayersData[playerid][Ganzuas] >= strval(cmdtext[15]) )
						        {
							        coches_Todos_Maleteros[MyMalteroOpen][9][0] = coches_Todos_Maleteros[MyMalteroOpen][9][0] + strval(cmdtext[15]);
							        PlayersData[playerid][Ganzuas] = PlayersData[playerid][Ganzuas] - strval(cmdtext[15]);

									new MsgDejar[MAX_TEXT_CHAT];
							        format(MsgDejar, sizeof(MsgDejar), "Has dejado %i ganzúas en el maletero.", strval(cmdtext[15]));
							        Acciones(playerid, 8, "ha dejado ganzúas en el maletero");
							        SendInfoMessage(playerid, 2, "0", MsgDejar);
								}
								else
								{
									SendInfoMessage(playerid, 0, "266", "No tienes esa cantidad de ganzúas para dejar!");
								}
					    	}
		        			// COMANDO: /Dejar Materiales [Cantidad]
					  		else if (strfind(cmdtext, "/Dejar Materiales ", true) == 0)
						    {
						        if ( PlayersData[playerid][Materiales] > 0 && PlayersData[playerid][Materiales] >= strval(cmdtext[17]) )
						        {
							        coches_Todos_Maleteros[MyMalteroOpen][10][0] = coches_Todos_Maleteros[MyMalteroOpen][10][0] + strval(cmdtext[17]);
							        PlayersData[playerid][Materiales] = PlayersData[playerid][Materiales] - strval(cmdtext[17]);

									new MsgDejar[MAX_TEXT_CHAT];
							        format(MsgDejar, sizeof(MsgDejar), "Has dejado %i materiales en el maletero.", strval(cmdtext[17]));
							        Acciones(playerid, 8, "ha dejado materiales en el maletero");
							        SendInfoMessage(playerid, 2, "0", MsgDejar);
								}
								else
								{
									SendInfoMessage(playerid, 0, "265", "No tienes esa cantidad de materiales para dejar!");
								}
					    	}
		        			// COMANDO: /Dejar Bombas [Cantidad]
					  		else if (strfind(cmdtext, "/Dejar Bombas ", true) == 0)
						    {
						        if ( PlayersData[playerid][Bombas] > 0 && PlayersData[playerid][Bombas] >= strval(cmdtext[14]) )
						        {
							        coches_Todos_Maleteros[MyMalteroOpen][11][0] = coches_Todos_Maleteros[MyMalteroOpen][11][0] + strval(cmdtext[14]);
							        PlayersData[playerid][Bombas] = PlayersData[playerid][Bombas] - strval(cmdtext[14]);

									new MsgDejar[MAX_TEXT_CHAT];
							        format(MsgDejar, sizeof(MsgDejar), "Has dejado %i bombas en el maletero.", strval(cmdtext[14]));
							        Acciones(playerid, 8, "ha dejado bombas en el maletero");
							        SendInfoMessage(playerid, 2, "0", MsgDejar);
								}
								else
								{
									SendInfoMessage(playerid, 0, "264", "No tienes esa cantidad de bombas para dejar!");
								}
					    	}
					    	else
					    	{
								SendInfoMessage(playerid, 0, "252", "Quizás quiso decir: /Dejar {Arma, ArmaEx [ID_SLOT], Chaleco [ID_SLOT], Drogas [Cantidad], Ganzúas [Cantidad]}");
								SendInfoMessage(playerid, 0, "252", "Quizás quiso decir: /Dejar {Materiales [Cantidad], Bombas [Cantidad], Artículo [ID_Bolsa]}");
							}
						}
					}
					// DEJAR CASA
					else if ( PlayersData[playerid][IsPlayerInHouse] )
					{
						new HouseId = PlayersData[playerid][IsPlayerInHouse];
						// COMANDO: /Dejar Chaleco
					  	if (strcmp("/Dejar Chaleco", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
				    	{
							if ( IsOpenCloset(playerid, HouseId) )
							{
							    new Float:Chaleco1;
								GetPlayerArmour(playerid, Chaleco1);
								if ( Chaleco1 != 0.0 )
								{
								    HouseData[HouseId][Chaleco] = PlayersData[playerid][Chaleco];
									SetPlayerArmourEx(playerid, -Chaleco1);
							        Acciones(playerid, 8, "ha dejado un chaleco en el armario");
							        SendInfoMessage(playerid, 2, "0", "Has dejado un chaleco en el armario");
								}
								else
								{
									SendInfoMessage(playerid, 0, "640", "Usted no tienes ningún chaleco puesto encima.");
								}
							}
				    	}
	        			// COMANDO: /Dejar Arma
					  	else if (strcmp("/Dejar Arma", cmdtext, true, 11) == 0 && strlen(cmdtext) == 11)
				    	{
							if ( IsOpenCloset(playerid, HouseId) )
							{
								new MyWeapons, MyAmmo; MyWeapons = GetPlayerWeapon(playerid); MyAmmo = GetPlayerAmmo(playerid);
						        if ( MyWeapons != 0 )
						        {
									new EmpySlot = -1;
									for (new i = 0; i < 7; i++)
									{
									    if ( HouseData[HouseId][ArmarioWeapon][i] == 0 )
									    {
		                                    EmpySlot = i;
											break;
									    }
									}
									if ( EmpySlot != -1 )
									{
			                            HouseData[HouseId][ArmarioWeapon][EmpySlot] = MyWeapons;
			                            HouseData[HouseId][ArmarioAmmo][EmpySlot] 	= MyAmmo;
			                            RemovePlayerWeapond(playerid, MyWeapons);

										new MsgDejar[MAX_TEXT_CHAT];
										new MsgDejarMe[MAX_TEXT_CHAT];
								        format(MsgDejar, sizeof(MsgDejar), "Has dejado un %s en el armario", SlotNameWeapon[MyWeapons]);
								        format(MsgDejarMe, sizeof(MsgDejarMe), "ha dejado %s en el armario", SlotNameWeapon[MyWeapons]);
								        Acciones(playerid, 8, MsgDejarMe);
								        SendInfoMessage(playerid, 2, "0", MsgDejar);
									}
									else
									{
										SendInfoMessage(playerid, 0, "639", "El armario se encuentra lleno!");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "638", "No tienes un arma en las manos!");
								}
							}
				    	}
	        			// COMANDO: /Dejar ArmaEx [ID_Slot]
				  		else if (strfind(cmdtext, "/Dejar ArmaEx ", true) == 0)
					    {
							if ( IsOpenCloset(playerid, HouseId) )
							{
								new MyWeapons, MyAmmo; MyWeapons = GetPlayerWeapon(playerid); MyAmmo = GetPlayerAmmo(playerid);
						        if ( MyWeapons != 0 )
						        {
								    if ( strval(cmdtext[14]) >= 1 && strval(cmdtext[14]) <= 7 )
								    {
								        if ( HouseData[HouseId][ArmarioWeapon][strval(cmdtext[14]) - 1] == 0 )
								        {
			                                HouseData[HouseId][ArmarioWeapon][strval(cmdtext[14]) - 1] = MyWeapons;
			                                HouseData[HouseId][ArmarioAmmo][strval(cmdtext[14]) - 1] = MyAmmo;
			                                RemovePlayerWeapond(playerid, MyWeapons);

											new MsgDejar[MAX_TEXT_CHAT];
											new MsgDejarMe[MAX_TEXT_CHAT];
									        format(MsgDejar, sizeof(MsgDejar), "Has dejado un %s en el armario", SlotNameWeapon[MyWeapons]);
									        format(MsgDejarMe, sizeof(MsgDejarMe), "ha dejado %s en el armario", SlotNameWeapon[MyWeapons]);
									        Acciones(playerid, 8, MsgDejarMe);
									        SendInfoMessage(playerid, 2, "0", MsgDejar);
										}
										else
										{
								            new TempError[50];
								            format(TempError, sizeof(TempError), "En Slot número \"%i\" ya esta ocupado por otra arma", strval(cmdtext[14]) );
								            SendInfoMessage(playerid, 0, "630", TempError);
										}
									}
									else
									{
										SendInfoMessage(playerid, 0, "637", "La ID de el Slot a dejar el arma tiene que estar comprendio entre 1 y 7");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "636", "No tienes un arma en las manos!");
								}
							}
					    }
	        			// COMANDO: /Dejar Drogas [Cantidad]
				  		else if (strfind(cmdtext, "/Dejar Drogas ", true) == 0)
					    {
							if ( IsOpenCloset(playerid, HouseId) )
							{
						        if ( PlayersData[playerid][Drogas] > 0 && PlayersData[playerid][Drogas] >= strval(cmdtext[14]) )
						        {
							        HouseData[HouseId][Drogas] = HouseData[HouseId][Drogas] + strval(cmdtext[14]);
							        PlayersData[playerid][Drogas] = PlayersData[playerid][Drogas] - strval(cmdtext[14]);

									new MsgDejar[MAX_TEXT_CHAT];
							        format(MsgDejar, sizeof(MsgDejar), "Has dejado %i drogas en el armario", strval(cmdtext[14]));
							        Acciones(playerid, 8, "ha dejado drogas en el armario");
							        SendInfoMessage(playerid, 2, "0", MsgDejar);
								}
								else
								{
									SendInfoMessage(playerid, 0, "635", "No tienes esa cantidad de drogas para dejar!");
								}
							}
				    	}
	        			// COMANDO: /Dejar Ganzúas [Cantidad]
				  		else if (strfind(cmdtext, "/Dejar Ganzúas ", true) == 0 || strfind(cmdtext, "/Dejar Ganzuas ", true) == 0)
					    {
							if ( IsOpenCloset(playerid, HouseId) )
							{
						        if ( PlayersData[playerid][Ganzuas] > 0 && PlayersData[playerid][Ganzuas] >= strval(cmdtext[15]) )
						        {
							        HouseData[HouseId][Ganzuas] = HouseData[HouseId][Ganzuas] + strval(cmdtext[15]);
							        PlayersData[playerid][Ganzuas] = PlayersData[playerid][Ganzuas] - strval(cmdtext[15]);

									new MsgDejar[MAX_TEXT_CHAT];
							        format(MsgDejar, sizeof(MsgDejar), "Has dejado %i ganzúas en el armario.", strval(cmdtext[15]));
							        Acciones(playerid, 8, "ha dejado ganzúas en el armario");
							        SendInfoMessage(playerid, 2, "0", MsgDejar);
								}
								else
								{
									SendInfoMessage(playerid, 0, "634", "No tienes esa cantidad de ganzúas para dejar!");
								}
							}
				    	}
	        			// COMANDO: /Dejar Materiales [Cantidad]
				  		else if (strfind(cmdtext, "/Dejar Materiales ", true) == 0)
					    {
							if ( IsOpenCloset(playerid, HouseId) )
							{
						        if ( PlayersData[playerid][Materiales] > 0 && PlayersData[playerid][Materiales] >= strval(cmdtext[17]) )
						        {
							        HouseData[HouseId][Materiales] = HouseData[HouseId][Materiales] + strval(cmdtext[17]);
							        PlayersData[playerid][Materiales] = PlayersData[playerid][Materiales] - strval(cmdtext[17]);

									new MsgDejar[MAX_TEXT_CHAT];
							        format(MsgDejar, sizeof(MsgDejar), "Has dejado %i materiales en el armario.", strval(cmdtext[17]));
							        Acciones(playerid, 8, "ha dejado materiales en el armario");
							        SendInfoMessage(playerid, 2, "0", MsgDejar);
								}
								else
								{
									SendInfoMessage(playerid, 0, "633", "No tienes esa cantidad de materiales para dejar!");
								}
							}
				    	}
	        			// COMANDO: /Dejar Bombas [Cantidad]
				  		else if (strfind(cmdtext, "/Dejar Bombas ", true) == 0)
					    {
							if ( IsOpenCloset(playerid, HouseId) )
							{
						        if ( PlayersData[playerid][Bombas] > 0 && PlayersData[playerid][Bombas] >= strval(cmdtext[14]) )
						        {
							        HouseData[HouseId][Bombas] = HouseData[HouseId][Bombas] + strval(cmdtext[14]);
							        PlayersData[playerid][Bombas] = PlayersData[playerid][Bombas] - strval(cmdtext[14]);

									new MsgDejar[MAX_TEXT_CHAT];
							        format(MsgDejar, sizeof(MsgDejar), "Has dejado %i bombas en el armario.", strval(cmdtext[14]));
							        Acciones(playerid, 8, "ha dejado bombas en el armario");
							        SendInfoMessage(playerid, 2, "0", MsgDejar);
								}
								else
								{
									SendInfoMessage(playerid, 0, "632", "No tienes esa cantidad de bombas para dejar!");
								}
							}
				    	}
				    	else
				    	{
							SendInfoMessage(playerid, 0, "631", "Quizás quiso decir: /Dejar {Arma, ArmaEx [ID_SLOT], Chaleco [ID_SLOT], Drogas [Cantidad], Ganzúas [Cantidad]}");
							SendInfoMessage(playerid, 0, "631", "Quizás quiso decir: /Dejar {Materiales [Cantidad], Bombas [Cantidad], Artículo [ID_Bolsa]}");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "629", "No estas en una casa");
					}
				}
				// COMANDO: /SuperMercado
				else if (strcmp("/SuperMercado", cmdtext, true, 13) == 0 && strlen(cmdtext) == 13)
				{
					if ( PlayersDataOnline[playerid][InPickup] == TextDrawInfo[SuperMercadosPickupid[0]][PickupidTextInfo] ||
      					 PlayersDataOnline[playerid][InPickup] == TextDrawInfo[SuperMercadosPickupid[1]][PickupidTextInfo] )
					{
						ShowMenuForPlayer(SupermercadoArticulos, playerid);
						TogglePlayerControllableEx(playerid, 0);
						PlayersDataOnline[playerid][InMenu] = GetPlayerMenu(playerid);
					}
					else
					{
						SendInfoMessage(playerid, 0, "1225", "No estás en el Super Mercado!");
					}
				}
				// COMANDO: /Armario
				else if (strcmp("/Armario", cmdtext, true, 8) == 0 && strlen(cmdtext) == 8 )
				{
					if ( PlayersData[playerid][IsPlayerInHouse] )
					{
					    new HouseId = PlayersData[playerid][IsPlayerInHouse];
					    if ( IsOpenCloset(playerid, HouseId) )
					    {
							new MsgsArmario[MAX_TEXT_CHAT];
		                    Acciones(playerid, 8, "mira hacia dentro del armario");
							SendClientMessage(playerid, COLOR_MALETERO_ARMARIO_CAJA_FUERTE,
							 ">>>>>>>>>> .:Armario:. <<<<<<<<<");
							for (new i = 0; i < 7; i++)
							{
							    if ( HouseData[HouseId][ArmarioWeapon][i] == 0 )
							    {
							        format(MsgsArmario, sizeof(MsgsArmario), "** Armario Slot %i: Vacío", i + 1);
							    }
							    else
							    {
									format( MsgsArmario, sizeof(MsgsArmario), "** Armario Slot %i: %s ::: Munición: %i", i + 1, SlotNameWeapon[HouseData[HouseId][ArmarioWeapon][i]],
									HouseData[HouseId][ArmarioAmmo][i] );
								}
								SendClientMessage(playerid, COLOR_MALETERO_ARMARIO_CAJA_FUERTE,
								MsgsArmario);
							}
							format(MsgsArmario, sizeof(MsgsArmario), "** Armario Chaleco: %.2f | Drogas: %i | Ganzúas: %i | Materiales: %i | Bombas: %i",
							HouseData[HouseId][Chaleco],
							HouseData[HouseId][Drogas],
							HouseData[HouseId][Ganzuas],
							HouseData[HouseId][Materiales],
							HouseData[HouseId][Bombas]);

							SendClientMessage(playerid, COLOR_MALETERO_ARMARIO_CAJA_FUERTE,
							MsgsArmario);

							// 7 - CHALECO | 8 - DROGAS | 9 - GANZÚAS | 10 - MATERIALES | 11 - BOMBAS

							new Float:player_pos_x, Float:player_pos_y, Float:player_pos_z;
							GetPlayerPos(playerid, player_pos_x, player_pos_y, player_pos_z);
							PlayerPlaySound(playerid, 1002,
							player_pos_x,
							player_pos_y,
							player_pos_z);
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "610", "No se encuentra dentro de una casa");
					}
				}
				// COMANDO: /Almacén
				else if (strcmp("/Almacén", cmdtext, true, 8) == 0 && strlen(cmdtext) == 8 ||
						 strcmp("/Almacen", cmdtext, true, 8) == 0 && strlen(cmdtext) == 8 )
				{
					new MyNearAlmacen = IsPlayerInAlmacen(playerid, true);
					if ( MyNearAlmacen != -1 )
					{
						new FaccionID = PlayersData[playerid][Faccion];
						if ( FaccionData[FaccionID][LockA][MyNearAlmacen] )
						{
							new MsgsAlmacen[256];
		                    Acciones(playerid, 8, "mira hacia dentro del almacén");
							SendClientMessage(playerid, COLOR_MALETERO_ARMARIO_CAJA_FUERTE,
							 ">>>>>>>>>> .:Almacén:. <<<<<<<<<");
							for (new i = 0; i < 10; i++)
							{
							    if ( WeaponsFaccion[FaccionID][MyNearAlmacen][i] == 0 )
							    {
							        format(MsgsAlmacen, sizeof(MsgsAlmacen), "** Almacén Slot %i: Vacío", i + 1);
							    }
							    else
							    {
									format( MsgsAlmacen, sizeof(MsgsAlmacen), "** Almacén Slot %i: %s ::: Munición: %i", i + 1,
									 SlotNameWeapon[WeaponsFaccion[FaccionID][MyNearAlmacen][i]],
									AmmoFaccion[FaccionID][MyNearAlmacen][i]);
								}
								SendClientMessage(playerid, COLOR_MALETERO_ARMARIO_CAJA_FUERTE,
								MsgsAlmacen);
							}
							format(MsgsAlmacen, sizeof(MsgsAlmacen), "** Almacén Chaleco 1: %.2f | Chaleco 2: %.2f | Chaleco 3: %.2f | Chaleco 4: %.2f | Drogas: %i | Ganzúas: %i | Materiales: %i | Bombas: %i",
							FaccionesChaleco[FaccionID][MyNearAlmacen][0],
							FaccionesChaleco[FaccionID][MyNearAlmacen][1],
							FaccionesChaleco[FaccionID][MyNearAlmacen][2],
							FaccionesChaleco[FaccionID][MyNearAlmacen][3],
							FaccionData[FaccionID][Drogas][MyNearAlmacen],
							FaccionData[FaccionID][Ganzuas][MyNearAlmacen],
							FaccionData[FaccionID][Almacen][MyNearAlmacen],
							FaccionData[FaccionID][Bombas][MyNearAlmacen]);

							SendClientMessage(playerid, COLOR_MALETERO_ARMARIO_CAJA_FUERTE,
							MsgsAlmacen);

							// 7 - CHALECO | 8 - DROGAS | 9 - GANZÚAS | 10 - MATERIALES | 11 - BOMBAS

							new Float:player_pos_x, Float:player_pos_y, Float:player_pos_z;
							GetPlayerPos(playerid, player_pos_x, player_pos_y, player_pos_z);
							PlayerPlaySound(playerid, 1002,
							player_pos_x,
							player_pos_y,
							player_pos_z);
						}
						else
						{
							SendInfoMessage(playerid, 0, "1407", "Este almacén se encuentra cerrado");
						}
					}
				}
				// COMANDO: /Refrigerador
				else if (strcmp("/Refrigerador", cmdtext, true, 13) == 0 && strlen(cmdtext) == 13 )
				{
					if ( PlayersData[playerid][IsPlayerInHouse] )
					{
					    new Houseid = PlayersData[playerid][IsPlayerInHouse];
					    if ( IsOpenRefrigerador(playerid, Houseid) )
					    {
							new MsgRefrigerador[MAX_TEXT_CHAT];
		                    Acciones(playerid, 8, "mira dentro del refrigerador");
							SendClientMessage(playerid, COLOR_MALETERO_ARMARIO_CAJA_FUERTE,
							 ">>>>>>>>>> .:Refrigerador:. <<<<<<<<<");
							for (new i = 0; i < MAX_REFRIGERADOR_SLOTS_COUNT; i++)
							{
								format( MsgRefrigerador, sizeof(MsgRefrigerador), "** Refrigerador Artículo %i: %s (%i)", i + 1, Articulos[Refrigerador[Houseid][Articulo][i]][NameA], Refrigerador[Houseid][Cantidad][i]);
								SendClientMessage(playerid, COLOR_MALETERO_ARMARIO_CAJA_FUERTE,	MsgRefrigerador);
							}
							new Float:player_pos_x, Float:player_pos_y, Float:player_pos_z;
							GetPlayerPos(playerid, player_pos_x, player_pos_y, player_pos_z);
							PlayerPlaySound(playerid, 1002,
							player_pos_x,
							player_pos_y,
							player_pos_z);
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "610", "No se encuentra dentro de una casa");
					}
				}
				// COMANDO: /Guantera
				else if (strcmp("/Guantera", cmdtext, true, 9) == 0 && strlen(cmdtext) == 9 )
				{
				    if ( IsPlayerInsideVehicle(playerid) )
				    {
					    new MyGuanteraOpen = IsGuanteraOpen(playerid);
					    if ( MyGuanteraOpen )
					    {
							new MsgsGuantera[MAX_TEXT_CHAT];

		                    Acciones(playerid, 8, "mira hacia dentro de la guantera del vehículo");
							SendClientMessage(playerid, COLOR_MALETERO_ARMARIO_CAJA_FUERTE,
							 ">>>>>>>>>> .:Guantera:. <<<<<<<<<");
							for (new i = 0; i < MAX_GUANTERA_GAVETA_SLOTS; i++)
							{
							    if ( !DataCars[MyGuanteraOpen][GuanteraObjects][i] )
							    {
							        format(MsgsGuantera, sizeof(MsgsGuantera), "** Guantera Slot %i: %s",i + 1, ObjectsNames[0]);
							    }
							    else
							    {
									format( MsgsGuantera, sizeof(MsgsGuantera), "** Guantera Slot %i: %s", i + 1, ObjectsNames[GetTypeObjectEx(DataCars[MyGuanteraOpen][GuanteraObjects][i])]);
								}
								SendClientMessage(playerid, COLOR_MALETERO_ARMARIO_CAJA_FUERTE,
								MsgsGuantera);
							}
							new Float:player_pos_x, Float:player_pos_y, Float:player_pos_z;
							GetPlayerPos(playerid, player_pos_x, player_pos_y, player_pos_z);
							PlayerPlaySound(playerid, 1002,
							player_pos_x,
							player_pos_y,
							player_pos_z);
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1592", "No se encuentra dentro del vehículo!");
					}
				}
				// COMANDO: /Gaveta
				else if (strcmp("/Gaveta", cmdtext, true, 7) == 0 && strlen(cmdtext) == 7 )
				{
					if ( PlayersData[playerid][IsPlayerInHouse] )
					{
					    new Houseid = PlayersData[playerid][IsPlayerInHouse];
					    if ( IsOpenGaveta(playerid, Houseid) )
					    {
							new MsgGaveta[MAX_TEXT_CHAT];
		                    Acciones(playerid, 8, "mira dentro de la gaveta");
							SendClientMessage(playerid, COLOR_MALETERO_ARMARIO_CAJA_FUERTE,
							 ">>>>>>>>>> .:Gaveta:. <<<<<<<<<");
							for (new i = 0; i < MAX_GUANTERA_GAVETA_SLOTS; i++)
							{
							    if ( !HouseData[Houseid][GavetaObjects][i] )
							    {
							        format(MsgGaveta, sizeof(MsgGaveta), "** Guantera Slot %i: %s", i + 1, ObjectsNames[0]);
							    }
							    else
							    {
									format( MsgGaveta, sizeof(MsgGaveta), "** Guantera Slot %i: %s", i + 1, ObjectsNames[GetTypeObjectEx(HouseData[Houseid][GavetaObjects][i])]);
								}
								SendClientMessage(playerid, COLOR_MALETERO_ARMARIO_CAJA_FUERTE,	MsgGaveta);
							}
							new Float:player_pos_x, Float:player_pos_y, Float:player_pos_z;
							GetPlayerPos(playerid, player_pos_x, player_pos_y, player_pos_z);
							PlayerPlaySound(playerid, 1002,
							player_pos_x,
							player_pos_y,
							player_pos_z);
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1584", "No se encuentra dentro de una casa");
					}
				}
				// COMANDO: /Maletero
				else if (strcmp("/Maletero", cmdtext, true, 9) == 0 && strlen(cmdtext) == 9 )
				{
				    new MyMalteroOpen = IsMaleteroOpen(playerid);
				    if ( MyMalteroOpen )
				    {
						new MsgsMaletero[MAX_TEXT_CHAT];

	                    Acciones(playerid, 8, "mira hacia dentro del maletero del vehículo");
						SendClientMessage(playerid, COLOR_MALETERO_ARMARIO_CAJA_FUERTE,
						 ">>>>>>>>>> .:Maletero:. <<<<<<<<<");
						for (new i = 0; i < 7; i++)
						{
						    if ( coches_Todos_Maleteros[MyMalteroOpen][i][0] == 0 )
						    {
						        format(MsgsMaletero, sizeof(MsgsMaletero), "** Maltero Slot %i: Vacío", i + 1);
						    }
						    else
						    {
								format( MsgsMaletero, sizeof(MsgsMaletero), "** Maltero Slot %i: %s ::: Munición: %i", i + 1, SlotNameWeapon[coches_Todos_Maleteros[MyMalteroOpen][i][0]],
								coches_Todos_Maleteros[MyMalteroOpen][i][1] );
							}
							SendClientMessage(playerid, COLOR_MALETERO_ARMARIO_CAJA_FUERTE,
							MsgsMaletero);
						}
						format(MsgsMaletero, sizeof(MsgsMaletero), "** Maltero Chaleco: %i | Drogas: %i | Ganzúas: %i | Materiales: %i | Bombas: %i",
						coches_Todos_Maleteros[MyMalteroOpen][7][0],
						coches_Todos_Maleteros[MyMalteroOpen][8][0],
						coches_Todos_Maleteros[MyMalteroOpen][9][0],
						coches_Todos_Maleteros[MyMalteroOpen][10][0],
						coches_Todos_Maleteros[MyMalteroOpen][11][0]
						);
						SendClientMessage(playerid, COLOR_MALETERO_ARMARIO_CAJA_FUERTE,
						MsgsMaletero);

						// 7 - CHALECO | 8 - DROGAS | 9 - GANZÚAS | 10 - MATERIALES | 11 - BOMBAS


						new Float:player_pos_x, Float:player_pos_y, Float:player_pos_z;
						GetPlayerPos(playerid, player_pos_x, player_pos_y, player_pos_z);
						PlayerPlaySound(playerid, 1002,
						player_pos_x,
						player_pos_y,
						player_pos_z);
					}
				}
				// COMANDO: /Pescar
				else if (strcmp("/Pescar", cmdtext, true, 7) == 0 && strlen(cmdtext) == 7)
				{
	            	if ( PlayersData[playerid][Job] == PESCA )
	            	{
						if ( PlayersDataOnline[playerid][InPickup] == TextDrawInfo[JobsData[PESCA_PickupidPescar]][PickupidTextInfo] )
						{
						    if ( !PlayersDataOnline[playerid][JobBonus] )
						    {
			            	    if ( IntentarAccion(playerid, "pescar algo", random(3)) )
			            	    {
				            		PlayersDataOnline[playerid][JobBonus] = true;
				            		SendInfoMessage(playerid, 3, "0", "Haz capturado unos peces! Ahora puedes ir a venderlos!");

									SetPlayerCheckpoint(playerid, TextDrawInfo[JobsData[PESCA_PickupidVender]][PosInfoX], TextDrawInfo[JobsData[PESCA_PickupidVender]][PosInfoY], TextDrawInfo[JobsData[PESCA_PickupidVender]][PosInfoZ], 1.0);
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "964", "Ya tienes peces, vende esos antes de pescar más");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "965", "No te encuentras en la zona de pesca!");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "966", "No eres pescador!");
					}
				}
				// COMANDO: /PAGAR Y /PAY
				else if (strfind(cmdtext, "/Pagar", true) == 0 || strfind(cmdtext, "/Pay", true) == 0)
				{
					if (strfind(cmdtext, "/Pagar ", true) == 0 || strfind(cmdtext, "/Pay ", true) == 0)
					{
					    new playeridpagar = strval(cmdtext[GetPosSpace(cmdtext, 1)]);
					    new Dineropagar = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
						if (playeridpagar != playerid)
						{
							if (IsPlayerConnected(playeridpagar))
							{
							    if ( Dineropagar <= 20000 && Dineropagar >= 1)
							    {
						        	new Float:Xplayerid, Float:Yplayerid, Float:Zplayerid;
									GetPlayerPos(playeridpagar, Xplayerid, Yplayerid, Zplayerid);

									if(IsPlayerInRangeOfPoint(playerid, 3.0, Xplayerid, Yplayerid, Zplayerid) && GetPlayerVirtualWorld(playeridpagar) == GetPlayerVirtualWorld(playerid))
									{
									    if (  PlayersData[playerid][Dinero] >= Dineropagar )
									    {
											new Mensaje_Pagar[81];
											new Mensaje_PagarME[70];

											// FORMATEO DEL MENSAJE MENSAJES
											format(Mensaje_Pagar, sizeof(Mensaje_Pagar),
											"Has recibido $%i de el jugador %s."
											, Dineropagar, PlayersDataOnline[playerid][NameOnlineFix]);

											format(Mensaje_PagarME, sizeof(Mensaje_PagarME),
											"Le has dado $%i a el jugador %s."
											,Dineropagar, PlayersDataOnline[playeridpagar][NameOnlineFix]);

										    new Texto_ME_PagarPay[70];
											format(Texto_ME_PagarPay, sizeof(Texto_ME_PagarPay), "le ha dado algo de dinero a %s", PlayersDataOnline[playeridpagar][NameOnlineFix]);
						                    Acciones(playerid, 8, Texto_ME_PagarPay);

											// ENVIO DEL MENSAJE
											SendInfoMessage(playeridpagar, 3, "0", Mensaje_Pagar);
											SendInfoMessage(playerid, 3, "0", Mensaje_PagarME);

											// PAGO
						            		GivePlayerMoneyEx(playeridpagar, Dineropagar);
						            		GivePlayerMoneyEx(playerid, -Dineropagar);

											new Float:player_pos_x, Float:player_pos_y, Float:player_pos_z;
											GetPlayerPos(playeridpagar, player_pos_x, player_pos_y, player_pos_z);
											PlayerPlaySound(playeridpagar, 1002,
											player_pos_x,
											player_pos_y,
											player_pos_z);

											GetPlayerPos(playerid, player_pos_x, player_pos_y, player_pos_z);
											PlayerPlaySound(playerid, 1002,
											player_pos_x,
											player_pos_y,
											player_pos_z);
						            		return 1;
						            	}
						            	else
						            	{
											SendInfoMessage(playerid, 0, "243", "No tiene suficiente dinero para pagar.");
											return 1;
						            	}
					            	}
					            	else
									{
										SendInfoMessage(playerid, 0, "244", "El jugador que desea pagarle no se encuentra cerca de tí.");
										return 1;
						            }
								}
								else
								{
									SendInfoMessage(playerid, 0, "245", "No puedes pagar más de $20000 de una sola véz ni menos de $1");
									return 1;
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "247", "El jugador que desea pagarle no se encuentra conectado.");
						       	return 1;
						    }
						}
						else
						{
							SendInfoMessage(playerid, 0, "248", "Has introducído tu misma ID a pagar.");
							return 1;
						}
				    }
				    else
				    {
						SendInfoMessage(playerid, 0, "249", "Recuerde al utilizar el comando /Pagar o /Pay [ID] [CANTIDAD] dejar un [ESPACIO]. Ejemplo: /Pay 22 500");
						return 1;
				    }
				}
				// COMANDO: /Matrícula
			  	else if (strcmp("/Matrícula", cmdtext, true, 10) == 0 && strlen(cmdtext) == 10 ||
			 	  	     strcmp("/Matricula", cmdtext, true, 10) == 0 && strlen(cmdtext) == 10)
		    	{
		    	    if (!IsPlayerInAnyVehicle(playerid))
		    	    {
						new MyNearCar = IsPlayerInNearVehicle(playerid);
						if ( MyNearCar )
						{
						    if ( MyNearCar <= MAX_CAR_FACCION )
						    {
								new MsgMatricula[20];
								format(MsgMatricula, sizeof(MsgMatricula), "~B~%i", DataCars[MyNearCar][Matricula]);
								GameTextForPlayer(playerid, MsgMatricula, 1000, 5);
								Acciones(playerid, 8, "mira la matrícula del vehículo");
							}
							else
							{
								SendInfoMessage(playerid, 0, "399", "Éste vehículo no tiene matrícula");
							}
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "400", "Desde dentro del vehículo no puedes ver la matrícula del vehículo");
					}
				}
				// COMANDO: /Localizar
				else if (strfind(cmdtext, "/Localizar ", true) == 0 )
				{
					// COMANDO: /Localizar Coche [Matrícula]
					if (strfind(cmdtext, "/Localizar Coche ", true) == 0 )
					{
					    if ( PlayersData[playerid][Faccion] == ADP && PlayersData[playerid][Rango] <= 2 ||
							 PlayersData[playerid][Faccion] == ADP && PlayersData[playerid][Rango] == 4 ||
							 PlayersData[playerid][Admin] >= 8 && PlayersDataOnline[playerid][AdminOn])
						{
						    if ( PlayersData[playerid][Admin] >= 8 && PlayersDataOnline[playerid][AdminOn] )
						    {

				        	}
				        	else
				        	{
								Acciones(playerid, 8, "utiliza su GPS");
							}
						    for(new i = 1; i <= MAX_CAR_FACCION; i++)
						    {
						        if(DataCars[i][Matricula] == strval(cmdtext[17]))
						        {
						            if ( DataCars[i][WorldLast] > 999 )
						            {
						                new HouseID = GetHouseidIdByWorld(DataCars[i][WorldLast]);
						                if ( HouseID )
						                {
						                    new GarageID = GetGarageIdByWorld(HouseID, DataCars[i][WorldLast]);
											if ( GarageID != -1 )
											{
											    if ( PlayersData[playerid][Admin] >= 8 && PlayersDataOnline[playerid][AdminOn] )
											    {
													new MsgDatos[MAX_TEXT_CHAT];
													format(MsgDatos, sizeof(MsgDatos), "Matrícula: %i ID: %i", DataCars[i][Matricula], i);
													SendInfoMessage(playerid, 1, MsgDatos, "Datos: ");
       								        	}
       								        	else
       								        	{
	       								        	Acciones(playerid, 7, "GPS: Vehículo localizado");
												}
                                                SetPlayerCheckpoint(playerid, Garages[HouseID][GarageID][Xg], Garages[HouseID][GarageID][Yg], Garages[HouseID][GarageID][Zg], 2.0);
       											return 1;
   											}
						                }
									}
									else if ( DataCars[i][WorldLast] == 4 )
									{

									    new GarageExID = IsVehicleInGarageEx(i);
									    if ( GarageExID != -1 )
									    {
										    if ( PlayersData[playerid][Admin] >= 8 && PlayersDataOnline[playerid][AdminOn] )
										    {
												new MsgDatos[MAX_TEXT_CHAT];
												format(MsgDatos, sizeof(MsgDatos), "Matrícula: %i ID: %i", DataCars[i][Matricula], i);
												SendInfoMessage(playerid, 1, MsgDatos, "Datos: ");
   								        	}
   								        	else
   								        	{
       								        	Acciones(playerid, 7, "GPS: Vehículo localizado");
											}
									        SetPlayerCheckpoint(playerid, GaragesEx[GarageExID][PosXTwoP], GaragesEx[GarageExID][PosYTwoP], GaragesEx[GarageExID][PosZTwoP], 2.0);
	   									    return 1;
									    }
									}
									else if ( DataCars[i][WorldLast] == 0 )
									{
									    if ( PlayersData[playerid][Admin] >= 8 && PlayersDataOnline[playerid][AdminOn] )
									    {
											new MsgDatos[MAX_TEXT_CHAT];
											format(MsgDatos, sizeof(MsgDatos), "Matrícula: %i ID: %i", DataCars[i][Matricula], i);
											SendInfoMessage(playerid, 1, MsgDatos, "Datos: ");
							        	}
							        	else
							        	{
   								        	Acciones(playerid, 7, "GPS: Vehículo localizado");
										}
								        new Float:VehPos[3]; GetVehiclePos(i, VehPos[0], VehPos[1], VehPos[2]);
								        SetPlayerCheckpoint(playerid, VehPos[0], VehPos[1], VehPos[2], 8.0);
							            return 1;
						            }
								    if ( PlayersData[playerid][Admin] >= 8 && PlayersDataOnline[playerid][AdminOn] )
								    {

						        	}
						        	else
						        	{
							        	Acciones(playerid, 7, "GPS: Error al localizar el vehículo.");
									}
					                return 1;
								}
							}
						    if ( PlayersData[playerid][Admin] >= 8 && PlayersDataOnline[playerid][AdminOn] )
						    {

				        	}
				        	else
				        	{
						        Acciones(playerid, 7, "GPS: La Matrícula insertada es inválida");
							}
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "401", "Usted no es detective");
						}
					}
					// COMANDO: /Localizar Persona [ID]
					else if (strfind(cmdtext, "/Localizar Persona ", true) == 0 )
					{
					    if ( PlayersData[playerid][Faccion] == ADP && PlayersData[playerid][Rango] <= 2 ||
							 PlayersData[playerid][Faccion] == ADP && PlayersData[playerid][Rango] == 4 )
						{
						    new numberphone = strval(cmdtext[19]);
							Acciones(playerid, 8, "utiliza su GPS");
				            for (new i = 0; i < MAX_PLAYERS; i++)
				            {
								if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersData[i][Phone] == numberphone && PlayersDataOnline[i][PhoneOnline] && GetPlayerInteriorEx(i) == 0 )
								{
									if ( PlayersDataOnline[i][InCall] == -1 )
									{
								        Acciones(playerid, 7, "GPS: Persona localizada");
								        new Float:PersonPos[3]; GetPlayerPos(i, PersonPos[0], PersonPos[1], PersonPos[2]);
								        SetPlayerCheckpoint(playerid, PersonPos[0], PersonPos[1], PersonPos[2], 3.0);
							            return 1;
						            }
								}
							}
					        Acciones(playerid, 7, "GPS: Está persona está fuera del alcanze en el GPS");
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "402", "Usted no es detective");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "403", "Quizás quiso decir: /Localizar {Coche [Matrícula], Persona [ID]}");
					}
				}
				// COMANDO: /Prueba [ID]
		  		else if (strfind(cmdtext, "/Prueba ", true) == 0 )
			    {
					if ( PlayersData[playerid][Faccion] == LICENCIEROS && PlayersData[playerid][Rango] == 0 ||
						 PlayersData[playerid][Faccion] == LICENCIEROS && PlayersData[playerid][Rango] == 1 ||
						 PlayersData[playerid][Faccion] == LICENCIEROS && PlayersData[playerid][Rango] == 2 ||
						 PlayersData[playerid][Faccion] == LICENCIEROS && PlayersData[playerid][Rango] == 4 )
				    {
						new IdTest = strval(cmdtext[8]);
					    if ( IsPlayerNear(playerid, IdTest,
								 "1143",
								 "1144",
								 "1145",
								 "El jugador que le deseas hacer una prueba de Coche no se encuentra conectado",
								 "El jugador que le deseas hacer una prueba de Coche no se ha logueado",
								 "El jugador que le deseas hacer una prueba de Coche no se encuentra cerca de tí") )
					    {
							new MyNearCar = IsPlayerInNearVehicle(playerid);
							if ( MyNearCar )
							{
						        if ( !PlayersData[IdTest][Licencias][coches_Todos_Type[GetVehicleModel(MyNearCar) - 400]] )
						        {
								    if ( IsVehicleMyFaccion(playerid, MyNearCar) )
								    {
								        if ( !DataCars[MyNearCar][Lock] )
								        {
	                                        new Empty = true;
											for ( new i = 0; i < MAX_PLAYERS; i++)
											{
											    if ( IsPlayerInAnyVehicle(i) && GetPlayerVehicleID(i) == MyNearCar && GetPlayerVehicleSeat(i) == 0 )
											    {
	                                                Empty = false;
													break;
												}
											}
											if ( Empty )
											{
											    new MsgToPrueba[MAX_TEXT_CHAT];
											    new MsgToPruebaYou[MAX_TEXT_CHAT];
											    new MsgToPruebaMe[MAX_TEXT_CHAT];
										        format(MsgToPrueba, sizeof(MsgToPrueba), "Le has dado una licencia de pruebas a %s", PlayersDataOnline[IdTest][NameOnlineFix]);
										        format(MsgToPruebaYou, sizeof(MsgToPruebaYou), "%s te ha dado una licencia de pruebas.", PlayersDataOnline[playerid][NameOnlineFix]);
										        format(MsgToPruebaMe, sizeof(MsgToPruebaMe), "le da una licencia de pruebas a %s", PlayersDataOnline[IdTest][NameOnlineFix]);
										        Acciones(playerid, 8, MsgToPruebaMe);
										        SendInfoMessage(playerid, 2, "0", MsgToPrueba);
										        SendInfoMessage(IdTest, 2, "0", MsgToPruebaYou);
										        PlayersDataOnline[IdTest][LicenciaTest] = true;
										        PutPlayerInVehicle(IdTest, MyNearCar, 0);
											}
											else
											{
												SendInfoMessage(playerid, 0, "1139", "El asiento del conductor de éste vehículo ya se encuentra ocupado!");
											}
										}
										else
										{
											SendInfoMessage(playerid, 0, "1146", "Éste vehículo se encuentra cerrado! No puedes hacer una prueba de conducción en el!");
										}
							        }
									else
									{
										SendInfoMessage(playerid, 0, "1140", "Este coche no pertenece a tu facción!");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "1141", "Ya ese jugador tiene una licencia de éste vehículo, no necesitas hacerle una prueba!");
								}
							}
					    }
					}
					else
					{
						SendInfoMessage(playerid, 0, "1142", "Usted no es licenciero");
					}
			    }
				// COMANDO: /Tiempo Coche
			  	else if (strcmp("/Tiempo Coche", cmdtext, true, 13) == 0 && strlen(cmdtext) == 13)
		    	{
					new MyNearCar = IsPlayerInNearVehicle(playerid);
					if ( MyNearCar )
					{
					    if ( MyNearCar <= MAX_CAR_DUENO && MyNearCar == PlayersData[playerid][Car])
					    {
					        new MsgTiempoCoche[MAX_TEXT_CHAT];
					        format(MsgTiempoCoche, sizeof(MsgTiempoCoche), "Le falta, %i días, %i horas para que los papeles del vehículo caduquen", DataCars[MyNearCar][Time] / 24, DataCars[MyNearCar][Time] % 24);
							SendInfoMessage(playerid, 2, "0", MsgTiempoCoche);
					    }
						else
						{
							SendInfoMessage(playerid, 0, "555", "Este no es su vehículo");
						}
					}
			    }
				// COMANDO: /Papeles [ID]
				else if (strfind(cmdtext, "/Papeles ", true) == 0 )
				{
					new MyNearCar = IsPlayerInNearVehicle(playerid);
					if ( MyNearCar )
					{
					    if ( MyNearCar <= MAX_CAR_DUENO && MyNearCar == PlayersData[playerid][Car])
					    {
					        if ( strval(cmdtext[9]) == playerid )
					        {
								Acciones(playerid, 8, "mira los papeles de su vehículo");
								ShowPapelesToPlayer(playerid, playerid);
					        }
						    else if ( IsPlayerNear(playerid, strval(cmdtext[9]),
								 "410",
								 "411",
								 "412",
								 "El jugador que desea mostrarle los papeles del vehículo no se encuentra conectado",
								 "El jugador que desea mostrarle los papeles del vehículo no se encuentra logueado",
								 "El jugador que desea mostrarle los papeles del vehículo no se encuentra cerca de tí") )
						    {
								new MsgPapelesMe[MAX_TEXT_CHAT];
								format(MsgPapelesMe, sizeof(MsgPapelesMe), "le muestra los papeles de su vehículo a %s", PlayersDataOnline[strval(cmdtext[9])][NameOnlineFix]);
								Acciones(playerid, 8, MsgPapelesMe);
								ShowPapelesToPlayer(playerid, strval(cmdtext[9]));
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "413", "Este no es su vehículo");
						}
					}
				}
				// COMANDO: /Datos [ID]
				else if (strfind(cmdtext, "/Datos ", true) == 0 )
				{
				    if ( PlayersData[playerid][Faccion] == ADP && PlayersData[playerid][Rango] <= 2 ||
						 PlayersData[playerid][Faccion] == ADP && PlayersData[playerid][Rango] == 4	||
						 PlayersData[playerid][Admin] >= 7 && PlayersDataOnline[playerid][AdminOn] )
					{
				        if(IsPlayerConnected(strval(cmdtext[7])) && PlayersDataOnline[strval(cmdtext[7])][State] == 3 )
				        {
					        new MsgDatos[MAX_TEXT_CHAT];
				            if ( PlayersData[playerid][Admin] >= 7 && PlayersDataOnline[playerid][AdminOn] )
				            {
						        format(MsgDatos, sizeof(MsgDatos), "Casa: %i", PlayersData[strval(cmdtext[7])][House]);
						    	SendInfoMessage(playerid, 1, MsgDatos, "Datos: ");
						        format(MsgDatos, sizeof(MsgDatos), "Alquiler: %i", PlayersData[strval(cmdtext[7])][Alquiler]);
						    	SendInfoMessage(playerid, 1, MsgDatos, "Datos: ");
						        format(MsgDatos, sizeof(MsgDatos), "Amigo: %i", PlayersData[strval(cmdtext[7])][SpawnAmigo]);
						    	SendInfoMessage(playerid, 1, MsgDatos, "Datos: ");
					        }
					        else
					        {
								Acciones(playerid, 8, "utiliza su GPS");
						        Acciones(playerid, 7, "GPS: Datos localizados");
							}
					        format(MsgDatos, sizeof(MsgDatos), "Nombre: %s", PlayersDataOnline[strval(cmdtext[7])][NameOnlineFix]);
					    	SendInfoMessage(playerid, 1, MsgDatos, "Datos: ");
					        if ( PlayersData[strval(cmdtext[7])][Car] != -1 )
					        {
				 				format(MsgDatos, sizeof(MsgDatos), "Vehículo: %s", coches_Todos_Nombres[GetVehicleModel(PlayersData[strval(cmdtext[7])][Car]) - 400]);
						    	SendInfoMessage(playerid, 1, MsgDatos, "Datos: ");
					            if ( PlayersData[playerid][Admin] >= 7 && PlayersDataOnline[playerid][AdminOn] )
					            {
			 						format(MsgDatos, sizeof(MsgDatos), "Matrícula: %i ID: %i", DataCars[PlayersData[strval(cmdtext[7])][Car]][Matricula], PlayersData[strval(cmdtext[7])][Car]);
		 						}
		 						else
		 						{
			 						format(MsgDatos, sizeof(MsgDatos), "Matrícula: %i", DataCars[PlayersData[strval(cmdtext[7])][Car]][Matricula]);
								}

						    	SendInfoMessage(playerid, 1, MsgDatos, "Datos: ");
			 				}
			 				else
			 				{
				 				format(MsgDatos, sizeof(MsgDatos), "Vehículo: Ninguno");
						    	SendInfoMessage(playerid, 1, MsgDatos, "Datos: ");
							}
				            return 1;
						}
						else
						{
							SendInfoMessage(playerid, 0, "405", "El jugador que desea verle los datos no se encuentra conectado");
						}
			        }
			        else
			        {
						SendInfoMessage(playerid, 0, "404", "Usted no es detective");
					}
				}
				//////////--- /AD [Anuncio]
				else if (strfind(cmdtext, "/Ad ", true) == 0)
				{
		    	    if (strlen(cmdtext) > 9 && strlen(cmdtext) <= 83)
		    	    {
		    	        if (PlayersData[playerid][Phone] != 0)
		    	        {
		    	            new MensajeAD[MAX_TEXT_CHAT];
		    	            new MensajeADA[MAX_TEXT_CHAT];
		    	            if (gettime() - TimerAd >= 60)
		    	            {
								if (PlayersData[playerid][Dinero] > (strlen(MensajeAD) -3))
								{
								    TimerAd = gettime();
									strmid(MensajeAD, cmdtext, 4, strlen(cmdtext), sizeof(MensajeAD));
								    if ( !DetectSpam(playerid, MensajeAD) )
								    {
										format(MensajeADA, sizeof(MensajeADA), "Anuncio: %s. Móvil: %i (([%i]))", MensajeAD, PlayersData[playerid][Phone], playerid);
										format(MensajeAD, sizeof(MensajeAD), "Anuncio: %s. Móvil: %i", MensajeAD, PlayersData[playerid][Phone]);

									    if ( PlayersData[playerid][Admin] >= 1 )
									    {
									        SendClientMessage(playerid, 0x0FFF00FF, MensajeADA);
									    }
									    else
									    {
									        SendClientMessage(playerid, 0x0FFF00FF, MensajeAD);
										}
									}
									else
									{
									    switch ( random(10) )
									    {
									        case 0:
									        {
												format(MensajeAD, sizeof(MensajeAD), "Anuncio: Busco ADP. Móvil: %i", PlayersData[playerid][Phone]);
											}
									        case 1:
									        {
												format(MensajeAD, sizeof(MensajeAD), "Anuncio: Compro Sabre. Móvil: %i", PlayersData[playerid][Phone]);
											}
									        case 2:
									        {
												format(MensajeAD, sizeof(MensajeAD), "Anuncio: Busco NFS. Móvil: %i", PlayersData[playerid][Phone]);
											}
									        case 3:
									        {
												format(MensajeAD, sizeof(MensajeAD), "Anuncio: Compro coche o moto. Móvil: %i", PlayersData[playerid][Phone]);
											}
									        case 4:
									        {
												format(MensajeAD, sizeof(MensajeAD), "Anuncio: Vendo sentinel $2500. Móvil: %i", PlayersData[playerid][Phone]);
											}
									        case 5:
									        {
												format(MensajeAD, sizeof(MensajeAD), "Anuncio: Compro moto, no más de $2500. Móvil: %i", PlayersData[playerid][Phone]);
											}
									        case 6:
									        {
												format(MensajeAD, sizeof(MensajeAD), "Anuncio: Vendo casa en $80000. Móvil: %i", PlayersData[playerid][Phone]);
											}
									        case 7:
									        {
												format(MensajeAD, sizeof(MensajeAD), "Anuncio: Busco alquiler barato. Móvil: %i", PlayersData[playerid][Phone]);
											}
									        case 8:
									        {
												format(MensajeAD, sizeof(MensajeAD), "Anuncio: Compro transporte público. Móvil: %i", PlayersData[playerid][Phone]);
											}
									        case 9:
									        {
												format(MensajeAD, sizeof(MensajeAD), "Anuncio: Contrato servicios de ADP. Móvil: %i", PlayersData[playerid][Phone]);
											}
										}
										format(MensajeADA, sizeof(MensajeADA), "%s (([%i]))", MensajeAD, playerid);
										format(MensajeAD, sizeof(MensajeAD), "%s", MensajeAD);
									}
									for (new i = 0; i < MAX_PLAYERS; i++)
									{
										if (playerid != i && IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3)
										{
										    if ( PlayersData[i][Admin] >= 1 )
										    {
										        SendClientMessage(i, 0x0FFF00FF, MensajeADA);
										    }
										    else
										    {
										        SendClientMessage(i, 0x0FFF00FF, MensajeAD);
											}
										}
									}

									FaccionData[CNN][Deposito] = FaccionData[CNN][Deposito] + (strlen(MensajeAD) -3);

									format(MensajeAD, sizeof(MensajeAD), "Has gastado $%i en el anuncio.", strlen(MensajeAD) -3);
									SendInfoMessage(playerid, 2, "0", MensajeAD);
									GivePlayerMoneyEx(playerid, -strlen(MensajeAD) -3);
									print(MensajeAD);
									return 1;
								}
								else
								{
									SendInfoMessage(playerid, 0, "409", "No tiene suficiente dinero para colgar un anuncio");
	 								return 1;
								}
							}
							else
							{
							    new MsgTimerAd[MAX_TEXT_CHAT];
							    format(MsgTimerAd, sizeof(MsgTimerAd), "Tienes que esperar %i segundos para el próximo anuncio", 60 - (gettime() - TimerAd));
								SendInfoMessage(playerid, 0, "408", MsgTimerAd);
							   	return 1;
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "407", "Tienes que comprarte un móvil para poder enviar anuncios");
					    	return 1;
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "406", "El anuncio tiene que contener más de 5 caracteres y menos de 80");
				    	return 1;
					}

		    	}
				// COMANDO: /Pasaporte [ID]
				else if (strfind(cmdtext, "/Pasaporte ", true) == 0 )
				{
				    if ( playerid == strval(cmdtext[11]) )
				    {
				        Acciones(playerid, 8, "mira su pasaporte");
				        ShowPasaporteToPlayer(playerid, strval(cmdtext[11]));
				    }
				    else if ( IsPlayerNear(playerid, strval(cmdtext[11]),
						 "140",
						 "141",
						 "142",
						 "El jugador que desea mostrarle el pasaporte no se encuentra conectado",
						 "El jugador que desea mostrarle el pasaporte no se encuentra logueado",
						 "El jugador que desea mostrarle el pasaporte no se encuentra cerca de tí") )
				    {
						new MsgPasaporteMe[MAX_TEXT_CHAT];
						format(MsgPasaporteMe, sizeof(MsgPasaporteMe), "le enseña su pasaporte a %s", PlayersDataOnline[strval(cmdtext[11])][NameOnlineFix]);
				        Acciones(playerid, 8, MsgPasaporteMe);

						ShowPasaporteToPlayer(playerid, strval(cmdtext[11]));
				    }
				}
				// COMANDO: /Al [Alemán]
				else if (strfind(cmdtext, "/Al ", true) == 0 )
				{
					if ( PlayersData[playerid][Idiomas][0] )
					{
						SendChatStreamIdioma(playerid, cmdtext[4], 0);
					}
					else
					{
						SendInfoMessage(playerid, 0, "483", "Usted no tiene título de alemán");
					}
				}
				// COMANDO: /Fr [Francés]
				else if (strfind(cmdtext, "/Fr ", true) == 0 )
				{
					if ( PlayersData[playerid][Idiomas][1] )
					{
						SendChatStreamIdioma(playerid, cmdtext[4], 1);
					}
					else
					{
						SendInfoMessage(playerid, 0, "482", "Usted no tiene título de fancrés");
					}
				}
				// COMANDO: /Po [Portugés]
				else if (strfind(cmdtext, "/Po ", true) == 0 )
				{
					if ( PlayersData[playerid][Idiomas][2] )
					{
						SendChatStreamIdioma(playerid, cmdtext[4], 2);
					}
					else
					{
						SendInfoMessage(playerid, 0, "481", "Usted no tiene título de portugués");
					}
				}
				// COMANDO: /It [Italiano]
				else if (strfind(cmdtext, "/It ", true) == 0 )
				{
					if ( PlayersData[playerid][Idiomas][3] )
					{
						SendChatStreamIdioma(playerid, cmdtext[4], 3);
					}
					else
					{
						SendInfoMessage(playerid, 0, "448", "Usted no tiene título de italiano");
					}
				}
				// COMANDO: /In [Inglés]
				else if (strfind(cmdtext, "/In ", true) == 0 )
				{
					if ( PlayersData[playerid][Idiomas][4] )
					{
						SendChatStreamIdioma(playerid, cmdtext[4], 4);
					}
					else
					{
						SendInfoMessage(playerid, 0, "449", "Usted no tiene título de inglés");
					}
				}
				// COMANDO: /Ja [Janponés]
				else if (strfind(cmdtext, "/Ja ", true) == 0 )
				{
					if ( PlayersData[playerid][Idiomas][5] )
					{
						SendChatStreamIdioma(playerid, cmdtext[4], 5);
					}
					else
					{
						SendInfoMessage(playerid, 0, "450", "Usted no tiene título de japonés");
					}
				}
				// COMANDO: /Licencias [ID]
				else if (strfind(cmdtext, "/Licencias ", true) == 0 )
				{
				    if ( playerid == strval(cmdtext[11]) )
				    {
				        Acciones(playerid, 8, "mira sus licencias");
				        ShowLicenciasToPlayer(playerid, strval(cmdtext[11]));
				    }
				    else if ( IsPlayerNear(playerid, strval(cmdtext[11]),
						 "442",
						 "443",
						 "444",
						 "El jugador que desea mostrarle sus licencias no se encuentra conectado",
						 "El jugador que desea mostrarle sus licencias no se encuentra logueado",
						 "El jugador que desea mostrarle sus licencias no se encuentra cerca de tí") )
				    {
						new MsgLicenciasMe[MAX_TEXT_CHAT];
						format(MsgLicenciasMe, sizeof(MsgLicenciasMe), "le enseña sus licencias a %s", PlayersDataOnline[strval(cmdtext[11])][NameOnlineFix]);
				        Acciones(playerid, 8, MsgLicenciasMe);

						ShowLicenciasToPlayer(playerid, strval(cmdtext[11]));
				    }
				}
				// COMANDO: /Idiomas [ID]
				else if (strfind(cmdtext, "/Idiomas ", true) == 0 )
				{
				    if ( playerid == strval(cmdtext[9]) )
				    {
				        Acciones(playerid, 8, "mira sus diplomas de idiomas");
				        ShowIdiomasToPlayer(playerid, strval(cmdtext[9]));
				    }
				    else if ( IsPlayerNear(playerid, strval(cmdtext[9]),
						 "445",
						 "446",
						 "447",
						 "El jugador que desea mostrarle sus idiomas no se encuentra conectado",
						 "El jugador que desea mostrarle sus idiomas no se encuentra logueado",
						 "El jugador que desea mostrarle sus idiomas no se encuentra cerca de tí") )
				    {
						new MsgIdiomasMe[MAX_TEXT_CHAT];
						format(MsgIdiomasMe, sizeof(MsgIdiomasMe), "le enseña sus diplomas idiomas a %s", PlayersDataOnline[strval(cmdtext[9])][NameOnlineFix]);
				        Acciones(playerid, 8, MsgIdiomasMe);

						ShowIdiomasToPlayer(playerid, strval(cmdtext[9]));
				    }
				}
				// COMANDO: /N [Normal]
				else if (strfind(cmdtext, "/N ", true) == 0 )
				{
					SendChatStreamNormal(playerid, cmdtext[3], "Dice:");
		    	}
				// COMANDO: /Altavoz
			  	else if (strcmp("/Altavoz", cmdtext, true, 8) == 0 && strlen(cmdtext) == 8)
		    	{
				    if ( PlayersData[playerid][Phone] != 0)
				    {
				        if ( PlayersDataOnline[playerid][InCall] != -1 )
				        {
							if ( PlayersDataOnline[playerid][InCall] != 888 )
							{
							    if ( PlayersDataOnline[playerid][Altavoz] )
							    {
							        PlayersDataOnline[playerid][Altavoz] = false;
								    Acciones(playerid, 8, "descativa el altavoz del móvil");
							    }
							    else
							    {
							        PlayersDataOnline[playerid][Altavoz] = true;
								    Acciones(playerid, 8, "activa el altavoz del móvil");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "1021", "Para este número no puede activar el altavoz!");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1022", "Usted no se encuentra en una llamada");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1023", "Tú no tienes móvil");
					}
		    	}
				// COMANDO: /C (Colgar)
			  	else if (strcmp("/C", cmdtext, true, 2) == 0 && strlen(cmdtext) == 2)
		    	{
				    if ( PlayersData[playerid][Phone] != 0)
				    {
				        if ( PlayersDataOnline[playerid][InCall] != -1 )
				        {
							PayCall(playerid);
							if ( PlayersDataOnline[playerid][InCall] != 888 )
							{
								PayCall(PlayersDataOnline[playerid][InCall]);
								Acciones(PlayersDataOnline[playerid][InCall], 8, "guarda su móvil");
								SendClientMessage(PlayersDataOnline[playerid][InCall], COLOR_COLGAR_DESCOLGAR, " Han colgado!");
				                PlayersDataOnline[PlayersDataOnline[playerid][InCall]][IsDescolgado] = false;
								SetPlayerColgar(PlayersDataOnline[playerid][InCall]);
				                PlayersDataOnline[PlayersDataOnline[playerid][InCall]][InCall] = -1;
							}
							else
							{
								if ( CallCNN == playerid )
								{
									SendClientMessageToAll(0x0FFF00FF, "* CNN: Conexión telefónica finalizada.");
								    CallCNN = -1;
								}
							}
							Acciones(playerid, 8, "guarda su móvil");
			                PlayersDataOnline[playerid][IsDescolgado] = false;
							SendClientMessage(playerid, COLOR_COLGAR_DESCOLGAR, " Colgaste");
							SetPlayerColgar(playerid);
			                PlayersDataOnline[playerid][InCall] = -1;
						}
						else
						{
							SendInfoMessage(playerid, 0, "388", "Usted no se encuentra en una llamada");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "389", "Tú no tienes móvil");
					}
		    	}
				// COMANDO: /D (Descolgar)
			  	else if (strcmp("/D", cmdtext, true, 2) == 0 && strlen(cmdtext) == 2)
		    	{
				    if ( PlayersData[playerid][Phone] != 0)
				    {
				        if ( PlayersDataOnline[playerid][InCall] != -1 )
				        {
				            if ( !PlayersDataOnline[playerid][IsDescolgado] )
				            {
					            PlayersDataOnline[playerid][Altavoz] = false;
                                PlayersDataOnline[playerid][ICall] = false;
				                PlayersDataOnline[PlayersDataOnline[playerid][InCall]][TimeCall] = gettime();
						        PlayersDataOnline[playerid][TimeCall] = gettime();
				                PlayersDataOnline[playerid][IsDescolgado] = true;

								Acciones(playerid, 8, "descuelga su móvil");
								SendClientMessage(playerid, COLOR_COLGAR_DESCOLGAR, " Descolgaste el móvil!");
								SendClientMessage(PlayersDataOnline[playerid][InCall], COLOR_COLGAR_DESCOLGAR, " Han descolgado!");

								SetPlayerDescolgar(playerid);
							}
							else
							{
	                        	SendInfoMessage(playerid, 0, "390", "Usted ya descolgó esta llamada");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "391", "Usted no se encuentra en una llamada");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "392", "Tú no tienes móvil");
					}
				}
				// COMANDO: /SMS [Número] [Texto]
				else if (strfind(cmdtext, "/SMS ", true) == 0 )
				{
					SendSMS(playerid, strvalEx(cmdtext[GetPosSpace(cmdtext, 1)]), cmdtext[GetPosSpace(cmdtext, 2)]);
				}
				// COMANDO: /Casar [ID] [ID]
				else if (strfind(cmdtext, "/Casar ", true) == 0 )
				{
					if ( PlayersData[playerid][Faccion] == GOBIERNO && PlayersData[playerid][Rango] == 0 )
					{
						new FistID = strval(cmdtext[GetPosSpace(cmdtext, 1)]);
						new SecondID = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
						if ( FistID != SecondID )
						{
						    if ( IsPlayerNear(playerid, FistID,
								 "926",
								 "927",
								 "928",
								 "El primer jugador que deseas casar no se encuentra conectado",
								 "El primer jugador que deseas casar no se ha logueado",
								 "El primer jugador que deseas casar no se encuentra cerca de tí") &&
								 IsPlayerNear(playerid, SecondID,
								 "929",
								 "930",
								 "931",
								 "El segundo jugador que deseas casar no se encuentra conectado",
								 "El segundo jugador que deseas casar no se ha logueado",
								 "El segundo jugador que deseas casar no se encuentra cerca de tí") 						 )
						    {
								if ( strlen(PlayersData[FistID][GirlFreind]) == 2 && strlen(PlayersData[SecondID][GirlFreind]) == 2)
								{
									format(PlayersData[FistID][GirlFreind], MAX_PLAYER_NAME, "%s", PlayersDataOnline[SecondID][NameOnline]);
									format(PlayersData[SecondID][GirlFreind], MAX_PLAYER_NAME, "%s", PlayersDataOnline[FistID][NameOnline]);

									new MsgCasados[MAX_TEXT_CHAT];
									format(MsgCasados, sizeof(MsgCasados), "Has casado a %s con %s", PlayersDataOnline[FistID][NameOnlineFix], PlayersDataOnline[SecondID][NameOnlineFix]);
									SendInfoMessage(playerid, 3, "0", MsgCasados);
									format(MsgCasados, sizeof(MsgCasados), "El presidente %s te ha casado con %s", PlayersDataOnline[playerid][NameOnlineFix], PlayersDataOnline[FistID][NameOnlineFix]);
									SendInfoMessage(SecondID, 3, "0", MsgCasados);
									format(MsgCasados, sizeof(MsgCasados), "El presidente %s te ha casado con %s", PlayersDataOnline[playerid][NameOnlineFix], PlayersDataOnline[SecondID][NameOnlineFix]);
									SendInfoMessage(FistID, 3, "0", MsgCasados);
								}
							    else
							    {
									SendInfoMessage(playerid, 0, "932", "Uno de los jugadores que deseas casar, ya se encuentra casado.");
								}
						    }
						}
					    else
					    {
							SendInfoMessage(playerid, 0, "943", "Has introducído las mismas IDs para casar.");
						}
					}
				    else
				    {
						SendInfoMessage(playerid, 0, "933", "Sólo el presidente puede casar a alguién.");
					}
				}
				// COMANDO: /DivorciarEx
				else if (strfind(cmdtext, "/DivorciarEx ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 7)
					{
					    if ( IsPlayerConnected(strval(cmdtext[13])) )
					    {
					        if ( strlen(PlayersData[strval(cmdtext[13])][GirlFreind]) != 2 )
					        {
								format(PlayersData[strval(cmdtext[13])][GirlFreind], MAX_PLAYER_NAME, "No");

								new MsgDivorciarAdm[MAX_TEXT_CHAT];
								format(MsgDivorciarAdm, sizeof(MsgDivorciarAdm), "%s Has divorciado a %s con el comando /DivorciarEx [ID]", LOGO_STAFF, PlayersDataOnline[strval(cmdtext[13])][NameOnlineFix]);
								SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, MsgDivorciarAdm);
								format(MsgDivorciarAdm, sizeof(MsgDivorciarAdm), "%s Has sido devorciado por %s con el comando /DivorciarEx [ID]", LOGO_STAFF, PlayersDataOnline[playerid][NameOnlineFix]);
								SendInfoMessage(strval(cmdtext[13]), 3, "0", MsgDivorciarAdm);
							}
							else
							{
								SendInfoMessage(playerid, 0, "942", "El jugador que desea divorciar ya se encuentra divorciado");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "924", "El jugador que desea divorciar no se encuentra conectado.");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "925", "Tú no tienes acceso a el comando /DivorciarEx.");
				        return 1;
					}
				}
				// COMANDO: /Divorciar [ID] [ID]
				else if (strfind(cmdtext, "/Divorciar ", true) == 0 )
				{
					if ( PlayersData[playerid][Faccion] == GOBIERNO && PlayersData[playerid][Rango] == 0 )
					{
						new FistID = strval(cmdtext[GetPosSpace(cmdtext, 1)]);
						new SecondID = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
						if ( FistID != SecondID )
						{
						    if ( IsPlayerNear(playerid, FistID,
								 "934",
								 "935",
								 "936",
								 "El primer jugador que deseas divorciar no se encuentra conectado",
								 "El primer jugador que deseas divorciar no se ha logueado",
								 "El primer jugador que deseas divorciar no se encuentra cerca de tí") &&
								 IsPlayerNear(playerid, SecondID,
								 "937",
								 "938",
								 "939",
								 "El segundo jugador que deseas divorciar no se encuentra conectado",
								 "El segundo jugador que deseas divorciar no se ha logueado",
								 "El segundo jugador que deseas divorciar no se encuentra cerca de tí") 						 )
						    {
								if ( strlen(PlayersData[FistID][GirlFreind]) != 2 && strlen(PlayersData[SecondID][GirlFreind]) != 2 &&
									 strfind(PlayersData[FistID][GirlFreind], PlayersDataOnline[SecondID][NameOnline], false) == 0 &&
									 strlen(PlayersData[FistID][GirlFreind]) == strlen(PlayersDataOnline[SecondID][NameOnline]) &&
									 strfind(PlayersData[SecondID][GirlFreind], PlayersDataOnline[FistID][NameOnline], false) == 0 &&
									 strlen(PlayersData[SecondID][GirlFreind]) == strlen(PlayersDataOnline[FistID][NameOnline]) )
								{
									format(PlayersData[FistID][GirlFreind], MAX_PLAYER_NAME, "No");
									format(PlayersData[SecondID][GirlFreind], MAX_PLAYER_NAME, "No");

									new MsgCasados[MAX_TEXT_CHAT];
									format(MsgCasados, sizeof(MsgCasados), "Has divorciado a %s con %s", PlayersDataOnline[FistID][NameOnlineFix], PlayersDataOnline[SecondID][NameOnlineFix]);
									SendInfoMessage(playerid, 3, "0", MsgCasados);
									format(MsgCasados, sizeof(MsgCasados), "El presidente %s te ha divorciado con %s", PlayersDataOnline[playerid][NameOnlineFix], PlayersDataOnline[FistID][NameOnlineFix]);
									SendInfoMessage(SecondID, 3, "0", MsgCasados);
									format(MsgCasados, sizeof(MsgCasados), "El presidente %s te ha divorciado con %s", PlayersDataOnline[playerid][NameOnlineFix], PlayersDataOnline[SecondID][NameOnlineFix]);
									SendInfoMessage(FistID, 3, "0", MsgCasados);
								}
							    else
							    {
									SendInfoMessage(playerid, 0, "940", "Uno de los jugadores que deseas divorciar, ya se encuentra divorciado.");
								}
						    }
						}
					    else
					    {
							SendInfoMessage(playerid, 0, "943", "Has introducído las mismas IDs para divorciar.");
						}
					}
				    else
				    {
						SendInfoMessage(playerid, 0, "941", "Sólo el presidente puede divorciar a alguién.");
					}
				}
				// COMANDO: /Llamar [Número]
				else if (strfind(cmdtext, "/Llamar ", true) == 0 )
				{
	                SetPlayerCall(playerid, strval(cmdtext[8]));
				}
				// COMANDO: /Dados
				else if (strcmp("/Dados", cmdtext, true, 6) == 0 && strlen(cmdtext) == 6 )
				{
				    if ( IsObjectInBolsillo(playerid, 2) )
				    {
				        new MsgDados[MAX_TEXT_CHAT];
						new RndDados = random(7) + 1;
						format(MsgDados, sizeof(MsgDados), "Salió el número %i en los dados que tiró %s", RndDados, PlayersDataOnline[playerid][NameOnlineFix]);
				        Acciones(playerid, 8, "tira los dados");
				        Acciones(playerid, 7, MsgDados);
					}
					else
					{
						SendInfoMessage(playerid, 0, "373", "Tú no tienes dados");
					}
				}
				// COMANDO: /Patinar
				else if (strcmp("/Patinar", cmdtext, true, 8) == 0 && strlen(cmdtext) == 8 )
				{
				    if ( IsObjectInBolsillo(playerid, 1) )
				    {
				        Acciones(playerid, 8, "se calza unos patines y echa andar");
						ApplyAnimation(playerid,"SKATE",SKATE_ANIMATIONS [1], 4.0, 1, 1, 1, 1, 1, 1);
					}
					else
					{
						SendInfoMessage(playerid, 0, "372", "Tú no tienes patines");
					}
				}
				// COMANDO: /Agenda
				else if (strcmp("/Agenda", cmdtext, true, 7) == 0 && strlen(cmdtext) == 7 )
				{
				    if ( IsObjectInBolsillo(playerid, 4) )
				    {
				        Acciones(playerid, 8, "saca su agenda");
				        ShowHomeAgenda(playerid);
					}
					else
					{
						SendInfoMessage(playerid, 0, "893", "Tú no tienes agenda");
					}
				}
				// COMANDO: /Tirar
				else if (strfind(cmdtext, "/Tirar ", true) == 0)
				{
					if (strcmp("/Tirar Arma", cmdtext, true, 11) == 0 && strlen(cmdtext) == 11 )
					{
						new MyWeapons; MyWeapons = GetPlayerWeapon(playerid);
				        if ( MyWeapons != 0 )
				        {
				            RemovePlayerWeapond(playerid, MyWeapons);
							new MsgTirar[MAX_TEXT_CHAT];
					        format(MsgTirar, sizeof(MsgTirar), "tiró un %s", SlotNameWeapon[MyWeapons]);
					        Acciones(playerid, 8, MsgTirar);
					        SendInfoMessage(playerid, 2, "0", "Tiraste un arma");
						}
						else
						{
							SendInfoMessage(playerid, 0, "281", "No tienes un arma en las manos!");
						}
					}
					// COMANDO: /Tirar Cartera [ID_Cartera]
			  		else if (strfind(cmdtext, "/Tirar Cartera ", true) == 0)
				    {
				        new CarteraID   = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
				        if ( CarteraID >= 1 && CarteraID <= MAX_COUNT_CARTERA )
				        {
				            CarteraID--;
				            if ( PlayersData[playerid][Cartera][CarteraID] != CARTERA_TYPE_NADA )
				            {
								new ObjectRemove = RemoveObjectToCartera(playerid, CarteraID);

								new MsgTirarCartera[MAX_TEXT_CHAT];
								format(MsgTirarCartera, sizeof(MsgTirarCartera), "tiró un %s", CarteraNames[ObjectRemove]);
						        Acciones(playerid, 8, MsgTirarCartera);

								new MsgDarCarteraYOU[MAX_TEXT_CHAT];
							    format(MsgDarCarteraYOU, sizeof(MsgDarCarteraYOU), "Tiraste un %s.", CarteraNames[ObjectRemove]);
								SendInfoMessage(playerid, 2, "0", MsgDarCarteraYOU);
				            }
				            else
				            {
								SendInfoMessage(playerid, 0, "1328", "No tienes nada en esa parte de la cartera!");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1327", "El número de cartera debe estár comprendido entre 1 y 6");
						}

				    }
					else if (strcmp("/Tirar Chaleco", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14 )
					{
						new Float:Chaleco1;
						GetPlayerArmour(playerid, Chaleco1);
						if ( Chaleco1 > 0.0 )
						{
							SetPlayerArmourEx(playerid, -Chaleco1);
					        Acciones(playerid, 8, "tiró su chaleco");
					        SendInfoMessage(playerid, 2, "0", "Has tirado tu chaleco");
						}
						else
						{
							SendInfoMessage(playerid, 0, "880", "Usted no tienes ningún chaleco puesto encima.");
						}
					}
					// COMANDO: /Tirar Artículo [ID_Bolsa]
			  		else if (strfind(cmdtext, "/Tirar Artículo ", true) == 0 ||
					  		 strfind(cmdtext, "/Tirar Articulo ", true) == 0)
				    {
				        new BolsaID = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
						DropArticlePlayerToPlayer(playerid, BolsaID);
				    }
					else if (strcmp("/Tirar Patines", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14 )
					{
					    if ( IsObjectInBolsillo(playerid, 1) )
					    {
								RemoveObjectBolsillo(playerid, 1);
						        Acciones(playerid, 8, "ha tirado unos patines al suelo");
						        SendInfoMessage(playerid, 2, "0", "Has botado tus patines, ahora tendrás que caminar más");
						        ClearAnimations(playerid, true);
						}
						else
						{
							SendInfoMessage(playerid, 0, "371", "Tú no tienes patines");
						}
					}
					// COMANDO: /Tirar Dados
					else if (strcmp("/Tirar Dados", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12 )
					{
					    if ( IsObjectInBolsillo(playerid, 2) )
					    {
								RemoveObjectBolsillo(playerid, 2);
						        Acciones(playerid, 8, "ha tirado unos dados al suelo");
						        SendInfoMessage(playerid, 2, "0", "Has botado tus dados de la suerte, ahora no podrá jugar con ellos");
						}
						else
						{
							SendInfoMessage(playerid, 0, "370", "Tú no tienes dados");
						}
					}
					// COMANDO: /Tirar Agenda
					else if ( strcmp("/Tirar Agenda", cmdtext, true, 13) == 0 && strlen(cmdtext) == 13 )
					{
					    if ( IsObjectInBolsillo(playerid, 4) )
					    {
								RemoveObjectBolsillo(playerid, 4);
						        Acciones(playerid, 8, "ha tirado su agenda al suelo");
						        SendInfoMessage(playerid, 2, "0", "Has botado tu agenda!");
						}
						else
						{
							SendInfoMessage(playerid, 0, "1068", "Tú no tienes agenda!");
						}
					}
					// COMANDO: /Tirar Bolsa
					else if ( strcmp("/Tirar Bolsa", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12 )
					{
					    if ( PlayersData[playerid][HaveBolsa] )
					    {
								PlayersData[playerid][HaveBolsa] = false;
						        Acciones(playerid, 8, "ha tirado su bolsa al suelo");
						        SendInfoMessage(playerid, 2, "0", "Has botado tu bolsa!");
						        CleanArticulosBolsa(playerid);
						}
						else
						{
							SendInfoMessage(playerid, 0, "1229", "Tú no tienes bolsa!");
						}
					}
					// COMANDO: /Tirar Móvil
					else if (strcmp("/Tirar Móvil", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12 ||
							 strcmp("/Tirar Movil", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12)
					{
					    if ( PlayersData[playerid][Phone] != 0)
					    {
					        if ( PlayersDataOnline[playerid][InCall] == -1 )
					        {
								RemoveObjectBolsillo(playerid, 3);
								PlayersData[playerid][Phone] = 0;
						        Acciones(playerid, 8, "ha tirado su móvil al suelo");
						        SendInfoMessage(playerid, 2, "0", "Has botado su móvil, ahora no podrá realizar llamadas");
						        
						        new query[200];
						        mysql_format(dataBase, query, 200, "UPDATE `%s` SET `Phone`='0' WHERE `Nombre`='%e';", DIR_USERS, PlayersData[playerid][Phone], PlayersDataOnline[playerid][NameOnline]);
							    mysql_query(dataBase, query, false);
							}
							else
							{
								SendInfoMessage(playerid, 0, "369", "Finalize su llamada telefónica antes de tirar su móvil");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "368", "Tú no tienes móvil");
						}
					}
					// COMANDO: /Tirar Coche [ID]
					else if (strfind(cmdtext, "/Tirar Coche ", true) == 0)
					{
					    if ( IsPlayerInAnyVehicle(playerid) )
					    {
					        if ( GetPlayerVehicleSeat(playerid) == 0 )
					        {
								if ( IsPlayerConnected(strval(cmdtext[13])) )
								{
								    if ( strval(cmdtext[13]) != playerid )
								    {
										if ( GetPlayerVehicleID(playerid) == GetPlayerVehicleID(strval(cmdtext[13])) )
										{
											new MsgFormatTirar[50];
											format(MsgFormatTirar, sizeof(MsgFormatTirar), "tirar del vehículo a %s", PlayersDataOnline[strval(cmdtext[13])][NameOnlineFix]);
										    if ( IntentarAccion(playerid, MsgFormatTirar, random(4)) )
										    {
							                    RemovePlayerFromVehicle(strval(cmdtext[13]));
						                   	}
											return 1;
										}
										else
										{
											SendInfoMessage(playerid, 0, "103", "El jugador que le desea tirar del vehículo no se encuentra en el.");
										}
									}
									else
									{
										SendInfoMessage(playerid, 0, "104", "Has introducído tu misma ID a tirar del vehículo.");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "105", "El jugador que le desea tirar del vehículo no se encuentra conectado.");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "106", "Tienes que estar en el asiento del conductor para poder tirar a alguién.");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "107", "No te encuentras dentro de un vehículo.");
						}
					}
			    	else
			    	{
						SendInfoMessage(playerid, 0, "367", "Quizás quiso decir: /Tirar {Coche [ID], Móvil, Dados, Patines, Chaleco, Arma, Agenda, Bolsa, Artículo [ID_Bolsa]}");
						SendInfoMessage(playerid, 0, "367", "Quizás quiso decir: /Tirar {Cartera [ID_Cartera]}");
					}
				}
				// COMANDO: /P [DM]
				else if (strfind(cmdtext, "/P ", true) == 0)
				{
				    if ( PlayersDataOnline[playerid][ModeDM] )
				    {
					    SendMessageDM(playerid, cmdtext[3]);
					}
					else
					{
						SendInfoMessage(playerid, 0, "1149", "No te encuentras en modo DeathMatch!");
					}
				}
				// COMANDO: /E [Texto]
				else if (strfind(cmdtext, "/E ", true) == 0)
				{
				    if ( PlayersDataOnline[playerid][ModeDM] )
				    {
						new MsgDM[MAX_TEXT_CHAT];
						format(MsgDM, sizeof(MsgDM), "* DM Equipo %s: %s", PlayersDataOnline[playerid][NameOnlineFix], cmdtext[3]);
						for (new i = 0; i < MAX_PLAYERS; i++)
						{
							if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersDataOnline[i][ModeDM] && PlayersDataOnline[i][TeamDM] == PlayersDataOnline[playerid][TeamDM])
							{
								SendClientMessage(i, COLOR_DM_TEAM, MsgDM);
							}
						}
						print(MsgDM);
					}
					else
					{
						SendInfoMessage(playerid, 0, "1341", "No te encuentras en modo DeathMatch!");
					}
				}
				// COMANDO: /F [Family]
				else if (strfind(cmdtext, "/F ", true) == 0)
				{
				    if ( FaccionData[PlayersData[playerid][Faccion]][Family] )
				    {
						if ( PlayersDataOnline[playerid][StateChannelFamily] )
						{
						    SendMessageFamily(playerid, cmdtext[3]);
						}
				        else
				        {
							SendInfoMessage(playerid, 0, "108", "Tú tienes cerrado el canal Family personal, abrelo con /Estado Family y luego usa /F [Family]");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "109", "Su Facción no tiene canal /F [Family]");
					}
				}
				// COMANDO: /R [Radio]
				else if (strfind(cmdtext, "/R ", true) == 0)
				{
				    if ( FaccionData[PlayersData[playerid][Faccion]][Radio] )
				    {
						if ( PlayersDataOnline[playerid][StateChannelRadio] )
						{
							Acciones(playerid, 8, "habla por radio");
						    SendMessageRadio(playerid, PlayersDataOnline[playerid][Frecuencia], cmdtext[3]);
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "110", "Tú tienes cerrado el canal Radio personal, abrelo con /Estado Radio y luego usa /R [Radio]");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "111", "Su Facción no tiene canal /R [Radio]");
					}
				}
				// COMANDO: /Rg [Radio General]
				else if (strfind(cmdtext, "/Rg ", true) == 0)
				{
					if ( PlayersData[playerid][Faccion] == SFPD ||
						 PlayersData[playerid][Faccion] == LSPD ||
						 PlayersData[playerid][Faccion] == SFMD ||
						 PlayersData[playerid][Faccion] == LSMD )
				    {
						if ( PlayersDataOnline[playerid][StateChannelFamily] )
						{
							Acciones(playerid, 8, "habla por radio");
							if ( PlayersData[playerid][Faccion] == SFPD ||
						 	     PlayersData[playerid][Faccion] == LSPD  )
						 	{
						    	SendMessageRadioGeneral(playerid, cmdtext[4]);
					    	}
					    	else
					    	{
						    	SendMessageRadioGeneralSAMD(playerid, cmdtext[4]);
					    	}
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "1502", "Tú tienes cerrado el canal de Radio General, abrelo con /Estado Rg y luego usa /Rg [Radio General]");
						}
			        }
			        else
			        {
						SendInfoMessage(playerid, 0, "1503", "Usted no es médico ni policía!");
					}
				}
				// COMANDO: /Stats
			  	else if (strcmp("/Stats", cmdtext, true, 6) == 0 && strlen(cmdtext) == 6)
		    	{
		    	    GetPlayerStats(playerid, playerid);
				}
				// COMANDO: /Tr [Transmitir]
				else if (strfind(cmdtext, "/Tr ", true) == 0)
				{
				    if ( PlayersData[playerid][Faccion] == CNN && PlayersData[playerid][Rango] <= 5 )
				    {
				        new MsgTransmision[MAX_TEXT_CHAT];
				        if ( PlayersData[playerid][Sexo] )
				        {
				        	format(MsgTransmision, sizeof(MsgTransmision), "** Reportera %s: %s", PlayersDataOnline[playerid][NameOnlineFix], cmdtext[4]);
			        	}
			        	else
			        	{
				        	format(MsgTransmision, sizeof(MsgTransmision), "** Reportero %s: %s", PlayersDataOnline[playerid][NameOnlineFix], cmdtext[4]);
						}
			            for (new i = 0; i < MAX_PLAYERS; i++)
			            {
							if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersDataOnline[i][StateChannelCNN] )
							{
						   		SendClientMessage(i, COLOR_DE_TRANSMISION, MsgTransmision);
					   		}
				   		}
				    }
				    else
				    {
						SendInfoMessage(playerid, 0, "224", "Tú no eres reportero!");
					}
				}
				// COMANDO: /Na [Narrar]
				else if (strfind(cmdtext, "/Na ", true) == 0)
				{
				    if ( PlayersData[playerid][Faccion] == CNN && PlayersData[playerid][Rango] <= 4)
				    {
				        if (IsPlayerInRangeOfPoint(playerid, 20.0, 1118.3374,1260.9243,10.8203) )
				        {
					        new MsgTransmision[MAX_TEXT_CHAT];
					        if ( PlayersData[playerid][Sexo] )
					        {
						        format(MsgTransmision, sizeof(MsgTransmision), "** Narradora %s: %s", PlayersDataOnline[playerid][NameOnlineFix], cmdtext[4]);
					   		}
					   		else
					   		{
						        format(MsgTransmision, sizeof(MsgTransmision), "** Narrador %s: %s", PlayersDataOnline[playerid][NameOnlineFix], cmdtext[4]);
							}
				            for (new i = 0; i < MAX_PLAYERS; i++)
				            {
								if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersDataOnline[i][StateChannelCNN] )
								{
							   		SendClientMessage(i, COLOR_DE_NARRACION, MsgTransmision);
						   		}
					   		}
						}
					    else
					    {
							SendInfoMessage(playerid, 0, "907", "Tienes que estár en el estudio para narrar!");
						}
				    }
				    else
				    {
						SendInfoMessage(playerid, 0, "906", "Tú no eres narrador!");
					}
				}
				// COMANDO: /Rango [ID] [ID_Rango]
				else if (strfind(cmdtext, "/Rango ", true) == 0)
				{
				    if ( PlayersData[playerid][Faccion] != CIVIL && PlayersData[playerid][Rango] == 0 )
				    {
						new idTochange = strval(cmdtext[GetPosSpace(cmdtext, 1)]);
						new RangoID 	=  strval(cmdtext[GetPosSpace(cmdtext, 2)]);
						if ( strlen(cmdtext) > 3 )
						{
						    if ( IsPlayerNear(playerid, idTochange,
								 "140",
								 "141",
								 "142",
								 "El jugador que desea dar rango no se encuentra conectado",
								 "El jugador que desea dar rango no se encuentra logueado",
								 "El jugador que desea dar rango no se encuentra cerca de tí") )
						    {
								if ( PlayersData[idTochange][Faccion] == PlayersData[playerid][Faccion] )
								{
								    if ( RangoID >= 1 && RangoID <= GetMaxFaccionRango(PlayersData[playerid][Faccion]) )
								    {
								        if ( RangoID != PlayersData[idTochange][Rango] )
								        {
				                            PlayersData[idTochange][Rango]   = RangoID;
											new MsgRangoUser[MAX_TEXT_CHAT]; format(MsgRangoUser, sizeof(MsgRangoUser), "Has asignado el rango \"%s\" ha %s", FaccionesRangos[PlayersData[playerid][Faccion]][RangoID],PlayersDataOnline[idTochange][NameOnlineFix]);
											new MsgRangoMe[MAX_TEXT_CHAT]; format(MsgRangoMe, sizeof(MsgRangoMe), "%s te ha asignado el rango \"%s\"", PlayersDataOnline[playerid][NameOnlineFix], FaccionesRangos[PlayersData[playerid][Faccion]][RangoID]);
				                            SendInfoMessage(idTochange, 3, "0", MsgRangoMe);
				                            SendInfoMessage(playerid, 3, "0", MsgRangoUser);
	  			                            SetPlayerSelectedTypeSkin(idTochange, true);
			                            }
			                            else
			                            {
											SendInfoMessage(playerid, 0, "281", "Ese jugador ya tiene ese rango asignado.");
										}
		                           	}
									else
									{
										SendInfoMessage(playerid, 0, "114", "El rango introducído no existe para tu facción");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "115", "El jugador que desea dar rango no pertenece a su facción");
								}
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "116", "Ha introducído mal el sintaxis del comando /Rango. Ejemplo correcto: /Rango 2 7");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "117", "Tú no eres líder.");
					}
				}
				// COMANDO: /Expulsar [ID]
				else if (strfind(cmdtext, "/Expulsar ", true) == 0)
				{
				    if ( PlayersData[playerid][Faccion] != CIVIL && PlayersData[playerid][Rango] == 0 )
				    {
					    new IdSend[4]; strmid(IdSend, cmdtext, 10, strlen(cmdtext), sizeof(IdSend));
					    if ( IsPlayerNear(playerid, strval(IdSend),
							 "135",
							 "136",
							 "137",
							 "El jugador que desea expulsar no se encuentra conectado",
							 "El jugador que desea expulsar no se encuentra logueado",
							 "El jugador que desea expulsar no se encuentra cerca de tí") )
					    {
							if ( PlayersData[strval(IdSend)][Faccion] == PlayersData[playerid][Faccion] )
							{
	                            PlayersData[strval(IdSend)][Faccion] = 0;
	                            PlayersData[strval(IdSend)][Rango]   = 7;
								PlayersData[strval(IdSend)][HorasWork] = 0;
								PlayersData[strval(IdSend)][SpawnFac] = 0;
								
								new MsgExpulsarUser[MAX_TEXT_CHAT]; format(MsgExpulsarUser, sizeof(MsgExpulsarUser), "%s te ha expulsado de la facción!", PlayersDataOnline[playerid][NameOnlineFix]);
								new MsgExpulsarMe[MAX_TEXT_CHAT]; format(MsgExpulsarMe, sizeof(MsgExpulsarMe), "Expulsaste a %s de tú facción.", PlayersDataOnline[strval(IdSend)][NameOnlineFix]);
	                            SendInfoMessage(strval(IdSend), 3, "0", MsgExpulsarUser);
	                            SendInfoMessage(playerid, 3, "0", MsgExpulsarMe);

					   		    if ( PlayersData[playerid][Sexo] )
							    {
									PlayersData[strval(IdSend)][Skin] = 56;
								}
								else
								{
									PlayersData[strval(IdSend)][Skin] = 26;
								}
								SetPlayerSkinEx(strval(IdSend), PlayersData[strval(IdSend)][Skin]);
							    CheckAsignados(playerid);
								SetPlayerLockAllVehicles(strval(IdSend));
							    UpdateSpawnPlayer(strval(IdSend));
							}
							else
							{
								SendInfoMessage(playerid, 0, "118", "El jugador que desea expulsar no pertenece a su facción");
							}
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "119", "Tú no eres líder.");
					}
				}
				// COMANDO: /Invitar [ID]
				else if (strfind(cmdtext, "/Invitar ", true) == 0)
				{
				    if ( PlayersData[playerid][Faccion] != CIVIL && PlayersData[playerid][Rango] == 0 )
				    {
					    new IdSend[4]; strmid(IdSend, cmdtext, 9, strlen(cmdtext), sizeof(IdSend));
					    if ( IsPlayerNear(playerid, strval(IdSend),
							 "120",
							 "121",
							 "122",
							 "El jugador que desea invitar no se encuentra conectado",
							 "El jugador que desea invitar no se encuentra logueado",
							 "El jugador que desea invitar no se encuentra cerca de tí") )
					    {
							if ( PlayersData[strval(IdSend)][Faccion] == 0 )
							{
		                      	PlayersDataOnline[strval(IdSend)][InvitePlayer]  = playerid;
								PlayersDataOnline[strval(IdSend)][InviteFaccion] = PlayersData[playerid][Faccion];

								new MsgInviteUser[MAX_TEXT_CHAT]; format(MsgInviteUser, sizeof(MsgInviteUser), "Enviaste un invite a %s.", PlayersDataOnline[strval(IdSend)][NameOnlineFix]);
								new MsgInviteMe[MAX_TEXT_CHAT]; format(MsgInviteMe, sizeof(MsgInviteMe), "Has recibido una invite del líder %s para entrar en la Facción \"%s\", Usa (/Aceptar Invite)",PlayersDataOnline[playerid][NameOnlineFix], FaccionData[PlayersData[playerid][Faccion]][NameFaccion]);
	                            SendInfoMessage(strval(IdSend), 3, "0", MsgInviteMe);
	                            SendInfoMessage(playerid, 3, "0", MsgInviteUser);
							}
							else
							{
								SendInfoMessage(playerid, 0, "120", "El jugador que desea invitar ya pertenece a una facción");
							}
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "121", "Tú no eres líder.");
					}
				}
				// COMANDO: /Precio coche
			  	else if (strcmp("/Precio Coche", cmdtext, true, 13) == 0 && strlen(cmdtext) == 13)
		    	{
					if ( PlayersData[playerid][Faccion] == NFS )
				    {
						new MyNearCar = IsPlayerInNearVehicle(playerid);
		   				if ( MyNearCar)
					    {
		   				    if ( MyNearCar <= MAX_CAR_DUENO && strlen(DataCars[MyNearCar][Dueno]) == 1 )
		   				    {
		   				        new MsgNFSPrecio[MAX_TEXT_CHAT];
			   				    format(MsgNFSPrecio, sizeof(MsgNFSPrecio), "Éste vehículo modelo \"%s\" tiene un precio de $%i.", coches_Todos_Nombres[GetVehicleModel(MyNearCar) - 400], coches_Todos_Precios[GetVehicleModel(MyNearCar) - 400]);
			   				    SendInfoMessage(playerid, 2, "0", MsgNFSPrecio);
							}
							else
							{
								SendInfoMessage(playerid, 0, "978", "Éste vehículo no está en venta!");
							}
						}
				    }
				    else
				    {
						SendInfoMessage(playerid, 0, "977", "No eres vendedor de vehículos!");
					}
		    	}
				// COMANDO: /Izquierda
			  	else if (strcmp("/Izquierda", cmdtext, true, 10) == 0 && strlen(cmdtext) == 10)
		    	{
					IntermitenteIzquierdo(playerid);
		    	}
				// COMANDO: /Derecha
			  	else if (strcmp("/Derecha", cmdtext, true, 8) == 0 && strlen(cmdtext) == 8)
		    	{
					IntermitenteDerecho(playerid);
		    	}
				// COMANDO: /Estacionamiento
			  	else if (strcmp("/Estacionamiento", cmdtext, true, 16) == 0 && strlen(cmdtext) == 16)
		    	{
					IntermitenteEstacionamiento(playerid);
		    	}
				// COMANDO: /Luces
			  	else if (strcmp("/Luces", cmdtext, true, 6) == 0 && strlen(cmdtext) == 6)
		    	{
					IntermitenteEncendido(playerid);
		    	}
		    	// Testing Commands
			    // /play [soundid]
				else if (strfind(cmdtext, "/play ", true) == 0)
				{
					if ( PlayersData[playerid][Admin] >= 7 )
					{
					    new soundidPlay = strval(cmdtext[GetPosSpace(cmdtext, 1)]);
                        PlayerPlaySound(playerid, soundidPlay,0.0,0.0,0.0);
				    }
			    }
				// COMANDO: /Objetos
			  	else if (strcmp("/Objetos", cmdtext, true, 8) == 0 && strlen(cmdtext) == 8)
		    	{
				    ShowObjectos(playerid);
				    return 1;
		    	}
				// COMANDO: /Hora
			  	else if (strcmp("/Hora", cmdtext, true, 5) == 0 && strlen(cmdtext) == 5)
		    	{
				    MostrarHora(0 ,playerid);
				    return 1;
		    	}
				// COMANDO: /Estado
				else if (strfind(cmdtext, "/Estado", true) == 0)
				{
					// /Estado
					if (strcmp("/Estado", cmdtext, true, 7) == 0 && strlen(cmdtext) == 7)
					{
	                    ShowMenuDescription(playerid);
					}
			//		16- *       /Estado Whisper                  - Cierra y Abre los wisper
					else if (strcmp("/Estado Whisper", cmdtext, true, 15) == 0 && strlen(cmdtext) == 15)
					{
						MsgAdminUseCommands(9, playerid, cmdtext);
						if (PlayersData[playerid][Admin] >= 1)
						{
							Comandos_Admin(16, playerid, 0, PlayersData[playerid][Admin], 0, "0");
						}
						else
						{
							SendInfoMessage(playerid, 0, "186", "Tú no tienes acceso a el comando /Estado Whisper.");
						}
					}
			//      /Estado Commands
					else if (strcmp("/Estado Commands", cmdtext, true, 16) == 0 && strlen(cmdtext) == 16 && PlayersData[playerid][Admin] == 9 )
					{
						new MensajeWisperCerradoAbierto[50];
						if ( PlayersDataOnline[playerid][SendCommands] )
						{
						    PlayersDataOnline[playerid][SendCommands] = false;
					        format(MensajeWisperCerradoAbierto, sizeof(MensajeWisperCerradoAbierto), "%s Avisos de SendCommands cerrado!", LOGO_STAFF);
			 			}
			 			else if  ( !PlayersDataOnline[playerid][SendCommands] )
			 			{
							PlayersDataOnline[playerid][SendCommands] = true;
					        format(MensajeWisperCerradoAbierto, sizeof(MensajeWisperCerradoAbierto), "%s Avisos de SendCommands abierto!.", LOGO_STAFF);
			 			}
				        SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, MensajeWisperCerradoAbierto);
					}
					// /Estado Capó
					else if (strcmp("/Estado Capó", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12 ||
							 strcmp("/Estado Capo", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12)
					{
						new MyNearCar = IsPlayerInNearVehicle(playerid);
						if ( MyNearCar )
						{
							new Float:VelocityVehicle[3];
							GetVehicleVelocity(MyNearCar, VelocityVehicle[0], VelocityVehicle[1], VelocityVehicle[2]);
							if ((VelocityVehicle[0] + VelocityVehicle[1] + VelocityVehicle[2]) == 0.0)
							{
								if ( !DataCars[MyNearCar][Lock] ||
					    			strlen(DataCars[MyNearCar][Dueno]) == 1 && MyNearCar <= MAX_CAR_DUENO )
								{
								    if ( DataCars[MyNearCar][CapoState] )
								    {
								    	DataCars[MyNearCar][CapoState] = false;
							    	}
							    	else
							    	{
								    	DataCars[MyNearCar][CapoState] = true;
									}
									IsVehicleOff(MyNearCar);
								}
								else
								{
									SendInfoMessage(playerid, 0, "1015", "Éste vehículo se encuentra cerrado!");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "1008", "No puedes abrir el capó de un vehículo en movimiento");
							}
						}
					}
					// /Estado Alarma
					else if (strcmp("/Estado Alarma", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
					{
						LockAlarma(playerid);
					}
				    // COMANDO: /Estado Taxí
				  	else if (strcmp("/Estado Taxí", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12 ||
					  		 strcmp("/Estado Taxi", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12 )
			    	{
						if ( PlayersData[playerid][Faccion] == TAXI )
					    {
							new MyNearCar = IsPlayerInNearVehicle(playerid);
							if ( MyNearCar )
							{
								new TaxiID = IsVehicleTaxi(MyNearCar);
							    if ( TaxiID != -1 )
							    {
							        new MsgEstadoTaxi[MAX_TEXT_CHAT];
									if ( TaxisTaximetro[TaxiID][TaxiOn] )
									{
									    TaxisTaximetro[TaxiID][TaxiOn] = false;
									    format(MsgEstadoTaxi, sizeof(MsgEstadoTaxi), "desactiva el taxímetro del taxí");
				   					}
				   					else
				   					{
									    TaxisTaximetro[TaxiID][TaxiOn] = true;
									    format(MsgEstadoTaxi, sizeof(MsgEstadoTaxi), "activa el taxímetro del taxí");
									    
									    for ( new i = 0; i < MAX_PLAYERS; i++)
									    {
									        if ( IsPlayerConnected(i) &&
												 PlayersDataOnline[i][State] == 3 &&
											     IsPlayerInAnyVehicle(i) &&
												 CheckValidPlayerToTaxi(i, TaxiID) )
									        {
									            SetPlayerTaxi(i, TaxiID, GetPlayerVehicleSeat(i));
											}
										}
									}
								    Acciones(playerid, 8, MsgEstadoTaxi);
								}
								else
								{
									SendInfoMessage(playerid, 0, "975", "Éste vehículo no es un taxí!");
								}
							}
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "976", "Usted no es Taxísta!!");
						}
			    	}
				    // COMANDO: /Estado OOC
				  	else if (strcmp("/Estado OOC", cmdtext, true, 11) == 0 && strlen(cmdtext) == 11)
			    	{
						if ( PlayersDataOnline[playerid][StateChannelOOC] )
						{
	      					SendInfoMessage(playerid, 2, "0", "Has cerrado el canal OOC personal.");
	      					PlayersDataOnline[playerid][StateChannelOOC] = false;
	   					}
	   					else
	   					{
	      					SendInfoMessage(playerid, 2, "0", "Has abierto el canal OOC personal.");
	                        PlayersDataOnline[playerid][StateChannelOOC] = true;
						}
			    	}
					// COMANDO: /Estado Trabajo
				  	else if (strcmp("/Estado Trabajo", cmdtext, true, 15) == 0 && strlen(cmdtext) == 15)
			    	{
			    	    if ( PlayersData[playerid][Faccion] == TAXI ||
							 PlayersData[playerid][Faccion] == SFMD ||
							 PlayersData[playerid][Faccion] == LSMD )
			    	    {
							new MsgServicio[MAX_TEXT_CHAT];
							if ( PlayersDataOnline[playerid][StateJob] )
							{
								if ( PlayersData[playerid][Faccion] == TAXI )
								{
								    if ( PlayersData[playerid][Rango] == 4 )
								    {
										format(MsgServicio, sizeof(MsgServicio), "** El conductor de Autobús %s está fuera de servicio.", PlayersDataOnline[playerid][NameOnlineFix]);
									}
									else if ( PlayersData[playerid][Rango] == 5 )
									{
										format(MsgServicio, sizeof(MsgServicio), "** El conductor de Tren %s está fuera de servicio.", PlayersDataOnline[playerid][NameOnlineFix]);
									}
									else
									{
										format(MsgServicio, sizeof(MsgServicio), "** El taxísta %s está fuera de servicio.", PlayersDataOnline[playerid][NameOnlineFix]);
									}
								}
								else
								{
								    if ( PlayersData[playerid][Rango] == 5 || PlayersData[playerid][Rango] == 2)
								    {
										format(MsgServicio, sizeof(MsgServicio), "** El bombero %s está fuera de servicio.", PlayersDataOnline[playerid][NameOnlineFix]);
									}
									else
									{
										format(MsgServicio, sizeof(MsgServicio), "** El médico %s está fuera de servicio.", PlayersDataOnline[playerid][NameOnlineFix]);
									}
								}

		      					SendInfoMessage(playerid, 2, "0", "Ya no estás de servicio.");
		      					PlayersDataOnline[playerid][StateJob] = false;
		   					}
		   					else
		   					{
								if ( PlayersData[playerid][Faccion] == TAXI )
								{
								    if ( PlayersData[playerid][Rango] == 4 )
								    {
										format(MsgServicio, sizeof(MsgServicio), "** El conductor de Autobús %s está de servicio. Llamar al 145.", PlayersDataOnline[playerid][NameOnlineFix]);
									}
									else if ( PlayersData[playerid][Rango] == 5 )
									{
										format(MsgServicio, sizeof(MsgServicio), "** El conductor de Tren %s está de servicio.", PlayersDataOnline[playerid][NameOnlineFix]);
									}
									else
									{
										format(MsgServicio, sizeof(MsgServicio), "** El taxísta %s está de servicio. Llamar al 145.", PlayersDataOnline[playerid][NameOnlineFix]);
									}
								}
								else
								{
								    if ( PlayersData[playerid][Rango] == 5 || PlayersData[playerid][Rango] == 2)
								    {
								        if ( PlayersData[playerid][Faccion] == LSMD )
								        {
											format(MsgServicio, sizeof(MsgServicio), "** El bombero %s está de servicio. Llamar al 106.", PlayersDataOnline[playerid][NameOnlineFix]);
										}
										else
										{
											format(MsgServicio, sizeof(MsgServicio), "** El bombero %s está de servicio. Llamar al 105.", PlayersDataOnline[playerid][NameOnlineFix]);
										}
									}
									else
									{
									    if ( PlayersData[playerid][Faccion] == LSMD )
									    {
											format(MsgServicio, sizeof(MsgServicio), "** El médico %s está de servicio. Llamar al 106.", PlayersDataOnline[playerid][NameOnlineFix]);
										}
										else
										{
											format(MsgServicio, sizeof(MsgServicio), "** El médico %s está de servicio. Llamar al 105.", PlayersDataOnline[playerid][NameOnlineFix]);
										}
									}
								}

		      					SendInfoMessage(playerid, 2, "0", "Ahora estás de servicio.");
		                        PlayersDataOnline[playerid][StateJob] = true;
							}
							SendClientMessageToAll(0x0FFF00FF, MsgServicio);
						}
						else
						{
							SendInfoMessage(playerid, 0, "877", "No eres Taxísta, LSMD ni SFMD!");
						}
			    	}
				    // COMANDO: /Estado Family
				  	else if (strcmp("/Estado Family", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
			    	{
						if ( PlayersDataOnline[playerid][StateChannelFamily] )
						{
	      					SendInfoMessage(playerid, 2, "0", "Has cerrado el canal Family personal.");
	      					PlayersDataOnline[playerid][StateChannelFamily] = false;
	   					}
	   					else
	   					{
	      					SendInfoMessage(playerid, 2, "0", "Has abierto el canal Family personal.");
	                        PlayersDataOnline[playerid][StateChannelFamily] = true;
						}
			    	}
				    // COMANDO: /Estado Rg
				  	else if (strcmp("/Estado Rg", cmdtext, true, 10) == 0 && strlen(cmdtext) == 10)
			    	{
						if ( PlayersData[playerid][Faccion] == SFPD ||
							 PlayersData[playerid][Faccion] == LSPD ||
							 PlayersData[playerid][Faccion] == SFMD ||
							 PlayersData[playerid][Faccion] == LSMD  )
					    {
							if ( PlayersDataOnline[playerid][StateChannelFamily] )
							{
							    Acciones(playerid, 8, "apaga su radio general");
		      					SendInfoMessage(playerid, 2, "0", "Has apagado la Radio General.");
		      					PlayersDataOnline[playerid][StateChannelFamily] = false;
		   					}
		   					else
		   					{
							    Acciones(playerid, 8, "enciende su radio general");
		      					SendInfoMessage(playerid, 2, "0", "Has encendido la Radio General.");
		                        PlayersDataOnline[playerid][StateChannelFamily] = true;
							}
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "1504", "Usted no es LSPD ni SFPD!");
						}
			    	}
				    // COMANDO: /Estado Radio
				  	else if (strcmp("/Estado Radio", cmdtext, true, 13) == 0 && strlen(cmdtext) == 13)
			    	{
						if ( FaccionData[PlayersData[playerid][Faccion]][Radio] )
						{
							if ( PlayersDataOnline[playerid][StateChannelRadio] )
							{
							    Acciones(playerid, 8, "apaga su radio");
		      					SendInfoMessage(playerid, 2, "0", "Has cerrado el canal Radio personal.");
		      					PlayersDataOnline[playerid][StateChannelRadio] = false;
		   					}
		   					else
		   					{
							    Acciones(playerid, 8, "enciende su radio");
		      					SendInfoMessage(playerid, 2, "0", "Has abierto el canal Radio personal.");
		                        PlayersDataOnline[playerid][StateChannelRadio] = true;
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1530", "Su facción no tiene radio.");
						}
			    	}
				    // COMANDO: /Estado CNN
				  	else if (strcmp("/Estado CNN", cmdtext, true, 11) == 0 && strlen(cmdtext) == 11)
			    	{
						if ( PlayersDataOnline[playerid][StateChannelCNN] )
						{
	      					SendInfoMessage(playerid, 2, "0", "Has cerrado el canal CNN personal.");
	      					PlayersDataOnline[playerid][StateChannelCNN] = false;
	   					}
	   					else
	   					{
	      					SendInfoMessage(playerid, 2, "0", "Has abierto el canal CNN personal.");
	                        PlayersDataOnline[playerid][StateChannelCNN] = true;
						}
			    	}
					// COMANDO: 15 * /Estado Dudas              		- Cerrar y Abrir el canal /Duda
				  	else if (strcmp("/Estado Dudas", cmdtext, true, 13) == 0 && strlen(cmdtext) == 13)
			    	{
						MsgAdminUseCommands(9, playerid, cmdtext);
						if (PlayersData[playerid][Admin] >= 5)
						{
							new MensajeCanalTodosCerradoAbierto[50];
							new MensajeATodos[70];

							if ( !CanalDudas )
							{
							    CanalDudas = true;
						        format(MensajeCanalTodosCerradoAbierto, sizeof(MensajeCanalTodosCerradoAbierto), "%s Has abierto el canal /Duda.", LOGO_STAFF);
								format(MensajeATodos, sizeof(MensajeATodos), "%s El canal /Duda ha sido abierto.", LOGO_STAFF);
				 			}
				 			else if  ( CanalDudas  )
				 			{
								CanalDudas = false;
						        format(MensajeCanalTodosCerradoAbierto, sizeof(MensajeCanalTodosCerradoAbierto), "%s Has cerrado el canal /Duda.", LOGO_STAFF);
								format(MensajeATodos, sizeof(MensajeATodos), "%s El canal /Duda ha sido cerrado.", LOGO_STAFF);
				 			}

					        SendClientMessageToAll(COLOR_MENSAJES_DE_AVISOS, MensajeATodos);
					        SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, MensajeCanalTodosCerradoAbierto);
							return 1;
						}
						else
						{
							SendInfoMessage(playerid, 0, "1485", "Tú no tienes acceso a el comando /Estado Dudas.");
					        return 1;
						}
					}
					// COMANDO: 15 * /Estado Todos                		- Cerrar y Abrir el canal /O (OOC)
					else if (strcmp(cmdtext, "/Estado Todos", true, 13) == 0 && strlen(cmdtext) == 13 )
					{
						MsgAdminUseCommands(9, playerid, cmdtext);
						if (PlayersData[playerid][Admin] >= 1)
						{
							Comandos_Admin(15, playerid, 0, PlayersData[playerid][Admin], 0, "0");
							return 1;
						}
						else
						{
							SendInfoMessage(playerid, 0, "124", "Tú no tienes acceso a el comando /Estado Todos.");
					        return 1;
						}
					}
					// COMANDO: 15 * /Estado Móvil                		- Apagar y Encender el móvil
					else if (strcmp(cmdtext, "/Estado Móvil", true, 13) == 0 && strlen(cmdtext) == 13 ||
			 				 strcmp(cmdtext, "/Estado Movil", true, 13) == 0 && strlen(cmdtext) == 13)
					{
						if ( PlayersDataOnline[playerid][PhoneOnline] )
						{
						    if ( PlayersDataOnline[playerid][InCall] == -1 )
						    {
								Acciones(playerid, 8, "apaga su móvil");
		      					PlayersDataOnline[playerid][PhoneOnline] = false;
	      					}
	      					else
	      					{
								SendInfoMessage(playerid, 0, "1521", "Finalize la llamada antes de apagar el móvil.");
							}
	   					}
	   					else
	   					{
							Acciones(playerid, 8, "enciende su móvil");
	                        PlayersDataOnline[playerid][PhoneOnline] = true;
						}
					}
			    	else
					{
						SendInfoMessage(playerid, 0, "125", "Quizás quiso decir: /Estado {OOC, Family, Radio, Móvil, Trabajo, Alarma, Capó, Rg}");
						SendInfoMessage(playerid, 0, "125", "Quizás quiso decir: /Estado");
					}
				}
				// COMANDO: /GOB [Noticia]
	  			else if (strfind(cmdtext, "/GOB ", true) == 0)
			    {
					if ( PlayersData[playerid][Faccion] == SFPD && PlayersData[playerid][Rango] == 0   	  ||
						 PlayersData[playerid][Faccion] == LSPD && PlayersData[playerid][Rango] == 0      ||
						 PlayersData[playerid][Faccion] == GOBIERNO && PlayersData[playerid][Rango] <= 1  )
				    {
						new MsgGob[MAX_TEXT_CHAT];
						format(MsgGob, sizeof(MsgGob), "* %s %s: %s", FaccionesRangos[PlayersData[playerid][Faccion]][PlayersData[playerid][Rango]], PlayersDataOnline[playerid][NameOnlineFix], cmdtext[4]);
						SendClientMessageToAll(0xF0F0F0FF, "|_______________NOTICIAS DEL GOBIERNO_______________|");
						SendClientMessageToAll(0x005FFFFF, MsgGob);
				    }
				    else
				    {
						SendInfoMessage(playerid, 0, "441", "Usted no puede anunciar noticias del gobierno.");
					}
			    }
				// COMANDO: /O [Texto]
	  			else if (strfind(cmdtext, "/O ", true) == 0)
			    {
					MsgAdminUseCommands(9, playerid, cmdtext);
				    if ( CanalOOC || PlayersData[playerid][Admin] >= 1 )
				    {
						if ( PlayersDataOnline[playerid][StateChannelOOC] )
						{
					        if ( strlen(cmdtext) > 3 )
					        {
						        new MsgOOC[MAX_TEXT_CHAT];
						        strmid(MsgOOC, cmdtext, 3, strlen(cmdtext), sizeof(MsgOOC));
						        format(MsgOOC, sizeof(MsgOOC), "[OOC][%i] %s: %s",playerid, PlayersDataOnline[playerid][NameOnline], MsgOOC);

						        for(new i=0;i<MAX_PLAYERS;i++)
						        {
						            if (IsPlayerConnected(i)&&PlayersDataOnline[i][StateChannelOOC]&& PlayersDataOnline[i][State] == 3)
							        SendClientMessage(i, COLOR_OOC_CHANNEL, MsgOOC);
								}
								print(MsgOOC);
					        }
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "126", "Tú tienes cerrado el canal OOC general, abrelo con /Estado OOC y luego usa /O");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "127", "El canal /O se encuentra cerrado.");
					}
				}
				// COMANDO: /B [OOC]
	  			else if (strfind(cmdtext, "/B ", true) == 0)
			    {
			        if ( strlen(cmdtext) > 3 )
			        {
					    new TextOOC[MAX_TEXT_CHAT];
					    new Float:PosOOC[3]; GetPlayerPos(playerid, PosOOC[0], PosOOC[1], PosOOC[2]);
		    			format(TextOOC, sizeof(TextOOC), "[OOC] %s: (( %s ))", PlayersDataOnline[playerid][NameOnlineFix], cmdtext[3]);
	                    SendChatStreamAnonymous(TextOOC, GetPlayerVirtualWorld(playerid), PosOOC[0], PosOOC[1], PosOOC[2]);
			        }
			        else
			        {
						SendInfoMessage(playerid, 0, "128", "Tienes que poner algún texto para /B [OOC].");
			        }
			    }
				// COMANDO: /Meg [Hablar]
	  			else if (strfind(cmdtext, "/Meg ", true) == 0)
			    {
					if ( PlayersData[playerid][Faccion] == SFPD ||
						 PlayersData[playerid][Faccion] == LSPD )
				    {
				        if ( strlen(cmdtext) > 5 )
				        {
			        	    new TextMegafono[MAX_TEXT_CHAT];
						    strmid(TextMegafono, cmdtext, 5, sizeof(TextMegafono), sizeof(TextMegafono));
		                    Acciones(playerid, 9, TextMegafono);
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "883", "Tienes que poner algún texto para el megáfono.");
				        }
			        }
			        else
			        {
						SendInfoMessage(playerid, 0, "884", "Usted no es LSPD ni SFPD!");
					}
			    }
				// COMANDO: /Me [Acción]
	  			else if (strfind(cmdtext, "/Me ", true) == 0)
			    {
			        if ( strlen(cmdtext) > 4 )
			        {
					    new TextAccion[MAX_TEXT_CHAT];
					    strmid(TextAccion, cmdtext, 4, sizeof(TextAccion), sizeof(TextAccion));
	                    Acciones(playerid, 0, TextAccion);
			        }
			        else
			        {
						SendInfoMessage(playerid, 0, "129", "Tienes que poner algún texto de acción para /Me [Acción].");
			        }
			    }
				// COMANDO: /Intentar [Acción]
	  			else if (strfind(cmdtext, "/Intentar ", true) == 0)
			    {
					if ( strlen(cmdtext) > 10 )
					{
						IntentarAccion(playerid, cmdtext[10], random(2));
				    }
				    else
				    {
						SendInfoMessage(playerid, 0, "131", "Tienes que poner algún texto de acción para /Intentar [Acción].");
				    }
			    }
			    // COMANDO: /Ame [Efecto]
	  			else if (strfind(cmdtext, "/Ame ", true) == 0)
			    {
			        if ( strlen(cmdtext) > 4 )
			        {
					    new TextAccion[MAX_TEXT_CHAT];
					    strmid(TextAccion, cmdtext, 4, sizeof(TextAccion), sizeof(TextAccion));

	                    Acciones(playerid, 1, TextAccion);
			        }
			        else
			        {
						SendInfoMessage(playerid, 0, "132", "Tiene que poner algún texto de efecto para /Ame [Efecto].");
			        }
			    }
			    // COMANDO: /G [Gritar]
	  			else if (strfind(cmdtext, "/G ", true) == 0)
			    {
			        if ( strlen(cmdtext) > 3 )
			        {
                        SendChatStreamGritar(playerid, cmdtext[3]);
			        }
			        else
			        {
						SendInfoMessage(playerid, 0, "133", "Tiene que poner algún texto a gritar.");
			        }
			    }
			    // COMANDO: /S [Susurrar]
	  			else if (strfind(cmdtext, "/s ", true) == 0)
			    {
			        if ( strlen(cmdtext) > 3 )
			        {
					    new TextAccion[150];
					    strmid(TextAccion, cmdtext, 3, sizeof(TextAccion), sizeof(TextAccion));
	                    Acciones(playerid, 5, TextAccion);

						ApplyPlayerAnimCustom(playerid,
						ModeTalkLibraryAnim[PlayersData[playerid][MyStyleTalk]],
						ModeTalkNameAnim[PlayersData[playerid][MyStyleTalk]], true);
			        }
			        else
			        {
						SendInfoMessage(playerid, 0, "134", "Tiene que poner algún texto a susurrar.");
			        }
			    }
			    // COMANDO: /Warn [ID] [Razón]
	  			else if (strfind(cmdtext, "/Warn ", true) == 0)
			    {
					MsgAdminUseCommands(9, playerid, cmdtext);
			        new playeridto	= strval(cmdtext[GetPosSpace(cmdtext, 1)]);
					if ( PlayersData[playerid][Admin] >= 2 )
					{
						if (playeridto != playerid)
						{
							if (IsPlayerConnected(playeridto) )
							{
								PlayersData[playeridto][Warn]++;
								new MsgToAdmin[MAX_TEXT_CHAT];
								new MsgToUser[MAX_TEXT_CHAT];
								format(MsgToAdmin, sizeof(MsgToAdmin), "%s Han dado un Warn a %s por %s. Razón: %s", LOGO_STAFF, PlayersDataOnline[playeridto][NameOnline], PlayersDataOnline[playerid][NameOnline], cmdtext[GetPosSpace(cmdtext, 2)]);
								format(MsgToUser, sizeof(MsgToUser), "%s Has dado un warn a %s, ya ese usuario tiene %i warns",LOGO_STAFF, PlayersDataOnline[playeridto][NameOnline], PlayersData[playeridto][Warn]);
								MsgKBJWReportsToAdmins(playeridto, MsgToAdmin);
								SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, MsgToUser);
							}
							else
							{
								SendInfoMessage(playerid, 0, "549", "El jugador que desea darle un Warn, no se encuentra conectado");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "550", "La ID que has introducído es la suya");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "551", "No tienes acceso al comando /Warn [ID]");
					}
	  			}
				// COMANDO: /W [ID] [DUDA]
		  		else if (strfind(cmdtext, "/W", true) == 0)
			    {
		  			if (strfind(cmdtext, "/W ", true) == 0)
				    {
				        new PlayerIDDuda = strvalEx(cmdtext[GetPosSpace(cmdtext, 1)]);
		    		    if ( IsPlayerConnected(PlayerIDDuda) )
					    {
							MsgAdminUseCommands(9, playerid, cmdtext);
					        if ( PlayersData[PlayerIDDuda][Admin] >= 1 || PlayersData[playerid][Admin] >= 1 )
					        {
					            if ( PlayersDataOnline[PlayerIDDuda][Wispers] && PlayersDataOnline[PlayerIDDuda][State] == 3 )
					            {
						            new MensajeME[256];
						            new Mensaje[256];
						            format(MensajeME, sizeof(MensajeME), "%s Whispeaste a %s[%i]: %s",LOGO_STAFF, PlayersDataOnline[PlayerIDDuda][NameOnline], PlayerIDDuda, cmdtext[GetPosSpace(cmdtext, 2)]);
						            format(Mensaje, sizeof(Mensaje), "%s %s[%i] te whispea: %s", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline], playerid, cmdtext[GetPosSpace(cmdtext, 2)]);

									SendClientMessage(PlayerIDDuda, COLOR_DE_WISPEO, Mensaje);
									SendClientMessage(playerid, COLOR_DE_WISPEO, MensajeME);
									print(Mensaje);
									return 1;
								}
								else
								{
									SendInfoMessage(playerid, 0, "135", "El admin que le desea whispear tiene los whispers cerrados.");
									return 1;
								}
					        }
					        else
					        {
								SendInfoMessage(playerid, 0, "136", "Solo se puede whispear a admnistradores.");
								return 1;
							}
					    }
					    else
					    {
							SendInfoMessage(playerid, 0, "137", "El administrador que quiere whispear no se encuentra conectado.");
							return 1;
					    }
					}
					else
					{
						SendInfoMessage(playerid, 0, "138", "Recuerde al utilizar el comando /W [ID] [Duda] dejar un [ESPACIO]. Ejemplo: /W 22 Hola, me encuentro bugueado, me podrias ayudar?");
						return 1;
					}
				}
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////		    ADMINISTRACIÓN COMMANDS		    ////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
				// COMANDO: /FacciónEx [Nombre_Apellido] [ID_Faccion] [Rango]
	  			else if (strfind(cmdtext, "/FacciónEx ", true) == 0 ||
					  	 strfind(cmdtext, "/FaccionEx ", true) == 0)
			    {
					SetPlayerFaccionEx(playerid, cmdtext);
				}
				// COMANDO: /Facción [ID] [ID_Faccion] [Rango]
	  			else if (strfind(cmdtext, "/Facción ", true) == 0 ||
					  	 strfind(cmdtext, "/Faccion ", true) == 0)
			    {
					SetPlayerFaccion(playerid, cmdtext);
				}
			    // /Tele
				else if (strfind(cmdtext, "/Tele ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 6 )
					{
					    new InteriorID = strval(cmdtext[GetPosSpace(cmdtext, 1)]);
					    if ( InteriorID >= 0 && InteriorID <= 19 )
					    {
						    new Float:X = floatstr(cmdtext[GetPosSpace(cmdtext, 2)]);
						    new Float:Y = floatstr(cmdtext[GetPosSpace(cmdtext, 3)]);
						    new Float:Z = floatstr(cmdtext[GetPosSpace(cmdtext, 4)]);
						    SetPlayerInteriorEx(playerid, InteriorID);
						    SetPlayerPos(playerid, X, Y, Z);
						    new MsgPos[MAX_TEXT_CHAT];
						    format(MsgPos, sizeof(MsgPos), "%s Has ido a la posición %f - %f - %f con interior [%i]", LOGO_STAFF, X, Y, Z, InteriorID);
							SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, MsgPos);
							ChangeHouseOrOther(playerid, 0);
						}
						else
						{
							SendInfoMessage(playerid, 0, "1119", "El número del interior tiene que ser mayor de 0 y menor de 19");
						}
			    	}
					else
					{
						SendInfoMessage(playerid, 0, "1118", "No tienes acceso al comando /Tele");
					}
				}
			    // //SpawnDM [Equipo]
				else if (strfind(cmdtext, "/SpawnDM ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 7 )
					{
					    new TeamPos = strval(cmdtext[GetPosSpace(cmdtext, 1)]);
					    if ( TeamPos >= 1 && TeamPos <= 2 )
					    {
					        TeamPos--;
							GetPlayerPos(playerid, PosDM[TeamPos][0], PosDM[TeamPos][1], PosDM[TeamPos][2]);
							GetPlayerFacingAngle(playerid, PosDM[TeamPos][3]);
							InteriorDM[TeamPos] = GetPlayerInteriorEx(playerid);
							WorldDM[TeamPos] = GetPlayerVirtualWorld(playerid);
						    new MsgSpawnDM[MAX_TEXT_CHAT];
						    format(MsgSpawnDM, sizeof(MsgSpawnDM), "%s Este será el nuevo Spawn para el Modo DM para el equipo número: %i", LOGO_STAFF, TeamPos + 1);
							SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, MsgSpawnDM);
						}
						else
						{
							SendInfoMessage(playerid, 0, "1342", "El número de equipo tiene que estár comprendido entre 1 y 2");
						}
			    	}
					else
					{
						SendInfoMessage(playerid, 0, "1120", "No tienes acceso al comando /SpawnDM");
					}
				}
			    // //SkinDM [Equipo]
				else if (strfind(cmdtext, "/SkinDM ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 7 )
					{
					    new TeamSkin = strval(cmdtext[GetPosSpace(cmdtext, 1)]);
					    new SkinDMS = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
					    if ( TeamSkin >= 1 && TeamSkin <= 2 )
					    {
						    if ( SkinDMS >= 0 && SkinDMS <= 299 )
						    {
						        TeamSkin--;
								SkinDM[TeamSkin] = SkinDMS;
							    new MsgSkinDM[MAX_TEXT_CHAT];
							    if ( SkinDMS )
							    {
								    format(MsgSkinDM, sizeof(MsgSkinDM), "%s El nuevo skin para el equipo %i será el número: %i", LOGO_STAFF, TeamSkin + 1, SkinDMS);
								}
								else
								{
								    format(MsgSkinDM, sizeof(MsgSkinDM), "%s Has deshabilitado los skines de DM para el equipo %i", LOGO_STAFF, TeamSkin + 1);
								}
								SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, MsgSkinDM);
							}
							else
							{
								SendInfoMessage(playerid, 0, "1343", "El número de Skin tiene que estár comprendido entre 0 y 299 (Donde 0 = Deshabilitado)");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1344", "El número de equipo tiene que estár comprendido entre 1 y 2");
						}
			    	}
					else
					{
						SendInfoMessage(playerid, 0, "1120", "No tienes acceso al comando /SkinDM");
					}
				}
			    // //Reiniciar
			  	else if (strcmp("/Reiniciar", cmdtext, true, 10) == 0 && strlen(cmdtext) == 10)
	  			{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 8 )
					{
					    ShowPlayerDialogEx(playerid, 65, DIALOG_STYLE_INPUT, "{00A5FF}Reiniciar servidor", "{F50000}IMPORTANTE: {E6E6E6}¿Desea reiniciar el servidor?\n\nPorfavor especifique una razón del reinicio", "Reiniciar", "Cancelar");
			    	}
					else
					{
						SendInfoMessage(playerid, 0, "1132", "No tienes acceso al comando /Reiniciar");
					}
	  			}
			    // //Reiniciar
			  	else if (strcmp("/Cerrar Servidor", cmdtext, true, 16) == 0 && strlen(cmdtext) == 16)
	  			{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 8 )
					{
					    ShowPlayerDialogEx(playerid, 138, DIALOG_STYLE_INPUT, "{00A5FF}Cerrar servidor", "{F50000}IMPORTANTE: {E6E6E6}¿Desea cerrar el servidor?\n\nPorfavor especifique una razón por la cuál cerrará el servidor", "Cerrar", "Cancelar");
			    	}
					else
					{
						SendInfoMessage(playerid, 0, "1505", "No tienes acceso al comando /Cerrar Servidor");
					}
	  			}
			    // //DmArmas
			  	else if (strcmp("/DmArmas", cmdtext, true, 8) == 0 && strlen(cmdtext) == 8)
	  			{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 7 )
					{
						ShowMenuDMWeapon(playerid);
			    	}
					else
					{
						SendInfoMessage(playerid, 0, "1148", "No tienes acceso al comando /DmArmas");
					}
				}

			    // /Dm Equipo
			  	else if (strcmp("/DM Equipo", cmdtext, true, 10) == 0 && strlen(cmdtext) == 10)
	  			{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 7 )
					{
					    new MsgDMToAll[MAX_TEXT_CHAT];
					    if ( IsDMTeam )
					    {
					    	format(MsgDMToAll, sizeof(MsgDMToAll), "%s Ahora el DM ya NO será en equipo", LOGO_STAFF);
                            IsDMTeam = false;
				    	}
				    	else
				    	{
					    	format(MsgDMToAll, sizeof(MsgDMToAll), "%s Ahora el DM será en equipo", LOGO_STAFF);
                            IsDMTeam = true;
						}
						SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, MsgDMToAll);
			    	}
					else
					{
						SendInfoMessage(playerid, 0, "1346", "No tienes acceso al comando /Dm Equipo");
					}
				}
			    // //DM Off
			  	else if (strcmp("/DM Off", cmdtext, true, 7) == 0 && strlen(cmdtext) == 7)
	  			{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 7 )
					{
					    new MsgDMToAll[MAX_TEXT_CHAT];
					    format(MsgDMToAll, sizeof(MsgDMToAll), "%s Ahora ya no estás en Modo DeathMatch", LOGO_STAFF);
						for (new i = 0; i < MAX_PLAYERS; i++)
						{
						    if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersDataOnline[i][ModeDM])
						    {
						        RemovePlayerToDM(i);
								SendClientMessage(i, COLOR_MENSAJES_DE_AVISOS, MsgDMToAll);
						    }
					    }
					    format(MsgDMToAll, sizeof(MsgDMToAll), "%s Has sacado a todos los jugadores del Modo DeathMatch", LOGO_STAFF);
						SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, MsgDMToAll);
			    	}
					else
					{
						SendInfoMessage(playerid, 0, "1116", "No tienes acceso al comando /DM Off");
					}
				}
			    // /Race [ID]
				else if (strfind(cmdtext, "/Race ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 6 )
					{
					    new playeridRace = strval(cmdtext[GetPosSpace(cmdtext, 1)]);
						if (IsPlayerConnected(playeridRace) )
						{
						    new MsgRaceMe[MAX_TEXT_CHAT];
							if ( PlayersDataOnline[playeridRace][ModeRace] )
							{
							    if ( playeridRace != playerid )
							    {
								    format(MsgRaceMe, sizeof(MsgRaceMe), "%s %s te ha quitado el Modo Race", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline]);
    								SendClientMessage(playeridRace, COLOR_MENSAJES_DE_AVISOS, MsgRaceMe);
								    format(MsgRaceMe, sizeof(MsgRaceMe), "%s Has quitado el Modo Race a %s", LOGO_STAFF, PlayersDataOnline[playeridRace][NameOnline]);
   								}
   								else
   								{
								    format(MsgRaceMe, sizeof(MsgRaceMe), "%s Te has quitado el modo Race", LOGO_STAFF, PlayersDataOnline[playeridRace][NameOnline]);
								}
						    	PlayersDataOnline[playeridRace][ModeRace] = false;
							}
							else
							{
							    if ( playeridRace != playerid )
							    {
								    format(MsgRaceMe, sizeof(MsgRaceMe), "%s %s te ha puesto el Modo Race", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline]);
    								SendClientMessage(playeridRace, COLOR_MENSAJES_DE_AVISOS, MsgRaceMe);
								    format(MsgRaceMe, sizeof(MsgRaceMe), "%s Has puesto en Modo Race a %s", LOGO_STAFF, PlayersDataOnline[playeridRace][NameOnline]);
   								}
   								else
   								{
								    format(MsgRaceMe, sizeof(MsgRaceMe), "%s Te has puesto en Modo Race", LOGO_STAFF, PlayersDataOnline[playeridRace][NameOnline]);
								}
						    	PlayersDataOnline[playeridRace][ModeRace] = true;
							}
							SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, MsgRaceMe);
						}
						else
						{
							SendInfoMessage(playerid, 0, "1444", "El jugador que desea darle Modo Race no se encuentra conectado.");
						}
			    	}
					else
					{
						SendInfoMessage(playerid, 0, "1445", "No tienes acceso al comando /Race");
					}
				}
			    // /DM [ID] [Team]
				else if (strfind(cmdtext, "/DM ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 7 )
					{
					    new playeridDM = strval(cmdtext[GetPosSpace(cmdtext, 1)]);
						if (IsPlayerConnected(playeridDM) )
						{
						    new MsgDMMe[MAX_TEXT_CHAT];
						    if ( playeridDM!= playerid )
						    {
							    new MsgDMToPlayer[MAX_TEXT_CHAT];
								if ( PlayersDataOnline[playeridDM][ModeDM] )
								{
								    format(MsgDMMe, sizeof(MsgDMMe), "%s Ha quitado el modo DeathMatch a %s", LOGO_STAFF, PlayersDataOnline[playeridDM][NameOnline]);
								    format(MsgDMToPlayer, sizeof(MsgDMToPlayer), "%s %s te ha quitado el modo DeathMatch", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline]);
									RemovePlayerToDM(playeridDM);
								}
								else
								{
								    new TeamDMP = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
								    if ( TeamDMP >= 1 && TeamDMP <= 2 )
								    {
									    format(MsgDMMe, sizeof(MsgDMMe), "%s Has puesto en modo DeathMatch a %s en el equipo %i", LOGO_STAFF, PlayersDataOnline[playeridDM][NameOnline], TeamDMP);
									    format(MsgDMToPlayer, sizeof(MsgDMToPlayer), "%s %s te ha puesto el modo DeathMatch en el equipo %i", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline], TeamDMP);
								    	AddPlayerToDM(playeridDM, TeamDMP - 1);
									}
									else
									{
										SendInfoMessage(playerid, 0, "1340", "El número de equipo tiene que estár comprendido entre 1 y 2");
										return 1;
									}
								}
								SendClientMessage(playeridDM, COLOR_MENSAJES_DE_AVISOS, MsgDMToPlayer);
							}
							else
							{
								if ( PlayersDataOnline[playeridDM][ModeDM] )
								{
           							format(MsgDMMe, sizeof(MsgDMMe), "%s Has salido del modo DeathMatch", LOGO_STAFF);
   									RemovePlayerToDM(playeridDM);
								}
								else
								{
								    new TeamDMP = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
								    if ( TeamDMP >= 1 && TeamDMP <= 2 )
								    {
									    format(MsgDMMe, sizeof(MsgDMMe), "%s Ahora estás en modo DeathMatch en el equipo %i", LOGO_STAFF, TeamDMP);
   								    	AddPlayerToDM(playeridDM, TeamDMP - 1);
							    	}
									else
									{
										SendInfoMessage(playerid, 0, "1339", "El número de equipo tiene que estár comprendido entre 1 y 2");
										return 1;
									}
								}
							}
							SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, MsgDMMe);
						}
						else
						{
							SendInfoMessage(playerid, 0, "1115", "El jugador que desea darle Modo DeathMatch no se encuentra conectado.");
						}
			    	}
					else
					{
						SendInfoMessage(playerid, 0, "1114", "No tienes acceso al comando /DM");
					}
				}
			    // /ICoche
			  	else if (strcmp("/ICoche", cmdtext, true, 7) == 0 && strlen(cmdtext) == 7)
	  			{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 6 )
					{
						new MyNearCar = IsPlayerInNearVehicleEx(playerid);
		   				if ( MyNearCar)
					    {
							new MsgDatos[MAX_TEXT_CHAT];
			 				format(MsgDatos, sizeof(MsgDatos), "ID: %i || Vehículo: %s Modelo ID:(%i) Mundo Spawn: (%i) Interior Spawn: (%i)",MyNearCar, coches_Todos_Nombres[GetVehicleModel(MyNearCar) - 400], GetVehicleModel(MyNearCar), DataCars[MyNearCar][World], DataCars[MyNearCar][Interior]);
					    	SendInfoMessage(playerid, 1, MsgDatos, "Datos: ");
			 				format(MsgDatos, sizeof(MsgDatos), "Mundo Actual: (%i) | Interior Actual: (%i)", DataCars[MyNearCar][WorldLast], DataCars[MyNearCar][InteriorLast]);
					    	SendInfoMessage(playerid, 1, MsgDatos, "Datos: ");
		   				    if ( MyNearCar <= MAX_CAR_DUENO )
		   				    {
				 				format(MsgDatos, sizeof(MsgDatos), "Matrícula: %i ", DataCars[MyNearCar][Matricula]);
						    	SendInfoMessage(playerid, 1, MsgDatos, "Datos: ");
				 				format(MsgDatos, sizeof(MsgDatos), "Dueño: %s", DataCars[MyNearCar][Dueno]);
						    	SendInfoMessage(playerid, 1, MsgDatos, "Datos: ");
				 				format(MsgDatos, sizeof(MsgDatos), "Tiempo: %i", DataCars[MyNearCar][Time]);
						    	SendInfoMessage(playerid, 1, MsgDatos, "Datos: ");
							}
							else
							{
				 				format(MsgDatos, sizeof(MsgDatos), "ID: %i", MyNearCar);
						    	SendInfoMessage(playerid, 1, MsgDatos, "Datos: ");
				 				format(MsgDatos, sizeof(MsgDatos), "Dueño: %s", FaccionData[DataCars[MyNearCar][Time]][NameFaccion]);
						    	SendInfoMessage(playerid, 1, MsgDatos, "Datos: ");
							}
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "554", "No tienes acceso al comando /ICoche");
					}
			    }
				//////////--- /ICocheEx [ID]              - Saber la información de un vehículo por su ID
				else if (strfind(cmdtext, "/ICocheEx ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 6 )
					{
						new MyNearCar = strval(cmdtext[10]);
		   				if ( MyNearCar > 0 && MyNearCar <= MAX_CAR )
					    {
							new MsgDatos[MAX_TEXT_CHAT];
			 				format(MsgDatos, sizeof(MsgDatos), "ID: %i || Vehículo: %s Modelo ID:(%i) Mundo Spawn: (%i) Interior Spawn: (%i)",MyNearCar, coches_Todos_Nombres[GetVehicleModel(MyNearCar) - 400], GetVehicleModel(MyNearCar), DataCars[MyNearCar][World], DataCars[MyNearCar][Interior]);
					    	SendInfoMessage(playerid, 1, MsgDatos, "Datos: ");
			 				format(MsgDatos, sizeof(MsgDatos), "Mundo Actual: (%i) | Interior Actual: (%i)", DataCars[MyNearCar][WorldLast], DataCars[MyNearCar][InteriorLast]);
					    	SendInfoMessage(playerid, 1, MsgDatos, "Datos: ");
		   				    if ( MyNearCar <= MAX_CAR_DUENO )
		   				    {
				 				format(MsgDatos, sizeof(MsgDatos), "Matrícula: %i ", DataCars[MyNearCar][Matricula]);
						    	SendInfoMessage(playerid, 1, MsgDatos, "Datos: ");
				 				format(MsgDatos, sizeof(MsgDatos), "Dueño: %s", DataCars[MyNearCar][Dueno]);
						    	SendInfoMessage(playerid, 1, MsgDatos, "Datos: ");
				 				format(MsgDatos, sizeof(MsgDatos), "Tiempo: %i", DataCars[MyNearCar][Time]);
						    	SendInfoMessage(playerid, 1, MsgDatos, "Datos: ");
							}
							else
							{
				 				format(MsgDatos, sizeof(MsgDatos), "ID: %i", MyNearCar);
						    	SendInfoMessage(playerid, 1, MsgDatos, "Datos: ");
				 				format(MsgDatos, sizeof(MsgDatos), "Dueño: %s", FaccionData[DataCars[MyNearCar][Time]][NameFaccion]);
						    	SendInfoMessage(playerid, 1, MsgDatos, "Datos: ");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1164", "El vehículo que desea saber su información no existe.");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "554", "No tienes acceso al comando /ICoche");
					}
			    }
			    // /VCoche
			  	else if (strcmp("/VCoche", cmdtext, true, 7) == 0 && strlen(cmdtext) == 7)
	  			{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 8 )
					{
						new MyNearCar = IsPlayerInNearVehicleEx(playerid);
		   				if ( MyNearCar)
					    {
		   				    if ( MyNearCar <= MAX_CAR_DUENO )
		   				    {
				 				if ( strlen(DataCars[MyNearCar][Dueno]) != 1 )
								{
									new playerid_vender = RemoveDuenoOfVehicle(MyNearCar, 0);
									new MsgVentaCocheEx[MAX_TEXT_CHAT];
									format(MsgVentaCocheEx, sizeof(MsgVentaCocheEx), "Has vendido éste vehículo al estado, erá propiedad de %s", PlayersDataOnline[playerid_vender][NameOnline]);
									SendInfoMessage(playerid, 3, "0", MsgVentaCocheEx);
								}
								else
								{
									SendInfoMessage(playerid, 0, "552", "Éste vehículo no tiene dueño");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "547", "Éste vehículo no es de venta!");
							}
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "548", "No tienes acceso al comando /VCoche");
					}
	  			}
				//////////--- /CPos [ID]              - CAMBIAR LA POSICIóN DE UNA CASA
				else if (strfind(cmdtext, "/CPos ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 8 )
					{
					    new NewPosHouse = strval(cmdtext[6]);
				        if ( NewPosHouse > 0 && NewPosHouse <= MAX_HOUSE )
				        {
					        new Float:PlayerPosHouse[4];
					        GetPlayerPos(playerid, PlayerPosHouse[0], PlayerPosHouse[1], PlayerPosHouse[2]);
					        GetPlayerFacingAngle(playerid, PlayerPosHouse[3]);
						    HouseData[NewPosHouse][PosX]      = PlayerPosHouse[0];
						    HouseData[NewPosHouse][PosY]		= PlayerPosHouse[1];
						    HouseData[NewPosHouse][PosZ]		= PlayerPosHouse[2];
						    HouseData[NewPosHouse][PosZZ] 	= PlayerPosHouse[3];
						    HouseData[NewPosHouse][Interior]  = GetPlayerInteriorEx(playerid);
                            SaveHouse(NewPosHouse, true);

                            new MsgPersonalizado[250];
	                        format(MsgPersonalizado, sizeof(MsgPersonalizado), "%s Cambiaste la posición de la casa con ID[%i] a la: ( X: %f Y: %f Z: %f ZZ: %f ) con interior %i", LOGO_STAFF, NewPosHouse, PlayerPosHouse[0], PlayerPosHouse[1], PlayerPosHouse[2], PlayerPosHouse[3], GetPlayerInteriorEx(playerid));
			                SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, MsgPersonalizado);
							printf("%s", MsgPersonalizado);
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "1158", "El ID de casa introducido no existe!");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1159", "No tienes acceso al comando /CPos");
					}
				}
				//////////--- /NPos [ID]              - CAMBIAR LA POSICIóN DE UN NEGOCIO
				else if (strfind(cmdtext, "/NPos ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 8 )
					{
					    new NewPosBizz = strval(cmdtext[6]);
				        if ( NewPosBizz > 0 && NewPosBizz <= MAX_BIZZ )
				        {

					        new Float:PlayerPosBizz[4];
					        GetPlayerPos(playerid, PlayerPosBizz[0], PlayerPosBizz[1], PlayerPosBizz[2]);
					        GetPlayerFacingAngle(playerid, PlayerPosBizz[3]);

						    NegociosData[NewPosBizz][PosOutX]       = PlayerPosBizz[0];
						    NegociosData[NewPosBizz][PosOutY]		= PlayerPosBizz[1];
						    NegociosData[NewPosBizz][PosOutZ]		= PlayerPosBizz[2];
						    NegociosData[NewPosBizz][PosOutZZ] 		= PlayerPosBizz[3];
						    NegociosData[NewPosBizz][InteriorOut]   = GetPlayerInteriorEx(playerid);

                            DataSaveBizz(NewPosBizz, true);

                            new MsgPersonalizado[250];
	                        format(MsgPersonalizado, sizeof(MsgPersonalizado), "%s Cambiaste la posición del negocio ID[%i] a la: ( X: %f Y: %f Z: %f ZZ: %f ) con interior %i", LOGO_STAFF, NewPosBizz, PlayerPosBizz[0], PlayerPosBizz[1], PlayerPosBizz[2], PlayerPosBizz[3], GetPlayerInteriorEx(playerid));
			                SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, MsgPersonalizado);
							printf("%s", MsgPersonalizado);
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "1160", "El ID del negocio introducido no existe!");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1161", "No tienes acceso al comando /NPos");
					}
				}
				//////////--- /Nprecio [ID]              - CAMBIAR EL PRECIo DE UN NEGOCIO
				else if (strfind(cmdtext, "/Nprecio ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 8 )
					{
				        if ( PlayersDataOnline[playerid][InPickup] >= NegociosData[1][PickupOutId] &&
				             PlayersDataOnline[playerid][InPickup] <= NegociosData[MAX_BIZZ][PickupOutId] )
				        {
				            if ( strval(cmdtext[9]) >= 0 && strval(cmdtext[9]) <= 500000 )
				            {
		                        NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][Precio] = strval(cmdtext[9]);
		                        new MsgChangeType[MAX_TEXT_CHAT];
		                        format(MsgChangeType, sizeof(MsgChangeType), "Cambiaste el precio de este negocio a: $%i", strval(cmdtext[9]));
				                SendInfoMessage(playerid, 2, "0", MsgChangeType);

	                            DataSaveBizz(PlayersDataOnline[playerid][MyPickupWorld], true);
					        }
					        else
					        {
								SendInfoMessage(playerid, 0, "658", "El precio de negocio introducído tiene que estar entre 0 y 500000");
							}
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "659", "No te encuentras en ningún negocio");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "660", "No tienes acceso al comando /Nprecio");
					}
				}
				//////////--- /Nnivel [ID]              - CAMBIAR EL NIVEL DE UN NEGOCIO
				else if (strfind(cmdtext, "/Nnivel ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 7 )
					{
				        if ( PlayersDataOnline[playerid][InPickup] >= NegociosData[1][PickupOutId] &&
				             PlayersDataOnline[playerid][InPickup] <= NegociosData[MAX_BIZZ][PickupOutId] )
				        {
				            if ( strval(cmdtext[8]) >= 0 && strval(cmdtext[8]) <= 50 )
				            {
		                        NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][Level] = strval(cmdtext[8]);
		                        new MsgChangeType[MAX_TEXT_CHAT];
		                        format(MsgChangeType, sizeof(MsgChangeType), "Cambiaste el nivel de este negocio a: %i", strval(cmdtext[8]));
				                SendInfoMessage(playerid, 2, "0", MsgChangeType);

	                            DataSaveBizz(PlayersDataOnline[playerid][MyPickupWorld], true);
					        }
					        else
					        {
								SendInfoMessage(playerid, 0, "661", "El nivel de negocio introducído tiene que estar entre 0 y 50");
							}
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "662", "No te encuentras en ningún negocio");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "663", "No tienes acceso al comando /Nnivel");
					}
				}
				//////////--- /Ntipo [ID]              - CAMBIAR EL TIPO DE UN NEGOCIO
				else if (strfind(cmdtext, "/Ntipo ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 8 )
					{
				        if ( PlayersDataOnline[playerid][InPickup] >= NegociosData[1][PickupOutId] &&
				             PlayersDataOnline[playerid][InPickup] <= NegociosData[MAX_BIZZ][PickupOutId] )
				        {
				            if ( strval(cmdtext[7]) >= 0 && strval(cmdtext[7]) <= MAX_BIZZ_TYPE )
				            {
		                        NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][Type] = strval(cmdtext[7]);
		                        new MsgChangeType[MAX_TEXT_CHAT];
		                        format(MsgChangeType, sizeof(MsgChangeType), "Cambiaste el tipo de este negocio a tipo: %i", strval(cmdtext[7]));
				                SendInfoMessage(playerid, 2, "0", MsgChangeType);

	                            DataSaveBizz(PlayersDataOnline[playerid][MyPickupWorld], true);
					        }
					        else
					        {
								SendInfoMessage(playerid, 0, "664", "El tipo de negocio introducído no existe");
							}
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "665", "No te encuentras en ningún negocio");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "666", "No tienes acceso al comando /Ntipo");
					}
				}
				//////////--- /Cprecio [ID]              - CAMBIAR EL PRECIO DE UNA CASA
				else if (strfind(cmdtext, "/Cprecio ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 8 )
					{
				        if ( PlayersDataOnline[playerid][InPickup] >= HouseData[1][PickupId] &&
				             PlayersDataOnline[playerid][InPickup] <= HouseData[MAX_HOUSE][PickupId] )
				        {
				            if ( strval(cmdtext[9]) >= 0 && strval(cmdtext[9]) <= 1000000 )
				            {
		                        HouseData[PlayersDataOnline[playerid][MyPickupWorld]][Price] = strval(cmdtext[9]);
		                        new MsgChangeType[MAX_TEXT_CHAT];
		                        format(MsgChangeType, sizeof(MsgChangeType), "Cambiaste el precio de esta casa a: %i", strval(cmdtext[9]));
				                SendInfoMessage(playerid, 2, "0", MsgChangeType);

	                            SaveHouse(PlayersDataOnline[playerid][MyPickupWorld], true);
					        }
					        else
					        {
								SendInfoMessage(playerid, 0, "667", "El precio de la casa introducído tiene que estar entre 0 y 1000000");
							}
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "668", "No te encuentras en ninguna casa");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "669", "No tienes acceso al comando /Cprecio");
					}
				}
				//////////--- /Enfermar [ID] [ID]             - CAMBIAR EL PRECIO DE UNA CASA
				else if (strfind(cmdtext, "/Enfermar ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 7 )
					{
				        new PlayerIDEnfermar = strval(cmdtext[GetPosSpace(cmdtext, 1)]);
				        new EnfermedadID = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
				        if ( IsPlayerConnected(PlayerIDEnfermar) )
				        {
				            if ( EnfermedadID >= 0 && EnfermedadID <= 6 )
				            {
								new MsgEnfermedad[MAX_TEXT_CHAT];
								if ( PlayerIDEnfermar != playerid)
								{
									format(MsgEnfermedad, sizeof(MsgEnfermedad), "%s has puesto a %s [%i] la enfermedad \"%s\".",LOGO_STAFF, PlayersDataOnline[PlayerIDEnfermar][NameOnline], PlayerIDEnfermar, EnfermedadName[EnfermedadID]);
								}
								else
								{
									format(MsgEnfermedad, sizeof(MsgEnfermedad), "%s Te has enfermado con \"%s\" tú mismo.",LOGO_STAFF, EnfermedadName[EnfermedadID]);
								}
					            SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, MsgEnfermedad);
								ChangeEnfermedad(PlayerIDEnfermar, EnfermedadID);
					        }
					        else
					        {
								SendInfoMessage(playerid, 0, "1409", "El número de enfermedad tiene que estár comprendido entre 0 y 6");
							}
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "1410", "El jugador que deseas enfermar no se encuentra conectado");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1411", "No tienes acceso al comando /Enfermar");
					}
				}
				//////////--- /Nombre [ID] [Nombre_Apellido]             - CAMBIAR EL NOMBRE A UN JUGADOR
				else if (strfind(cmdtext, "/Nombre ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 7 )
					{
					    if ( strlen(cmdtext) >= 13 )
					    {
						    new NewName[MAX_PLAYER_NAME];
						    new LastName[MAX_PLAYER_NAME];
						    new playeridChange;
						    format(NewName, sizeof(NewName), "%s", cmdtext[GetPosSpace(cmdtext, 2) + 1]);
						    playeridChange = strval(cmdtext[GetPosSpace(cmdtext, 1)]);
						    format(LastName, sizeof(LastName), "%s", PlayersDataOnline[playeridChange][NameOnline]);

							if ( IsPlayerConnected(playeridChange) )
							{
							    if ( IsValidName(NewName) )
							    {
							    
									new query[100], Cache:cacheid, cuentaExiste;
									mysql_format(dataBase, query, 100, "SELECT * FROM `%s` WHERE `Nombre`='%e';", DIR_USERS, NewName);
									cacheid = mysql_query(dataBase, query);
									cache_get_row_count(cuentaExiste);
									cache_delete(cacheid);
									
									if ( !cuentaExiste )
									{
								        switch(SetPlayerName(playeridChange, NewName))
								        {
											case 1:
											{
										        format(PlayersDataOnline[playeridChange][NameOnline], MAX_PLAYER_NAME, "%s", NewName);
										        RemoveRallaName(playeridChange);
										        // NEGOCIOS
												for (new i = 1; i <= MAX_BIZZ; i++)
												{
													if ( strfind(NegociosData[i][Dueno], LastName, true) == 0 && strlen(NegociosData[i][Dueno]) == strlen(LastName) )
													{
														format(NegociosData[i][Dueno], MAX_PLAYER_NAME, "%s", PlayersDataOnline[playeridChange][NameOnline]);
														DataSaveBizz(i, true);
													}
												    if ( strfind(NegociosData[i][Extorsion], LastName, false) == 0 && strlen(NegociosData[i][Extorsion]) == strlen(LastName) )
													{
														format(NegociosData[i][Extorsion], MAX_PLAYER_NAME, "%s", PlayersDataOnline[playeridChange][NameOnline]);
														DataSaveBizz(i, true);
													}
												}
										        // COCHE
										        if ( PlayersData[playeridChange][Car] != -1 )
										        {
													format(DataCars[PlayersData[playeridChange][Car]][Dueno], MAX_PLAYER_NAME, "%s", PlayersDataOnline[playeridChange][NameOnline]);
													SaveDataVehicle(PlayersData[playeridChange][Car], DIR_VEHICLES);
												}
										        // CASA
										        if ( PlayersData[playeridChange][House] != -1 )
										        {
													format(HouseData[PlayersData[playeridChange][House]][Dueno], MAX_PLAYER_NAME, "%s", PlayersDataOnline[playeridChange][NameOnline]);
										            SaveHouse(PlayersData[playeridChange][House], true);
												}
												// Llaves Amigo
									            for(new i=1;i<=MAX_HOUSE;i++)
									            {
									                new IsLlavesAmigo = IsPlayerInHouseFriend(playeridChange, i);

									                if ( IsLlavesAmigo != -1 )
									                {
							                        	format(HouseFriends[i][IsLlavesAmigo][Name], MAX_PLAYER_NAME, "%s", PlayersDataOnline[playeridChange][NameOnline]);
							                        	SaveHouse(i, false);
									                }
								                }
								                // Banco
								                if ( PlayersData[playerid][AccountBankingOpen] )
								                {
								                    SaveAccountBanking(playeridChange);
								                }

												mysql_format(dataBase, query, 100, "UPDATE `%s` SET `Nombre`='%e' WHERE `Nombre`='%e';", DIR_USERS, NewName, LastName);
												mysql_query(dataBase, query, false);
												DataUserSave(playeridChange);

												new MsgNombreCambiadoMe[MAX_TEXT_CHAT];
												if ( playerid != playeridChange )
												{
													new MsgNombreCambiadoYou[MAX_TEXT_CHAT];
													format(MsgNombreCambiadoYou, sizeof(MsgNombreCambiadoYou), "%s El administrador %s te ha cambiado el nombre \"%s\"por \"%s\"", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline], LastName, PlayersDataOnline[playeridChange][NameOnline]);
													format(MsgNombreCambiadoMe, sizeof(MsgNombreCambiadoMe), "%s Cambiaste el nick \"%s\" por \"%s\" a este jugador", LOGO_STAFF, LastName, PlayersDataOnline[playeridChange][NameOnline]);
													SendClientMessage(playeridChange, COLOR_MENSAJES_DE_AVISOS, MsgNombreCambiadoYou);
												}
												else
												{
													format(MsgNombreCambiadoMe, sizeof(MsgNombreCambiadoMe), "%s Te cambiaste el nick \"%s\" por \"%s\"", LOGO_STAFF, LastName, PlayersDataOnline[playeridChange][NameOnline]);
												}
	        							        SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, MsgNombreCambiadoMe);
											}
											case 0:
											{
												SendInfoMessage(playerid, 0, "1031", "Ya ese jugador está usando ese mismo nick");
											}
											case -1:
											{
												SendInfoMessage(playerid, 0, "1030", "Ese nick está siendo usado ya por otro jugador o contiene caracteres no permitidos");
											}
										}
									}
									else
									{
										SendInfoMessage(playerid, 0, "1029", "Ese nick está siendo usado ya por otro jugador");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "1028", "El nuevo nombre a cambiar, no es válido");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "1027", "El jugador que desea cambiarle el nombre, no se encuentra conectado");
							}
					    }
					    else
					    {
							SendInfoMessage(playerid, 0, "1026", "Ha introducido mal el sintaxis del comando /Nombre, Ejemplo: /Nombre 20 Manolo_Talvez");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1025", "No tienes acceso al comando /Nombre");
					}
				}
				//////////--- /CCambiar [ID]              - CAMBIAR EL MODELO DE UN COCHE
				else if (strfind(cmdtext, "/CCambiar ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 8 )
					{
					    new MyNearCar = IsPlayerInNearVehicleEx(playerid);
					    if ( MyNearCar )
					    {
							if ( MyNearCar <= MAX_CAR_PUBLIC )
		   				    {
		   				        new ModelCar = strval(cmdtext[10]);
		   				        if ( ModelCar >= 400 && ModelCar <= 610)
		   				        {
									if ( coches_Todos_Type[ModelCar - 400] != TREN )
									{
										ChangeVehicle(playerid, MyNearCar, ModelCar, GetPlayerVirtualWorld(playerid), GetPlayerInteriorEx(playerid));
									}
									else
									{
										SendInfoMessage(playerid, 0, "1272", "Los trenes están deshabilitados por cuestiones de seguridad.");
									}
			   				    }
								else
								{
									SendInfoMessage(playerid, 0, "921", "El ID del vehículo debe estár comprendido entre 400 y 610");
								}
		   				    }
							else
							{
								SendInfoMessage(playerid, 0, "919", "Sólo se puede cambiar el modelo del vehículo a los en públicos");
							}
				        }
					}
					else
					{
						SendInfoMessage(playerid, 0, "920", "No tienes acceso al comando /CCambiar");
					}
				}
				//////////--- /Cnivel [ID]              - CAMBIAR EL NIVEL DE UNA CASA
				else if (strfind(cmdtext, "/Cnivel ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 7 )
					{
				        if ( PlayersDataOnline[playerid][InPickup] >= HouseData[1][PickupId] &&
				             PlayersDataOnline[playerid][InPickup] <= HouseData[MAX_HOUSE][PickupId] )
				        {
				            if ( strval(cmdtext[8]) >= 0 && strval(cmdtext[8]) <= 50 )
				            {
		                        HouseData[PlayersDataOnline[playerid][MyPickupWorld]][Level] = strval(cmdtext[8]);
		                        new MsgChangeType[MAX_TEXT_CHAT];
		                        format(MsgChangeType, sizeof(MsgChangeType), "Cambiaste el nivel a está casa a: %i", strval(cmdtext[8]));
				                SendInfoMessage(playerid, 2, "0", MsgChangeType);

	                            SaveHouse(PlayersDataOnline[playerid][MyPickupWorld], true);
					        }
					        else
					        {
								SendInfoMessage(playerid, 0, "670", "El nivel de casa introducído tiene que estar entre 0 y 50");
							}
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "671", "No te encuentras en ninguna casa");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "672", "No tienes acceso al comando /Cnivel");
					}
				}
				//////////--- /Desbanear [Nombre_Del_Jugador]              - Desbanear a un jugador
				else if (strfind(cmdtext, "/Desbanear ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 7 )
					{
					    if ( strlen(cmdtext[11]) >= 3 && strlen(cmdtext[11]) <= 24)
					    {
							UnBanUser(playerid, cmdtext[11], false);
						}
				        else
				        {
							SendInfoMessage(playerid, 0, "675", "El nombre tiene que contener entre 3 y 24 caracteres");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "674", "No tienes acceso al comando /Desbanear");
					}
				}
				//////////--- /Editar Pistas
			  	else if (strcmp("/Editar Pistas", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 4 )
					{
						ShowEditorPistas(playerid);
					}
					else
					{
						SendInfoMessage(playerid, 0, "1428", "No tienes acceso al comando /Editor Pistas");
					}
				}
				//////////--- /Map Off
			  	else if (strcmp("/Map Off", cmdtext, true, 8) == 0 && strlen(cmdtext) == 8)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 8 )
					{
						PlayersDataOnline[playerid][ObjectWorking] = -1;
					}
					else
					{
						SendInfoMessage(playerid, 0, "1054", "No tienes acceso al comando /Map Off");
					}
				}
				//////////--- /Map Point
				else if (strfind(cmdtext, "/Map Point ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 8 )
					{
	                    PlayersDataOnline[playerid][MappingPoint] = floatstr(cmdtext[11]);
	                    new MsgMaxPoint[MAX_TEXT_CHAT];
	                    format(MsgMaxPoint, sizeof(MsgMaxPoint), "Su nuevo valor de Map Point es: %f", PlayersDataOnline[playerid][MappingPoint]);
						SendInfoMessage(playerid, 2, "0", MsgMaxPoint);
					}
					else
					{
						SendInfoMessage(playerid, 0, "1055", "No tienes acceso al comando /Map Point");
					}
				}
			  	else if (strcmp("/Map", cmdtext, true, 4) == 0 && strlen(cmdtext) == 4)
			  	{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 8 )
					{
						ShowHomeMapping(playerid);
					}
					else
					{
						SendInfoMessage(playerid, 0, "1053", "No tienes acceso al comando /Map");
					}
			  	}
				//////////--- /BanEx [Nombre_Del_Jugador]              - Desbanear a un jugador
				else if (strfind(cmdtext, "/BanEx ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 7 )
					{
					    if ( strlen(cmdtext[7]) >= 3 && strlen(cmdtext[7]) <= 24)
					    {
							UnBanUser(playerid, cmdtext[7], true);
						}
				        else
				        {
							SendInfoMessage(playerid, 0, "973", "El nombre tiene que contener entre 3 y 24 caracteres");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "974", "No tienes acceso al comando /BanEx");
					}
				}
				//////////--- /Gtipo [ID]              - CAMBIAR EL TIPO DE UNA CASA
				else if (strfind(cmdtext, "/Gtipo ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 8 )
					{
			            if ( strval(cmdtext[7]) >= 0 && strval(cmdtext[7]) <= MAX_GARAGE_TYPE )
			            {
       	       				new GarageID, HouseID, LockID; IsPlayerInGarageFun(playerid, HouseID, GarageID, LockID);
			                if ( GarageID != -1 )
			                {
		                        Garages[HouseID][GarageID][TypeGarageE] = strval(cmdtext[7]);
		                        new MsgChangeType[MAX_TEXT_CHAT];
		                        format(MsgChangeType, sizeof(MsgChangeType), "Cambiaste este garage a tipo: %i", strval(cmdtext[7]));
				                SendInfoMessage(playerid, 2, "0", MsgChangeType);
	                            SaveHouse(HouseID, true);
                            }
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "1174", "El tipo de garage introducído no existe");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1176", "No tienes acceso al comando /Gtipo");
					}
				}
				//////////--- /Ctipo [ID]              - CAMBIAR EL TIPO DE UNA CASA
				else if (strfind(cmdtext, "/Ctipo ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 8 )
					{
				        if ( PlayersDataOnline[playerid][InPickup] >= HouseData[1][PickupId] &&
				             PlayersDataOnline[playerid][InPickup] <= HouseData[MAX_HOUSE][PickupId] )
				        {
				            if ( strval(cmdtext[7]) >= 0 && strval(cmdtext[7]) <= MAX_HOUSE_TYPE )
				            {
		                        HouseData[PlayersDataOnline[playerid][MyPickupWorld]][TypeHouseId] = strval(cmdtext[7]);
		                        new MsgChangeType[MAX_TEXT_CHAT];
		                        format(MsgChangeType, sizeof(MsgChangeType), "Cambiaste el tipo de esta casa a tipo: %i", strval(cmdtext[7]));
				                SendInfoMessage(playerid, 2, "0", MsgChangeType);

								RemoveAllGarage(PlayersDataOnline[playerid][MyPickupWorld]);

	                            SaveHouse(PlayersDataOnline[playerid][MyPickupWorld], true);
					        }
					        else
					        {
								SendInfoMessage(playerid, 0, "657", "El tipo de casa introducído no existe");
							}
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "655", "No te encuentras en ninguna casa");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "656", "No tienes acceso al comando /Ctipo");
					}
				}
				//////////--- /Design Garage [ID]            - COMENZAR A DISEñAR UN GARAGE
				else if (strfind(cmdtext, "/Design Garage ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 8 )
					{
					    if ( strval(cmdtext[15]) >= 0 && strval(cmdtext[15]) < MAX_GARAGES_DESING )
						{
							PlayersDataOnline[playerid][DesignGarageId] = strval(cmdtext[15]);
	                        new MsgChangeDesing[MAX_TEXT_CHAT];
	                        format(MsgChangeDesing, sizeof(MsgChangeDesing), "Ahora tienes el ID: %i para Design Garage", strval(cmdtext[15]));
			                SendInfoMessage(playerid, 2, "0", MsgChangeDesing);
		                }
		                else
		                {
							SendInfoMessage(playerid, 0, "1206", "El númmero de Design introducido, supera el número actual soportado");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1177", "No tienes acceso al comando /Desing Garage");
					}
				}
				//
				//////////--- /Garages [ID_Casa]            - VER GARAGES DE UNA CASA
				else if (strfind(cmdtext, "/Garages ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 8 )
					{
				        new IdHouse = strval(cmdtext[GetPosSpace(cmdtext, 1)]);
						if ( IdHouse > 0 && IdHouse <= MAX_HOUSE )
						{
	                        ShowGarages(playerid, IdHouse);
		                }
		                else
		                {
							SendInfoMessage(playerid, 0, "1178", "El ID de casa introducido no existe!");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1179", "No tienes acceso al comando /Garages");
					}
				}
				//////////--- /Dg aP
				else if (strfind(cmdtext, "/Dg Rand ", true) == 0)
				{
				    new IdHouse = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
				    new IdGarage = strval(cmdtext[GetPosSpace(cmdtext, 3)]);
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 8 )
					{
						if ( IdHouse > 0 && IdHouse <= MAX_HOUSE )
						{
						    if ( IdGarage >= 0 && IdGarage < MAX_GARAGE_FOR_HOUSE )
						    {
						        if ( ExistGarageForHouse(IdHouse, IdGarage) )
						        {
									Garages[IdHouse][IdGarage][WorldG] = random(999999 + 1000);

									new MsgChangeDesing[MAX_TEXT_CHAT];
									format(MsgChangeDesing, sizeof(MsgChangeDesing), "   -  Nuevo WORLD RANDOM (%i) MODIFICADA GARAGEID[%i]  PARA LA CASA ID[%i]-",Garages[IdHouse][IdGarage][WorldG], IdGarage, IdHouse);
									SendInfoMessage(playerid, 2, "0", MsgChangeDesing);
				                }
				                else
				                {
									SendInfoMessage(playerid, 0, "1199", "Esta casa no tiene este ID de Garage creado!");
								}
			                }
			                else
			                {
								SendInfoMessage(playerid, 0, "1198", "El ID de garage sobrepasa el límite de los garages!");
							}
		                }
		                else
		                {
							SendInfoMessage(playerid, 0, "1197", "El ID de casa introducido no existe!");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1196", "No tienes acceso al comando /Dg Rand");
					}
				}
				//////////--- /Dg a
				else if (strcmp("/Dg a", cmdtext, true, 5) == 0 && strlen(cmdtext) == 5)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 8 )
					{
				        GetPlayerPos(playerid, GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][Xg], GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][Yg], GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][Zg]);
				        GetPlayerFacingAngle(playerid, GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][ZZg]);

                        new MsgChangeDesing[MAX_TEXT_CHAT];
                        format(MsgChangeDesing, sizeof(MsgChangeDesing), "   -  Nueva POS Desing ID[%i] \"AFUERA A PIE\"  -", PlayersDataOnline[playerid][DesignGarageId]);
		                SendInfoMessage(playerid, 2, "0", MsgChangeDesing);
                        format(MsgChangeDesing, sizeof(MsgChangeDesing), "   -  X_Afuera: %f | Y_Afuera: %f  | Z_Afuera: %f | ZZ_Afuera: %f ", GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][Xg], GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][Yg], GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][Zg], GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][ZZg]);
		                SendInfoMessage(playerid, 2, "0", MsgChangeDesing);
					}
					else
					{
						SendInfoMessage(playerid, 0, "1180", "No tienes acceso al comando /Dg a");
					}
				}
				//////////--- /Dg aP
				else if (strfind(cmdtext, "/Dg aP ", true) == 0)
				{
				    new IdHouse = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
				    new IdGarage = strval(cmdtext[GetPosSpace(cmdtext, 3)]);
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 8 )
					{
						if ( IdHouse > 0 && IdHouse <= MAX_HOUSE )
						{
						    if ( IdGarage >= 0 && IdGarage < MAX_GARAGE_FOR_HOUSE )
						    {
						        if ( ExistGarageForHouse(IdHouse, IdGarage) )
						        {
									GetPlayerPos(playerid, Garages[IdHouse][IdGarage][Xg], Garages[IdHouse][IdGarage][Yg], Garages[IdHouse][IdGarage][Zg]);
									GetPlayerFacingAngle(playerid, Garages[IdHouse][IdGarage][ZZg]);

									new MsgChangeDesing[MAX_TEXT_CHAT];
									format(MsgChangeDesing, sizeof(MsgChangeDesing), "   -  Nueva POS MODIFICADA \"AFUERA A PIE\" GARAGEID[%i]  PARA LA CASA ID[%i]-", IdGarage, IdHouse);
									SendInfoMessage(playerid, 2, "0", MsgChangeDesing);
									format(MsgChangeDesing, sizeof(MsgChangeDesing), "   -  X_Afuera: %f | Y_Afuera: %f  | Z_Afuera: %f | ZZ_Afuera: %f ", Garages[IdHouse][IdGarage][Xg], Garages[IdHouse][IdGarage][Yg], Garages[IdHouse][IdGarage][Zg], Garages[IdHouse][IdGarage][ZZg]);
									SendInfoMessage(playerid, 2, "0", MsgChangeDesing);
				                }
				                else
				                {
									SendInfoMessage(playerid, 0, "1195", "Esta casa no tiene este ID de Garage creado!");
								}
			                }
			                else
			                {
								SendInfoMessage(playerid, 0, "1194", "El ID de garage sobrepasa el límite de los garages!");
							}
		                }
		                else
		                {
							SendInfoMessage(playerid, 0, "1193", "El ID de casa introducido no existe!");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1192", "No tienes acceso al comando /Dg aP");
					}
				}
				//////////--- //Dg c
				else if (strcmp("/Dg c", cmdtext, true, 5) == 0 && strlen(cmdtext) == 5)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 8 )
					{
				        GetPlayerPos(playerid, GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][XgOut], GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][YgOut], GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][ZgOut]);
				        GetPlayerFacingAngle(playerid, GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][ZZgOut]);

                        new MsgChangeDesing[MAX_TEXT_CHAT];
                        format(MsgChangeDesing, sizeof(MsgChangeDesing), "   -  Nueva POS Desing ID[%i] \"AFUERA COCHE\" -", PlayersDataOnline[playerid][DesignGarageId]);
		                SendInfoMessage(playerid, 2, "0", MsgChangeDesing);
                        format(MsgChangeDesing, sizeof(MsgChangeDesing), "   -  X_Afuera_C: %f | Y_Afuera_C: %f  | Z_Afuera_C: %f | ZZ_Afuera_C: %f ", GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][XgOut], GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][YgOut], GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][ZgOut], GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][ZZgOut]);
		                SendInfoMessage(playerid, 2, "0", MsgChangeDesing);
					}
					else
					{
						SendInfoMessage(playerid, 0, "1181", "No tienes acceso al comando /Dg c");
					}
				}
				//////////--- /Dg cP
				else if (strfind(cmdtext, "/Dg cP ", true) == 0)
				{
				    new IdHouse = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
				    new IdGarage = strval(cmdtext[GetPosSpace(cmdtext, 3)]);
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 8 )
					{
						if ( IdHouse > 0 && IdHouse <= MAX_HOUSE )
						{
						    if ( IdGarage >= 0 && IdGarage < MAX_GARAGE_FOR_HOUSE )
						    {
						        if ( ExistGarageForHouse(IdHouse, IdGarage) )
						        {
									GetPlayerPos(playerid, Garages[IdHouse][IdGarage][XgOut], Garages[IdHouse][IdGarage][YgOut], Garages[IdHouse][IdGarage][ZgOut]);
									GetPlayerFacingAngle(playerid, Garages[IdHouse][IdGarage][ZZgOut]);

									new MsgChangeDesing[MAX_TEXT_CHAT];
									format(MsgChangeDesing, sizeof(MsgChangeDesing), "   -  Nueva POS MODIFICADA \"AFUERA COCHE\" GARAGEID[%i]  PARA LA CASA ID[%i]-", IdGarage, IdHouse);
									SendInfoMessage(playerid, 2, "0", MsgChangeDesing);
									format(MsgChangeDesing, sizeof(MsgChangeDesing), "   -  X_Afuera_C: %f | Y_Afuera_C: %f  | Z_Afuera_C: %f | ZZ_Afuera_C: %f ", Garages[IdHouse][IdGarage][XgOut], Garages[IdHouse][IdGarage][YgOut], Garages[IdHouse][IdGarage][ZgOut], Garages[IdHouse][IdGarage][ZZgOut]);
									SendInfoMessage(playerid, 2, "0", MsgChangeDesing);
				                }
				                else
				                {
									SendInfoMessage(playerid, 0, "1191", "Esta casa no tiene este ID de Garage creado!");
								}
			                }
			                else
			                {
								SendInfoMessage(playerid, 0, "1190", "El ID de garage sobrepasa el límite de los garages!");
							}
		                }
		                else
		                {
							SendInfoMessage(playerid, 0, "1189", "El ID de casa introducido no existe!");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1188", "No tienes acceso al comando /Dg cP");
					}
				}
				//////////--- //Dg d
				else if (strcmp("/Dg d", cmdtext, true, 5) == 0 && strlen(cmdtext) == 5)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 8 )
					{
				        GetPlayerPos(playerid, GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][XgIn], GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][YgIn], GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][ZgIn]);
				        GetPlayerFacingAngle(playerid, GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][ZZgIn]);

                        new MsgChangeDesing[MAX_TEXT_CHAT];
                        format(MsgChangeDesing, sizeof(MsgChangeDesing), "   -  Nueva POS Desing ID[%i] \"DENTRO\" -", PlayersDataOnline[playerid][DesignGarageId]);
		                SendInfoMessage(playerid, 2, "0", MsgChangeDesing);
                        format(MsgChangeDesing, sizeof(MsgChangeDesing), "   -  X_Dentro: %f | Y_Dentro: %f  | Z_Dentro: %f | ZZ_Dentro: %f ", GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][XgIn], GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][YgIn], GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][ZgIn], GaragesDesing[PlayersDataOnline[playerid][DesignGarageId]][ZZgIn]);
		                SendInfoMessage(playerid, 2, "0", MsgChangeDesing);
					}
					else
					{
						SendInfoMessage(playerid, 0, "1182", "No tienes acceso al comando /Dg d");
					}
				}
				//////////--- /Dg dP
				else if (strfind(cmdtext, "/Dg dP ", true) == 0)
				{
				    new IdHouse = strval(cmdtext[GetPosSpace(cmdtext, 2)]);
				    new IdGarage = strval(cmdtext[GetPosSpace(cmdtext, 3)]);
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 8 )
					{
						if ( IdHouse > 0 && IdHouse <= MAX_HOUSE )
						{
						    if ( IdGarage >= 0 && IdGarage < MAX_GARAGE_FOR_HOUSE )
						    {
						        if ( ExistGarageForHouse(IdHouse, IdGarage) )
						        {
									GetPlayerPos(playerid, Garages[IdHouse][IdGarage][XgIn], Garages[IdHouse][IdGarage][YgIn], Garages[IdHouse][IdGarage][ZgIn]);
									GetPlayerFacingAngle(playerid, Garages[IdHouse][IdGarage][ZZgIn]);

									new MsgChangeDesing[MAX_TEXT_CHAT];
									format(MsgChangeDesing, sizeof(MsgChangeDesing), "   -  Nueva POS MODIFICADA \"DENTRO\" GARAGE ID[%i]  PARA LA CASA ID[%i]-", IdGarage, IdHouse);
									SendInfoMessage(playerid, 2, "0", MsgChangeDesing);
									format(MsgChangeDesing, sizeof(MsgChangeDesing), "   -  X_Dentro: %f | Y_Dentro: %f  | Z_Dentro: %f | ZZ_Dentro: %f ", Garages[IdHouse][IdGarage][XgIn], Garages[IdHouse][IdGarage][YgIn], Garages[IdHouse][IdGarage][ZgIn], Garages[IdHouse][IdGarage][ZZgIn]);
									SendInfoMessage(playerid, 2, "0", MsgChangeDesing);
				                }
				                else
				                {
									SendInfoMessage(playerid, 0, "1187", "Esta casa no tiene este ID de Garage creado!");
								}
			                }
			                else
			                {
								SendInfoMessage(playerid, 0, "1186", "El ID de garage sobrepasa el límite de los garages!");
							}
		                }
		                else
		                {
							SendInfoMessage(playerid, 0, "1185", "El ID de casa introducido no existe!");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1172", "No tienes acceso al comando /Dg cP");
					}
				}
				//////////--- /VCasa              - VENDER UNA CASA
			  	else if (strcmp("/VCasa", cmdtext, true, 6) == 0 && strlen(cmdtext) == 6)
	  			{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 8 )
					{
				        if ( PlayersDataOnline[playerid][InPickup] >= HouseData[1][PickupId] &&
				             PlayersDataOnline[playerid][InPickup] <= HouseData[MAX_HOUSE][PickupId] )
				        {
				            if ( strlen(HouseData[PlayersDataOnline[playerid][MyPickupWorld]][Dueno]) != 2 )
				            {
								new playerid_vender = RemoveDuenoOfHouse(PlayersDataOnline[playerid][MyPickupWorld]);
								new MsgVentaCasaEx[MAX_TEXT_CHAT];
								format(MsgVentaCasaEx, sizeof(MsgVentaCasaEx), "Has vendido esta casa al estado, erá propiedad de %s", PlayersDataOnline[playerid_vender][NameOnline]);
								SendInfoMessage(playerid, 3, "0", MsgVentaCasaEx);
					        }
					        else
					        {
								SendInfoMessage(playerid, 0, "673", "Ésta casa no tiene dueño");
							}
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "674", "No te encuentras en ninguna casa");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "675", "No tienes acceso al comando /Vcasa");
					}
				}
				//////////--- /VNegocio	              - VENDER UN NEGOCIO
			  	else if (strcmp("/Vnegocio", cmdtext, true, 9) == 0 && strlen(cmdtext) == 9)
	  			{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 8 )
					{
				        if ( PlayersDataOnline[playerid][InPickup] >= NegociosData[1][PickupOutId] &&
				             PlayersDataOnline[playerid][InPickup] <= NegociosData[MAX_BIZZ][PickupOutId] )
				        {
				            if ( strlen(NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][Dueno]) != 1 )
				            {
								new MsgVentaNegocioEx[MAX_TEXT_CHAT];
								format(MsgVentaNegocioEx, sizeof(MsgVentaNegocioEx), "Has vendido este negocio al estado, erá propiedad de %s", NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][Dueno]);
								SendInfoMessage(playerid, 3, "0", MsgVentaNegocioEx);
								RemoveDuenoOfBizz(PlayersDataOnline[playerid][MyPickupWorld]);
					        }
					        else
					        {
								SendInfoMessage(playerid, 0, "676", "Éste negocio no tiene dueño");
							}
				        }
				        else
				        {
							SendInfoMessage(playerid, 0, "677", "No te encuentras en ningún negocio");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "678", "No tienes acceso al comando /Vnegocio");
					}
				}
			    // COMANDO: /Borrar Warn [ID]
	  			else if (strfind(cmdtext, "/Borrar Warn ", true) == 0)
			    {
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 7 )
					{
				        new playeridto	= strval(cmdtext[13]);
						if (IsPlayerConnected(playeridto) )
						{
							PlayersData[playeridto][Warn] = 0;
							new MsgToAdmin[MAX_TEXT_CHAT];
							new MsgToUser[MAX_TEXT_CHAT];
							format(MsgToAdmin, sizeof(MsgToAdmin), "%s Has quitado todos los Warns a %s", LOGO_STAFF, PlayersDataOnline[playeridto][NameOnline]);
							format(MsgToUser, sizeof(MsgToUser), "%s El administrador %s te quitado todos los Warns", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline]);
							SendClientMessage(playerid, COLOR_KICK_JAIL_BAN, MsgToAdmin);
							SendClientMessage(playeridto, COLOR_KICK_JAIL_BAN, MsgToUser);
						}
						else
						{
							SendInfoMessage(playerid, 0, "922", "El jugador que desea quitarle los Warns, no se encuentra conectado");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "923", "No tienes acceso al comando /Borrar Warn [ID]");
					}
	  			}
			    // /Borrar
			  	else if (strcmp("/Borrar", cmdtext, true, 7) == 0 && strlen(cmdtext) == 7)
	  			{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 1 )
					{
		  			    for ( new i = 0; i < 100; i++)
		  			    {
		  			    	SendClientMessageToAll(0x000000FF, " ");
				    	}
						SendClientMessageToAll(COLOR_MESSAGES[2], " El chat a sido limpiado!");
					}
					else
					{
						SendInfoMessage(playerid, 0, "855", "No tienes acceso al comando /Borrar");
					}
	  			}
			    // /Adminon
			  	else if (strcmp("/AdminOn", cmdtext, true, 8) == 0 && strlen(cmdtext) == 8)
	  			{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 1 )
					{
						new MsgAdminOn[MAX_TEXT_CHAT];
						if ( PlayersDataOnline[playerid][AdminOn] )
						{
							format(MsgAdminOn, sizeof(MsgAdminOn), "%s Has desactivado el AdminOn", LOGO_STAFF);
			            	SetPlayerColor(playerid, PLAYERS_COLOR);
							PlayersDataOnline[playerid][AdminOn] = false;
						}
						else
						{
							format(MsgAdminOn, sizeof(MsgAdminOn), "%s Has activado el AdminOn", LOGO_STAFF);
							SetPlayerColor(playerid, AdminsRangosColors[PlayersData[playerid][Admin] -1]);
							PlayersDataOnline[playerid][AdminOn] = true;
						}
						SendClientMessage(playerid, COLOR_MESSAGES[1], MsgAdminOn);
					}
					else
					{
						SendInfoMessage(playerid, 0, "144", "No tienes acceso al comando /AdminOn");
					}
	  			}
				//////////--- /Teles [ID]
				else if (strfind(cmdtext, "/Teles ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 2)
					{
					    new SendString[4];
						strmid(SendString, cmdtext, 7, strlen(cmdtext), sizeof(SendString));
						new Float:X_Y_Z_ALL[4];
						switch (strval(SendString))
						{
						    case 0:
							{
						        new Float:X_Y_Z[4] = {2495.3357,-1687.1404,13.5153,357.6980}; //Groove
						        X_Y_Z_ALL[0] = X_Y_Z[0]; X_Y_Z_ALL[1] = X_Y_Z[1]; X_Y_Z_ALL[2] = X_Y_Z[2]; X_Y_Z_ALL[3] = X_Y_Z[3];
							}
						    case 1:
						    {
	                            new Float:X_Y_Z[4] = {1479.6165, -1737.7754, 13.5469, 359.5288}; //Ayuntamiento
	                        	X_Y_Z_ALL[0] = X_Y_Z[0]; X_Y_Z_ALL[1] = X_Y_Z[1]; X_Y_Z_ALL[2] = X_Y_Z[2]; X_Y_Z_ALL[3] = X_Y_Z[3];
							}
						    case 2:
						    {
						        new Float:X_Y_Z[4] = {1444.3427, -858.3128,52.3409, 74.2515}; //Vinewood
						        X_Y_Z_ALL[0] = X_Y_Z[0]; X_Y_Z_ALL[1] = X_Y_Z[1]; X_Y_Z_ALL[2] = X_Y_Z[2]; X_Y_Z_ALL[3] = X_Y_Z[3];
							}
	                        case 3:
		     				{
						        new Float:X_Y_Z[4] = {1753.5795, -2622.3982, 13.5469, 0.1541}; // Aero LS
						        X_Y_Z_ALL[0] = X_Y_Z[0]; X_Y_Z_ALL[1] = X_Y_Z[1]; X_Y_Z_ALL[2] = X_Y_Z[2]; X_Y_Z_ALL[3] = X_Y_Z[3];
							}
							case 4:
							{
						        new Float:X_Y_Z[4] = {-121.3143,-980.9033,26.2507,134.6347}; // LS & SF
						        X_Y_Z_ALL[0] = X_Y_Z[0]; X_Y_Z_ALL[1] = X_Y_Z[1]; X_Y_Z_ALL[2] = X_Y_Z[2]; X_Y_Z_ALL[3] = X_Y_Z[3];
							}
							case 5:
							{
						        new Float:X_Y_Z[4] = {-1335.8469,-409.1505,14.1484,260.8257}; // Aero SF
						        X_Y_Z_ALL[0] = X_Y_Z[0]; X_Y_Z_ALL[1] = X_Y_Z[1]; X_Y_Z_ALL[2] = X_Y_Z[2]; X_Y_Z_ALL[3] = X_Y_Z[3];
							}
							case 6:
							{
						        new Float:X_Y_Z[4] = {-2026.5255,-97.7325,35.1641,0.4050}; // Autoescuela
						        X_Y_Z_ALL[0] = X_Y_Z[0]; X_Y_Z_ALL[1] = X_Y_Z[1]; X_Y_Z_ALL[2] = X_Y_Z[2]; X_Y_Z_ALL[3] = X_Y_Z[3];
							}
							case 7:
						    {
						        new Float:X_Y_Z[4] = {-1574.1990,662.2103,7.1875,269.1603}; // Police SF
						        X_Y_Z_ALL[0] = X_Y_Z[0]; X_Y_Z_ALL[1] = X_Y_Z[1]; X_Y_Z_ALL[2] = X_Y_Z[2]; X_Y_Z_ALL[3] = X_Y_Z[3];
							}
							case 8:
							{
						        new Float:X_Y_Z[4] = {-2623.7808,1410.0333,7.0938,198.2430}; // Jizzy
						        X_Y_Z_ALL[0] = X_Y_Z[0]; X_Y_Z_ALL[1] = X_Y_Z[1]; X_Y_Z_ALL[2] = X_Y_Z[2]; X_Y_Z_ALL[3] = X_Y_Z[3];
							}
							case 9:
							{
						        new Float:X_Y_Z[4] = {-2504.1143,2421.4956,16.5979,32.8509}; // Bayside
						        X_Y_Z_ALL[0] = X_Y_Z[0]; X_Y_Z_ALL[1] = X_Y_Z[1]; X_Y_Z_ALL[2] = X_Y_Z[2]; X_Y_Z_ALL[3] = X_Y_Z[3];
							}
							case 10:
							{
						        new Float:X_Y_Z[4] = {-1496.1182,2600.6624,55.6875,358.7807}; // El quebrado
						        X_Y_Z_ALL[0] = X_Y_Z[0]; X_Y_Z_ALL[1] = X_Y_Z[1]; X_Y_Z_ALL[2] = X_Y_Z[2]; X_Y_Z_ALL[3] = X_Y_Z[3];
							}
							case 11:
							{
						        new Float:X_Y_Z[4] = {-236.7057,2628.7227,62.6907,359.8041}; // Ejercito
						        X_Y_Z_ALL[0] = X_Y_Z[0]; X_Y_Z_ALL[1] = X_Y_Z[1]; X_Y_Z_ALL[2] = X_Y_Z[2]; X_Y_Z_ALL[3] = X_Y_Z[3];
							}
							case 12:
							{
						        new Float:X_Y_Z[4] = {213.8932,1870.1552,17.6406,1.7001}; // AREA 59
						        X_Y_Z_ALL[0] = X_Y_Z[0]; X_Y_Z_ALL[1] = X_Y_Z[1]; X_Y_Z_ALL[2] = X_Y_Z[2]; X_Y_Z_ALL[3] = X_Y_Z[3];
							}
							case 13:
							{
						        new Float:X_Y_Z[4] = {1685.7563,1447.7520,10.7697,269.1385}; // Aero LV
						        X_Y_Z_ALL[0] = X_Y_Z[0]; X_Y_Z_ALL[1] = X_Y_Z[1]; X_Y_Z_ALL[2] = X_Y_Z[2]; X_Y_Z_ALL[3] = X_Y_Z[3];
							}
							case 14:
							{
						        new Float:X_Y_Z[4] = {2034.6119,1342.9308,10.8203,269.2883}; // LV
						        X_Y_Z_ALL[0] = X_Y_Z[0]; X_Y_Z_ALL[1] = X_Y_Z[1]; X_Y_Z_ALL[2] = X_Y_Z[2]; X_Y_Z_ALL[3] = X_Y_Z[3];
							}
							case 15:
							{
						        new Float:X_Y_Z[4] = {2350.2805,2143.4919,10.6797,90.4581}; // Casino LV
						        X_Y_Z_ALL[0] = X_Y_Z[0]; X_Y_Z_ALL[1] = X_Y_Z[1]; X_Y_Z_ALL[2] = X_Y_Z[2]; X_Y_Z_ALL[3] = X_Y_Z[3];
							}
							case 16:
							{
						        new Float:X_Y_Z[4] = {2337.1001,2455.9500,14.9688,180.0000}; // Police LV
						        X_Y_Z_ALL[0] = X_Y_Z[0]; X_Y_Z_ALL[1] = X_Y_Z[1]; X_Y_Z_ALL[2] = X_Y_Z[2]; X_Y_Z_ALL[3] = X_Y_Z[3];
							}
							case 17:
							{
						        new Float:X_Y_Z[4] = {1379.8220,2181.3489,11.0234,133.8801}; // Stadium LV
						        X_Y_Z_ALL[0] = X_Y_Z[0]; X_Y_Z_ALL[1] = X_Y_Z[1]; X_Y_Z_ALL[2] = X_Y_Z[2]; X_Y_Z_ALL[3] = X_Y_Z[3];
							}
							case 18:
							{
						        new Float:X_Y_Z[4] = {744.3160,-523.0973,16.3359,179.7914}; // Dillimore
						        X_Y_Z_ALL[0] = X_Y_Z[0]; X_Y_Z_ALL[1] = X_Y_Z[1]; X_Y_Z_ALL[2] = X_Y_Z[2]; X_Y_Z_ALL[3] = X_Y_Z[3];
							}
							case 19:
							{
						        new Float:X_Y_Z[4] = {232.8348,-71.7456,1.4233,357.7764}; // Blue Berry
						        X_Y_Z_ALL[0] = X_Y_Z[0]; X_Y_Z_ALL[1] = X_Y_Z[1]; X_Y_Z_ALL[2] = X_Y_Z[2]; X_Y_Z_ALL[3] = X_Y_Z[3];
							}
							case 20:
							{
						        new Float:X_Y_Z[4] = {1317.7798,313.0467,19.4063,336.1668}; // Montgomery
						        X_Y_Z_ALL[0] = X_Y_Z[0]; X_Y_Z_ALL[1] = X_Y_Z[1]; X_Y_Z_ALL[2] = X_Y_Z[2]; X_Y_Z_ALL[3] = X_Y_Z[3];
							}
							case 21:
							{
						        new Float:X_Y_Z[4] = {-2146.3064,-2411.0188,30.4765,320.4872}; // Angel Alpine
						        X_Y_Z_ALL[0] = X_Y_Z[0]; X_Y_Z_ALL[1] = X_Y_Z[1]; X_Y_Z_ALL[2] = X_Y_Z[2]; X_Y_Z_ALL[3] = X_Y_Z[3];
							}
							case 22:
							{
						        new Float:X_Y_Z[4] = {868.6628,-28.8207,63.1953,159.8571}; // Monte
						        X_Y_Z_ALL[0] = X_Y_Z[0]; X_Y_Z_ALL[1] = X_Y_Z[1]; X_Y_Z_ALL[2] = X_Y_Z[2]; X_Y_Z_ALL[3] = X_Y_Z[3];
							}
							case 23:
							{
						        new Float:X_Y_Z[4] = {-2756.8635,376.3777,4.3359,271.0996}; // Hall 2
						        X_Y_Z_ALL[0] = X_Y_Z[0]; X_Y_Z_ALL[1] = X_Y_Z[1]; X_Y_Z_ALL[2] = X_Y_Z[2]; X_Y_Z_ALL[3] = X_Y_Z[3];
							}
							case 24:
							{
						        new Float:X_Y_Z[4] = {-302.6161,1512.5471,75.3594,182.8583}; // Drift
						        X_Y_Z_ALL[0] = X_Y_Z[0]; X_Y_Z_ALL[1] = X_Y_Z[1]; X_Y_Z_ALL[2] = X_Y_Z[2]; X_Y_Z_ALL[3] = X_Y_Z[3];
							}
							case 25:
							{
						        new Float:X_Y_Z[4] = {1131.9738,-2036.8430,69.0078,269.3504}; // Drift
						        X_Y_Z_ALL[0] = X_Y_Z[0]; X_Y_Z_ALL[1] = X_Y_Z[1]; X_Y_Z_ALL[2] = X_Y_Z[2]; X_Y_Z_ALL[3] = X_Y_Z[3];
							}
							case 26:
							{
						        new Float:X_Y_Z[4] = {1428.3345947266,1325.5063476563,11.149431228638,269.3504}; // Death Match
						        X_Y_Z_ALL[0] = X_Y_Z[0]; X_Y_Z_ALL[1] = X_Y_Z[1]; X_Y_Z_ALL[2] = X_Y_Z[2]; X_Y_Z_ALL[3] = X_Y_Z[3];

						        //SetPlayerInteriorEx(playerid, 5);
						        SetPlayerVirtualWorldEx(playerid, 10);
							}
							default:
							{
								SendInfoMessage(playerid, 0, "145", "Ese tele no existe.");
								return 1;
							}
						}

						if ( IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) == 0 )
						{
							SetVehiclePos(GetPlayerVehicleID(playerid), X_Y_Z_ALL[0], X_Y_Z_ALL[1], X_Y_Z_ALL[2]);
							SetVehicleZAngle(GetPlayerVehicleID(playerid), X_Y_Z_ALL[3]);
						}
						else
						{
							SetPlayerPos(playerid, X_Y_Z_ALL[0], X_Y_Z_ALL[1], X_Y_Z_ALL[2]);
							SetPlayerFacingAngle(playerid, X_Y_Z_ALL[3]);
							SetCameraBehindPlayer(playerid);
						}
						SetPlayerInteriorEx(playerid, 0);
						ChangeHouseOrOther(playerid, 0);
						
						if ( strval(SendString) != 26 )
						{
							SetPlayerVirtualWorldEx(playerid, 0);
						}
						return 1;
					}
					else
					{
						SendInfoMessage(playerid, 0, "146", "Tú no tienes acceso a el comando /Teles.");
				        return 1;
					}
		    	}
				//////////--- /Test
				else if (strfind(cmdtext, "/Test ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 1)
					{
					    new SendString[4];
						strmid(SendString, cmdtext, 6, strlen(cmdtext), sizeof(SendString));

						if (IsPlayerConnected(strval(SendString)))
						{
				        	new Float:Xplayerid, Float:Yplayerid, Float:Zplayerid;
							GetPlayerPos(strval(SendString), Xplayerid, Yplayerid, Zplayerid);
							SetPlayerPos(strval(SendString), Xplayerid, Yplayerid, Zplayerid + 10);
							return 1;
						}
						else
						{
							SendInfoMessage(playerid, 0, "148", "El jugador al que desea hacerle un test no se encuentra conectado.");
							return 1;
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "149", "Tú no tienes acceso a el comando /Test.");
				        return 1;
					}
		    	}
		//		02-	*		/A [Texto]						- Canal de la administración
				else if (strfind(cmdtext, "/A ", true) == 0)
				{
					if ( PlayersData[playerid][Admin] >= 1)
					{
					    new SendString[150];
					    new Mid[120];
						strmid(Mid, cmdtext, 3, strlen(cmdtext), sizeof(Mid));
					    format(SendString, sizeof(SendString), "%s", Mid);
						Comandos_Admin(2, playerid, 0, PlayersData[playerid][Admin], 0, SendString);
						return 1;
					}
					else
					{
						SendInfoMessage(playerid, 0, "150", "Tú no tienes acceso a el canal de el Staff, si desea hablar con alguno puede whispear con /W [ID] [Duda].");
				        return 1;
					}

				}
		//		03-	*		/Vida [ID]						- Llevar la vida a un jugador
				else if (strfind(cmdtext, "/Vida ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 3)
					{
					    new SendString[4];
						strmid(SendString, cmdtext, 6, strlen(cmdtext), sizeof(SendString));

						if (IsPlayerConnected(strval(SendString)))
						{
							Comandos_Admin(3, playerid, strval(SendString), PlayersData[playerid][Admin], 0, "0");
						}
						else
						{
							SendInfoMessage(playerid, 0, "151", "El jugador que desea darle vida no se encuentra conectado.");
						}

						return 1;
					}
					else
					{
						SendInfoMessage(playerid, 0, "152", "Tú no tienes acceso a el comando /Vida.");
				        return 1;
					}
				}
		//		04-	*		/Chaleco [ID]					- Llenar el chaleco a un jugador
				else if (strfind(cmdtext, "/Chaleco ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 3)
					{
					    new SendString[4];
						strmid(SendString, cmdtext, 9, strlen(cmdtext), sizeof(SendString));

						if (IsPlayerConnected(strval(SendString)))
						{
							Comandos_Admin(4, playerid, strval(SendString), PlayersData[playerid][Admin], 0, "0");
						}
						else
						{
							SendInfoMessage(playerid, 0, "153", "El jugador que desea darle chaleco no se encuentra conectado.");
						}

						return 1;
					}
					else
					{
						SendInfoMessage(playerid, 0, "154", "Tú no tienes acceso a el comando /Chaleco.");
				        return 1;
					}
				}
		//		05-	*		/Espectar [ID]					- Espectar a un jugador
				else if (strfind(cmdtext, "/Espectar", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 1)
					{
						if (strlen(cmdtext) == 9)
						{
						    Comandos_Admin(5, playerid, false, PlayersData[playerid][Admin], 2, "0");
						}
						else if (IsPlayerConnected(strval(cmdtext[10])))
						{
						    if ( strval(cmdtext[10]) != playerid )
						    {
						        if ( PlayersDataOnline[strval(cmdtext[10])][StateDeath] != 2 )
						        {
									Comandos_Admin(5, playerid, strval(cmdtext[10]), PlayersData[playerid][Admin], 1, "0");
	 							}
								else
								{
									SendInfoMessage(playerid, 0, "1151", "El jugador que desea espectar se encuentra muerto en estos momentos, intentelo de nuevo en unos segundos.");
								}
 							}
							else
							{
								SendInfoMessage(playerid, 0, "1150", "Has introducido tu misma ID a espectar.");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "155", "El jugador que desea espectar no se encuentra conectado.");
						}
						return 1;
					}
					else
					{
						SendInfoMessage(playerid, 0, "156", "Tú no tienes acceso a el comando /Espectar.");
				        return 1;
					}
				}
		//		06-	-		/Jail [ID] [Tiempo] [Razón]		- Jaliar a un jugador
				else if (strfind(cmdtext, "/Jail ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 1)
					{
						if (strlen(cmdtext) > 7 )
						{
							if (IsPlayerConnected(strvalEx(cmdtext[GetPosSpace(cmdtext, 1)])))
							{
								if ( strvalEx(cmdtext[GetPosSpace(cmdtext, 2)]) != -1 )
								{
									if ( strvalEx(cmdtext[GetPosSpace(cmdtext, 3)]) != -1 )
									{
										Comandos_Admin(6, playerid, strvalEx(cmdtext[GetPosSpace(cmdtext, 1) + 1]),
										PlayersData[playerid][Admin],
										strvalEx(cmdtext[GetPosSpace(cmdtext, 2)]),
										cmdtext[GetPosSpace(cmdtext, 3)]);
	   							        return 1;
									}
									else
									{
										SendInfoMessage(playerid, 0, "157", "El argumento 'Razón' no se puede dejar vacío.");
										return 1;
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "158", "Ha introducído mal el sintaxis del comando /Jail. Ejemplo correcto: /Jail 22 10 No respetar las normas el servidor.");
									return 1;
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "159", "El jugador que desea Jaliar no se encuentra conectado.");
								return 1;
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "160", "Ha introducído mal el sintaxis del comando /Jail. Ejemplo correcto: /Jail 22 10 No respetar las normas el servidor.");
							return 1;
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "161", "Tú no tienes acceso a el comando /Jail.");
				        return 1;
					}
				}
		//		07-	*		/Kick [ID] [Razón]				- Kikear a un jugador
				else if (strfind(cmdtext, "/Kick ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 1)
					{
						new PlayerKickID = strvalEx(cmdtext[GetPosSpace(cmdtext, 1)]);
						if (strlen(cmdtext) >= 8 )
						{
							if (PlayerKickID != playerid)
							{
								if (IsPlayerConnected(PlayerKickID))
								{
								    Comandos_Admin(7, playerid, PlayerKickID, PlayersData[playerid][Admin], 0, cmdtext[GetPosSpace(cmdtext, 2)]);
									return 1;
								}
								else
								{
									SendInfoMessage(playerid, 0, "162", "El jugador que desea kikear no se encuentra conectado.");
									return 1;
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "163", "La ID que has introducído es la suya.");
			                    return 1;
							}

						}
						else
						{
							SendInfoMessage(playerid, 0, "164", "Ha introducído mal el sintaxis del comando /Kick. Ejemplo correcto: /Kick 22 No respetar las normas el servidor.");
							return 1;
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "165", "Tú no tienes acceso a el comando /Kick.");
				        return 1;
					}
				}
		//		// /Silenciar [ID]
				else if (strfind(cmdtext, "/Silenciar ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 3)
					{
						if (IsPlayerConnected(strval(cmdtext[11])) && PlayersData[strval(cmdtext[11])][Admin] != 9)
						{
						    new MsgSilenciadoMe[MAX_TEXT_CHAT];
						    new MsgSilenciadoToPlayer[MAX_TEXT_CHAT];
							if ( PlayersDataOnline[strval(cmdtext[11])][IsNotSilenciado] )
							{
							    format(MsgSilenciadoMe, sizeof(MsgSilenciadoMe), "%s Has silenciado a %s", LOGO_STAFF, PlayersDataOnline[strval(cmdtext[11])][NameOnline]);
							    format(MsgSilenciadoToPlayer, sizeof(MsgSilenciadoToPlayer), "%s %s te ha silenciado", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline]);
								PlayersDataOnline[strval(cmdtext[11])][IsNotSilenciado] = false;
							}
							else
							{
							    format(MsgSilenciadoMe, sizeof(MsgSilenciadoMe), "Ha quitado el silencio a %s", PlayersDataOnline[strval(cmdtext[11])][NameOnline]);
							    format(MsgSilenciadoToPlayer, sizeof(MsgSilenciadoToPlayer), "%s %s te ha quitado el silencio", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline]);
								PlayersDataOnline[strval(cmdtext[11])][IsNotSilenciado] = true;
							}
							SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, MsgSilenciadoMe);
							SendClientMessage(strval(cmdtext[11]), COLOR_MENSAJES_DE_AVISOS, MsgSilenciadoToPlayer);
						}
						else
						{
							SendInfoMessage(playerid, 0, "848", "El jugador que desea silenciar no se encuentra conectado.");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "849", "Tú no tienes acceso a el comando /Silenciar.");
					}
				}
				// /Tutorial [ID]
				else if (strfind(cmdtext, "/Tutorial ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 2)
					{
						if ( playerid == strval(cmdtext[10]) || IsPlayerConnected(strval(cmdtext[10])) && PlayersData[strval(cmdtext[10])][Admin] != 9)
						{
							new StringFormat[250];
						    if ( !PlayersData[strval(cmdtext[10])][InTutorial] )
						    {
								PlayersData[strval(cmdtext[10])][InTutorial] = true;
							    TogglePlayerControllableEx(strval(cmdtext[10]), false);
								PlayersDataOnline[strval(cmdtext[10])][IsNotSilenciado] = false;
								format(StringFormat, sizeof(StringFormat), "%s Han mandado a ver el tutorial de reglas a %s por %s",LOGO_STAFF, PlayersDataOnline[strval(cmdtext[10])][NameOnline], PlayersDataOnline[playerid][NameOnline]);
								SetPlayerTutorial(strval(cmdtext[10]), 7);
							}
							else
							{
								format(StringFormat, sizeof(StringFormat), "%s Le han recomenzado el tutorial de reglas a %s por %s",LOGO_STAFF, PlayersDataOnline[strval(cmdtext[10])][NameOnline], PlayersDataOnline[playerid][NameOnline]);
							}
							SendClientMessageToAll(COLOR_KICK_JAIL_BAN, StringFormat);
						}
						else
						{
							SendInfoMessage(playerid, 0, "856", "El jugador que desea mandar a ver el tutorial no se encuentra conectado.");
							return 1;
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "855", "Tú no tienes acceso a el comando /Tutorial.");
				        return 1;
					}
				}
		//		/Número [Número]
				else if (strfind(cmdtext, "/Número ", true) == 0 || strfind(cmdtext, "/Numero ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 3)
					{
         				new query[200], numberExist, PhoneOwner[MAX_PLAYER_NAME];
         				
					    mysql_format(dataBase, query, 200, "SELECT `Nombre`,`Phone` FROM `%s` WHERE `Phone`='%i';", DIR_USERS, strval(cmdtext[8]));
					    new Cache:cacheid = mysql_query(dataBase, query);
					    cache_get_row_count(numberExist);
					    if ( numberExist )
						cache_get_value_name(0, "Nombre", PhoneOwner);
					    cache_delete(cacheid);
						if ( numberExist && strval(cmdtext[8]) != 0)
						{
							new MsgNumber[MAX_TEXT_CHAT];
						    format(MsgNumber, sizeof(MsgNumber), "%s El número %i pertenece al jugador %s", LOGO_STAFF, strval(cmdtext[8]), PhoneOwner);
							SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, MsgNumber);
						}
						else SendInfoMessage(playerid, 0, "954", "Ese número no pertenece a ningún jugador!");
						return 1;
					}
					else
					{
						SendInfoMessage(playerid, 0, "955", "Tú no tienes acceso a el comando /Número.");
					}
				}
		//		08-	*		/Ban [ID] [Razón]				- Banear a un jugador
				else if (strfind(cmdtext, "/Ban ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 3)
					{
				        new PlayerIDBan = strvalEx(cmdtext[GetPosSpace(cmdtext, 1)]);
						if (strlen(cmdtext) >= 9)
						{
							if (PlayerIDBan != playerid)
							{
								if (IsPlayerConnected(PlayerIDBan) && PlayersData[PlayerIDBan][Admin] != 9)
								{
								    Comandos_Admin(8, playerid, PlayerIDBan, PlayersData[playerid][Admin], 0, cmdtext[GetPosSpace(cmdtext, 2)]);
		       						return 1;
								}
								else
								{
									SendInfoMessage(playerid, 0, "166", "El jugador que desea banear no se encuentra conectado.");
									return 1;
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "167", "La ID que has introducído es la suya.");
			                    return 1;
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "168", "Ha introducído mal el sintaxis del comando /Ban. Ejemplo correcto: /Ban 22 No respetar las normas el servidor.");
							return 1;
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "169", "Tú no tienes acceso a el comando /Ban.");
				        return 1;
					}
				}
		//		09-	*		/Revisar [ID]					- Revisar a un jugador
				else if (strfind(cmdtext, "/Revisar ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 1)
					{
					    new SendString[4];
						strmid(SendString, cmdtext, 9, strlen(cmdtext), sizeof(SendString));

						if (IsPlayerConnected(strval(SendString)))
						{
							Comandos_Admin(9, playerid, strval(SendString), PlayersData[playerid][Admin], 0, "0");
						}
						else
						{
							SendInfoMessage(playerid, 0, "170", "El jugador que desea revisar no se encuentra conectado.");
						}

						return 1;
					}
					else
					{
						SendInfoMessage(playerid, 0, "171", "Tú no tienes acceso a el comando /Revisar.");
				        return 1;
					}

				}
		//		10-	*		/Traer [ID]						- Traer un jugador a tu posición
				else if (strfind(cmdtext, "/Traer ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 1)
					{
					    new SendString[4];
						strmid(SendString, cmdtext, 7, strlen(cmdtext), sizeof(SendString));

						if (IsPlayerConnected(strval(SendString)))
						{
							if (strval(SendString) != playerid)
							{
								Comandos_Admin(10, playerid, strval(SendString), PlayersData[playerid][Admin], 0, "0");
							}
							else
							{
								SendInfoMessage(playerid, 0, "172", "La ID que has introducído es la suya.");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "173", "El jugador que desea traer no se encuentra conectado.");
						}
						return 1;
					}
					else
					{
						SendInfoMessage(playerid, 0, "174", "Tú no tienes acceso a el comando /Traer");
				        return 1;
					}

				}
		//		11- *		/Ir [ID]						- Ir a la poición de un jugador
				else if (strfind(cmdtext, "/Ir ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 1)
					{
					    new SendString[4];
						strmid(SendString, cmdtext, 4, strlen(cmdtext), sizeof(SendString));

						if (IsPlayerConnected(strval(SendString)))
						{
							if (strval(SendString) != playerid)
							{
								Comandos_Admin(11, playerid, strval(SendString), PlayersData[playerid][Admin], 0, "0");
							}
							else
							{
								SendInfoMessage(playerid, 0, "175", "La ID que has introducído es la suya.");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "176", "El jugador al que desea ir no se encuentra conectado.");
						}
						return 1;
					}
					else
					{
						SendInfoMessage(playerid, 0, "177", "Tú no tienes acceso a el comando /Ir.");
				        return 1;
					}

				}
		//		12- *       /Limpiar [ID]                   - Quitar todas las armas a un jugador
				else if (strfind(cmdtext, "/Limpiar ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if ( PlayersData[playerid][Admin] >= 5 )
					{
					    new SendString[4];
						strmid(SendString, cmdtext, 9, strlen(cmdtext), sizeof(SendString));

						if (IsPlayerConnected(strval(SendString)))
						{
							Comandos_Admin(12, playerid, strval(SendString), PlayersData[playerid][Admin], 0, "0");
						}
						else
						{
							SendInfoMessage(playerid, 0, "178", "El jugador al que desea limpiar no se encuentra conectado.");
						}

						return 1;
					}
					else
					{
						SendInfoMessage(playerid, 0, "179", "Tú no tienes acceso a el comando /Limpiar.");
				        return 1;
					}

				}
		//		13- *       /Parar [ID]                     - Freezar a un jugador
				else if (strfind(cmdtext, "/Parar ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 2)
					{
					    new SendString[4];
						strmid(SendString, cmdtext, 7, strlen(cmdtext), sizeof(SendString));

						if (IsPlayerConnected(strval(SendString)))
						{
							if (strval(SendString) != playerid || PlayersData[playerid][Admin] >= 8 )
							{
							    if ( PlayersDataOnline[strval(SendString)][Freeze] )
							    {
									Comandos_Admin(13, playerid, strval(SendString), PlayersData[playerid][Admin], 1, "0");
								}
								else
								{
									Comandos_Admin(13, playerid, strval(SendString), PlayersData[playerid][Admin], 2, "0");
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "180", "La ID que has introducído es la suya.");
							}
		                    return 1;
						}
						else
						{
							SendInfoMessage(playerid, 0, "181", "El jugador al que desea congelar no se encuentra conectado.");
							return 1;
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "182", "Tú no tienes acceso a el comando /Parar.");
				        return 1;
					}

				}
				else if (strcmp("/Matar DM", cmdtext, true, 9) == 0 && strlen(cmdtext) == 9)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 7)
					{
						new MsgDMToAll[MAX_TEXT_CHAT];
				    	format(MsgDMToAll, sizeof(MsgDMToAll), "%s Han matado a todos los del modo DeathMatch", LOGO_STAFF);
						for (new i = 0; i < MAX_PLAYERS; i++)
						{
							if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersDataOnline[i][ModeDM])
							{
                                SendClientMessage(i, COLOR_MENSAJES_DE_AVISOS, MsgDMToAll);
                                SetPlayerHealthEx(i, -100);
							}
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1345", "Tú no tienes acceso a el comando /Matar DM.");
					}
				}
		//		14- *       /Spawn [ID]         - Spawnear a un Jugador
				else if (strfind(cmdtext, "/Spawn ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 2)
					{
					    new PlayreSpawn = strval(cmdtext[7]);
						if (IsPlayerConnected(PlayreSpawn))
						{
							if ( IsPlayerInAnyVehicle(PlayreSpawn) )
							{
								PlayersDataOnline[PlayreSpawn][StateMoneyPass] 	= gettime() + 5;
								PlayersDataOnline[PlayreSpawn][VidaOn] = 80.0;
								new Float:PlayerPos[3]; GetPlayerPos(PlayreSpawn, PlayerPos[0], PlayerPos[1], PlayerPos[2]);
								SetPlayerPos(PlayreSpawn, PlayerPos[0], PlayerPos[1], PlayerPos[2]);
							}
							PlayersDataOnline[PlayreSpawn][StateDeath] = 3;
						    SpawnPlayerEx(PlayreSpawn);
						    SetPlayerInteriorEx(PlayreSpawn, 0);
						    SetPlayerVirtualWorldEx(PlayreSpawn, 0);
							CleanDataDeath(PlayreSpawn);
							
							new StringFormat[MAX_TEXT_CHAT];
							new StringFormatEX[MAX_TEXT_CHAT];

							if ( PlayreSpawn != playerid)
							{
								format(StringFormat, sizeof(StringFormat), "%s Te ha spawneado %s con el comando /Spawn [ID].",LOGO_STAFF, PlayersDataOnline[playerid][NameOnline]);
								format(StringFormatEX, sizeof(StringFormatEX), "%s Has spawneado a %s [%i] con el comando /Spawn [ID].",LOGO_STAFF, PlayersDataOnline[PlayreSpawn][NameOnline], PlayreSpawn);
					            SendClientMessage(PlayreSpawn, COLOR_MENSAJES_DE_AVISOS, StringFormat);
							}
							else
							{
								format(StringFormatEX, sizeof(StringFormatEX), "%s Te has spawneado tú mismo con el comando /Spawn [ID].",LOGO_STAFF);
							}

				            SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, StringFormatEX);
							return 1;
						}
						else
						{
							SendInfoMessage(playerid, 0, "1317", "El jugador que desea spawnearlo no se encuentra conectado.");
							return 1;
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1431", "Tú no tienes acceso a el comando /Spawn.");
				        return 1;
					}
				}
		//		14- *       /Matar [ID]         - Matar a un jugador
				else if (strfind(cmdtext, "/Matar ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 3)
					{
						new ID_JugadorAMatar[11];
						strmid(ID_JugadorAMatar, cmdtext, 7, strlen(cmdtext), sizeof(ID_JugadorAMatar));
						if (IsPlayerConnected(strval(ID_JugadorAMatar)))
						{
						    Comandos_Admin(14, playerid, strval(ID_JugadorAMatar), PlayersData[playerid][Admin], 0, "0");
							return 1;
						}
						else
						{
							SendInfoMessage(playerid, 0, "183", "El jugador que desea matarlo no se encuentra conectado.");
							return 1;
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "184", "Tú no tienes acceso a el comando /Matar.");
				        return 1;
					}
				}
		//		15- *       /Estado Todos                		- Cerrar y Abrir el canal /o (Todos)
				else if (strcmp(cmdtext, "/Estado Todos", true, 13) == 0 && strlen(cmdtext) == 13 )
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 1)
					{
						Comandos_Admin(15, playerid, 0, PlayersData[playerid][Admin], 0, "0");
						return 1;
					}
					else
					{
						SendInfoMessage(playerid, 0, "185", "Tú no tienes acceso a el comando /Estado Todos.");
				        return 1;
					}
				}
				 //ShowServerStats(playerid)
		//		19-	*		/Server Stats					- Ver las estadísticas del servidor
				else if (strcmp("/Server Stats", cmdtext, true, 13) == 0 && strlen(cmdtext) == 13)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 8)
					{
                        ShowServerStats(playerid);
						return 1;
					}
					else
					{
						SendInfoMessage(playerid, 0, "1309", "Tú no tienes acceso a el comando /Server Stats.");
				        return 1;
					}
				}
		//		19-	*		/Respawn TodosEx					- Respawear todos los coches
				else if (strcmp("/Respawn TodosEx", cmdtext, true, 16) == 0 && strlen(cmdtext) == 16)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 7)
					{
						new StringFormat[120];
						format(StringFormat, sizeof(StringFormat), "%s Has echo un respawn general.",LOGO_STAFF);
			            SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, StringFormat);

						new IsRespawn[MAX_VEHICLE_COUNT];
						for (new i = 0; i < MAX_PLAYERS; i++)
						{
							if( IsPlayerConnected(i) && IsPlayerInAnyVehicle(i) == 1 && GetPlayerVehicleSeat(i) == 0 )
							{
							    IsRespawn[GetPlayerVehicleID(i)] = 1;
							}
						}

						for (new i = 1; i <= MAX_CAR; i++)
						{
						    if ( IsRespawn[i] != 1 )
						    {
								SetVehicleToRespawnEx(i);
							}
					    }
					}
					else
					{
						SendInfoMessage(playerid, 0, "188", "Tú no tienes acceso a el comando /Respawn TodosEx.");
					}
				}
		//		19-	*		/Respawn Todos					- Respawear todos los coches
				else if (strcmp("/Respawn Todos", cmdtext, true, 14) == 0 && strlen(cmdtext) == 14)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 7)
					{
						Comandos_Admin(19, playerid, 0, PlayersData[playerid][Admin], 0, "0");
						return 1;
					}
					else
					{
						SendInfoMessage(playerid, 0, "188", "Tú no tienes acceso a el comando /Respawn Todos.");
				        return 1;
					}
				}
		//		//  	/Respawn Facción [ID]					- Respawenar Todos los coches de facción
				else if (strfind(cmdtext, "/Respawn Facción ", true) == 0 ||
						 strfind(cmdtext, "/Respawn Faccion ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 5)
					{
						new FaccionID = strval(cmdtext[17]);
					    if ( FaccionID >= CIVIL && FaccionID <= MAX_FACCION )
					    {
							new StringFormat[120];
							format(StringFormat, sizeof(StringFormat), "%s Has echo un respawn a todos los vehículos de la facción: %s.",LOGO_STAFF, FaccionData[FaccionID][NameFaccion]);
				            SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, StringFormat);

							new IsRespawn[MAX_VEHICLE_COUNT];
							for (new i = 0; i < MAX_PLAYERS; i++)
							{
								if( IsPlayerConnected(i) && IsPlayerInAnyVehicle(i) == 1 && GetPlayerVehicleSeat(i) == 0 )
								{
								    IsRespawn[GetPlayerVehicleID(i)] = 1;
								}
							}
							if (FaccionID)
							{
								for (new i = MAX_CAR_DUENO + 1; i <= MAX_CAR_FACCION; i++)
								{
								    if ( IsRespawn[i] != 1 && DataCars[i][Time] == FaccionID)
								    {
										SetVehicleToRespawnExTwo(i);
									}
							    }
						    }
						    else
						    {
								for ( new i = MAX_CAR_FACCION + 1; i <= MAX_CAR_PUBLIC; i++)
								{
								    if ( IsRespawn[i] != 1)
								    {
										SetVehicleToRespawnExTwo(i);
									}
							    }
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "888", "El ID de facción introducida no existe");
					        return 1;
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "889", "Tú no tienes acceso a el comando /Respawn Facción");
				        return 1;
					}
				}

		//		18- *    	/Respawn [ID]					- Respawenar un coche
				else if (strfind(cmdtext, "/Respawn ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 3)
					{
						if (strval(cmdtext[9]) > 0 && strval(cmdtext[9]) <= MAX_CAR_PUBLIC)
						{
							Comandos_Admin(18, playerid, 0, PlayersData[playerid][Admin], strval(cmdtext[9]), "0");
						}
						else
						{
							SendInfoMessage(playerid, 0, "189", "El vehículo que desea hacerle spawn no existe.");
						}
						return 1;
					}
					else
					{
						SendInfoMessage(playerid, 0, "190", "Tú no tienes acceso a el comando /Respawn.");
				        return 1;
					}

				}
		//			/Incendios					- Ver los incendios actuales
				else if (strcmp(cmdtext, "/Incendios", true, 10) == 0 && strlen(cmdtext) == 10 )
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 7)
					{
						ShowIncendios(playerid);
					}
					else
					{
						SendInfoMessage(playerid, 0, "1278", "Tú no tienes acceso a el comando /Incendios.");
				        return 1;
					}

				}
						//		23-	*		/Vida [ID]						- Llevar la vida a un jugador
				else if (strfind(cmdtext, "/Dinero ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 9)
					{
					    new SendString[4];
						strmid(SendString, cmdtext, 6, strlen(cmdtext), sizeof(SendString));

						if (IsPlayerConnected(strval(SendString)))
						{
							Comandos_Admin(23, playerid, strval(SendString), PlayersData[playerid][Admin], 0, "0");
						}
						else
						{
							SendInfoMessage(playerid, 0, "2", "El jugador que desea darle dinero no se encuentra conectado.");
						}

						return 1;
					}
					else
					{
						SendInfoMessage(playerid, 0, "1", "Tú no tienes acceso a el comando /dinero.");
				        return 1;
					}
				}
				// COMANDO: /Res [ID] [DUDA]
		  		else if (strfind(cmdtext, "/Res", true) == 0)
			    {
					MsgAdminUseCommands(9, playerid, cmdtext);
				    if (PlayersData[playerid][Admin] >= 1)
				    {
			  			if (strfind(cmdtext, "/Res ", true) == 0)
					    {
					        new PlayerIDDuda = strvalEx(cmdtext[GetPosSpace(cmdtext, 1)]);
			    		    if ( IsPlayerConnected(PlayerIDDuda) )
						    {
					            new MensajeME[256];
					            new Mensaje[256];
					            new MensajeDudas[256];
					            format(MensajeME, sizeof(MensajeME), "[Dudas] Respondíste a %s[%i]: %s", PlayersDataOnline[PlayerIDDuda][NameOnline], PlayerIDDuda, cmdtext[GetPosSpace(cmdtext, 2)]);
					            format(Mensaje, sizeof(Mensaje), "[Dudas] %s[%i] te responde una duda: %s", PlayersDataOnline[playerid][NameOnline], playerid, cmdtext[GetPosSpace(cmdtext, 2)]);
								format(MensajeDudas, sizeof(MensajeDudas), "[Dudas] %s respondió una duda a %s[%i]", PlayersDataOnline[playerid][NameOnline], PlayersDataOnline[PlayerIDDuda][NameOnline], PlayerIDDuda);
								SendClientMessage(PlayerIDDuda, COLOR_DUDAS, Mensaje);
								SendClientMessage(playerid, COLOR_DUDAS, MensajeME);

								for (new i = 0; i < MAX_PLAYERS; i++)
								{
									if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersData[i][Admin])
									{
									    SendClientMessage(i, COLOR_DUDAS, MensajeDudas);
									}
								}

								print(Mensaje);
						    }
						    else
						    {
								SendInfoMessage(playerid, 0, "1488", "Al usuario que desea contestarle un duda no se encuentra conectado");
						    }
						}
						else
						{
							SendInfoMessage(playerid, 0, "1489", "Recuerde al utilizar el comando /Res [ID] [Duda] dejar un [ESPACIO]. Ejemplo: /Res 22 MG es Metagaming");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1490", "Tú no tienes acceso a el comando /Res.");
					}
				}
		//			/IrC [ID]					- Ir a un Coche
				else if (strfind(cmdtext, "/IrC ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 7)
					{
					    if (strval(cmdtext[5]) >= 1 && strval(cmdtext[5]) <= MAX_CAR )
					    {
						    new Float:VehiclePoss[3];GetVehiclePos(strval(cmdtext[5]), VehiclePoss[0], VehiclePoss[1], VehiclePoss[2]);
						    SetPlayerPos(playerid,  VehiclePoss[0], VehiclePoss[1], VehiclePoss[2] + 2);

						    SetPlayerInteriorEx(playerid, DataCars[strval(cmdtext[5])][InteriorLast]);
						    SetPlayerVirtualWorldEx(playerid, DataCars[strval(cmdtext[5])][WorldLast]);
							return 1;
						}
						else
						{
							SendInfoMessage(playerid, 0, "553", "El ID el vehículo introducído no existe.");
					        return 1;
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "891", "Tú no tienes acceso a el comando /IrC.");
				        return 1;
					}

				}
		//			/IrCa [ID]					- Ir a una casa
				else if (strfind(cmdtext, "/IrCa ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 7)
					{
				        new IdHouse = strval(cmdtext[GetPosSpace(cmdtext, 1)]);
						if ( IdHouse > 0 && IdHouse <= MAX_HOUSE )
						{
							SetPlayerPos(playerid, HouseData[IdHouse][PosX], HouseData[IdHouse][PosY], HouseData[IdHouse][PosZ]);
							SetPlayerFacingAngle(playerid, HouseData[IdHouse][PosZZ]);
		                }
		                else
		                {
							SendInfoMessage(playerid, 0, "1275", "El ID de casa introducido no existe!");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1274", "Tú no tienes acceso a el comando /IrCa.");
					}

				}
		//			/IrN [ID]					- Ir a un negocio
				else if (strfind(cmdtext, "/IrN ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 7)
					{
				        new BizzID = strval(cmdtext[GetPosSpace(cmdtext, 1)]);
						if ( BizzID > 0 && BizzID <= MAX_BIZZ )
						{
							SetPlayerPos(playerid, NegociosData[BizzID][PosOutX], NegociosData[BizzID][PosOutY], NegociosData[BizzID][PosOutZ]);
							SetPlayerFacingAngle(playerid, NegociosData[BizzID][PosOutZZ]);
		                }
		                else
		                {
							SendInfoMessage(playerid, 0, "1277", "El ID de negocio introducido no existe!");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1276", "Tú no tienes acceso a el comando /IrN.");
					}

				}
		//			/Debug Info
			  	else if (strcmp("/Debug Info", cmdtext, true, 11) == 0 && strlen(cmdtext) == 11)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 8)
					{
					    new Found;
						new StringFormat[MAX_TEXT_CHAT];
						for (new i = 1; i <= MAX_CAR; i++)
						{
					        if ( IsVehicleBug(i, false) )
					        {
								format(StringFormat, sizeof(StringFormat), "%s El coche con ID %i se encuentra bugueado.",LOGO_STAFF, i);
					            SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, StringFormat);
								Found++;
							}
						}
						if ( Found )
						{
							format(StringFormat, sizeof(StringFormat), "%s Hay en total %i coches bugueados.",LOGO_STAFF, Found);
				            SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, StringFormat);
						}
						else
						{
							SendInfoMessage(playerid, 0, "1370", "No se encontrarón vehículos bugueados!");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1371", "Tú no tienes acceso a el comando /Debug Info.");
				        return 1;
					}
				}
		//			/Traerc Bug
			  	else if (strcmp("/Traerc Bug", cmdtext, true, 11) == 0 && strlen(cmdtext) == 11)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 8)
					{
					    new Found;
						new Float:MyPoss[3];GetPlayerPos(playerid, MyPoss[0], MyPoss[1], MyPoss[2]);
						for (new i = 1; i <= MAX_CAR; i++)
						{
						    if ( GetVehicleVirtualWorld(i) > 999 && !IsWorldOfGarage(GetVehicleVirtualWorld(i)) )
						    {
								SetVehiclePos(i,  MyPoss[0] + 3, MyPoss[1], MyPoss[2]);
								LinkVehicleToInteriorEx(i, GetPlayerInteriorEx(playerid));
								SetVehicleVirtualWorldEx(i, GetPlayerVirtualWorld(playerid));
								Found++;
							}
						}
						if ( Found )
						{
							new StringFormat[MAX_TEXT_CHAT];
							format(StringFormat, sizeof(StringFormat), "%s Has desbugueado %i coches.",LOGO_STAFF, Found);
				            SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, StringFormat);
						}
						else
						{
							SendInfoMessage(playerid, 0, "1308", "No se encontrarón vehículos bugueados!");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1307", "Tú no tienes acceso a el comando /Traerc Bug.");
				        return 1;
					}
				}
		//			/TraerC [ID]					- Traer un coche
				else if (strfind(cmdtext, "/TraerC ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 7)
					{
						if (strval(cmdtext[8]) > 0 && strval(cmdtext[8]) <= MAX_CAR_PUBLIC)
						{

							RemoveVehicleHidden(strval(cmdtext[8]));
							new Float:MyPoss[3];GetPlayerPos(playerid, MyPoss[0], MyPoss[1], MyPoss[2]);
							SetVehiclePos(strval(cmdtext[8]),  MyPoss[0] + 3, MyPoss[1], MyPoss[2]);

							LinkVehicleToInteriorEx(strval(cmdtext[8]), GetPlayerInteriorEx(playerid));
							SetVehicleVirtualWorldEx(strval(cmdtext[8]), GetPlayerVirtualWorld(playerid));
						}
						else
						{
							SendInfoMessage(playerid, 0, "1447", "El vehículo que desea traer no existe.");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "189", "Tú no tienes acceso a el comando /TraerC.");
				        return 1;
					}
				}
		//		20-	*		/Clima [Tipo]					- Cambiar el clima
				else if (strfind(cmdtext, "/Clima ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 4)
					{
					    new SendString[4];
						strmid(SendString, cmdtext, 7, strlen(cmdtext), sizeof(SendString));

						if ( strval(SendString) > 45)
						{
							SendInfoMessage(playerid, 0, "191", "El tipo de clima esta fuera de los límites, recuerda que el máximo es 45.");
						}
						else
						{
		       				Comandos_Admin(20, playerid, 0, PlayersData[playerid][Admin], strval(SendString), "0");
						}
						return 1;
					}
					else
					{
						SendInfoMessage(playerid, 0, "192", "Tú no tienes acceso a el comando /Clima.");
				        return 1;
					}

				}
		//		21- *       /MsgEX [Estilo] [Texto]         - Mensaje EX
				else if (strfind(cmdtext, "/MsgEX ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 9)
					{
						new Datos_Picados[4];
						new DatosOriginales[150];

						strmid(DatosOriginales, cmdtext, 7, strlen(cmdtext), sizeof(DatosOriginales));
						new wPos;

						wPos = strfind(DatosOriginales, " ", false); // HOLA³QUE³PASA³
						if (wPos != -1 || wPos > 4)
						{
							strmid(Datos_Picados[0], DatosOriginales, 0, wPos, sizeof(DatosOriginales));
							strdel(DatosOriginales, 0, wPos + 1);

							if ( strval(Datos_Picados[0]) >= 0 && strval(Datos_Picados[0]) <= 6  )
							{
							    if (strval(Datos_Picados[0]) != 2)
							    {
									Comandos_Admin(21, playerid, 0, PlayersData[playerid][Admin], strval(Datos_Picados[0]), DatosOriginales);
								}
								else
								{
									SendInfoMessage(playerid, 0, "193", "El estilo número 2 esta deshabilitado por razones de bugs.");
								}
	    					}
							else
							{
									SendInfoMessage(playerid, 0, "194", "El número tipo de estilo esta fuera de los límites, recurde que el estilo debe comprender entre 0 y 6.");
							}
							return 1;
						}
						else
						{
							SendInfoMessage(playerid, 0, "195", "Ha introducído mal el sintaxis del comando /MsgEX [ESTILO] [TEXTO]. Ejemplo correcto: /MsgEx 2 Hola Mundo.");
							return 1;
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "196", "Tú no tienes acceso a el comando /MsgEX.");
				        return 1;
					}
				}
				// /Staff
				else if (strcmp("/Staff", cmdtext, true, 6) == 0 && strlen(cmdtext) == 6)
				{
				    new MsgAdminsOn[100];
				    new FoundAdmin;
					for (new i = 0; i < MAX_PLAYERS; i++)
					{
						if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersData[i][Admin] && PlayersData[i][Admin] != 9 && PlayersDataOnline[i][AdminOn] )
						{
						    if ( !FoundAdmin )
						    {
							    SendClientMessage(playerid, 0x505050FF, "{505050}»»»»»»»»»»»»»»»»»» {008228}S{00B428}taff {008228}O{00B428}nline {505050}««««««««««««««««««");
								FoundAdmin++;
							}
							format(MsgAdminsOn, sizeof(MsgAdminsOn), "{0037FF}* %s %s[%i]", AdminsRangos[PlayersData[i][Admin] - 1], PlayersDataOnline[i][NameOnlineFix], i);
						    SendClientMessage(playerid, 0x505050FF, MsgAdminsOn);
						}
					}
					if ( !FoundAdmin )
					{
					    SendClientMessage(playerid, 0x505050FF, "{910000}»»»»»»»»»»»»» {E10000}No hay miembros del staff en servicio {910000}«««««««««««««");
					}
				}
		//		22- *		/Staff [ID] [Nivel]				- Dar un nivel a un miembro de el Staff
				else if (strfind(cmdtext, "/Staff ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 9)
					{
						new Datos_Picados[4];
						new DatosOriginales[120];

						strmid(DatosOriginales, cmdtext, 7, strlen(cmdtext), sizeof(DatosOriginales));
						new wPos;

						wPos = strfind(DatosOriginales, " ", false); // HOLA³QUE³PASA³
						if (wPos != -1 || wPos > 4)
						{
							strmid(Datos_Picados[0], DatosOriginales, 0, wPos, sizeof(DatosOriginales));
							strdel(DatosOriginales, 0, wPos + 1);
							if ( strval(DatosOriginales) <= 9 && strval(DatosOriginales) >= 0 )
							{
								if (IsPlayerConnected(strval(Datos_Picados[0])))
								{
								    Comandos_Admin(22, playerid, strval(Datos_Picados[0]), PlayersData[playerid][Admin], strval(DatosOriginales), "0");
								    return 1;
								}
								else
								{
									SendInfoMessage(playerid, 0, "197", "El jugador del Staff al que se refiere no esta conectado.");
									return 1;
								}
						    }
						    else
							{
								SendInfoMessage(playerid, 0, "198", "El número de level de Staff debe estar comprendido entre 0 y 8, donde 0 sera igual a expulsión.");
								return 1;
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "199", "Ha introducído mal el sintaxis del comando /Staff. Ejemplo correcto: /Staff 22 1.");
							return 1;
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "200", "Tú no tienes acceso a el comando /Staff.");
				        return 1;
					}
				}
		//			/Skin [ID]                  - Forzar a cambiar un Skin a un jugador
				else if (strfind(cmdtext, "/Skin ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 6)
					{
					    new playeridSkin[5];
					    strmid(playeridSkin, cmdtext, 6, strlen(cmdtext), sizeof(playeridSkin));
						if ( IsPlayerConnected(strval(playeridSkin)) )
						{
	                        SetPlayerSelectedTypeSkin(strval(playeridSkin), false);
						}
						else
						{
							SendInfoMessage(playerid, 0, "202", "El jugador no se encuentra conectado.");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "203", "Tú no tienes acceso a el comando /Skin.");
				        return 1;
					}
				}
		//			/StatsEx [ID]                  - Ver las estadisticas de un jugador
				else if (strfind(cmdtext, "/StatsEx ", true) == 0)
				{
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 7)
					{
						if ( IsPlayerConnected(strval(cmdtext[9])) )
						{
							GetPlayerStats(strval(cmdtext[9]), playerid);
						}
						else
						{
							SendInfoMessage(playerid, 0, "230", "El jugador no se encuentra conectado.");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "231", "Tú no tienes acceso a el comando /StastEx.");
				        return 1;
					}
				}
		//			/Aparcar NFS                   - Aparcar un coche un NFS en un concecionarios
			  	else if (strcmp("/Aparcar NFS", cmdtext, true, 12) == 0 && strlen(cmdtext) == 12)
			    {
					if ( PlayersData[playerid][Faccion] == NFS && PlayersData[playerid][Rango] <= 1)
				    {
						new MyNearCar = IsPlayerInNearVehicle(playerid);
		   				if ( MyNearCar)
					    {
					        if ( MyNearCar <= MAX_CAR_DUENO)
					        {
					            if ( IsPlayerInConcencionario(playerid) )
					            {
					                if ( strlen(DataCars[MyNearCar][Dueno]) == 1 )
					                {
								        AparcarVehicle(playerid, MyNearCar);
									}
									else
									{
										SendInfoMessage(playerid, 0, "712", "Vehículos con dueño no puedes aparcar");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "713", "No te encuentras en el concecionario");
								}
					        }
							else
							{
								SendInfoMessage(playerid, 0, "714", "Solo se pueden aparcar vehículos públicos");
							}
					    }
					}
					else
					{
						SendInfoMessage(playerid, 0, "715", "Usted no es Jefe ni Encargado de NFS");
				    }
			    }
		//			/AparcarEx                   - Aparcar cualquier coche donde quieras
			  	else if (strcmp("/AparcarEx", cmdtext, true, 10) == 0 && strlen(cmdtext) == 10)
			    {
					MsgAdminUseCommands(9, playerid, cmdtext);
					if (PlayersData[playerid][Admin] >= 7)
					{
						new MyNearCar = IsPlayerInNearVehicle(playerid);
		   				if ( MyNearCar)
					    {
					        if ( MyNearCar <= MAX_CAR_DUENO)
					        {
						        AparcarVehicle(playerid, MyNearCar);
							}
							else
							{
								SendInfoMessage(playerid, 0, "287", "Solo se pueden aparcar vehículos públicos");
							}
					    }
					}
					else
					{
						SendInfoMessage(playerid, 0, "286", "Tú no tienes acceso a el comando /AparcarEx.");
				        return 1;
					}
				}
			    // NO COMMANDS SEND
				else
				{
					SendInfoMessage(playerid, 0, "204", "El comando introducído no es válido, para más información consulte /Ayuda");
				}
			}
			else
			{
				SendInfoMessage(playerid, 0, "205", "El comando introducído no existe, para más información consulte /Ayuda");
			}
		}
		else
		{
			SendInfoMessage(playerid, 0, "1091", "No puede utilizar comandos mientras está en las cámaras de seguridad!");
		}
	}
	else
	{
		SendInfoMessage(playerid, 0, "206", "Debe ingresar a el servidor antes de utilizar cualquier comando o ha sido silenciado.");
	}
	return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	if ( IsVehicleOpen(playerid, vehicleid, ispassenger) )
	{
   		SetVehicleParamsForPlayer(vehicleid, playerid, 0, 0);
	}
	else if ( vehicleid <= MAX_CAR_FACCION )
	{
		SetVehicleParamsForPlayer(vehicleid, playerid, 0, 1);
	    if (IsFixBikeEnter(playerid, vehicleid) )
	    {
	        if (coches_Todos_Type[GetVehicleModel(vehicleid) - 400] == TREN )
	        {
	   			SendInfoMessage(playerid, 0, "1052", "Este Tren se encuentra cerrado");
   			}
   			else if ( coches_Todos_Type[GetVehicleModel(vehicleid) - 400] == BOTE )
   			{
	   			SendInfoMessage(playerid, 0, "1105", "Este bote se encuentra cerrado");
			}
   			else
   			{
	   			SendInfoMessage(playerid, 0, "219", "Esta moto se encuentra cerrada");
   			}
		}
		else
		{
	   		SendInfoMessage(playerid, 0, "220", "Este coche se encuentra cerrado");
		}
	}

    /*new mss[200];
    format(mss, sizeof(mss), "ID: %i", vehicleid);
	SendInfoMessage(playerid, 2, "0", mss);*/
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	if ( coches_Todos_Type[GetVehicleModel(vehicleid) - 400] != BICI )
	{
	    if ( PlayersDataOnline[playerid][PistaIDp] != -1 )
	    {
			ForcePutPlayerInVehicle(playerid, PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR],0);
			if (Pistas[PlayersDataOnline[playerid][PistaIDp]][Used] != RACE_STATE_COMPITIENDO)
			{
				TogglePlayerControllable(playerid, false);
			}
	    }
	    else
	    {
			new Float:CurrentDamageVeh;
			GetVehicleHealth(vehicleid, CurrentDamageVeh);
			IsVehicleExplotion(playerid, vehicleid, CurrentDamageVeh, GetPlayerVehicleSeat(playerid));
		}
	}
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	return 1;
}
public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid)
{
	if ( issuerid != INVALID_PLAYER_ID )
	{
	   if ( HaveObjectByTypeAndShow(issuerid, TYPE_TASER) && (PlayersData[issuerid][Faccion] == LSPD || PlayersData[issuerid][Faccion] == SFPD) )
	   {
			new MsgTaserIntentar[MAX_TEXT_CHAT];
			if ( PlayersDataOnline[playerid][IsTeazer] <= gettime() )
			{
				format(MsgTaserIntentar, sizeof(MsgTaserIntentar), "darle con el táser a %s", PlayersDataOnline[playerid][NameOnlineFix]);
				if (IntentarAccion(issuerid, MsgTaserIntentar, random(3)))
				{
				    PlayersDataOnline[playerid][IsTeazer] = gettime() + 180;
					SetPlayerDrunkLevel(playerid, 5000);
				}
				PlayPlayerStreamSound(playerid, 6003);
			}
			else
			{
				SendInfoMessage(issuerid, 0, "746", "Ya ha ese jugador le dierón con un táser!");
			}
	   }
	}
}
public OnPlayerEnterCheckpoint(playerid)
{
	if ( PlayersData[playerid][IsPlayerInBizz] )
	{
		new TypeBizz = NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type];
		// Tiendas de ropa
		if (PlayersData[playerid][IsPlayerInBizz] && strfind(NegociosType[TypeBizz][TypeName], "Ropa", false) == 0)
		{
			SendInfoMessage(playerid, 2, "0", "Use (/Comprar {Ropa, Lentes, Gorra, Reloj, Casco}) para ingresar en el vestidor!");
		}
		// Barberías
		else if ( TypeBizz >= 27 && TypeBizz <= 29 )
		{
			SendInfoMessage(playerid, 2, "0", "Use (/Comprar Peluca) para comprar pelucas o (/Comprar Boina) para boinas.");
		}
		// CluckinBell;
		else if ( TypeBizz == 22 )
		{
			ShowMenuForPlayer(CluckinBell, playerid);
		    TogglePlayerControllableEx(playerid, 0);
			PlayersDataOnline[playerid][InMenu] = GetPlayerMenu(playerid);
		}
		// BurgerShot;
		else if ( TypeBizz == 23 )
		{
			ShowMenuForPlayer(BurgerShot, playerid);
		    TogglePlayerControllableEx(playerid, 0);
			PlayersDataOnline[playerid][InMenu] = GetPlayerMenu(playerid);
		}
		// PizzaStack;
		else if ( TypeBizz == 24 )
		{
			ShowMenuForPlayer(PizzaStack, playerid);
		    TogglePlayerControllableEx(playerid, 0);
			PlayersDataOnline[playerid][InMenu] = GetPlayerMenu(playerid);
		}
		// JaysDiner;
		else if ( TypeBizz == 7 )
		{
			ShowMenuForPlayer(JaysDiner, playerid);
		    TogglePlayerControllableEx(playerid, 0);
			PlayersDataOnline[playerid][InMenu] = GetPlayerMenu(playerid);
		}
		// RingDonuts;
		else if (TypeBizz == 6 )
		{
			ShowMenuForPlayer(RingDonuts, playerid);
		    TogglePlayerControllableEx(playerid, 0);
			PlayersDataOnline[playerid][InMenu] = GetPlayerMenu(playerid);
		}
		// Armerias;
		else if ( TypeBizz >= 8 &&
				TypeBizz <= 12 )
		{
			if ( PlayersData[playerid][Licencias][0] )
			{
				ShowMenuForPlayer(Menu_Principal_Armas, playerid);
				PlayersDataOnline[playerid][InMenu] = GetPlayerMenu(playerid);
				TogglePlayerControllableEx(playerid, 0);
			}
			else
			{
				SendInfoMessage(playerid, 0, "1092", "Necesitas una licencia de armas para comprar en la armeria");
			}
		}
		// 27/7;
		else if ( TypeBizz >= 16 &&
				TypeBizz <= 17 )
		{
			ShowMenuForPlayer(M24_7, playerid);
			PlayersDataOnline[playerid][InMenu] = GetPlayerMenu(playerid);
			TogglePlayerControllableEx(playerid, 0);
		}
	}
	else
	{
		DisablePlayerCheckpoint(playerid);
	}
	return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
	return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	if ( PlayersDataOnline[playerid][PistaIDp] == -1 )
	{
	    if ( PlayersData[playerid][Faccion] == NFS && PlayersData[playerid][Rango] <= 1 ||
			 PlayersData[playerid][Faccion] == NFS && PlayersData[playerid][Rango] == 3 )
	    {
			if ( IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) == 0 )
			{
				if ( GetPlayerVehicleID(playerid) <= MAX_CAR_DUENO )
				{
					if ( strlen(DataCars[GetPlayerVehicleID(playerid)][Dueno]) != 1 )
					{
					    if ( !DataCars[GetPlayerVehicleID(playerid)][Lock] )
					    {
						    RemoveDuenoOfVehicle(GetPlayerVehicleID(playerid), 1);
						    new MsgDropeo[MAX_TEXT_CHAT];
						    format(MsgDropeo, sizeof(MsgDropeo), "Vehículo dropeado correctamente, recompenza de $%i", coches_Todos_Precios[GetVehicleModel(GetPlayerVehicleID(playerid)) - 400] / 3);
							SendInfoMessage(playerid, 3, "0", MsgDropeo);
							GivePlayerMoneyEx(playerid, coches_Todos_Precios[GetVehicleModel(GetPlayerVehicleID(playerid)) - 400] / 3);
						}
						else
						{
							SendInfoMessage(playerid, 0, "718", "Éste vehículo se encuentra cerrado, no puede dropear un vehículo cerrado!");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "719", "Éste vehículo ya está sin dueño, no necesita dropeo");
					}
				}
				else
				{
					SendInfoMessage(playerid, 0, "720", "Éste vehículo no es público de venta, no se puede dropear");
				}
			}
			else
			{
				SendInfoMessage(playerid, 0, "721", "Monte en el vehículo que desea dropear de conductor para finalizar el dropeo"); //
			}
		}
		else
		{
			DisablePlayerRaceCheckpoint(playerid);
		}
	}
	else
	{
		SetPlayerNextCheckPointRace(playerid);
	}
	return 1;
}
public OnPlayerLeaveRaceCheckpoint(playerid)
{
	return 1;
}
public OnRconCommand(cmd[])
{
	/*if (strfind(cmd, "reiniciar", true) == 0)
	{
		if ( strlen(cmd) > 10 )
		{

			format(ReasonReset, sizeof(ReasonReset), "{00A5FF}Razón del reinicio: {00F50A}%s", cmd);
		}
		else
		{
			format(ReasonReset, sizeof(ReasonReset), "{00A5FF}Razón del reinicio: {00F50A}[No especificada]");
		}
		ResetServer();
	}*/
	// END RCON
//	printf("AA-> %s", cmd);
	return 1;
}

public OnPlayerRequestSpawn(playerid)
{
	if (PlayersDataOnline[playerid][State] == 1)
	{
		SendInfoMessage(playerid, 0, "207", "Debe loguearse antes de entrar al servidor.");
	}
	else if (PlayersDataOnline[playerid][State] == 2)
	{
		SendInfoMessage(playerid, 0, "208", "Debe regístrarse antes de entrar al servidor.");
	}
	return 0;
}

public OnObjectMoved(objectid)
{
	return 1;
}

public OnPlayerObjectMoved(playerid, objectid)
{
	return 1;
}

public OnPlayerPickUpPickup(playerid, pickupid)
{
	if ( PlayersDataOnline[playerid][InPickup] != pickupid )
	{
		HideTextDrawsTelesAndInfo(playerid);
	    PlayersDataOnline[playerid][InPickup] = pickupid;
		// FACCIONES
        if ( pickupid >= FaccionData[GOBIERNO][PickupidOutF] &&
             pickupid <= FaccionData[MAX_FACCION][PickupidInF] )
        {
            for(new i=GOBIERNO;i<=MAX_FACCION;i++)
            {
                if ( FaccionData[i][PickupidOutF] == pickupid || FaccionData[i][PickupidInF] == pickupid )
                {
                    if ( FaccionData[i][PickupidOutF] == pickupid )
                    {
	                    PlayersDataOnline[playerid][MyPickupX]  = FaccionData[i][PickupIn_X];
	                    PlayersDataOnline[playerid][MyPickupY]  = FaccionData[i][PickupIn_Y];
	                    PlayersDataOnline[playerid][MyPickupZ]  = FaccionData[i][PickupIn_Z];
	                    PlayersDataOnline[playerid][MyPickupZZ] = FaccionData[i][PickupIn_ZZ];
	                    PlayersDataOnline[playerid][MyPickupInterior] = FaccionData[i][InteriorFaccion];

						PlayersDataOnline[playerid][MyPickupX_Now] = FaccionData[i][PickupOut_X];
						PlayersDataOnline[playerid][MyPickupY_Now] = FaccionData[i][PickupOut_Y];
						PlayersDataOnline[playerid][MyPickupZ_Now] = FaccionData[i][PickupOut_Z];
						PlayersDataOnline[playerid][MyPickupWorld] = FaccionData[i][World];
	                }
	                else
	                {
	                    PlayersDataOnline[playerid][MyPickupX]  = FaccionData[i][PickupOut_X];
	                    PlayersDataOnline[playerid][MyPickupY]  = FaccionData[i][PickupOut_Y];
	                    PlayersDataOnline[playerid][MyPickupZ]  = FaccionData[i][PickupOut_Z];
	                    PlayersDataOnline[playerid][MyPickupZZ] = FaccionData[i][PickupOut_ZZ];
						PlayersDataOnline[playerid][MyPickupWorld] = 0;
	                    PlayersDataOnline[playerid][MyPickupInterior] = 0;

						PlayersDataOnline[playerid][MyPickupX_Now] = FaccionData[i][PickupIn_X];
						PlayersDataOnline[playerid][MyPickupY_Now] = FaccionData[i][PickupIn_Y];
						PlayersDataOnline[playerid][MyPickupZ_Now] = FaccionData[i][PickupIn_Z];
					}
					PlayersDataOnline[playerid][MyPickupLock]  = FaccionData[i][Lock];
                    TextDrawShowForPlayer(playerid, FaccionTextDraws[i]);
                    PlayersDataOnline[playerid][MyTextDrawShow] = FaccionTextDraws[i];

		            PlayersDataOnline[playerid][InSpecialAnim] = GetPlayerSpecialAction(playerid);
                    PlayersDataOnline[playerid][InPickupTele] = true;
                    break;
				}
            }
        }
		// TELES
        else if ( pickupid >= Teles[0][PickupID] &&
             	  pickupid <= Teles[MAX_TELE][PickupID] )
        {
            for(new i=0;i<=MAX_TELE;i++)
            {
                if ( Teles[i][PickupID] == pickupid )
                {
	                PlayersDataOnline[playerid][MyPickupX]  	= Teles[Teles[i][PickupIDGo]][PosX];
	                PlayersDataOnline[playerid][MyPickupY]  	= Teles[Teles[i][PickupIDGo]][PosY];
	                PlayersDataOnline[playerid][MyPickupZ]  	= Teles[Teles[i][PickupIDGo]][PosZ];
	                PlayersDataOnline[playerid][MyPickupZZ] 	= Teles[Teles[i][PickupIDGo]][PosZZ];
	                PlayersDataOnline[playerid][MyPickupInterior] = Teles[Teles[i][PickupIDGo]][Interior];
	                if ( !PlayersData[playerid][IsPlayerInVehInt] )
	                {
						PlayersDataOnline[playerid][MyPickupWorld] 	= Teles[Teles[i][PickupIDGo]][World];
					}
					else
					{
						PlayersDataOnline[playerid][MyPickupWorld] = GetVagonByVagonID(PlayersData[playerid][IsPlayerInVehInt], Teles[Teles[i][PickupIDGo]][World]);
					}
					PlayersDataOnline[playerid][MyPickupLock]  	= Teles[i][Lock];

	                PlayersDataOnline[playerid][MyPickupX_Now]  = Teles[i][PosX];
	                PlayersDataOnline[playerid][MyPickupY_Now]  = Teles[i][PosY];
	                PlayersDataOnline[playerid][MyPickupZ_Now]  = Teles[i][PosZ];

                    TextDrawShowForPlayer(playerid, TelesTextDraws[i]);
                    PlayersDataOnline[playerid][MyTextDrawShow] = TelesTextDraws[i];

		            PlayersDataOnline[playerid][InSpecialAnim] = GetPlayerSpecialAction(playerid);
                    PlayersDataOnline[playerid][InPickupTele] 	= true;
                    break;
                }
            }
        }
        // NEGOCIOS
        else if ( pickupid >= NegociosData[1][PickupOutId] &&
             	  pickupid <= NegociosData[MAX_BIZZ][PickupOutId] )
        {
            for(new i=1;i<=MAX_BIZZ;i++)
            {
                if ( NegociosData[i][PickupOutId] == pickupid )
                {
		            PlayersDataOnline[playerid][MyPickupX]  	= NegociosType[NegociosData[i][Type]][PosInX];
		            PlayersDataOnline[playerid][MyPickupY]  	= NegociosType[NegociosData[i][Type]][PosInY];
		            PlayersDataOnline[playerid][MyPickupZ]  	= NegociosType[NegociosData[i][Type]][PosInZ];
		            PlayersDataOnline[playerid][MyPickupZZ] 	= NegociosType[NegociosData[i][Type]][PosInZZ];
		            PlayersDataOnline[playerid][MyPickupInterior] = NegociosType[NegociosData[i][Type]][InteriorId];
					PlayersDataOnline[playerid][MyPickupWorld] 	= NegociosData[i][World];
					PlayersDataOnline[playerid][MyPickupLock]  	= NegociosData[i][Lock];

		            PlayersDataOnline[playerid][MyPickupX_Now]  = NegociosData[i][PosOutX];
		            PlayersDataOnline[playerid][MyPickupY_Now]  = NegociosData[i][PosOutY];
		            PlayersDataOnline[playerid][MyPickupZ_Now]  = NegociosData[i][PosOutZ];

		            TextDrawShowForPlayer(playerid, NegociosTextDraws[i]);
		            PlayersDataOnline[playerid][MyTextDrawShow] = NegociosTextDraws[i];

		            PlayersDataOnline[playerid][InSpecialAnim]  = GetPlayerSpecialAction(playerid);
		            PlayersDataOnline[playerid][InPickupTele] 	= true;
		            break;
	            }
            }
        }
        // NEGOCIOS TYPE
        else if ( PlayersData[playerid][IsPlayerInBizz] && pickupid >= NegociosType[0][PickupId] &&
             	  pickupid <= NegociosType[MAX_BIZZ_TYPE][PickupId] )
        {
            for(new i=0;i<=MAX_BIZZ_TYPE;i++)
            {
                if ( NegociosType[i][PickupId] == pickupid )
                {
		            PlayersDataOnline[playerid][MyPickupX]  	= NegociosData[PlayersData[playerid][IsPlayerInBizz]][PosOutX];
		            PlayersDataOnline[playerid][MyPickupY]  	= NegociosData[PlayersData[playerid][IsPlayerInBizz]][PosOutY];
		            PlayersDataOnline[playerid][MyPickupZ]  	= NegociosData[PlayersData[playerid][IsPlayerInBizz]][PosOutZ];
		            PlayersDataOnline[playerid][MyPickupZZ] 	= NegociosData[PlayersData[playerid][IsPlayerInBizz]][PosOutZZ];
		            PlayersDataOnline[playerid][MyPickupInterior] = NegociosData[PlayersData[playerid][IsPlayerInBizz]][InteriorOut];
					PlayersDataOnline[playerid][MyPickupWorld] 	= 0;
					PlayersDataOnline[playerid][MyPickupLock]  	= NegociosData[PlayersData[playerid][IsPlayerInBizz]][Lock]; // NegociosData[MyWorld][Lock];

		            PlayersDataOnline[playerid][MyPickupX_Now]  = NegociosType[i][PosInX];
		            PlayersDataOnline[playerid][MyPickupY_Now]  = NegociosType[i][PosInY];
		            PlayersDataOnline[playerid][MyPickupZ_Now]  = NegociosType[i][PosInZ];

		            TextDrawShowForPlayer(playerid, NegociosTextDraws[PlayersData[playerid][IsPlayerInBizz]]);
		            PlayersDataOnline[playerid][MyTextDrawShow] = NegociosTextDraws[PlayersData[playerid][IsPlayerInBizz]];

		            PlayersDataOnline[playerid][InSpecialAnim]  = GetPlayerSpecialAction(playerid);
		            PlayersDataOnline[playerid][InPickupTele] 	= true;
		            break;
	            }
            }
        }
        // CASAS
		else if ( pickupid >= HouseData[1][PickupId] &&
             	  pickupid <= HouseData[MAX_HOUSE][PickupId] )
        {
            for(new i=1;i<=MAX_HOUSE;i++)
            {
                if ( HouseData[i][PickupId] == pickupid )
                {
		            PlayersDataOnline[playerid][MyPickupX]  	= TypeHouse[HouseData[i][TypeHouseId]][PosX];
		            PlayersDataOnline[playerid][MyPickupY]  	= TypeHouse[HouseData[i][TypeHouseId]][PosY];
		            PlayersDataOnline[playerid][MyPickupZ]  	= TypeHouse[HouseData[i][TypeHouseId]][PosZ];
		            PlayersDataOnline[playerid][MyPickupZZ] 	= TypeHouse[HouseData[i][TypeHouseId]][PosZZ];
		            PlayersDataOnline[playerid][MyPickupInterior] = TypeHouse[HouseData[i][TypeHouseId]][Interior];
					PlayersDataOnline[playerid][MyPickupWorld] 	= HouseData[i][World];
					PlayersDataOnline[playerid][MyPickupLock]  	= HouseData[i][Lock];

		            PlayersDataOnline[playerid][MyPickupX_Now]  = HouseData[i][PosX];
		            PlayersDataOnline[playerid][MyPickupY_Now]  = HouseData[i][PosY];
		            PlayersDataOnline[playerid][MyPickupZ_Now]  = HouseData[i][PosZ];

		            TextDrawShowForPlayer(playerid, CasasTextDraws[i]);
		            PlayersDataOnline[playerid][MyTextDrawShow] = CasasTextDraws[i];

		            PlayersDataOnline[playerid][InSpecialAnim] = GetPlayerSpecialAction(playerid);
		            PlayersDataOnline[playerid][InPickupTele] 	= true;
		            break;
	            }
            }
		}
        // CASAS TYPE
        else if ( PlayersData[playerid][IsPlayerInHouse] && pickupid >= TypeHouse[0][PickupId] &&
             	  pickupid <= TypeHouse[MAX_HOUSE_TYPE][PickupId] )
        {
            for(new i=0;i<=MAX_HOUSE_TYPE;i++)
            {
                if ( TypeHouse[i][PickupId] == pickupid )
                {
		            PlayersDataOnline[playerid][MyPickupX]  	= HouseData[PlayersData[playerid][IsPlayerInHouse]][PosX];
		            PlayersDataOnline[playerid][MyPickupY]  	= HouseData[PlayersData[playerid][IsPlayerInHouse]][PosY];
		            PlayersDataOnline[playerid][MyPickupZ]  	= HouseData[PlayersData[playerid][IsPlayerInHouse]][PosZ];
		            PlayersDataOnline[playerid][MyPickupZZ] 	= HouseData[PlayersData[playerid][IsPlayerInHouse]][PosZZ];
		            PlayersDataOnline[playerid][MyPickupInterior] = 0; // HouseData[MyWorld][Interior];
					PlayersDataOnline[playerid][MyPickupWorld] 	= 0;
					PlayersDataOnline[playerid][MyPickupLock]  	= HouseData[PlayersData[playerid][IsPlayerInHouse]][Lock]; // HouseData[MyWorld][Lock];

		            PlayersDataOnline[playerid][MyPickupX_Now]  = TypeHouse[i][PosX];
		            PlayersDataOnline[playerid][MyPickupY_Now]  = TypeHouse[i][PosY];
		            PlayersDataOnline[playerid][MyPickupZ_Now]  = TypeHouse[i][PosZ];

		            TextDrawShowForPlayer(playerid, CasasTextDraws[PlayersData[playerid][IsPlayerInHouse]]);
		            PlayersDataOnline[playerid][MyTextDrawShow] = CasasTextDraws[PlayersData[playerid][IsPlayerInHouse]];

		            PlayersDataOnline[playerid][InSpecialAnim] = GetPlayerSpecialAction(playerid);
		            PlayersDataOnline[playerid][InPickupTele] 	= true;
		            break;
	            }
            }
        }
        // GARAGES TYPE
        else if ( PlayersData[playerid][IsPlayerInGarage] >= 0 && PlayersData[playerid][IsPlayerInHouse] && pickupid >= TypeGarage[0][PickupId] &&
             	  pickupid <= TypeGarage[MAX_GARAGE_TYPE][PickupIdh] )
        {
            for(new i=0;i<=MAX_GARAGE_TYPE;i++)
            {
                if ( TypeGarage[i][PickupId] == pickupid || TypeGarage[i][PickupIdh] == pickupid )
                {
                    if ( TypeGarage[i][PickupIdh] == pickupid )
                    {
			            PlayersDataOnline[playerid][MyPickupX]  	= Garages[PlayersData[playerid][IsPlayerInHouse]][PlayersData[playerid][IsPlayerInGarage]][XgIn];
			            PlayersDataOnline[playerid][MyPickupY]  	= Garages[PlayersData[playerid][IsPlayerInHouse]][PlayersData[playerid][IsPlayerInGarage]][YgIn];
			            PlayersDataOnline[playerid][MyPickupZ]  	= Garages[PlayersData[playerid][IsPlayerInHouse]][PlayersData[playerid][IsPlayerInGarage]][ZgIn];
			            PlayersDataOnline[playerid][MyPickupZZ] 	= Garages[PlayersData[playerid][IsPlayerInHouse]][PlayersData[playerid][IsPlayerInGarage]][ZZgIn];
 			            PlayersDataOnline[playerid][MyPickupInterior] = TypeHouse[HouseData[PlayersData[playerid][IsPlayerInHouse]][TypeHouseId]][Interior];
						PlayersDataOnline[playerid][MyPickupWorld] 	= PlayersData[playerid][IsPlayerInHouse];
						PlayersDataOnline[playerid][MyPickupLock]  	= Garages[PlayersData[playerid][IsPlayerInHouse]][PlayersData[playerid][IsPlayerInGarage]][LockIn];

			            PlayersDataOnline[playerid][MyPickupX_Now]  = TypeGarage[i][PosXh];
			            PlayersDataOnline[playerid][MyPickupY_Now]  = TypeGarage[i][PosYh];
			            PlayersDataOnline[playerid][MyPickupZ_Now]  = TypeGarage[i][PosZh];
					}
					else
					{
			            PlayersDataOnline[playerid][MyPickupX]  	= Garages[PlayersData[playerid][IsPlayerInHouse]][PlayersData[playerid][IsPlayerInGarage]][Xg];
			            PlayersDataOnline[playerid][MyPickupY]  	= Garages[PlayersData[playerid][IsPlayerInHouse]][PlayersData[playerid][IsPlayerInGarage]][Yg];
			            PlayersDataOnline[playerid][MyPickupZ]  	= Garages[PlayersData[playerid][IsPlayerInHouse]][PlayersData[playerid][IsPlayerInGarage]][Zg];
			            PlayersDataOnline[playerid][MyPickupZZ] 	= Garages[PlayersData[playerid][IsPlayerInHouse]][PlayersData[playerid][IsPlayerInGarage]][ZZg];
 			            PlayersDataOnline[playerid][MyPickupInterior] = 0;
						PlayersDataOnline[playerid][MyPickupWorld] 	= 0;
						PlayersDataOnline[playerid][MyPickupLock]  	= Garages[PlayersData[playerid][IsPlayerInHouse]][PlayersData[playerid][IsPlayerInGarage]][LockOut];

			            PlayersDataOnline[playerid][MyPickupX_Now]  = TypeGarage[i][PosX];
			            PlayersDataOnline[playerid][MyPickupY_Now]  = TypeGarage[i][PosY];
			            PlayersDataOnline[playerid][MyPickupZ_Now]  = TypeGarage[i][PosZ];
		            }

		            TextDrawShowForPlayer(playerid, GarageTextDraw);
		            PlayersDataOnline[playerid][MyTextDrawShow] = GarageTextDraw;

		            PlayersDataOnline[playerid][InSpecialAnim] = GetPlayerSpecialAction(playerid);
		            PlayersDataOnline[playerid][InPickupTele] 	= true;
		            break;
					//GarageTextDraw
                }
            }
        }
        // GARAGES
        else if ( pickupid >= MIN_GARAGE_PICKUP &&
             	  pickupid <= MAX_GARAGE_PICKUP )
        {
			for (new h = 1; h <= MAX_HOUSE; h++)
			{
				for ( new i = 0; i < MAX_GARAGE_FOR_HOUSE; i++ )
				{
			        if ( Garages[h][i][PickupidIn] == pickupid || Garages[h][i][PickupidOut] == pickupid )
			        {
						if ( Garages[h][i][PickupidOut] == pickupid )
						{
				            PlayersDataOnline[playerid][MyPickupX]  	= TypeGarage[Garages[h][i][TypeGarageE]][PosX];
				            PlayersDataOnline[playerid][MyPickupY]  	= TypeGarage[Garages[h][i][TypeGarageE]][PosY];
			    	        PlayersDataOnline[playerid][MyPickupZ]  	= TypeGarage[Garages[h][i][TypeGarageE]][PosZ];
      						PlayersDataOnline[playerid][MyPickupZZ] 	= TypeGarage[Garages[h][i][TypeGarageE]][PosZZ];
 			        	    PlayersDataOnline[playerid][MyPickupInterior] = TypeGarage[Garages[h][i][TypeGarageE]][Interior];
							PlayersDataOnline[playerid][MyPickupWorld] 	= Garages[h][i][WorldG];
							PlayersDataOnline[playerid][MyPickupLock]  	= Garages[h][i][LockOut]; // HouseData[MyWorld][Lock];

				            PlayersDataOnline[playerid][MyPickupX_Now]  = Garages[h][i][Xg];
				            PlayersDataOnline[playerid][MyPickupY_Now]  = Garages[h][i][Yg];
				            PlayersDataOnline[playerid][MyPickupZ_Now]  = Garages[h][i][Zg];
						}
						else if ( PlayersData[playerid][IsPlayerInHouse] )
						{
				            PlayersDataOnline[playerid][MyPickupX]  	= TypeGarage[Garages[h][i][TypeGarageE]][PosXh];
				            PlayersDataOnline[playerid][MyPickupY]  	= TypeGarage[Garages[h][i][TypeGarageE]][PosYh];
			    	        PlayersDataOnline[playerid][MyPickupZ]  	= TypeGarage[Garages[h][i][TypeGarageE]][PosZh];
      						PlayersDataOnline[playerid][MyPickupZZ] 	= TypeGarage[Garages[h][i][TypeGarageE]][PosZZh];
 			        	    PlayersDataOnline[playerid][MyPickupInterior] = TypeGarage[Garages[h][i][TypeGarageE]][Interior];
							PlayersDataOnline[playerid][MyPickupWorld] 	= Garages[h][i][WorldG];
							PlayersDataOnline[playerid][MyPickupLock]  	= Garages[h][i][LockIn]; // HouseData[MyWorld][Lock];

				            PlayersDataOnline[playerid][MyPickupX_Now]  = Garages[h][i][XgIn];
				            PlayersDataOnline[playerid][MyPickupY_Now]  = Garages[h][i][YgIn];
				            PlayersDataOnline[playerid][MyPickupZ_Now]  = Garages[h][i][ZgIn];
						}
			            PlayersDataOnline[playerid][InSpecialAnim]  = GetPlayerSpecialAction(playerid);
			            PlayersData[playerid][IsPlayerInGarage]     = i - 50;
			            PlayersDataOnline[playerid][InPickupTele] 	= h;

			            TextDrawShowForPlayer(playerid, GarageTextDraw);
			            PlayersDataOnline[playerid][MyTextDrawShow] = GarageTextDraw;
					    return true;
			        }
		        }
	        }
		}
        // GARAGES EX
        else if ( pickupid >= GaragesEx[0][PickupIDOneP] &&
             	  pickupid <= GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] )
        {
			for ( new i = 0; i <= MAX_GARAGES_EX; i++ )
			{
			    if ( GaragesEx[i][PickupIDOneP] == pickupid || GaragesEx[i][PickupIDTwoP] == pickupid )
			    {
			        if ( GaragesEx[i][PickupIDOneP] == pickupid )
			        {
			            PlayersDataOnline[playerid][MyPickupX]  	= GaragesEx[i][PosXTwoP];
			            PlayersDataOnline[playerid][MyPickupY]  	= GaragesEx[i][PosYTwoP];
		    	        PlayersDataOnline[playerid][MyPickupZ]  	= GaragesEx[i][PosZTwoP];
  						PlayersDataOnline[playerid][MyPickupZZ] 	= GaragesEx[i][PosZZTwoP];
		        	    PlayersDataOnline[playerid][MyPickupInterior] = 0;
						PlayersDataOnline[playerid][MyPickupWorld] 	= 0;
						PlayersDataOnline[playerid][MyPickupLock]  	= GaragesEx[i][Lock];

			            PlayersDataOnline[playerid][MyPickupX_Now]  = GaragesEx[i][PosXOneP];
			            PlayersDataOnline[playerid][MyPickupY_Now]  = GaragesEx[i][PosYOneP];
			            PlayersDataOnline[playerid][MyPickupZ_Now]  = GaragesEx[i][PosZOneP];
					}
					else
					{
			            PlayersDataOnline[playerid][MyPickupX]  	= GaragesEx[i][PosXOneP];
			            PlayersDataOnline[playerid][MyPickupY]  	= GaragesEx[i][PosYOneP];
		    	        PlayersDataOnline[playerid][MyPickupZ]  	= GaragesEx[i][PosZOneP];
  						PlayersDataOnline[playerid][MyPickupZZ] 	= GaragesEx[i][PosZZOneP];
		        	    PlayersDataOnline[playerid][MyPickupInterior] = GaragesEx[i][Interior];
						PlayersDataOnline[playerid][MyPickupWorld] 	= GaragesEx[i][World];
						PlayersDataOnline[playerid][MyPickupLock]  	= GaragesEx[i][Lock];

			            PlayersDataOnline[playerid][MyPickupX_Now]  = GaragesEx[i][PosXTwoP];
			            PlayersDataOnline[playerid][MyPickupY_Now]  = GaragesEx[i][PosYTwoP];
			            PlayersDataOnline[playerid][MyPickupZ_Now]  = GaragesEx[i][PosZTwoP];
					}

		            TextDrawShowForPlayer(playerid, GarageTextDraw);
		            PlayersDataOnline[playerid][MyTextDrawShow] = GarageTextDraw;
		            PlayersDataOnline[playerid][InSpecialAnim] = GetPlayerSpecialAction(playerid);
		            PlayersDataOnline[playerid][InPickupTele] 	= true;
		            break;
				}
			}
		}
		/* ----- */
        // INFO TEXT´s
        else if ( pickupid >= TextDrawInfo[0][PickupidTextInfo] &&
             	  pickupid <= TextDrawInfo[MAX_TEXT_DRAW_INFO][PickupidTextInfo] )
        {
            for(new i=0;i<=MAX_TEXT_DRAW_INFO;i++)
            {
                if ( TextDrawInfo[i][PickupidTextInfo] == pickupid )
                {
		            PlayersDataOnline[playerid][MyPickupX_Now]  = TextDrawInfo[i][PosInfoX];
		            PlayersDataOnline[playerid][MyPickupY_Now]  = TextDrawInfo[i][PosInfoY];
		            PlayersDataOnline[playerid][MyPickupZ_Now]  = TextDrawInfo[i][PosInfoZ];

		            TextDrawShowForPlayer(playerid, TextDrawInfoTextDraws[i]);
		            PlayersDataOnline[playerid][MyTextDrawShow] = TextDrawInfoTextDraws[i];
		            PlayersDataOnline[playerid][InPickupInfo] 	= true;
		            break;
	            }
            }
        }
		else if (IsPlayerInPincho(playerid, pickupid))
		{

		}
	}
	else if (IsPlayerInPincho(playerid, pickupid))
	{

	}
	return 1;
}
public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{


	return 1;
}
public OnVehicleMod(playerid, vehicleid, componentid)
{
	new MsgAvisoBug[MAX_TEXT_CHAT];
    format(MsgAvisoBug, sizeof(MsgAvisoBug), "%s Tunning´s Owned - El jugador %s[%i] le puso un componente con ID[%i] al vehículo ID[%i].", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline], playerid, componentid, vehicleid);
	MsgCheatsReportsToAdmins(MsgAvisoBug);
	return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	return 1;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
	if ( PlayersDataOnline[playerid][InMenu] == Menu_Principal_Armas )
	{
	     ShowMenuForPlayer(Menues_Armas[row], playerid);
	     PlayersDataOnline[playerid][AfterMenuRow] = row;
	}
	else if ( PlayersDataOnline[playerid][InMenu] == CamerasM[0])
	{
     	if ( Cameras[row][Page] )
     	{
			SetPlayerCameraPos(playerid, Cameras[row][PosXLook], Cameras[row][PosYLook], Cameras[row][PosZLook]);
			SetPlayerCameraLookAt(playerid, Cameras[row][PosXAt], Cameras[row][PosYAt], Cameras[row][PosZAt]);
		    SetPlayerInteriorEx(playerid, Cameras[row][Interior]);
	     	SetPlayerVirtualWorldEx(playerid, Cameras[row][World]);
			ShowMenuForPlayer(CamerasM[0], playerid);
		}
	}
	else if ( PlayersDataOnline[playerid][InMenu] == Menues_Armas[PlayersDataOnline[playerid][AfterMenuRow]] )
	{
		PlayersDataOnline[playerid][SubAfterMenuRow] = row;
		if ( Armas_Municion[PlayersDataOnline[playerid][AfterMenuRow]][row] == 1 )
		{
			if ( CheckWeapondCheat(playerid) && PlayersData[playerid][Dinero] >= Armas_Precios_Num[PlayersDataOnline[playerid][AfterMenuRow]][row] )
			{
		        new MsgCompra[MAX_TEXT_CHAT];
			    if ( PlayersDataOnline[playerid][AfterMenuRow] == 8 && row == 1 )
			    {
                    format(MsgCompra, sizeof(MsgCompra), "Has comprado un chaleco por $%i", Armas_Precios_Num[PlayersDataOnline[playerid][AfterMenuRow]][row]);
					SetPlayerArmourEx(playerid, 80);
				}
				else
				{
                    format(MsgCompra, sizeof(MsgCompra), "Has comprado %s por $%i", Armas_Nombre[PlayersDataOnline[playerid][AfterMenuRow]][row][4], Armas_Precios_Num[PlayersDataOnline[playerid][AfterMenuRow]][row]);
                    GivePlayerWeaponEx(playerid, Armas_ID[PlayersDataOnline[playerid][AfterMenuRow]][row], 1);
				}
                SendInfoMessage(playerid, 2, "0", MsgCompra);
				GivePlayerMoneyEx(playerid, -Armas_Precios_Num[PlayersDataOnline[playerid][AfterMenuRow]][row]);
				SetMoneyExtorsion(GetPlayerVirtualWorld(playerid), Armas_Precios_Num[PlayersDataOnline[playerid][AfterMenuRow]][row]);
			}
			else
			{
				SendInfoMessage(playerid, 0, "356", "No tienes suficiente dinero para comprar este accesorio de la armeria");
			}
			ShowMenuForPlayer(Menues_Armas[PlayersDataOnline[playerid][AfterMenuRow]], playerid);
		}
		else
		{
		    new MsgComprarArmaDialogPresupuesto[MAX_TEXT_CHAT];
		    format(MsgComprarArmaDialogPresupuesto, sizeof(MsgComprarArmaDialogPresupuesto), "{F0F0F0}¿Desea comprar %s con %i de munición\n{F0F0F0}por el precio de $%i?",
			Armas_Nombre[PlayersDataOnline[playerid][AfterMenuRow]][PlayersDataOnline[playerid][SubAfterMenuRow]][4],
			Armas_Municion[PlayersDataOnline[playerid][AfterMenuRow]][PlayersDataOnline[playerid][SubAfterMenuRow]], Armas_Precios_Num[PlayersDataOnline[playerid][AfterMenuRow]][PlayersDataOnline[playerid][SubAfterMenuRow]] * Armas_Municion[PlayersDataOnline[playerid][AfterMenuRow]][PlayersDataOnline[playerid][SubAfterMenuRow]]);

			ShowPlayerDialogEx(playerid, 9, DIALOG_STYLE_MSGBOX, "{00A5FF}Finalize su compra!", MsgComprarArmaDialogPresupuesto, "Comprar!", "Modificar");
			PlayersDataOnline[playerid][MyAmmoSelect] = Armas_Municion[PlayersDataOnline[playerid][AfterMenuRow]][PlayersDataOnline[playerid][SubAfterMenuRow]];
		}
	}
	else if ( PlayersDataOnline[playerid][InMenu] == Opciones_Savanna[PlayersDataOnline[playerid][AfterMenuRow]] ) // SAVANNA - OPCIONES
	{
		if ( IsTunnigContinue(playerid) )
		{
	    	AddVehicleCommponentTaller(PlayersDataOnline[playerid][MyIDVehicleTunning], Opciones_SavannaID[PlayersDataOnline[playerid][AfterMenuRow]][row]);
			ShowMenuForPlayer(Opciones_Savanna[PlayersDataOnline[playerid][AfterMenuRow]], playerid);
			PlayPlayerStreamSound(playerid, SOUND_TUNNING);
    	}
	}
	else if ( PlayersDataOnline[playerid][InMenu] == Opciones_Blade[PlayersDataOnline[playerid][AfterMenuRow]] ) // Blade - OPCIONES
	{
		if ( IsTunnigContinue(playerid) )
		{
	    	AddVehicleCommponentTaller(PlayersDataOnline[playerid][MyIDVehicleTunning], Opciones_BladeID[PlayersDataOnline[playerid][AfterMenuRow]][row]);
			ShowMenuForPlayer(Opciones_Blade[PlayersDataOnline[playerid][AfterMenuRow]], playerid);
			PlayPlayerStreamSound(playerid, SOUND_TUNNING);
    	}
	}
	else if ( PlayersDataOnline[playerid][InMenu] == Opciones_Remington[PlayersDataOnline[playerid][AfterMenuRow]] ) // Remington - OPCIONES
	{
		if ( IsTunnigContinue(playerid) )
		{
	    	AddVehicleCommponentTaller(PlayersDataOnline[playerid][MyIDVehicleTunning], Opciones_RemingtonID[PlayersDataOnline[playerid][AfterMenuRow]][row]);
			ShowMenuForPlayer(Opciones_Remington[PlayersDataOnline[playerid][AfterMenuRow]], playerid);
			PlayPlayerStreamSound(playerid, SOUND_TUNNING);
    	}
	}
	else if ( PlayersDataOnline[playerid][InMenu] == Opciones_Slamvan[PlayersDataOnline[playerid][AfterMenuRow]] ) // Slamvan - OPCIONES
	{
		if ( IsTunnigContinue(playerid) )
		{
	    	AddVehicleCommponentTaller(PlayersDataOnline[playerid][MyIDVehicleTunning], Opciones_SlamvanID[PlayersDataOnline[playerid][AfterMenuRow]][row]);
			ShowMenuForPlayer(Opciones_Slamvan[PlayersDataOnline[playerid][AfterMenuRow]], playerid);
			PlayPlayerStreamSound(playerid, SOUND_TUNNING);
    	}
	}
	else if ( PlayersDataOnline[playerid][InMenu] == SupermercadoArticulos )
	{
    	if ( PlayersData[playerid][HaveBolsa] )
    	{
			if (PlayersData[playerid][Dinero] >= SupermercadoArticulosPrecios[row] )
			{
			    new MsgCompra[MAX_TEXT_CHAT];
			    new ArticuloID;
			    new CantidadA;
			    switch(row)
			    {
			        // Pack 6 Cervezas
			        case 0:
			        {
		              	format(MsgCompra, sizeof(MsgCompra), "Has comprado un Pack de 6 cervezas por $%i.", SupermercadoArticulosPrecios[row]);
	                	ArticuloID = A_CERVEZA;
	                	CantidadA  = 6;
					}
			        // 5 Vodkas
			        case 1:
			        {
		              	format(MsgCompra, sizeof(MsgCompra), "Has comprado 5 vodkas por $%i.", SupermercadoArticulosPrecios[row]);
	                	ArticuloID = A_VODKA;
	                	CantidadA  = 5;
					}
			        // 5 Refrescos
			        case 2:
			        {
		              	format(MsgCompra, sizeof(MsgCompra), "Has comprado 5 refrescos por $%i.", SupermercadoArticulosPrecios[row]);
	                	ArticuloID = A_REFRESCO;
	                	CantidadA  = 5;
					}
			        // Pollo Crudo
			        case 3:
			        {
		              	format(MsgCompra, sizeof(MsgCompra), "Has comprado un pollo por $%i.", SupermercadoArticulosPrecios[row]);
	                	ArticuloID = A_POLLO;
	                	CantidadA  = 1;
					}
			        // Papas
			        case 4:
			        {
		              	format(MsgCompra, sizeof(MsgCompra), "Has comprado papas por $%i.", SupermercadoArticulosPrecios[row]);
	                	ArticuloID = A_PAPAS;
	                	CantidadA  = 1;
					}
			        // Arroz
			        case 5:
			        {
		              	format(MsgCompra, sizeof(MsgCompra), "Has comprado arroz por $%i.", SupermercadoArticulosPrecios[row]);
	                	ArticuloID = A_ARROZ;
	                	CantidadA  = 1;
					}
			    }
			    switch (AddArticuloBolsa(playerid, ArticuloID, CantidadA))
			    {
			        case 0:
			        {
	       				SendInfoMessage(playerid, 0, "1230", "La bolsa se encuentra llena!");

					}
					case 1:
					{
						SendInfoMessage(playerid, 3, "0", MsgCompra);
					    GivePlayerMoneyEx(playerid, -SupermercadoArticulosPrecios[row]);
					}
					case 2:
					{
	       				SendInfoMessage(playerid, 0, "1244", "No te caben más de esos artículos en la bolsa!");
					}
				}
			}
			else
			{
				SendInfoMessage(playerid, 0, "1226", "No tienes suficiente dinero para comprar este artículo");
			}
		}
		else
		{
			SendInfoMessage(playerid, 0, "1271", "Usted no tiene bolsa!");
		}
		ShowMenuForPlayer(SupermercadoArticulos, playerid);
		PlayersDataOnline[playerid][InMenu] = GetPlayerMenu(playerid);
	}
	else if ( PlayersDataOnline[playerid][InMenu] == M24_7 )
	{
		if (PlayersData[playerid][Dinero] >= M24_7_Precios[row] )
		{
		    if ( CheckWeapondCheat(playerid) && NegociosData[GetPlayerVirtualWorld(playerid)][Materiales] >= 2 )
		    {
		        new PassSwitch = false;
				if ( row != 0 )
				{
				    switch(row)
				    {
	                    // Patines
				        case 1:
				        {
				            if ( !IsObjectInBolsillo(playerid, row) )
				            {
					            if ( IsNotFullBolsillo(playerid, playerid, "Usted tiene los bolsillos llenos!") )
					            {
									AddObjectBolsillo(playerid, row);
									new MsgCompra[MAX_TEXT_CHAT];
									format(MsgCompra, sizeof(MsgCompra), "Has comprado unos Patines por $%i.", M24_7_Precios[row]);
									SendInfoMessage(playerid, 3, "0", MsgCompra);
									print(MsgCompra);
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "366", "Ya usted tiene unos patines, deshágase de el si quiere comprar unos nuevos");
								PassSwitch = true;
							}
						}
	                    // Dados
				        case 2:
				        {
				            if ( !IsObjectInBolsillo(playerid, row) )
				            {
					            if ( IsNotFullBolsillo(playerid, playerid, "Usted tiene los bolsillos llenos!") )
					            {
									AddObjectBolsillo(playerid, row);
									new MsgCompra[MAX_TEXT_CHAT];
									format(MsgCompra, sizeof(MsgCompra), "Has comprado unos Dados por $%i.", M24_7_Precios[row]);
									SendInfoMessage(playerid, 3, "0", MsgCompra);
									print(MsgCompra);
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "365", "Ya usted tiene unos dados, deshágase de el si quiere comprar unos nuevos");
								PassSwitch = true;
							}
						}
	                    // Móvil
				        case 3:
				        {
						    if ( PlayersData[playerid][Phone] == 0)
						    {
   								AddObjectBolsillo(playerid, row);

								BuyPhone24_7(playerid);

								new MsgCompra[MAX_TEXT_CHAT];
								format(MsgCompra, sizeof(MsgCompra), "Has comprado un nuevo móvil con número %i por $%i.", PlayersData[playerid][Phone], M24_7_Precios[row]);
								SendInfoMessage(playerid, 3, "0", MsgCompra);
								print(MsgCompra);
							}
							else
							{
								SendInfoMessage(playerid, 0, "364", "Ya usted tiene un móvil, deshágase de el si quiere comprar uno nuevo");
								PassSwitch = true;
							}
						}
						// Agenda
				        case 4:
				        {
				            if ( !IsObjectInBolsillo(playerid, row) )
				            {
					            if ( IsNotFullBolsillo(playerid, playerid, "Usted tiene los bolsillos llenos!") )
					            {
									AddObjectBolsillo(playerid, row);
									new MsgCompra[MAX_TEXT_CHAT];
									format(MsgCompra, sizeof(MsgCompra), "Has comprado una Agenda por $%i.", M24_7_Precios[row]);
									SendInfoMessage(playerid, 3, "0", MsgCompra);
			  					    CleanSMS(playerid);
						            CleanAgenda(playerid);
									print(MsgCompra);
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "892", "Ya usted tiene una agenda");
								PassSwitch = true;
							}
				        }
						// Flores
				        case 5:
				        {
						    GivePlayerWeaponEx(playerid, 14, 1);
							new MsgCompra[MAX_TEXT_CHAT];
							format(MsgCompra, sizeof(MsgCompra), "Has comprado unas flores por $%i.", M24_7_Precios[row]);
							SendInfoMessage(playerid, 3, "0", MsgCompra);
							print(MsgCompra);
				        }
						// Comprar Saldo
				        case 6:
				        {
					        ShowPlayerDialogEx(playerid, 30, DIALOG_STYLE_INPUT, "{00A5FF}Seleccione el monto de saldo a comprar", "{F0F0F0}¿Cuanto desea comprar de saldo para su móvil?", "Comprar", "Volver");
				        }
						//Bolsa
				        case 7:
				        {
				            if ( !PlayersData[playerid][HaveBolsa] )
				            {
									new MsgCompra[MAX_TEXT_CHAT];
									PlayersData[playerid][HaveBolsa] = true;
									CleanArticulosBolsa(playerid);
									format(MsgCompra, sizeof(MsgCompra), "Has comprado una Bolsa por $%i.", M24_7_Precios[row]);
									SendInfoMessage(playerid, 3, "0", MsgCompra);
									print(MsgCompra);
							}
							else
							{
								SendInfoMessage(playerid, 0, "1228", "Ya usted tiene una bolsa");
								PassSwitch = true;
							}
				        }
						//Condones
				        case 8:
				        {
				            if ( IsNotFullCartera(playerid, playerid, "Usted tiene la cartera llena!") )
				            {
									new MsgCompra[MAX_TEXT_CHAT];
									format(MsgCompra, sizeof(MsgCompra), "Has comprado unos Condones por $%i.", M24_7_Precios[row]);
									SendInfoMessage(playerid, 3, "0", MsgCompra);
									print(MsgCompra);

									AddObjectToCartera(playerid, CARTERA_TYPE_CONDONES, 3, 0, 0);
							}
							else
							{
								PassSwitch = true;
							}
				        }
						// Maleta
				        case 9:
				        {
				            if ( GetObjectByType(playerid, TYPE_MALETIN) == -1 )
				            {
								new MsgCompra[MAX_TEXT_CHAT];
								format(MsgCompra, sizeof(MsgCompra), "Has comprado un maletín por $%i.", M24_7_Precios[row]);
								SendInfoMessage(playerid, 3, "0", MsgCompra);
								print(MsgCompra);
								AddObjectHoldToPlayer(playerid, 1210);
							}
							else
							{
								SendInfoMessage(playerid, 0, "1548", "Tienes las manos ocupadas, no puedes llevar más nada en ellas!");
								PassSwitch = true;
							}
				        }
						// Teléfonos Móviles
				        case 10:
				        {
							new MsgCompra[MAX_TEXT_CHAT];
							format(MsgCompra, sizeof(MsgCompra), "Ya puedes selecconar tu teléfono móvil favorito. Se te ha cobrado $%i.", M24_7_Precios[row]);
							SendInfoMessage(playerid, 3, "0", MsgCompra);
							print(MsgCompra);
							PassSwitch = false;
					        ShowMenuForPlayer(TYPE_PHONES_MENU, playerid);
							PlayersDataOnline[playerid][InMenu] = GetPlayerMenu(playerid);
				        }
						default:
						{
							PassSwitch = true;
						}

					}
				}
				else
				{
				    GivePlayerWeaponEx(playerid, 43, 200);
					new MsgCompra[MAX_TEXT_CHAT];
					format(MsgCompra, sizeof(MsgCompra), "Has comprado una Cámara por $%i.", M24_7_Precios[row]);
					SendInfoMessage(playerid, 3, "0", MsgCompra);
					print(MsgCompra);
				}
				if ( row != 6 && row != 10 )
				{
					ShowMenuForPlayer(M24_7, playerid);
					PlayersDataOnline[playerid][InMenu] = GetPlayerMenu(playerid);
				}

				if ( PassSwitch )
				{
				    return 1;
				}
				else
				{
					SetMoneyExtorsion(GetPlayerVirtualWorld(playerid), M24_7_Precios[row]);
				    GivePlayerMoneyEx(playerid, -M24_7_Precios[row]);
				}
			}
			else
			{
				if ( row == 6 || row == 10 )
				{
					TogglePlayerControllableEx(playerid, true);
					PlayersDataOnline[playerid][SubAfterMenuRow] = 0;
					PlayersDataOnline[playerid][AfterMenuRow] 	 = 0;
				}
				SendInfoMessage(playerid, 0, "359", "Éste 24/7 no tiene materiales!");
			}
		}
		else
		{
			SendInfoMessage(playerid, 0, "360", "No tienes suficiente dinero para comprar éste artículo del 27/7");
		}
		if ( row != 6 && row != 10)
		{
			ShowMenuForPlayer(M24_7, playerid);
			PlayersDataOnline[playerid][InMenu] = GetPlayerMenu(playerid);
		}
	}
	else if ( PlayersDataOnline[playerid][InMenu] == TYPE_PHONES_MENU )
	{
		PlayersData[playerid][TypePhone] =  row;
		ShowMenuForPlayer(M24_7, playerid);
	}
	else if ( PlayersDataOnline[playerid][InMenu] == TallerPrincipal )
	{
		if ( IsTunnigContinue(playerid) )
		{
			switch (row)
			{
			    // Pintura
				case 0:
				{
					ShowPlayerDialogEx(playerid, 12, DIALOG_STYLE_MSGBOX , "{00A5FF}Seleccione color", "{F0F0F0}¿Qué color desea cambiar al vehículo?", "Color 1", "Color 2");
				}
				// Nitro
				case 1:
				{
				    if ( IsValidVehicle(playerid, GetVehicleModel(PlayersDataOnline[playerid][MyIDVehicleTunning])) )
				    {
						ShowMenuForPlayer(Nitro, playerid);
					}
					else
					{
						ShowMenuForPlayer(TallerPrincipal, playerid);
						SendInfoMessage(playerid, 0, "1097", "Éste vehículo no se le puede agregar nitro!");
					}
				}
				// Hidráulica
				case 2:
				{
				    if ( IsValidVehicle(playerid, GetVehicleModel(PlayersDataOnline[playerid][MyIDVehicleTunning])) )
				    {
						AddVehicleCommponentTaller(PlayersDataOnline[playerid][MyIDVehicleTunning], 1087);
						PlayPlayerStreamSound(playerid, SOUND_TUNNING);
					}
					else
					{
						SendInfoMessage(playerid, 0, "1096", "Éste vehículo no se le puede agregar hidráulica!");
					}
					ShowMenuForPlayer(TallerPrincipal, playerid);
				}
				// Estéreo
				case 3:
				{
				    if ( coches_Todos_Type[GetVehicleModel(PlayersDataOnline[playerid][MyIDVehicleTunning]) - 400] != BICI )
				    {
						//AddVehicleCommponentTaller(GetPlayerVehicleID(playerid), 1086);
						PlayPlayerStreamSound(playerid, SOUND_TUNNING);
					}
					else
					{
						SendInfoMessage(playerid, 0, "1095", "Éste vehículo no se le puede agregar estereo!");
					}
					ShowMenuForPlayer(TallerPrincipal, playerid);
				}
				// Llantas I
				case 4:
				{
				    if ( IsValidVehicle(playerid, GetVehicleModel(PlayersDataOnline[playerid][MyIDVehicleTunning])) )
				    {
						ShowMenuForPlayer(Llantas1, playerid);
					}
					else
					{
						SendInfoMessage(playerid, 0, "1094", "Éste vehículo no se le puede agregar llantas!");
						ShowMenuForPlayer(TallerPrincipal, playerid);
					}
				}
				// Llantas II
				case 5:
				{
				    if ( IsValidVehicle(playerid, GetVehicleModel(PlayersDataOnline[playerid][MyIDVehicleTunning])) )
				    {
						ShowMenuForPlayer(Llantas2, playerid);
					}
					else
					{
						SendInfoMessage(playerid, 0, "1093", "Éste vehículo no se le puede agregar llantas!");
						ShowMenuForPlayer(TallerPrincipal, playerid);
					}
				}
				// Tunning
				case 6:
				{
					switch ( GetVehicleModel(PlayersDataOnline[playerid][MyIDVehicleTunning]) )
					{
					    // SULTAN
					    case 560:
					    {
	    					ShowMenuForPlayer(Principal_Sultan, playerid);
						}
					    // ELEGY
					    case 562:
					    {
	    					ShowMenuForPlayer(Principal_Elegy, playerid);
						}
					    // FLASH
					    case 565:
					    {
	    					ShowMenuForPlayer(Principal_Flash, playerid);
						}
					    // STRATUM
					    case 561:
					    {
	    					ShowMenuForPlayer(Principal_Stratum, playerid);
						}
					    // JESTER
					    case 559:
					    {
	    					ShowMenuForPlayer(Principal_Jester, playerid);
						}
					    // URANUS
					    case 558:
					    {
	    					ShowMenuForPlayer(Principal_Uranus, playerid);
						}
					    // SAVANNA
					    case 567:
					    {
	    					ShowMenuForPlayer(Principal_Savanna, playerid);
						}
					    // REMINGTON
					    case 534:
					    {
	    					ShowMenuForPlayer(Principal_Remington, playerid);
						}
					    // Slamvan
					    case 535:
					    {
	    					ShowMenuForPlayer(Principal_Slamvan, playerid);
						}
					    // Blade
					    case 536:
					    {
	    					ShowMenuForPlayer(Principal_Blade, playerid);
						}
						default:
						{
						    new IsTunning = IsTunningForVehicle(GetVehicleModel(PlayersDataOnline[playerid][MyIDVehicleTunning]));
							if ( IsTunning )
							{
							    switch ( IsTunning )
							    {
							        case 1:
							        {
				    					ShowMenuForPlayer(XFlowYAlien_Escape, playerid);
							        }
							        case 2:
							        {
				    					ShowMenuForPlayer(XFlowYAlien_Sentinel, playerid);
							        }
							        case 3:
							        {
				    					ShowMenuForPlayer(XFlowYAlien_Euros, playerid);
							        }
								}
	    					}
	    					else
	    					{
								SendInfoMessage(playerid, 0, "700", "No tenemos tunning para éste vehículo por el momento :(");
		    					ShowMenuForPlayer(TallerPrincipal, playerid);
	    					}
						}
					}
				}
				// Vinilos
				case 7:
				{
				    if ( IsValidVehiclePaintJob(GetVehicleModel(PlayersDataOnline[playerid][MyIDVehicleTunning])) )
				    {
						ShowMenuForPlayer(Vinilos, playerid);
					}
					else
					{
						SendInfoMessage(playerid, 0, "1110", "Éste vehículo no acepta Vinilos.");
    					ShowMenuForPlayer(TallerPrincipal, playerid);
					}
				}
				// Cambiar Matrícula
				case 8:
				{
				    if ( PlayersData[playerid][Rango] <= 3 )
				    {
						if ( PlayersData[playerid][TimeEquipo] <= gettime() || PlayersData[playerid][Admin] >= 8 && PlayersDataOnline[playerid][AdminOn])
					    {
							if ( PlayersDataOnline[playerid][MyIDVehicleTunning] <= MAX_CAR_DUENO )
							{
								ShowChangePlate(playerid);
							}
							else
							{
								SendInfoMessage(playerid, 0, "1310", "Éste vehículo no acepta cambio de matrícula.");
			  					ShowMenuForPlayer(TallerPrincipal, playerid);
							}
	   					}
					    else
					    {
							new MsgPersonalizado[MAX_TEXT_CHAT];
							format(MsgPersonalizado, sizeof(MsgPersonalizado), "Debe esperar %i minutos con %i segundos para volver a poner una nueva matrícula!", (PlayersData[playerid][TimeEquipo] - gettime()) / 60, ((PlayersData[playerid][TimeEquipo] - gettime()) % 60));
							SendInfoMessage(playerid, 0, "1311", MsgPersonalizado);
		  					ShowMenuForPlayer(TallerPrincipal, playerid);
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1312", "Tú no puedes cambiar la matrícula de un vehículo.");
	  					ShowMenuForPlayer(TallerPrincipal, playerid);
					}
				}
			}
		}
	}
	else if ( PlayersDataOnline[playerid][InMenu] == XFlowYAlien_Sultan[PlayersDataOnline[playerid][AfterMenuRow]] )
	{
		if ( IsTunnigContinue(playerid) )
		{
			AddVehicleCommponentTaller(PlayersDataOnline[playerid][MyIDVehicleTunning], XFlowYAlien_SultanID[PlayersDataOnline[playerid][AfterMenuRow]][row]);
			ShowMenuForPlayer(XFlowYAlien_Sultan[PlayersDataOnline[playerid][AfterMenuRow]], playerid);
			PlayPlayerStreamSound(playerid, SOUND_TUNNING);
		}
	}
	else if ( PlayersDataOnline[playerid][InMenu] == XFlowYAlien_Elegy[PlayersDataOnline[playerid][AfterMenuRow]] )
	{
		if ( IsTunnigContinue(playerid) )
		{
			AddVehicleCommponentTaller(PlayersDataOnline[playerid][MyIDVehicleTunning], XFlowYAlien_ElegyID[PlayersDataOnline[playerid][AfterMenuRow]][row]);
			ShowMenuForPlayer(XFlowYAlien_Elegy[PlayersDataOnline[playerid][AfterMenuRow]], playerid);
			PlayPlayerStreamSound(playerid, SOUND_TUNNING);
		}
	}
	else if ( PlayersDataOnline[playerid][InMenu] == XFlowYAlien_Flash[PlayersDataOnline[playerid][AfterMenuRow]] )
	{
		if ( IsTunnigContinue(playerid) )
		{
			AddVehicleCommponentTaller(PlayersDataOnline[playerid][MyIDVehicleTunning], XFlowYAlien_FlashID[PlayersDataOnline[playerid][AfterMenuRow]][row]);
			ShowMenuForPlayer(XFlowYAlien_Flash[PlayersDataOnline[playerid][AfterMenuRow]], playerid);
			PlayPlayerStreamSound(playerid, SOUND_TUNNING);
		}
	}
	else if ( PlayersDataOnline[playerid][InMenu] == XFlowYAlien_Stratum[PlayersDataOnline[playerid][AfterMenuRow]] )
	{
		if ( IsTunnigContinue(playerid) )
		{
			AddVehicleCommponentTaller(PlayersDataOnline[playerid][MyIDVehicleTunning], XFlowYAlien_StratumID[PlayersDataOnline[playerid][AfterMenuRow]][row]);
			ShowMenuForPlayer(XFlowYAlien_Stratum[PlayersDataOnline[playerid][AfterMenuRow]], playerid);
			PlayPlayerStreamSound(playerid, SOUND_TUNNING);
		}
	}
	else if ( PlayersDataOnline[playerid][InMenu] == XFlowYAlien_Jester[PlayersDataOnline[playerid][AfterMenuRow]] )
	{
		if ( IsTunnigContinue(playerid) )
		{
			AddVehicleCommponentTaller(PlayersDataOnline[playerid][MyIDVehicleTunning], XFlowYAlien_JesterID[PlayersDataOnline[playerid][AfterMenuRow]][row]);
			ShowMenuForPlayer(XFlowYAlien_Jester[PlayersDataOnline[playerid][AfterMenuRow]], playerid);
			PlayPlayerStreamSound(playerid, SOUND_TUNNING);
		}
	}
	else if ( PlayersDataOnline[playerid][InMenu] == XFlowYAlien_Uranus[PlayersDataOnline[playerid][AfterMenuRow]] )
	{
		if ( IsTunnigContinue(playerid) )
		{
			AddVehicleCommponentTaller(PlayersDataOnline[playerid][MyIDVehicleTunning], XFlowYAlien_UranusID[PlayersDataOnline[playerid][AfterMenuRow]][row]);
			ShowMenuForPlayer(XFlowYAlien_Uranus[PlayersDataOnline[playerid][AfterMenuRow]], playerid);
			PlayPlayerStreamSound(playerid, SOUND_TUNNING);
		}
	}
	else if ( PlayersDataOnline[playerid][InMenu] == XFlowYAlien_Escape ) // SOLAMENTE TUBOS DE ESCAPE
	{
	    if ( IsTunnigContinue(playerid) )
	    {
			AddVehicleCommponentTaller(PlayersDataOnline[playerid][MyIDVehicleTunning], XFlowYAlien_EscapeID[row]);
			ShowMenuForPlayer(XFlowYAlien_Escape, playerid);
			PlayPlayerStreamSound(playerid, SOUND_TUNNING);
		}
	}
	else if ( PlayersDataOnline[playerid][InMenu] == XFlowYAlien_Sentinel ) // TUBOS DE ESCAPE + ALERONES
	{
	    if ( IsTunnigContinue(playerid) )
	    {
			AddVehicleCommponentTaller(PlayersDataOnline[playerid][MyIDVehicleTunning], XFlowYAlien_SentinelID[row]);
			ShowMenuForPlayer(XFlowYAlien_Sentinel, playerid);
			PlayPlayerStreamSound(playerid, SOUND_TUNNING);
		}
	}
	else if ( PlayersDataOnline[playerid][InMenu] == XFlowYAlien_Euros ) // TODO
	{
	    if ( IsTunnigContinue(playerid) )
	    {
			AddVehicleCommponentTaller(PlayersDataOnline[playerid][MyIDVehicleTunning], XFlowYAlien_EurosID[row]);
			ShowMenuForPlayer(XFlowYAlien_Euros, playerid);
			PlayPlayerStreamSound(playerid, SOUND_TUNNING);
		}
	}
	else if ( PlayersDataOnline[playerid][InMenu] == Principal_Sultan 	) // SULTAN
	{
		ShowMenuForPlayer(XFlowYAlien_Sultan[row], playerid);
		PlayersDataOnline[playerid][AfterMenuRow] = row;
	}
	else if ( PlayersDataOnline[playerid][InMenu] == Principal_Elegy 	) // ELEGY
	{
		ShowMenuForPlayer(XFlowYAlien_Elegy[row], playerid);
		PlayersDataOnline[playerid][AfterMenuRow] = row;
	}
	else if ( PlayersDataOnline[playerid][InMenu] == Principal_Flash  	) // FLASH
	{
		ShowMenuForPlayer(XFlowYAlien_Flash[row], playerid);
		PlayersDataOnline[playerid][AfterMenuRow] = row;
	}
	else if ( PlayersDataOnline[playerid][InMenu] == Principal_Stratum 	) // STRATUM
	{
		ShowMenuForPlayer(XFlowYAlien_Stratum[row], playerid);
		PlayersDataOnline[playerid][AfterMenuRow] = row;
	}
	else if ( PlayersDataOnline[playerid][InMenu] == Principal_Jester	) // JESTER
	{
		ShowMenuForPlayer(XFlowYAlien_Jester[row], playerid);
		PlayersDataOnline[playerid][AfterMenuRow] = row;
	}
	else if ( PlayersDataOnline[playerid][InMenu] == Principal_Uranus	) // URANUS
	{
		ShowMenuForPlayer(XFlowYAlien_Uranus[row], playerid);
		PlayersDataOnline[playerid][AfterMenuRow] = row;
	}
	else if ( PlayersDataOnline[playerid][InMenu] == Principal_Savanna	) // SAVANNA
	{
		ShowMenuForPlayer(Opciones_Savanna[row], playerid);
		PlayersDataOnline[playerid][AfterMenuRow] = row;
	}
	else if ( PlayersDataOnline[playerid][InMenu] == Principal_Blade	) // BLADE
	{
		ShowMenuForPlayer(Opciones_Blade[row], playerid);
		PlayersDataOnline[playerid][AfterMenuRow] = row;
	}
	else if ( PlayersDataOnline[playerid][InMenu] == Principal_Remington	) // Remington
	{
		ShowMenuForPlayer(Opciones_Remington[row], playerid);
		PlayersDataOnline[playerid][AfterMenuRow] = row;
	}
	else if ( PlayersDataOnline[playerid][InMenu] == Principal_Slamvan	) // Slamvan
	{
		ShowMenuForPlayer(Opciones_Slamvan[row], playerid);
		PlayersDataOnline[playerid][AfterMenuRow] = row;
	}
	else if ( PlayersDataOnline[playerid][InMenu] == Nitro )                /// NITRO
	{
		if ( IsTunnigContinue(playerid) )
		{
	    	AddVehicleCommponentTaller(PlayersDataOnline[playerid][MyIDVehicleTunning], NitrosID[row]);
			ShowMenuForPlayer(Nitro, playerid);
			PlayPlayerStreamSound(playerid, SOUND_TUNNING);
    	}
	}
	else if ( PlayersDataOnline[playerid][InMenu] == Llantas1 )                /// LLANTAS 1
	{
		if ( IsTunnigContinue(playerid) )
		{
	    	AddVehicleCommponentTaller(PlayersDataOnline[playerid][MyIDVehicleTunning], LlantasID1[row]);
			ShowMenuForPlayer(Llantas1, playerid);
			PlayPlayerStreamSound(playerid, SOUND_TUNNING);
    	}
	}
	else if ( PlayersDataOnline[playerid][InMenu] == Llantas2 )                /// LLANTAS 2
	{
		if ( IsTunnigContinue(playerid) )
		{
	    	AddVehicleCommponentTaller(PlayersDataOnline[playerid][MyIDVehicleTunning], LlantasID2[row]);
			ShowMenuForPlayer(Llantas2, playerid);
			PlayPlayerStreamSound(playerid, SOUND_TUNNING);
    	}
	}
	else if ( PlayersDataOnline[playerid][InMenu] == Vinilos )                /// VINILOS
	{
		if ( IsTunnigContinue(playerid) )
		{
		    if ( row != 10 )
		    {
		    	ChangeVehiclePaintjob(PlayersDataOnline[playerid][MyIDVehicleTunning], row);
		    	DataCars[PlayersDataOnline[playerid][MyIDVehicleTunning]][Vinillo] = row;
			}
			else
			{
			    if ( DataCars[PlayersDataOnline[playerid][MyIDVehicleTunning]][Vinillo] != -1 )
			    {
			        DataCars[PlayersDataOnline[playerid][MyIDVehicleTunning]][Vinillo] = -1;
			        ChangeVehiclePaintjob(PlayersDataOnline[playerid][MyIDVehicleTunning], 4);
			    }
			}
			PlayPlayerStreamSound(playerid, SOUND_TUNNING);
			ShowMenuForPlayer(Vinilos, playerid);
    	}
	}
	else if ( PlayersDataOnline[playerid][InMenu] == CluckinBell )
	{
		if (PlayersData[playerid][Dinero] >= CluckinBellPrecios[row] )
		{
		    if ( NegociosData[GetPlayerVirtualWorld(playerid)][Materiales] >= 2 )
		    {
				SetMoneyExtorsion(GetPlayerVirtualWorld(playerid), CluckinBellPrecios[row]);
			    GivePlayerMoneyEx(playerid, -CluckinBellPrecios[row]);
				SetPlayerHealthEx(playerid, CluckinBellPrecios[row]);
			}
			else
			{
				SendInfoMessage(playerid, 0, "330", "Este Cluckin' Bell no tiene materiales");
			}
		}
		else
		{
			SendInfoMessage(playerid, 0, "329", "No tienes suficiente dinero para comprar esta comida del Cluckin' Bell");
		}
		ShowMenuForPlayer(CluckinBell, playerid);
	}
	else if ( PlayersDataOnline[playerid][InMenu] == BurgerShot)
	{
		if (PlayersData[playerid][Dinero] >= BurgerShotPrecios[row] )
		{
		    if ( NegociosData[GetPlayerVirtualWorld(playerid)][Materiales] >= 2 )
		    {
				SetMoneyExtorsion(GetPlayerVirtualWorld(playerid), BurgerShotPrecios[row]);
			    GivePlayerMoneyEx(playerid, -BurgerShotPrecios[row]);

				SetPlayerHealthEx(playerid, BurgerShotPrecios[row]);
				ShowMenuForPlayer(BurgerShot, playerid);
			}
			else
			{
				SendInfoMessage(playerid, 0, "328", "Este Burger Shot no tiene materiales");
			}
		}
		else
		{
			SendInfoMessage(playerid, 0, "327", "No tienes suficiente dinero para comprar esta comida del Burger Shot");
		}
		ShowMenuForPlayer(BurgerShot, playerid);
	}
	else if ( PlayersDataOnline[playerid][InMenu] == PizzaStack)
	{
		if (PlayersData[playerid][Dinero] >= PizzaStackPrecios[row] )
		{
		    if ( NegociosData[GetPlayerVirtualWorld(playerid)][Materiales] >= 2 )
		    {
				SetMoneyExtorsion(GetPlayerVirtualWorld(playerid), PizzaStackPrecios[row]);
			    GivePlayerMoneyEx(playerid, -PizzaStackPrecios[row]);

				SetPlayerHealthEx(playerid, PizzaStackPrecios[row]);
				ShowMenuForPlayer(PizzaStack, playerid);
			}
			else
			{
				SendInfoMessage(playerid, 0, "326", "Este Pizza Stack no tiene materiales");
			}
		}
		else
		{
			SendInfoMessage(playerid, 0, "325", "No tienes suficiente dinero para comprar esta comida del Pizza Stack");
		}
		ShowMenuForPlayer(PizzaStack, playerid);
	}
	else if ( PlayersDataOnline[playerid][InMenu] == JaysDiner)
	{
		if (PlayersData[playerid][Dinero] >= JaysDinerPrecios[row] )
		{
		    if ( NegociosData[GetPlayerVirtualWorld(playerid)][Materiales] >= 2 )
		    {
				SetMoneyExtorsion(GetPlayerVirtualWorld(playerid), JaysDinerPrecios[row]);
			    GivePlayerMoneyEx(playerid, -JaysDinerPrecios[row]);


				SetPlayerHealthEx(playerid, JaysDinerPrecios[row]);
				ShowMenuForPlayer(JaysDiner, playerid);
			}
			else
			{
				SendInfoMessage(playerid, 0, "324", "Este restaurante no tiene materiales");
			}
		}
		else
		{
			SendInfoMessage(playerid, 0, "323", "No tienes suficiente dinero para comprar esta comida del Restaurante");
		}
		ShowMenuForPlayer(JaysDiner, playerid);
	}
	else if ( PlayersDataOnline[playerid][InMenu] == RingDonuts)
	{
		if (PlayersData[playerid][Dinero] >= RingDonutsPrecios[row] )
		{
		    if ( NegociosData[GetPlayerVirtualWorld(playerid)][Materiales] >= 2 )
		    {
				SetMoneyExtorsion(GetPlayerVirtualWorld(playerid), RingDonutsPrecios[row]);
			    GivePlayerMoneyEx(playerid, -RingDonutsPrecios[row]);

				SetPlayerHealthEx(playerid, RingDonutsPrecios[row]);
				ShowMenuForPlayer(RingDonuts, playerid);
			}
			else
			{
				SendInfoMessage(playerid, 0, "322", "Este restaurante no tiene materiales");
			}
		}
		else
		{
			SendInfoMessage(playerid, 0, "321", "No tienes suficiente dinero para comprar esta comida del Restaurante");
		}
		ShowMenuForPlayer(RingDonuts, playerid);
	}
    PlayersDataOnline[playerid][InMenu] = GetPlayerMenu(playerid);
	return 1;
}

public OnPlayerExitedMenu(playerid)
{
	if ( PlayersDataOnline[playerid][InMenu] == CamerasM[0] )
	{
    	TogglePlayerSpectating(playerid, 0);
        PlayersDataOnline[playerid][Spawn]      = true;
    	SetSpawnInfoEx(playerid);
		TogglePlayerControllableEx(playerid, true);
		PlayersDataOnline[playerid][InCamera] = false;

		PlayersDataOnline[playerid][SubAfterMenuRow] = 0;
		PlayersDataOnline[playerid][AfterMenuRow] 	 = 0;
	}
	else if ( PlayersDataOnline[playerid][InMenu] == TYPE_PHONES_MENU )
	{
	     ShowMenuForPlayer(M24_7, playerid);
	     PlayersDataOnline[playerid][InMenu] = GetPlayerMenu(playerid);
	}
	else if ( PlayersDataOnline[playerid][InMenu] != Menu_Principal_Armas &&
			  PlayersData[playerid][IsPlayerInBizz] &&
		 	  NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type] >= 8 &&
   	     	  NegociosData[PlayersData[playerid][IsPlayerInBizz]][Type] <= 12 )
	{
	     ShowMenuForPlayer(Menu_Principal_Armas, playerid);
	     PlayersDataOnline[playerid][InMenu] = GetPlayerMenu(playerid);
	}
	else if ( PlayersDataOnline[playerid][InMenu] == Nitro 				||
			  PlayersDataOnline[playerid][InMenu] == Llantas1 			||
			  PlayersDataOnline[playerid][InMenu] == Llantas2   		||
			  PlayersDataOnline[playerid][InMenu] == Vinilos   			||
			  PlayersDataOnline[playerid][InMenu] == Principal_Sultan   ||
			  PlayersDataOnline[playerid][InMenu] == Principal_Elegy    ||
			  PlayersDataOnline[playerid][InMenu] == Principal_Flash    ||
			  PlayersDataOnline[playerid][InMenu] == Principal_Stratum  ||
			  PlayersDataOnline[playerid][InMenu] == Principal_Jester   ||
			  PlayersDataOnline[playerid][InMenu] == XFlowYAlien_Escape ||
			  PlayersDataOnline[playerid][InMenu] == XFlowYAlien_Sentinel ||
			  PlayersDataOnline[playerid][InMenu] == XFlowYAlien_Euros  ||
			  PlayersDataOnline[playerid][InMenu] == Principal_Savanna  ||
			  PlayersDataOnline[playerid][InMenu] == Principal_Remington ||
			  PlayersDataOnline[playerid][InMenu] == Principal_Slamvan ||
			  PlayersDataOnline[playerid][InMenu] == Principal_Blade

			  )
	{
		ShowMenuForPlayer(TallerPrincipal, playerid);
  		PlayersDataOnline[playerid][InMenu] = GetPlayerMenu(playerid);
	}
	else if ( PlayersDataOnline[playerid][InMenu] == Menu_Principal_Armas)
	{
		TogglePlayerControllableEx(playerid, true);
		PlayersDataOnline[playerid][SubAfterMenuRow] = 0;
		PlayersDataOnline[playerid][AfterMenuRow] 	 = 0;
	}
	else if ( PlayersDataOnline[playerid][InMenu] == Opciones_Savanna[PlayersDataOnline[playerid][AfterMenuRow]] )
	{
		ShowMenuForPlayer(Principal_Savanna, playerid);
  		PlayersDataOnline[playerid][InMenu] = GetPlayerMenu(playerid);
		PlayersDataOnline[playerid][SubAfterMenuRow] = 0;
		PlayersDataOnline[playerid][AfterMenuRow] 	 = 0;
	}
	else if ( PlayersDataOnline[playerid][InMenu] == Opciones_Blade[PlayersDataOnline[playerid][AfterMenuRow]] )
	{
		ShowMenuForPlayer(Principal_Blade, playerid);
  		PlayersDataOnline[playerid][InMenu] = GetPlayerMenu(playerid);
		PlayersDataOnline[playerid][SubAfterMenuRow] = 0;
		PlayersDataOnline[playerid][AfterMenuRow] 	 = 0;
	}
	else if ( PlayersDataOnline[playerid][InMenu] == Opciones_Remington[PlayersDataOnline[playerid][AfterMenuRow]] )
	{
		ShowMenuForPlayer(Principal_Remington, playerid);
  		PlayersDataOnline[playerid][InMenu] = GetPlayerMenu(playerid);
		PlayersDataOnline[playerid][SubAfterMenuRow] = 0;
		PlayersDataOnline[playerid][AfterMenuRow] 	 = 0;
	}
	else if ( PlayersDataOnline[playerid][InMenu] == Opciones_Slamvan[PlayersDataOnline[playerid][AfterMenuRow]] )
	{
		ShowMenuForPlayer(Principal_Slamvan, playerid);
  		PlayersDataOnline[playerid][InMenu] = GetPlayerMenu(playerid);
		PlayersDataOnline[playerid][SubAfterMenuRow] = 0;
		PlayersDataOnline[playerid][AfterMenuRow] 	 = 0;
	}
	else if ( PlayersDataOnline[playerid][InMenu] == XFlowYAlien_Sultan[PlayersDataOnline[playerid][AfterMenuRow]] )
	{
		ShowMenuForPlayer(Principal_Sultan, playerid);
  		PlayersDataOnline[playerid][InMenu] = GetPlayerMenu(playerid);
	}
	else if ( PlayersDataOnline[playerid][InMenu] == XFlowYAlien_Elegy[PlayersDataOnline[playerid][AfterMenuRow]] )
	{
		ShowMenuForPlayer(Principal_Elegy, playerid);
  		PlayersDataOnline[playerid][InMenu] = GetPlayerMenu(playerid);
	}
	else if ( PlayersDataOnline[playerid][InMenu] == XFlowYAlien_Flash[PlayersDataOnline[playerid][AfterMenuRow]] )
	{
		ShowMenuForPlayer(Principal_Flash, playerid);
  		PlayersDataOnline[playerid][InMenu] = GetPlayerMenu(playerid);
	}
	else if ( PlayersDataOnline[playerid][InMenu] == XFlowYAlien_Stratum[PlayersDataOnline[playerid][AfterMenuRow]] )
	{
		ShowMenuForPlayer(Principal_Stratum, playerid);
  		PlayersDataOnline[playerid][InMenu] = GetPlayerMenu(playerid);
	}
	else if ( PlayersDataOnline[playerid][InMenu] == XFlowYAlien_Jester[PlayersDataOnline[playerid][AfterMenuRow]] )
	{
		ShowMenuForPlayer(Principal_Jester, playerid);
  		PlayersDataOnline[playerid][InMenu] = GetPlayerMenu(playerid);
	}
	else if ( PlayersDataOnline[playerid][InMenu] == XFlowYAlien_Uranus[PlayersDataOnline[playerid][AfterMenuRow]] )
	{
		ShowMenuForPlayer(Principal_Uranus, playerid);
  		PlayersDataOnline[playerid][InMenu] = GetPlayerMenu(playerid);
	}
	else
	{
		TogglePlayerControllableEx(playerid, true);
		PlayersDataOnline[playerid][SubAfterMenuRow] = 0;
		PlayersDataOnline[playerid][AfterMenuRow] 	 = 0;
	}
	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	/*
	 16 - 1	= Enter 			- Entrar a un coche
	  2 	= C       			- Agacharse
	 32 	= CONTROL 			- Saltar
	  8 	= SHIFT Y ESPACIO	- Correr
	  4     = Click izquierdo (MAYUS)  - Golpear, acciones
	128     = Click derecho		- Apuntar (Sin coche)
	128     = ESPACIO			- Frenar (En coche)
	8     	= ESPACIO			- Frenar (En coche)
	512     = Rueda del ratón   - Rueda del ratón
	  1     = TAB               - Musestra los jugadores online
  1024      = DEL               - Andar (Caminar suave)
  2048      = J                 - Nada
  4096      = K                 - Nada
	*/
	/*new Keys[MAX_TEXT_CHAT]; format(Keys, sizeof(Keys), "Key: %i", newkeys);
    SendClientMessage(playerid, COLOR_MESSAGES[0], Keys);*/
	if ( PlayersDataOnline[playerid][ObjectWorking] == -1 )
	{
		if (newkeys == 16 || newkeys == 8192)
		{
			if(PlayersDataOnline[playerid][InPickup] != -1)
			{
			    if (PlayersDataOnline[playerid][InPickupTele])
			    {
			        if ( !IsPlayerInAnyVehicle(playerid) && IsPlayerInRangeOfPoint(playerid, 2.0, PlayersDataOnline[playerid][MyPickupX_Now], PlayersDataOnline[playerid][MyPickupY_Now], PlayersDataOnline[playerid][MyPickupZ_Now]))
			        {
			            if ( !PlayersDataOnline[playerid][MyPickupLock] || PlayersDataOnline[playerid][AdminOn] &&  PlayersData[playerid][Admin] >= 4 )
			            {
						    TextDrawHideForPlayer(playerid, PlayersDataOnline[playerid][MyTextDrawShow]);
					        if ( PlayersDataOnline[playerid][InPickup] >= NegociosData[1][PickupOutId] &&
					             PlayersDataOnline[playerid][InPickup] <= NegociosData[MAX_BIZZ][PickupOutId] ||
								 Teles[PickUpAlambraAndJizzy[0]][PickupIDGo] == PlayersDataOnline[playerid][InPickup] ||
								 Teles[PickUpAlambraAndJizzy[1]][PickupIDGo] == PlayersDataOnline[playerid][InPickup] )
					        {
								if (PlayersData[playerid][Dinero] >= NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][PriceJoin] )
								{
								    NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][Deposito] = NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][Deposito] + NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][PriceJoin];
								    GivePlayerMoneyEx(playerid, -NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][PriceJoin]);

							        SetFunctionsForBizz(playerid, NegociosData[PlayersDataOnline[playerid][MyPickupWorld]][Type]);
							        PlayersData[playerid][IsPlayerInBizz] = PlayersDataOnline[playerid][MyPickupWorld];
								}
								else
								{
									SendInfoMessage(playerid, 0, "295", "No tienes suficiente dinero para entrar a este negocio");
									return 1;
								}
					        }
							else if ( PlayersDataOnline[playerid][InPickup] >= HouseData[1][PickupId] &&
					  				  PlayersDataOnline[playerid][InPickup] <= HouseData[MAX_HOUSE][PickupId] )
					        {
								PlayersData[playerid][IsPlayerInHouse] = PlayersDataOnline[playerid][MyPickupWorld];
                                OnPlayerEnterInHouse(playerid);
					        }
					        // GARAGES TYPE
					        else if ( PlayersDataOnline[playerid][InPickup] >= TypeGarage[0][PickupId] &&
					             	  PlayersDataOnline[playerid][InPickup] <= TypeGarage[MAX_GARAGE_TYPE][PickupIdh] &&
									  PlayersDataOnline[playerid][MyPickupWorld] )
					        {
   					            PlayersData[playerid][IsPlayerInHouse] = PlayersDataOnline[playerid][MyPickupWorld];
					            if ( IsGarageToHouse(playerid, PlayersDataOnline[playerid][InPickup]) )
					            {
                                	PlayersData[playerid][IsPlayerInGarage] =  -1;
                               	}
                               	else
                               	{
                                	PlayersData[playerid][IsPlayerInGarage] =  PlayersData[playerid][IsPlayerInGarage] + 50;
								}

					        }
					        else if ( PlayersDataOnline[playerid][InPickup] >= MIN_GARAGE_PICKUP &&
					             	  PlayersDataOnline[playerid][InPickup] <= MAX_GARAGE_PICKUP )
					        {
					            PlayersData[playerid][IsPlayerInHouse] 	= PlayersDataOnline[playerid][InPickupTele];
                                PlayersData[playerid][IsPlayerInGarage] =  PlayersData[playerid][IsPlayerInGarage] + 50;
                                if ( Garages[PlayersData[playerid][IsPlayerInHouse]][PlayersData[playerid][IsPlayerInGarage]][PickupidIn] != PlayersDataOnline[playerid][InPickup] )
                                {
									OnPlayerEnterInHouse(playerid);
								}
					        }
					        else if ( PlayersDataOnline[playerid][InPickup] == BANCO_PICKUPID_out )
					        {
								PlayersData[playerid][IsPlayerInBank] = true;
							}
							else if ( PlayersDataOnline[playerid][InPickup] == HOTEL_PICKUPID_out ||
									  PlayersDataOnline[playerid][InPickup] == MUSEO_PICKUPID_out[0] ||
									  PlayersDataOnline[playerid][InPickup] == MUSEO_PICKUPID_out[1] ||
									  PlayersDataOnline[playerid][InPickup] == MUSEO_PICKUPID_out[2] ||
									  PlayersDataOnline[playerid][InPickup] == MUSEO_PICKUPID_out[3] ||
									  PlayersDataOnline[playerid][InPickup] == MUSEO_PICKUPID_out[4] ||
									  PlayersDataOnline[playerid][InPickup] == MUSEO_PICKUPID_out[5] ||
									  PlayersDataOnline[playerid][InPickup] == MUSEO_PICKUPID_out[6]
									 )
							{
								if (PlayersData[playerid][Dinero] >= 40 )
								{
									FaccionData[GOBIERNO][Deposito] = FaccionData[GOBIERNO][Deposito] + 40;
									GivePlayerMoneyEx(playerid, -40);
									if ( PlayersDataOnline[playerid][InPickup] == HOTEL_PICKUPID_out )
									{
										PlayersDataOnline[playerid][IsPlayerInHotel] = true;
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "870", "No tienes suficiente dinero para entrar a está instalación del Gobierno!");
									return 1;
								}
							}
					        else
					        {
						        DisablePlayerCheckpoint(playerid);
						        PlayersData[playerid][IsPlayerInHouse] 		= false;
						        PlayersData[playerid][IsPlayerInBizz] 		= false;
								PlayersData[playerid][IsPlayerInBank] = false;
								PlayersDataOnline[playerid][IsPlayerInHotel]= false;
								PlayersData[playerid][IsPlayerInGarage] 	= -1;
								OnPlayerExitHouse(playerid);

							}
							new InterioridTele = PlayersDataOnline[playerid][MyPickupInterior];
							new WorldTele = PlayersDataOnline[playerid][MyPickupWorld];
							SetPlayerInteriorEx(playerid, InterioridTele);
							SetPlayerVirtualWorldEx(playerid, WorldTele);
						    SetPlayerPos(playerid, PlayersDataOnline[playerid][MyPickupX], PlayersDataOnline[playerid][MyPickupY], PlayersDataOnline[playerid][MyPickupZ]);
							SetPlayerFacingAngle(playerid, PlayersDataOnline[playerid][MyPickupZZ]);
							SetCameraBehindPlayer(playerid);

			                if ( PlayersData[playerid][IsPlayerInVehInt] )
			                {
			                    PlayersData[playerid][IsPlayerInVehInt] = WorldTele;
			                }

							if(PlayersDataOnline[playerid][IsEspectando])
							{
								UpdateSpectatedPlayers(playerid, false, InterioridTele, WorldTele);
							}
							if ( newkeys == 8192 )
							{
								SetPlayerSpecialAction(playerid, 0);
						    	ClearAnimations(playerid, true);
								SetPlayerSpecialAction(playerid, PlayersDataOnline[playerid][InSpecialAnim]);
							}
						}
						else
						{
							GameTextForPlayer(playerid, "~W~Puerta ~R~Cerrada!", 1000, 6);
						}
					}
			    }
			    else if ( PlayersData[playerid][IsPlayerInVehInt] )
			    {
			        if ( TextDrawInfo[PickupidAmbulance][PickupidTextInfo] == PlayersDataOnline[playerid][InPickup] ||
						  TextDrawInfo[PickupidFurgoCNN][PickupidTextInfo] == PlayersDataOnline[playerid][InPickup] ||
						  TextDrawInfo[PickupidPoliceFurgo][PickupidTextInfo] == PlayersDataOnline[playerid][InPickup] ||
						  TextDrawInfo[PickupExitVagones[0]][PickupidTextInfo] == PlayersDataOnline[playerid][InPickup] ||
						  TextDrawInfo[PickupExitVagones[1]][PickupidTextInfo] == PlayersDataOnline[playerid][InPickup] ||
						  TextDrawInfo[PickupExitVagones[2]][PickupidTextInfo] == PlayersDataOnline[playerid][InPickup] )
					{
			            new WorldTele = PlayersData[playerid][IsPlayerInVehInt];
				        if ( GetPlayerVirtualWorld(playerid) > 0 && GetPlayerVirtualWorld(playerid) <= MAX_CAR)
				        {
				            if ( !DataCars[WorldTele][Lock] )
				            {
					            PlayersData[playerid][IsPlayerInVehInt] = false;
					            SetPlayerInteriorEx(playerid, DataCars[WorldTele][InteriorLast]);
								SetPlayerVirtualWorldEx(playerid, DataCars[WorldTele][WorldLast]);
								if ( GetVehicleVirtualWorld(WorldTele) != 999 )
								{
								    if ( coches_Todos_Type[GetVehicleModel(WorldTele) - 400] == TREN )
								    {
								        new Float:VehiclePos[3]; GetVehiclePos(WorldTele, VehiclePos[0], VehiclePos[1], VehiclePos[2]);
										SetPlayerPos(playerid, VehiclePos[0] + 2, VehiclePos[1] + 2, VehiclePos[2]);
						            }
						            else
						            {
							            PlayersDataOnline[playerid][ExitedVehicle] = true;
										PutPlayerInVehicle(playerid, WorldTele, 2);
										RemovePlayerFromVehicle(playerid);
							            SetTimerEx("PlayerRestoreVarExitedVehicle", 1000, false, "d", playerid);
									}
								}
								else
								{
								    SetPlayerPos(playerid, DataCars[WorldTele][PosX], DataCars[WorldTele][PosY], DataCars[WorldTele][PosZ]);
								}
							}
							else
							{
								GameTextForPlayer(playerid, "~W~Puerta ~R~Cerrada!", 1000, 6);
							}
						}
					}
				}
			}
			else if ( PlayersDataOnline[playerid][InAnim] )
			{
			    ApplyAnimation(playerid,"PED",PED_ANIMATIONS[ModeWalkID[4]], 4.0, 0, 1, 1, 0, 1, 1);
				PlayersDataOnline[playerid][InAnim] = false;
			}
			IsPlayerNearTram(playerid);
			if ( PlayersDataOnline[playerid][InSleep] )
			{
				PlayersDataOnline[playerid][InSleep] = false;
				TogglePlayerControllableEx(playerid, true);
			}
		}
		else if ( newkeys == 16384 )
		{
			RemoveSpectatePlayer(playerid);
		}
		else if ( newkeys == 0 )
		{
		    if ( PlayersDataOnline[playerid][InWalk])
		    {
			    ApplyAnimation(playerid,"PED",PED_ANIMATIONS[ModeWalkID[PlayersData[playerid][MyStyleWalk]]], 4.0, 0, 1, 1, 0, 1, 1);
			    PlayersDataOnline[playerid][InWalk] = false;
			}
		}
		else if ( newkeys == 1024)
		{
			ApplyPlayerAnimCustom(playerid,
			"PED",
			PED_ANIMATIONS[ModeWalkID[PlayersData[playerid][MyStyleWalk]]], true);
			PlayersDataOnline[playerid][InWalk] = true;
		}
		else if ( newkeys == 8)
		{
		    if ( PlayersDataOnline[playerid][Espectando] != -1 )
		    {
				SetPlayerSpectateToPlayer(playerid, PlayersDataOnline[playerid][Espectando]);
			}
			/*if (!IsPlayerInAnyVehicle(playerid))
			{
				ApplyPlayerAnimCustom(playerid,
				ModeSprintLibraryAnim[PlayersData[playerid][MyStyleSprint]],
				ModeSprintNameAnim[PlayersData[playerid][MyStyleSprint]], true);
				PlayersDataOnline[playerid][InWalk] = true;
			}*/
		}
		else if ( newkeys == 4 )
		{
		    if ( GetPlayerSpecialAction(playerid) == 22 || GetPlayerSpecialAction(playerid) == 21 )
		    {
		        SetPlayerDrunkLevel(playerid, GetPlayerDrunkLevel(playerid) + 200);
			    if ( GetPlayerDrunkLevel(playerid) >= 20000 )
			    {
				    GameTextForPlayer(playerid, "~W~Vaya ~B~nota llevas!", 5000, 1);
					SetPlayerSpecialAction(playerid, 0);
				}
			    if ( GetPlayerDrunkLevel(playerid) >= 5000 )
			    {
					ApplyPlayerAnimCustom(playerid,
					"PED",
					PED_ANIMATIONS[257], true);
			    }
			}
			if ( PlayersDataOnline[playerid][InCarId] && IsPlayerInAnyVehicle(playerid) && !DataCars[GetPlayerVehicleID(playerid)][StateEncendido] ||
				 PlayersDataOnline[playerid][InVehicle] && IsPlayerInAnyVehicle(playerid) && !DataCars[GetPlayerVehicleID(playerid)][StateEncendido] )
			{
				EncenderVehicle(playerid);
			}
			/*if ( !PlayersDataOnline[playerid][ModeDM] )
			{
				CheckWeapondCheat(playerid);
			}*/
			if ( !PlayersData[playerid][IntermitentState] )
			{
				IntermitenteEncendido(playerid);
			}
			LastPlayerSpect(playerid);
		}
		else if ( newkeys == 128 || newkeys == 512 )
		{
		    if ( IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) == 0 && coches_Todos_Type[GetVehicleModel(GetPlayerVehicleID(playerid)) - 400] == COCHE )
		    {
	 			ApplyPlayerAnimCustom(playerid,
				"CAR",
				CAR_ANIMATIONS[4], false);
		    }
			/*if ( !PlayersDataOnline[playerid][ModeDM] )
			{
				CheckWeapondCheat(playerid);
			}*/
			NextPlayerSpect(playerid);
		}
		else if ( newkeys == 2048 )
		{
			if ( !PlayersData[playerid][IntermitentState] )
			{
				IntermitenteIzquierdo(playerid);
			}
		}
		else if ( newkeys == 4096 )
		{
			if ( !PlayersData[playerid][IntermitentState] )
			{
				IntermitenteDerecho(playerid);
			}
		}
		else if ( newkeys == 132 )
		{
			if ( !PlayersData[playerid][IntermitentState] )
			{
				IntermitenteEstacionamiento(playerid);
			}
		}
		else if ( newkeys == 2 )
		{
		    if ( IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) != 0 && PlayersDataOnline[playerid][IsCleanAnimCar] == 2 && GetPlayerWeapon(playerid))
		    {
				PlayersDataOnline[playerid][LastWeapondRow] = GetPlayerWeapon(playerid);
				PlayersDataOnline[playerid][IsCleanAnimCar] = 0;
	            SetPlayerArmedWeapon(playerid, 0);
		        if ( coches_Todos_Type[GetVehicleModel(GetPlayerVehicleID(playerid)) - 400] == MOTO )
		        {
		 			ApplyPlayerAnimCustom(playerid,
					"MD_CHASE",
					CHASE_ANIMATIONS[3], false);
				}
				else
				{
		 			ApplyPlayerAnimCustom(playerid,
					"PED",
					PED_ANIMATIONS[59], false);
				}
			}
			else if ( IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) != 0 && PlayersDataOnline[playerid][IsCleanAnimCar] <= 1)
			{
				SetPlayerArmedWeapon(playerid, PlayersDataOnline[playerid][LastWeapondRow]);
				PlayersDataOnline[playerid][IsCleanAnimCar]++;
			}
			else if ( PlayersDataOnline[playerid][InCarId] && IsPlayerInVehicle(playerid, PlayersDataOnline[playerid][InCarId])  && GetPlayerVehicleSeat(playerid) == 0  )
			{
				GetMyNearDoor(playerid, true, false);
				if ( !IsPlayerNearGarage(GetPlayerVehicleID(playerid), playerid) )
				{
					IsPlayerNearGarageEx(GetPlayerVehicleID(playerid), playerid);
				}
			}
		}
		else if ( newkeys == 1 )
		{
		    if ( IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) == 0 && GetVehicleModel(GetPlayerVehicleID(playerid)) == 525 ||
				 IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) == 0 && GetVehicleModel(GetPlayerVehicleID(playerid)) == 515 ||
	 			 IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) == 0 && GetVehicleModel(GetPlayerVehicleID(playerid)) == 514 ||
	 			 IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) == 0 && GetVehicleModel(GetPlayerVehicleID(playerid)) == 403 )
			{
				new MySecondNearVehicle = GetMySecondNearVehicle(playerid);
				if ( GetVehicleModel(GetPlayerVehicleID(playerid)) == 515 && GetVehicleModel(MySecondNearVehicle) != 591 &&
					 GetVehicleModel(GetPlayerVehicleID(playerid)) == 515 && GetVehicleModel(MySecondNearVehicle) != 435 &&
					 GetVehicleModel(GetPlayerVehicleID(playerid)) == 515 && GetVehicleModel(MySecondNearVehicle) != 584 ||
					 GetVehicleModel(GetPlayerVehicleID(playerid)) == 514 && GetVehicleModel(MySecondNearVehicle) != 591 &&
					 GetVehicleModel(GetPlayerVehicleID(playerid)) == 514 && GetVehicleModel(MySecondNearVehicle) != 435 &&
					 GetVehicleModel(GetPlayerVehicleID(playerid)) == 514 && GetVehicleModel(MySecondNearVehicle) != 584 ||
					 GetVehicleModel(GetPlayerVehicleID(playerid)) == 403 && GetVehicleModel(MySecondNearVehicle) != 591 &&
					 GetVehicleModel(GetPlayerVehicleID(playerid)) == 403 && GetVehicleModel(MySecondNearVehicle) != 435 &&
					 GetVehicleModel(GetPlayerVehicleID(playerid)) == 403 && GetVehicleModel(MySecondNearVehicle) != 584  )
				{
					return 1;
				}
			    // printf("Segundo coche cerca: %i", MySecondNearVehicle);
			    if ( MySecondNearVehicle )
			    {
			        if ( PlayersData[playerid][Faccion] == TALLER_LS ||
			        	 PlayersData[playerid][Faccion] == TALLER_SF ||
				         PlayersData[playerid][Faccion] == CAMIONEROS ||
				         PlayersData[playerid][Faccion] == NFS ||
	 			         PlayersData[playerid][Faccion] == LSPD ||
					     PlayersData[playerid][Faccion] == SFPD)
					{
						if ( !GetVehicleTrailer(GetPlayerVehicleID(playerid)) )
						{
						    AttachTrailerToVehicle(MySecondNearVehicle, GetPlayerVehicleID(playerid));

						    if ( GetVehicleModel(GetPlayerVehicleID(playerid)) == 515 ||
								 GetVehicleModel(GetPlayerVehicleID(playerid)) == 514 ||
								 GetVehicleModel(GetPlayerVehicleID(playerid)) == 403 )
						    {
								Acciones(playerid, 8, "remolca un trailer");
							}
							else
							{
								Acciones(playerid, 8, "remolca un vehículo");
							}
						}
						else
						{
							DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
						    if ( GetVehicleModel(GetPlayerVehicleID(playerid)) == 515 ||
								 GetVehicleModel(GetPlayerVehicleID(playerid)) == 514 ||
	 							 GetVehicleModel(GetPlayerVehicleID(playerid)) == 403 )
						    {
								Acciones(playerid, 8, "desengancha un trailer");
							}
							else
							{
								Acciones(playerid, 8, "desengancha un vehículo");
							}
						}
					}
				}
			}
		}
	}
	else
	{
	    if ( newkeys == 16 )
	    {
	        if ( PlayersDataOnline[playerid][UseRotOrPos] )
	        {
		    	PlayersDataOnline[playerid][UseRotOrPos] = false;
				GameTextForPlayer(playerid, "~G~Usando ~Y~ROT!", 1000, 6);
	    	}
	    	else
	    	{
	    	    PlayersDataOnline[playerid][UseRotOrPos] = true;
				GameTextForPlayer(playerid, "~G~Usando ~R~POS!", 1000, 6);
			}
	    }
	    else if ( newkeys == 128 )
	    {
	        if ( PlayersDataOnline[playerid][ReverseState] )
	        {
	    	    PlayersDataOnline[playerid][ReverseState] = false;
				GameTextForPlayer(playerid, "~R~Reverse ~R~Desactivado!", 1000, 6);
	    	}
	    	else
	    	{
	    	    PlayersDataOnline[playerid][ReverseState] = true;
				GameTextForPlayer(playerid, "~R~Reverse ~G~Activado!", 1000, 6);
			}
	    }
	    if ( PlayersDataOnline[playerid][ReverseState] )
	    {
	    	OnMoveObjectMapping(playerid, PlayersDataOnline[playerid][ObjectWorking], newkeys, PlayersDataOnline[playerid][UseRotOrPos], PlayersDataOnline[playerid][MappingPoint]);
    	}
    	else
    	{
	    	OnMoveObjectMapping(playerid, PlayersDataOnline[playerid][ObjectWorking], newkeys, PlayersDataOnline[playerid][UseRotOrPos], -PlayersDataOnline[playerid][MappingPoint]);
		}
	}
	return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
	if ( !success )
	{
	    new MenjaseFailLogin[120];

		new IpBan[120];
		for (new i = 0; i < MAX_PLAYERS; i++)
		{
		    if ( IsPlayerConnected(i) )
			{
				GetPlayerIp(i, IpBan, sizeof(IpBan));
			}
			else
			{
			    continue;
			}

		    if ( strcmp(ip, IpBan, true) == 0 )
		    {
		        new Nombre[35];
				GetPlayerName(i, Nombre, sizeof(Nombre));
				format(MenjaseFailLogin, sizeof(MenjaseFailLogin), "%s Posible ataque DDoS por RconLogin password \"%s\" Usuario: \"%s\" desde la IP: %s",LOGO_STAFF, password, Nombre, ip);
				SendInfoMessage(i, 2, "0", "Good Bye!");
		        Ban(i);
				break;
			}
		}
		MsgCheatsReportsToAdmins(MenjaseFailLogin);
	}
	return 1;
}

public OnPlayerUpdate(playerid)
{
    /*if(GetPlayerAnimationIndex(playerid))
    {
        new animlib[32];
        new animname[32];
        new msg[128];
        GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);
        format(msg, 128, "Running anim: %s %s", animlib, animname);
        SendClientMessage(playerid, 0xFFFFFFFF, msg);
    }*/

    //////////////// The begin.
	if ( PlayersDataOnline[playerid][State] == 3 )
	{
  		//////////////// Mode Death Match
	    /*if (!PlayersDataOnline[playerid][ModeDM])
	    {*/
	    static Keys,UD,LR;
	    GetPlayerKeys(playerid,Keys,UD,LR);
	    if(LR > 0 || LR < 0 || UD > 0 || UD < 0)
	    {
			if ( PlayersData[playerid][Cansansio] <= 1 )
			{
				ApplyAnimation(playerid,"PED",PED_ANIMATIONS[258], 4.0, 0, 1, 1, 0, 1, 1);
			}
		}
		else
		{
			if ( PlayersData[playerid][Cansansio] <= 1 )
			{
				ApplyAnimation(playerid,"FAT",FAT_ANIMATIONS[17], 4.0, 1, 1, 1, 1, 1, 1);
			}
		}
		//}
        //////////////// The Time....
	    static MyTime; MyTime = gettime();

        //////////////// The Check Fire....
	    if ( (MyTime - PlayersDataOnline[playerid][IsCheckUser]) >= 2)
	    {
	        	PlayersDataOnline[playerid][IsCheckUser] = MyTime;
				SetPlayerOrginalTime(playerid);
				CheckFire(playerid);
		}
	    /*if ( (MyTime - PlayersDataOnline[playerid][IsCheckAudio]) >= 1)
	    {
	        PlayersDataOnline[playerid][IsCheckAudio]= MyTime;
			PlayAllEcualizerForVehicle(playerid);
			PlayAllEcualizerForHouse(playerid);
	    }*/
		if ( HaveObjectByTypeAndShow(playerid, TYPE_TASER) )
		{
			SetPlayerArmedWeapon(playerid, 0);
		}
        //////////////// Check TextDraws Teles
		HideTextDrawsTelesAndInfo(playerid);

        //////////////// Jail
		if ( PlayersData[playerid][IsInJail] != -1 && PlayersData[playerid][Jail] <= MyTime )
		{
			PlayersData[playerid][Jail] = 0;
			PlayersDataOnline[playerid][StateDeath] = 4;
			SetPlayerVirtualWorldEx(playerid, JailsType[PlayersData[playerid][IsInJail]][WorldLiberado]);
			SetPlayerInteriorEx(playerid, JailsType[PlayersData[playerid][IsInJail]][Interior_Liberado]);
		    PlayersData[playerid][IsInJail] = -1;
			SendInfoMessage(playerid, 2, "0", "Has cumplido tu condena de jail.");
		    SpawnPlayerEx(playerid);
		}

        //////////////// AdminOn
		if ( PlayersDataOnline[playerid][AdminOn] )
		{
			SetPlayerHealth(playerid, INFINITY_HEALTH);
			PlayersDataOnline[playerid][ChangeVC] = 10;
		}
        //////////////// Check Health...
		else
		{
			GetPlayerHealth(playerid, PlayersDataOnline[playerid][CurrentHealth]);
			GetPlayerArmour(playerid, PlayersDataOnline[playerid][CurrentArmour]);
			if ( PlayersDataOnline[playerid][ChangeVC] <= 0 )
			{
			    UpdateArmourAndArmour(playerid, PlayersDataOnline[playerid][CurrentHealth], PlayersDataOnline[playerid][CurrentArmour]);
				if ( PlayersDataOnline[playerid][CurrentHealth] <= VIDA_CRACK || PlayersDataOnline[playerid][IsTeazer] > MyTime )
				{
					ApplyAnimation(playerid,"CRACK",CRACK_ANIMATIONS[3], 4.0, 1, 1, 1, 1, 1, 1);
				}
				if ( MyTime - PlayersDataOnline[playerid][LoginTime] > EnfermedadTiempo[PlayersData[playerid][Enfermedad]] )
				{
	             	SetPlayerHealthEx(playerid, -1);
					PlayersDataOnline[playerid][LoginTime] = MyTime;
				    if (PlayersDataOnline[playerid][CansansioConteo] == 20 && PlayersData[playerid][Cansansio] > 1 )
				    {
				        PlayersDataOnline[playerid][CansansioConteo] = 0;
				    	TextDrawHideForPlayer(playerid, BarsCansansio[PlayersData[playerid][Cansansio]]);
				    	PlayersData[playerid][Cansansio]--;
						ShowPlayerTextDrawCansansio(playerid);
				    }

					PlayersDataOnline[playerid][CansansioConteo]++;

					if ( PlayersDataOnline[playerid][CurrentHealth] <= VIDA_CRACK || PlayersData[playerid][Cansansio] <= 1)
					{
					    SendClientMessage(playerid, COLOR_MESSAGES[0], " Se encuentra muy cansado, debe descansar un poco puede llamar a un médico al \"105\"");
					}
				}
			}
			else if( PlayersDataOnline[playerid][ChangeVC] )
			{
		        SetPlayerHealth(playerid, PlayersDataOnline[playerid][VidaOn]);
		        SetPlayerArmour(playerid, PlayersDataOnline[playerid][ChalecoOn]);
			    PlayersDataOnline[playerid][ChangeVC]--;
			}
			UpdateTextEnfermedad(playerid);
		}
        //////////////// Vehicles...
	    if ( IsPlayerInAnyVehicle(playerid) )
	    {
	        if ( !PlayersDataOnline[playerid][InCarId] && !PlayersDataOnline[playerid][InVehicle] )
	        {
		        if ( IsVehicleOpen(playerid, GetPlayerVehicleID(playerid), GetPlayerVehicleSeat(playerid)) || PlayersDataOnline[playerid][LicenciaTest])
		        {
		        	if ( coches_Todos_Type[GetVehicleModel(GetPlayerVehicleID(playerid)) - 400] != BICI )
		        	{
						if ( GetPlayerVehicleSeat(playerid) == 0 )
						{
					    	PlayersDataOnline[playerid][InCarId] = GetPlayerVehicleID(playerid);
							ShowTextDrawFijosVelocimentros(playerid);
							if ( !coches_Todos_Velocidad[DataCars[PlayersDataOnline[playerid][InCarId]][Modelo] - 400] )
							{
							    TextDrawShowForPlayer(playerid, TemperaturaTextDraws[41]);
							    PlayersDataOnline[playerid][LastTextDrawTemperatura] = 41;
							}
							DataCars[PlayersDataOnline[playerid][InCarId]][GasNotShow] = true;
						    DataCars[PlayersDataOnline[playerid][InCarId]][OilNotShow] = true;

							IsVehicleOff(PlayersDataOnline[playerid][InCarId]);


							if ( !PlayersDataOnline[playerid][LicenciaTest] )
							{
								if ( !PlayersData[playerid][Licencias][coches_Todos_Type[GetVehicleModel(PlayersDataOnline[playerid][InCarId]) - 400]] )
								{
									IsFixBikeEnter(playerid, PlayersDataOnline[playerid][InCarId] );
									static MsgNotLicencias[MAX_TEXT_CHAT];
									format(MsgNotLicencias, sizeof(MsgNotLicencias), "No tienes licencia de %s. ¡Cuidado con la policia!", LicenciasNames[coches_Todos_Type[GetVehicleModel(GetPlayerVehicleID(playerid)) - 400]]);
									SendInfoMessage(playerid, 0, "517", MsgNotLicencias);
							    }
						    }
						    if ( PlayersDataOnline[playerid][InCarId] <= MAX_CAR_DUENO && DataCars[PlayersDataOnline[playerid][InCarId]][Puente] && strlen(DataCars[PlayersDataOnline[playerid][InCarId]][Dueno]) == 1)
						    {
							    SendInfoMessage(playerid, 2, "0", "No tienes las llaves de éste vehículo, pero puedes hacerle un puente. Usa (/Puente) o (Enter)");
							}
							else if ( !DataCars[PlayersDataOnline[playerid][InCarId]][StateEncendido] )
							{
							    SendInfoMessage(playerid, 2, "0", "Éste vehículo se encuentra apagado. Usa (Click Izquierdo) o (Enter)");
							}
							if ( DataCars[PlayersDataOnline[playerid][InCarId]][LockPolice] )
							{
								static MsgIsLock[MAX_TEXT_CHAT];
								format(MsgIsLock, sizeof(MsgIsLock), " Éste vehículo tiene un candado policial! Departamento %s", DataCars[PlayersDataOnline[playerid][InCarId]][ReasonLock]);
								SendClientMessage(playerid, COLOR_MESSAGES[0], MsgIsLock);

							}
						    if ( PlayersDataOnline[playerid][LicenciaTest] )
						    {
		                        PlayersDataOnline[playerid][LicenciaTest] = false;
							}

							static Float:Estado; GetVehicleHealth(PlayersDataOnline[playerid][InCarId], Estado);
							DataCars[PlayersDataOnline[playerid][InCarId]][LastDamage]     = Estado;
	                        UpdateDamage(playerid, Estado);
							PlayAudioPlayerVehicle(playerid, PlayersDataOnline[playerid][InCarId]); // Audio
							UpdateGasAndOil(PlayersDataOnline[playerid][InCarId]);
//							DataCars[PlayersDataOnline[playerid][InCarId]][LastVelocityInt] 	= GetVehicleVelocityEx(PlayersDataOnline[playerid][InCarId]);
							OnPlayerEnterVehicleEx(playerid, PlayersDataOnline[playerid][InCarId], 0);
						}
						else
						{
							PlayersDataOnline[playerid][InVehicle] = GetPlayerVehicleID(playerid);

						    if ( !PlayersDataOnline[playerid][ExitedVehicle] )
						    {
								if ( IsVehicleWithInterior(playerid) || IsPlayerInTrain(playerid) )
								{
								    PlayersData[playerid][IsPlayerInVehInt] = GetPlayerVirtualWorld(playerid);
								}
							}
 							static TaxiID; TaxiID = IsVehicleTaxi(PlayersDataOnline[playerid][InVehicle]);
 							if ( TaxiID != -1 && TaxisTaximetro[TaxiID][TaxiOn] && CheckValidPlayerToTaxi(playerid, TaxiID) )
 							{
 							    SetPlayerTaxi(playerid, TaxiID, GetPlayerVehicleSeat(playerid));
							}
							OnPlayerEnterVehicleEx(playerid, PlayersDataOnline[playerid][InVehicle], GetPlayerVehicleSeat(playerid));
							PlayAudioPlayerVehicle(playerid, PlayersDataOnline[playerid][InVehicle]); // Audio
						}
					}
				}
				else
				{
					RemovePlayerFromVehicle(playerid);
					IsFixBikeEnter(playerid, GetPlayerVehicleID(playerid));
				}
			}
			else if ( PlayersDataOnline[playerid][InCarId] )
			{
	            if ( GetPlayerVehicleID(playerid) == PlayersDataOnline[playerid][InCarId] )
				{
					UpdateTextDrawVehicle(playerid, PlayersDataOnline[playerid][InCarId]);
					if ( DataCars[PlayersDataOnline[playerid][InCarId]][StateEncendido] )
					{
						if ( DataCars[PlayersDataOnline[playerid][InCarId]][Gas] < 1 && DataCars[PlayersDataOnline[playerid][InCarId]][GasNotShow] )
					    {
						    DataCars[PlayersDataOnline[playerid][InCarId]][GasNotShow] = false;
							SendClientMessage(playerid, COLOR_MESSAGES[0], " Vehículo sin gas! Use (Enter) para salir del mismo");
						}
						if ( DataCars[PlayersDataOnline[playerid][InCarId]][Oil] < 1 && DataCars[PlayersDataOnline[playerid][InCarId]][OilNotShow] )
					    {
						    DataCars[PlayersDataOnline[playerid][InCarId]][OilNotShow] = false;
							SendClientMessage(playerid, COLOR_MESSAGES[0], " Vehículo sin aceíte! Use (Enter) para salir del mismo");
					    }
						if ( DataCars[PlayersDataOnline[playerid][InCarId]][TemperaturaC] )
						{
							Acciones(playerid, 7, "Vehículo: Sobrecalentado.");
						}
	 					if ( DataCars[PlayersDataOnline[playerid][InCarId]][Gas] < 1 || DataCars[PlayersDataOnline[playerid][InCarId]][Oil] < 1 || DataCars[PlayersDataOnline[playerid][InCarId]][TemperaturaC] )
						{
							DataCars[PlayersDataOnline[playerid][InCarId]][StateEncendido] = false;
							DataCars[PlayersDataOnline[playerid][InCarId]][TemperaturaC] = false;
							IsVehicleOff(PlayersDataOnline[playerid][InCarId]);
						}
					}
					if ( DataCars[PlayersDataOnline[playerid][InCarId]][LockPolice] )
					{
						SetVehicleVelocity(PlayersDataOnline[playerid][InCarId], 0.0, 0.0, 0.0);
					}
				}
				else
				{
				    RemovePlayerFromVehicleEx(playerid, false, MyTime);
				}
			}
			else if ( PlayersDataOnline[playerid][InVehicle] )
			{
				if ( GetPlayerVehicleID(playerid) != PlayersDataOnline[playerid][InVehicle] )
				{
    				RemovePlayerFromVehicleEx(playerid, true, MyTime);
				}
				else if ( PlayersDataOnline[playerid][IsTaxi] != -1 )
				{
			 	 	UpdateTaximetroSeat(playerid);
				}
			}
    	}
    	else
    	{
	        if ( PlayersDataOnline[playerid][InCarId])
	        {
			    RemovePlayerFromVehicleEx(playerid, false, MyTime);
				StopAudioPlayer(playerid, PlayersDataOnline[playerid][HandleAVehicle]);
	        }
	        else if ( PlayersDataOnline[playerid][InVehicle] )
	        {
			    RemovePlayerFromVehicleEx(playerid, true, MyTime);
				StopAudioPlayer(playerid, PlayersDataOnline[playerid][HandleAVehicle]);
			}
    	}

	    //////////////// Anticheat Money...
		if ( PlayersData[playerid][Dinero] != GetPlayerMoney(playerid) )
		{
		    if ( PlayersDataOnline[playerid][StateMoneyPass] <= MyTime )
			{
				IsCheatMoney(playerid, GetPlayerMoney(playerid));
			}
			ResetPlayerMoney(playerid);
			GivePlayerMoney(playerid, PlayersData[playerid][Dinero]);
		}

		return CheckWeapondCheat(playerid);
	}
	else
	{
	    return 0;
	}
}
public OnPlayerStreamIn(playerid, forplayerid)
{
	return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
	return 1;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
	return 1;
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	if ( PlayersDataOnline[playerid][CurrentDialog] != dialogid )
	{
		SendInfoMessage(playerid, 0, "1315", "Hacking attempt? || Why? Because this's Another Reality!");
		return true;
	}
	switch ( dialogid )
	{
	    // LOGIN
	    case 1:
	    {
	        if ( response == 1 )
	        {
	            if ( PlayersData[playerid][AccountState] != 3 )
	            {
			        if ( strcmp(PlayersData[playerid][Password], inputtext, false) == 0 && strlen(inputtext) ==  strlen(PlayersData[playerid][Password]))
			        {
						SetPlayerColor(playerid, PLAYERS_COLOR);
						KillTimer(PlayersDataOnline[playerid][TimerLoginId]);
						if ( PlayersData[playerid][IsInJail] != -1)
				        {
							PlayersData[playerid][Jail] = gettime() + PlayersData[playerid][Jail];
							SendInfoMessage(playerid, 2, "0", "Todavía te encuentras en jail de la última vez que jugaste.");
						}
						if ( PlayersData[playerid][Alquiler] != -1 )
						{
							CheckIsPlayerRentAndRemove(playerid, PlayersData[playerid][Alquiler]);
						}

						new HoraPaga, MinutosPaga, SegundosPaga;
						gettime(HoraPaga, MinutosPaga, SegundosPaga);

						if ( MinutosPaga >= 8 && MinutosPaga <= 50 )
						{
							PlayersDataOnline[playerid][Paga] = true;
						}
						else
						{
							PlayersDataOnline[playerid][Paga] = false;
						}
						if ( PlayersData[playerid][Interior] == 0 && PlayersData[playerid][World] == 0)
						{
							PlayersData[playerid][Spawn_Z] = PlayersData[playerid][Spawn_Z] + 2;
						}

						GetPlayerIp(playerid, PlayersData[playerid][MyIP],16);

						SetPlayerScore(playerid, GetPlayerScoreEx(playerid));
   						SetSpawnInfo(playerid, -1, PlayersData[playerid][Skin],	PlayersData[playerid][Spawn_X], PlayersData[playerid][Spawn_Y], PlayersData[playerid][Spawn_Z], PlayersData[playerid][Spawn_ZZ], 0, 0, 0, 0, 0, 0);
					    SpawnPlayer(playerid);
						PlayersDataOnline[playerid][ChalecoOn] = PlayersData[playerid][Chaleco];
						PlayersDataOnline[playerid][VidaOn] = PlayersData[playerid][Vida];
						SetPlayerVirtualWorld(playerid, PlayersData[playerid][World]);
					  	SetPlayerInteriorEx(playerid, PlayersData[playerid][Interior]);
					  	SetPlayerFightingStyle(playerid, HabilidadesID[PlayersData[playerid][Habilidad]]);
					  	PlayersDataOnline[playerid][LoginTime] = gettime();
					  	GivePlayerMoney(playerid, PlayersData[playerid][Dinero]);
						Streamer_UpdateEx(playerid, PlayersData[playerid][Spawn_X], PlayersData[playerid][Spawn_Y], PlayersData[playerid][Spawn_Z]);

						TextDrawShowForPlayer(playerid, TextEnfermedadFijos[PlayersData[playerid][Enfermedad]]);
						TextDrawShowForPlayer(playerid, TextBackgroundEnfermedad);
						TextDrawShowForPlayer(playerid, CansansioDefault);
						TextDrawShowForPlayer(playerid, CansansioDefaultBackground);
						ShowPlayerTextDrawCansansio(playerid);

						PlayersDataOnline[playerid][StateMoneyPass] 	= gettime() + 5;
					    PlayersDataOnline[playerid][StateWeaponPass] 	= gettime() + 5;
						GivePlayerWeaponReturn(playerid);

						CheckAsignados(playerid);
			    	    LoadAgenda(playerid);
			    	    LoadPlayerSMS(playerid);
						LoadAccountBanking(playerid);
						RemoveBuildingForPlayerEx(playerid);
						AddPlayerDescription(playerid, false);

						if ( strlen(PlayersData[playerid][DescriptionString]) < 3 )
						{
							format(PlayersData[playerid][DescriptionString], MAX_TEXT_DESCRIPTION, "Ninguno");
						}

        			    PlayersDataOnline[playerid][State] = 3;

						PlayerPlaySound(playerid, 1186, -1999.2559, 743.3678, 58.7168);
						new HiMsg[45];
						format(HiMsg, sizeof(HiMsg), "~W~Buenas!~N~~B~%s", PlayersDataOnline[playerid][NameOnlineFix]);
						GameTextForPlayer(playerid, HiMsg, 1000, 1);

						// Remove
						if ( PlayersData[playerid][Job] == VENDEDOR_MOVIL && PlayersData[playerid][Faccion] != CIVIL )
						{
						    PlayersData[playerid][Job] = NINGUNO;
						}

						if ( PlayersData[playerid][InTutorial] )
						{
							PlayersData[playerid][InTutorial] = true;
						    TogglePlayerControllableEx(playerid, false);
							PlayersDataOnline[playerid][IsNotSilenciado] = false;
							SetPlayerTutorial(playerid, 7);
						}
						else
						{
							OnPlayerIsConnectedToAudio(playerid);
						}
						printf("%s[%i] Logueado!", PlayersDataOnline[playerid][NameOnline], playerid);
					}
					else
					{
      					ShowPlayerLogin(playerid, false);
						SendInfoMessage(playerid, 0, "209", "Contraseña incorrecta, vuelva a intentarlo");
					}
			    }
			    else
			    {
					SendInfoMessage(playerid, 0, "210", "Esta cuenta se encuentra baneada. Consultalo en "WEBPAGE"/Soporte gracias.");
				    KickEx(playerid, 3);
				}
			}
			else
			{
			    if ( PlayersDataOnline[playerid][SaveAfterAgenda][0] && PlayersData[playerid][EmailTime] < gettime() )
			    {
			        if ( strlen(PlayersData[playerid][Email]) != 2 )
			        {
			            SendInfoMessage(playerid, 0, "0", "Servicio de recuperacion de contraseñas no disponible.");
					    ShowPlayerLogin(playerid, true);
						//ShowPlayerVerifiquedEmail(playerid, true);
					}
					else
					{
						SendInfoMessage(playerid, 0, "1377", "Esta cuenta no tiene un E-mail configurado para recuperación de contraseñas.");
						ShowPlayerLogin(playerid, true);
					}
			    }
			    else
			    {
			        if ( !PlayersDataOnline[playerid][SaveAfterAgenda][0] )
			        {
						SendInfoMessage(playerid, 2, "0", "Gracias por entrar en el servidor, recuerde visitar "WEBPAGE"!");
						KickEx(playerid, 4);
					}
					else
					{
						new MsgPersonalizado[MAX_TEXT_CHAT];
						format(MsgPersonalizado, sizeof(MsgPersonalizado), "Debe esperar %i minutos con %i segundos para volver a solicitar otro E-mail con recuperación de contraseña", (PlayersData[playerid][EmailTime] - gettime()) / 60, ((PlayersData[playerid][EmailTime] - gettime()) % 60));
						SendInfoMessage(playerid, 0, "1378", MsgPersonalizado);
						ShowPlayerLogin(playerid, true);
					}
				}
			}
		}
		// REGISTRO
		case 2:
		{
	        if ( response == 1 )
	        {
				if ( strlen(inputtext) >= 4 && strlen(inputtext) <= 25)
				{
				    if ( IsValidStringServerOther(playerid, inputtext) )
				    {
						format(PlayersData[playerid][Password], 25, "%s", inputtext);
						ShowPlayerDialogEx(playerid, 3, DIALOG_STYLE_MSGBOX, "{00A5FF}Sexo", "{F0F0F0}¿Cuál es el sexo de su personaje?", Sexos[1], Sexos[0]);
						PlayerPlaySound(playerid, 1186, -1999.2559, 743.3678, 58.7168);
					}
					else
					{
						ShowPlayerRegister(playerid, false);
					}
				}
				else
				{
					ShowPlayerRegister(playerid, false);
					SendInfoMessage(playerid, 0, "211", "Contraseña muy corta, debe contener más de 4 caracteres y menos de 25");
				}
			}
			else
			{
				SendInfoMessage(playerid, 2, "0", "Recuerde que para ingresar el servidor debe regístrarse. Vuelva pronto! Visite "WEBPAGE"");
				KickEx(playerid, 5);
			}
		}
		// SEXO
		case 3:
		{
   		    PlayersData[playerid][Sexo] = response;

   		    if ( response == 1 )
		    {
				PlayersData[playerid][Skin] = 56;
			}
			ShowPlayerDialogEx(playerid, 15, DIALOG_STYLE_INPUT, "{00A5FF}Edad", "{F0F0F0}¿Qué edad tiene?", "Seguir", "Volver");
        }
		// Edad
		case 15:
		{
   		    if ( response == 1 )
		    {
				if ( strval(inputtext) >= 15 && strval(inputtext) <= 60 )
				{
				    PlayersData[playerid][Edad] = strval(inputtext);
					ShowPlayerDialogEx(playerid, 4, DIALOG_STYLE_MSGBOX, "{00A5FF}Ciudad", "{F0F0F0}¿En qué ciudad desea vivir?", Ciudades[1], Ciudades[0]);
				}
				else
				{
					SendInfoMessage(playerid, 0, "847", "La edad tiene que estar comprendida entre 15 y 60 años");
					ShowPlayerDialogEx(playerid, 15, DIALOG_STYLE_INPUT, "{00A5FF}Edad", "{F0F0F0}¿Qué edad tiene?", "Seguir", "Volver");
				}
			}
			else
			{
				ShowPlayerDialogEx(playerid, 3, DIALOG_STYLE_MSGBOX, "{00A5FF}Sexo", "{F0F0F0}¿Cuál es el sexo de su personaje?", Sexos[1], Sexos[0]);
			}
		}
		// CIUDAD - ÚLTIMO
		case 4:
		{
			KillTimer(PlayersDataOnline[playerid][TimerLoginId]);
			GetPlayerIp(playerid, PlayersData[playerid][MyIP],16);
		    PlayersData[playerid][Ciudad] = response;
		    UpdateSpawnPlayer(playerid);
			SetPlayerFightingStyle(playerid, HabilidadesID[PlayersData[playerid][Habilidad]]);
		  	PlayersDataOnline[playerid][LoginTime] = gettime();
			PlayersDataOnline[playerid][State] = 3;
			GivePlayerMoneyEx(playerid, 800);
		    SetPlayerVirtualWorldEx(playerid, PlayersData[playerid][World]);

		    DataUserSave(playerid);
			LoadAccountBanking(playerid);

			TextDrawShowForPlayer(playerid, TextEnfermedadFijos[PlayersData[playerid][Enfermedad]]);
			TextDrawShowForPlayer(playerid, TextBackgroundEnfermedad);
			TextDrawShowForPlayer(playerid, CansansioDefault);
			TextDrawShowForPlayer(playerid, CansansioDefaultBackground);
			ShowPlayerTextDrawCansansio(playerid);
			RemoveBuildingForPlayerEx(playerid);
			new HoraPaga, MinutosPaga, SegundosPaga;
			gettime(HoraPaga, MinutosPaga, SegundosPaga);

			SetPlayerColor(playerid, PLAYERS_COLOR);

			if ( MinutosPaga >= 8 && MinutosPaga <= 50 )
			{
				PlayersDataOnline[playerid][Paga] = true;
			}
			else
			{
				PlayersDataOnline[playerid][Paga] = false;
			}
			ShowPlayerDialogEx(playerid, 153, DIALOG_STYLE_MSGBOX, "{00A5FF}Tutorial", "{F0F0F0}Desea ver el tutorial?", "Ver", "Saltar");
		}
		//  SKIN
		case 5:
		{
			SetPlayerRowSkin(playerid, response);
		}
		//  VENTA DEL COCHE
		case 6:
		{
   		    if ( response == 1 )
		    {
					if ( IsPlayerInAnyVehicle(playerid) )
					{
						if ( IsVehicleMyVehicle(playerid, GetPlayerVehicleID(playerid))  )
						{
				            PlayersData[playerid][Car] = -1;
				            format(DataCars[GetPlayerVehicleID(playerid)][Dueno], MAX_PLAYER_NAME, "0");
				            SaveDataVehicle(GetPlayerVehicleID(playerid), DIR_VEHICLES);
							SendInfoMessage(playerid, 3, "0", "Ha vendido su vehículo a cambio de nada!");
							DataCars[GetPlayerVehicleID(playerid)][StateEncendido] = false;
							DataCars[GetPlayerVehicleID(playerid)][Puente] = true;
						}
						else
						{
							SendInfoMessage(playerid, 0, "333", "Ha cambiado de vehículo, suba al suyo por favor");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "334", "Suba nuevamente al vehículo y mantenga en el hasta responder el cuadro de diálogo");
					}
			}
		}
		//      DAR LLAVES
		case 7:
		{
   		    if ( response == 1 )
		    {
				if ( IsPlayerNear(playerid, PlayersDataOnline[playerid][DarLlaves],
					 "335",
					 "336",
					 "337",
					 "El jugador que le iva a dar las llaves de su vehículo se ha desconectado",
					 "El jugador que le iva a dar las llaves de su vehículo no se ha logueado",
					 "El jugador que le iva a dar las llaves de su vehículo ya no se encuentra cerca de tí") )
			    {
					if ( PlayersData[playerid][Car] != -1 )
					{
			            PlayersData[PlayersDataOnline[playerid][DarLlaves]][Car] = PlayersData[playerid][Car];
			            format(DataCars[PlayersData[playerid][Car]][Dueno], MAX_PLAYER_NAME, "%s", PlayersDataOnline[PlayersDataOnline[playerid][DarLlaves]][NameOnline]);
	   		            SaveDataVehicle(PlayersData[playerid][Car], DIR_VEHICLES);
	  		            PlayersData[playerid][Car] = -1;

						new MsgDarLlavesMe[MAX_TEXT_CHAT];
						new MsgDarLlaves[MAX_TEXT_CHAT];
						format( MsgDarLlavesMe , sizeof(MsgDarLlavesMe), "le da algunas llaves a %s", PlayersDataOnline[PlayersDataOnline[playerid][DarLlaves]][NameOnlineFix]);
						format( MsgDarLlaves , sizeof(MsgDarLlaves), "Le ha dado las llaves de su vehículo a %s", PlayersDataOnline[PlayersDataOnline[playerid][DarLlaves]][NameOnlineFix]);
						SendInfoMessage(playerid, 3, "0", MsgDarLlaves);
						Acciones(playerid, 8, MsgDarLlavesMe);
					}
					else
					{
						SendInfoMessage(playerid, 0, "1458", "Usted ya no tiene coche");
					}
				}
			}
		}
		//      MENU ARMAS - CALCULAR
		case 8:
		{
   		    if ( response == 1 )
		    {
				if ( strval(inputtext) >= 10 && strval(inputtext) <= 1000)
				{
				    PlayersDataOnline[playerid][MyAmmoSelect] = strval(inputtext);
				    new MsgComprarArmaDialogPresupuesto[MAX_TEXT_CHAT];
				    format(MsgComprarArmaDialogPresupuesto, sizeof(MsgComprarArmaDialogPresupuesto), "{F0F0F0}¿Desea comprar %s con %i de munición\n{F0F0F0}por el precio de $%i?", Armas_Nombre[PlayersDataOnline[playerid][AfterMenuRow]][PlayersDataOnline[playerid][SubAfterMenuRow]][4], PlayersDataOnline[playerid][MyAmmoSelect], Armas_Precios_Num[PlayersDataOnline[playerid][AfterMenuRow]][PlayersDataOnline[playerid][SubAfterMenuRow]] * strval(inputtext));
					ShowPlayerDialogEx(playerid, 9, DIALOG_STYLE_MSGBOX, "{00A5FF}Finalize su compra!", MsgComprarArmaDialogPresupuesto, "Comprar!", "Modificar");
				}
				else
				{
				    new MsgComprarArmaDialog[MAX_TEXT_CHAT];
				    format(MsgComprarArmaDialog, sizeof(MsgComprarArmaDialog), "{F0F0F0}Ingrese el número de munición \n{F0F0F0}que desea para %s", Armas_Nombre[PlayersDataOnline[playerid][AfterMenuRow]][PlayersDataOnline[playerid][SubAfterMenuRow]][4]);
					ShowPlayerDialogEx(playerid, 8, DIALOG_STYLE_INPUT, "{00A5FF}Seleccione Cantidad de munición", MsgComprarArmaDialog, "Calcular", "Volver");
					SendInfoMessage(playerid, 0, "357", "El mínimo de munición para comprar un arma es 10 y máximo 1000");
				}
			}
			else
			{
				ShowMenuForPlayer(Menues_Armas[PlayersDataOnline[playerid][AfterMenuRow]], playerid);
			}
		}
		//      MENU ARMAS - COMPRAR
		case 9:
		{
   		    if ( response == 1 )
		    {
				if ( CheckWeapondCheat(playerid) && PlayersData[playerid][Dinero] >= Armas_Precios_Num[PlayersDataOnline[playerid][AfterMenuRow]][PlayersDataOnline[playerid][SubAfterMenuRow]] * PlayersDataOnline[playerid][MyAmmoSelect] )
				{
			        new MsgCompra[MAX_TEXT_CHAT];
                    format(MsgCompra, sizeof(MsgCompra), "Has comprado %s por $%i", Armas_Nombre[PlayersDataOnline[playerid][AfterMenuRow]][PlayersDataOnline[playerid][SubAfterMenuRow]][4], Armas_Precios_Num[PlayersDataOnline[playerid][AfterMenuRow]][PlayersDataOnline[playerid][SubAfterMenuRow]] * PlayersDataOnline[playerid][MyAmmoSelect]);
                    GivePlayerWeaponEx(playerid, Armas_ID[PlayersDataOnline[playerid][AfterMenuRow]][PlayersDataOnline[playerid][SubAfterMenuRow]], PlayersDataOnline[playerid][MyAmmoSelect]);

	                SendInfoMessage(playerid, 2, "0", MsgCompra);
					GivePlayerMoneyEx(playerid, -(Armas_Precios_Num[PlayersDataOnline[playerid][AfterMenuRow]][PlayersDataOnline[playerid][SubAfterMenuRow]] * PlayersDataOnline[playerid][MyAmmoSelect]) );
					SetMoneyExtorsion(GetPlayerVirtualWorld(playerid), (Armas_Precios_Num[PlayersDataOnline[playerid][AfterMenuRow]][PlayersDataOnline[playerid][SubAfterMenuRow]] * PlayersDataOnline[playerid][MyAmmoSelect]) / 2);

					ShowMenuForPlayer(Menues_Armas[PlayersDataOnline[playerid][AfterMenuRow]], playerid);
				}
				else
				{
					SendInfoMessage(playerid, 0, "358", "No tienes suficiente dinero para comprar esta arma con esa munición");
				    new MsgComprarArmaDialogPresupuesto[MAX_TEXT_CHAT];
				    format(MsgComprarArmaDialogPresupuesto, sizeof(MsgComprarArmaDialogPresupuesto), "{F0F0F0}¿Desea comprar %s con %i de munición\n{F0F0F0}por el precio de $%i?", Armas_Nombre[PlayersDataOnline[playerid][AfterMenuRow]][PlayersDataOnline[playerid][SubAfterMenuRow]][4], PlayersDataOnline[playerid][MyAmmoSelect], Armas_Precios_Num[PlayersDataOnline[playerid][AfterMenuRow]][PlayersDataOnline[playerid][SubAfterMenuRow]] * PlayersDataOnline[playerid][MyAmmoSelect]);
					ShowPlayerDialogEx(playerid, 9, DIALOG_STYLE_MSGBOX, "{00A5FF}Finalize su compra!", MsgComprarArmaDialogPresupuesto, "Comprar!", "Modificar");
				}
		    }
		    else
		    {
			    new MsgComprarArmaDialog[MAX_TEXT_CHAT];
			    format(MsgComprarArmaDialog, sizeof(MsgComprarArmaDialog), "{F0F0F0}Ingrese el número de munición \n{F0F0F0}que desea para %s", Armas_Nombre[PlayersDataOnline[playerid][AfterMenuRow]][PlayersDataOnline[playerid][SubAfterMenuRow]][4]);
				ShowPlayerDialogEx(playerid, 8, DIALOG_STYLE_INPUT, "{00A5FF}Seleccione Cantidad de munición", MsgComprarArmaDialog, "Calcular", "Volver");
			}
		}
		//      CREAR ARMA
		case 10:
		{
   		    if ( response == 1 )
		    {
		        if ( CheckWeapondCheat(playerid) && PlayersData[playerid][Materiales] >= MaterialesArmasTraficantes[listitem] )
		        {
					PlayersData[playerid][Materiales] = PlayersData[playerid][Materiales] - MaterialesArmasTraficantes[listitem];

					new MsgCrearArma[MAX_TEXT_CHAT];
					if ( listitem != 14 )
					{
						Acciones(playerid, 8, "crea un arma con materiales");
						GivePlayerWeaponEx(playerid, IdArmasTraficantes[listitem], MunicionArmasTraficantes[listitem]);
						format(MsgCrearArma, sizeof(MsgCrearArma), "Has creado un %s con munición %i por %i de materiales", SlotNameWeapon[IdArmasTraficantes[listitem]], MunicionArmasTraficantes[listitem], MaterialesArmasTraficantes[listitem]);
					}
					else
					{
						Acciones(playerid, 8, "crea un bomba con materiales");
						format(MsgCrearArma, sizeof(MsgCrearArma), "Has creado una bomba por 1000 de materiales");
						PlayersData[playerid][Bombas]++;

					}
					SendInfoMessage(playerid, 2, "0", MsgCrearArma);
				}
				else
				{
					SendInfoMessage(playerid, 0, "419", "No tienes suficientes materiales para crear esta arma");
				}
		    }
	    }
		//      REPORTE VIA TAB
		case 11:
		{
   		    if ( response == 1 )
		    {
				if (IsPlayerConnected(PlayersDataOnline[playerid][MyLastIdReport]))
				{
				    if ( strlen(inputtext) >= 1)
				    {
						new StringFormat[MAX_TEXT_CHAT];
						new StringFormat2[MAX_TEXT_CHAT];
					    format(StringFormat2, sizeof(StringFormat2), "Reporte: Has reportado a %s[%i]. Razón: %s", PlayersDataOnline[PlayersDataOnline[playerid][MyLastIdReport]][NameOnline], PlayersDataOnline[playerid][MyLastIdReport], inputtext);
						format(StringFormat, sizeof(StringFormat), "%s %s[%i] reporta a %s[%i]. Razón: %s",LOGO_STAFF, PlayersDataOnline[playerid][NameOnline], playerid, PlayersDataOnline[PlayersDataOnline[playerid][MyLastIdReport]][NameOnline], PlayersDataOnline[playerid][MyLastIdReport], inputtext);

					    MsgCheatsReportsToAdmins(StringFormat);
					    SendClientMessage(playerid, COLOR_CHEATS_REPORTES, StringFormat2);
					}
					else
					{
						SendInfoMessage(playerid, 0, "962", "Debe introducir una razón a reportar.");
					}
				}
				else
				{
					SendInfoMessage(playerid, 0, "422", "El jugador que desea reportar no se encuentra connectado");
				}
		    }
	    }
		//      Color del Coche
		case 12:
		{
		    // Color 1
   		    if ( response == 1 )
		    {
				ShowPlayerDialogEx(playerid, 13, DIALOG_STYLE_INPUT, "{00A5FF}Pintar Color 1 del vehículo", "{F0F0F0}Intrdusca la ID del color entre 0 y 255", "Pintar", "Menu");
		    }
		    // Color 2
		    else
		    {
				ShowPlayerDialogEx(playerid, 14, DIALOG_STYLE_INPUT, "{00A5FF}Pintar Color 2 del vehículo", "{F0F0F0}Intrdusca la ID del color entre 0 y 255", "Pintar", "Menu");
			}
	    }
		//      Pintar Color 1
		case 13:
		{
		    // Pintar
   		    if ( response == 1 )
		    {
				if ( IsTunnigContinue(playerid) )
				{
			        if ( strval(inputtext) >= 0 && strval(inputtext) <= 252 )
			        {
						DataCars[PlayersDataOnline[playerid][MyIDVehicleTunning]][Color1] = strval(inputtext);
						ChangeVehicleColor(PlayersDataOnline[playerid][MyIDVehicleTunning],
						DataCars[PlayersDataOnline[playerid][MyIDVehicleTunning]][Color1],
						DataCars[PlayersDataOnline[playerid][MyIDVehicleTunning]][Color2]);
						ShowMenuForPlayer(TallerPrincipal, playerid);
					}
					else
					{
						ShowPlayerDialogEx(playerid, 13, DIALOG_STYLE_INPUT, "{00A5FF}Pintar Color 1 del vehículo", "{F0F0F0}Intrdusca la ID del color entre 0 y 252", "Pintar", "Menu");
						SendInfoMessage(playerid, 0, "678", "La ID del color del vehículo debe estar entre 0 y 252");
					}
				}
		    }
		    // Menu
		    else
		    {
				ShowMenuForPlayer(TallerPrincipal, playerid);
			}
	    }
		//      Pintar Color 2
		case 14:
		{
		    // Pintar
   		    if ( response == 1 )
		    {
				if ( IsTunnigContinue(playerid) )
				{
			        if ( strval(inputtext) >= 0 && strval(inputtext) <= 252 )
			        {
						DataCars[PlayersDataOnline[playerid][MyIDVehicleTunning]][Color2] = strval(inputtext);
						ChangeVehicleColor(PlayersDataOnline[playerid][MyIDVehicleTunning],
						DataCars[PlayersDataOnline[playerid][MyIDVehicleTunning]][Color1],
						DataCars[PlayersDataOnline[playerid][MyIDVehicleTunning]][Color2]);
						ShowMenuForPlayer(TallerPrincipal, playerid);
					}
					else
					{
						ShowPlayerDialogEx(playerid, 14, DIALOG_STYLE_INPUT, "{00A5FF}Pintar Color 2 del vehículo", "{F0F0F0}Intrdusca la ID del color entre 0 y 252", "Pintar", "Menu");
						SendInfoMessage(playerid, 0, "679", "La ID del color del vehículo debe estar entre 0 y 252");
					}
				}
		    }
		    // Menu
		    else
		    {
				ShowMenuForPlayer(TallerPrincipal, playerid);
			}
	    }
		//      CONFIRMAR CONTRSEÑA
		case 16:
		{
   		    if ( response == 1 )
		    {
		        if ( strcmp(PlayersData[playerid][Password], inputtext, false) == 0 && strlen(inputtext) ==  strlen(PlayersData[playerid][Password]))
		        {
					switch ( PlayersDataOnline[playerid][SaveAfterAgenda][0] )
					{
						case 0:
						{
						    ShowPlayerEmailChange(playerid, true);
						}
						case 1:
						{
							ShowPlayerDialogEx(playerid, 17, DIALOG_STYLE_PASSWORD, "{00A5FF}Nueva Contraseña", "{F0F0F0}Ingrese su nueva contraseña\n{F0F0F0}y ya habrá cambiado su contraseña", "Cambiar", "Volver");
						}
					}
		        }
		        else
		        {
					SendInfoMessage(playerid, 0, "871", "La contraseña actual no coincide con la que ingresó, intentelo de nuevo");
					ShowPlayerDialogEx(playerid, 16, DIALOG_STYLE_PASSWORD, "{00A5FF}Confirmación", "{F0F0F0}Ingrese su contraseña actual", "Confirmar", "Volver");
				}
		    }
		    else
		    {
		    	ShowDialogAccount(playerid);
			}
	    }
		//      PANEL DE CONTROL DE USUARIO
		case 17:
		{
   		    if ( response == 1 )
		    {
				if ( strlen(inputtext) >= 4 && strlen(inputtext) < 25)
				{
				    if ( IsValidStringServerOther(playerid, inputtext) )
				    {
						format(PlayersData[playerid][Password], 25, "%s", inputtext);
					    new MsgNewPassword[MAX_TEXT_CHAT];
					    format(MsgNewPassword, sizeof(MsgNewPassword), "Ha cambiado su contraseña satisfactoriamente. Su nueva contraseña es: %s", inputtext);
						SendInfoMessage(playerid, 3, "0", MsgNewPassword);
				    	ShowDialogAccount(playerid);
			    	}
			    	else
			    	{
						ShowPlayerDialogEx(playerid, 17, DIALOG_STYLE_PASSWORD, "{00A5FF}Nueva Contraseña", "{F0F0F0}Ingrese su nueva contraseña\n{F0F0F0}y ya habrá cambiado su contraseña", "Cambiar", "Volver");
					}
				}
				else
				{
					ShowPlayerDialogEx(playerid, 17, DIALOG_STYLE_PASSWORD, "{00A5FF}Nueva Contraseña", "{F0F0F0}Ingrese su nueva contraseña\n{F0F0F0}y ya habrá cambiado su contraseña", "Cambiar", "Volver");
					SendInfoMessage(playerid, 0, "872", "Contraseña muy corta, debe contener más de 4 caracteres y menos de 25");
				}
		    }
		    else
		    {
		    	ShowDialogAccount(playerid);
			}
	    }
		//      PANEL DE CONTROL DE USUARIO
		case 18:
		{
   		    if ( response == 1 )
		    {
				switch ( listitem )
				{
				    // Cambiar Contraseña
				    case 0:
				    {
						PlayersDataOnline[playerid][SaveAfterAgenda][0] = 1;
						ShowPlayerDialogEx(playerid, 16, DIALOG_STYLE_PASSWORD, "{00A5FF}Confirmación", "{F0F0F0}Ingrese su contraseña actual\n", "Confirmar", "Volver");
					}
					// Sexo
					case 1:
					{
						ShowPlayerDialogEx(playerid, 47, DIALOG_STYLE_MSGBOX, "{00A5FF}Sexo", "{F0F0F0}¿Qué sexo desea para su personaje ahora?", Sexos[1], Sexos[0]);
					}
					// Edad
					case 2:
					{
						ShowPlayerDialogEx(playerid, 48, DIALOG_STYLE_INPUT, "{00A5FF}Edad", "{F0F0F0}Seleccione una nueva edad para su personaje", "Cambiar", "Volver");
					}
					// Email
					case 3:
					{
						PlayersDataOnline[playerid][SaveAfterAgenda][0] = 0;
						ShowPlayerDialogEx(playerid, 16, DIALOG_STYLE_PASSWORD, "{00A5FF}Confirmación", "{F0F0F0}Ingrese su contraseña actual\n", "Confirmar", "Volver");
					}
					// Opciones
					case 4:
					{
						ShowDialogAccountOptions(playerid);
					}
				}
		    }
	    }
		//      AGENDA DIALOG
		case 19:
		{
   		    if ( response == 1 )
		    {
				switch ( listitem )
				{
				    // Contactos
				    case 0:
				    {
						ShowContactosAgenda(playerid);
					}
				    case 1:
				    {
						ShowAgregarAgenda(playerid, 0);
					}
				    case 2:
				    {
						ShowEliminarAgenda(playerid);
					}
					case 3:
					{
						ShowContactosBloqueados(playerid);
					}
					case 4:
					{
						ShowAgregarBloqueado(playerid); // DIALOG ID 51
					}
					case 5:
					{
						ShowEliminarBloqueado(playerid); // DIALOG ID 52
					}
					// SMS
					case 6:
					{
						ShowSMSToPlayer(playerid);
					}
					// SMS Borrar Todos
					case 7:
					{
                        ConfirmDeletedAllSMS(playerid);
					}
					// Buscar
					case 8:
					{
                        ShowBuscarAgenda(playerid);
					}
				}
		    }
		    else
		    {
		        Acciones(playerid, 8, "guarda su agenda");
			}
	    }
		//      AGENDA CONTACTOS
		case 20:
		{
   		    if ( response == 1 )
		    {
		        PlayersDataOnline[playerid][SaveAfterAgenda][0] = PlayersDataOnline[playerid][SaveAfterAgenda][listitem];

		        ShowHomeAgendaOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
		    }
		    else
		    {
				ShowHomeAgenda(playerid);
			}
	    }
		//      AGENDA Error Info
		case 21:
		{
   		    if ( response == 0 )
		    {
                ShowHomeAgenda(playerid);
		    }
		    else
		    {
		        Acciones(playerid, 8, "guarda su agenda");
			}
	    }
		//      AGENDA AGREGAR  - NOMBRE
		case 22:
		{
   		    if ( response == 1 )
		    {
				if ( strlen(inputtext) >= 2 && strlen(inputtext) <= MAX_AGENDA_NAME )
				{
					format(PlayersDataOnline[playerid][SaveNameContact], MAX_AGENDA_NAME, "%s", inputtext);
					ShowAgregarAgenda(playerid, 1);
				}
				else
				{
					ShowPlayerDialogEx(playerid,24,DIALOG_STYLE_MSGBOX,"{00A5FF}Agenda - Información", "{F0F0F0}El nombre del contacto no puede exeder los 20 caracteres\n{F0F0F0}ni tener menos de 2.", "Reintentar", "Inicio");
				}
		    }
		    else
		    {
				ShowHomeAgenda(playerid);
			}
	    }
		//      AGENDA AGREGAR 1 - NÚMERO
		case 23:
		{
   		    if ( response == 1 )
		    {
				if ( strval(inputtext) > 100 && strval(inputtext) <= 99999 )
				{
					if (AddNumberToAgenda(playerid, PlayersDataOnline[playerid][SaveNameContact], strval(inputtext)))
					{
				        Acciones(playerid, 8, "agrega un número a su agenda");
		                ShowHomeAgenda(playerid);
	                }
				}
				else
				{
					ShowPlayerDialogEx(playerid,25,DIALOG_STYLE_MSGBOX,"{00A5FF}Agenda - Información", "{F0F0F0}El número debe contener de 3 a 5 dígitos positivos", "Reintentar", "Inicio");
				}
		    }
		    else
		    {
				ShowHomeAgenda(playerid);
			}
	    }
		//      AGENDA Error Info 2
		case 24:
		{
   		    if ( response == 1 )
		    {
				ShowAgregarAgenda(playerid, 0);
		    }
		    else
		    {
                ShowHomeAgenda(playerid);
			}
	    }
		//      AGENDA Error Info 3
		case 25:
		{
   		    if ( response == 1 )
		    {
				ShowAgregarAgenda(playerid, 1);
		    }
		    else
		    {
                ShowHomeAgenda(playerid);
			}
	    }
		//      AGENDA ELIMINAR
		case 26:
		{
   		    if ( response == 1 )
		    {
				RemoveNumberToAgenda(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][listitem]);
		        Acciones(playerid, 8, "elimina un número de su agenda");
                ShowHomeAgenda(playerid);
		    }
		    else
		    {
                ShowHomeAgenda(playerid);
			}
	    }
		//      FORMAS DE CAMINAR
		case 27:
		{
   		    if ( response == 1 )
		    {
                PlayersData[playerid][MyStyleWalk] = listitem;
		    }
	    }
		//      TIPO DE SKIN A ESCOGER
		case 28:
		{
			PlayersDataOnline[playerid][TypeSkinList] = response;
			SetPlayerSelectedSkin(playerid);
	    }
		//      BAR
		case 29:
		{
   		    if ( response == 1 )
		    {
                ShowDialogBar(playerid, listitem);
		    }
	    }
		//      COMPRAR SALDO
		case 30:
		{
   		    if ( response == 1 )
			{
				new MoneySaldo = strval(inputtext);
				if ( PlayersData[playerid][Dinero] >= MoneySaldo  )
				{
				    if( MoneySaldo <= 3000 && MoneySaldo >= 1)
				    {
				        if ( PlayersData[playerid][Saldo] + MoneySaldo <= 3000 )
				        {
						    PlayersData[playerid][Saldo] = PlayersData[playerid][Saldo] + MoneySaldo;
							GivePlayerMoneyEx(playerid, -MoneySaldo);
							SetMoneyExtorsion(GetPlayerVirtualWorld(playerid), MoneySaldo);
						}
						else
						{
							SendInfoMessage(playerid, 0, "1024", "Sólo puede tener $3000 de saldo como máximo");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1023", "Lo mínimo que puede comprar de saldo es $1 y $3000 como máximo");
					}
				}
				else
				{
					SendInfoMessage(playerid, 0, "1022", "No tiene suficiente dinero para comprar esa cantidad de saldo.");
				}
				new MsgSaldoNew[MAX_TEXT_CHAT];
				format(MsgSaldoNew, sizeof(MsgSaldoNew), "{00F50A}Su nuevo saldo en el móvil es: $%i\n\n{F0F0F0}¿Desea comprar más saldo para su móvil?", PlayersData[playerid][Saldo]);
				ShowPlayerDialogEx(playerid, 30, DIALOG_STYLE_INPUT, "{00A5FF}Seleccione el monte de saldo a comprar", MsgSaldoNew, "Comprar", "Volver");
		    }
		    else
		    {
				ShowMenuForPlayer(M24_7, playerid);
				PlayersDataOnline[playerid][InMenu] = GetPlayerMenu(playerid);
			}
	    }
		//      BANCO - HOME
		case 31:
		{
   		    if ( response == 1 )
			{
			    switch ( listitem )
			    {
			        case 0:
			        {
				        ShowConsultarBanco(playerid);
					}
					case 1:
					{
				        ShowRetirarBanco(playerid);
					}
					case 2:
					{
				        ShowDepositarBanco(playerid);
					}
					// Cobrar Cheque
					case 3:
					{
						ShowPayCheque(playerid);
					}
					// Ver Cheques
					case 4:
					{
						ShowVerCheques(playerid);
					}
					// Hacer una transferencia
					case 5:
					{
					    if ( PlayersData[playerid][HoursPlaying] >= 24 )
					    {
							ShowBankTransferencia(playerid);
					    }
					    else
					    {
							ShowHomeBanco(playerid);
							SendInfoMessage(playerid, 0, "1347", "Debes ser mayor de nivel 3 para crear hacer transferencias");
						}
					}
					// Controlar mis cuentas
					case 6:
					{
						ShowManejarCuentas(playerid);
					}
					// Configuración
					case 7:
					{
						ShowBankConfiguration(playerid);
					}
				}
			}
		}
		//      BANCO - CONSULTAR
		case 32:
		{
   		    if ( response == 0 )
			{
				ShowHomeBanco(playerid);
			}
		}
		//      BANCO - RETIRAR
		case 33:
		{
   		    if ( response == 1 )
			{
				ShowRetirarBancoFunction(playerid, false, strval(inputtext));
			}
			else
			{
				ShowHomeBanco(playerid);
			}
		}
		//      BANCO - DEPOSITAR
		case 34:
		{
   		    if ( response == 1 )
			{
				ShowDepositarBancoFunction(playerid, false, strval(inputtext));
			}
			else
			{
				ShowHomeBanco(playerid);
			}
		}
		//      BANCO - RETIRO REALIZADO
		case 35:
		{
   		    if ( response == 0 )
			{
				ShowHomeBanco(playerid);
			}
		}
		//      BANCO - DEPÓSITO REALIZADO
		case 36:
		{
   		    if ( response == 0 )
			{
				ShowHomeBanco(playerid);
			}
		}
		///////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////
		//      INICIO - Mapping Editor
		case 37:
		{
   		    if ( response == 1 )
			{
			    switch ( listitem )
			    {
			        case 0: // LISTA DE OBJETOS
			        {
						ShowListObjectMapping(playerid);
					}
					case 1: // CREAR OBJETO
					{
						ShowPlayerDialogEx(playerid,41,DIALOG_STYLE_INPUT, "{00A5FF}Crear Objeto{E6E6E6} - {F50000}Mapping Editor", "Ingrese la ID del objeto que desea crear!", "Crear", "Inicio");
					}
					case 2: // ELIMINAR TODOS
					{
						ShowRemoveAllMapping(playerid, true);
					}
					case 3: // MOSTRAR TODOS LOS TAG´S
					{
						ShowAllMapping(playerid);
						ShowPlayerDialogEx(playerid,38,DIALOG_STYLE_MSGBOX, "{00A5FF}Mostrar Tag´s Objeto{E6E6E6} - {F50000}Mapping Editor", "Todos los tag´s fuerón mostrados", "Aceptar", "Inicio");
					}
					case 4: // OCULTAR TODOS LOS TAG´s
					{
						RemoveAllTagsMapping(playerid);
						ShowPlayerDialogEx(playerid,38,DIALOG_STYLE_MSGBOX, "{00A5FF}Ocultar Tag´s{E6E6E6} - {F50000}Mapping Editor", "Todos los tag´s fuerón ocultados", "Aceptar", "Inicio");
					}
					case 5: // ABRIR PROYECTO
					{
						ShowPlayerDialogEx(playerid,44,DIALOG_STYLE_INPUT, "{00A5FF}Abrir Proyecto{E6E6E6} - {F50000}Mapping Editor", "Introduzca el nombre del proyecto\n que desea abrir", "Abrir", "Inicio");
					}
					case 6: // GUARDAR PROYECTO
					{
						ShowPlayerDialogEx(playerid,45,DIALOG_STYLE_INPUT, "{00A5FF}Guardar Proyecto{E6E6E6} - {F50000}Mapping Editor", "Introduzca un nombre para guardar su proyecto", "Guardar", "Inicio");
					}
					case 7: // ESTADÍSTICAS DEL PROYECTO
					{
						ShowStatsMapping(playerid);
					}
				}
			}
		}
		//      MSG INICIO - Mapping Editor
		case 38:
		{
   		    if ( response == 0 )
			{
				ShowHomeMapping(playerid);
			}
		}
		//      CREAR OBJETO - Mapping Editor
		case 39:
		{
   		    if ( response == 1 )
			{
				ShowObjectOptionsMapping(playerid, PlayersDataOnline[playerid][ObjectAction]);
			}
			else
			{
				ShowHomeMapping(playerid);
			}
		}
		//      LISTA DE OBJETOS - Mapping Editor
		case 40:
		{
   		    if ( response == 1 )
			{
			    ShowDescriptionObjectMapping(playerid, PlayersDataOnline[playerid][MappingRowSelected][listitem]);
			}
			else
			{
				ShowHomeMapping(playerid);
			}
		}
		//      CREAR OBJETO ** - Mapping Editor
		case 41:
		{
   		    if ( response == 1 )
			{
				ShowCreateObjectMapping(playerid, strval(inputtext));
			}
			else
			{
				ShowHomeMapping(playerid);
			}
		}
		//      OPCIONES DEL OBJETO - Mapping Editor
		case 42:
		{
   		    if ( response == 1 )
			{
			    switch ( listitem )
			    {
			        case 0: // Seleccionar
			        {
						PlayersDataOnline[playerid][ObjectWorking] = PlayersDataOnline[playerid][ObjectAction];
					}
					case 1: // Mostrar/Oculta Tag
					{
						if ( ObjectMapping[PlayersDataOnline[playerid][ObjectAction]][TextTagS] == -1 )
						{
							ObjectMapping[PlayersDataOnline[playerid][ObjectAction]][TextTag] = Create3DTextLabel("New Text 3D Label", COLOR_FAMILY,ObjectMapping[PlayersDataOnline[playerid][ObjectAction]][PosX],ObjectMapping[PlayersDataOnline[playerid][ObjectAction]][PosY],ObjectMapping[PlayersDataOnline[playerid][ObjectAction]][PosZ],50.0,0);
							ObjectMapping[PlayersDataOnline[playerid][ObjectAction]][TextTagS] = true;
							UpdateText3DMapping(PlayersDataOnline[playerid][ObjectAction]);
						}
						else
						{
							Delete3DTextLabel(ObjectMapping[PlayersDataOnline[playerid][ObjectAction]][TextTag]);
							ObjectMapping[PlayersDataOnline[playerid][ObjectAction]][TextTagS] = -1;
						}
						ShowObjectOptionsMapping(playerid, PlayersDataOnline[playerid][ObjectAction]);
					}
					case 2: // Ir
					{
						SetPlayerPos(playerid, ObjectMapping[PlayersDataOnline[playerid][ObjectAction]][PosX], ObjectMapping[PlayersDataOnline[playerid][ObjectAction]][PosY], ObjectMapping[PlayersDataOnline[playerid][ObjectAction]][PosZ]);
						UpdateText3DMapping(PlayersDataOnline[playerid][ObjectAction]);
					}
					case 3: // Traer
					{
					    new Float:PlayerPos[3]; GetPlayerPos(playerid, PlayerPos[0], PlayerPos[1], PlayerPos[2]);
					    SetObjectPos(ObjectMapping[PlayersDataOnline[playerid][ObjectAction]][Objectid], PlayerPos[0], PlayerPos[1], PlayerPos[2]);
					    GetObjectPos(ObjectMapping[PlayersDataOnline[playerid][ObjectAction]][Objectid], ObjectMapping[PlayersDataOnline[playerid][ObjectAction]][PosX], ObjectMapping[PlayersDataOnline[playerid][ObjectAction]][PosY], ObjectMapping[PlayersDataOnline[playerid][ObjectAction]][PosZ]);
						UpdateText3DMapping(PlayersDataOnline[playerid][ObjectAction]);
					}
					case 4: // Eliminar
					{
						if ( RemoveObjectMapping(playerid, PlayersDataOnline[playerid][ObjectAction]) )
						{
							ShowPlayerDialogEx(playerid,38,DIALOG_STYLE_MSGBOX, "{00A5FF}Eliminar Objeto{E6E6E6} - {F50000}Mapping Editor", "Este objeto fue eliminado con éxito!", "Aceptar", "Inicio");
						}
						else
						{
							ShowPlayerDialogEx(playerid,38,DIALOG_STYLE_MSGBOX, "{00A5FF}Eliminar Objeto{E6E6E6} - {F50000}Mapping Editor", "Este objeto ya no existe!", "Aceptar", "Inicio");
						}
					}
				}
			}
			else
			{
				ShowHomeMapping(playerid);
			}
		}
		//      DESCRIPCIÓN DEL OBJETO ** - Mapping Editor
		case 43:
		{
   		    if ( response == 1 )
			{
				ShowObjectOptionsMapping(playerid, PlayersDataOnline[playerid][ObjectAction]);
			}
			else
			{
				ShowListObjectMapping(playerid);
			}
		}
		//      ABRIR PROYECTO - Mapping Editor
		case 44:
		{
   		    if ( response == 1 )
			{
				OpenProject(playerid, inputtext);
			}
			else
			{
				ShowHomeMapping(playerid);
			}
		}
		//      GUARDAR PROYECTO - Mapping Editor
		case 45:
		{
   		    if ( response == 1 )
			{
				SaveProject(playerid, inputtext, false);
			}
			else
			{
				ShowHomeMapping(playerid);
			}
		}
		//      GUARDAR PROYECTO **- Mapping Editor
		case 46:
		{
   		    if ( response == 1 )
			{
				SaveProject(playerid, PlayersDataOnline[playerid][NameProject], true);
			}
			else
			{
				ShowHomeMapping(playerid);
			}
		}
		//      SEXO - CUENTA
		case 47:
		{
   		    PlayersData[playerid][Sexo] = response;
   		    new MsgDialogSexo[MAX_TEXT_CHAT];
   		    format(MsgDialogSexo, sizeof(MsgDialogSexo), "{00F50A}¡Cambio de sexo realizado con éxito!\n\n{F0F0F0}El nuevo sexo de su personaje es: {00F50A}%s ", Sexos[PlayersData[playerid][Sexo]]);
			ShowPlayerDialogEx(playerid, 50, DIALOG_STYLE_MSGBOX, "{00A5FF}Sexo", MsgDialogSexo, "Aceptar", "Volver");
		}
		//      EDAD - CUENTA
		case 48:
		{
   		    if ( response == 1 )
		    {
				if ( strval(inputtext) >= 15 && strval(inputtext) <= 60 )
				{
				    PlayersData[playerid][Edad] = strval(inputtext);

		   		    new MsgDialogEdad[MAX_TEXT_CHAT];
		   		    format(MsgDialogEdad, sizeof(MsgDialogEdad), "{00F50A}¡Cambio de edad realizado con éxito!\n\n{F0F0F0}La nueva edad de su personaje es: {00F50A}%i ", PlayersData[playerid][Edad]);
					ShowPlayerDialogEx(playerid, 50, DIALOG_STYLE_MSGBOX, "{00A5FF}Edad", MsgDialogEdad, "Aceptar", "Volver");
				}
				else
				{
					SendInfoMessage(playerid, 0, "1098", "La edad tiene que estar comprendida entre 15 y 60 años");
					ShowPlayerDialogEx(playerid, 48, DIALOG_STYLE_INPUT, "{00A5FF}Edad", "{F0F0F0}Reintente ingresar una edad válida para su personaje", "Cambiar", "Volver");
				}
			}
			else
			{
				ShowDialogAccount(playerid);
			}
		}
		//      OPCIONES - CUENTA
		case 49:
		{
   		    if ( response == 1 )
		    {
			    switch ( listitem )
			    {
			        case 0: // Intermitentes (Manual-Automático)
			        {
						ReverseEx(PlayersData[playerid][IntermitentState]);
			        }
			        case 1: // Usar Plugin de Audio
					{
						if ( PlayersData[playerid][WantAudio] )
						{
						    StopAudioPlayer(playerid, PlayersDataOnline[playerid][HandleAHouse]);
						    StopAudioPlayer(playerid, PlayersDataOnline[playerid][HandleAVehicle]);
							ReverseEx(PlayersData[playerid][WantAudio]);
						}
						else
						{
							ReverseEx(PlayersData[playerid][WantAudio]);
						    PlayAudioPlayerHouse(playerid);
							if ( PlayersDataOnline[playerid][InCarId] )
							{
								PlayAudioPlayerVehicle(playerid, PlayersDataOnline[playerid][InCarId]);
							}
							else if ( PlayersDataOnline[playerid][InVehicle] )
							{
								PlayAudioPlayerVehicle(playerid, PlayersDataOnline[playerid][InVehicle]);
							}
						}
					}
		        }
				ShowDialogAccountOptions(playerid);
			}
			else
			{
				ShowDialogAccount(playerid);
			}
		}
		case 50:
		{
   		    if ( response == 0 )
		    {
				ShowDialogAccount(playerid);
		    }
		}
		case 51:
		{
   		    if ( response == 1 )
		    {
				AddContactToBlock(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][listitem]);
		        Acciones(playerid, 8, "agrega un contacto a su lista de bloqueados");
		    }
		    else
		    {
                ShowHomeAgenda(playerid);
			}
		}
		case 52:
		{
   		    if ( response == 1 )
		    {
				RemoveContactToBlock(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][listitem]);
		        Acciones(playerid, 8, "quita un contacto de su lista de bloqueados");
		    }
		    else
		    {
                ShowHomeAgenda(playerid);
			}
		}
		// Inicio Police
		case 53:
		{
   		    if ( response == 1 )
		    {
				ShowNamePolice(playerid);
		    }
		    else
		    {
				Acciones(playerid, 8, "guarda su móvil");
				SetPlayerColgar(playerid);
			}
		}
		// Name Police
		case 54:
		{
   		    if ( response == 1 )
		    {
				if ( strlen(inputtext) >= 2 &&  strlen(inputtext) < MAX_PLAYER_NAME )
				{
					ShowReasonPolice(playerid);
					format(PlayersDataOnline[playerid][NameProject], MAX_PLAYER_NAME, "%s", inputtext);
				}
				else
				{
					ShowNamePolice(playerid);
					SendInfoMessage(playerid, 0, "1106", "El nombre debe ser mayor de 2 y menor de 24 caracteres");
				}
		    }
		    else
		    {
				ShowReasonPolice(playerid);
				format(PlayersDataOnline[playerid][NameProject], MAX_PLAYER_NAME, "No");
			}
		}
		// Reason Police
		case 55:
		{
   		    if ( response == 1 )
		    {
				if ( strlen(inputtext) >= 6 &&  strlen(inputtext) < MAX_TEXT_CHAT )
				{
					AddCall(PlayersData[playerid][Phone], PlayersDataOnline[playerid][NameProject], inputtext, PlayersDataOnline[playerid][NumberCallPublic]);
					if ( !PlayersDataOnline[playerid][NumberCallPublic] )
					{
						new MsgLlamar[MAX_TEXT_CHAT];
						format(MsgLlamar, sizeof(MsgLlamar), "La central de LSPD ha recibido un nuevo reporte policial. Use (/Llamadas) Número: %i.", PlayersData[playerid][Phone]);
					    SendAlertCallRequest(LSPD, MsgLlamar);
						ShowPlayerDialogEx(playerid,56,DIALOG_STYLE_MSGBOX,"{00A5FF}LSPD - Reporte Policial", "{F0F0F0}Gracias por reportar este incidente a la {F5FF00}LSPD", "Colgar", "");
					}
					else
					{
						new MsgLlamar[MAX_TEXT_CHAT];
						format(MsgLlamar, sizeof(MsgLlamar), "La central de SFPD ha recibido un nuevo reporte policial. Use (/Llamadas) Número: %i.", PlayersData[playerid][Phone]);
					    SendAlertCallRequest(SFPD, MsgLlamar);
						ShowPlayerDialogEx(playerid,56,DIALOG_STYLE_MSGBOX,"{00A5FF}SFPD - Reporte Policial", "{F0F0F0}Gracias por reportar este incidente a la {F5FF00}SFPD", "Colgar", "");
					}
				}
				else
				{
					ShowReasonPolice(playerid);
					SendInfoMessage(playerid, 0, "1107", "La razón del reporte debe ser mayor de 6 y menor de 150 caracteres");
				}
		    }
		    else
		    {
				Acciones(playerid, 8, "guarda su móvil");
				SetPlayerColgar(playerid);
			}
		}
		// FIN POLICE
		case 56:
		{
			Acciones(playerid, 8, "guarda su móvil");
			SetPlayerColgar(playerid);
		}
		// Inicio Reportes
		case 57:
		{
   		    if ( response == 1 )
		    {
				if( CallPolice[PlayersDataOnline[playerid][SaveAfterAgenda][listitem]][PlayersDataOnline[playerid][NumberCallPublic]][Number] )
				{
                	ShowDetailsCall(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][listitem]);
					PlayersDataOnline[playerid][SaveAfterAgenda][0] = PlayersDataOnline[playerid][SaveAfterAgenda][listitem];
				}
				else
				{
					ShowPlayerDialogEx(playerid,9999,DIALOG_STYLE_MSGBOX,"{00A5FF}Policía - Información", "{F0F0F0}Este reporte ya fue atendido por otro agente!", "Aceptar", "");
				}
		    }
	    }
	    case 58:
	    {
   		    if ( response == 1 )
		    {
				if( CallPolice[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][NumberCallPublic]][Number] )
				{
			        new PlayerIdRequest = GetNumberID(CallPolice[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][NumberCallPublic]][Number]);
				    if ( PlayerIdRequest != -1 )
				    {
					    new Float:PosCall[3];
						GetPlayerPos(PlayerIdRequest, PosCall[0], PosCall[1], PosCall[2]);
						SetPlayerCheckpoint(playerid, PosCall[0], PosCall[1], PosCall[2], 2.0);
						new MsgLlamar[MAX_TEXT_CHAT];
						format(MsgLlamar, sizeof(MsgLlamar), "Ha respondido un reporte policial, se le ha marcado en el mapa el lugar de los hechos! Número: %i.", CallPolice[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][NumberCallPublic]][Number]);
						SendInfoMessage(playerid, 3, "0", MsgLlamar);
					}
					else
					{
						ShowPlayerDialogEx(playerid,9999,DIALOG_STYLE_MSGBOX,"{00A5FF}Policía - Información", "{F0F0F0}No se pudo rastrear ese reporte policial\nPuede que el móvil este apagado.", "Aceptar", "");
					}
					RemoveCall(PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][NumberCallPublic]);
				}
				else
				{
					ShowPlayerDialogEx(playerid,9999,DIALOG_STYLE_MSGBOX,"{00A5FF}Policía - Información", "{F0F0F0}Este reporte ya fue atendido por otro agente!", "Aceptar", "");
				}
			}
			else
			{
				ShowCallPolice(playerid);
			}
		}
	    case 59:
	    {
   		    if ( response == 1 )
		    {
				if( CallPublics[PlayersDataOnline[playerid][SaveAfterAgenda][listitem]][PlayersDataOnline[playerid][NumberCallPublic]][Number] )
				{
			        new PlayerIdRequest = GetNumberID(CallPublics[PlayersDataOnline[playerid][SaveAfterAgenda][listitem]][PlayersDataOnline[playerid][NumberCallPublic]][Number]);
				    if ( PlayerIdRequest != -1 )
				    {
					    new Float:PosCall[3];
						GetPlayerPos(PlayerIdRequest, PosCall[0], PosCall[1], PosCall[2]);
						SetPlayerCheckpoint(playerid, PosCall[0], PosCall[1], PosCall[2], 2.0);

						new MsgLlamar[MAX_TEXT_CHAT];
						new MsgLlamarToClient[MAX_TEXT_CHAT];
					    switch ( PlayersDataOnline[playerid][NumberCallPublic] )
					    {
							case 0:
							{
								format(MsgLlamar, sizeof(MsgLlamar), "Atendiste una llamada de un cliente, esta señalado en el mapa donde debe recogerlo! Número: %i.", CallPublics[PlayersDataOnline[playerid][SaveAfterAgenda][listitem]][PlayersDataOnline[playerid][NumberCallPublic]][Number]);
								format(MsgLlamarToClient, sizeof(MsgLlamarToClient), "Su petición de un taxí fue atendida! No se mueva de está posición, un taxí ya viene a recogerlo.");
							}
							case 1:
							{
								format(MsgLlamar, sizeof(MsgLlamar), "Contestasté la petición de cliente, está marcado en el mapa su posición! Número: %i.", CallPublics[PlayersDataOnline[playerid][SaveAfterAgenda][listitem]][PlayersDataOnline[playerid][NumberCallPublic]][Number]);
								format(MsgLlamarToClient, sizeof(MsgLlamarToClient), "Un mecánico del taller en San Fierro atendió su llamada! No se mueva de está posición.");
							}
							case 2:
							{
								format(MsgLlamar, sizeof(MsgLlamar), "Contestasté la petición de cliente, está marcado en el mapa su posición! Número: %i.", CallPublics[PlayersDataOnline[playerid][SaveAfterAgenda][listitem]][PlayersDataOnline[playerid][NumberCallPublic]][Number]);
								format(MsgLlamarToClient, sizeof(MsgLlamarToClient), "Un mecánico del taller en Los Santos atendió su llamada! No se mueva de está posición.");
							}
						}
						SendInfoMessage(playerid, 3, "0", MsgLlamar);
						SendInfoMessage(PlayerIdRequest, 3, "0", MsgLlamarToClient);
					}
					else
					{
						ShowPlayerDialogEx(playerid,9999,DIALOG_STYLE_MSGBOX,"{00A5FF}Centro de Llamadas - Información", "{F0F0F0}No se pudo rastrear está llamada\nPuede que el móvil este apagado.", "Aceptar", "");
					}
					RemoveCallPublics(PlayersDataOnline[playerid][SaveAfterAgenda][listitem], PlayersDataOnline[playerid][NumberCallPublic]);
				}
				else
				{
					ShowPlayerDialogEx(playerid,9999,DIALOG_STYLE_MSGBOX,"{00A5FF}Centro de Llamadas - Información", "{F0F0F0}Esa llamada ya fue atendidá por otro compañero de trabajo!", "Aceptar", "");
				}
			}
	    }
	    // Caminar
		case 60:
		{
   		    if ( response == 1 )
		    {
                PlayersData[playerid][MyStyleTalk] = listitem;
		    }
		}
/*		// Correr
		case 61:
		{
   		    if ( response == 1 )
		    {
                PlayersData[playerid][MyStyleSprint] = listitem;
		    }
		}*/
	    // SMS - OPCIONES
	    case 61:
	    {
	        if ( response == 1 )
	        {
			    switch ( listitem )
			    {
			        // Leer
					case 0:
					{
						ShowReadSMS(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Responder
					case 1:
					{
						ShowReplySMS(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Llamar
					case 2:
					{
					    SetPlayerCall(playerid, SMS[playerid][PlayersDataOnline[playerid][SaveAfterAgenda][0]][Number]);
					}
					// Borrar
					case 3:
					{
						ShowRemoveSMS(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
				}
	        }
	        else
	        {
				ShowSMSToPlayer(playerid);
			}
		}
		// SMS - OPCIÓN SELECCIONADA
		case 62:
		{
   		    if ( response == 1 )
		    {
				ShowSMSOptionsToPlayer(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][listitem]);
				PlayersDataOnline[playerid][SaveAfterAgenda][0] = PlayersDataOnline[playerid][SaveAfterAgenda][listitem];
		    }
		    else
		    {
				ShowHomeAgenda(playerid);
			}
		}
		// SMS - OPCIÓN LEER
		case 63:
		{
   		    if ( response == 0 )
		    {
				ShowSMSOptionsToPlayer(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
			}
			else
			{
		        Acciones(playerid, 8, "guarda su agenda");
			}
		}
		// SMS - OPCIÓN RESPONDER
		case 64:
		{
   		    if ( response == 1 )
		    {
				SendSMS(playerid, SMS[playerid][PlayersDataOnline[playerid][SaveAfterAgenda][0]][Number], inputtext);
			}
			else
			{
				ShowSMSOptionsToPlayer(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
			}
		}
		// RESET SERVER
		case 65:
		{
   		    if ( response == 1 )
		    {
		        if ( strlen(inputtext) > 0 )
				{
					format(ReasonReset, sizeof(ReasonReset), "{00A5FF}Razón del reinicio: {00F50A}%s", inputtext);
				}
				else
				{
					format(ReasonReset, sizeof(ReasonReset), "{00A5FF}Razón del reinicio: {00F50A}[No especificada]");
				}
				ResetServer();
			}
		}
		// SMS BORRAR TODOS
		case 66:
		{
   		    if ( response == 1 )
		    {
                CleanSMS(playerid);
			}
			ShowHomeAgenda(playerid);
		}
		// DEAHT MATCH MODE WEAPON SELECT
		case 67:
		{
   		    if ( response == 1 )
		    {
		        if ( listitem < 19 )
		        {
					Reverse(WeaponEnableDM[listitem]);
					IsWeaponDmExist(listitem);
				}
				else
				{
					Reverse(WeaponEnableDM[listitem + 3]);
					IsWeaponDmExist(listitem + 3);
				}
				ShowMenuDMWeapon(playerid);
			}
		}
		// ShowGarages
		case 68:
		{
   		    if ( response == 1 )
		    {
				ShowDetailsGarage(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][10], PlayersDataOnline[playerid][SaveAfterAgenda][listitem]);
				PlayersDataOnline[playerid][SaveAfterAgenda][0] = PlayersDataOnline[playerid][SaveAfterAgenda][listitem];
			}
		}
		// ShowDetailsGarage
		case 69:
		{
   		    if ( response == 1 )
		    {
                Reverse(Garages[PlayersDataOnline[playerid][SaveAfterAgenda][10]][PlayersDataOnline[playerid][SaveAfterAgenda][0]][DeletedG]);
			}
		}
		// ShowHouseFriends
		case 70:
		{
   		    if ( response == 1 )
		    {
			    if ( strlen(HouseFriends[PlayersDataOnline[playerid][SaveAfterAgenda][0]][listitem][Name]) > 2 )
			    {
				    new MsgHouseFriend[MAX_TEXT_CHAT];
				    format(MsgHouseFriend, sizeof(MsgHouseFriend), "Le quitaste las llaves de la casa a %s", HouseFriends[PlayersDataOnline[playerid][SaveAfterAgenda][0]][listitem][Name]);
			        if ( RemovePlayerHouseFriend(PlayersDataOnline[playerid][SaveAfterAgenda][0], listitem) )
					{
						SendInfoMessage(playerid, 3, "0", MsgHouseFriend);
					}
				}
				ShowHouseFriends(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
			}
		}
		case 71:
		{
   		    if ( response == 1 )
		    {
                if ( DestroyFire(PlayersDataOnline[playerid][SaveAfterAgenda][listitem]) )
                {
					ShowPlayerDialogEx(playerid,999,DIALOG_STYLE_MSGBOX,"{00A5FF}Incendios - Información", "{00F50A}Incendio eliminado correctamente.", "Aceptar", "");
				}
				else
				{
					ShowPlayerDialogEx(playerid,999,DIALOG_STYLE_MSGBOX,"{00A5FF}Incendios - Información", "{F50000}Este incendio ya fue eliminado!", "Aceptar", "");
				}
			}
		}
		// Inicio SAMD
		case 72:
		{
   		    if ( response == 1 )
		    {
				ShowConnectedRequest(playerid);
		    }
		    else
		    {
				Acciones(playerid, 8, "guarda su móvil");
				SetPlayerColgar(playerid);
			}
		}
		// Solicito SAMD
		case 73:
		{
			PlayersDataOnline[playerid][NumberCallPublic] = response;
			if ( IsFoundCallSAMD(PlayersData[playerid][Phone], PlayersDataOnline[playerid][NumberCallPublic], PlayersDataOnline[playerid][SaveAfterAgenda][50]) == -1 )
			{
    			new MsgLlamar[MAX_TEXT_CHAT];
	   		    if ( response == 1 )
			    {
					if ( PlayersDataOnline[playerid][SaveAfterAgenda][50] )
					{
						format(MsgLlamar, sizeof(MsgLlamar), "La central de LSMD ha recibido una llamada solicitando médicos. Use (/Llamadas) Número: %i.", PlayersData[playerid][Phone]);
						SendAlertCallRequestSAMD(response, MsgLlamar, LSMD);
						ShowPlayerDialogEx(playerid,74,DIALOG_STYLE_MSGBOX,"{00A5FF}LSMD - Médicos", "{F0F0F0}Gracias por solicitar servicios de {F5FF00}LSMD {F0F0F0}, enviaremos un médico los más pronto posible.", "Colgar", "");
					}
					else
					{
						format(MsgLlamar, sizeof(MsgLlamar), "La central de SFMD ha recibido una llamada solicitando médicos. Use (/Llamadas) Número: %i.", PlayersData[playerid][Phone]);
						SendAlertCallRequestSAMD(response, MsgLlamar, SFMD);
						ShowPlayerDialogEx(playerid,74,DIALOG_STYLE_MSGBOX,"{00A5FF}SFMD - Médicos", "{F0F0F0}Gracias por solicitar servicios de {F5FF00}SFMD {F0F0F0}, enviaremos un médico los más pronto posible.", "Colgar", "");
					}
			    }
			    else
			    {
					if ( PlayersDataOnline[playerid][SaveAfterAgenda][50] )
					{
						format(MsgLlamar, sizeof(MsgLlamar), "La central de LSMD ha recibido una llamada solicitando bomberos. Use (/Llamadas) Número: %i.", PlayersData[playerid][Phone]);
						SendAlertCallRequestSAMD(response, MsgLlamar, LSMD);
						ShowPlayerDialogEx(playerid,74,DIALOG_STYLE_MSGBOX,"{00A5FF}LSMD - Bomberos", "{F0F0F0}Gracias por solicitar servicios de {F5FF00}LSMD {F0F0F0}, nuestro equipo de bomberos actuará rápidamente a su llamado.", "Colgar", "");
					}
					else
					{
						format(MsgLlamar, sizeof(MsgLlamar), "La central de SFMD ha recibido una llamada solicitando bomberos. Use (/Llamadas) Número: %i.", PlayersData[playerid][Phone]);
						SendAlertCallRequestSAMD(response, MsgLlamar, SFMD);
						ShowPlayerDialogEx(playerid,74,DIALOG_STYLE_MSGBOX,"{00A5FF}SFMD - Bomberos", "{F0F0F0}Gracias por solicitar servicios de {F5FF00}SFMD {F0F0F0}, nuestro equipo de bomberos actuará rápidamente a su llamado.", "Colgar", "");
					}
				}
				AddCallSAMD(PlayersDataOnline[playerid][SaveAfterAgenda][50], GetMyNearCity(playerid), PlayersData[playerid][Phone], response);
			}
			else
			{
			    if ( response )
			    {
					SendInfoMessage(playerid, 0, "1109", "Ya usted tiene regístrada una llamada en la central del hospital solicitando un médico, espere que le contesten");
				}
				else
				{
					SendInfoMessage(playerid, 0, "1517", "Ya usted tiene regístrada una llamada en la central del hospital solicitando un bombero, espere que le contesten");
				}
				Acciones(playerid, 8, "guarda su móvil");
				SetPlayerColgar(playerid);
			}
		}
		case 74:
		{
			Acciones(playerid, 8, "guarda su móvil");
			SetPlayerColgar(playerid);
		}
		case 75:
		{
   		    if ( response == 1 )
		    {
				switch ( listitem )
				{
				    case 0:
					{
						if( CallSAMD[PlayersDataOnline[playerid][SaveAfterAgenda][50]][PlayersDataOnline[playerid][SaveAfterAgenda][51]][Number] )
						{
					        new PlayerIdRequest = GetNumberID(CallSAMD[PlayersDataOnline[playerid][SaveAfterAgenda][50]][PlayersDataOnline[playerid][SaveAfterAgenda][51]][Number]);
						    if ( PlayerIdRequest != -1 )
						    {
							    new Float:PosCall[3];
								GetPlayerPos(PlayerIdRequest, PosCall[0], PosCall[1], PosCall[2]);
								SetPlayerCheckpoint(playerid, PosCall[0], PosCall[1], PosCall[2], 2.0);

								new MsgLlamar[MAX_TEXT_CHAT];
								new MsgLlamarToClient[MAX_TEXT_CHAT];
							    if ( PlayersDataOnline[playerid][NumberCallPublic] )
							    {
									format(MsgLlamar, sizeof(MsgLlamar), "Atendíste una llamada de un paciente, esta señalado en el mapa donde debe atenderlo! Número: %i.", CallSAMD[PlayersDataOnline[playerid][SaveAfterAgenda][50]][PlayersDataOnline[playerid][SaveAfterAgenda][51]][Number]);
							        if ( PlayersDataOnline[playerid][SaveAfterAgenda][50] )
							        {
										format(MsgLlamarToClient, sizeof(MsgLlamarToClient), "Un médico atendió su llamada a LSMD! Resista, en un momento llegará!");
									}
									else
									{
										format(MsgLlamarToClient, sizeof(MsgLlamarToClient), "Un médico atendió su llamada a SFMD! Resista, en un momento llegará!");
									}
								}
								else
								{
									format(MsgLlamar, sizeof(MsgLlamar), "Contestaste una llamada de emergencia a los bomberos, esta señalado en el mapa donde es el incidente! Número: %i.", CallSAMD[PlayersDataOnline[playerid][SaveAfterAgenda][50]][PlayersDataOnline[playerid][SaveAfterAgenda][51]][Number]);
							        if ( PlayersDataOnline[playerid][SaveAfterAgenda][50] )
							        {
										format(MsgLlamarToClient, sizeof(MsgLlamarToClient), "Su petición de bomberos a LSMD fue atendida! No se mueva de está posición, ya vienen!");
									}
									else
									{
										format(MsgLlamarToClient, sizeof(MsgLlamarToClient), "Su petición de bomberos a SFMD fue atendida! No se mueva de está posición, ya vienen!");
									}
								}
								SendInfoMessage(playerid, 3, "0", MsgLlamar);
								SendInfoMessage(PlayerIdRequest, 3, "0", MsgLlamarToClient);
							}
							else
							{
								if ( PlayersDataOnline[playerid][SaveAfterAgenda][50] )
								{
									ShowPlayerDialogEx(playerid,9999,DIALOG_STYLE_MSGBOX,"{00A5FF}Centro de Llamadas - LSMD", "{F0F0F0}No se pudo rastrear está llamada\nPuede que el móvil este apagado.", "Aceptar", "");
								}
								else
								{
									ShowPlayerDialogEx(playerid,9999,DIALOG_STYLE_MSGBOX,"{00A5FF}Centro de Llamadas - SFMD", "{F0F0F0}No se pudo rastrear está llamada\nPuede que el móvil este apagado.", "Aceptar", "");
								}
							}
							RemoveCallSAMD(PlayersDataOnline[playerid][SaveAfterAgenda][51], PlayersDataOnline[playerid][SaveAfterAgenda][50]);
						}
						else
						{
							if ( PlayersDataOnline[playerid][SaveAfterAgenda][50] )
							{
								ShowPlayerDialogEx(playerid,9999,DIALOG_STYLE_MSGBOX,"{00A5FF}Centro de Llamadas - LSMD", "{F0F0F0}Esa llamada ya fue atendidá o transferida por otro compañero!", "Aceptar", "");
							}
							else
							{
								ShowPlayerDialogEx(playerid,9999,DIALOG_STYLE_MSGBOX,"{00A5FF}Centro de Llamadas - SFMD", "{F0F0F0}Esa llamada ya fue atendidá o transferida por otro compañero!", "Aceptar", "");
							}
						}
					}
					case 1:
					{
						if( CallSAMD[PlayersDataOnline[playerid][SaveAfterAgenda][50]][PlayersDataOnline[playerid][SaveAfterAgenda][51]][Number] )
						{
							new MsgToTransfer[MAX_TEXT_CHAT];
						    if ( PlayersDataOnline[playerid][SaveAfterAgenda][50] )
							{
								AddCallSAMD( 0,
								             CallSAMD[PlayersDataOnline[playerid][SaveAfterAgenda][50]][PlayersDataOnline[playerid][SaveAfterAgenda][51]][City],
											 CallSAMD[PlayersDataOnline[playerid][SaveAfterAgenda][50]][PlayersDataOnline[playerid][SaveAfterAgenda][51]][Number],
											 CallSAMD[PlayersDataOnline[playerid][SaveAfterAgenda][50]][PlayersDataOnline[playerid][SaveAfterAgenda][51]][Type]
											 );
								format(MsgToTransfer, sizeof(MsgToTransfer), "{F0F0F0}Has transferido esta llamada a el departamenteo de {00F50A}SFMD");
								ShowPlayerDialogEx(playerid,140,DIALOG_STYLE_MSGBOX,"{00A5FF}Centro de Llamadas - LSMD", MsgToTransfer, "Aceptar", "");
								format(MsgToTransfer, sizeof(MsgToTransfer), "%s ha transferido una llamada a SFMD. Número de la llamada %i.", PlayersDataOnline[playerid][NameOnlineFix], CallSAMD[PlayersDataOnline[playerid][SaveAfterAgenda][50]][PlayersDataOnline[playerid][SaveAfterAgenda][51]][Number]);
								SendAlertCallRequestSAMD(CallSAMD[PlayersDataOnline[playerid][SaveAfterAgenda][50]][PlayersDataOnline[playerid][SaveAfterAgenda][51]][Type], MsgToTransfer, LSMD);
								
								if ( CallSAMD[PlayersDataOnline[playerid][SaveAfterAgenda][50]][PlayersDataOnline[playerid][SaveAfterAgenda][51]][Type] )
								{
									format(MsgToTransfer, sizeof(MsgToTransfer), "{F0F0F0}La central de LSMD nos ha trasferido una llamada de médicos.", PlayersDataOnline[playerid][NameOnlineFix]);
								}
								else
								{
									format(MsgToTransfer, sizeof(MsgToTransfer), "{F0F0F0}La central de LSMD nos ha trasferido una llamada de bomberos.", PlayersDataOnline[playerid][NameOnlineFix]);
								}
								SendAlertCallRequestSAMD(CallSAMD[PlayersDataOnline[playerid][SaveAfterAgenda][50]][PlayersDataOnline[playerid][SaveAfterAgenda][51]][Type], MsgToTransfer, SFMD);
							}
							else
							{
								AddCallSAMD( 1,
											 CallSAMD[PlayersDataOnline[playerid][SaveAfterAgenda][50]][PlayersDataOnline[playerid][SaveAfterAgenda][51]][City],
											 CallSAMD[PlayersDataOnline[playerid][SaveAfterAgenda][50]][PlayersDataOnline[playerid][SaveAfterAgenda][51]][Number],
											 CallSAMD[PlayersDataOnline[playerid][SaveAfterAgenda][50]][PlayersDataOnline[playerid][SaveAfterAgenda][51]][Type]);
								format(MsgToTransfer, sizeof(MsgToTransfer), "{F0F0F0}Has transferido esta llamada a el departamenteo de {00F50A}LSMD");
								ShowPlayerDialogEx(playerid,140,DIALOG_STYLE_MSGBOX,"{00A5FF}Centro de Llamadas - SFMD", MsgToTransfer, "Aceptar", "");
								format(MsgToTransfer, sizeof(MsgToTransfer), "%s ha transferido una llamada a . Número de la llamada %i.", PlayersDataOnline[playerid][NameOnlineFix], CallSAMD[PlayersDataOnline[playerid][SaveAfterAgenda][50]][PlayersDataOnline[playerid][SaveAfterAgenda][51]][Number]);
								SendAlertCallRequestSAMD(CallSAMD[PlayersDataOnline[playerid][SaveAfterAgenda][50]][PlayersDataOnline[playerid][SaveAfterAgenda][51]][Type], MsgToTransfer, SFMD);
								
								if ( CallSAMD[PlayersDataOnline[playerid][SaveAfterAgenda][50]][PlayersDataOnline[playerid][SaveAfterAgenda][51]][Type] )
								{
									format(MsgToTransfer, sizeof(MsgToTransfer), "{F0F0F0}La central de SFMD nos ha trasferido una llamada de médicos.", PlayersDataOnline[playerid][NameOnlineFix]);
								}
								else
								{
									format(MsgToTransfer, sizeof(MsgToTransfer), "{F0F0F0}La central de SFMD nos ha trasferido una llamada de bomberos.", PlayersDataOnline[playerid][NameOnlineFix]);
								}
								SendAlertCallRequestSAMD(CallSAMD[PlayersDataOnline[playerid][SaveAfterAgenda][50]][PlayersDataOnline[playerid][SaveAfterAgenda][51]][Type], MsgToTransfer, LSMD);
							}
							RemoveCallSAMD(PlayersDataOnline[playerid][SaveAfterAgenda][51], PlayersDataOnline[playerid][SaveAfterAgenda][50]);
						}
						else
						{
							if ( PlayersDataOnline[playerid][SaveAfterAgenda][50] )
							{
								ShowPlayerDialogEx(playerid,9999,DIALOG_STYLE_MSGBOX,"{00A5FF}Centro de Llamadas - LSMD", "{F0F0F0}Esa llamada ya fue atendidá o transferida por otro compañero!", "Aceptar", "Inicio");
							}
							else
							{
								ShowPlayerDialogEx(playerid,9999,DIALOG_STYLE_MSGBOX,"{00A5FF}Centro de Llamadas - SFMD", "{F0F0F0}Esa llamada ya fue atendidá o transferida por otro compañero!", "Aceptar", "Inicio");
							}
						}
					}
				}
			}
			else
			{
				ShowCallSAMD(playerid);
			}
		}
		case 76:
		{
   		    if ( response == 1 )
		    {
                ShowDialogBarra(playerid, listitem);
		    }
	    }
		case 77:
		{
   		    if ( response == 1 )
		    {
		        new IsBombNear = IsPlayerNearBomba(playerid, 250.0, PlayersDataOnline[playerid][SaveAfterAgenda][listitem]);
		        if ( IsBombNear != -1 )
		        {
	                if ( ActivarBomba(IsBombNear, 20) )
	                {
						ShowPlayerDialogEx(playerid,78,DIALOG_STYLE_MSGBOX,"{00A5FF}Bombas - Control Detonación", "{00F50A}Bomba detonada exitosamente!", "Aceptar", "Volver");
					}
					else
					{
						ShowPlayerDialogEx(playerid,78,DIALOG_STYLE_MSGBOX,"{00A5FF}Bombas - Control Error", "{F50000}Error al detonar la bomba!\n Al parecer ya fue detonada por otro miembro!", "Aceptar", "Volver");
					}
            	}
				else
				{
					ShowPlayerDialogEx(playerid,78,DIALOG_STYLE_MSGBOX,"{00A5FF}Bombas - Control Error", "{00F50A}Error de conexión con la bomba\n intente acercarse más a la misma para detonarla!", "Aceptar", "Volver");
				}
		    }
	    }
		case 78:
		{
   		    if ( response == 0 )
		    {
				ShowBombas(playerid);
		    }
	    }
		case 79:
		{
		    if ( IsTunnigContinue(playerid) )
		    {
	   		    if ( response == 1 )
			    {
			        new PlateV = strval(inputtext);
			        if ( PlateV >= 10000 && PlateV <= 999999 )
			        {
			            if ( !ExistPlate(PlateV) )
			            {
							new MsgMatriculaChanged[MAX_TEXT_CHAT];
							new LastPlate = DataCars[PlayersDataOnline[playerid][MyIDVehicleTunning]][Matricula];

							PlayersData[playerid][TimeEquipo] = gettime() + 300;
							ChangeVehiclePlate(PlayersDataOnline[playerid][MyIDVehicleTunning], PlateV);

							format(MsgMatriculaChanged, sizeof(MsgMatriculaChanged), "Cambiaste la matrícula de éste vehículo de forma personalizada! Su nueva matrícula es: %i (La antigua: %i)", DataCars[PlayersDataOnline[playerid][MyIDVehicleTunning]][Matricula], LastPlate);
						  	SendInfoMessage(playerid, 3, "0", MsgMatriculaChanged);

							PlayPlayerStreamSound(playerid, SOUND_TUNNING);
							ShowMenuForPlayer(TallerPrincipal, playerid);
						}
						else
						{
							SendInfoMessage(playerid, 0, "1314", "Ya existe un vehículo con esa matrícula, use otra.");
							ShowChangePlate(playerid);
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1313", "El número de la matrícula debe estar comprendido entre 10000 y 999999 (Un número de 6 cifras)");
						ShowChangePlate(playerid);
					}
			    }
			    else
			    {
					new MsgMatriculaChanged[MAX_TEXT_CHAT];
					new LastPlate = DataCars[PlayersDataOnline[playerid][MyIDVehicleTunning]][Matricula];

					PlayersData[playerid][TimeEquipo] = gettime() + 300;
					ChangeVehiclePlate(PlayersDataOnline[playerid][MyIDVehicleTunning], 0);

					format(MsgMatriculaChanged, sizeof(MsgMatriculaChanged), "Cambiaste la matrícula de éste vehículo de forma aleatoria! Su nueva matrícula es: %i (La antigua: %i)", DataCars[PlayersDataOnline[playerid][MyIDVehicleTunning]][Matricula], LastPlate);
				  	SendInfoMessage(playerid, 3, "0", MsgMatriculaChanged);

					PlayPlayerStreamSound(playerid, SOUND_TUNNING);
					ShowMenuForPlayer(TallerPrincipal, playerid);
				}
			}
	    }
	    // ShowManejarCuentas(playerid)
		case 80:
		{
   		    if ( response == 1 )
		    {
				switch ( listitem )
				{
				    // Ver estadíasticas
				    case 0:
				    {
						new StatsBank[MAX_TEXT_CHAT];
						format(StatsBank, sizeof(StatsBank), "{00F50A}  ||  Cuenta de Ahorros  ||\n{E6E6E6}Balance: {00F50A}$%i\n\n{00F50A} ||  Cuenta de Cheques  ||\n{E6E6E6}Balance: {00F50A}$%i",
						PlayersData[playerid][Banco],
						Banking[playerid][Balance]
					    );
						ShowPlayerDialogEx(playerid,81,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Estadísticas",StatsBank, "Volver", "");
					}
				    // Transferir CORRIENTE -> CHEQUE
				    case 1:
				    {
						ShowPlayerDialogEx(playerid,82,DIALOG_STYLE_INPUT, "{00A5FF}Banco - Transferir a CUENTA DE CHEQUES", "{E6E6E6}Ingrese la cantidad que desea mover a su cuenta de {00F50A}CHEQUES", "Realizar", "Cancelar");
					}
				    // Transferir CHEQUE -> CORRIENTE
				    case 2:
				    {
						ShowPlayerDialogEx(playerid,83,DIALOG_STYLE_INPUT, "{00A5FF}Banco - Transferir a CUENTA AHORROS", "{E6E6E6}Ingrese la cantidad que desea mover a su cuenta de {00F50A}AHORROS", "Realizar", "Cancelar");
					}
				}
		    }
			else
			{
				ShowHomeBanco(playerid);
			}
		}
		case 81:
		{
			ShowManejarCuentas(playerid);
		}
	    // Transferir CORRIENTE -> CHEQUE
		case 82:
		{
   		    if ( response == 1 )
		    {
				new AmountT = strval(inputtext);
				if ( AmountT > 0 && AmountT <= 500000)
				{
				    if ( PlayersData[playerid][Banco] > AmountT )
				    {
				        PlayersData[playerid][Banco] -= AmountT;
				        Banking[playerid][Balance]	 += AmountT;

						new StatsBank[250];
						format(StatsBank, sizeof(StatsBank), "{E6E6E6}Se han transferido satisfactoriamente {00F50A}$%i {E6E6E6}a la cuenta de Cheques\n\n{E6E6E6}El nuevo balance en la cuenta de cheques es: {00F50A}$%i\n{E6E6E6}El nuevo balance en la cuenta de ahorros es: {00F50A}$%i",
						AmountT,
						Banking[playerid][Balance],
						PlayersData[playerid][Banco]
					    );
						ShowPlayerDialogEx(playerid,81,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Transferencia realizada",StatsBank, "Aceptar", "");
					}
					else
					{
						ShowPlayerDialogEx(playerid,81,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Error", "{F50000}No tienes fondos suficientes en la cuenta de ahorros para realizar está operación!", "Aceptar", "");
					}
				}
				else
				{
					ShowPlayerDialogEx(playerid,81,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Error", "{F50000}La cantidad a transferir tiene que ser mayor de $0 y menor de $500000!", "Aceptar", "");
				}
		    }
		    else
		    {
				ShowManejarCuentas(playerid);
			}
		}
	    // Transferir CHEQUE -> CORRIENTE
		case 83:
		{
   		    if ( response == 1 )
		    {
				new AmountT = strval(inputtext);
				if ( AmountT > 0 && AmountT <= 500000)
				{
				    if ( Banking[playerid][Balance] > AmountT )
				    {
				        PlayersData[playerid][Banco] += AmountT;
				        Banking[playerid][Balance]	 -= AmountT;

						new StatsBank[250];
						format(StatsBank, sizeof(StatsBank), "{E6E6E6}Se han transferido satisfactoriamente {00F50A}$%i {E6E6E6}a la cuenta de Cheques\n\n{E6E6E6}El nuevo balance en la cuenta de ahorros es: {00F50A}$%i\n{E6E6E6}El nuevo balance en la cuenta de cheques es: {00F50A}$%i",
						AmountT,
						PlayersData[playerid][Banco],
						Banking[playerid][Balance]
					    );
						ShowPlayerDialogEx(playerid,81,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Transferencia realizada",StatsBank, "Aceptar", "");
					}
					else
					{
						ShowPlayerDialogEx(playerid,81,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Error", "{F50000}No tienes fondos suficientes en la cuenta de cheques para realizar está operación!", "Aceptar", "");
					}
				}
				else
				{
					ShowPlayerDialogEx(playerid,81,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Error", "{00F50A}La cantidad a transferir tiene que ser mayor de $0 y menor de $500000!", "Aceptar", "");
				}
		    }
		    else
		    {
				ShowManejarCuentas(playerid);
			}
		}
		//  ShowVerCheques(playerid)
		case 84:
		{
   		    if ( response == 1 )
		    {
		 		if ( RemoveCheque(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][listitem]) )
		 		{
					ShowPlayerDialogEx(playerid,32,DIALOG_STYLE_MSGBOX,"{00A5FF}Banco - Cheque Eliminado", "{E6E6E6}Cheque cancelado con éxito!", "Aceptar", "Volver");
				}
				else
				{
					ShowPlayerDialogEx(playerid,32,DIALOG_STYLE_MSGBOX,"{00A5FF}Banco - Error", "{00F50A}El cheque que quiere cancelar, ya fue cobrado en estos instantes!", "Aceptar", "Volver");
				}
		    }
		    else
		    {
			    ShowHomeBanco(playerid);
			}
	    }
		// ShowPayCheque(playerid)
		case 85:
		{
   		    if ( response == 1 )
		    {
				if ( PlayersData[playerid][Cartera][PlayersDataOnline[playerid][SaveAfterAgenda][listitem]] != CARTERA_TYPE_NADA && PlayersData[playerid][Cartera][PlayersDataOnline[playerid][SaveAfterAgenda][listitem]] == CARTERA_TYPE_CHEQUE)
				{
					PayCheckToPlayer(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][listitem]);
				}
				else
				{
					ShowPlayerDialogEx(playerid,32,DIALOG_STYLE_MSGBOX,"{00A5FF}Banco - Error", "{00F50A}El cheque selecionado no existe!", "Aceptar", "Volver");
				}
		    }
		    else
		    {
			    ShowHomeBanco(playerid);
			}
	    }
		// ShowBankConfiguration
		case 86:
		{
   		    if ( response == 1 )
		    {
				switch ( listitem )
				{
				    case 0:
				    {
				        ReverseEx(PlayersData[playerid][AlertSMSBank]);
				    }
				    case 1:
				    {
				        ReverseEx(Banking[playerid][LockIn]);
				    }
				    case 2:
				    {
				        ReverseEx(Banking[playerid][LockOut]);
				    }
				}
				ShowBankConfiguration(playerid);
		    }
		    else
		    {
			    ShowHomeBanco(playerid);
			}
	    }
		// ShowBankTransferencia
		case 87:
		{
   		    if ( response == 1 )
		    {
				PlayersDataOnline[playerid][SaveAfterAgenda][0] = strval(inputtext);
				if ( PlayersDataOnline[playerid][SaveAfterAgenda][0] != PlayersData[playerid][AccountBankingOpen] )
				{
				    if ( PlayersDataOnline[playerid][SaveAfterAgenda][0] > 9000 )
				    {
						ShowBankTransferenciaCantidad(playerid);
					}
					else
					{
						ShowPlayerDialogEx(playerid,32,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Error","{F50000}El número de cuenta insertada es inválida!", "Aceptar", "Volver");
					}
				}
				else
				{
					ShowPlayerDialogEx(playerid,32,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Error","{F50000}No puede transferir dinero a su misma cuenta!", "Aceptar", "Volver");
				}
		    }
		    else
		    {
			    ShowHomeBanco(playerid);
			}
	    }
		// ShowBankTransferenciaCantidad
		case 88:
		{
   		    if ( response == 1 )
		    {
				PlayersDataOnline[playerid][SaveAfterAgenda][1] = strval(inputtext);
				if ( PlayersDataOnline[playerid][SaveAfterAgenda][1] > 0 && PlayersDataOnline[playerid][SaveAfterAgenda][1] < 500000 )
				{
					ShowBankTransferenciaResumen(playerid);
				}
				else
				{
					ShowPlayerDialogEx(playerid,88,DIALOG_STYLE_INPUT,"{00A5FF}Banco - Elegir Cantidad", "{F0F0F0}Ingrese la cantidad de dinero que desea transferir\n\n{F50000}La cantidad debe ser mayor de $0 y menor de $500000", "Siguiente", "Atrás");
				}
		    }
		    else
		    {
			    ShowBankTransferencia(playerid);
			}
	    }
		// ShowBankTransferenciaResumen
		case 89:
		{
   		    if ( response == 1 )
		    {
				TransferirMoney(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
		    }
		    else
		    {
			    ShowBankTransferenciaCantidad(playerid);
			}
	    }
		// Recuperación de contraseña
		case 90:
		{
   		    if ( response == 1 )
		    {
				if ( strlen(inputtext) <= 60)
				{
				    IsValidEmail(playerid, inputtext);
					ShowPlayerDialogEx(playerid, 93, DIALOG_STYLE_MSGBOX, "{00A5FF}Validando E-mail...", "{F0F0F0}Porfavor espere mientras se valida su E-mail...", "Espere...", "");
				}
				else
				{
					ShowPlayerEmailChange(playerid, false);
					SendInfoMessage(playerid, 0, "1376", "El E-mail debe contener menos de 60 carácteres");
				}
		    }
		    else
		    {
		    	ShowDialogAccount(playerid);
			}
	    }
		// Comprobación de E-mail
		case 91:
		{
   		    if ( response == 1 )
		    {
		        if ( strcmp(PlayersData[playerid][Email], inputtext, true) == 0 && strlen(inputtext) ==  strlen(PlayersData[playerid][Email]))
		        {
					ShowPlayerDialogEx(playerid, 92, DIALOG_STYLE_MSGBOX, "{00A5FF}Enviando E-mail", "{F0F0F0}Porfavor espere mientras se procesa su solicitud...", "Espere...", "");
					SendRequestPasswordRecovery(playerid);
		        }
		        else
		        {
					SendInfoMessage(playerid, 0, "1375", "El E-mail introducido no coincide con el que se encuentra en su configuración.");
					ShowPlayerVerifiquedEmail(playerid, false);
				}
		    }
		    else
		    {
				ShowPlayerLogin(playerid, true);
			}
		}
		// Comprobación de E-mail
		case 92:
		{
			ShowPlayerDialogEx(playerid, 92, DIALOG_STYLE_MSGBOX, "{00A5FF}Enviando E-mail...", "{F0F0F0}Porfavor espere mientras se procesa su solicitud...", "Espere...", "");
		}
		// Validación del E-mail
		case 93:
		{
			//ShowPlayerDialogEx(playerid, 93, DIALOG_STYLE_MSGBOX, "{00A5FF}Validando E-mail...", "{F0F0F0}Porfavor espere mientras se valida su E-mail...", "Espere...", "");
		}
		// Error para Pistas, Informaciones y Otros
		case 94:
		{
   		    if ( response == 0 )
		    {
				ShowEditorPistas(playerid);
		    }
		}
		// ShowEditorPistas
		case 95:
		{
   		    if ( response == 1 )
		    {
		        switch ( listitem )
		        {
		            // Nueva Pista
		            case 0:
		            {
                        ShowNewPista(playerid);
					}
					// Lista de Pistas
		            case 1:
		            {
						ShowListPistas(playerid);
					}
				}
		    }
		}
		// ShowNewPista
		case 96:
		{
   		    if ( response == 1 )
		    {
			    if ( strlen(inputtext) > 2 )
			    {
					ShowPlayerDialogEx(playerid,94,DIALOG_STYLE_MSGBOX,"{00A5FF}Editor de Pistas - Pista Creada", "{00F50A}La pista a sido creada correctamente!", "Aceptar", "Inicio");
				    Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][Valid]	= true;
				    Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][Lock]	= true;
			    	format(Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][NamePista], 35, "%s", inputtext);
				}
				else
				{
                    ShowNewPista(playerid);
					SendInfoMessage(playerid, 0, "1427", "El nombre de la pista debe ser mayor de 2 caracteres!");
				}
		    }
		    else
		    {
				ShowEditorPistas(playerid);
			}
		}
		// ShowListPistas
		case 97:
		{
   		    if ( response == 1 )
		    {
		        PlayersDataOnline[playerid][SaveAfterAgenda][0] = PlayersDataOnline[playerid][SaveAfterAgenda][listitem];
				ShowListPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
		    }
		    else
		    {
				ShowEditorPistas(playerid);
			}
		}
		// ShowListPistasOptions
		case 98:
		{
   		    if ( response == 1 )
		    {
		        switch ( listitem )
		        {
		            // Modificar Nombre
		            case 0:
		            {
						ShowPistaChangeName(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
		            // Ver CheckPoints
		            case 1:
		            {
						ShowPistaShowCheckPoints(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// CarPoints
		            case 2:
		            {
						ShowPistaShowPosPlayers(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// CarPointsExit
		            case 3:
		            {
						ShowPistaShowCarPointsExit(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// CamPoints
		            case 4:
		            {
						ShowPistaShowCam(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Mostrar CheckPoints
		            case 5:
		            {
						ReverseEx(Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][ShowTagPos]);
						ShowOrHideTagPistaPos(PlayersDataOnline[playerid][SaveAfterAgenda][0]);
						ShowListPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Mostrar CarPoints
		            case 6:
		            {
						ReverseEx(Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][ShowTagPlayers]);
						ShowOrHideTagPistaPlayers(PlayersDataOnline[playerid][SaveAfterAgenda][0]);
						ShowListPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Mostrar CarPointsExit
		            case 7:
		            {
						ReverseEx(Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][ShowTagCarPointsExit]);
						ShowOrHideTagPistaCarPointsExit(PlayersDataOnline[playerid][SaveAfterAgenda][0]);
						ShowListPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Mostrar CamPoints
		            case 8:
		            {
						ReverseEx(Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][ShowTagCamPoints]);
						ShowOrHideTagPistaCam(PlayersDataOnline[playerid][SaveAfterAgenda][0]);
						ShowListPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Validar
		            case 9:
		            {
						ShowPistaValidar(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Interior
		            case 10:
		            {
                    	Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][Interior] = GetPlayerInteriorEx(playerid);
						ShowListPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Mundo
		            case 11:
		            {
                    	Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][World] = GetPlayerVirtualWorld(playerid);
						ShowListPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Bloquear/Desbloquear
		            case 12:
		            {
	                    ReverseEx(Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][Lock]);
						ShowListPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Cámaras
		            case 13:
		            {
	                    ReverseEx(Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][IsCameras]);
						ShowListPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Eliminar
		            case 14:
					{
						ShowPistaRemove(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
				}
			}
			else
			{
				ShowListPistas(playerid);
			}
		}
		// ShowPistaChangeName
		case 99:
		{
   		    if ( response == 1 )
		    {
			    if ( strlen(inputtext) > 2 )
			    {
			    	format(Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][NamePista], 35, "%s", inputtext);
					ShowListPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
				}
				else
				{
                    ShowPistaChangeName(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					SendInfoMessage(playerid, 0, "1429", "El nombre de la pista debe ser mayor de 2 caracteres!");
				}
		    }
		    else
		    {
				ShowListPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
			}
		}
		// ShowPistaShowCheckPoints
		case 100:
		{
   		    if ( response == 1 )
		    {
		        PlayersDataOnline[playerid][SaveAfterAgenda][1] = listitem;
				ShowPistaShowCheckPointsOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
		    }
		    else
		    {
				ShowListPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
			}
		}
		// ShowPistaShowPosPlayers
		case 101:
		{
   		    if ( response == 1 )
		    {
		        PlayersDataOnline[playerid][SaveAfterAgenda][1] = listitem;
				ShowPistaShowPosPlayersOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
		    }
		    else
		    {
				ShowListPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
			}
		}
		// ShowPistaShowCheckPointsOptions
		case 102:
		{
   		    if ( response == 1 )
		    {
		        switch ( listitem )
		        {
		            // INFO NADA
					case 0:
					{
						ShowPistaShowCheckPointsOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
					}
					// Ir
					case 1:
					{
					    if ( PistasPos[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Valid] )
					    {
						    if ( !IsPlayerInAnyVehicle(playerid) )
						    {
								SetPlayerPos(playerid, PistasPos[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Xpos], PistasPos[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Ypos], PistasPos[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Zpos]);
								SetPlayerInteriorEx(playerid, Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][Interior]);
								SetPlayerVirtualWorldEx(playerid, Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][World]);
							}
							else
							{
							    new VehicleID = GetPlayerVehicleID(playerid);
								SetVehiclePos(VehicleID, PistasPos[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Xpos], PistasPos[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Ypos], PistasPos[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Zpos]);
								LinkVehicleToInteriorEx(VehicleID, Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][Interior]);
								SetVehicleVirtualWorldEx(VehicleID, Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][World]);

								SetPlayerInteriorEx(playerid, Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][Interior]);
								SetPlayerVirtualWorldEx(playerid, Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][World]);
							}
						    ShowPistaShowCheckPoints(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
						}
						else
						{
							SendInfoMessage(playerid, 0, "1430", "El CheckPoint selecionado no existe");
		                    ShowPistaShowCheckPoints(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
						}
					}
					// Editar
					case 2:
					{
					    CreatePistaPos(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
						UpdateTagPistaPos(PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]); /// Aquí :D
						ShowPistaShowCheckPointsOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
					}
					// Borrar
					case 3:
					{
                        CleanPistaPos(PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
						UpdateTagPistaPos(PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
						ShowPistaShowCheckPoints(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Mover
					case 4:
					{
						ShowPistaShowCheckPointsOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
					}
		        }
		    }
		    else
		    {
				ShowPistaShowCheckPoints(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
			}
		}
		// ShowPistaShowPosPlayersOptions
		case 103:
		{
   		    if ( response == 1 )
		    {
		        switch ( listitem )
		        {
		            // INFO NADA
					case 0:
					{
						ShowPistaShowPosPlayersOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
					}
					// Ir
					case 1:
					{
					    if ( PistasPosPlayers[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Valid] )
					    {
						    if ( !IsPlayerInAnyVehicle(playerid) )
						    {
								SetPlayerPos(playerid, PistasPosPlayers[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Xpos], PistasPosPlayers[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Ypos], PistasPosPlayers[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Zpos]);
								SetPlayerFacingAngle(playerid, PistasPosPlayers[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][ZZpos]);
								SetPlayerInteriorEx(playerid, Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][Interior]);
								SetPlayerVirtualWorldEx(playerid, Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][World]);
							}
							else
							{
							    new VehicleID = GetPlayerVehicleID(playerid);
								SetVehiclePos(VehicleID, PistasPosPlayers[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Xpos], PistasPosPlayers[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Ypos], PistasPosPlayers[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Zpos]);
								SetVehicleZAngle(VehicleID, PistasPosPlayers[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][ZZpos]);
								LinkVehicleToInteriorEx(VehicleID, Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][Interior]);
								SetVehicleVirtualWorldEx(VehicleID, Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][World]);

								SetPlayerInteriorEx(playerid, Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][Interior]);
								SetPlayerVirtualWorldEx(playerid, Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][World]);
							}
						    ShowPistaShowPosPlayers(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
						}
						else
						{
							SendInfoMessage(playerid, 0, "1431", "El CarPointExit seleccionado no existe");
		                    ShowPistaShowPosPlayers(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
						}
					}
					// Editar
					case 2:
					{
					    CreatePistaPlayers(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
						UpdateTagPistaPlayers(PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
						ShowPistaShowPosPlayersOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
					}
					// Borrar
					case 3:
					{
                        CleanPistaPosPlayers(PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
						UpdateTagPistaPlayers(PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
						ShowPistaShowPosPlayers(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Mover
					case 4:
					{
						ShowPistaShowPosPlayersOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
					}
		        }
		    }
		    else
		    {
				ShowPistaShowPosPlayers(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
			}
		}
		// ShowPistaRemove
		case 104:
		{
   		    if ( response == 1 )
		    {
				ShowPlayerDialogEx(playerid,94,DIALOG_STYLE_MSGBOX,"{00A5FF}Editor de Pistas - Pista Elimnada", "{E6E6E6}Pista eliminada correctamente", "Aceptar", "Inicio");
		    	CleanPista(PlayersDataOnline[playerid][SaveAfterAgenda][0]);
		    }
		    else
		    {
				ShowListPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
			}
		}
		// ShowPistaValidar
		case 105:
		{
			ShowListPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
		}
		// ShowPistaShowCarPointsExit
		case 106:
		{
   		    if ( response == 1 )
		    {
		        PlayersDataOnline[playerid][SaveAfterAgenda][1] = listitem;
				ShowPistaCarPointsExitOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
		    }
		    else
		    {
				ShowListPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
			}
		}
		// ShowPistaCarPointsExitOptions
		case 107:
		{
   		    if ( response == 1 )
		    {
		        switch ( listitem )
		        {
		            // INFO NADA
					case 0:
					{
						ShowPistaCarPointsExitOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
					}
					// Ir
					case 1:
					{
					    if ( PistasCarPointsExit[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Valid] )
					    {
						    if ( !IsPlayerInAnyVehicle(playerid) )
						    {
								SetPlayerPos(playerid, PistasCarPointsExit[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Xpos], PistasCarPointsExit[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Ypos], PistasCarPointsExit[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Zpos]);
								SetPlayerFacingAngle(playerid, PistasCarPointsExit[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][ZZpos]);
								SetPlayerInteriorEx(playerid, Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][Interior]);
								SetPlayerVirtualWorldEx(playerid, Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][World]);
							}
							else
							{
							    new VehicleID = GetPlayerVehicleID(playerid);
								SetVehiclePos(VehicleID, PistasCarPointsExit[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Xpos], PistasCarPointsExit[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Ypos], PistasCarPointsExit[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Zpos]);
								SetVehicleZAngle(VehicleID, PistasCarPointsExit[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][ZZpos]);
								LinkVehicleToInteriorEx(VehicleID, Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][Interior]);
								SetVehicleVirtualWorldEx(VehicleID, Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][World]);

								SetPlayerInteriorEx(playerid, Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][Interior]);
								SetPlayerVirtualWorldEx(playerid, Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][World]);
							}
						    ShowPistaShowCarPointsExit(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
						}
						else
						{
							SendInfoMessage(playerid, 0, "1316", "El CarPointExit seleccionado no existe");
		                    ShowPistaShowCarPointsExit(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
						}
					}
					// Editar
					case 2:
					{
					    CreatePistaCarPoints(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
						UpdateTagPistaCarPointsExit(PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
						ShowPistaCarPointsExitOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
					}
					// Borrar
					case 3:
					{
                        CleanPistaCarPointsExit(PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
						UpdateTagPistaCarPointsExit(PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
						ShowPistaShowCarPointsExit(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Mover
					case 4:
					{
						ShowPistaCarPointsExitOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
					}
		        }
		    }
		    else
		    {
				ShowPistaShowCarPointsExit(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
			}
		}
		// Errores y Informaciones de ShowPistas
		case 108:
		{
			if ( response == 0 )
		    {
				ShowPistas(playerid);
			}
		}
		// ShowPistas
		case 109:
		{
			if ( response == 1 )
		    {
		        PlayersDataOnline[playerid][SaveAfterAgenda][0] = PlayersDataOnline[playerid][SaveAfterAgenda][listitem];
				ShowPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
			}
		}
		// ShowPistasOptions
		case 110:
		{
			if ( response == 1 )
		    {
		        switch ( listitem )
		        {
		            // INFO NADA
					case 0:
					{
						ShowPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Vueltas
					case 1:
					{
						ShowPistasSelectVueltas(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Competidores
					case 2:
					{
                         ShowPistasSelectCompetidores(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Guardar Record
					case 3:
					{
						ReverseEx(Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][SaveRecord]);
						ShowPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Conteo
					case 4:
					{
						ShowPistasSelectConteo(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Tiempo antes de empezar
					case 5:
					{
						ShowPistasSelectTiempoAntes(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Radio Checkpoints
					case 6:
					{
						ShowPistasSelectRadio(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Tipo
					case 7:
					{
						ReverseEx(Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][Tipo]);
						ShowPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Estado
					case 8:
					{
						ReverseEx(Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][EstadoR]);
						ShowPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Coches Permitidos
					case 9:
					{
						ShowPistasCochesPermitidos(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Al Revés
					case 10:
					{

						ReverseEx(Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][AlReves]);
						ShowPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Indestructible
					case 11:
					{

						ReverseEx(Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][Repair]);
						ShowPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// CheckPointFinal
					case 12:
					{
						ShowPistaSelectCheckPoint(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Unir un Jugador
					case 13:
					{
						ShowPistasUnirJugador(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Ver Jugadores
					case 14:
					{
						ShowPistasVerJugadores(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Detener Carrera!
					case 15:
					{
					    new PistasDialogName[MAX_TEXT_CHAT];
					    format(PistasDialogName, sizeof(PistasDialogName), "{00A5FF}Pistas - %s (Error)", Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][NamePista]);
						if ( CancelRace(PlayersDataOnline[playerid][SaveAfterAgenda][0]) )
						{
							ShowPlayerDialogEx(playerid,120,DIALOG_STYLE_MSGBOX,PistasDialogName, "{00F50A}Carrera detenida con éxito!", "Aceptar", "Volver");

						    new PistasDialogText[MAX_TEXT_CHAT];
						    format(PistasDialogText, sizeof(PistasDialogText), "{00A5FF}La carrera ha sido detenida por un organizador.");
							SendMessageToRaceChat(PlayersDataOnline[playerid][SaveAfterAgenda][0], PistasDialogText, true);
						}
						else
						{
							ShowPlayerDialogEx(playerid,120,DIALOG_STYLE_MSGBOX,PistasDialogName, "{F50000}Esta carrera no ha iniciado, no necesita detenerla", "Aceptar", "Volver");
						}
					}
					// Comenzar Carrera!
					case 16:
					{
						ShowPistasComenzar(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
				}
			}
			else
			{
			    ShowPistas(playerid);
			}
		}
		// ShowPistasSelectVueltas
		case 111:
		{
			if ( response == 1 )
		    {
         		Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][Vueltas] = listitem + 1;
		    }
			ShowPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
	    }
		// ShowPistasSelectCompetidores
		case 112:
		{
			if ( response == 1 )
		    {
         		Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][Competidores] = listitem;
		    }
			ShowPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
	    }
		// ShowPistasSelectConteo
		case 113:
		{
			if ( response == 1 )
		    {
         		Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][ConteoR] = listitem + 1;
		    }
			ShowPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
	    }
		// ShowPistasSelectTiempoAntes
		case 114:
		{
			if ( response == 1 )
		    {
         		Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][TiempoAntes] = (listitem + 1)* 5;
		    }
			ShowPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
	    }
		// ShowPistasCochesPermitidos
		case 115:
		{
			if ( response == 1 )
		    {
         		Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][CochesP] = listitem;
		    }
			ShowPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
	    }
		// ShowPistasVerJugadores
		case 116:
		{
			if ( response == 1 )
		    {
         		PlayersDataOnline[playerid][SaveAfterAgenda][1] = PlayersDataOnline[playerid][SaveAfterAgenda][listitem];
		        PlayersDataOnline[playerid][SaveAfterAgenda][0] = PlayersDataOnline[playerid][SaveAfterAgenda][59];
         		ShowPistasVerJugadoresOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
		    }
		    else
		    {
		        PlayersDataOnline[playerid][SaveAfterAgenda][0] = PlayersDataOnline[playerid][SaveAfterAgenda][59];
				ShowPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
			}
	    }
		// ShowPistaPlayerPublics
		case 117:
		{
			if ( response == 1 )
		    {
	          	PlayersDataOnline[playerid][SaveAfterAgenda][0] = PlayersDataOnline[playerid][SaveAfterAgenda][listitem];
			    new PistaNear = GetNextCheckPoint(PlayersDataOnline[playerid][SaveAfterAgenda][0], Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][MaxPP], false);
				if( IsPlayerInRangeOfPoint(playerid, 150.0,
						 PistasPos[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PistaNear][Xpos],
						 PistasPos[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PistaNear][Ypos],
						 PistasPos[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PistaNear][Zpos]) )
				{
			        switch ( AddPlayerToRace(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], false) )
			        {
			            // Ya inicio o canceló
			            case 0:
			            {
							ShowPlayerDialogEx(playerid,999,DIALOG_STYLE_MSGBOX,"{00A5FF}Carreras - Error", "{E6E6E6}La carrera a la que deseabas unirte, ya comenzó!\n\n{E6E6E6}Demasiado tarde...", "Ok", "");
						}
			            // Es privada la carrera
			            case 1:
			            {
							ShowPlayerDialogEx(playerid,999,DIALOG_STYLE_MSGBOX,"{00A5FF}Carreras - Error", "{E6E6E6}La carrera que deseabas unirte, la cambiarón a privada!", "Ok", "");
						}
						// No está en un coche
			            case 2:
			            {
							ShowPlayerDialogEx(playerid,999,DIALOG_STYLE_MSGBOX,"{00A5FF}Carreras - Error", "{E6E6E6}Suba a su coche para poder unirte a la carrera!", "Ok", "");
						}
						// No tiene el modelo adecuado para la carrera
			            case 3:
			            {
							ShowPlayerDialogEx(playerid,999,DIALOG_STYLE_MSGBOX,"{00A5FF}Carreras - Error", "{E6E6E6}El modelo de su vehículo no está permitido en la carrera", "Ok", "");
						}
						// La carrera alcanzó el número máximo de jugadores
			            case 4:
			            {
							ShowPlayerDialogEx(playerid,999,DIALOG_STYLE_MSGBOX,"{00A5FF}Carreras - Error", "{E6E6E6}La carrera se ha llenado de concursantes!\n\n{E6E6E6}Demasiado tarde...", "Ok", "");
						}
						// Máximo de jugadores alcanzados
						case 6:
						{
							ShowPlayerDialogEx(playerid,999,DIALOG_STYLE_MSGBOX,"{00A5FF}Carreras - Error", "{E6E6E6}La carrera se ha llenado de concursantes!\n\n{E6E6E6}Demasiado tarde...", "Ok", "");
						}
						// Ya se encuentra en una carrera
						case 7:
						{
							ShowPlayerDialogEx(playerid,999,DIALOG_STYLE_MSGBOX,"{00A5FF}Carreras - Error", "{E6E6E6}Ya te encuentras en una cerrara, debes finalizar esta para ingresar en otra", "Ok", "");
						}
						// El jugador no se encuentra en el puesto de conductor
						case 8:
						{
							ShowPlayerDialogEx(playerid,999,DIALOG_STYLE_MSGBOX,"{00A5FF}Carreras - Error", "{E6E6E6}No te encuentras en el puesto de conductor", "Ok", "");
						}
						// Vehículo usado
						case 9:
						{
							ShowPlayerDialogEx(playerid,999,DIALOG_STYLE_MSGBOX,"{00A5FF}Carreras - Error", "{E6E6E6}Éste vehículo se encuentra usado por una carrera", "Ok", "");
						}
						// Ok, agregado correctamente
			            case 5:
			            {
						    new PistasDialogName[MAX_TEXT_CHAT];
						    format(PistasDialogName, sizeof(PistasDialogName), "{00A5FF}Carreras - %s (Unido)", Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][NamePista]);
						    new PistasDialogText[MAX_TEXT_CHAT];
						    format(PistasDialogText, sizeof(PistasDialogText), "{00F50A}Te has unido con éxito a la carrera!");
							ShowPlayerDialogEx(playerid,999,DIALOG_STYLE_MSGBOX,PistasDialogName, PistasDialogText, "Ok", "");
						    format(PistasDialogText, sizeof(PistasDialogText), "{00A5FF}%s{00F50A} se ha unido a la carrera.", PlayersDataOnline[playerid][NameOnlineFix]);
							SendMessageToRaceChat(PlayersDataOnline[playerid][SaveAfterAgenda][0], PistasDialogText, true);
						}
					}
                }
                else
                {
					ShowPlayerDialogEx(playerid,999,DIALOG_STYLE_MSGBOX,"{00A5FF}Carreras - Error", "{E6E6E6}No te encuentras cerca de la carrera!", "Ok", "");
				}
		    }
	    }
		// ShowPistasUnirJugador
		case 118:
		{
			if ( response == 1 )
		    {
			    if ( Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][Used] == RACE_STATE_ESPERANDO )
			    {
    				new PlayerIDAdd = strval(inputtext);
    				if ( IsPlayerConnected(PlayerIDAdd) )
    				{
    				    new PistaNear = GetNextCheckPoint(PlayersDataOnline[playerid][SaveAfterAgenda][0], Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][MaxPP], false);
						if( IsPlayerInRangeOfPoint(PlayerIDAdd, 150.0,
								 PistasPos[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PistaNear][Xpos],
								 PistasPos[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PistaNear][Ypos],
 								 PistasPos[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PistaNear][Zpos]) )
						{
						    if ( PlayersDataOnline[PlayerIDAdd][State] == 3 )
						    {
						        switch ( AddPlayerToRace(PlayerIDAdd, PlayersDataOnline[playerid][SaveAfterAgenda][0], true) )
						        {
						            // Ya inicio o canceló
						            case 0:
						            {


									}
						            // Es privada la carrera
						            case 1:
						            {

									}
									// No está en un coche
						            case 2:
						            {
										SendInfoMessage(playerid, 0, "1435", "El Jugador que desea agregar a la carrera no se encuentra en un vehículo.");
										ShowPistasUnirJugador(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
									}
									// No tiene el modelo adecuado para la carrera
						            case 3:
						            {
										SendInfoMessage(playerid, 0, "1436", "El Jugador que desea agregar a la carrera no tiene un modelo de coche aceptado por esta carrera.");
										ShowPistasUnirJugador(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
									}
									// La carrera alcanzó el número máximo de jugadores
						            case 4:
						            {
										SendInfoMessage(playerid, 0, "1437", "Esta pista ya alcanzó el máximo de jugadores.");
										ShowPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
									}
									// Carrera llena de jugadores
									case 6:
									{
										SendInfoMessage(playerid, 0, "1442", "Esta pista ya alcanzó el máximo de jugadores.");
										ShowPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
									}
									// Ya se encuentra en una carrera
									case 7:
									{
										SendInfoMessage(playerid, 0, "1443", "El jugador que deseas agregar a la carrera ya se encuentra en una.");
										ShowPistasUnirJugador(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
									}
									// El jugador no se encuentra en el puesto de conductor
									case 8:
									{
										SendInfoMessage(playerid, 0, "1448", "El jugador no se encuentra en el puesto de conductor.");
										ShowPistasUnirJugador(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
									}
									// Vehículo usado
									case 9:
									{
										SendInfoMessage(playerid, 0, "1447", "El coche en el que está el jugador se encuentra en uso para una carrera");
										ShowPistasUnirJugador(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
									}
									// Ok, agregado correctamente
						            case 5:
						            {
									    new PistasDialogName[MAX_TEXT_CHAT];
									    format(PistasDialogName, sizeof(PistasDialogName), "{00A5FF}Pistas - %s (Agregado)", Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][NamePista]);
									    new PistasDialogText[MAX_TEXT_CHAT];
									    if ( PlayerIDAdd != playerid )
									    {
										    format(PistasDialogText, sizeof(PistasDialogText), "{00F50A}Has agregado a {F5FF00}%s[%i]{00F50A} con éxito a la carrera.", PlayersDataOnline[PlayerIDAdd][NameOnlineFix], PlayerIDAdd);
											ShowPlayerDialogEx(playerid,120,DIALOG_STYLE_MSGBOX,PistasDialogName, PistasDialogText, "Aceptar", "Volver");
										    format(PistasDialogText, sizeof(PistasDialogText), "{00F50A}{F5FF00}%s{00F50A} te ha agregado a una carrera.", PlayersDataOnline[playerid][NameOnlineFix]);
											ShowPlayerDialogEx(PlayerIDAdd,999,DIALOG_STYLE_MSGBOX,PistasDialogName, PistasDialogText, "Ok", "");
										}
										else
										{

											ShowPlayerDialogEx(playerid,120,DIALOG_STYLE_MSGBOX,PistasDialogName, "{00F50A}Te has agregado a la carrera con éxito", "Aceptar", "Volver");
										}
									    format(PistasDialogText, sizeof(PistasDialogText), "{00A5FF}%s{00F50A} ha sido agregado a la carrera por {F5FF00}%s.", PlayersDataOnline[PlayerIDAdd][NameOnlineFix], PlayersDataOnline[playerid][NameOnlineFix]);
										SendMessageToRaceChat(PlayersDataOnline[playerid][SaveAfterAgenda][0], PistasDialogText, true);
									}
								}
	                    	}
	                    	else
	                    	{
								SendInfoMessage(playerid, 0, "1438", "El Jugador que desea agregar a la carrera no se encuentra logueado.");
								ShowPistasUnirJugador(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
							}
	                    }
	                    else
	                    {
							SendInfoMessage(playerid, 0, "1439", "El Jugador que desea agregar a la carrera no se encuentra cerca de la misma.");
							ShowPistasUnirJugador(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1440", "El Jugador que desea agregar a la carrera no se encuentra conectado.");
						ShowPistasUnirJugador(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
				}
				else
				{
					ShowPlayerDialogEx(playerid,108,DIALOG_STYLE_MSGBOX,"{00A5FF}Pistas - Error", "{F50000}La pista actual ya no acepta más jugadores", "Aceptar", "Volver");
				}
		    }
		    else
		    {
				ShowPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
			}
	    }
		// ShowPistasVerJugadoresOptions
		case 119:
		{
			if ( response == 1 )
		    {
		        switch ( listitem )
		        {
					// Enviar un mensaje
		            case 0:
		            {
			            ShowPistasVerJugadoresOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
					}
					// Expulsar
		            case 1:
		            {
		                if ( IsPlayerConnected(PistasPosPlayers[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][PlayerIDR]) )
		                {
						    new PistasDialogName[MAX_TEXT_CHAT];
						    new PistasDialogText[MAX_TEXT_CHAT];
						    format(PistasDialogName, sizeof(PistasDialogName), "{00A5FF}Pistas - %s (Expulsado)", Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][NamePista]);
							if ( PistasPosPlayers[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][PlayerIDR] != -1)
							{
								if ( PistasPosPlayers[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][PlayerIDR] != playerid )
								{
								    format(PistasDialogText, sizeof(PistasDialogText), "{F50000}Usted fue expulsado de la carrera por {F5FF00}%s[%i] {F50000}.", PlayersDataOnline[playerid][NameOnlineFix], playerid);
									ShowPlayerDialogEx(PistasPosPlayers[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][PlayerIDR],999,DIALOG_STYLE_MSGBOX,PistasDialogName, PistasDialogText, "Aceptar", "Volver");
								    format(PistasDialogText, sizeof(PistasDialogText), "{00F50A}El jugador {F5FF00}%s[%i] {00F50A}fue expulsado con éxito de la carrera.", PlayersDataOnline[PistasPosPlayers[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][PlayerIDR]][NameOnlineFix], PistasPosPlayers[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][PlayerIDR]);
								}
								else
								{
								    format(PistasDialogText, sizeof(PistasDialogText), "{00F50A}Te has salido de la carrera con éxito!");
								}
								ShowPlayerDialogEx(playerid,120,DIALOG_STYLE_MSGBOX,PistasDialogName, PistasDialogText, "Aceptar", "Volver");
								format(PistasDialogText, sizeof(PistasDialogText), "{F50000}El jugador {00F50A}%s {F50000}fue expulsado de la carrera por {F5FF00}%s.",
								PlayersDataOnline[PistasPosPlayers[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][PlayerIDR]][NameOnlineFix], PlayersDataOnline[playerid][NameOnlineFix]);
								SendMessageToRaceChat(PlayersDataOnline[playerid][SaveAfterAgenda][0], PistasDialogText, true);
								RemovePlayerToRace(PistasPosPlayers[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][PlayerIDR], true, true, STATE_RACE_EXIT_EXPULSADO);
							}
							else
							{
							    format(PistasDialogText, sizeof(PistasDialogText), "{F50000}El jugador {F5FF00}%s[%i] {F50000} ya no se encuentra en la carrera.", PlayersDataOnline[PistasPosPlayers[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][PlayerIDR]][NameOnlineFix], PistasPosPlayers[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][PlayerIDR]);
								ShowPlayerDialogEx(playerid,120,DIALOG_STYLE_MSGBOX,PistasDialogName, PistasDialogText, "Aceptar", "Volver");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1441", "El Jugador que desea expulsar de la carrera se ha desconectado.");
						    ShowPistasVerJugadores(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
						}
					}
				}
		    }
		    else
		    {
			    ShowPistasVerJugadores(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
			}
	    }
		// Errores y Informaciones de ShowPistas II
  		case 120:
		{
			if ( response == 0 )
		    {
				ShowPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
			}
		}
		// ShowPistaSelectCheckPoint
		case 121:
		{
			if ( response == 1 )
		    {
     			Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][59]][CheckPointFinal] = PlayersDataOnline[playerid][SaveAfterAgenda][listitem];
	    	}
	    	PlayersDataOnline[playerid][SaveAfterAgenda][0] = PlayersDataOnline[playerid][SaveAfterAgenda][59];
			ShowPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
		}
		// ShowPistasSelectRadio
		case 122:
		{
			if ( response == 1 )
		    {
         		Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][Radio] = (listitem + 1)* 2;
		    }
			ShowPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
	    }
		// ShowPistaShowCam
		case 123:
		{
   		    if ( response == 1 )
		    {
		        PlayersDataOnline[playerid][SaveAfterAgenda][1] = listitem;
				ShowPistaCamOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
		    }
		    else
		    {
				ShowListPistasOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
			}
		}
		// ShowPistaCamOptions
		case 124:
		{
   		    if ( response == 1 )
		    {
		        if ( !Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][Used] )
		        {
			        switch ( listitem )
			        {
			            // INFO NADA
						case 0:
						{
							ShowPistaCamOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
						}
						// Ir
						case 1:
						{
						    if ( PistasCameras[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Valid] )
						    {
							    if ( !IsPlayerInAnyVehicle(playerid) )
							    {
									SetPlayerPos(playerid, PistasCameras[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Xpos], PistasCameras[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Ypos], PistasCameras[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Zpos]);
									SetPlayerInteriorEx(playerid, Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][Interior]);
									SetPlayerVirtualWorldEx(playerid, Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][World]);
								}
								else
								{
								    new VehicleID = GetPlayerVehicleID(playerid);
									SetVehiclePos(VehicleID, PistasCameras[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Xpos], PistasCameras[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Ypos], PistasCameras[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Zpos]);
									LinkVehicleToInteriorEx(VehicleID, Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][Interior]);
									SetVehicleVirtualWorldEx(VehicleID, Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][World]);

									SetPlayerInteriorEx(playerid, Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][Interior]);
									SetPlayerVirtualWorldEx(playerid, Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][World]);
								}
							    ShowPistaShowCam(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
							}
							else
							{
								SendInfoMessage(playerid, 0, "520", "El CameraPoint seleccionado no existe");
			                    ShowPistaShowCam(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
							}
						}
						// Editar
						case 2:
						{
						    CreatePistaCameras(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
							UpdateTagPistaCameras(PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
							ShowPistaCamOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
						}
						// Velocidad
						case 3:
						{
                        	ShowPistasSelectVelocidad(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
						}
						// Borrar
						case 4:
						{
	                        CleanPistaCameras(PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
							UpdateTagPistaCameras(PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
							ShowPistaShowCam(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
						}
						// Mover
						case 5:
						{
							ShowPistaCamOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
						}
			        }
		        }
				else
				{
					ShowPlayerDialogEx(playerid,94,DIALOG_STYLE_MSGBOX,"{00A5FF}Editor de Pistas - Error", "{E6E6E6}Esta pista está siendo usada en una carrera,\ndebe detenerla antes de seguir editandola", "Aceptar", "Volver");
				}
		    }
		    else
		    {
				ShowPistaShowCam(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
			}
		}
		// ShowPistasSelectVelocidad
		case 125:
		{
   		    if ( response == 1 )
		    {
		        switch ( listitem )
		        {
		            // 0.1
					case 0:
					{
						PistasCameras[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Vel] = 0.1;
						UpdateTagPistaCameras(PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
						ShowPistaCamOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
					}
		            // 0.01
					case 1:
					{
						PistasCameras[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Vel] = 0.01;
						UpdateTagPistaCameras(PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
						ShowPistaCamOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
					}
		            // 0.001
					case 2:
					{
						PistasCameras[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Vel] = 0.001;
						UpdateTagPistaCameras(PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
						ShowPistaCamOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
					}
		            // A gusto
					case 3:
					{
					    new PistasDialogName[MAX_TEXT_CHAT];
					    format(PistasDialogName, sizeof(PistasDialogName), "{00A5FF}Editor de Pistas - %s (Velocidad)", Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][NamePista]);
						ShowPlayerDialogEx(playerid,126,DIALOG_STYLE_INPUT, PistasDialogName, "{F0F0F0}Ingrese la nueva velocidad que desea para este CameraPoint", "Modificar", "Volver");
					}
				}
			}
			else
			{
				ShowPistaCamOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
			}
		}
		// Escoger Velocidad CamerasPoints
		case 126:
		{
   		    if ( response == 1 )
		    {
		        if ( floatstr(inputtext) > 0.0 && floatstr(inputtext) < 10.0 )
		        {
			        PistasCameras[PlayersDataOnline[playerid][SaveAfterAgenda][0]][PlayersDataOnline[playerid][SaveAfterAgenda][1]][Vel] = floatstr(inputtext);
					UpdateTagPistaCameras(PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
					ShowPistasSelectVelocidad(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
				}
				else
				{
					SendInfoMessage(playerid, 0, "1450", "La velocidad debe ser mayor de 0.0 y menor de 10.0");
				    new PistasDialogName[MAX_TEXT_CHAT];
				    format(PistasDialogName, sizeof(PistasDialogName), "{00A5FF}Editor de Pistas - %s (Velocidad)", Pistas[PlayersDataOnline[playerid][SaveAfterAgenda][0]][NamePista]);
					ShowPlayerDialogEx(playerid,126,DIALOG_STYLE_LIST, PistasDialogName, "{F0F0F0}Ingrese la nueva velocidad que desea para este CameraPoint", "Modificar", "Volver");
				}
		    }
		    else
		    {
		        ShowPistasSelectVelocidad(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0], PlayersDataOnline[playerid][SaveAfterAgenda][1]);
			}
		}
		// ShowHomeAgendaOptions
		case 127:
		{
   		    if ( response == 1 )
		    {
		        switch ( listitem )
		        {
		            // Llamar
					case 0:
					{
		                if ( !SetPlayerCall(playerid, AgendaData[playerid][PlayersDataOnline[playerid][SaveAfterAgenda][0]][NumberC]) )
		                {
							ShowHomeAgendaOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
						}
					}
					// Enviar SMS
					case 1:
					{
						ShowSendSMSAgenda(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
					}
					// Bloquear Desbloquear
					case 2:
					{
                        ReverseEx(AgendaData[playerid][PlayersDataOnline[playerid][SaveAfterAgenda][0]][IsBlackList]);
                        ShowHomeAgendaOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);

					}
					// Elimniar
					case 3:
					{
						RemoveNumberToAgenda(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
						ShowContactosAgenda(playerid);
					}
				}
			}
			else
			{
				ShowContactosAgenda(playerid);
			}
		}
		// Enviar SMS (Dialog)
		case 128:
		{
   		    if ( response == 1 )
		    {
			    if ( SendSMS(playerid, AgendaData[playerid][PlayersDataOnline[playerid][SaveAfterAgenda][0]][NumberC], inputtext) )
			    {
			        ShowHomeAgendaOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
				}
				else
				{
				    ShowSendSMSAgenda(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
				}
			}
			else
			{
		        ShowHomeAgendaOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
			}
	    }
		// ShowBuscarAgenda
		case 129:
		{
   		    if ( response == 1 )
		    {
		        if ( strlen(inputtext) )
		        {
	        		ShowBuscarResultAgenda(playerid, inputtext);
        		}
        		else
        		{
					SendInfoMessage(playerid, 0, "1452", "El contenido de la busqueda debe ser mínimo 1 caracter!");
			        ShowBuscarAgenda(playerid);
				}
        	}
        	else
        	{
	        	ShowHomeAgenda(playerid);
			}
	    }
		// ShowBuscarResultAgenda
		case 130:
		{
   		    if ( response == 1 )
		    {
		        PlayersDataOnline[playerid][SaveAfterAgenda][0] = PlayersDataOnline[playerid][SaveAfterAgenda][listitem];
	        	ShowHomeAgendaOptions(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][0]);
        	}
        	else
        	{
	        	ShowHomeAgenda(playerid);
			}
	    }
		// ShowMenuDescription
		case 131:
		{
   		    if ( response == 1 )
		    {
		        switch ( listitem )
		        {
		            // Estado Estática
					case 0:
					{
                        ShowMenuDescription(playerid);
					}
		            // Estado Personalizada
					case 1:
					{
                        ShowMenuDescription(playerid);
					}
		            // Usando
		            case 2:
		            {
		                if ( GetPlayerScore(playerid) >= 10 )
		                {
							ReverseEx(PlayersData[playerid][DescriptionSelect]);
							AddPlayerDescription(playerid, true);
						}
						else
						{
							SendInfoMessage(playerid, 0, "1454", "No puedes cambiar a modo personalizado siendo menor de nivel 10.");
						}
                        ShowMenuDescription(playerid);
					}
		            // Cambiar Estática
					case 3:
					{
						ShowMenuDescriptionChange(playerid);
					}
		            // Cambiar Personalizada
					case 4:
					{
					    if ( GetPlayerScore(playerid) >= 10 )
					    {
							ShowMenuDescriptionChangePer(playerid);
						}
						else
						{
							SendInfoMessage(playerid, 0, "1453", "Tienes que ser mayor o igual que nivel 10 para utilizar descripciones personalizadas.");
						}
					}
		            // Habilitada/Deshabilitada
					case 5:
					{
						ReverseEx(PlayersData[playerid][EnableDescription]);
						if ( PlayersData[playerid][EnableDescription] )
						{
						    AddPlayerDescription(playerid, false);
						}
						else
						{
							RemovePlayerDescription(playerid, true, true);
						}
						ShowMenuDescription(playerid);
					}
				}
        	}
	    }
		// ShowMenuDescriptionChange
		case 132:
		{
   		    if ( response == 1 )
		    {
	        	PlayersData[playerid][Description] = listitem;
				AddPlayerDescription(playerid, true);
		    }
			ShowMenuDescription(playerid);
		}
		// ShowMenuDescriptionChangePer
		case 133:
		{
   		    if ( response == 1 )
		    {
		        switch ( listitem )
		        {
		            // Color
					case 0:
					{
                        ShowMenuDescriptionChangeColors(playerid);
					}
		            // Texto
					case 1:
					{
                        ShowMenuDescriptionChangeText(playerid);
					}
				}
			}
			else
			{
				ShowMenuDescription(playerid);
			}
		}
		// ShowMenuDescriptionChangeColors
		case 134:
		{
   		    if ( response == 1 )
		    {
		        PlayersData[playerid][DescriptionColor] = listitem;
				AddPlayerDescription(playerid, true);
		    }
		    ShowMenuDescriptionChangePer(playerid);

		}
		// ShowMenuDescriptionChangeText
		case 135:
		{
   		    if ( response == 1 )
		    {
		        if ( strlen(inputtext) > 2 )
		        {
		            if ( IsValidStringServerOther(playerid, inputtext) )
		            {
						format(PlayersData[playerid][DescriptionString], MAX_TEXT_DESCRIPTION, inputtext);
						AddPlayerDescription(playerid, true);
				    	ShowMenuDescriptionChangePer(playerid);
					}
					else
					{
				    	ShowMenuDescriptionChangeText(playerid);
					}
				}
				else
				{
					SendInfoMessage(playerid, 0, "1455", "El estado debe ser mayor de dos caracteres!");
			    	ShowMenuDescriptionChangeText(playerid);
		    	}
		    }
		    else
		    {
		    	ShowMenuDescriptionChangePer(playerid);
	    	}
		}
		// ShowDudasDialog
		case 136:
		{
   		    if ( response == 1 )
		    {
			    if ( CanalDudas )
			    {
			        if ( strlen(inputtext) > 2 )
			        {
						new MsgDudaForAdmins[MAX_TEXT_CHAT];
						new MsgForUser[MAX_TEXT_CHAT];
						format(MsgForUser, sizeof(MsgForUser), "Enviaste una duda a la administración: %s", inputtext);
						format(MsgDudaForAdmins, sizeof(MsgDudaForAdmins), "[Dudas] %s[%i]: %s",PlayersDataOnline[playerid][NameOnlineFix], playerid,inputtext);
						SendInfoMessage(playerid, 2, "0", MsgForUser);
						for (new i = 0; i < MAX_PLAYERS; i++)
						{
							if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersData[i][Admin])
							{
							    SendClientMessage(i, COLOR_DUDAS, MsgDudaForAdmins);
							}
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1486", "Porfavor no deje el campo duda vacío!");
				    	ShowDudasDialog(playerid);
			    	}
				}
				else
				{
					SendInfoMessage(playerid, 0, "1487", "El canal /Duda se encuentra cerrado.");
				}
		  	}
		}
		// ShowAlarmas
		case 137:
		{
   		    if ( response == 1 )
		    {
		   	    if ( RobosInfo[PlayersDataOnline[playerid][SaveAfterAgenda][listitem]][BizzIDR] )
			    {
					SendInfoMessage(playerid, 2, "0", "Se ha marcado en el mapa el local donde suena la alarma.");
					SetPlayerCheckpoint(playerid, NegociosData[RobosInfo[PlayersDataOnline[playerid][SaveAfterAgenda][listitem]][BizzIDR]][PosOutX],
												  NegociosData[RobosInfo[PlayersDataOnline[playerid][SaveAfterAgenda][listitem]][BizzIDR]][PosOutY],
												  NegociosData[RobosInfo[PlayersDataOnline[playerid][SaveAfterAgenda][listitem]][BizzIDR]][PosOutZ], 1.0);
				}
				else
				{
					SendInfoMessage(playerid, 0, "1500", "Ya esa alarma no se encuentra desactivada!");
				}
		  	}
		}
		// Cerrar servidor
		case 138:
		{
   		    if ( response == 1 )
		    {
		        new ReasonClose[256];
		        if ( strlen(inputtext) > 0 )
				{
					format(ReasonClose, sizeof(ReasonClose), "{00A5FF}Razón por la que se cerró: {00F50A}%s", inputtext);
				}
				else
				{
					format(ReasonClose, sizeof(ReasonClose), "{00A5FF}Razón por la que se cerró: {00F50A}[No especificada]");
				}
				SendClientMessageToAll(COLOR_MESSAGES[2], "{F50000}ATENCIÓN: {00F50A}Hemos cerrado el servidor, {F50000}Recuerde visitar nuestro web site en: {00F50A}"WEBPAGE"!");
				SendClientMessageToAll(COLOR_MESSAGES[2], ReasonClose);
			   	SendClientMessageToAll(0x000000FF, " ");
				SendClientMessageToAll(COLOR_MESSAGES[2], "{E6E6E6}Saludos Cordiales,");
				SendClientMessageToAll(COLOR_MESSAGES[2], "{E6E6E6}Equipo de Un Player.");
				GameTextForAll( "~R~Servidor Cerrado...", 6000, 0);
				SendRconCommand("exit");
			}
		}
		// ShowCallSAMD
		case 139:
		{
   		    if ( response == 1 )
		    {
		        PlayersDataOnline[playerid][SaveAfterAgenda][51] = PlayersDataOnline[playerid][SaveAfterAgenda][listitem];
				if ( PlayersDataOnline[playerid][SaveAfterAgenda][50] )
				{
					ShowPlayerDialogEx(playerid,75,DIALOG_STYLE_LIST,"{00A5FF}Centro de Llamadas - LSMD", "{F0F0F0}Atender llamada\r\n{F0F0F0}Transferir a {F5FF00}-->> {00F50A}SFMD", "Seleccionar", "Volver");
				}
				else
				{
					ShowPlayerDialogEx(playerid,75,DIALOG_STYLE_LIST,"{00A5FF}Centro de Llamadas - SFMD", "{F0F0F0}Atender llamada\r\n{F0F0F0}Transferir a {F5FF00}-->> {00F50A}LSMD", "Seleccionar", "Volver");
				}
			}
		}
		// ShowCallSAMD
		case 140:
		{
   		    if ( response == 0 )
		    {
				ShowCallSAMD(playerid);
			}
		}
		// ShowStations
		case 141:
		{
   		    if ( response == 1 )
		    {
		        if ( PlayersData[playerid][IsPlayerInHouse] )
		        {
		            // Stop Music
					if (!listitem)
					{
					    HouseData[PlayersData[playerid][IsPlayerInHouse]][StationID] = -1;
					    StopMusicOnHouse(PlayersData[playerid][IsPlayerInHouse]);
						ShowStations(playerid, HouseData[PlayersData[playerid][IsPlayerInHouse]][StationID], true);
					}
					// Volumen
					else if ( listitem == 1 )
					{
					    ShowVolumenHouse(playerid);
					}
					// Ecualizador
					else if ( listitem == 2 )
					{
					    ShowEcualizadorHouse(playerid);
					}
					else
					{
					    HouseData[PlayersData[playerid][IsPlayerInHouse]][StationID] = listitem - 3;
					   	ChangeMusicOnHouse(PlayersData[playerid][IsPlayerInHouse]);
						ShowStations(playerid, HouseData[PlayersData[playerid][IsPlayerInHouse]][StationID], true);
					}
				}
				else
				{
					SendInfoMessage(playerid, 0, "1531", "Ya no te encuentras dentro de la casa!");
				}
			}
		}
		// ShowVolumenHouse // Casa
		case 142:
		{
   		    if ( response == 1 )
		    {
		        if ( PlayersData[playerid][IsPlayerInHouse] )
		        {
		            if ( listitem >= 0 && listitem <= 20 )
		            {
		            	HouseData[PlayersData[playerid][IsPlayerInHouse]][VolumenHouse] = (listitem + 1) * 5;
		            	ChangeVolumenOnHouse(PlayersData[playerid][IsPlayerInHouse]);
	            	}
	            	ShowVolumenHouse(playerid);
				}
				else
				{
					SendInfoMessage(playerid, 0, "1532", "Ya no te encuentras dentro de la casa!");
				}
			}
			else
			{
				ShowStations(playerid, HouseData[PlayersData[playerid][IsPlayerInHouse]][StationID], true);
			}
		}
		// ShowStations // Coche
		case 143:
		{
   		    if ( response == 1 )
		    {
		        if ( PlayersDataOnline[playerid][InCarId] )
		        {
		            // Stop Music
					if (!listitem)
					{
					    DataCars[PlayersDataOnline[playerid][InCarId]][StationID] = -1;
					    StopMusicOnVehicle(PlayersDataOnline[playerid][InCarId]);
						ShowStations(playerid, DataCars[PlayersDataOnline[playerid][InCarId]][StationID], false);
					}
					// Volumen
					else if ( listitem == 1 )
					{
					    ShowVolumenVehicle(playerid);
					}
					// Ecualizador
					else if ( listitem == 2 )
					{
					    ShowEcualizadorVehicle(playerid);
					}
					else
					{
					    DataCars[PlayersDataOnline[playerid][InCarId]][StationID] = listitem - 3;
					   	ChangeMusicOnVehicle(PlayersDataOnline[playerid][InCarId]);
						ShowStations(playerid, DataCars[PlayersDataOnline[playerid][InCarId]][StationID], false);
					}
				}
				else
				{
					SendInfoMessage(playerid, 0, "1533", "Suba al vehículo al asiento de conductor y luego use /Estéreo");
				}
			}
		}
		// ShowVolumenVehicle
		case 144:
		{
   		    if ( response == 1 )
		    {
		        if ( PlayersDataOnline[playerid][InCarId] )
		        {
		            if ( listitem >= 0 && listitem <= 20 )
		            {
		            	DataCars[PlayersDataOnline[playerid][InCarId]][VolumenVehicle] = (listitem + 1) * 5;
		            	ChangeVolumenOnVehicle(PlayersDataOnline[playerid][InCarId]);
	            	}
	            	ShowVolumenVehicle(playerid);
				}
				else
				{
					SendInfoMessage(playerid, 0, "1534", "Suba al vehículo al asiento de conductor y luego use /Estéreo");
				}
			}
			else
			{
				ShowStations(playerid, DataCars[PlayersDataOnline[playerid][InCarId]][StationID], false);
			}
		}
		// ShowEcualizadorHouse
		case 145:
		{
   		    if ( response == 1 )
		    {
		        if ( PlayersData[playerid][IsPlayerInHouse] )
		        {
		            if ( listitem >= 0 && listitem <= 8 )
		            {
		            	ReverseEx(HouseData[PlayersData[playerid][IsPlayerInHouse]][EcualizadorHouse][listitem]);
		            	Audio_RemoveAddFXForHouse(PlayersData[playerid][IsPlayerInHouse], listitem, HouseData[PlayersData[playerid][IsPlayerInHouse]][EcualizadorHouse][listitem]);
	            	}
	            	ShowEcualizadorHouse(playerid);
				}
				else
				{
					SendInfoMessage(playerid, 0, "1536", "Ya no te encuentras dentro de la casa!");
				}
			}
			else
			{
				ShowStations(playerid, HouseData[PlayersData[playerid][IsPlayerInHouse]][StationID], true);
			}
		}
		// ShowEcualizadorVehicle
		case 146:
		{
   		    if ( response == 1 )
		    {
		        if ( PlayersDataOnline[playerid][InCarId] )
		        {
		            if ( listitem >= 0 && listitem <= 8 )
		            {
		            	ReverseEx(DataCars[PlayersDataOnline[playerid][InCarId]][EcualizadorVehicle][listitem]);
		            	Audio_RemoveAddFXForVehicle(PlayersDataOnline[playerid][InCarId], listitem, DataCars[PlayersDataOnline[playerid][InCarId]][EcualizadorVehicle][listitem]);
	            	}
	            	ShowEcualizadorVehicle(playerid);
				}
				else
				{
					SendInfoMessage(playerid, 0, "1538", "Suba al vehículo al asiento de conductor y luego use /Estéreo");
				}
			}
			else
			{
				ShowStations(playerid, DataCars[PlayersDataOnline[playerid][InCarId]][StationID], false);
			}
		}
		// SetPlayerSelectedTypeHair || NextHairSelect
		case 147:
		{
		    if ( response == 1 )
		    {
                NextHairSelect(playerid);
			}
			else
			{
			    UpdateSpawnPlayer(playerid);
				PlayersDataOnline[playerid][StateDeath] = true;
			    SpawnPlayerEx(playerid);
				PlayersDataOnline[playerid][Spawn]      = true;
				TogglePlayerControllableEx(playerid, 1);
				SetSpawnInfoEx(playerid);
			}
		}
		// ShowObjectos
		case 148:
		{
		    if ( response == 1 )
		    {
		        PlayersDataOnline[playerid][SaveAfterAgenda][10] = PlayersDataOnline[playerid][SaveAfterAgenda][listitem];
				ShowObjetosOpciones(playerid);
			}
		}
		// ShowObjetosOpciones
		case 149:
		{
			if ( response == 1 )
			{
				switch ( listitem )
				{
				    // Dar
				    case 0:
				    {
				        ShowDarObjeto(playerid);
				    }
			        // Dejar
				    case 1:
				    {
				        ShowDejarObjeto(playerid);
				    }
				    // Tirar
				    case 2:
				    {
                        new MsgTirarObjetos[MAX_TEXT_CHAT];
						format(MsgTirarObjetos, sizeof(MsgTirarObjetos), "tira %s al suelo", ObjectsNames[GetTypeObjectEx(PlayersData[playerid][Objetos][PlayersDataOnline[playerid][SaveAfterAgenda][10]])]);
				        Acciones(playerid, 8, MsgTirarObjetos);
						RemoveObjectHoldToPlayer(playerid, -1, PlayersDataOnline[playerid][SaveAfterAgenda][10]);
						ShowObjectos(playerid);
				    }
				    // Sacar y Mostrar
				    case 3:
				    {
				        if ( !ObjectsVisibleOrInvisible[GetTypeObjectEx(PlayersData[playerid][Objetos][PlayersDataOnline[playerid][SaveAfterAgenda][10]])] )
				        {
				            if ( AllowForItSkin(PlayersData[playerid][Skin], GetTypeObjectEx(PlayersData[playerid][Objetos][PlayersDataOnline[playerid][SaveAfterAgenda][10]])) )
				            {
								ReverseEx(PlayersData[playerid][ObjetosVision][PlayersDataOnline[playerid][SaveAfterAgenda][10]]);
								if ( !PlayersData[playerid][ObjetosVision][PlayersDataOnline[playerid][SaveAfterAgenda][10]] )
								{
									SetObjectHoldToPlayer(playerid, PlayersData[playerid][Objetos][PlayersDataOnline[playerid][SaveAfterAgenda][10]], PlayersDataOnline[playerid][SaveAfterAgenda][10]);
								}
								else
								{
									RemovePlayerAttachedObject(playerid, PlayersDataOnline[playerid][SaveAfterAgenda][10]);
								}
							}
							else
							{
								SendInfoMessage(playerid, 0, "1563", "No puedes mostrar éste objeto con éste skin!");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "1549", "No puedes guardar ni sacar éste objeto!");
						}
						ShowObjetosOpciones(playerid);
				    }
				}
			}
			else
			{
			    ShowObjectos(playerid);
			}
		}
		// ShowDarObjeto
		case 150:
		{
			if ( response == 1 )
			{
			    new SaveIDGive = strval(inputtext);
			    if ( IsPlayerNear(playerid, SaveIDGive,
					 "1552",
					 "1553",
					 "1554",
					 "El jugador que le deseas dar éste objeto no se encuentra conectado",
					 "El jugador que le deseas dar éste objeto no se ha logueado",
					 "El jugador que le deseas dar éste objeto no se encuentra cerca de tí") )
			    {
				    new saveType = GetObjectByType(SaveIDGive, GetTypeObjectEx(PlayersData[playerid][Objetos][PlayersDataOnline[playerid][SaveAfterAgenda][10]]));
				    if ( saveType == -1 )
				    {
						if ( AddObjectHoldToPlayer(SaveIDGive, PlayersData[playerid][Objetos][PlayersDataOnline[playerid][SaveAfterAgenda][10]]) )
						{
							new MsgDarObjetoMe[MAX_TEXT_CHAT];
							new MsgDarObjetoYou[MAX_TEXT_CHAT];

					        format(MsgDarObjetoMe, sizeof(MsgDarObjetoMe), "Le has dado %s a %s",
					        ObjectsNames[GetTypeObjectEx(PlayersData[playerid][Objetos][PlayersDataOnline[playerid][SaveAfterAgenda][10]])],
							PlayersDataOnline[SaveIDGive][NameOnlineFix]);

					        format(MsgDarObjetoYou, sizeof(MsgDarObjetoYou), "%s te ha dado %s",
							PlayersDataOnline[playerid][NameOnlineFix],
					        ObjectsNames[GetTypeObjectEx(PlayersData[playerid][Objetos][PlayersDataOnline[playerid][SaveAfterAgenda][10]])]);

					        SendInfoMessage(playerid, 2, "0", MsgDarObjetoMe);
					        SendInfoMessage(SaveIDGive, 2, "0", MsgDarObjetoYou);

							RemoveObjectHoldToPlayer(playerid, -1, PlayersDataOnline[playerid][SaveAfterAgenda][10]);
							ShowObjectos(playerid);
							return 1;
						}
						else
						{
							SendInfoMessage(playerid, 0, "1550", "El jugador que deseas dar éste objeto ya no puede llevar más encima!");
						}
				    }
				    else
				    {
						SendInfoMessage(playerid, 0, "1551", "Al jugador al que deseas dar el objeto no puede llevar más de éste tipo!");
				    }
			    }
				ShowObjetosOpciones(playerid);
			}
			else
			{
				ShowObjetosOpciones(playerid);
			}
		}
		// ShowDejarObjeto
		case 151:
		{
			if ( response == 1 )
			{
                PlayersDataOnline[playerid][SaveAfterAgenda][11] = listitem;
			    ShowDejarObjetoInput(playerid);
			}
			else
			{
			    ShowObjetosOpciones(playerid);
			}
		}
		// ShowDejarObjetoInput
		case 152:
		{
			if ( response == 1 )
			{
			    new SlotIDGet = strval(inputtext);
				if ( SlotIDGet >= 1 && SlotIDGet <= MAX_GUANTERA_GAVETA_SLOTS || SlotIDGet == 0)
				{
					switch (PlayersDataOnline[playerid][SaveAfterAgenda][11])
					{
					    // Guantera
					    case 0:
					    {
						    if ( IsPlayerInsideVehicle(playerid) )
						    {
						        SlotIDGet--;
							    new MyGuanteraOpen = IsGuanteraOpen(playerid);
							    if ( MyGuanteraOpen )
							    {
							        if ( SlotIDGet == -1)
							        {
								        for (new i = 0; i < MAX_GUANTERA_GAVETA_SLOTS; i++)
								        {
										    if ( !DataCars[MyGuanteraOpen][GuanteraObjects][i] )
										    {
										        SlotIDGet = i;
								                break;
										    }
								        }
								        if ( SlotIDGet == -1 )
								        {
											SendInfoMessage(playerid, 0, "1601", "La guantera se encuentra llena!");
											ShowDejarObjeto(playerid);
								            return 1;
								        }
							        }
							        else
							        {
							            if (DataCars[MyGuanteraOpen][GuanteraObjects][SlotIDGet] )
							            {
								            new TempError[MAX_TEXT_CHAT];
								            format(TempError, sizeof(TempError), "El Slot número \"%i\" esta ocupado! Intente con otro ID de slot o deje en blanco para buscar uno disponible!", SlotIDGet + 1 );
								            SendInfoMessage(playerid, 0, "1587", TempError);
								            ShowDejarObjetoInput(playerid);
							                return 1;
							            }
							        }
							        DataCars[MyGuanteraOpen][GuanteraObjects][SlotIDGet] = PlayersData[playerid][Objetos][PlayersDataOnline[playerid][SaveAfterAgenda][10]];
							        
			                        new MsgTirarObjetos[MAX_TEXT_CHAT];
									format(MsgTirarObjetos, sizeof(MsgTirarObjetos), "guarda %s en la guantera", ObjectsNames[GetTypeObjectEx(PlayersData[playerid][Objetos][PlayersDataOnline[playerid][SaveAfterAgenda][10]])]);
							        Acciones(playerid, 8, MsgTirarObjetos);
									RemoveObjectHoldToPlayer(playerid, -1, PlayersDataOnline[playerid][SaveAfterAgenda][10]);
									ShowObjectos(playerid);
							    }
							    else
							    {
									ShowDejarObjeto(playerid);
							    }
							}
							else
							{
								SendInfoMessage(playerid, 0, "1592", "No se encuentra dentro del vehículo!");
							}
						}
						// Gaveta
						case 1:
						{
							if ( PlayersData[playerid][IsPlayerInHouse] )
							{
							    new Houseid = PlayersData[playerid][IsPlayerInHouse];
							    if ( IsOpenGaveta(playerid, Houseid) )
							    {
							        SlotIDGet--;
							        if ( SlotIDGet == -1)
							        {
								        for (new i = 0; i < MAX_GUANTERA_GAVETA_SLOTS; i++)
								        {
										    if ( !HouseData[Houseid][GavetaObjects][i] )
										    {
										        SlotIDGet = i;
								                break;
										    }
								        }
								        if ( SlotIDGet == -1 )
								        {
											SendInfoMessage(playerid, 0, "1603", "La gaveta se encuentra llena!");
											ShowDejarObjeto(playerid);
								            return 1;
								        }
							        }
							        else
							        {
							            if (HouseData[Houseid][GavetaObjects][SlotIDGet] )
							            {
								            new TempError[MAX_TEXT_CHAT];
								            format(TempError, sizeof(TempError), "El Slot número \"%i\" esta ocupado! Intente con otro ID de slot o deje en blanco para buscar uno disponible!", SlotIDGet + 1 );
								            SendInfoMessage(playerid, 0, "1604", TempError);
								            ShowDejarObjetoInput(playerid);
							                return 1;
							            }
							        }
							        HouseData[Houseid][GavetaObjects][SlotIDGet] = PlayersData[playerid][Objetos][PlayersDataOnline[playerid][SaveAfterAgenda][10]];

			                        new MsgTirarObjetos[MAX_TEXT_CHAT];
									format(MsgTirarObjetos, sizeof(MsgTirarObjetos), "guarda %s en la gaveta", ObjectsNames[GetTypeObjectEx(PlayersData[playerid][Objetos][PlayersDataOnline[playerid][SaveAfterAgenda][10]])]);
							        Acciones(playerid, 8, MsgTirarObjetos);
									RemoveObjectHoldToPlayer(playerid, -1, PlayersDataOnline[playerid][SaveAfterAgenda][10]);
									ShowObjectos(playerid);
							    }
							    else
							    {
									ShowDejarObjeto(playerid);
							    }
							}
							else
							{
								SendInfoMessage(playerid, 0, "1605", "No se encuentra dentro de una casa");
							}
						}
					}
				}
				else
				{
					SendInfoMessage(playerid, 0, "1602", "El número del SLOT para la gaveta debe estar comprendido entre 1 y 8 ó use deje en blanco para buscar un slot disponible");
				    ShowDejarObjetoInput(playerid);
				}
			}
			else
			{
			    ShowDejarObjeto(playerid);
			}
		}
		// Saltar Tutorial
		case 153:
		{
		    if (response)
		    {
		        PlayersData[playerid][InTutorial] = true;
			    TogglePlayerControllableEx(playerid, false);
				PlayersDataOnline[playerid][IsNotSilenciado] = false;
				SetPlayerTutorial(playerid, 0);
		    }
		    else
		    {
				PlayersDataOnline[playerid][StateDeath] = true;
		        SetPlayerVirtualWorldEx(playerid, 0);
				UpdateSpawnPlayer(playerid);
				SpawnPlayerEx(playerid);
				SendInfoMessage(playerid, 2, "0", "Servidor: Has sido spawneado correctamente. Cualquier duda frente al gamemode, no dudes en usar /duda.");
		    }
		}
	}
	//// END DIALOGS
	return 1;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	if ( PlayersDataOnline[playerid][State] == 3 )
	{
	    if ( !PlayersData[playerid][InTutorial] )
	    {
			if (playerid != clickedplayerid)
			{
				new MsgReportarInputText[MAX_TEXT_CHAT];
				PlayersDataOnline[playerid][MyLastIdReport] = clickedplayerid;
				format(MsgReportarInputText, sizeof(MsgReportarInputText), "{00A5FF}Reportar a %s", PlayersDataOnline[clickedplayerid][NameOnline]);
			    ShowPlayerDialogEx(playerid, 11, DIALOG_STYLE_INPUT, MsgReportarInputText, "{F0F0F0}Descríba brevemente la razón de su reporte", "Reportar", "Cancelar");
			}
			else
			{
				SendInfoMessage(playerid, 0, "423", "El jugador que ha seleccionado para reportar es usted mismo.");
			}
		}
		else
		{
			SendInfoMessage(playerid, 0, "1138", "Debe terminar el tutorial antes de reportar a un usuario.");
		}
	}
	else
	{
		SendInfoMessage(playerid, 0, "825", "Debe loguearse antes de reportar a un usuario");
	}
	return 1;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////// MESSAGES INFO
public SendInfoMessage(playerid, type, optional[], message[])
{
	new MsgInfo[MAX_TEXT_CHAT];
	switch ( type )
	{
	    // Error
	    case 0:
	    {
	        format(MsgInfo, sizeof(MsgInfo), "Error Nº %s: %s", optional, message);
		}
		// Ayuda
	    case 1:
	    {
	        format(MsgInfo, sizeof(MsgInfo), "%s %s", message, optional);
		}
		// Información
	    case 2:
	    {
	        format(MsgInfo, sizeof(MsgInfo), "Info: %s", message);
		}
		// Afirmativo
	    case 3:
	    {
	        format(MsgInfo, sizeof(MsgInfo), "Importante: %s", message);
		}
	}
	SendClientMessage(playerid, COLOR_MESSAGES[type], MsgInfo);
}

//////////////////// CLEAN
public DataUserClean(playerid)
{
	if ( !PlayersDataOnline[playerid][MarcaZZ] )
	{
		new MsgAviso[MAX_TEXT_CHAT];
	    format(MsgAviso, sizeof(MsgAviso), "%s Debug Data Error - Jugador: %s[%i] - ID %i.", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline], playerid, gettime());
	    MsgCheatsReportsToAdmins(MsgAviso);
	}
	else
	{
		PlayersDataOnline[playerid][MarcaZZ] = false;
	}
	// DATA USERS
    PlayersData[playerid][EmailTime]  	 = 0;
    format(PlayersData[playerid][Email], 25, "No");
    format(PlayersData[playerid][Password], 25, "0");
    PlayersData[playerid][AccountState] = 0;
    PlayersData[playerid][Spawn_X] 		= 0;
    PlayersData[playerid][Spawn_Y] 		= 0;
    PlayersData[playerid][Spawn_Z] 		= 0;
    PlayersData[playerid][Spawn_ZZ]		= 0;
    PlayersData[playerid][HoursPlaying] = 0;
    PlayersData[playerid][DeahtCount] 	= 0;
    PlayersData[playerid][KilledCount]  = 0;
    PlayersData[playerid][Phone] 		= 0;
    PlayersData[playerid][House] 		= -1;
    PlayersData[playerid][Car] 			= -1;
    PlayersData[playerid][Faccion] 		= 0;
    PlayersData[playerid][Rango] 		= 7;
    format(PlayersData[playerid][GirlFreind], MAX_PLAYER_NAME, "No");
    PlayersData[playerid][Bolsillos][0]	= 0;
    PlayersData[playerid][Bolsillos][1]	= 0;
    PlayersData[playerid][Bolsillos][2]	= 0;
    PlayersData[playerid][Bolsillos][3]	= 0;
	PlayersData[playerid][Bolsillos][4]	= 0;

    PlayersData[playerid][Habilidad] 	= 0;
    PlayersData[playerid][Warn]	= 0;
    PlayersData[playerid][Ciudad] 		= 1;
    PlayersData[playerid][Vida] 		= 80;
    PlayersData[playerid][Chaleco] 		= 0;
    PlayersData[playerid][Cansansio]	= 40;
    PlayersData[playerid][Dinero] 		= 0;
    PlayersData[playerid][Banco] 		= 1200;
    PlayersData[playerid][Jail] 		= 0;
    PlayersData[playerid][Admin]		= 0;
    PlayersData[playerid][World]		= 0;
    PlayersData[playerid][Interior]		= 0;
    PlayersData[playerid][Skin]			= 26;
    PlayersData[playerid][Drogas]		= 0;
    PlayersData[playerid][Materiales]	= 0;
    PlayersData[playerid][Lata]			= false;
    PlayersData[playerid][Ganzuas]		= 0;
    PlayersData[playerid][Alquiler]		= -1;
    PlayersData[playerid][Bombas]		= 0;
    PlayersData[playerid][Sexo]			= 0;

    PlayersData[playerid][Idiomas][0]	= false;
    PlayersData[playerid][Idiomas][1]	= false;
    PlayersData[playerid][Idiomas][2]	= false;
    PlayersData[playerid][Idiomas][3]	= false;
    PlayersData[playerid][Idiomas][4]	= false;
    PlayersData[playerid][Idiomas][5]	= false;

    PlayersData[playerid][Licencias][0]	= false;
    PlayersData[playerid][Licencias][1]	= false;
    PlayersData[playerid][Licencias][2]	= false;
    PlayersData[playerid][Licencias][3]	= false;
    PlayersData[playerid][Licencias][4]	= false;
    PlayersData[playerid][Licencias][5]	= false;
    PlayersData[playerid][Licencias][6]	= false;

    PlayersData[playerid][IsInJail]			= -1;
    PlayersData[playerid][Nacer]			= false;
    PlayersData[playerid][TimeRequestBank]	= 0;
    PlayersData[playerid][MyBonus]			= 0;
	PlayersData[playerid][InTutorial]		= false;
    PlayersData[playerid][Edad]				= 0;
    PlayersData[playerid][IsPlayerInHouse]	= false;
    PlayersData[playerid][TimeEquipo]		= 0;
    PlayersData[playerid][SpawnAmigo]		= 0;
    PlayersData[playerid][IsPaga]			= 0;
	format(PlayersData[playerid][MyIP], 16, "0");
    PlayersData[playerid][Job]				= 0;
	PlayersData[playerid][MyStyleWalk]		= 0;
	PlayersData[playerid][Saldo]			= 50;
	PlayersData[playerid][LicenciaPesca]	= 0;
	PlayersData[playerid][IntermitentState]= false;
	PlayersData[playerid][MyStyleTalk]		= 0;
	PlayersData[playerid][IsPlayerInBizz]	= false;
	PlayersData[playerid][IsPlayerInGarage]	= 0;

    PlayersData[playerid][WeaponS][0] 	= 0;
    PlayersData[playerid][WeaponS][1] 	= 0;
    PlayersData[playerid][WeaponS][2]   = 0;
    PlayersData[playerid][WeaponS][3]   = 0;
    PlayersData[playerid][WeaponS][4]	= 0;
    PlayersData[playerid][WeaponS][5]	= 0;
    PlayersData[playerid][WeaponS][6]	= 0;
    PlayersData[playerid][WeaponS][7]	= 0;
    PlayersData[playerid][WeaponS][8]   = 0;
    PlayersData[playerid][WeaponS][9]  	= 0;
    PlayersData[playerid][WeaponS][10]   = 0;
    PlayersData[playerid][WeaponS][11] 	= 0;
    PlayersData[playerid][WeaponS][12] 	= 0;
    PlayersData[playerid][AmmoS][0]  = 0;
    PlayersData[playerid][AmmoS][1]  = 0;
    PlayersData[playerid][AmmoS][2]  = 0;
    PlayersData[playerid][AmmoS][3]	 = 0;
    PlayersData[playerid][AmmoS][4]	 = 0;
    PlayersData[playerid][AmmoS][5]	 = 0;
    PlayersData[playerid][AmmoS][6]	 = 0;
    PlayersData[playerid][AmmoS][7]	 = 0;
	PlayersData[playerid][AmmoS][8]	 = 0;
    PlayersData[playerid][AmmoS][9]  = 0;
    PlayersData[playerid][AmmoS][10] = 0;
    PlayersData[playerid][AmmoS][11] = 0;
    PlayersData[playerid][AmmoS][12] = 0;
    PlayersData[playerid][Asignados][0] 	= 0;
    PlayersData[playerid][Asignados][1]		= 0;
    PlayersData[playerid][Asignados][2] 	= 0;
    PlayersData[playerid][Bolsa][0]	= 0;
    PlayersData[playerid][Bolsa][1]	= 0;
    PlayersData[playerid][Bolsa][2]	= 0;
    PlayersData[playerid][Bolsa][3] = 0;
    PlayersData[playerid][BolsaC][0]= 0;
    PlayersData[playerid][BolsaC][1]= 0;
    PlayersData[playerid][BolsaC][2]= 0;
    PlayersData[playerid][BolsaC][3]= 0;
    PlayersData[playerid][HaveBolsa]= false;
    PlayersData[playerid][IsPlayerInVehInt]	= false;
    PlayersData[playerid][Cartera][0]	= 0;
    PlayersData[playerid][Cartera][1]   = 0;
    PlayersData[playerid][Cartera][2]   = 0;
    PlayersData[playerid][Cartera][3]   = 0;
    PlayersData[playerid][Cartera][4]   = 0;
    PlayersData[playerid][Cartera][5]   = 0;
    PlayersData[playerid][CarteraC][0]	= 0;
    PlayersData[playerid][CarteraC][1]  = 0;
    PlayersData[playerid][CarteraC][2]  = 0;
    PlayersData[playerid][CarteraC][3]  = 0;
    PlayersData[playerid][CarteraC][4]  = 0;
    PlayersData[playerid][CarteraC][5]  = 0;
    PlayersData[playerid][CarteraT][0]	= 0;
    PlayersData[playerid][CarteraT][1]  = 0;
    PlayersData[playerid][CarteraT][2]  = 0;
    PlayersData[playerid][CarteraT][3]  = 0;
    PlayersData[playerid][CarteraT][4]  = 0;
    PlayersData[playerid][CarteraT][5]  = 0;
    PlayersData[playerid][AccountBankingOpen] = 0;
    PlayersData[playerid][CarteraI][0]  = 0;
    PlayersData[playerid][CarteraI][1]  = 0;
    PlayersData[playerid][CarteraI][2]  = 0;
    PlayersData[playerid][CarteraI][3]  = 0;
    PlayersData[playerid][CarteraI][4]  = 0;
    PlayersData[playerid][CarteraI][5]  = 0;
	PlayersData[playerid][IsPlayerInBank]= false;
    PlayersData[playerid][AlertSMSBank]	= false;
    PlayersData[playerid][HorasWork]	= 0;
	PlayersData[playerid][CameraLogin]	= 0;
	PlayersData[playerid][Enfermedad]	= 0;
    PlayersData[playerid][Description]  = 0;
	PlayersData[playerid][EnableDescription]= false;
	format(PlayersData[playerid][DescriptionString], MAX_TEXT_DESCRIPTION, "Ninguna");
	PlayersData[playerid][DescriptionColor]		= 0;
	PlayersData[playerid][DescriptionSelect]	= 0;
	PlayersData[playerid][SpawnFac]		= 0;
	
	// Nuevos 77
	PlayersData[playerid][WantAudio]	= 0;
	PlayersData[playerid][Objetos][0]	= 0;
	PlayersData[playerid][Objetos][1]	= 0;
	PlayersData[playerid][Objetos][2]	= 0;
	PlayersData[playerid][Objetos][3]	= 0;
	PlayersData[playerid][Objetos][4]	= 0;
	PlayersData[playerid][Objetos][5]		= 0;
	PlayersData[playerid][Objetos][6]		= 0;
	PlayersData[playerid][Objetos][7]		= 0;
	PlayersData[playerid][Objetos][8]		= 0;
	PlayersData[playerid][ObjetosVision][0]		= 0;
	PlayersData[playerid][ObjetosVision][1]		= 0;
	PlayersData[playerid][ObjetosVision][2]		= 0;
	PlayersData[playerid][ObjetosVision][3]		= 0;
	PlayersData[playerid][ObjetosVision][4]		= 0;
	PlayersData[playerid][ObjetosVision][5]		= 0;
	PlayersData[playerid][ObjetosVision][6]		= 0;
	PlayersData[playerid][ObjetosVision][7]		= 0;
	PlayersData[playerid][ObjetosVision][8]		= 0;
	PlayersData[playerid][TypePhone]			= 0;


    // DATA USERS ONLINE
	PlayersDataOnline[playerid][CurrentDialog]		= 999;
	PlayersDataOnline[playerid][State]  			= 0;
	PlayersDataOnline[playerid][LoginTime]  		= 0;
	PlayersDataOnline[playerid][Spawn]  			= true;
	PlayersDataOnline[playerid][Espectando]			= -1;
    //format(PlayersDataOnline[playerid][NameOnline], MAX_PLAYER_NAME, "0");
	PlayersDataOnline[playerid][Intentar]  			= 0;
	PlayersDataOnline[playerid][StateMoneyPass]  	= true;
	PlayersDataOnline[playerid][StateChannelOOC]  	= true;
	PlayersDataOnline[playerid][StateChannelFamily] = true;
	PlayersDataOnline[playerid][StateChannelRadio]  = true;
	PlayersDataOnline[playerid][StateChannelCNN]  	= true;
	PlayersDataOnline[playerid][CallTime]		  	= true;
	PlayersDataOnline[playerid][StateJob] 			= false;
	PlayersDataOnline[playerid][Paga] 				= false;
	PlayersDataOnline[playerid][InPickup] 			= -1;
	PlayersDataOnline[playerid][InPickupTele]		= false;
	PlayersDataOnline[playerid][InPickupInfo]		= false;
	PlayersDataOnline[playerid][MyPickupX] 			= 0;
	PlayersDataOnline[playerid][MyPickupY] 			= 0;
	PlayersDataOnline[playerid][MyPickupZ] 			= 0;
	PlayersDataOnline[playerid][MyPickupZZ]			= 0;
	PlayersDataOnline[playerid][MyPickupWorld]		= 0;
	PlayersDataOnline[playerid][MyPickupLock]	   	= true;
	PlayersDataOnline[playerid][MyPickupX_Now] 		= 0;
	PlayersDataOnline[playerid][MyPickupY_Now] 		= 0;
	PlayersDataOnline[playerid][MyPickupZ_Now] 		= 0;
	PlayersDataOnline[playerid][MyPickupInterior]	= 0;
	PlayersDataOnline[playerid][InCall]				= -1;
	PlayersDataOnline[playerid][SendCommands]		= false;
	PlayersDataOnline[playerid][IsDescolgado]		= false;
	PlayersDataOnline[playerid][IsPagaO]			= gettime();
	PlayersDataOnline[playerid][PhoneOnline]		= true;
	PlayersDataOnline[playerid][InSleep]			= false;
	PlayersDataOnline[playerid][CansansioConteo]	= 0;
	PlayersDataOnline[playerid][InCarId]			= 0;
	PlayersDataOnline[playerid][InVehicle]			= false;
	PlayersDataOnline[playerid][MyLastIdReport]		= 0;
	PlayersDataOnline[playerid][IsEntrevistado]		= false;
	PlayersDataOnline[playerid][SubAfterMenuRow] 	= 0;
	PlayersDataOnline[playerid][AfterMenuRow] 	 	= 0;
	//TEXTDRAW
	PlayersDataOnline[playerid][InvitePlayer]  		= 0;
	PlayersDataOnline[playerid][InviteFaccion] 		= 0;
	PlayersDataOnline[playerid][Frecuencia]    		= 0;
	PlayersDataOnline[playerid][AdminOn]       		= false;
	PlayersDataOnline[playerid][Freeze]        		= false;
	PlayersDataOnline[playerid][Wispers]       		= true;
	PlayersDataOnline[playerid][RowSkin]       		= 0;
	PlayersDataOnline[playerid][RowHair]       		= 0;
	PlayersDataOnline[playerid][TypeBuy]       		= 0;
	PlayersDataOnline[playerid][IsPlayerInHotel]    = false;
	PlayersDataOnline[playerid][IsTaxi]    			= -1;
	PlayersDataOnline[playerid][SeatTaxi]           = false;
	PlayersDataOnline[playerid][IsAtado]     		= false;
	PlayersDataOnline[playerid][IsEsposas]     		= false;
	PlayersDataOnline[playerid][IsTeazer]     		= false;
	PlayersDataOnline[playerid][LastInterior]     	= false;
	PlayersDataOnline[playerid][StateDeath]     	= false;
	PlayersDataOnline[playerid][ObjectWorking]	    = -1;
	PlayersDataOnline[playerid][MappingPoint]	    = 0.1;
	PlayersDataOnline[playerid][IsNotSilenciado]    = true;
	PlayersDataOnline[playerid][ModeDM]    			= false;
	PlayersDataOnline[playerid][ModeRace]  			= false;
	PlayersDataOnline[playerid][IsAFK]    			= false;
	PlayersDataOnline[playerid][JobBonus]  			= false;
 	PlayersDataOnline[playerid][IsCheckCheat]    	= false;
	PlayersDataOnline[playerid][InWalk]             = false;
	PlayersDataOnline[playerid][InCarId]            = false;
	PlayersDataOnline[playerid][TimeCallPublics]    = 0;
	PlayersDataOnline[playerid][ICall]			    = false;
	PlayersDataOnline[playerid][Altavoz]            = false;
	PlayersDataOnline[playerid][ChangeVC]           = false;
	PlayersDataOnline[playerid][InCamera]           = false;
	PlayersDataOnline[playerid][VidaOn]	          	= 100.0;
	PlayersDataOnline[playerid][ChalecoOn]          = 0;
	PlayersDataOnline[playerid][TimeLata]          	= 0;
	PlayersDataOnline[playerid][LastDamageInt]     	= 0;
	PlayersDataOnline[playerid][LastGas]     		= 0;
	PlayersDataOnline[playerid][LastOil]     		= 0;
	PlayersDataOnline[playerid][PistaIDp]           = -1;
	PlayersDataOnline[playerid][PosIDp]           	= -1;
	PlayersDataOnline[playerid][LicenciaTest]     	= false;
	PlayersDataOnline[playerid][PointDm]     		= false;
	PlayersDataOnline[playerid][DesignGarageId] 	= false;
	PlayersDataOnline[playerid][EspectVehOrPlayer]	= false;
	PlayersDataOnline[playerid][IsEspectando]  		= false;
	PlayersDataOnline[playerid][ExitedVehicle] 		= false;
	PlayersDataOnline[playerid][IsAudio]            = false;
	PlayersDataOnline[playerid][HandleAHouse]       = -1;
	PlayersDataOnline[playerid][HandleAVehicle]     = -1;
	PlayersDataOnline[playerid][PlayerSexo]    		= -1;
	PlayersDataOnline[playerid][VCoche][0]     		= -1; 	PlayersDataOnline[playerid][VCoche][1]    	= -1;
	PlayersDataOnline[playerid][VFactura][0]   		= -1; 	PlayersDataOnline[playerid][VFactura][1]   	= -1;
	PlayersDataOnline[playerid][VServicio][0]  		= -1; 	PlayersDataOnline[playerid][VServicio][1]  	= -1;
	PlayersDataOnline[playerid][VMulta][0]   		= -1; 	PlayersDataOnline[playerid][VMulta][1]   	= -1;
	PlayersDataOnline[playerid][VRepair][0]    		= -1; 	PlayersDataOnline[playerid][VRepair][1]     = -1;
	PlayersDataOnline[playerid][VAceite][0]    		= -1; 	PlayersDataOnline[playerid][VAceite][1]     = -1;
	PlayersDataOnline[playerid][Contrato][0]    	= -1; 	PlayersDataOnline[playerid][Contrato][1]    = -1;
	PlayersDataOnline[playerid][VArma][0]     		= -1; 	PlayersDataOnline[playerid][VArma][1]     	= -1;
	PlayersDataOnline[playerid][VDrogas][0]     	= -1; 	PlayersDataOnline[playerid][VDrogas][1]     = -1; 	PlayersDataOnline[playerid][VDrogas][2]     = -1;
	PlayersDataOnline[playerid][VPhone][0]     		= -1; 	PlayersDataOnline[playerid][VPhone][1]      = -1; 	PlayersDataOnline[playerid][VPhone][2]     = -1;
	PlayersDataOnline[playerid][VGanzuas][0]    	= -1; 	PlayersDataOnline[playerid][VGanzuas][1]    = -1;
	PlayersDataOnline[playerid][VProteger][0]   	= -1; 	PlayersDataOnline[playerid][VProteger][1]   = -1;

	PlayersDataOnline[playerid][CountCheat]			= 0;

	Banking[playerid][Balance] 						= 0;
}
//////////////////// LOAD
public DataUserLoad(playerid)
{
	new query[500], Cache:cacheid, cuentaExiste;

	mysql_format(dataBase, query, 500, "SELECT * FROM `%s` WHERE `Nombre`='%e';", DIR_USERS, PlayersDataOnline[playerid][NameOnline]);
	cacheid = mysql_query(dataBase, query);
	cache_get_row_count(cuentaExiste);

	if ( cuentaExiste )
	{
		new WeaponsData[50], AmmoData[50];
		
		cache_get_value_name(0, "Email", PlayersData[playerid][Email], 60);
		cache_get_value_name(0, "Password", PlayersData[playerid][Password], 25);
		cache_get_value_name_int(0, "AccountState", PlayersData[playerid][AccountState]);
		cache_get_value_name_float(0, "Spawn_X", PlayersData[playerid][Spawn_X]);
		cache_get_value_name_float(0, "Spawn_Y", PlayersData[playerid][Spawn_Y]);
		cache_get_value_name_float(0, "Spawn_Z", PlayersData[playerid][Spawn_Z]);
		cache_get_value_name_float(0, "Spawn_ZZ", PlayersData[playerid][Spawn_ZZ]);
		cache_get_value_name_int(0, "HoursPlaying", PlayersData[playerid][HoursPlaying]);
		cache_get_value_name_int(0, "DeahtCount", PlayersData[playerid][DeahtCount]);

		cache_get_value_name_int(0, "KilledCount", PlayersData[playerid][KilledCount]);
		cache_get_value_name_int(0, "Phone", PlayersData[playerid][Phone]);
		cache_get_value_name_int(0, "House", PlayersData[playerid][House]);
		cache_get_value_name_int(0, "Car", PlayersData[playerid][Car]);
		cache_get_value_name_int(0, "Faccion", PlayersData[playerid][Faccion]);
		cache_get_value_name_int(0, "Rango", PlayersData[playerid][Rango]);
		cache_get_value_name(0, "GirlFreind", PlayersData[playerid][GirlFreind], MAX_PLAYER_NAME);
		cache_get_value_name_int(0, "Bolsillos0", PlayersData[playerid][Bolsillos][0]);
		cache_get_value_name_int(0, "Bolsillos1", PlayersData[playerid][Bolsillos][1]);
		cache_get_value_name_int(0, "Bolsillos2", PlayersData[playerid][Bolsillos][2]);

		cache_get_value_name_int(0, "Bolsillos3", PlayersData[playerid][Bolsillos][3]);
		cache_get_value_name_int(0, "Bolsillos4", PlayersData[playerid][Bolsillos][4]);
		cache_get_value_name_int(0, "Habilidad", PlayersData[playerid][Habilidad]);
		cache_get_value_name_int(0, "Warn", PlayersData[playerid][Warn]);
		cache_get_value_name_int(0, "Ciudad", PlayersData[playerid][Ciudad]);
		cache_get_value_name_float(0, "Vida", PlayersData[playerid][Vida]);
		cache_get_value_name_float(0, "Chaleco", PlayersData[playerid][Chaleco]);
		cache_get_value_name_int(0, "Cansansio", PlayersData[playerid][Cansansio]);
		cache_get_value_name_int(0, "Dinero", PlayersData[playerid][Dinero]);
		cache_get_value_name_int(0, "Banco", PlayersData[playerid][Banco]);

		cache_get_value_name_int(0, "Jail", PlayersData[playerid][Jail]);
		cache_get_value_name_int(0, "Admin", PlayersData[playerid][Admin]);
		cache_get_value_name_int(0, "World", PlayersData[playerid][World]);
		cache_get_value_name_int(0, "Interior", PlayersData[playerid][Interior]);
		cache_get_value_name_int(0, "Skin", PlayersData[playerid][Skin]);
		cache_get_value_name_int(0, "Drogas", PlayersData[playerid][Drogas]);
		cache_get_value_name_int(0, "Materiales", PlayersData[playerid][Materiales]);
		cache_get_value_name_int(0, "Lata", PlayersData[playerid][Lata]);
		cache_get_value_name_int(0, "Ganzuas", PlayersData[playerid][Ganzuas]);
		cache_get_value_name_int(0, "Alquiler", PlayersData[playerid][Alquiler]);

		cache_get_value_name_int(0, "Bombas", PlayersData[playerid][Bombas]);
		cache_get_value_name_int(0, "Sexo", PlayersData[playerid][Sexo]);
		cache_get_value_name_int(0, "Idiomas0", PlayersData[playerid][Idiomas][0]);
		cache_get_value_name_int(0, "Idiomas1", PlayersData[playerid][Idiomas][1]);
		cache_get_value_name_int(0, "Idiomas2", PlayersData[playerid][Idiomas][2]);
		cache_get_value_name_int(0, "Idiomas3", PlayersData[playerid][Idiomas][3]);
		cache_get_value_name_int(0, "Idiomas4", PlayersData[playerid][Idiomas][4]);
		cache_get_value_name_int(0, "Idiomas5", PlayersData[playerid][Idiomas][5]);
		cache_get_value_name_int(0, "Licencias0", PlayersData[playerid][Licencias][0]);
		cache_get_value_name_int(0, "Licencias1", PlayersData[playerid][Licencias][1]);

		cache_get_value_name_int(0, "Licencias2", PlayersData[playerid][Licencias][2]);
		cache_get_value_name_int(0, "Licencias3", PlayersData[playerid][Licencias][3]);
		cache_get_value_name_int(0, "Licencias4", PlayersData[playerid][Licencias][4]);
		cache_get_value_name_int(0, "Licencias5", PlayersData[playerid][Licencias][5]);
		cache_get_value_name_int(0, "Licencias6", PlayersData[playerid][Licencias][6]);
		cache_get_value_name_int(0, "IsInJail", PlayersData[playerid][IsInJail]);
		cache_get_value_name_int(0, "Nacer", PlayersData[playerid][Nacer]);
		cache_get_value_name_int(0, "TimeRequestBank", PlayersData[playerid][TimeRequestBank]);
		cache_get_value_name_int(0, "MyBonus", PlayersData[playerid][MyBonus]);
		cache_get_value_name_int(0, "InTutorial", PlayersData[playerid][InTutorial]);

		cache_get_value_name_int(0, "Edad", PlayersData[playerid][Edad]);
		cache_get_value_name_int(0, "IsPlayerInHouse", PlayersData[playerid][IsPlayerInHouse]);
		cache_get_value_name_int(0, "TimeEquipo", PlayersData[playerid][TimeEquipo]);
		cache_get_value_name_int(0, "SpawnAmigo", PlayersData[playerid][SpawnAmigo]);
		cache_get_value_name_int(0, "IsPaga", PlayersData[playerid][IsPaga]);
		cache_get_value_name(0, "MyIP", PlayersData[playerid][MyIP], 16);
		cache_get_value_name_int(0, "Job", PlayersData[playerid][Job]);
		cache_get_value_name_int(0, "MyStyleWalk", PlayersData[playerid][MyStyleWalk]);
		cache_get_value_name_int(0, "Saldo", PlayersData[playerid][Saldo]);
		cache_get_value_name_int(0, "LicenciaPesca", PlayersData[playerid][LicenciaPesca]);

		cache_get_value_name_int(0, "IntermitentState", PlayersData[playerid][IntermitentState]);
		cache_get_value_name_int(0, "MyStyleTalk", PlayersData[playerid][MyStyleTalk]);
		cache_get_value_name_int(0, "IsPlayerInBizz", PlayersData[playerid][IsPlayerInBizz]);
		cache_get_value_name_int(0, "IsPlayerInGarage", PlayersData[playerid][IsPlayerInGarage]);
		cache_get_value_name(0, "WeaponS", WeaponsData, 50);
		cache_get_value_name(0, "AmmoS", AmmoData, 50);
		cache_get_value_name_int(0, "Asignados0", PlayersData[playerid][Asignados][0]);
		cache_get_value_name_int(0, "Asignados1", PlayersData[playerid][Asignados][1]);
		cache_get_value_name_int(0, "Asignados2", PlayersData[playerid][Asignados][2]);
		cache_get_value_name_int(0, "Bolsa0", PlayersData[playerid][Bolsa][0]);

		cache_get_value_name_int(0, "Bolsa1", PlayersData[playerid][Bolsa][1]);
		cache_get_value_name_int(0, "Bolsa2", PlayersData[playerid][Bolsa][2]);
		cache_get_value_name_int(0, "Bolsa3", PlayersData[playerid][Bolsa][3]);
		cache_get_value_name_int(0, "BolsaC0", PlayersData[playerid][BolsaC][0]);
		cache_get_value_name_int(0, "BolsaC1", PlayersData[playerid][BolsaC][1]);
		cache_get_value_name_int(0, "BolsaC2", PlayersData[playerid][BolsaC][2]);
		cache_get_value_name_int(0, "BolsaC3", PlayersData[playerid][BolsaC][3]);
		cache_get_value_name_int(0, "HaveBolsa", PlayersData[playerid][HaveBolsa]);
		cache_get_value_name_int(0, "IsPlayerInVehInt", PlayersData[playerid][IsPlayerInVehInt]);
		cache_get_value_name_int(0, "Cartera0", PlayersData[playerid][Cartera][0]);

		cache_get_value_name_int(0, "Cartera1", PlayersData[playerid][Cartera][1]);
		cache_get_value_name_int(0, "Cartera2", PlayersData[playerid][Cartera][2]);
		cache_get_value_name_int(0, "Cartera3", PlayersData[playerid][Cartera][3]);
		cache_get_value_name_int(0, "Cartera4", PlayersData[playerid][Cartera][4]);
		cache_get_value_name_int(0, "Cartera5", PlayersData[playerid][Cartera][5]);
		cache_get_value_name_int(0, "CarteraC0", PlayersData[playerid][CarteraC][0]);
		cache_get_value_name_int(0, "CarteraC1", PlayersData[playerid][CarteraC][1]);
		cache_get_value_name_int(0, "CarteraC2", PlayersData[playerid][CarteraC][2]);
		cache_get_value_name_int(0, "CarteraC3", PlayersData[playerid][CarteraC][3]);
		cache_get_value_name_int(0, "CarteraC4", PlayersData[playerid][CarteraC][4]);

		cache_get_value_name_int(0, "CarteraC5", PlayersData[playerid][CarteraC][5]);
		cache_get_value_name_int(0, "CarteraT0", PlayersData[playerid][CarteraT][0]);
		cache_get_value_name_int(0, "CarteraT1", PlayersData[playerid][CarteraT][1]);
		cache_get_value_name_int(0, "CarteraT2", PlayersData[playerid][CarteraT][2]);
		cache_get_value_name_int(0, "CarteraT3", PlayersData[playerid][CarteraT][3]);
		cache_get_value_name_int(0, "CarteraT4", PlayersData[playerid][CarteraT][4]);
		cache_get_value_name_int(0, "CarteraT5", PlayersData[playerid][CarteraT][5]);
		cache_get_value_name_int(0, "AccountBankingOpen", PlayersData[playerid][AccountBankingOpen]);
		cache_get_value_name_int(0, "CarteraI0", PlayersData[playerid][CarteraI][0]);
		cache_get_value_name_int(0, "CarteraI1", PlayersData[playerid][CarteraI][1]);

		cache_get_value_name_int(0, "CarteraI2", PlayersData[playerid][CarteraI][2]);
		cache_get_value_name_int(0, "CarteraI3", PlayersData[playerid][CarteraI][3]);
		cache_get_value_name_int(0, "CarteraI4", PlayersData[playerid][CarteraI][4]);
		cache_get_value_name_int(0, "CarteraI5", PlayersData[playerid][CarteraI][5]);
		cache_get_value_name_int(0, "IsPlayerInBank", PlayersData[playerid][IsPlayerInBank]);
		cache_get_value_name_int(0, "AlertSMSBank", PlayersData[playerid][AlertSMSBank]);
		cache_get_value_name_int(0, "HorasWork", PlayersData[playerid][HorasWork]);
		cache_get_value_name_int(0, "CameraLogin", PlayersData[playerid][CameraLogin]);
		cache_get_value_name_int(0, "Enfermedad", PlayersData[playerid][Enfermedad]);
		cache_get_value_name_int(0, "Description", PlayersData[playerid][Description]);

		cache_get_value_name_int(0, "EnableDescription", PlayersData[playerid][EnableDescription]);
		cache_get_value_name(0, "DescriptionString", PlayersData[playerid][DescriptionString], MAX_TEXT_DESCRIPTION);
		cache_get_value_name_int(0, "DescriptionColor", PlayersData[playerid][DescriptionColor]);
		cache_get_value_name_int(0, "DescriptionSelect", PlayersData[playerid][DescriptionSelect]);
		cache_get_value_name_int(0, "SpawnFac", PlayersData[playerid][SpawnFac]);
		cache_get_value_name_int(0, "WantAudio", PlayersData[playerid][WantAudio]);
		cache_get_value_name_int(0, "Objetos0", PlayersData[playerid][Objetos][0]);
		cache_get_value_name_int(0, "Objetos1", PlayersData[playerid][Objetos][1]);
		cache_get_value_name_int(0, "Objetos2", PlayersData[playerid][Objetos][2]);
		cache_get_value_name_int(0, "Objetos3", PlayersData[playerid][Objetos][3]);

		cache_get_value_name_int(0, "Objetos4", PlayersData[playerid][Objetos][4]);
		cache_get_value_name_int(0, "Objetos5", PlayersData[playerid][Objetos][5]);
		cache_get_value_name_int(0, "Objetos6", PlayersData[playerid][Objetos][6]);
		cache_get_value_name_int(0, "Objetos7", PlayersData[playerid][Objetos][7]);
		cache_get_value_name_int(0, "Objetos8", PlayersData[playerid][Objetos][8]);
		cache_get_value_name_int(0, "ObjetosVision0", PlayersData[playerid][ObjetosVision][0]);
		cache_get_value_name_int(0, "ObjetosVision1", PlayersData[playerid][ObjetosVision][1]);
		cache_get_value_name_int(0, "ObjetosVision2", PlayersData[playerid][ObjetosVision][2]);
		cache_get_value_name_int(0, "ObjetosVision3", PlayersData[playerid][ObjetosVision][3]);
		cache_get_value_name_int(0, "ObjetosVision4", PlayersData[playerid][ObjetosVision][4]);

		cache_get_value_name_int(0, "ObjetosVision5", PlayersData[playerid][ObjetosVision][5]);
		cache_get_value_name_int(0, "ObjetosVision6", PlayersData[playerid][ObjetosVision][6]);
		cache_get_value_name_int(0, "ObjetosVision7", PlayersData[playerid][ObjetosVision][7]);
		cache_get_value_name_int(0, "ObjetosVision8", PlayersData[playerid][ObjetosVision][8]);
		cache_get_value_name_int(0, "TypePhone", PlayersData[playerid][TypePhone]);

		new SplitPos[2] = {0,0};
		new GetAWeaponsData[13][10];
		new GetAmmoData[13][10];
        for(new i=0; i != 13; i++)
		{
            SplitPos[0] = strfind(WeaponsData, "|", false);
            strmid(GetAWeaponsData[i], WeaponsData, 0, SplitPos[0]);
            strdel(WeaponsData, 0, SplitPos[0]+1);

            SplitPos[1] = strfind(AmmoData, "|", false);
            strmid(GetAmmoData[i], AmmoData, 0, SplitPos[1]);
            strdel(AmmoData, 0, SplitPos[1]+1);

			PlayersData[playerid][WeaponS][i] = strval(GetAWeaponsData[i]);
			PlayersData[playerid][AmmoS][i] = strval(GetAmmoData[i]);
        }
	}
	cache_delete(cacheid);
	return cuentaExiste;
}
//////////////////// SAVE
public DataUserSave(playerid)
{
	if ( PlayersDataOnline[playerid][Spawn] )
	{
        GetSpawnInfo(playerid);
    }

	new
	string[10],
	WeaponsData[50],
	AmmoData[50];

	for(new i=0; i<13; i++)
	{
		format(string,10,"%i|", PlayersData[playerid][WeaponS][i]);
		strcat(WeaponsData, string);
		format(string,10,"%i|", PlayersData[playerid][AmmoS][i]);
		strcat(AmmoData, string);
	}

	new query[2000], Cache:cacheid, cuentaExiste, playerDBID;

	mysql_format(dataBase, query, 200, "SELECT `ID` FROM `%s` WHERE `Nombre`='%e';", DIR_USERS, PlayersDataOnline[playerid][NameOnline]);
	cacheid = mysql_query(dataBase, query);
	cache_get_row_count(cuentaExiste);

	if (cuentaExiste)
	{
		cache_get_value_name_int(0, "ID", playerDBID);
	}
	cache_delete(cacheid);

	if (!cuentaExiste)
	{
	    mysql_format(dataBase, query, 200, "INSERT INTO `%s` (`Nombre`) VALUES ('%e');", DIR_USERS, PlayersDataOnline[playerid][NameOnline]);
	    cacheid = mysql_query(dataBase, query);
	    playerDBID = cache_insert_id();
	    cache_delete(cacheid);
	}

	format(query, 100, "UPDATE `%s` SET ", DIR_USERS);
	strcat(query, "`Nombre`='%e',`Email`='%e',`Password`='%e',`AccountState`='%i',`Spawn_X`='%f',`Spawn_Y`='%f',`Spawn_Z`='%f',`Spawn_ZZ`='%f',`HoursPlaying`='%i',`DeahtCount`='%i',");
	strcat(query, "`KilledCount`='%i',`Phone`='%i',`House`='%i',`Car`='%i',`Faccion`='%i',`Rango`='%i',`GirlFreind`='%e',`Bolsillos0`='%i',`Bolsillos1`='%i',`Bolsillos2`='%i',");
	strcat(query, "`Bolsillos3`='%i',`Bolsillos4`='%i',`Habilidad`='%i',`Warn`='%i',`Ciudad`='%i',`Vida`='%f',`Chaleco`='%f',`Cansansio`='%i',`Dinero`='%i',`Banco`='%i',");
	strcat(query, "`Jail`='%i',`Admin`='%i',`World`='%i',`Interior`='%i',`Skin`='%i',`Drogas`='%i',`Materiales`='%i',`Lata`='%i',`Ganzuas`='%i',`Alquiler`='%i',");
	strcat(query, "`Bombas`='%i',`Sexo`='%i',`Idiomas0`='%i',`Idiomas1`='%i',`Idiomas2`='%i',`Idiomas3`='%i',`Idiomas4`='%i',`Idiomas5`='%i',`Licencias0`='%i',`Licencias1`='%i',");
	strcat(query, "`Licencias2`='%i',`Licencias3`='%i',`Licencias4`='%i',`Licencias5`='%i',`Licencias6`='%i',`IsInJail`='%i',`Nacer`='%i',`TimeRequestBank`='%i',`MyBonus`='%i',`InTutorial`='%i',");
	strcat(query, "`Edad`='%i',`IsPlayerInHouse`='%i',`TimeEquipo`='%i',`SpawnAmigo`='%i',`IsPaga`='%i',`MyIP`='%s',`Job`='%i',`MyStyleWalk`='%i',`Saldo`='%i',`LicenciaPesca`='%i'");
	strcat(query, " WHERE `ID`='%i';");

	mysql_format(dataBase, query, 2000, query,
		PlayersDataOnline[playerid][NameOnline],
		PlayersData[playerid][Email],
		PlayersData[playerid][Password],
		PlayersData[playerid][AccountState],
		PlayersData[playerid][Spawn_X],
		PlayersData[playerid][Spawn_Y],
		PlayersData[playerid][Spawn_Z],
		PlayersData[playerid][Spawn_ZZ],
		PlayersData[playerid][HoursPlaying],
		PlayersData[playerid][DeahtCount],

		PlayersData[playerid][KilledCount],
		PlayersData[playerid][Phone],
		PlayersData[playerid][House],
		PlayersData[playerid][Car],
		PlayersData[playerid][Faccion],
		PlayersData[playerid][Rango],
		PlayersData[playerid][GirlFreind],
		PlayersData[playerid][Bolsillos][0],
		PlayersData[playerid][Bolsillos][1],
		PlayersData[playerid][Bolsillos][2],

		PlayersData[playerid][Bolsillos][3],
		PlayersData[playerid][Bolsillos][4],
		PlayersData[playerid][Habilidad],
		PlayersData[playerid][Warn],
		PlayersData[playerid][Ciudad],
		PlayersData[playerid][Vida],
		PlayersData[playerid][Chaleco],
		PlayersData[playerid][Cansansio],
		PlayersData[playerid][Dinero],
		PlayersData[playerid][Banco],

		PlayersData[playerid][Jail],
		PlayersData[playerid][Admin],
		PlayersData[playerid][World],
		PlayersData[playerid][Interior],
		PlayersData[playerid][Skin],
		PlayersData[playerid][Drogas],
		PlayersData[playerid][Materiales],
		PlayersData[playerid][Lata],
		PlayersData[playerid][Ganzuas],
		PlayersData[playerid][Alquiler],

		PlayersData[playerid][Bombas],
		PlayersData[playerid][Sexo],
		PlayersData[playerid][Idiomas][0],
		PlayersData[playerid][Idiomas][1],
		PlayersData[playerid][Idiomas][2],
		PlayersData[playerid][Idiomas][3],
		PlayersData[playerid][Idiomas][4],
		PlayersData[playerid][Idiomas][5],
		PlayersData[playerid][Licencias][0],
		PlayersData[playerid][Licencias][1],

		PlayersData[playerid][Licencias][2],
		PlayersData[playerid][Licencias][3],
		PlayersData[playerid][Licencias][4],
		PlayersData[playerid][Licencias][5],
		PlayersData[playerid][Licencias][6],
		PlayersData[playerid][IsInJail],
		PlayersData[playerid][Nacer],
		PlayersData[playerid][TimeRequestBank],
		PlayersData[playerid][MyBonus],
		PlayersData[playerid][InTutorial],

		PlayersData[playerid][Edad],
		PlayersData[playerid][IsPlayerInHouse],
		PlayersData[playerid][TimeEquipo],
		PlayersData[playerid][SpawnAmigo],
		PlayersData[playerid][IsPaga],
		PlayersData[playerid][MyIP],
		PlayersData[playerid][Job],
		PlayersData[playerid][MyStyleWalk],
		PlayersData[playerid][Saldo],
		PlayersData[playerid][LicenciaPesca],

		playerDBID
	);
	mysql_query(dataBase, query, false);

	format(query, 100, "UPDATE `%s` SET ", DIR_USERS);
	strcat(query, "`IntermitentState`='%i',`MyStyleTalk`='%i',`IsPlayerInBizz`='%i',`IsPlayerInGarage`='%i',`WeaponS`='%s',`AmmoS`='%s',`Asignados0`='%i',`Asignados1`='%i',`Asignados2`='%i',`Bolsa0`='%i',");
	strcat(query, "`Bolsa1`='%i',`Bolsa2`='%i',`Bolsa3`='%i',`BolsaC0`='%i',`BolsaC1`='%i',`BolsaC2`='%i',`BolsaC3`='%i',`HaveBolsa`='%i',`IsPlayerInVehInt`='%i',`Cartera0`='%i',");
	strcat(query, "`Cartera1`='%i',`Cartera2`='%i',`Cartera3`='%i',`Cartera4`='%i',`Cartera5`='%i',`CarteraC0`='%i',`CarteraC1`='%i',`CarteraC2`='%i',`CarteraC3`='%i',`CarteraC4`='%i',");
	strcat(query, "`CarteraC5`='%i',`CarteraT0`='%i',`CarteraT1`='%i',`CarteraT2`='%i',`CarteraT3`='%i',`CarteraT4`='%i',`CarteraT5`='%i',`AccountBankingOpen`='%i',`CarteraI0`='%i',`CarteraI1`='%i',");
	strcat(query, "`CarteraI2`='%i',`CarteraI3`='%i',`CarteraI4`='%i',`CarteraI5`='%i',`IsPlayerInBank`='%i',`AlertSMSBank`='%i',`HorasWork`='%i',`CameraLogin`='%i',`Enfermedad`='%i',`Description`='%i',");
	strcat(query, "`EnableDescription`='%i',`DescriptionString`='%e',`DescriptionColor`='%i',`DescriptionSelect`='%i',`SpawnFac`='%i',`WantAudio`='%i',`Objetos0`='%i',`Objetos1`='%i',`Objetos2`='%i',`Objetos3`='%i',");
	strcat(query, "`Objetos4`='%i',`Objetos5`='%i',`Objetos6`='%i',`Objetos7`='%i',`Objetos8`='%i',`ObjetosVision0`='%i',`ObjetosVision1`='%i',`ObjetosVision2`='%i',`ObjetosVision3`='%i',`ObjetosVision4`='%i',");
	strcat(query, "`ObjetosVision5`='%i',`ObjetosVision6`='%i',`ObjetosVision7`='%i',`ObjetosVision8`='%i',`TypePhone`='%i'");
	strcat(query, " WHERE `ID`='%i';");

	mysql_format(dataBase, query, 2000, query,
		PlayersData[playerid][IntermitentState],
		PlayersData[playerid][MyStyleTalk],
		PlayersData[playerid][IsPlayerInBizz],
		PlayersData[playerid][IsPlayerInGarage],
		WeaponsData,
		AmmoData,
		PlayersData[playerid][Asignados][0],
		PlayersData[playerid][Asignados][1],
		PlayersData[playerid][Asignados][2],
		PlayersData[playerid][Bolsa][0],

		PlayersData[playerid][Bolsa][1],
		PlayersData[playerid][Bolsa][2],
		PlayersData[playerid][Bolsa][3],
		PlayersData[playerid][BolsaC][0],
		PlayersData[playerid][BolsaC][1],
		PlayersData[playerid][BolsaC][2],
		PlayersData[playerid][BolsaC][3],
		PlayersData[playerid][HaveBolsa],
		PlayersData[playerid][IsPlayerInVehInt],
		PlayersData[playerid][Cartera][0],

		PlayersData[playerid][Cartera][1],
		PlayersData[playerid][Cartera][2],
		PlayersData[playerid][Cartera][3],
		PlayersData[playerid][Cartera][4],
		PlayersData[playerid][Cartera][5],
		PlayersData[playerid][CarteraC][0],
		PlayersData[playerid][CarteraC][1],
		PlayersData[playerid][CarteraC][2],
		PlayersData[playerid][CarteraC][3],
		PlayersData[playerid][CarteraC][4],

		PlayersData[playerid][CarteraC][5],
		PlayersData[playerid][CarteraT][0],
		PlayersData[playerid][CarteraT][1],
		PlayersData[playerid][CarteraT][2],
		PlayersData[playerid][CarteraT][3],
		PlayersData[playerid][CarteraT][4],
		PlayersData[playerid][CarteraT][5],
		PlayersData[playerid][AccountBankingOpen],
		PlayersData[playerid][CarteraI][0],
		PlayersData[playerid][CarteraI][1],

		PlayersData[playerid][CarteraI][2],
		PlayersData[playerid][CarteraI][3],
		PlayersData[playerid][CarteraI][4],
		PlayersData[playerid][CarteraI][5],
		PlayersData[playerid][IsPlayerInBank],
		PlayersData[playerid][AlertSMSBank],
		PlayersData[playerid][HorasWork],
		PlayersData[playerid][CameraLogin],
		PlayersData[playerid][Enfermedad],
		PlayersData[playerid][Description],

		PlayersData[playerid][EnableDescription],
		PlayersData[playerid][DescriptionString],
		PlayersData[playerid][DescriptionColor],
		PlayersData[playerid][DescriptionSelect],
		PlayersData[playerid][SpawnFac],
		PlayersData[playerid][WantAudio],
		PlayersData[playerid][Objetos][0],
		PlayersData[playerid][Objetos][1],
		PlayersData[playerid][Objetos][2],
		PlayersData[playerid][Objetos][3],

		PlayersData[playerid][Objetos][4],
		PlayersData[playerid][Objetos][5],
		PlayersData[playerid][Objetos][6],
		PlayersData[playerid][Objetos][7],
		PlayersData[playerid][Objetos][8],
		PlayersData[playerid][ObjetosVision][0],
		PlayersData[playerid][ObjetosVision][1],
		PlayersData[playerid][ObjetosVision][2],
		PlayersData[playerid][ObjetosVision][3],
		PlayersData[playerid][ObjetosVision][4],

		PlayersData[playerid][ObjetosVision][5],
		PlayersData[playerid][ObjetosVision][6],
		PlayersData[playerid][ObjetosVision][7],
		PlayersData[playerid][ObjetosVision][8],
		PlayersData[playerid][TypePhone],

  		playerDBID
	);
	mysql_query(dataBase, query, false);
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public GetSpawnInfo(playerid)
{
	if ( !PlayersDataOnline[playerid][ModeDM] )
	{
		CheckWeapondCheat(playerid);
	}
	else
	{
		ResetPlayerWeaponsEx(playerid);
	}


	PlayersData[playerid][Chaleco] = PlayersDataOnline[playerid][ChalecoOn];
	PlayersData[playerid][Vida] = PlayersDataOnline[playerid][VidaOn];

 	GetPlayerPos(playerid, PlayersData[playerid][Spawn_X], PlayersData[playerid][Spawn_Y], PlayersData[playerid][Spawn_Z]);
    GetPlayerFacingAngle(playerid, PlayersData[playerid][Spawn_ZZ]);

  	PlayersData[playerid][Interior] = GetPlayerInteriorEx(playerid);
	PlayersData[playerid][World] = GetPlayerVirtualWorld(playerid);
}
public SetSpawnInfoEx(playerid)
{
	if ( CheckWeapondCheat(playerid) )
	{
		PlayersDataOnline[playerid][StateWeaponPass] 	= gettime() + 5;
		GivePlayerWeaponReturn(playerid);
	}
	PlayersDataOnline[playerid][ChalecoOn] = PlayersData[playerid][Chaleco];
	PlayersDataOnline[playerid][VidaOn] = PlayersData[playerid][Vida];
 	SetPlayerPos(playerid, PlayersData[playerid][Spawn_X], PlayersData[playerid][Spawn_Y], PlayersData[playerid][Spawn_Z]);
    SetPlayerFacingAngle(playerid, PlayersData[playerid][Spawn_ZZ]);
	SetPlayerInteriorEx(playerid, PlayersData[playerid][Interior]);
	SetPlayerVirtualWorldEx(playerid, PlayersData[playerid][World]);
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public LoadDataFaccion(faccionid)
{
	new TempDirFaccion[25];
    format(TempDirFaccion, sizeof(TempDirFaccion), "%s%i.ulp", DIR_FACCIONES, faccionid);
    new FaccionDataALL[MAX_PLAYER_DATA];
    new FaccionDataSlots[MAX_FACCION_SLOT][MAX_PLAYER_NAME];
	new File:LoadFaccion = fopen(TempDirFaccion, io_read);
	fread(LoadFaccion, FaccionDataALL);
	fclose(LoadFaccion);

	new PosSplitAfter = 0;
	for ( new i = 0; i < MAX_FACCION_SLOT; i++ )
	{
		PosSplitAfter = strfind(FaccionDataALL, "|", false);
		strmid(FaccionDataSlots[i], FaccionDataALL, 0, PosSplitAfter, sizeof(FaccionDataALL));
		strdel(FaccionDataALL, 0, PosSplitAfter + 1);
	}

	format(FaccionData[faccionid][Lider], MAX_PLAYER_NAME, "%s", FaccionDataSlots[0]);
	FaccionData[faccionid][Deposito] 		= strval(FaccionDataSlots[1]);
	FaccionData[faccionid][Almacen][0] 		= strval(FaccionDataSlots[2]);
	FaccionData[faccionid][Almacen][1] 		= strval(FaccionDataSlots[3]);
	FaccionData[faccionid][LockA][0]		= strval(FaccionDataSlots[4]);
	FaccionData[faccionid][LockA][1] 		= strval(FaccionDataSlots[5]);
	FaccionData[faccionid][Lock]            = strval(FaccionDataSlots[6]);

	WeaponsFaccion[faccionid][0][0]    = strval(FaccionDataSlots[7]);
	WeaponsFaccion[faccionid][0][1]    = strval(FaccionDataSlots[8]);
	WeaponsFaccion[faccionid][0][2]    = strval(FaccionDataSlots[9]);
	WeaponsFaccion[faccionid][0][3]    = strval(FaccionDataSlots[10]);
	WeaponsFaccion[faccionid][0][4]    = strval(FaccionDataSlots[11]);
	WeaponsFaccion[faccionid][0][5]    = strval(FaccionDataSlots[12]);
	WeaponsFaccion[faccionid][0][6]    = strval(FaccionDataSlots[13]);
	WeaponsFaccion[faccionid][0][7]    = strval(FaccionDataSlots[14]);
	WeaponsFaccion[faccionid][0][8]    = strval(FaccionDataSlots[15]);
	WeaponsFaccion[faccionid][0][9]    = strval(FaccionDataSlots[16]);

	WeaponsFaccion[faccionid][1][0]    = strval(FaccionDataSlots[17]);
	WeaponsFaccion[faccionid][1][1]    = strval(FaccionDataSlots[18]);
	WeaponsFaccion[faccionid][1][2]    = strval(FaccionDataSlots[19]);
	WeaponsFaccion[faccionid][1][3]    = strval(FaccionDataSlots[20]);
	WeaponsFaccion[faccionid][1][4]    = strval(FaccionDataSlots[21]);
	WeaponsFaccion[faccionid][1][5]    = strval(FaccionDataSlots[22]);
	WeaponsFaccion[faccionid][1][6]    = strval(FaccionDataSlots[23]);
	WeaponsFaccion[faccionid][1][7]    = strval(FaccionDataSlots[24]);
	WeaponsFaccion[faccionid][1][8]    = strval(FaccionDataSlots[25]);
	WeaponsFaccion[faccionid][1][9]    = strval(FaccionDataSlots[26]);

	AmmoFaccion[faccionid][0][0]    = strval(FaccionDataSlots[27]);
	AmmoFaccion[faccionid][0][1]    = strval(FaccionDataSlots[28]);
	AmmoFaccion[faccionid][0][2]    = strval(FaccionDataSlots[29]);
	AmmoFaccion[faccionid][0][3]    = strval(FaccionDataSlots[30]);
	AmmoFaccion[faccionid][0][4]    = strval(FaccionDataSlots[31]);
	AmmoFaccion[faccionid][0][5]    = strval(FaccionDataSlots[32]);
	AmmoFaccion[faccionid][0][6]    = strval(FaccionDataSlots[33]);
	AmmoFaccion[faccionid][0][7]    = strval(FaccionDataSlots[34]);
	AmmoFaccion[faccionid][0][8]    = strval(FaccionDataSlots[35]);
	AmmoFaccion[faccionid][0][9]    = strval(FaccionDataSlots[36]);

	AmmoFaccion[faccionid][1][0]    = strval(FaccionDataSlots[37]);
	AmmoFaccion[faccionid][1][1]    = strval(FaccionDataSlots[38]);
	AmmoFaccion[faccionid][1][2]    = strval(FaccionDataSlots[39]);
	AmmoFaccion[faccionid][1][3]    = strval(FaccionDataSlots[40]);
	AmmoFaccion[faccionid][1][4]    = strval(FaccionDataSlots[41]);
	AmmoFaccion[faccionid][1][5]    = strval(FaccionDataSlots[42]);
	AmmoFaccion[faccionid][1][6]    = strval(FaccionDataSlots[43]);
	AmmoFaccion[faccionid][1][7]    = strval(FaccionDataSlots[44]);
	AmmoFaccion[faccionid][1][8]    = strval(FaccionDataSlots[45]);
	AmmoFaccion[faccionid][1][9]    = strval(FaccionDataSlots[46]);

	FaccionesChaleco[faccionid][0][0]    = floatstr(FaccionDataSlots[47]);
	FaccionesChaleco[faccionid][0][1]    = floatstr(FaccionDataSlots[48]);
	FaccionesChaleco[faccionid][0][2]    = floatstr(FaccionDataSlots[49]);
	FaccionesChaleco[faccionid][0][3]    = floatstr(FaccionDataSlots[50]);

	FaccionesChaleco[faccionid][1][0]    = floatstr(FaccionDataSlots[51]);
	FaccionesChaleco[faccionid][1][1]    = floatstr(FaccionDataSlots[52]);
	FaccionesChaleco[faccionid][1][2]    = floatstr(FaccionDataSlots[53]);
	FaccionesChaleco[faccionid][1][3]    = floatstr(FaccionDataSlots[54]);

	FaccionData[faccionid][Drogas][0]    = strval(FaccionDataSlots[55]);
	FaccionData[faccionid][Drogas][1]    = strval(FaccionDataSlots[56]);

	FaccionData[faccionid][Ganzuas][0]   = strval(FaccionDataSlots[57]);
	FaccionData[faccionid][Ganzuas][1]   = strval(FaccionDataSlots[58]);

	FaccionData[faccionid][Bombas][0]    = strval(FaccionDataSlots[59]);
	FaccionData[faccionid][Bombas][1]    = strval(FaccionDataSlots[60]);

	new ActTextDraw[150];
	if ( strlen(FaccionData[faccionid][Lider]) > 2 )
	{
	    format(ActTextDraw, sizeof(ActTextDraw), "~B~Lugar: ~W~%s ~N~~G~Propietario: ~W~%s", FaccionData[faccionid][NameFaccion], FaccionData[faccionid][Lider]);
	}
	else
	{
	    format(ActTextDraw, sizeof(ActTextDraw), "~B~Lugar: ~W~%s ~N~~G~Propietario: ~W~Nadie", FaccionData[faccionid][NameFaccion]);
	}

	LoadPickupsMisc();
	LoadPickupsAlmacenes();

	FaccionTextDraws[faccionid] = TextDrawCreateEx(200.0, 380.0, ActTextDraw);
	TextDrawUseBox(FaccionTextDraws[faccionid], 1);
	TextDrawBackgroundColor(FaccionTextDraws[faccionid] ,0x000000FF);
	TextDrawBoxColor(FaccionTextDraws[faccionid], 0x00000066);
	TextDrawTextSize(FaccionTextDraws[faccionid], 350.0, 380.0);
	TextDrawSetShadow(FaccionTextDraws[faccionid], 1);
	TextDrawLetterSize(FaccionTextDraws[faccionid], 0.5 , 1.2);
}

public SaveDataFaccion(faccionid)
{
	new TempDirFaccion[25];
    format(TempDirFaccion, sizeof(TempDirFaccion), "%s%i.ulp", DIR_FACCIONES, faccionid);

    new FaccionDataALL[MAX_PLAYER_DATA];
 	format(FaccionDataALL, MAX_PLAYER_DATA, "%s|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%i|%f|%f|%f|%f|%f|%f|%f|%f|%i|%i|%i|%i|%i|%i|",
 	FaccionData[faccionid][Lider],
	FaccionData[faccionid][Deposito],
	FaccionData[faccionid][Almacen][0],
	FaccionData[faccionid][Almacen][1],
	FaccionData[faccionid][LockA][0],
	FaccionData[faccionid][LockA][1],
	FaccionData[faccionid][Lock],
	WeaponsFaccion[faccionid][0][0],
	WeaponsFaccion[faccionid][0][1],
	WeaponsFaccion[faccionid][0][2],
	WeaponsFaccion[faccionid][0][3],
	WeaponsFaccion[faccionid][0][4],
	WeaponsFaccion[faccionid][0][5],
	WeaponsFaccion[faccionid][0][6],
	WeaponsFaccion[faccionid][0][7],
	WeaponsFaccion[faccionid][0][8],
	WeaponsFaccion[faccionid][0][9],
	WeaponsFaccion[faccionid][1][0],
	WeaponsFaccion[faccionid][1][1],
	WeaponsFaccion[faccionid][1][2],
	WeaponsFaccion[faccionid][1][3],
	WeaponsFaccion[faccionid][1][4],
	WeaponsFaccion[faccionid][1][5],
	WeaponsFaccion[faccionid][1][6],
	WeaponsFaccion[faccionid][1][7],
	WeaponsFaccion[faccionid][1][8],
	WeaponsFaccion[faccionid][1][9],
	AmmoFaccion[faccionid][0][0],
	AmmoFaccion[faccionid][0][1],
	AmmoFaccion[faccionid][0][2],
	AmmoFaccion[faccionid][0][3],
	AmmoFaccion[faccionid][0][4],
	AmmoFaccion[faccionid][0][5],
	AmmoFaccion[faccionid][0][6],
	AmmoFaccion[faccionid][0][7],
	AmmoFaccion[faccionid][0][8],
	AmmoFaccion[faccionid][0][9],
	AmmoFaccion[faccionid][1][0],
	AmmoFaccion[faccionid][1][1],
	AmmoFaccion[faccionid][1][2],
	AmmoFaccion[faccionid][1][3],
	AmmoFaccion[faccionid][1][4],
	AmmoFaccion[faccionid][1][5],
	AmmoFaccion[faccionid][1][6],
	AmmoFaccion[faccionid][1][7],
	AmmoFaccion[faccionid][1][8],
	AmmoFaccion[faccionid][1][9],
	FaccionesChaleco[faccionid][0][0],
	FaccionesChaleco[faccionid][0][1],
	FaccionesChaleco[faccionid][0][2],
	FaccionesChaleco[faccionid][0][3],
	FaccionesChaleco[faccionid][1][0],
	FaccionesChaleco[faccionid][1][1],
	FaccionesChaleco[faccionid][1][2],
	FaccionesChaleco[faccionid][1][3],
	FaccionData[faccionid][Drogas][0],
	FaccionData[faccionid][Drogas][1],
	FaccionData[faccionid][Ganzuas][0],
	FaccionData[faccionid][Ganzuas][1],
	FaccionData[faccionid][Bombas][0],
	FaccionData[faccionid][Bombas][1]);

	new File:SaveFaccion = fopen(TempDirFaccion, io_write);
	fwrite(SaveFaccion, FaccionDataALL);
	fclose(SaveFaccion);
}
public SendChatStream(playerid, text[])
{
	new Float:X, Float:Y, Float:Z;
	new MsgSendChat[MAX_TEXT_CHAT];
	GetPlayerPos(playerid,X,Y,Z);
	if ( CallCNN == playerid || PlayersDataOnline[playerid][IsDescolgado] && PlayersDataOnline[playerid][InCall] != -1 && PlayersDataOnline[playerid][InCall] != 888 &&
		 PlayersDataOnline[PlayersDataOnline[playerid][InCall]][IsDescolgado])
	{
	    new MsgSendChatAdmin[MAX_TEXT_CHAT];
	    if ( CallCNN != playerid )
	    {
	        if (PlayersDataOnline[PlayersDataOnline[playerid][InCall]][Altavoz])
	        {
	            new MsgSendChatNormal[MAX_TEXT_CHAT];
				format(MsgSendChatAdmin, sizeof(MsgSendChatAdmin), " [Altavoz]: %s [%s] (([%i]))", text,  PlayersDataOnline[PlayersDataOnline[playerid][InCall]][NameOnlineFix], playerid);
				format(MsgSendChatNormal, sizeof(MsgSendChatNormal), " [Altavoz]: %s [%s]", text, PlayersDataOnline[PlayersDataOnline[playerid][InCall]][NameOnlineFix]);
			    new Float:PosALTAVOZ[3]; GetPlayerPos(PlayersDataOnline[playerid][InCall], PosALTAVOZ[0], PosALTAVOZ[1], PosALTAVOZ[2]);
				for (new i = 0; i < MAX_PLAYERS; i++)
				{
				    if ( IsPlayerConnected(i) && PlayersData[i][Admin] >= 1 && PlayersDataOnline[i][State] == 3)
				    {
			            SendChatStreamAnonymousPlayerid(i, MsgSendChatAdmin, GetPlayerVirtualWorld(PlayersDataOnline[playerid][InCall]), PosALTAVOZ[0], PosALTAVOZ[1], PosALTAVOZ[2]);
				    }
				    else
				    {
			            SendChatStreamAnonymousPlayerid(i, MsgSendChatNormal, GetPlayerVirtualWorld(PlayersDataOnline[playerid][InCall]), PosALTAVOZ[0], PosALTAVOZ[1], PosALTAVOZ[2]);
					}
				}
			}
			else
			{
				format(MsgSendChat, sizeof(MsgSendChat), "[Móvil]: %s", text);
				SendClientMessage(PlayersDataOnline[playerid][InCall], COLOR_DE_WISPEO, MsgSendChat);
			}
		}
		else
		{
			format(MsgSendChat, sizeof(MsgSendChat), "[Línea Telefónica]: %s", text);
			format(MsgSendChatAdmin, sizeof(MsgSendChatAdmin), "[Línea Telefónica]: %s (([%i]))", text, playerid);
			for (new i = 0; i < MAX_PLAYERS; i++)
			{
				if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersDataOnline[i][StateChannelCNN])
				{
				    if ( PlayersData[i][Admin] >= 1 )
				    {
				        SendClientMessage(i, COLOR_DE_TRANSMISION, MsgSendChatAdmin);
				    }
				    else
				    {
				        SendClientMessage(i, COLOR_DE_TRANSMISION, MsgSendChat);
					}
				}
			}
		}
		format(MsgSendChat, sizeof(MsgSendChat), "%s [Móvil]: %s", PlayersDataOnline[playerid][NameOnlineFix], text);
	}
	else
	{
		format(MsgSendChat, sizeof(MsgSendChat), "%s Dice: %s", PlayersDataOnline[playerid][NameOnlineFix], text);
	}
    new MyWorrld = GetPlayerVirtualWorld(playerid);
	for(new i=0;i<MAX_PLAYERS;i++)
	{
	    if(IsPlayerConnected(i) && IsPlayerInRangeOfPoint(i,30.0,X,Y,Z) && GetPlayerVirtualWorld(i) == MyWorrld)
	    {
		    if(IsPlayerInRangeOfPoint(i,5.0,X,Y,Z))
		    {
		    	SendClientMessage(i, SendChatStreamColors[0],MsgSendChat);
			}
		    else if(IsPlayerInRangeOfPoint(i,10.0,X,Y,Z))
		    {
		    	SendClientMessage(i, SendChatStreamColors[1],MsgSendChat);
			}
		    else if(IsPlayerInRangeOfPoint(i,15.0,X,Y,Z))
		    {
		    	SendClientMessage(i, SendChatStreamColors[2],MsgSendChat);
			}
		    else if(IsPlayerInRangeOfPoint(i,20.0,X,Y,Z))
		    {
		    	SendClientMessage(i, SendChatStreamColors[3],MsgSendChat);
			}
		    else if(IsPlayerInRangeOfPoint(i,25.0,X,Y,Z))
		    {
		    	SendClientMessage(i, SendChatStreamColors[4],MsgSendChat);
			}
		    else if(IsPlayerInRangeOfPoint(i,30.0,X,Y,Z))
		    {
		    	SendClientMessage(i, SendChatStreamColors[5],MsgSendChat);
			}
		}
	}
}
public SendChatStreamNormal(playerid, text[], type[])
{
	new Float:X, Float:Y, Float:Z;
	new MsgSendChat[MAX_TEXT_CHAT];
	GetPlayerPos(playerid,X,Y,Z);
	format(MsgSendChat, sizeof(MsgSendChat), "%s %s %s", PlayersDataOnline[playerid][NameOnlineFix], type, text);
    new MyWorrld = GetPlayerVirtualWorld(playerid);
	for(new i=0;i<MAX_PLAYERS;i++)
	{
	    if(IsPlayerConnected(i) && IsPlayerInRangeOfPoint(i,30.0,X,Y,Z) && GetPlayerVirtualWorld(i) == MyWorrld)
	    {
		    if(IsPlayerInRangeOfPoint(i,5.0,X,Y,Z))
		    {
		    	SendClientMessage(i, SendChatStreamColors[0],MsgSendChat);
			}
		    else if(IsPlayerInRangeOfPoint(i,10.0,X,Y,Z))
		    {
		    	SendClientMessage(i, SendChatStreamColors[1],MsgSendChat);
			}
		    else if(IsPlayerInRangeOfPoint(i,15.0,X,Y,Z))
		    {
		    	SendClientMessage(i, SendChatStreamColors[2],MsgSendChat);
			}
		    else if(IsPlayerInRangeOfPoint(i,20.0,X,Y,Z))
		    {
		    	SendClientMessage(i, SendChatStreamColors[3],MsgSendChat);
			}
		    else if(IsPlayerInRangeOfPoint(i,25.0,X,Y,Z))
		    {
		    	SendClientMessage(i, SendChatStreamColors[4],MsgSendChat);
			}
		    else if(IsPlayerInRangeOfPoint(i,30.0,X,Y,Z))
		    {
		    	SendClientMessage(i, SendChatStreamColors[5],MsgSendChat);
			}
		}
	}
}
public SendChatStreamAnonymousPlayerid(playerid, text[], WorldStream, Float:X, Float:Y, Float:Z)
{
    if(IsPlayerConnected(playerid) && IsPlayerInRangeOfPoint(playerid,30.0,X,Y,Z) && GetPlayerVirtualWorld(playerid) == WorldStream && PlayersDataOnline[playerid][State] == 3)
    {
	    if(IsPlayerInRangeOfPoint(playerid,5.0,X,Y,Z))
	    {
	    	SendClientMessage(playerid, SendChatStreamColors[0],text);
		}
	    else if(IsPlayerInRangeOfPoint(playerid,10.0,X,Y,Z))
	    {
	    	SendClientMessage(playerid, SendChatStreamColors[1],text);
		}
	    else if(IsPlayerInRangeOfPoint(playerid,15.0,X,Y,Z))
	    {
	    	SendClientMessage(playerid, SendChatStreamColors[2],text);
		}
	    else if(IsPlayerInRangeOfPoint(playerid,20.0,X,Y,Z))
	    {
	    	SendClientMessage(playerid, SendChatStreamColors[3],text);
		}
	    else if(IsPlayerInRangeOfPoint(playerid,25.0,X,Y,Z))
	    {
	    	SendClientMessage(playerid, SendChatStreamColors[4],text);
		}
	    else if(IsPlayerInRangeOfPoint(playerid,30.0,X,Y,Z))
	    {
	    	SendClientMessage(playerid, SendChatStreamColors[5],text);
		}
	}
}
public SendChatStreamGritar(playerid, text[])
{
    new TextAccion[150];
	format(TextAccion, sizeof(TextAccion), "* %s Grita: %s!!", PlayersDataOnline[playerid][NameOnlineFix], text);
    new WorldStream = GetPlayerVirtualWorld(playerid);
    new Float:X, Float:Y, Float:Z;  GetPlayerPos(playerid, X, Y, Z);

	for(new i=0;i<MAX_PLAYERS;i++)
	{
	    if(IsPlayerConnected(i) && IsPlayerInRangeOfPoint(i,50.0,X,Y,Z) && GetPlayerVirtualWorld(i) == WorldStream && PlayersDataOnline[i][State] == 3)
	    {
		    if(IsPlayerInRangeOfPoint(i,5.0,X,Y,Z))
		    {
		    	SendClientMessage(i, SendChatStreamColors[0],TextAccion);
			}
		    else if(IsPlayerInRangeOfPoint(i,10.0,X,Y,Z))
		    {
		    	SendClientMessage(i, SendChatStreamColors[1],TextAccion);
			}
		    else if(IsPlayerInRangeOfPoint(i,20.0,X,Y,Z))
		    {
		    	SendClientMessage(i, SendChatStreamColors[2],TextAccion);
			}
		    else if(IsPlayerInRangeOfPoint(i,30.0,X,Y,Z))
		    {
		    	SendClientMessage(i, SendChatStreamColors[3],TextAccion);
			}
		    else if(IsPlayerInRangeOfPoint(i,40.0,X,Y,Z))
		    {
		    	SendClientMessage(i, SendChatStreamColors[4],TextAccion);
			}
		    else if(IsPlayerInRangeOfPoint(i,50.0,X,Y,Z))
		    {
		    	SendClientMessage(i, SendChatStreamColors[5],TextAccion);
			}
		}
	}
}
public SendChatStreamAnonymous(text[], WorldStream, Float:X, Float:Y, Float:Z)
{
	for(new i=0;i<MAX_PLAYERS;i++)
	{
	    if(IsPlayerConnected(i) && IsPlayerInRangeOfPoint(i,30.0,X,Y,Z) && GetPlayerVirtualWorld(i) == WorldStream && PlayersDataOnline[i][State] == 3)
	    {
		    if(IsPlayerInRangeOfPoint(i,5.0,X,Y,Z))
		    {
		    	SendClientMessage(i, SendChatStreamColors[0],text);
			}
		    else if(IsPlayerInRangeOfPoint(i,10.0,X,Y,Z))
		    {
		    	SendClientMessage(i, SendChatStreamColors[1],text);
			}
		    else if(IsPlayerInRangeOfPoint(i,15.0,X,Y,Z))
		    {
		    	SendClientMessage(i, SendChatStreamColors[2],text);
			}
		    else if(IsPlayerInRangeOfPoint(i,20.0,X,Y,Z))
		    {
		    	SendClientMessage(i, SendChatStreamColors[3],text);
			}
		    else if(IsPlayerInRangeOfPoint(i,25.0,X,Y,Z))
		    {
		    	SendClientMessage(i, SendChatStreamColors[4],text);
			}
		    else if(IsPlayerInRangeOfPoint(i,30.0,X,Y,Z))
		    {
		    	SendClientMessage(i, SendChatStreamColors[5],text);
			}
		}
	}
}
public Acciones(playerid, type, text[])
{
	new MsgAcciones[150];
	switch (type)
	{
	    case 0: // 0 - ME - LILA
	    {
			format(MsgAcciones, sizeof(MsgAcciones), "* %s %s", PlayersDataOnline[playerid][NameOnlineFix], text);
		}
	    case 1: // 1 - AME - AMARILLO
	    {
			format(MsgAcciones, sizeof(MsgAcciones), "%s [ID:%i]", text, playerid);
		}
	    case 2: // 2 - INTENTAR OK - VERDE
	    {
			format(MsgAcciones, sizeof(MsgAcciones), "* %s intentó %s, y consiguió hacerlo!", PlayersDataOnline[playerid][NameOnlineFix], text);
		}
	    case 3: // 3 - INTENTAR FAIL - ROJO
	    {
			format(MsgAcciones, sizeof(MsgAcciones), "* %s intentó %s, y no consiguió hacerlo.", PlayersDataOnline[playerid][NameOnlineFix], text);
		}
	    case 4: // 4 - GRITAR - BLANCO
	    {
			format(MsgAcciones, sizeof(MsgAcciones), "* %s Grita: %s!!", PlayersDataOnline[playerid][NameOnlineFix], text);
		}
	    case 5: // 5 - SUSURRAR - BLANCO
	    {
			format(MsgAcciones, sizeof(MsgAcciones), "* %s Susurra: %s", PlayersDataOnline[playerid][NameOnlineFix], text);
		}
	    case 6: // 6 - CANAL OOC - MEDIO GRIS
	    {
			format(MsgAcciones, sizeof(MsgAcciones), "[OOC] %s: (( %s ))", PlayersDataOnline[playerid][NameOnlineFix], text);
		}
	    case 7: // 7 - AME FIX - AMARILLO
	    {
			format(MsgAcciones, sizeof(MsgAcciones), "%s [ID:%i]*", text, playerid);
		}
	    case 8: // 8 - ME FIX - LILA
	    {
			format(MsgAcciones, sizeof(MsgAcciones), "** %s %s", PlayersDataOnline[playerid][NameOnlineFix], text);
		}
	    case 9: // 9 - MEGAFONO
	    {
			format(MsgAcciones, sizeof(MsgAcciones), "* %s [Megáfono]: %s!!!", PlayersDataOnline[playerid][NameOnlineFix], text);
		}
	}

    new Float:PosMensajeX, Float:PosMensajeY, Float:PosMensajeZ;
    GetPlayerPos(playerid, Float:PosMensajeX, Float:PosMensajeY, Float:PosMensajeZ);
    new MyWorrld = GetPlayerVirtualWorld(playerid);
	for ( new i = 0; i < MAX_PLAYERS; i++ )
	{
		if ( IsPlayerConnected(i) && IsPlayerInRangeOfPoint(
			i,
			AccionesRadios[type],
			Float:PosMensajeX,
			Float:PosMensajeY,
			Float:PosMensajeZ) && GetPlayerVirtualWorld(i) == MyWorrld &&
			PlayersDataOnline[i][State] == 3)
		{
			SendClientMessage(i, AccionesColors[type], MsgAcciones);
		}
	}
	print(MsgAcciones);
}
public IsPlayerNear(myplayerid, playerid, iderror1[], iderror2[], iderror3[], stringerror1[], stringerror2[], stringerror3[])
{
	if ( myplayerid != playerid )
	{
		if ( IsPlayerConnected(playerid) )
		{
			if (PlayersDataOnline[playerid][State] == 3)
			{
			    new Float:MyPos[3];
			    GetPlayerPos(myplayerid, MyPos[0], MyPos[1], MyPos[2]);
			    if ( IsPlayerInRangeOfPoint(playerid, 4.0, MyPos[0], MyPos[1], MyPos[2]) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(myplayerid)  )
			    {
			        return true;
	   			}
	   			else
	   			{
					SendInfoMessage(myplayerid, 0, iderror3, stringerror3);
				}
			}
			else
			{
				SendInfoMessage(myplayerid, 0, iderror2, stringerror2);
			}
		}
		else
		{
			SendInfoMessage(myplayerid, 0, iderror1, stringerror1);
		}
	}
	else
	{
		SendInfoMessage(myplayerid, 0, "213", "Has introducído tu misma ID");
	}
	return false;
}
public GetMaxFaccionRango(faccionid)
{
	new i;
	for (;i < MAX_FACCION_RANGOS; i++)
	{
		if ( FaccionData[faccionid][Paga][i] == 0 )
		{
			break;
		}
	}
	return i - 1;
}
public GetMaxFaccionRangoSkin(faccionid, rangoid)
{
	new i;
	for (;i < MAX_FACCION_SKIN; i++)
	{
		if ( RangosSkins[faccionid][rangoid][i] == 0 )
		{
			break;
		}
	}
	return i - 1;

}
public GetPlayerStats(playerid, playeridshow)
{
	SendClientMessage(playeridshow, COLOR_TITULO_DE_AYUDA, "|»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»» Estadísticas ««««««««««««««««««««««««««««««««««««««««««««««««|");
	new StatsStrings[256];
	new Float:Vida1, Float:Chaleco1;
	GetPlayerHealth(playerid, Vida1);
	GetPlayerArmour(playerid, Chaleco1);

	format(StatsStrings, 255, "ID: %i | Nombre: %s | Interior: %i | Mundo: %i | Warns: %i | Nivel: %i | Falta: [%i/%i]",
			playerid,
			PlayersDataOnline[playerid][NameOnline],
			GetPlayerInteriorEx(playerid),
			GetPlayerVirtualWorld(playerid),
			PlayersData[playerid][Warn],
			GetPlayerScoreEx(playerid),
            GetPlayerScoreMin(playerid),
            GetPlayerScoreMax(playerid)
	);
	SendInfoMessage(playeridshow, 1, StatsStrings, "Estadísticas: ");
	format(StatsStrings, sizeof(StatsStrings), "Horas Jugadas: %i | Edad: %i | Cansansio: %i/54 | Móvil: %i | Ciudad: %s",
			PlayersData[playerid][HoursPlaying],
			PlayersData[playerid][Edad],
			PlayersData[playerid][Cansansio],
			PlayersData[playerid][Phone],
			Ciudades[PlayersData[playerid][Ciudad]]
	);
	SendInfoMessage(playeridshow, 1, StatsStrings, "Estadísticas: ");
	format(StatsStrings, sizeof(StatsStrings), "Sexo: %s | Skin: %i | Ganzúas: %i | Drogas: %i | Materiales: %i | Lata: %s | Bombas: %i",
		Sexos[PlayersData[playerid][Sexo]],
		PlayersData[playerid][Skin],
		PlayersData[playerid][Ganzuas],
		PlayersData[playerid][Drogas],
		PlayersData[playerid][Materiales],
		LataName[PlayersData[playerid][Lata]],
		PlayersData[playerid][Bombas]
	);
	SendInfoMessage(playeridshow, 1, StatsStrings, "Estadísticas: ");
	format(StatsStrings, sizeof(StatsStrings), "Facción: %s | Rango: %s | Dinero: $%i | Cuenta de Ahorros: $%i | Cuenta de Cheques: $%i",
		FaccionData[PlayersData[playerid][Faccion]][NameFaccion],
		FaccionesRangos[PlayersData[playerid][Faccion]][PlayersData[playerid][Rango]],
		PlayersData[playerid][Dinero],
		PlayersData[playerid][Banco],
		Banking[playerid][Balance]
	);
	SendInfoMessage(playeridshow, 1, StatsStrings, "Estadísticas: ");
	format(StatsStrings, sizeof(StatsStrings), "Habilidad: %s | Casado: %s | Hablar: %s | Caminar: %s | Saldo: $%i | Bolsa: %s",
		HabilidadesName[PlayersData[playerid][Habilidad]],
		PlayersData[playerid][GirlFreind],
		ModeTalkName[PlayersData[playerid][MyStyleTalk]],
		ModeWalkName[PlayersData[playerid][MyStyleWalk]],
//		ModeSprintName[PlayersData[playerid][MyStyleSprint]],
		PlayersData[playerid][Saldo],
		SiOrNo[PlayersData[playerid][HaveBolsa]]
	);
	SendInfoMessage(playeridshow, 1, StatsStrings, "Estadísticas: ");
	format(StatsStrings, sizeof(StatsStrings), "Muerto: %i | Muertos: %i | Vehículo 1: %s | Vehículo 2: %s | Vehículo 3: %s",
		PlayersData[playerid][DeahtCount],
		PlayersData[playerid][KilledCount],
		/*Vida1, Vida: %.2f | Chaleco: %.2f
		Chaleco1,*/
		DataCars[PlayersData[playerid][Asignados][0]][MatriculaString],
		DataCars[PlayersData[playerid][Asignados][1]][MatriculaString],
		DataCars[PlayersData[playerid][Asignados][2]][MatriculaString]
	);
	SendInfoMessage(playeridshow, 1, StatsStrings, "Estadísticas: ");
	format(StatsStrings, sizeof(StatsStrings), "Enfermedad: %s | Horas de trabajo: %i | Email: %s | Audio: %s | Trabajo: %s",
		EnfermedadName[PlayersData[playerid][Enfermedad]],
		PlayersData[playerid][HorasWork],
		PlayersData[playerid][Email],
		SiOrNo[PlayersDataOnline[playerid][IsAudio]],
		Jobs[PlayersData[playerid][Job]][NameJob]
	);
	SendInfoMessage(playeridshow, 1, StatsStrings, "Estadísticas: ");
	format(StatsStrings, sizeof(StatsStrings), "Spawn Facción: %i | Número de cuenta Bancaria: %i",
		PlayersData[playerid][SpawnFac] + 1,
		PlayersData[playerid][AccountBankingOpen]
	);
	SendInfoMessage(playeridshow, 1, StatsStrings, "Estadísticas: ");
}
public IsCheatMoney(playerid, lastmoney)
{
	if ( lastmoney > PlayersData[playerid][Dinero] )
	{
		new MsgAviso[MAX_TEXT_CHAT];
	    format(MsgAviso, sizeof(MsgAviso), "%s AntiCheat-Money - %s[%i] posible cheat de money. Datos: Dinero encima: $%i Dinero AntiCheat: $%i.", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline], playerid, lastmoney, PlayersData[playerid][Dinero]);
	    MsgCheatsReportsToAdmins(MsgAviso);
    }
}
public SendMessageRadioGeneral(playerid, text[])
{
	new MsgRadio[MAX_TEXT_CHAT];
	format(MsgRadio, sizeof(MsgRadio), "***[%s] %s %s Radio General: %s, corto.", FaccionData[PlayersData[playerid][Faccion]][NameFaccion], FaccionesRangos[PlayersData[playerid][Faccion]][PlayersData[playerid][Rango]], PlayersDataOnline[playerid][NameOnlineFix], text);
	for (new i = 0; i < MAX_PLAYERS; i++)
	{
		if ( i != playerid && IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && (PlayersData[i][Faccion] == LSPD || PlayersData[i][Faccion] == SFPD) )
		{
			SendClientMessage(i, COLOR_RADIO, MsgRadio);
		}
	}
	SendChatStreamNormal(playerid, text, "[Radio General]:");
	print(MsgRadio);
}
public SendMessageRadioGeneralSAMD(playerid, text[])
{
	new MsgRadio[MAX_TEXT_CHAT];
	format(MsgRadio, sizeof(MsgRadio), "***[%s] %s %s Radio General: %s, corto.", FaccionData[PlayersData[playerid][Faccion]][NameFaccion], FaccionesRangos[PlayersData[playerid][Faccion]][PlayersData[playerid][Rango]], PlayersDataOnline[playerid][NameOnlineFix], text);
	for (new i = 0; i < MAX_PLAYERS; i++)
	{
		if ( i != playerid && IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && (PlayersData[i][Faccion] == SFMD || PlayersData[i][Faccion] == LSMD) )
		{
			SendClientMessage(i, COLOR_RADIO, MsgRadio);
		}
	}
	SendChatStreamNormal(playerid, text, "[Radio General]:");
	print(MsgRadio);
}
public SendMessageRadio(playerid, frecuencia, text[])
{
	new MsgRadio[MAX_TEXT_CHAT];
	format(MsgRadio, sizeof(MsgRadio), "*** %s %s radio Frecuencia[%i]: %s, corto.", FaccionesRangos[PlayersData[playerid][Faccion]][PlayersData[playerid][Rango]], PlayersDataOnline[playerid][NameOnlineFix], frecuencia,text);
	for (new i = 0; i < MAX_PLAYERS; i++)
	{
		if ( i != playerid && IsPlayerConnected(i) && PlayersData[i][Faccion] == PlayersData[playerid][Faccion] && PlayersDataOnline[i][State] == 3  && PlayersDataOnline[i][StateChannelRadio] && PlayersDataOnline[i][Frecuencia] == frecuencia)
		{
			SendClientMessage(i, COLOR_RADIO, MsgRadio);
		}
	}
	SendChatStreamNormal(playerid, text, "[Radio]:");
	print(MsgRadio);
}
public SendMessageDM(playerid, text[])
{
	new MsgDM[MAX_TEXT_CHAT];
	format(MsgDM, sizeof(MsgDM), "* DM General %s: %s", PlayersDataOnline[playerid][NameOnlineFix], text);
	for (new i = 0; i < MAX_PLAYERS; i++)
	{
		if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersDataOnline[i][ModeDM] )
		{
			SendClientMessage(i, COLOR_DM, MsgDM);
		}
	}
	print(MsgDM);
}
public SendMessageFamily(playerid, text[])
{
	new MsgFamily[MAX_TEXT_CHAT];
	format(MsgFamily, sizeof(MsgFamily), "*** %s %s: %s", FaccionesRangos[PlayersData[playerid][Faccion]][PlayersData[playerid][Rango]], PlayersDataOnline[playerid][NameOnlineFix], text);
	for (new i = 0; i < MAX_PLAYERS; i++)
	{
		if ( IsPlayerConnected(i) && PlayersData[i][Faccion] == PlayersData[playerid][Faccion] && PlayersDataOnline[i][State] == 3  && PlayersDataOnline[i][StateChannelFamily])
		{
			SendClientMessage(i, COLOR_FAMILY, MsgFamily);
		}
	}
	print(MsgFamily);
}
public Comandos_Admin(Comando, playerid, playeridAC, LV, Cantidad_o_Tipo, String[])
{
	///////// COMANDOS DE LA ADMINISTRACIÓN
	switch (Comando)
	{
	    //		/ADMINON                		- Activarse como Admin
	    case 1:
	    {
	        SetPlayerColor(playerid, 0x0FFF00FF); // VERDE FOFORESENTE
			return 1;
		//		/A [TEXTO]              		- Canal de la administración
        }
        case 2:
        {

			new StringFormat[120];
			format(StringFormat, sizeof(StringFormat), "%s %s: %s",LOGO_STAFF, PlayersDataOnline[playerid][NameOnline], String);

			for (new i = 0; i < MAX_PLAYERS; i++)
			{
			    if ( IsPlayerConnected(i) && PlayersData[i][Admin] >= 1 && PlayersDataOnline[i][State] == 3 )
			    {
			        SendClientMessage(i, COLOR_OWNED_CHAT, StringFormat);
			    }
		    }
		    print(StringFormat);
			return 1;
        }
        //      /VIDA [ID]						- Llevar la vida a un jugador
        case 3:
        {
			new StringFormat[120];
			format(StringFormat, sizeof(StringFormat), "%s Has llenado la vida a %s[%i].", LOGO_STAFF, PlayersDataOnline[playeridAC][NameOnline], playeridAC);
			SetPlayerHealthEx(playeridAC, 100);
			if (playerid != playeridAC)
			{
                SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, StringFormat);
   	        }
   	        else
   	        {
   	            new msglife[120];
   	            format(msglife, sizeof(msglife), "%s Te has llenado la vida tú mismo.", LOGO_STAFF);
   	        	SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, msglife);
   	        }

	       	return 1;
        }
        // 		/CHALECO [ID]					- Llenar el chaleco a un jugador
        case 4:
  		{
			new StringFormat[120];
			format(StringFormat, sizeof(StringFormat), "%s Has llenado el chaleco a %s[%i].", LOGO_STAFF, PlayersDataOnline[playeridAC][NameOnline], playeridAC);

			SetPlayerArmourEx(playeridAC, 85);
			if (playerid != playeridAC)
			{
                SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, StringFormat);
   	        }
   	        else
   	        {
   	            new msgammon[120];
   	            format(msgammon, sizeof(msgammon), "%s Te has llenado el chaleco tú mismo.", LOGO_STAFF);
   	        	SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, msgammon);
   	        }

			return 1;
        }
        // 		/ESPECTAR [ID]					- Espectar a un jugador
        case 5:
        {       // 01 - Espectando
                // 02 - Desactivar espectar
            if (Cantidad_o_Tipo == 1)
            {
				SetPlayerSpectateToPlayer(playerid, playeridAC);
			}
			else if (Cantidad_o_Tipo == 2)
			{
			    if ( !RemoveSpectatePlayer(playerid) )
			    {
	    			SendInfoMessage(playerid, 0, "214", "No estas espectando a nadie, el comando [/Espectar] sin ID, indica volver a tu posición.");
			    }
			}
			return 1;
        }
        // 		/JAIL [ID] [RAZÓN]				- Jaliar a un jugador
        case 6:
        {
			new StringFormat[350];
			new StringFormatEX[350];
			if ( PlayersData[playeridAC][Jail] == 0 )
			{
				format(StringFormat, sizeof(StringFormat), "%s Han jaliado %i minutos a %s por %s. Razón: %s",LOGO_STAFF, Cantidad_o_Tipo, PlayersDataOnline[playeridAC][NameOnline], PlayersDataOnline[playerid][NameOnline], String);
				format(StringFormatEX, sizeof(StringFormatEX), "%s Has jaliado a %s[%i].",LOGO_STAFF, PlayersDataOnline[playeridAC][NameOnline], playeridAC);
			}
			else if ( Cantidad_o_Tipo != 0)
			{
				format(StringFormat, sizeof(StringFormat), "%s Han modificado el jail de %s a %i minutos por %s. Razón: %s",LOGO_STAFF, PlayersDataOnline[playeridAC][NameOnline], Cantidad_o_Tipo, PlayersDataOnline[playerid][NameOnline], String);
				format(StringFormatEX, sizeof(StringFormatEX), "%s Has modificado el jail de %s[%i].",LOGO_STAFF, PlayersDataOnline[playeridAC][NameOnline], playeridAC);
			}
			else if ( Cantidad_o_Tipo == 0)
			{
				format(StringFormat, sizeof(StringFormat), "%s Han quitado el jail a %s por %s. Razón: %s",LOGO_STAFF, PlayersDataOnline[playeridAC][NameOnline], PlayersDataOnline[playerid][NameOnline], String);
				format(StringFormatEX, sizeof(StringFormatEX), "%s Has quitado el jail a %s[%i].",LOGO_STAFF, PlayersDataOnline[playeridAC][NameOnline], playeridAC);
			}
            MsgKBJWReportsToAdmins(playeridAC, StringFormat);
            SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, StringFormatEX);
			ChangeHouseOrOther(playerid, 0);
			PlayersData[playeridAC][Jail] = gettime() + (Cantidad_o_Tipo * 60);
			PlayersData[playeridAC][IsInJail] = 2;
			SetPlayerJail(playeridAC);
        }
        // 		/KICK [ID] [Razón]				- Kikear a un jugador
        case 7:
        {
			new StringFormat[250];
			new StringFormatEX[100];
			format(StringFormat, sizeof(StringFormat), "%s Han kickeado a %s por %s. Razón: %s",LOGO_STAFF, PlayersDataOnline[playeridAC][NameOnline], PlayersDataOnline[playerid][NameOnline], String);
			format(StringFormatEX, sizeof(StringFormatEX), "%s Has kickeado a %s[%i].",LOGO_STAFF, PlayersDataOnline[playeridAC][NameOnline], playeridAC);
            MsgKBJWReportsToAdmins(playeridAC, StringFormat);
            SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, StringFormatEX);

			print(StringFormat);
			KickEx(playeridAC, 6);

            return 1;
        }
		//		/BAN [ID] [Razón]				- Banear a un jugador
        case 8:
        {
			new StringFormat[250];
			new StringFormatEX[100];
			format(StringFormat, sizeof(StringFormat), "%s Han baneado a %s por %s. Razón: %s",LOGO_STAFF, PlayersDataOnline[playeridAC][NameOnline], PlayersDataOnline[playerid][NameOnline], String);
			format(StringFormatEX, sizeof(StringFormatEX), "%s Has baneado a %s[%i].",LOGO_STAFF, PlayersDataOnline[playeridAC][NameOnline], playeridAC);
            MsgKBJWReportsToAdmins(playeridAC, StringFormat);
            SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, StringFormatEX);
            SendClientMessage(playeridAC, COLOR_MENSAJES_DE_AVISOS, "Ayuda: Recuerda sacar una Screen/Foto en este momento presionando la tecla \"F8\" será de mucha ayuda en su desban.");

			PlayersData[playeridAC][AccountState] = 3;
			BanEx(playeridAC, StringFormat);

            return 1;
        }
		// /REVISAR [ID]					- Revisar a un jugador
        case 9:
        {
   			new StringFormat9[350];
            new Float:Chaleco1;
   		    new Float:Vida1;
   		    new IPName[30];
			new Armas[13][2];
			for (new i = 0; i < 13; i++)
			{
				GetPlayerWeaponData(playeridAC, i, Armas[i][0], Armas[i][1]);
				format(StringFormat9, sizeof(StringFormat9), "SLOT [%i] Arma: %s || Munición: %i", i, SlotNameWeapon[Armas[i][0]], Armas[i][1]);
				SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, StringFormat9);
			}
			GetPlayerHealth(playeridAC, Vida1);
			GetPlayerArmour(playeridAC, Chaleco1);
			GetPlayerIp(playeridAC, IPName, sizeof(IPName));

			format(StringFormat9, sizeof(StringFormat9), "ID: [%i] || Nombre: %s || IP: %s ||Vida: %.2f || Chaleco: %.2f",
			playeridAC,
			PlayersDataOnline[playeridAC][NameOnline],
			IPName,
			Vida1,
			Chaleco1);
			SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, StringFormat9);
			format(StringFormat9, sizeof(StringFormat9), "Dinero: %i || Banco: %i || Facción: %s || Rango: %s",
			GetPlayerMoney(playeridAC),
			PlayersData[playeridAC][Banco],
			FaccionData[PlayersData[playeridAC][Faccion]][NameFaccion],
			FaccionesRangos[PlayersData[playeridAC][Faccion]][PlayersData[playeridAC][Rango]]);
			SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, StringFormat9);
			return 1;
        }
		// 		/TRAER [ID]						- Traer un jugador a tu posición
        case 10:
        {
			new StringFormat[120];
			new StringFormatEX[100];
			format(StringFormat, sizeof(StringFormat), "%s %s te ha teletrasportado a su posición.",LOGO_STAFF, PlayersDataOnline[playerid][NameOnline]);
			format(StringFormatEX, sizeof(StringFormatEX), "%s Has traido hacia a tí a %s [%i]",LOGO_STAFF, PlayersDataOnline[playeridAC][NameOnline], playeridAC);

			new Float:acX, Float:acY, Float:acZ;
			GetPlayerPos(playerid, acX, acY, acZ);
			if ( IsPlayerInAnyVehicle(playeridAC) && GetPlayerVehicleSeat(playeridAC) == 0 && GetPlayerInteriorEx(playerid) == 0 && GetPlayerInteriorEx(playeridAC) == 0)
			{
				new CocheTraer = GetPlayerVehicleID(playeridAC);
				SetVehiclePos(CocheTraer, acX, acY + 2, acZ + 1);
			}
			else
			{
			    if (IsPlayerInAnyVehicle(playeridAC))
			    {
				    PlayersDataOnline[playeridAC][StateMoneyPass] 	= gettime() + 5;
				}
				SetPlayerPos(playeridAC, acX, acY + 2, acZ + 1);
			}

			PlayersData[playeridAC][IsPlayerInBizz] 			= PlayersData[playerid][IsPlayerInBizz];
			ChangeHouseOrOther(playeridAC, PlayersData[playerid][IsPlayerInHouse]);
			PlayersData[playeridAC][IsPlayerInBank] 			= PlayersData[playerid][IsPlayerInBank];
			PlayersData[playeridAC][IsPlayerInGarage]      		= PlayersData[playerid][IsPlayerInGarage];
			PlayersData[playeridAC][IsPlayerInVehInt] 			= PlayersData[playerid][IsPlayerInVehInt];

			SetPlayerInteriorEx(playeridAC, GetPlayerInteriorEx(playerid));
			SetPlayerVirtualWorldEx(playeridAC, GetPlayerVirtualWorld(playerid));

            SendClientMessage(playeridAC, COLOR_MENSAJES_DE_AVISOS, StringFormat);
            SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, StringFormatEX);
			return 1;
        }
		//		/IR [ID]						- Ir a la poición de un jugador
        case 11:
        {
			new StringFormat[120];
			new StringFormatEX[100];
			format(StringFormat, sizeof(StringFormat), "%s %s se ha teletrasportado a tu posición.",LOGO_STAFF, PlayersDataOnline[playerid][NameOnline]);
			format(StringFormatEX, sizeof(StringFormatEX), "%s Has ido hacia %s [%i]",LOGO_STAFF, PlayersDataOnline[playeridAC][NameOnline], playeridAC);


            new Float:meX, Float:meY, Float:meZ;
			GetPlayerPos(playeridAC, meX, meY, meZ);

			if ( IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) == 0 && GetPlayerInteriorEx(playeridAC) == 0 && GetPlayerInteriorEx(playerid) == 0)
			{
				new CocheTraer = GetPlayerVehicleID(playerid);
				SetVehiclePos(CocheTraer, meX, meY + 2, meZ + 1);
			}
			else
			{
			    if (IsPlayerInAnyVehicle(playerid))
			    {
				    PlayersDataOnline[playerid][StateMoneyPass] 	= gettime() + 5;
				}
				SetPlayerPos(playerid, meX, meY + 2, meZ + 1);
			}

			PlayersData[playerid][IsPlayerInBizz] 				= PlayersData[playeridAC][IsPlayerInBizz];
			ChangeHouseOrOther(playerid, PlayersData[playeridAC][IsPlayerInHouse]);
			PlayersData[playerid][IsPlayerInBank] 				= PlayersData[playeridAC][IsPlayerInBank];
			PlayersData[playerid][IsPlayerInGarage] 			= PlayersData[playeridAC][IsPlayerInGarage];
			PlayersData[playerid][IsPlayerInVehInt] 			= PlayersData[playeridAC][IsPlayerInVehInt];


            SetPlayerInteriorEx(playerid, GetPlayerInteriorEx(playeridAC));
			SetPlayerVirtualWorldEx(playerid, GetPlayerVirtualWorld(playeridAC));

            SendClientMessage(playeridAC, COLOR_MENSAJES_DE_AVISOS, StringFormat);
            SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, StringFormatEX);
			return 1;
        }
		//		/LIMPIAR[ID]                   - Quitar todas las armas a un jugador
		case 12:
		{
			new StringFormat[120];
			new StringFormatEX[100];
			format(StringFormat, sizeof(StringFormat), "%s %s te ha limpiado todas las armas.",LOGO_STAFF, PlayersDataOnline[playerid][NameOnline]);
			format(StringFormatEX, sizeof(StringFormatEX), "%s Has limpiado a %s [%i]",LOGO_STAFF, PlayersDataOnline[playeridAC][NameOnline], playeridAC);
            SendClientMessage(playeridAC, COLOR_MENSAJES_DE_AVISOS, StringFormat);
            SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, StringFormatEX);

            ResetPlayerWeaponsEx(playeridAC);
			new HaveTaser = GetObjectByType(playeridAC, TYPE_TASER);
			if ( HaveTaser != -1 )
			{
				RemoveObjectHoldToPlayer(playeridAC, -1, HaveTaser);
			}

            return 1;
		}
		//		/PARAR[ID]                     - Freezar a un jugador
		case 13:
		{ // 01 = Congelar
		  // 02 = Descongelar

			new StringFormat[120];
			new StringFormatEX[100];

			if (Cantidad_o_Tipo == 1)
			{
				format(StringFormat, sizeof(StringFormat), "%s %s Te ha congelado.",LOGO_STAFF, PlayersDataOnline[playerid][NameOnline]);
				format(StringFormatEX, sizeof(StringFormatEX), "%s Has congelado a %s [%i]",LOGO_STAFF, PlayersDataOnline[playeridAC][NameOnline], playeridAC);

				PlayersDataOnline[playeridAC][Freeze] = false;
		        TogglePlayerControllableEx(playeridAC, 0);
                SetPlayerArmedWeapon(playeridAC, 0);
		    }
		    else if ( Cantidad_o_Tipo == 2 )
		    {
				format(StringFormat, sizeof(StringFormat), "%s %s te ha descongelado.",LOGO_STAFF, PlayersDataOnline[playerid][NameOnline]);
				format(StringFormatEX, sizeof(StringFormatEX), "%s Has descongelado a %s [%i]",LOGO_STAFF, PlayersDataOnline[playeridAC][NameOnline], playeridAC);

				PlayersDataOnline[playeridAC][Freeze] = true;
            	TogglePlayerControllableEx(playeridAC, 1);
            }

            SendClientMessage(playeridAC, COLOR_MENSAJES_DE_AVISOS, StringFormat);
            SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, StringFormatEX);

            return 1;
		}
		//		/Matar [ID]                - Matar a un jugador
		case 14:
		{
			new StringFormat[120];
			new StringFormatEX[100];

			if ( playeridAC != playerid)
			{
				format(StringFormat, sizeof(StringFormat), "%s te ha matado %s con el comando /Matar [ID].",LOGO_STAFF, PlayersDataOnline[playerid][NameOnline]);
				format(StringFormatEX, sizeof(StringFormatEX), "%s has matado a %s [%i] con el comando /Matar [ID].",LOGO_STAFF, PlayersDataOnline[playeridAC][NameOnline], playeridAC);
	            SendClientMessage(playeridAC, COLOR_MENSAJES_DE_AVISOS, StringFormat);
			}
			else
			{
				format(StringFormatEX, sizeof(StringFormatEX), "%s Te has matado tú mismo con el comando /Matar [ID].",LOGO_STAFF);
			}

            SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, StringFormatEX);

			// Asignamos 0 de vida para matar a el jugador
			SetPlayerHealthEx(playeridAC, -100);
			return 1;
		}
		//		/Estado Todos [ID]                 		- Cerrar y Abrir el canal /o (Todos)
		case 15:
		{
			new MensajeCanalTodosCerradoAbierto[50];
			new MensajeATodos[70];

			if ( !CanalOOC )
			{
			    CanalOOC = true;
		        format(MensajeCanalTodosCerradoAbierto, sizeof(MensajeCanalTodosCerradoAbierto), "%s Has abierto el canal /O (OOC).", LOGO_STAFF);
				format(MensajeATodos, sizeof(MensajeATodos), "%s El canal /O (OOC) ha sido abierto.", LOGO_STAFF);
 			}
 			else if  ( CanalOOC  )
 			{
				CanalOOC = false;
		        format(MensajeCanalTodosCerradoAbierto, sizeof(MensajeCanalTodosCerradoAbierto), "%s Has cerrado el canal /O (OOC).", LOGO_STAFF);
				format(MensajeATodos, sizeof(MensajeATodos), "%s El canal /O (OOC) ha sido cerrado.", LOGO_STAFF);
 			}

	        SendClientMessageToAll(COLOR_MENSAJES_DE_AVISOS, MensajeATodos);
	        SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, MensajeCanalTodosCerradoAbierto);

			return 1;
		}
		//      /Estado Wisper                  - Cierra y Abre los wisper
		case 16:
		{
			new MensajeWisperCerradoAbierto[50];
			if ( PlayersDataOnline[playerid][Wispers] )
			{
			    PlayersDataOnline[playerid][Wispers] = false;
		        format(MensajeWisperCerradoAbierto, sizeof(MensajeWisperCerradoAbierto), "%s Has cerrado los whispers.", LOGO_STAFF);
 			}
 			else if  ( !PlayersDataOnline[playerid][Wispers] )
 			{
				PlayersDataOnline[playerid][Wispers] = true;
		        format(MensajeWisperCerradoAbierto, sizeof(MensajeWisperCerradoAbierto), "%s Has abierto los whispers.", LOGO_STAFF);
 			}
	        SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, MensajeWisperCerradoAbierto);
	        return 1;
  		}
		// 		/VER							- Ver los miembros del Staff que esten Online
		case 17:
		{
		    new StringFormat[120];

			for (new i = 0; i < MAX_PLAYERS; i++)
			{
			    if ( IsPlayerConnected(i) && ( PlayersData[i][Admin] >= 1 && PlayersData[i][Admin] <= 8 && PlayersData[playerid][Admin] <= 8 || PlayersData[i][Admin] >= 1 && PlayersData[playerid][Admin] == 9 ) )
			    {
					format(StringFormat, sizeof(StringFormat), "%s %s Nivel(%i) [%i] Owned conectado!",LOGO_STAFF, PlayersDataOnline[i][NameOnline], PlayersData[i][Admin], i);
		            SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS,  StringFormat);
				}
		    }
		    return 1;
		}
		// 		/RESPAWN [ID]					- Respawear un coche
		case 18:
		{
			new StringFormat[120];
			format(StringFormat, sizeof(StringFormat), "%s Has echo spawn a un vehículo con ID[%i].",LOGO_STAFF, Cantidad_o_Tipo);
            SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, StringFormat);

          	SetVehicleToRespawnExTwo(Cantidad_o_Tipo);
          	return 1;
		}
		//		/RESPAWN TODOS					- Respawear todos los coches
		case 19:
		{
			new StringFormat[120];
			format(StringFormat, sizeof(StringFormat), "%s Has echo un respawn general.",LOGO_STAFF);
            SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, StringFormat);

			new IsRespawn[MAX_VEHICLE_COUNT];
			for (new i = 0; i < MAX_PLAYERS; i++)
			{
				if( IsPlayerConnected(i) && IsPlayerInAnyVehicle(i) == 1 && GetPlayerVehicleSeat(i) == 0 )
				{
				    IsRespawn[GetPlayerVehicleID(i)] = 1;
				}
			}

			for (new i = 1; i <= MAX_CAR; i++)
			{
			    if ( IsRespawn[i] != 1 )
			    {
					SetVehicleToRespawnExTwo(i);
				}
		    }

		    return 1;
		}
		//		/Clima [Tipo]					- Cambiar el clima
		case 20:
		{
			new StringFormat[120];
			format(StringFormat, sizeof(StringFormat), "%s Has cambiado el clima a ID[%i].", LOGO_STAFF, Cantidad_o_Tipo);
            SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, StringFormat);

            SetWeather(Cantidad_o_Tipo);
            WeatherCurrent = Cantidad_o_Tipo;

            return 1;
		}
		//		/MsgEX [Estilo] [Texto]         - Mensaje EX
		case 21:
		{
			GameTextForAll( String, 5000, Cantidad_o_Tipo);
			return 1;
		}
		//		/Staff [ID] [Nivel]				- Dar un nivel a un miembro de el Staff
		case 22:
		{
			new StringFormat[120];
			new StringFormatEX[100];

   		    if (PlayersData[playeridAC][Admin] == 0)
   		    {
				format(StringFormat, sizeof(StringFormat), "%s %s ahora estas Owned! Welcome to the Team!.", LOGO_STAFF, PlayersDataOnline[playeridAC][NameOnline]);
				format(StringFormatEX, sizeof(StringFormatEX), "%s Has metido a ser parte del Staff a %s [%i] con nivel %i ",LOGO_STAFF, PlayersDataOnline[playeridAC][NameOnline], playeridAC, Cantidad_o_Tipo);
			}
			else if (Cantidad_o_Tipo == 0)
			{
				format(StringFormatEX, sizeof(StringFormatEX), "%s has expulsado del Staff a %s [%i] ", LOGO_STAFF, PlayersDataOnline[playeridAC][NameOnline], Cantidad_o_Tipo);
  				format(StringFormat, sizeof(StringFormat), "%s %s Te ha expulsado del Staff!", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline]);
			}
			else
			{
				format(StringFormatEX, sizeof(StringFormatEX), "%s Has asignado el nivel %i a %s [%i] ", LOGO_STAFF, Cantidad_o_Tipo, PlayersDataOnline[playeridAC][NameOnline], playeridAC);
  				format(StringFormat, sizeof(StringFormat), "%s %s te han asignado el nivel %i de Staff", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline], Cantidad_o_Tipo);
			}

			PlayersData[playeridAC][Admin] = Cantidad_o_Tipo;
            SendClientMessage(playeridAC, COLOR_MENSAJES_DE_AVISOS, StringFormat);
            SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, StringFormatEX);

            return 1;
		}
		//		/Dinero id dinero
  		case 23:
        {
			new StringFormat[120];
			format(StringFormat, sizeof(StringFormat), "%s Has modificado el dinero a %s[%i].", LOGO_STAFF, PlayersDataOnline[playeridAC][NameOnline], playeridAC);
			GivePlayerMoneyEx(playeridAC, 100000);
    		if (playerid != playeridAC)
			 	{
    			SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, StringFormat);
   	         	}
   	        	 else
   	       		 {
   	            new msglife[120];
   	            format(msglife, sizeof(msglife), "%s Te has dado dinero tú mismo.", LOGO_STAFF);
   	        	SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, msglife);
   	        }

	       	return 1;
        }
	}
	// LOGO_STAFF

	//COLOR_OWNED_CHAT
	//COLOR_MENSAJES_DE_AVISOS
	//COLOR_KICK_JAIL_BAN
    return 1;
}
public LoadPriceAndNameVehicles()
{
 // Todo + 400
	new NEXT = 0; coches_Todos_Precios    [0]     = 1000;      coches_Todos_Nombres    [0] 	= "Landstalker"; 	coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 105; 	// Nombre: NINGUNO       ID:400
	NEXT++; coches_Todos_Precios    [1]     = 1000;      coches_Todos_Nombres    [1] 	= "Bravura"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 98; 		// Nombre: NINGUNO       ID:401
	NEXT++; coches_Todos_Precios    [2]     = 3000;      coches_Todos_Nombres    [2] 	= "Buffalo";     		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 124; 	// Nombre: NINGUNO       ID:402
	NEXT++; coches_Todos_Precios    [3]     = 1000;      coches_Todos_Nombres    [3] 	= "Linerunner"; 		coches_Todos_Type	[NEXT] = CAMION;		coches_Todos_Velocidad [NEXT] = 75; 	// Nombre: NINGUNO       ID:403
	NEXT++; coches_Todos_Precios    [4]     = 1000;      coches_Todos_Nombres    [4] 	= "Perenniel"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 105; 	// Nombre: NINGUNO       ID:404
	NEXT++; coches_Todos_Precios    [5]     = 1500;      coches_Todos_Nombres    [5] 	= "Sentinel";    		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 109;	// Nombre: NINGUNO       ID:405
	NEXT++; coches_Todos_Precios    [6]     = 1000;      coches_Todos_Nombres    [6] 	= "Dumper"; 			coches_Todos_Type	[NEXT] = CAMION;		coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:406
	NEXT++; coches_Todos_Precios    [7]     = 1000;      coches_Todos_Nombres    [7] 	= "Firetruck"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:407
	NEXT++; coches_Todos_Precios    [8]     = 1000;      coches_Todos_Nombres    [8] 	= "Trashmaster"; 		coches_Todos_Type	[NEXT] = CAMION;		coches_Todos_Velocidad [NEXT] = 0;	 	// Nombre: NINGUNO       ID:408
	NEXT++; coches_Todos_Precios    [9]     = 1000;      coches_Todos_Nombres    [9]	= "Stretch"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 105; 	// Nombre: NINGUNO       ID:409
	NEXT++; coches_Todos_Precios    [10]     = 1000;     coches_Todos_Nombres    [10] 	= "Manana";       		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 86; 	// Nombre: NINGUNO       ID:410
	NEXT++; coches_Todos_Precios    [11]     = 3000;     coches_Todos_Nombres    [11] 	= "Infernus";   		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 148; 	// Nombre: NINGUNO       ID:411
	NEXT++; coches_Todos_Precios    [12]     = 1000;     coches_Todos_Nombres    [12] 	= "Voodoo"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 112; 	// Nombre: NINGUNO       ID:412
	NEXT++; coches_Todos_Precios    [13]     = 1000;     coches_Todos_Nombres    [13] 	= "Pony"; 				coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 73; 	// Nombre: NINGUNO       ID:413
	NEXT++; coches_Todos_Precios    [14]     = 1000;     coches_Todos_Nombres    [14] 	= "Mule";				coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 70; 	// Nombre: NINGUNO       ID:414
	NEXT++; coches_Todos_Precios    [15]     = 3000;     coches_Todos_Nombres    [15] 	= "Cheetah";			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 128; 	// Nombre: NINGUNO       ID:415
	NEXT++; coches_Todos_Precios    [16]     = 1000;     coches_Todos_Nombres    [16] 	= "Ambulance"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 103; 	// Nombre: NINGUNO       ID:416
	NEXT++; coches_Todos_Precios    [17]     = 1000;     coches_Todos_Nombres    [17]	= "Leviathan";			coches_Todos_Type	[NEXT] = VUELO;			coches_Todos_Velocidad [NEXT] = 0;		// Nombre: NINGUNO       ID:417
	NEXT++; coches_Todos_Precios    [18]     = 1000;     coches_Todos_Nombres    [18] 	= "Moonbeam"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 77; 	// Nombre: NINGUNO       ID:418
	NEXT++; coches_Todos_Precios    [19]     = 1000;     coches_Todos_Nombres    [19] 	= "Esperanto"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 99; 	// Nombre: NINGUNO       ID:419
	NEXT++; coches_Todos_Precios    [20]     = 1000;     coches_Todos_Nombres    [20] 	= "Taxi"; 				coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 97; 	// Nombre: NINGUNO       ID:420
	NEXT++; coches_Todos_Precios    [21]     = 1500;     coches_Todos_Nombres    [21] 	= "Washington"; 		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 102; 	// Nombre: NINGUNO       ID:421
	NEXT++; coches_Todos_Precios    [22]     = 1500;     coches_Todos_Nombres    [22] 	= "Bobcat";      		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 97; 	// Nombre: NINGUNO       ID:422
	NEXT++; coches_Todos_Precios    [23]     = 1000;     coches_Todos_Nombres    [23] 	= "Mr Whoopee"; 		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:423
	NEXT++; coches_Todos_Precios    [24]     = 1500;     coches_Todos_Nombres    [24] 	= "Bfinject";  			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 90; 	// Nombre: NINGUNO       ID:424
	NEXT++; coches_Todos_Precios    [25]     = 1000;     coches_Todos_Nombres    [25]	= "Hunter"; 			coches_Todos_Type	[NEXT] = VUELO;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:425
	NEXT++; coches_Todos_Precios    [26]     = 1500;     coches_Todos_Nombres    [26] 	= "Premier"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 116; 	// Nombre: NINGUNO       ID:426
	NEXT++; coches_Todos_Precios    [27]     = 1000;     coches_Todos_Nombres    [27] 	= "Enforcer"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 110; 	// Nombre: NINGUNO       ID:427
	NEXT++; coches_Todos_Precios    [28]     = 1000;     coches_Todos_Nombres    [28] 	= "Securicar"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:428
	NEXT++; coches_Todos_Precios    [29]     = 3000;     coches_Todos_Nombres    [29] 	= "Banshee";    		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 134; 	// Nombre: NINGUNO       ID:429
	NEXT++; coches_Todos_Precios    [30]     = 1000;     coches_Todos_Nombres    [30] 	= "Predator"; 			coches_Todos_Type	[NEXT] = BOTE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:430
	NEXT++; coches_Todos_Precios    [31]     = 1000;     coches_Todos_Nombres    [31] 	= "Bus"; 				coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 87; 	// Nombre: NINGUNO       ID:431
	NEXT++; coches_Todos_Precios    [32]     = 1000;     coches_Todos_Nombres    [32] 	= "Rhino"; 				coches_Todos_Type	[NEXT] = CAMION;		coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:432
	NEXT++; coches_Todos_Precios    [33]     = 1000;     coches_Todos_Nombres    [33] 	= "Barracks"; 			coches_Todos_Type	[NEXT] = CAMION;		coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:433
	NEXT++; coches_Todos_Precios    [34]     = 2000;     coches_Todos_Nombres    [34] 	= "Hotknife"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 111; 	// Nombre: NINGUNO       ID:434
	NEXT++; coches_Todos_Precios    [35]     = 1000;     coches_Todos_Nombres    [35] 	= "Article Trailer"; 	coches_Todos_Type	[NEXT] = CAMION;		coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:435
	NEXT++; coches_Todos_Precios    [36]     = 1500;     coches_Todos_Nombres    [36] 	= "Previon";   			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 96; 	// Nombre: NINGUNO       ID:436
	NEXT++; coches_Todos_Precios    [37]     = 1000;     coches_Todos_Nombres    [37]	= "Coach"; 				coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 105; 	// Nombre: NINGUNO       ID:437
	NEXT++; coches_Todos_Precios    [38]     = 1000;     coches_Todos_Nombres    [38] 	= "Cabbie"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:438
	NEXT++; coches_Todos_Precios    [39]     = 1500;     coches_Todos_Nombres    [39]	= "Stallion"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 112; 	// Nombre: NINGUNO       ID:439
	NEXT++; coches_Todos_Precios    [40]     = 1000;     coches_Todos_Nombres    [40] 	= "Rumpo"; 				coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 91; 	// Nombre: NINGUNO       ID:440
	NEXT++; coches_Todos_Precios    [41]     = 1000;     coches_Todos_Nombres    [41] 	= "RC bandit";			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:441
	NEXT++; coches_Todos_Precios    [42]     = 1000;     coches_Todos_Nombres    [42] 	= "Romero"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 93; 	// Nombre: NINGUNO       ID:442
	NEXT++; coches_Todos_Precios    [43]     = 1000;     coches_Todos_Nombres    [43] 	= "Packer"; 			coches_Todos_Type	[NEXT] = CAMION;		coches_Todos_Velocidad [NEXT] = 84; 	// Nombre: NINGUNO       ID:443
	NEXT++; coches_Todos_Precios    [44]     = 1000;     coches_Todos_Nombres    [44] 	= "Monster"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 74; 	// Nombre: NINGUNO       ID:444
	NEXT++; coches_Todos_Precios    [45]     = 1500;     coches_Todos_Nombres    [45] 	= "Admiral";	 		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 109; 	// Nombre: NINGUNO       ID:445
	NEXT++; coches_Todos_Precios    [46]     = 1000;     coches_Todos_Nombres    [46] 	= "Squallo";			coches_Todos_Type	[NEXT] = BOTE; 			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:446
	NEXT++; coches_Todos_Precios    [47]     = 1000;     coches_Todos_Nombres    [47] 	= "Seasparrow"; 		coches_Todos_Type	[NEXT] = VUELO;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:447
	NEXT++; coches_Todos_Precios    [48]     = 1000;     coches_Todos_Nombres    [48] 	= "Pizzaboy";   		coches_Todos_Type	[NEXT] = MOTO; 			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:448
	NEXT++; coches_Todos_Precios    [49]     = 1000;     coches_Todos_Nombres    [49] 	= "Tram";				coches_Todos_Type	[NEXT] = TREN; 			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:449
	NEXT++; coches_Todos_Precios    [50]     = 1000;     coches_Todos_Nombres    [50] 	= "Article Trailer 2";	coches_Todos_Type	[NEXT] = CAMION;		coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:450
	NEXT++; coches_Todos_Precios    [51]     = 3000;     coches_Todos_Nombres    [51] 	= "Turismo";  			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 129; 	// Nombre: NINGUNO       ID:451
	NEXT++; coches_Todos_Precios    [52]     = 1000;     coches_Todos_Nombres    [52] 	= "Speeder";			coches_Todos_Type	[NEXT] = BOTE; 			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:452
	NEXT++; coches_Todos_Precios    [53]     = 1000;     coches_Todos_Nombres    [53] 	= "Reefer"; 			coches_Todos_Type	[NEXT] = BOTE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:453
	NEXT++; coches_Todos_Precios    [54]     = 1000;     coches_Todos_Nombres    [54] 	= "Tropic"; 			coches_Todos_Type	[NEXT] = BOTE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:454
	NEXT++; coches_Todos_Precios    [55]     = 1000;     coches_Todos_Nombres    [55] 	= "Flatbed"; 			coches_Todos_Type	[NEXT] = CAMION;		coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:455
	NEXT++; coches_Todos_Precios    [56]     = 1000;     coches_Todos_Nombres    [56] 	= "Yankee"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:456
	NEXT++; coches_Todos_Precios    [57]     = 1000;     coches_Todos_Nombres    [57] 	= "Caddy"; 				coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:457
	NEXT++; coches_Todos_Precios    [58]     = 2000;     coches_Todos_Nombres    [58] 	= "Solair";				coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:458
	NEXT++; coches_Todos_Precios    [59]     = 1000;     coches_Todos_Nombres    [59] 	= "Berkley's RC Van";	coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0;	 	// Nombre: NINGUNO       ID:459
	NEXT++; coches_Todos_Precios    [60]     = 1000;     coches_Todos_Nombres    [60] 	= "Skimmer"; 			coches_Todos_Type	[NEXT] = VUELO;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:460
	NEXT++; coches_Todos_Precios    [61]     = 2000;     coches_Todos_Nombres    [61] 	= "PCJ-600";     		coches_Todos_Type	[NEXT] = MOTO;			coches_Todos_Velocidad [NEXT] = 109; 	// Nombre: NINGUNO       ID:461
	NEXT++; coches_Todos_Precios    [62]     = 1000;     coches_Todos_Nombres    [62] 	= "Faggio";       		coches_Todos_Type	[NEXT] = MOTO;			coches_Todos_Velocidad [NEXT] = 50; 	// Nombre: NINGUNO       ID:462
	NEXT++; coches_Todos_Precios    [63]     = 2000;     coches_Todos_Nombres    [63] 	= "Freeway";    		coches_Todos_Type	[NEXT] = MOTO;			coches_Todos_Velocidad [NEXT] = 93; 	// Nombre: NINGUNO       ID:463
	NEXT++; coches_Todos_Precios    [64]     = 1000;     coches_Todos_Nombres    [64] 	= "RC Baron"; 			coches_Todos_Type	[NEXT] = VUELO;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:464
	NEXT++; coches_Todos_Precios    [65]     = 1000;     coches_Todos_Nombres    [65] 	= "RC Raider"; 			coches_Todos_Type	[NEXT] = VUELO;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:465
	NEXT++; coches_Todos_Precios    [66]     = 1000;     coches_Todos_Nombres    [66] 	= "Glendale";    		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 98; 	// Nombre: NINGUNO       ID:466
	NEXT++; coches_Todos_Precios    [67]     = 1000;     coches_Todos_Nombres    [67] 	= "Oceanic";     		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 94; 	// Nombre: NINGUNO       ID:467
	NEXT++; coches_Todos_Precios    [68]     = 2000;     coches_Todos_Nombres    [68] 	= "Sanchez";     		coches_Todos_Type	[NEXT] = MOTO;			coches_Todos_Velocidad [NEXT] = 93; 	// Nombre: NINGUNO       ID:468
	NEXT++; coches_Todos_Precios    [69]     = 1000;     coches_Todos_Nombres    [69] 	= "Sparrow"; 			coches_Todos_Type	[NEXT] = VUELO;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:469
	NEXT++; coches_Todos_Precios    [70]     = 1000;     coches_Todos_Nombres    [70] 	= "Patriot"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:470
	NEXT++; coches_Todos_Precios    [71]     = 1000;     coches_Todos_Nombres    [71] 	= "Quad";       		coches_Todos_Type	[NEXT] = MOTO;			coches_Todos_Velocidad [NEXT] = 74; 	// Nombre: NINGUNO       ID:471
	NEXT++; coches_Todos_Precios    [72]     = 1000;     coches_Todos_Nombres    [72] 	= "Coastguard"; 		coches_Todos_Type	[NEXT] = BOTE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:472
	NEXT++; coches_Todos_Precios    [73]     = 1000;     coches_Todos_Nombres    [73] 	= "Dinghy"; 			coches_Todos_Type	[NEXT] = BOTE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:473
	NEXT++; coches_Todos_Precios    [74]     = 1500;     coches_Todos_Nombres    [74] 	= "Hermes"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 99; 	// Nombre: NINGUNO       ID:474
	NEXT++; coches_Todos_Precios    [75]     = 1500;     coches_Todos_Nombres    [75] 	= "Sabre"; 				coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 115; 	// Nombre: NINGUNO       ID:475
	NEXT++; coches_Todos_Precios    [76]     = 1000;     coches_Todos_Nombres    [76] 	= "Rustler"; 			coches_Todos_Type	[NEXT] = VUELO;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:476
	NEXT++; coches_Todos_Precios    [77]     = 2500;     coches_Todos_Nombres    [77] 	= "ZR-350"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 124; 	// Nombre: NINGUNO       ID:477
	NEXT++; coches_Todos_Precios    [78]     = 1000;     coches_Todos_Nombres    [78] 	= "Walton"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 78; 	// Nombre: NINGUNO       ID:478
	NEXT++; coches_Todos_Precios    [79]     = 1000;     coches_Todos_Nombres    [79] 	= "Regina"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 93; 	// Nombre: NINGUNO       ID:479
	NEXT++; coches_Todos_Precios    [80]     = 2500;     coches_Todos_Nombres    [80] 	= "Comet";       		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 123; 	// Nombre: NINGUNO       ID:480
	NEXT++; coches_Todos_Precios    [81]     = 1000;     coches_Todos_Nombres    [81]	= "BMX"; 				coches_Todos_Type	[NEXT] = BICI;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:481
	NEXT++; coches_Todos_Precios    [82]     = 1000;     coches_Todos_Nombres    [82] 	= "Burrito"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 104; 	// Nombre: NINGUNO       ID:482
	NEXT++; coches_Todos_Precios    [83]     = 1000;     coches_Todos_Nombres    [83] 	= "Camper"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:483
	NEXT++; coches_Todos_Precios    [84]     = 1000;     coches_Todos_Nombres    [84] 	= "Marquis"; 			coches_Todos_Type	[NEXT] = BOTE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:484
	NEXT++; coches_Todos_Precios    [85]     = 1000;     coches_Todos_Nombres    [85] 	= "Baggage"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:485
	NEXT++; coches_Todos_Precios    [86]     = 1000;     coches_Todos_Nombres    [86] 	= "Dozer"; 				coches_Todos_Type	[NEXT] = CAMION;		coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:486
	NEXT++; coches_Todos_Precios    [87]     = 1000;     coches_Todos_Nombres    [87] 	= "Maverick"; 			coches_Todos_Type	[NEXT] = VUELO;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:487
	NEXT++; coches_Todos_Precios    [88]     = 1000;     coches_Todos_Nombres    [88] 	= "SAN News Maverick"; 	coches_Todos_Type	[NEXT] = VUELO;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:488
	NEXT++; coches_Todos_Precios    [89]     = 1500;     coches_Todos_Nombres    [89] 	= "Rancher"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 93; 	// Nombre: NINGUNO       ID:489
	NEXT++; coches_Todos_Precios    [90]     = 1000;     coches_Todos_Nombres    [90] 	= "FBI Rancher"; 		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 105; 	// Nombre: NINGUNO       ID:490
	NEXT++; coches_Todos_Precios    [91]     = 1500;     coches_Todos_Nombres    [91] 	= "Virgo"; 				coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 99; 	// Nombre: NINGUNO       ID:491
	NEXT++; coches_Todos_Precios    [92]     = 1500;     coches_Todos_Nombres    [92] 	= "Greenwoo";    		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 94; 	// Nombre: NINGUNO       ID:492
	NEXT++; coches_Todos_Precios    [93]     = 1000;     coches_Todos_Nombres    [93] 	= "Jetmax"; 			coches_Todos_Type	[NEXT] = BOTE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:493
	NEXT++; coches_Todos_Precios    [94]     = 1000;     coches_Todos_Nombres    [94] 	= "Hotring Racer"; 		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:494
	NEXT++; coches_Todos_Precios    [95]     = 1000;     coches_Todos_Nombres    [95] 	= "Sandking"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 118; 	// Nombre: NINGUNO       ID:495
	NEXT++; coches_Todos_Precios    [96]     = 1500;     coches_Todos_Nombres    [96] 	= "Blistac";       		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 108; 	// Nombre: NINGUNO       ID:496
	NEXT++; coches_Todos_Precios    [97]     = 1000;     coches_Todos_Nombres    [97] 	= "Police Maverick"; 	coches_Todos_Type	[NEXT] = VUELO;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:497
	NEXT++; coches_Todos_Precios    [98]     = 1000;     coches_Todos_Nombres    [98] 	= "Boxville"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:498
	NEXT++; coches_Todos_Precios    [99]     = 1000;     coches_Todos_Nombres    [99] 	= "Benson"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:499
	NEXT++; coches_Todos_Precios    [100]    = 1500;     coches_Todos_Nombres    [100] 	= "Mesa"; 				coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 94; 	// Nombre: NINGUNO       ID:500
	NEXT++; coches_Todos_Precios    [101]    = 1000;     coches_Todos_Nombres    [101] 	= "RC Goblin"; 			coches_Todos_Type	[NEXT] = VUELO;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:501
	NEXT++; coches_Todos_Precios    [102]    = 1000;     coches_Todos_Nombres    [102] 	= "Hotring Racer"; 		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:502
	NEXT++; coches_Todos_Precios    [103]    = 1000;     coches_Todos_Nombres    [103] 	= "Hotring Racer"; 		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:503
	NEXT++; coches_Todos_Precios    [104]    = 1500;     coches_Todos_Nombres    [104] 	= "Bloodra";     		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 115; 	// Nombre: NINGUNO       ID:504
	NEXT++; coches_Todos_Precios    [105]    = 1500;     coches_Todos_Nombres    [105] 	= "Rancher"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 93; 	// Nombre: NINGUNO       ID:505
	NEXT++; coches_Todos_Precios    [106]    = 2500;     coches_Todos_Nombres    [106] 	= "Super GT";     		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 119; 	// Nombre: NINGUNO       ID:506
	NEXT++; coches_Todos_Precios    [107]    = 1000;     coches_Todos_Nombres    [107] 	= "Elegant";     		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 120; 	// Nombre: NINGUNO       ID:507
	NEXT++; coches_Todos_Precios    [108]    = 1000;     coches_Todos_Nombres    [108] 	= "Journey"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 72; 	// Nombre: NINGUNO       ID:508
	NEXT++; coches_Todos_Precios    [109]    = 1000;     coches_Todos_Nombres    [109] 	= "Bike"; 				coches_Todos_Type	[NEXT] = BICI;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:509
	NEXT++; coches_Todos_Precios    [110]    = 1000;     coches_Todos_Nombres    [110]	= "Mountain Bike"; 		coches_Todos_Type	[NEXT] = BICI;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:510
	NEXT++; coches_Todos_Precios    [111]    = 1000;     coches_Todos_Nombres    [111]  = "Beagle"; 			coches_Todos_Type	[NEXT] = VUELO;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:511
	NEXT++; coches_Todos_Precios    [112]    = 1000;     coches_Todos_Nombres    [112] 	= "Cropduster"; 		coches_Todos_Type	[NEXT] = VUELO;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:512
	NEXT++; coches_Todos_Precios    [113]    = 1000;     coches_Todos_Nombres    [113] 	= "Stuntplane"; 		coches_Todos_Type	[NEXT] = VUELO;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:513
	NEXT++; coches_Todos_Precios    [114]    = 1000;     coches_Todos_Nombres    [114] 	= "Tanker";				coches_Todos_Type	[NEXT] = CAMION;		coches_Todos_Velocidad [NEXT] = 80; 	// Nombre: NINGUNO       ID:514
	NEXT++; coches_Todos_Precios    [115]    = 1000;     coches_Todos_Nombres    [115] 	= "Roadtrain"; 			coches_Todos_Type	[NEXT] = CAMION;		coches_Todos_Velocidad [NEXT] = 95; 	// Nombre: NINGUNO       ID:515
	NEXT++; coches_Todos_Precios    [116]    = 1500;     coches_Todos_Nombres    [116] 	= "Nebula";      		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 105; 	// Nombre: NINGUNO       ID:516
	NEXT++; coches_Todos_Precios    [117]    = 1000;     coches_Todos_Nombres    [117] 	= "Majestic";    		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 105; 	// Nombre: NINGUNO       ID:517
	NEXT++; coches_Todos_Precios    [118]    = 1500;     coches_Todos_Nombres    [118] 	= "Buccanee";     		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 110; 	// Nombre: NINGUNO       ID:518
	NEXT++; coches_Todos_Precios    [119]    = 1000;     coches_Todos_Nombres    [119] 	= "Shamal"; 			coches_Todos_Type	[NEXT] = VUELO;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:519
	NEXT++; coches_Todos_Precios    [120]    = 1000;     coches_Todos_Nombres    [120] 	= "Hydra"; 				coches_Todos_Type	[NEXT] = VUELO;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:520
	NEXT++; coches_Todos_Precios    [121]    = 2000;     coches_Todos_Nombres    [121] 	= "FCR-900";     		coches_Todos_Type	[NEXT] = MOTO;			coches_Todos_Velocidad [NEXT] = 115; 	// Nombre: NINGUNO       ID:521
	NEXT++; coches_Todos_Precios    [122]    = 2000;     coches_Todos_Nombres    [122] 	= "NRG-500";     		coches_Todos_Type	[NEXT] = MOTO;			coches_Todos_Velocidad [NEXT] = 120; 	// Nombre: NINGUNO       ID:522
	NEXT++; coches_Todos_Precios    [123]    = 1000;     coches_Todos_Nombres    [123] 	= "CopBike";     		coches_Todos_Type	[NEXT] = MOTO;			coches_Todos_Velocidad [NEXT] = 117; 	// Nombre: NINGUNO       ID:523
	NEXT++; coches_Todos_Precios    [124]    = 1000;     coches_Todos_Nombres    [124] 	= "Cement Truck"; 		coches_Todos_Type	[NEXT] = CAMION;		coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:524
	NEXT++; coches_Todos_Precios    [125]    = 1000;     coches_Todos_Nombres    [125] 	= "Towtruck"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 107; 	// Nombre: NINGUNO       ID:525
	NEXT++; coches_Todos_Precios    [126]    = 1000;     coches_Todos_Nombres    [126] 	= "Fortune";     		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 105; 	// Nombre: NINGUNO       ID:526
	NEXT++; coches_Todos_Precios    [127]    = 1000;     coches_Todos_Nombres    [127] 	= "Cadrona";     		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 99; 	// Nombre: NINGUNO       ID:527
	NEXT++; coches_Todos_Precios    [128]    = 1000;     coches_Todos_Nombres    [128] 	= "FBI Truck"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 118; 	// Nombre: NINGUNO       ID:528
	NEXT++; coches_Todos_Precios    [129]    = 1000;     coches_Todos_Nombres    [129] 	= "Williard";    		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 99; 	// Nombre: NINGUNO       ID:529
	NEXT++; coches_Todos_Precios    [130]    = 1000;     coches_Todos_Nombres    [130] 	= "Forklift"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:530
	NEXT++; coches_Todos_Precios    [131]    = 1000;     coches_Todos_Nombres    [131] 	= "Tractor";			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:531
	NEXT++; coches_Todos_Precios    [132]    = 1000;     coches_Todos_Nombres    [132] 	= "Combine Harvester"; 	coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:532
	NEXT++; coches_Todos_Precios    [133]    = 1500;     coches_Todos_Nombres    [133] 	= "Felzer";      		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 111; 	// Nombre: NINGUNO       ID:533
	NEXT++; coches_Todos_Precios    [134]    = 1000;     coches_Todos_Nombres    [134] 	= "Remington"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 112; 	// Nombre: NINGUNO       ID:534
	NEXT++; coches_Todos_Precios    [135]    = 2000;     coches_Todos_Nombres    [135] 	= "Slamvan"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 105; 	// Nombre: NINGUNO       ID:535
	NEXT++; coches_Todos_Precios    [136]    = 1500;     coches_Todos_Nombres    [136] 	= "Blade";         		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 115; 	// Nombre: NINGUNO       ID:536
	NEXT++; coches_Todos_Precios    [137]    = 1000;     coches_Todos_Nombres    [137] 	= "Freight"; 			coches_Todos_Type	[NEXT] = TREN;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:537
	NEXT++; coches_Todos_Precios    [138]    = 1000;     coches_Todos_Nombres    [138] 	= "Brownstreak"; 		coches_Todos_Type	[NEXT] = TREN;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:538
	NEXT++; coches_Todos_Precios    [139]    = 1000;     coches_Todos_Nombres    [139] 	= "Vortex";				coches_Todos_Type	[NEXT] = BOTE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:539
	NEXT++; coches_Todos_Precios    [140]    = 1000;     coches_Todos_Nombres    [140] 	= "Vincent"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 99; 	// Nombre: NINGUNO       ID:540
	NEXT++; coches_Todos_Precios    [141]    = 3000;     coches_Todos_Nombres    [141] 	= "Bullet";      		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 135; 	// Nombre: NINGUNO       ID:541
	NEXT++; coches_Todos_Precios    [142]    = 1500;     coches_Todos_Nombres    [142] 	= "Clover";      		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 109; 	// Nombre: NINGUNO       ID:542
	NEXT++; coches_Todos_Precios    [143]    = 1000;     coches_Todos_Nombres    [143] 	= "Sadler"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 110; 	// Nombre: NINGUNO       ID:543
	NEXT++; coches_Todos_Precios    [144]    = 1000;     coches_Todos_Nombres    [144] 	= "Firetruck"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:544
	NEXT++; coches_Todos_Precios    [145]    = 1000;     coches_Todos_Nombres    [145] 	= "Hustler"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 100; 	// Nombre: NINGUNO       ID:545
	NEXT++; coches_Todos_Precios    [146]    = 1000;     coches_Todos_Nombres    [146] 	= "Intruder";    		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 99; 	// Nombre: NINGUNO       ID:546
	NEXT++; coches_Todos_Precios    [147]    = 1000;     coches_Todos_Nombres    [147] 	= "Primo"; 				coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 95; 	// Nombre: NINGUNO       ID:547
	NEXT++; coches_Todos_Precios    [148]    = 1000;     coches_Todos_Nombres    [148] 	= "Cargobob";			coches_Todos_Type	[NEXT] = VUELO;			coches_Todos_Velocidad [NEXT] = 95; 	// Nombre: NINGUNO       ID:548
	NEXT++; coches_Todos_Precios    [149]    = 1500;     coches_Todos_Nombres    [149] 	= "Tampa";      		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 102; 	// Nombre: NINGUNO       ID:549
	NEXT++; coches_Todos_Precios    [150]    = 1500;     coches_Todos_Nombres    [150] 	= "Sunrise"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 97; 	// Nombre: NINGUNO       ID:550
	NEXT++; coches_Todos_Precios    [151]    = 1500;     coches_Todos_Nombres    [151] 	= "Merit"; 				coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 105; 	// Nombre: NINGUNO       ID:551
	NEXT++; coches_Todos_Precios    [152]    = 1000;     coches_Todos_Nombres    [152] 	= "Utility"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:552
	NEXT++; coches_Todos_Precios    [153]    = 1000;     coches_Todos_Nombres    [153] 	= "Nevada"; 			coches_Todos_Type	[NEXT] = VUELO;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:553
	NEXT++; coches_Todos_Precios    [154]    = 1500;     coches_Todos_Nombres    [154] 	= "Yosemite";			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 96; 	// Nombre: NINGUNO       ID:554
	NEXT++; coches_Todos_Precios    [155]    = 1500;     coches_Todos_Nombres    [155] 	= "Windsor";   			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 105; 	// Nombre: NINGUNO       ID:555
	NEXT++; coches_Todos_Precios    [156]    = 1000;     coches_Todos_Nombres    [156] 	= "Monster A"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:556
	NEXT++; coches_Todos_Precios    [157]    = 1000;     coches_Todos_Nombres    [157] 	= "Monster B"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:557
	NEXT++; coches_Todos_Precios    [158]    = 2000;     coches_Todos_Nombres    [158] 	= "Uranus";      		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 104; 	// Nombre: NINGUNO       ID:558
	NEXT++; coches_Todos_Precios    [159]    = 2500;     coches_Todos_Nombres    [159] 	= "Jester"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 118; 	// Nombre: NINGUNO       ID:559
	NEXT++; coches_Todos_Precios    [160]    = 2500;     coches_Todos_Nombres    [160] 	= "Sultan";      		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 103; 	// Nombre: NINGUNO       ID:560
	NEXT++; coches_Todos_Precios    [161]    = 2000;     coches_Todos_Nombres    [161] 	= "Stratum";     		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 103; 	// Nombre: NINGUNO       ID:561
	NEXT++; coches_Todos_Precios    [162]    = 2500;     coches_Todos_Nombres    [162] 	= "Elegy";       		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 118; 	// Nombre: NINGUNO       ID:562
	NEXT++; coches_Todos_Precios    [163]    = 1000;     coches_Todos_Nombres    [163] 	= "Raindance"; 			coches_Todos_Type	[NEXT] = VUELO;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:563
	NEXT++; coches_Todos_Precios    [164]    = 1000;     coches_Todos_Nombres    [164]	= "RC Tiger"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:564
	NEXT++; coches_Todos_Precios    [165]    = 2000;     coches_Todos_Nombres    [165] 	= "Flash";       		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 110; 	// Nombre: NINGUNO       ID:565
	NEXT++; coches_Todos_Precios    [166]    = 1000;     coches_Todos_Nombres    [166] 	= "Tahoma"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 107; 	// Nombre: NINGUNO       ID:566
	NEXT++; coches_Todos_Precios    [167]    = 1000;     coches_Todos_Nombres    [167] 	= "Savanna"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 115; 	// Nombre: NINGUNO       ID:567
	NEXT++; coches_Todos_Precios    [168]    = 1000;     coches_Todos_Nombres    [168] 	= "Bandito"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:568
	NEXT++; coches_Todos_Precios    [169]    = 1000;     coches_Todos_Nombres    [169] 	= "Freight Flat Trailer";coches_Todos_Type	[NEXT] = TREN;  		coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:569
	NEXT++; coches_Todos_Precios    [170]    = 1000;     coches_Todos_Nombres    [170] 	= "Streak Trailer"; 	coches_Todos_Type	[NEXT] = TREN;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:570
	NEXT++; coches_Todos_Precios    [171]    = 1000;     coches_Todos_Nombres    [171] 	= "Kart"; 				coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:571
	NEXT++; coches_Todos_Precios    [172]    = 1000;     coches_Todos_Nombres    [172] 	= "Mower"; 				coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:572
	NEXT++; coches_Todos_Precios    [173]    = 1000;     coches_Todos_Nombres    [173] 	= "Dune";				coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:573
	NEXT++; coches_Todos_Precios    [174]    = 1000;     coches_Todos_Nombres    [174] 	= "Sweeper"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:574
	NEXT++; coches_Todos_Precios    [175]    = 1000;     coches_Todos_Nombres    [175] 	= "Broadway";			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 105; 	// Nombre: NINGUNO       ID:575
	NEXT++; coches_Todos_Precios    [176]    = 1000;     coches_Todos_Nombres    [176] 	= "Tornado";			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 105; 	// Nombre: NINGUNO       ID:576
	NEXT++; coches_Todos_Precios    [177]    = 1000;     coches_Todos_Nombres    [177] 	= "AT400"; 				coches_Todos_Type	[NEXT] = VUELO;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:577
	NEXT++; coches_Todos_Precios    [178]    = 1000;     coches_Todos_Nombres    [178] 	= "DFT-30"; 			coches_Todos_Type	[NEXT] = CAMION;		coches_Todos_Velocidad [NEXT] = 87; 	// Nombre: NINGUNO       ID:578
	NEXT++; coches_Todos_Precios    [179]    = 1000;     coches_Todos_Nombres    [179] 	= "Huntley";			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 105; 	// Nombre: NINGUNO       ID:579
	NEXT++; coches_Todos_Precios    [180]    = 1500;     coches_Todos_Nombres    [180] 	= "Stafford"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 102; 	// Nombre: NINGUNO       ID:580
	NEXT++; coches_Todos_Precios    [181]    = 2000;     coches_Todos_Nombres    [181] 	= "BF-400";      		coches_Todos_Type	[NEXT] = MOTO;			coches_Todos_Velocidad [NEXT] = 100; 	// Nombre: NINGUNO       ID:581
	NEXT++; coches_Todos_Precios    [182]    = 1000;     coches_Todos_Nombres    [182] 	= "Newsvan";     		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 81; 	// Nombre: NINGUNO       ID:582
	NEXT++; coches_Todos_Precios    [183]    = 1000;     coches_Todos_Nombres    [183] 	= "Tug"; 				coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:583
	NEXT++; coches_Todos_Precios    [184]    = 1000;     coches_Todos_Nombres    [184] 	= "Petrol Trailer"; 	coches_Todos_Type	[NEXT] = CAMION;		coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:584
	NEXT++; coches_Todos_Precios    [185]    = 1000;     coches_Todos_Nombres    [185] 	= "Emperor"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 102; 	// Nombre: NINGUNO       ID:585
	NEXT++; coches_Todos_Precios    [186]    = 2000;     coches_Todos_Nombres    [186] 	= "Wayfarer";     		coches_Todos_Type	[NEXT] = MOTO;			coches_Todos_Velocidad [NEXT] = 95; 	// Nombre: NINGUNO       ID:586
	NEXT++; coches_Todos_Precios    [187]    = 2500;     coches_Todos_Nombres    [187] 	= "Euros";        		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 110; 	// Nombre: NINGUNO       ID:587
	NEXT++; coches_Todos_Precios    [188]    = 1000;     coches_Todos_Nombres    [188] 	= "Hotdog"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:588
	NEXT++; coches_Todos_Precios    [189]    = 1500;     coches_Todos_Nombres    [189] 	= "Club";        		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 108; 	// Nombre: NINGUNO       ID:589
	NEXT++; coches_Todos_Precios    [190]    = 1000;     coches_Todos_Nombres    [190] 	= "Freight Box Trailer";coches_Todos_Type	[NEXT] = CAMION;		coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:590
	NEXT++; coches_Todos_Precios    [191]    = 1000;     coches_Todos_Nombres    [191] 	= "Article Trailer 3"; 	coches_Todos_Type	[NEXT] = CAMION;		coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:591
	NEXT++; coches_Todos_Precios    [192]    = 1000;     coches_Todos_Nombres    [192] 	= "Andromada"; 			coches_Todos_Type	[NEXT] = VUELO;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:592
	NEXT++; coches_Todos_Precios    [193]    = 1000;     coches_Todos_Nombres    [193] 	= "Dodo"; 				coches_Todos_Type	[NEXT] = VUELO;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:593
	NEXT++; coches_Todos_Precios    [194]    = 1000;     coches_Todos_Nombres    [194] 	= "RC Cam"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:594
	NEXT++; coches_Todos_Precios    [195]    = 1000;     coches_Todos_Nombres    [195] 	= "Launch"; 			coches_Todos_Type	[NEXT] = BOTE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:595
	NEXT++; coches_Todos_Precios    [196]    = 1000;     coches_Todos_Nombres    [196] 	= "Police Car"; 		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 117; 	// Nombre: NINGUNO       ID:596
	NEXT++; coches_Todos_Precios    [197]    = 1000;     coches_Todos_Nombres    [197] 	= "Police Car"; 		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 117; 	// Nombre: NINGUNO       ID:597
	NEXT++; coches_Todos_Precios    [198]    = 1000;     coches_Todos_Nombres    [198] 	= "Police Car"; 		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 117; 	// Nombre: NINGUNO       ID:598
	NEXT++; coches_Todos_Precios    [199]    = 1000;     coches_Todos_Nombres    [199] 	= "Police Ranger"; 		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 105; 	// Nombre: NINGUNO       ID:599
	NEXT++; coches_Todos_Precios    [200]    = 1500;     coches_Todos_Nombres    [200] 	= "Picador";    		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 101; 	// Nombre: NINGUNO       ID:600
	NEXT++; coches_Todos_Precios    [201]    = 1000;     coches_Todos_Nombres    [201] 	= "S.W.A.T."; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 74; 	// Nombre: NINGUNO       ID:601
	NEXT++; coches_Todos_Precios    [202]    = 2000;     coches_Todos_Nombres    [202] 	= "Alpha";        		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 113; 	// Nombre: NINGUNO       ID:602
	NEXT++; coches_Todos_Precios    [203]    = 2000;     coches_Todos_Nombres    [203] 	= "Phoenix";     		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 114; 	// Nombre: NINGUNO       ID:603
	NEXT++; coches_Todos_Precios    [204]    = 1000;     coches_Todos_Nombres    [204] 	= "Glendale Shit"; 		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:604
	NEXT++; coches_Todos_Precios    [205]    = 1000;     coches_Todos_Nombres    [205] 	= "Sadler Shit"; 		coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:605
	NEXT++; coches_Todos_Precios    [206]    = 1000;     coches_Todos_Nombres    [206] 	= "Baggage Trailer A"; 	coches_Todos_Type	[NEXT] = CAMION;		coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:606
	NEXT++; coches_Todos_Precios    [207]    = 1000;     coches_Todos_Nombres    [207] 	= "Baggage Trailer B"; 	coches_Todos_Type	[NEXT] = CAMION;		coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:607
	NEXT++; coches_Todos_Precios    [208]    = 1000;     coches_Todos_Nombres    [208] 	= "Tug Stairs Trailer"; coches_Todos_Type	[NEXT] = CAMION;		coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:608
	NEXT++; coches_Todos_Precios    [209]    = 1000;     coches_Todos_Nombres    [209] 	= "Boxville"; 			coches_Todos_Type	[NEXT] = COCHE;			coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:609
	NEXT++; coches_Todos_Precios    [210]    = 1000;     coches_Todos_Nombres    [210] 	= "Farm Trailer"; 		coches_Todos_Type	[NEXT] = CAMION;		coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:610
	NEXT++; coches_Todos_Precios    [211]    = 1000;     coches_Todos_Nombres    [211] 	= "Utility Trailer"; 	coches_Todos_Type	[NEXT] = CAMION;		coches_Todos_Velocidad [NEXT] = 0; 		// Nombre: NINGUNO       ID:611
}
public MostrarHora(Accion ,playerid)
{
	new Hora, Minutos, Segundos;
	new Ano, Mes, Dia;
	new FechaHoraFormateada[90];

	gettime( Hora, Minutos, Segundos );
	getdate(Ano, Mes, Dia);
	Mes--;

	if ( Accion == 0 )
	{
	    if ( PlayersData[playerid][Jail] == 0 )
	    {
			format(FechaHoraFormateada, sizeof(FechaHoraFormateada), "~W~%i ~B~%s ~W~%i ~N~Son las %i~R~:~W~%i~R~:~W~%i", Dia, Meses[Mes], Ano, Hora, Minutos, Segundos);
		}
		else
		{
			format(FechaHoraFormateada, sizeof(FechaHoraFormateada), "~W~%i ~B~%s ~W~%i ~N~Son las %i~R~:~W~%i~R~:~W~%i~N~~R~Jail: ~W~%i sec", Dia, Meses[Mes], Ano, Hora, Minutos, Segundos, PlayersData[playerid][Jail] - gettime());
		}
		Acciones(playerid, 8, "mira la hora");
		GameTextForPlayer(playerid, FechaHoraFormateada, 5000, 1 );
	}
	else if ( Accion == 1 )
	{
		format(FechaHoraFormateada, sizeof(FechaHoraFormateada), "~W~Hora de la Paga!~N~%i ~B~%s ~W~%i ~N~Son las %i~R~:~W~%i~R~:~W~%i", Dia, Meses[Mes], Ano, Hora, Minutos, Segundos);
		new MensajeBanco[5][70];
		new Intereses;
		new TimeNow = gettime();
        new houseid;
		new Float:Xpaga, Float:Ypaga, Float:Zpaga;
	    for (new i = 0; i < MAX_PLAYERS; i++)
	    {
			if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && ((TimeNow - PlayersDataOnline[i][IsPagaO]) + PlayersData[i][IsPaga]) > 1200)
			{
			    Intereses = PlayersData[i][Banco] / 2000;

		   		PlayersData[i][Banco] = PlayersData[i][Banco] + FaccionData[PlayersData[i][Faccion]][Paga][PlayersData[i][Rango]] + Intereses;

   				format(MensajeBanco[0], 70, "Nuevo Balance: $%i Paga: $%i", PlayersData[i][Banco], FaccionData[PlayersData[i][Faccion]][Paga][PlayersData[i][Rango]]);
		   		format(MensajeBanco[1], 70, "Intereses: $%i", Intereses);
		   		format(MensajeBanco[2], 70, "Antiguo Balance: $%i", PlayersData[i][Banco] - FaccionData[PlayersData[i][Faccion]][Paga][PlayersData[i][Rango]] - Intereses);

				GameTextForPlayer(i, FechaHoraFormateada, 5000, 1 );

    			SendInfoMessage(i, 1, " ", "|___________________  Banco ___________________|");
    			SendInfoMessage(i, 1, MensajeBanco[0], "Banco: ");
    			SendInfoMessage(i, 1, MensajeBanco[1], "Banco: ");
    			SendInfoMessage(i, 1, MensajeBanco[2], "Banco: ");
				if ( PlayersData[i][Alquiler] != -1 )
				{
	    			SendInfoMessage(i, 1, " ", "|_____________________ Alquiler ____________________|");
				    if ( HouseData[PlayersData[i][Alquiler]][PriceRent] <= PlayersData[i][Banco] )
				    {
				   		format(MensajeBanco[3], 70, "{F50000}-{00F50A}$%i", HouseData[PlayersData[i][Alquiler]][PriceRent]);
		    			SendInfoMessage(i, 1, MensajeBanco[3], "Alquiler: ");
						HouseData[PlayersData[i][Alquiler]][Deposito] = HouseData[PlayersData[i][Alquiler]][Deposito] + HouseData[PlayersData[i][Alquiler]][PriceRent];
						PlayersData[i][Banco] = PlayersData[i][Banco] - HouseData[PlayersData[i][Alquiler]][PriceRent];
					}
					else
					{
						PlayersData[i][Alquiler] = -1;
						PlayersData[i][House] 	= -1;
						SendInfoMessage(i, 3, "0", "Has sido desalojado de su alquiler, por falta de dinero en el banco!");
					}
				}
		        if ( PlayersData[i][House] != -1 || PlayersData[i][Alquiler] != -1 )
		        {
		            if ( PlayersData[i][Alquiler] != -1 )
					{
						houseid = PlayersData[i][Alquiler];
					}
					else
					{
						houseid = PlayersData[i][House];
					}
					if ( (HouseData[houseid][Price] / 1000) <= PlayersData[i][Banco] )
					{
				   		format(MensajeBanco[3], 70, "{F50000}-{00F50A}$%i", (HouseData[houseid][Price] / 1000));
		    			SendInfoMessage(i, 1, MensajeBanco[3], "Electricidad: ");
						PlayersData[i][Banco] = PlayersData[i][Banco] - (HouseData[houseid][Price] / 1000);
						FaccionData[GOBIERNO][Deposito] = FaccionData[GOBIERNO][Deposito] + (HouseData[houseid][Price] / 1000);
					}
					else
					{
    				    if ( PlayersData[i][Alquiler] != -1 )
					    {
							PlayersData[i][Alquiler] = -1;
							PlayersData[i][House] 	= -1;
							SendInfoMessage(i, 3, "0", "Has sido desalojado de su alquiler, por no pagar la electricidad!");
						}
						else
						{
							RemoveDuenoOfHouse(houseid);
							SendInfoMessage(i, 3, "0", "A perdido su casa por no pagar la electricidad!");
						}
					}
				}
				if ( PlayersData[i][Car] != -1 )
				{
				    if ( (coches_Todos_Precios[GetVehicleModel(PlayersData[i][Car] - 400)] / 50) <= PlayersData[i][Banco] )
				    {
				   		format(MensajeBanco[3], 70, "{F50000}-{00F50A}$%i", (coches_Todos_Precios[GetVehicleModel(PlayersData[i][Car]) - 400] / 50));
		    			SendInfoMessage(i, 1, MensajeBanco[3], "Impuesto y Seguro del Vehículo: ");
						PlayersData[i][Banco] = PlayersData[i][Banco] - (coches_Todos_Precios[GetVehicleModel(PlayersData[i][Car]) - 400] / 50);
						FaccionData[GOBIERNO][Deposito] = FaccionData[GOBIERNO][Deposito] + (coches_Todos_Precios[GetVehicleModel(PlayersData[i][Car]) - 400] / 50);
					}
					else
					{
						RemoveDuenoOfVehicle(PlayersData[i][Car], 2);
						SendInfoMessage(i, 3, "0", "Has perdido tu vehículo por no pagar los impuestos!");
					}
				}
    			SendInfoMessage(i, 1, " ", "|_____________________ Fin ____________________|");
				if ( PlayersData[i][Faccion] != CIVIL )
		        {
    				PlayersData[i][HorasWork]++;
   				}
				PlayersData[i][HoursPlaying]++;
				PlayersData[i][IsPaga] = 0;
				PlayersDataOnline[i][IsPagaO]			= TimeNow;
				SetPlayerScore(i, GetPlayerScoreEx(i));
				GameTextForPlayer(i, FechaHoraFormateada, 6000, 1 );
				GetPlayerPos(i, Xpaga, Ypaga, Zpaga);
			    PlayerPlaySound(i, 1133, Xpaga, Ypaga, Zpaga);
			    SetPlayerOrginalTime(i);
			}
			else
			{
			    if ( PlayersDataOnline[i][State] == 3 )
			    {
    				SendInfoMessage(i, 0, "215", "No has jugado lo suficiente como para recibir la paga.");
   				}
			}
		}
		VerificarCochesVencidos();
		RandomFire();
	}
	return 1;
}
public SetPlayerJail(playerid)
{
	ResetPlayerWeaponsEx(playerid);
	SetPlayerPos(playerid,
	JailsType[PlayersData[playerid][IsInJail]][PosX_Preso],
	JailsType[PlayersData[playerid][IsInJail]][PosY_Preso],
	JailsType[PlayersData[playerid][IsInJail]][PosZ_Preso]);
	SetPlayerFacingAngle(playerid, 	JailsType[PlayersData[playerid][IsInJail]][PosZZ_Preso]);
	SetPlayerInteriorEx(playerid, JailsType[PlayersData[playerid][IsInJail]][Interior_Preso]);
	SetSpawnInfo(playerid, -1, PlayersData[playerid][Skin],
	JailsType[PlayersData[playerid][IsInJail]][PosX_Liberado],
	JailsType[PlayersData[playerid][IsInJail]][PosY_Liberado],
	JailsType[PlayersData[playerid][IsInJail]][PosZ_Liberado],
	JailsType[PlayersData[playerid][IsInJail]][PosZZ_Liberado], 0, 0, 0, 0, 0, 0);
    SetCameraBehindPlayer(playerid);
    SetPlayerVirtualWorldEx(playerid, WORLD_DEFAULT_INTERIOR);
}
public SetTimerGlobal()
{
	// Hora Global
	new HoraGLOBAL, MinutosGLOBAL, SegundosGLOBAL;
	gettime(HoraGLOBAL, MinutosGLOBAL, SegundosGLOBAL);

	if ( HoraGLOBAL == 0 )
	{
		HoraGLOBAL = 23;
	}
	else
	{
	    HoraGLOBAL--;		      /*- Restamos 1, porque la hora de GETTIME la da en formato 24 horas, pero en
			                        -  SetWordTime es de rango 0 - 23.  */
	}

	SetWorldTime(HoraGLOBAL);	 // Establecemos la hora global

	new NuevaHora = ( (60 - ((MinutosGLOBAL) + 1)) * 60000 ) + ( (60 - (SegundosGLOBAL + 1) ) * 1000);
	SetTimer("SetTimerGlobal", NuevaHora, false); // Echamos andar el timer
	printf("Nueva Hora: %i Minutos: %i Milisegundos: %i", HoraGLOBAL, (NuevaHora / 1000) / 60,NuevaHora );
	MostrarHora(1, 0);
	return 1;
}
public LoadDataVehicle(vehicleid, dir[], type)
{
	new query [500], Cache:cacheid, vehicleExist;
	format(query, 500, "SELECT * FROM `%s` WHERE `ID` = '%i';", dir, vehicleid);
    cacheid =
    mysql_query(dataBase, query);
    cache_get_row_count(vehicleExist);
    if (vehicleExist)
    {
        new ModelTemp;    cache_get_value_name_int(0, "Modelo", ModelTemp);
        if ( type )
		{
			cache_get_value_name_float(0, "PosX", DataCars[vehicleid][PosX]);
			cache_get_value_name_float(0, "PosY", DataCars[vehicleid][PosY]);
			cache_get_value_name_float(0, "PosZ", DataCars[vehicleid][PosZ]);
			cache_get_value_name_float(0, "PosZZ", DataCars[vehicleid][PosZZ]);

			cache_get_value_name_int(0, "Modelo", DataCars[vehicleid][Modelo]);

			cache_get_value_name_int(0, "Color1", DataCars[vehicleid][Color1]);
			cache_get_value_name_int(0, "Color2", DataCars[vehicleid][Color2]);
            cache_get_value_name(0, "Dueno", DataCars[vehicleid][Dueno], MAX_PLAYER_NAME);
		}
        cache_get_value_name_int(0, "Seguro", DataCars[vehicleid][Lock]);
		if ( type )
		{
			cache_get_value_name_int(0, "Time", DataCars[vehicleid][Time]);
			cache_get_value_name_int(0, "Matricula", DataCars[vehicleid][Matricula]);
			format(DataCars[vehicleid][MatriculaString], 32, "%s", DataCars[vehicleid][Matricula]);
		}
		cache_get_value_name_int(0, "LockPolice", DataCars[vehicleid][LockPolice]);
		cache_get_value_name(0, "ReasonLock", DataCars[vehicleid][ReasonLock], 50);
		cache_get_value_name_int(0, "Maletero_0_0", coches_Todos_Maleteros[vehicleid][0][0]);
		cache_get_value_name_int(0, "Maletero_0_1", coches_Todos_Maleteros[vehicleid][0][1]);
		cache_get_value_name_int(0, "Maletero_1_0", coches_Todos_Maleteros[vehicleid][1][0]);
		cache_get_value_name_int(0, "Maletero_1_1", coches_Todos_Maleteros[vehicleid][1][1]);
		cache_get_value_name_int(0, "Maletero_2_0", coches_Todos_Maleteros[vehicleid][2][0]);
		cache_get_value_name_int(0, "Maletero_2_1", coches_Todos_Maleteros[vehicleid][2][1]);
		cache_get_value_name_int(0, "Maletero_3_0", coches_Todos_Maleteros[vehicleid][3][0]);
		cache_get_value_name_int(0, "Maletero_3_1", coches_Todos_Maleteros[vehicleid][3][1]);
		cache_get_value_name_int(0, "Maletero_4_0", coches_Todos_Maleteros[vehicleid][4][0]);
		cache_get_value_name_int(0, "Maletero_4_1", coches_Todos_Maleteros[vehicleid][4][1]);
		cache_get_value_name_int(0, "Maletero_5_0", coches_Todos_Maleteros[vehicleid][5][0]);
		cache_get_value_name_int(0, "Maletero_5_1", coches_Todos_Maleteros[vehicleid][5][1]);
		cache_get_value_name_int(0, "Maletero_6_0", coches_Todos_Maleteros[vehicleid][6][0]);
		cache_get_value_name_int(0, "Maletero_6_1", coches_Todos_Maleteros[vehicleid][6][1]);
		cache_get_value_name_int(0, "Maletero_7", coches_Todos_Maleteros[vehicleid][7][0]);
		cache_get_value_name_int(0, "Maletero_8", coches_Todos_Maleteros[vehicleid][8][0]);
		cache_get_value_name_int(0, "Maletero_9", coches_Todos_Maleteros[vehicleid][9][0]);
		cache_get_value_name_int(0, "Maletero_10", coches_Todos_Maleteros[vehicleid][10][0]);
		cache_get_value_name_int(0, "Maletero_11", coches_Todos_Maleteros[vehicleid][11][0]);
  		cache_get_value_name_int(0, "MaleteroState", DataCars[vehicleid][MaleteroState]);
		cache_get_value_name_int(0, "Oil", DataCars[vehicleid][Oil]);
		cache_get_value_name_int(0, "Gas", DataCars[vehicleid][Gas]);
		cache_get_value_name_float(0, "LastX", DataCars[vehicleid][LastX]);
		cache_get_value_name_float(0, "LastY", DataCars[vehicleid][LastY]);
		cache_get_value_name_float(0, "LastZ", DataCars[vehicleid][LastZ]);
		cache_get_value_name_float(0, "LastZZ", DataCars[vehicleid][LastZZ]);
		cache_get_value_name_int(0, "IsLastSpawn", DataCars[vehicleid][IsLastSpawn]);
		cache_get_value_name_float(0, "LastDamage", DataCars[vehicleid][LastDamage]);
		cache_get_value_name_int(0, "PanelS", DataCars[vehicleid][PanelS]);
		cache_get_value_name_int(0, "DoorS", DataCars[vehicleid][DoorS]);
		cache_get_value_name_int(0, "LightS", DataCars[vehicleid][LightS]);
		cache_get_value_name_int(0, "TiresS", DataCars[vehicleid][TiresS]);
		cache_get_value_name_int(0, "SlotsTunning_0", DataCars[vehicleid][SlotsTunning][0]);
		cache_get_value_name_int(0, "SlotsTunning_1", DataCars[vehicleid][SlotsTunning][1]);
		cache_get_value_name_int(0, "SlotsTunning_2", DataCars[vehicleid][SlotsTunning][2]);
		cache_get_value_name_int(0, "SlotsTunning_3", DataCars[vehicleid][SlotsTunning][3]);
		cache_get_value_name_int(0, "SlotsTunning_4", DataCars[vehicleid][SlotsTunning][4]);
		cache_get_value_name_int(0, "SlotsTunning_5", DataCars[vehicleid][SlotsTunning][5]);
		cache_get_value_name_int(0, "SlotsTunning_6", DataCars[vehicleid][SlotsTunning][6]);
		cache_get_value_name_int(0, "SlotsTunning_7", DataCars[vehicleid][SlotsTunning][7]);
		cache_get_value_name_int(0, "SlotsTunning_8", DataCars[vehicleid][SlotsTunning][8]);
		cache_get_value_name_int(0, "SlotsTunning_9", DataCars[vehicleid][SlotsTunning][9]);
		cache_get_value_name_int(0, "SlotsTunning_10", DataCars[vehicleid][SlotsTunning][10]);
		cache_get_value_name_int(0, "SlotsTunning_11", DataCars[vehicleid][SlotsTunning][11]);
		cache_get_value_name_int(0, "SlotsTunning_12", DataCars[vehicleid][SlotsTunning][12]);
		cache_get_value_name_int(0, "SlotsTunning_13", DataCars[vehicleid][SlotsTunning][13]);
		cache_get_value_name_int(0, "Vinillo", DataCars[vehicleid][Vinillo]);
		if ( type )
		{
			cache_get_value_name_int(0, "Interior", DataCars[vehicleid][Interior]);
		}
		cache_get_value_name_int(0, "InteriorLast", DataCars[vehicleid][InteriorLast]);
		if ( type )
		{
			cache_get_value_name_int(0, "World", DataCars[vehicleid][World]);
		}
		cache_get_value_name_int(0, "WorldLast", DataCars[vehicleid][WorldLast]);
		
		cache_get_value_name_int(0, "StationID", DataCars[vehicleid][StationID]);
		cache_get_value_name_int(0, "VolumenVehicle", DataCars[vehicleid][VolumenVehicle]);
		cache_get_value_name_int(0, "EcualizadorVehicle_0", DataCars[vehicleid][EcualizadorVehicle][0]);
		cache_get_value_name_int(0, "EcualizadorVehicle_1", DataCars[vehicleid][EcualizadorVehicle][1]);
		cache_get_value_name_int(0, "EcualizadorVehicle_2", DataCars[vehicleid][EcualizadorVehicle][2]);
		cache_get_value_name_int(0, "EcualizadorVehicle_3", DataCars[vehicleid][EcualizadorVehicle][3]);
		cache_get_value_name_int(0, "EcualizadorVehicle_4", DataCars[vehicleid][EcualizadorVehicle][4]);
		cache_get_value_name_int(0, "EcualizadorVehicle_5", DataCars[vehicleid][EcualizadorVehicle][5]);
		cache_get_value_name_int(0, "EcualizadorVehicle_6", DataCars[vehicleid][EcualizadorVehicle][6]);
		cache_get_value_name_int(0, "EcualizadorVehicle_7", DataCars[vehicleid][EcualizadorVehicle][7]);
		cache_get_value_name_int(0, "EcualizadorVehicle_8", DataCars[vehicleid][EcualizadorVehicle][8]);

		cache_get_value_name_int(0, "GuanteraLock", DataCars[vehicleid][GuanteraLock]);
		cache_get_value_name_int(0, "GuanteraObjects_0", DataCars[vehicleid][GuanteraObjects][0]);
		cache_get_value_name_int(0, "GuanteraObjects_1", DataCars[vehicleid][GuanteraObjects][1]);
		cache_get_value_name_int(0, "GuanteraObjects_2", DataCars[vehicleid][GuanteraObjects][2]);
		cache_get_value_name_int(0, "GuanteraObjects_3", DataCars[vehicleid][GuanteraObjects][3]);
		cache_get_value_name_int(0, "GuanteraObjects_4", DataCars[vehicleid][GuanteraObjects][4]);
		cache_get_value_name_int(0, "GuanteraObjects_5", DataCars[vehicleid][GuanteraObjects][5]);
		cache_get_value_name_int(0, "GuanteraObjects_6", DataCars[vehicleid][GuanteraObjects][6]);
		cache_get_value_name_int(0, "GuanteraObjects_7", DataCars[vehicleid][GuanteraObjects][7]);

		DataCars[vehicleid][VehicleDeath]		= false;
		DataCars[vehicleid][Puente]				= true;
		DataCars[vehicleid][StateEncendido] 	= false;

		if ( !type )
		{
		    if ( ModelTemp != DataCars[vehicleid][Modelo] )
		    {
		        DataCars[vehicleid][IsLastSpawn]  = false;
		        DataCars[vehicleid][WorldLast]    = DataCars[vehicleid][World];
		        DataCars[vehicleid][InteriorLast] = DataCars[vehicleid][Interior];
				CleanTunningSlots(vehicleid);
		    }
		}
    }
    cache_delete(cacheid);
    return vehicleExist;
}
public SaveDataVehicle(vehicleid, dir[])
{
	new query[2000];
    /*//Utilizado para guardar los vehiculos de Scriptfiles
	format(query, 2000, "INSERT INTO `%s` (`ID`,`Modelo`) VALUES ('%i','%i');", dir, vehicleid, DataCars[vehicleid][Modelo]);
	mysql_query(dataBase, query, false);
	*/

    format(query, 2000, "UPDATE `%s` SET ", dir);
	strcat(query, "`PosX`='%f',`PosY`='%f',`PosZ`='%f',`PosZZ`='%f',`Modelo`='%i',`Color1`='%i',`Color2`='%i',`Dueno`='%e',");
	strcat(query, "`Seguro`='%i',`Time`='%i',`Matricula`='%i',`LockPolice`='%i',`ReasonLock`='%e'");
	strcat(query, " WHERE `ID`='%i';");
	mysql_format(dataBase, query, 2000, query,
		DataCars[vehicleid][PosX],
		DataCars[vehicleid][PosY],
		DataCars[vehicleid][PosZ],
		DataCars[vehicleid][PosZZ],
		DataCars[vehicleid][Modelo],
		DataCars[vehicleid][Color1],
		DataCars[vehicleid][Color2],
		DataCars[vehicleid][Dueno],
		DataCars[vehicleid][Lock],
		DataCars[vehicleid][Time],
		DataCars[vehicleid][Matricula],
		DataCars[vehicleid][LockPolice],
		DataCars[vehicleid][ReasonLock],
		vehicleid);
	mysql_query(dataBase, query, false);

	format(query, 2000, "UPDATE `%s` SET ", dir);
	strcat(query, "`Maletero_0_0`='%i',`Maletero_0_1`='%i',`Maletero_1_0`='%i',`Maletero_1_1`='%i',`Maletero_2_0`='%i',`Maletero_2_1`='%i',`Maletero_3_0`='%i',`Maletero_3_1`='%i',");
	strcat(query, "`Maletero_4_0`='%i',`Maletero_4_1`='%i',`Maletero_5_0`='%i',`Maletero_5_1`='%i',`Maletero_6_0`='%i',`Maletero_6_1`='%i',");
	strcat(query, "`Maletero_7`='%i',`Maletero_8`='%i',`Maletero_9`='%i',`Maletero_10`='%i',`Maletero_11`='%i',`MaleteroState`='%i',`Oil`='%i',`Gas`='%i',");
	strcat(query, "`LastX`='%f',`LastY`='%f',`LastZ`='%f',`LastZZ`='%f',`IsLastSpawn`='%i',`LastDamage`='%f',`PanelS`='%i',`DoorS`='%i',`LightS`='%i',`TiresS`='%i',");
	strcat(query, "`SlotsTunning_0`='%i',`SlotsTunning_1`='%i',`SlotsTunning_2`='%i',`SlotsTunning_3`='%i',`SlotsTunning_4`='%i',`SlotsTunning_5`='%i',`SlotsTunning_6`='%i',");
	strcat(query, "`SlotsTunning_7`='%i',`SlotsTunning_8`='%i',`SlotsTunning_9`='%i',`SlotsTunning_10`='%i',`SlotsTunning_11`='%i',`SlotsTunning_12`='%i',`SlotsTunning_13`='%i',");
	strcat(query, "`Vinillo`='%i',`Interior`='%i',`InteriorLast`='%i',`World`='%i',`WorldLast`='%i',`StationID`='%i',`VolumenVehicle`='%i',`EcualizadorVehicle_0`='%i',");
	strcat(query, "`EcualizadorVehicle_1`='%i',`EcualizadorVehicle_2`='%i',`EcualizadorVehicle_3`='%i',`EcualizadorVehicle_4`='%i',`EcualizadorVehicle_5`='%i',");
	strcat(query, "`EcualizadorVehicle_6`='%i',`EcualizadorVehicle_7`='%i',`EcualizadorVehicle_8`='%i',`GuanteraLock`='%i',`GuanteraObjects_0`='%i',`GuanteraObjects_1`='%i',");
	strcat(query, "`GuanteraObjects_2`='%i',`GuanteraObjects_3`='%i',`GuanteraObjects_4`='%i',`GuanteraObjects_5`='%i',`GuanteraObjects_6`='%i',`GuanteraObjects_7`='%i'");
	strcat(query, " WHERE `ID`='%i';");
	mysql_format(dataBase, query, 2000, query,
		coches_Todos_Maleteros[vehicleid][0][0],
		coches_Todos_Maleteros[vehicleid][0][1],
		coches_Todos_Maleteros[vehicleid][1][0],
		coches_Todos_Maleteros[vehicleid][1][1],
		coches_Todos_Maleteros[vehicleid][2][0],
		coches_Todos_Maleteros[vehicleid][2][1],
		coches_Todos_Maleteros[vehicleid][3][0],
		coches_Todos_Maleteros[vehicleid][3][1],
		coches_Todos_Maleteros[vehicleid][4][0],
		coches_Todos_Maleteros[vehicleid][4][1],
		coches_Todos_Maleteros[vehicleid][5][0],
		coches_Todos_Maleteros[vehicleid][5][1],
		coches_Todos_Maleteros[vehicleid][6][0],
		coches_Todos_Maleteros[vehicleid][6][1],
		coches_Todos_Maleteros[vehicleid][7][0],
		coches_Todos_Maleteros[vehicleid][8][0],
		coches_Todos_Maleteros[vehicleid][9][0],
		coches_Todos_Maleteros[vehicleid][10][0],
		coches_Todos_Maleteros[vehicleid][11][0],
		DataCars[vehicleid][MaleteroState],
		DataCars[vehicleid][Oil],
		DataCars[vehicleid][Gas],
		DataCars[vehicleid][LastX],
		DataCars[vehicleid][LastY],
		DataCars[vehicleid][LastZ],
		DataCars[vehicleid][LastZZ],
		DataCars[vehicleid][IsLastSpawn],
		DataCars[vehicleid][LastDamage],
		DataCars[vehicleid][PanelS],
		DataCars[vehicleid][DoorS],
		DataCars[vehicleid][LightS],
		DataCars[vehicleid][TiresS],
		DataCars[vehicleid][SlotsTunning][0],
		DataCars[vehicleid][SlotsTunning][1],
		DataCars[vehicleid][SlotsTunning][2],
		DataCars[vehicleid][SlotsTunning][3],
		DataCars[vehicleid][SlotsTunning][4],
		DataCars[vehicleid][SlotsTunning][5],
		DataCars[vehicleid][SlotsTunning][6],
		DataCars[vehicleid][SlotsTunning][7],
		DataCars[vehicleid][SlotsTunning][8],
		DataCars[vehicleid][SlotsTunning][9],
		DataCars[vehicleid][SlotsTunning][10],
		DataCars[vehicleid][SlotsTunning][11],
		DataCars[vehicleid][SlotsTunning][12],
		DataCars[vehicleid][SlotsTunning][13],
		DataCars[vehicleid][Vinillo],
		DataCars[vehicleid][Interior],
		DataCars[vehicleid][InteriorLast],
		DataCars[vehicleid][World],
		DataCars[vehicleid][WorldLast],
		DataCars[vehicleid][StationID],
		DataCars[vehicleid][VolumenVehicle],
		DataCars[vehicleid][EcualizadorVehicle][0],
		DataCars[vehicleid][EcualizadorVehicle][1],
		DataCars[vehicleid][EcualizadorVehicle][2],
		DataCars[vehicleid][EcualizadorVehicle][3],
		DataCars[vehicleid][EcualizadorVehicle][4],
		DataCars[vehicleid][EcualizadorVehicle][5],
		DataCars[vehicleid][EcualizadorVehicle][6],
		DataCars[vehicleid][EcualizadorVehicle][7],
		DataCars[vehicleid][EcualizadorVehicle][8],
		DataCars[vehicleid][GuanteraLock],
		DataCars[vehicleid][GuanteraObjects][0],
		DataCars[vehicleid][GuanteraObjects][1],
		DataCars[vehicleid][GuanteraObjects][2],
		DataCars[vehicleid][GuanteraObjects][3],
		DataCars[vehicleid][GuanteraObjects][4],
		DataCars[vehicleid][GuanteraObjects][5],
		DataCars[vehicleid][GuanteraObjects][6],
		DataCars[vehicleid][GuanteraObjects][7],
		vehicleid);
	mysql_query(dataBase, query, false);
}
public IsPlayerInNearVehicle(playerid)
{
	if ( !IsPlayerInAnyVehicle(playerid) )
	{
	    new TheVehicle;
	    new i;
	    new Float:RangoC;
	    new Float:X, Float:Y, Float:Z;
		new MyWorld = GetPlayerVirtualWorld(playerid);
	    do
	    {
		    RangoC++;
			i = 1;
			for (; i <= MAX_CAR; i++)
			{
			    GetVehiclePos(i, X, Y, Z);
				if (IsPlayerInRangeOfPoint(playerid, RangoC,
					X,
					Y,
					Z) && MyWorld == DataCars[i][WorldLast])
				{
				    TheVehicle = i;
				    RangoC = 5.0;
				    break;
				}
			}
		}
		while( RangoC != 5.0 );

		if ( TheVehicle && coches_Todos_Type[GetVehicleModel(TheVehicle) - 400] != BICI )
		{
		    return TheVehicle;
		}
		else
		{
			SendInfoMessage(playerid, 0, "222", "No hay ningún vehículo a su alrededor");
		}
		return false;
	}
	else
	{
		return GetPlayerVehicleID(playerid);
	}
}
public IsPlayerInNearVehicleEx(playerid)
{
	if ( !IsPlayerInAnyVehicle(playerid) )
	{
	    new TheVehicle;
	    new i;
	    new Float:RangoC;
	    new Float:X, Float:Y, Float:Z;
	    do
	    {
		    RangoC++;
			i = 1;
			for (; i <= MAX_CAR; i++)
			{
			    GetVehiclePos(i, X, Y, Z);
				if (IsPlayerInRangeOfPoint(playerid, RangoC,
					X,
					Y,
					Z) )
				{
				    TheVehicle = i;
				    RangoC = 5.0;
					break;
				}
			}
		}
		while( RangoC != 5.0 );

		if ( !TheVehicle )
		{
			SendInfoMessage(playerid, 0, "216", "No hay ningún vehículo a su alrededor");
		}
		return TheVehicle;
	}
	else
	{
		return GetPlayerVehicleID(playerid);
	}
}
public AparcarVehicle(playerid, vehicleid)
{
	for (new i = 1; i <= MAX_CAR; i++)
	{
		if (IsPlayerInRangeOfPoint(playerid, 4.0,
			DataCars[i][PosX],
			DataCars[i][PosY],
			DataCars[i][PosZ]) &&
			DataCars[i][World] == DataCars[vehicleid][World]
			&&
			DataCars[i][Interior] == DataCars[vehicleid][Interior])
		{
		    SendInfoMessage(playerid, 0, "223", "Parqueo ocupado, por favor busque otro lugar!");
		    return false;
		}
	}
	GameTextForPlayer(playerid, "~W~Coche ~B~Aparcado!", 1000, 6);
    new Float:X, Float:Y, Float:Z, Float:ZZ;
    GetVehiclePos(vehicleid, X, Y, Z);
	GetVehicleZAngle(vehicleid, ZZ);


	DataCars[vehicleid][PosX] = X;
	DataCars[vehicleid][PosY] = Y;
	DataCars[vehicleid][PosZ] = Z;
	DataCars[vehicleid][PosZZ]= ZZ;

	DataCars[vehicleid][Interior] = GetPlayerInteriorEx(playerid);
	DataCars[vehicleid][World]    = GetPlayerVirtualWorld(playerid);

	SaveDataVehicle(vehicleid, DIR_VEHICLES);
    return true;
}
public LockVehicle(playerid)
{
	new MyNearCar = IsPlayerInNearVehicle(playerid);
	if ( MyNearCar )
	{
		if (IsVehicleMyVehicle(playerid, MyNearCar) ||
			IsVehicleMyFaccion(playerid, MyNearCar) && PlayersData[playerid][Rango] <= 1 ||
			IsVehicleMyFaccion(playerid, MyNearCar) && IsMyCarAsignados(playerid, MyNearCar))
		{
		    new MsgLock[MAX_TEXT_CHAT];
		    if ( DataCars[MyNearCar][Lock] )
		    {
		    	DataCars[MyNearCar][Lock] = false;
				ShowLockTextDraws(MyNearCar, true);
				GameTextForPlayer(playerid, "~w~Coche ~g~Abierto", 1000, 3);
	    	}
	    	else
	    	{
		    	DataCars[MyNearCar][Lock] = true;
				ShowLockTextDraws(MyNearCar, false);
				GameTextForPlayer(playerid, "~w~Coche ~r~Cerrado", 1000, 3);
			}
            LockTrain(MyNearCar, DataCars[MyNearCar][Lock]);

			if ( MyNearCar <= MAX_CAR_DUENO )
			{
				format(MsgLock, 50, "%s su vehículo.", NamesLook[DataCars[MyNearCar][Lock]]);
				for (new i = 0; i < MAX_PLAYERS; i++)
		    	{
			  	    if(IsPlayerConnected(i))
					{
						SetVehicleParamsForPlayer(MyNearCar, i, 0, DataCars[MyNearCar][Lock]);
					}
				}
			}
			else
			{
				format(MsgLock, 50, "%s un vehículo de facción.", NamesLook[DataCars[MyNearCar][Lock]]);
				for (new i = 0; i < MAX_PLAYERS; i++)
		    	{
			  	    if(IsPlayerConnected(i)&&PlayersData[playerid][Faccion]==PlayersData[i][Faccion])
			  	    {
						SetVehicleParamsForPlayer(MyNearCar, i, 0, DataCars[MyNearCar][Lock]);
					}
				}
			}
		    SendInfoMessage(playerid, 2, "0", MsgLock);
			PlayPlayerStreamSound(playerid, SOUND_ALARM_CAR);
		    return true;
	    }
	    else
		{
			SendInfoMessage(playerid, 0, "217", "Este no es su vehículo");
		    return false;
		}
	}
	else
	{
	    return false;
	}
}
public IsVehicleMyVehicle(playerid, vehicleid)
{
	if ( PlayersData[playerid][Car] == vehicleid )
	{
		return true;
	}
	else
	{
		return false;
	}
}
public IsVehicleMyFaccion(playerid, vehicleid)
{
	if ( PlayersData[playerid][Faccion] != CIVIL && PlayersData[playerid][Faccion] == DataCars[vehicleid][Time] && vehicleid > MAX_CAR_DUENO && vehicleid <= MAX_CAR_FACCION)
	{
	    return true;
	}
	else
	{
	    return false;
	}
}
public SetPlayerLockAllVehicles(playerid)
{
	for (new i = 1; i <= MAX_CAR; i++)
	{
		if ( i <= MAX_CAR_DUENO )
		{
		    if (strlen(DataCars[i][Dueno]) != 1)
			SetVehicleParamsForPlayer(i, playerid, 0, DataCars[i][Lock]);
			else
			SetVehicleParamsForPlayer(i, playerid, 0, 0);

		}
		else if ( i <= MAX_CAR_FACCION )
		{
		    if ( PlayersData[playerid][Faccion] == DataCars[i][Time] )
			SetVehicleParamsForPlayer(i, playerid, 0, DataCars[i][Lock]);
			else
			SetVehicleParamsForPlayer(i, playerid, 0, 1);
		}
		else
		{
			SetVehicleParamsForPlayer(i, playerid, 0, 0);
		}
	}
}
public IsFixBikeEnter(playerid, vehicleid)
{
    if ( coches_Todos_Type[GetVehicleModel(vehicleid) - 400] == MOTO || coches_Todos_Type[GetVehicleModel(vehicleid) - 400] == TREN || coches_Todos_Type[GetVehicleModel(vehicleid) - 400] == BOTE)
	{
	    new Float:PosFixVeh[3]; GetPlayerPos(playerid, PosFixVeh[0], PosFixVeh[1], PosFixVeh[2]);
	    SetPlayerPos(playerid, PosFixVeh[0], PosFixVeh[1], PosFixVeh[2] + 2);
	    return true;
	}
	else
	{
	    return false;
	}
}
public LoadCarsFaccion()
{
/////////////////////////////////////		/// Gobierno
	MAX_CAR++; // Heli 1
	DataCars[MAX_CAR][PosX]   = 1423.8506;
	DataCars[MAX_CAR][PosY]   = -1788.1591;
	DataCars[MAX_CAR][PosZ]   = 33.6485;
	DataCars[MAX_CAR][PosZZ]  = 90.2874;
	DataCars[MAX_CAR][Modelo] = 487;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]   = GOBIERNO;

	MAX_CAR++; // Limousine 1
	DataCars[MAX_CAR][PosX]   = 1403.7095;
	DataCars[MAX_CAR][PosY]     = -1775.6791;
	DataCars[MAX_CAR][PosZ]     = 13.2020;
	DataCars[MAX_CAR][PosZZ]  = 89.6743;
	DataCars[MAX_CAR][Modelo] = 409;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = GOBIERNO;

	MAX_CAR++; // Limousine 2
	DataCars[MAX_CAR][PosX]   = 1403.6346;
	DataCars[MAX_CAR][PosY]     = -1788.9039;
	DataCars[MAX_CAR][PosZ]     = 13.2026;
	DataCars[MAX_CAR][PosZZ]  = 89.6743;
	DataCars[MAX_CAR][Modelo] = 409;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = GOBIERNO;

	MAX_CAR++; // sultan
	DataCars[MAX_CAR][PosX]   = 1403.6726;
	DataCars[MAX_CAR][PosY]     = -1782.1398;
	DataCars[MAX_CAR][PosZ]     = 13.2269;
	DataCars[MAX_CAR][PosZZ]  = 89.6743;
	DataCars[MAX_CAR][Modelo] = 560;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = GOBIERNO;

/////////////////////////////////////		/// Licencieros
	MAX_CAR++; // Sentinel 1
	DataCars[MAX_CAR][PosX]   = -2081.1504;
	DataCars[MAX_CAR][PosY]     = -84.1511;
	DataCars[MAX_CAR][PosZ]     = 35.0391;
	DataCars[MAX_CAR][PosZZ]  = 180.3135;
	DataCars[MAX_CAR][Modelo] = 405;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LICENCIEROS;

	MAX_CAR++; // Sentinel 2
	DataCars[MAX_CAR][PosX]   = -2085.3494;
	DataCars[MAX_CAR][PosY]     = -84.3902;
	DataCars[MAX_CAR][PosZ]     = 35.0391;
	DataCars[MAX_CAR][PosZZ]  = 180.3135;
	DataCars[MAX_CAR][Modelo] = 405;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LICENCIEROS;

	MAX_CAR++; // Sentinel 3
	DataCars[MAX_CAR][PosX]   = -2089.7041;
	DataCars[MAX_CAR][PosY]     = -84.2775;
	DataCars[MAX_CAR][PosZ]     = 35.0391;
	DataCars[MAX_CAR][PosZZ]  = 180.3135;
	DataCars[MAX_CAR][Modelo] = 405;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LICENCIEROS;

	MAX_CAR++; // Sentinel 4
	DataCars[MAX_CAR][PosX]   = -2093.9377;
	DataCars[MAX_CAR][PosY]     = -84.1245;
	DataCars[MAX_CAR][PosZ]     = 35.0391;
	DataCars[MAX_CAR][PosZZ]  = 180.3135;
	DataCars[MAX_CAR][Modelo] = 405;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LICENCIEROS;

	MAX_CAR++; // Heli
	DataCars[MAX_CAR][PosX]   = -2028.4371;
	DataCars[MAX_CAR][PosY]     = -111.8142;
	DataCars[MAX_CAR][PosZ]     = 38.5758;
	DataCars[MAX_CAR][PosZZ]  = 0.2373;
	DataCars[MAX_CAR][Modelo] = 487;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LICENCIEROS;

	MAX_CAR++; // Bote
	DataCars[MAX_CAR][PosX]   = -1761.9163;
	DataCars[MAX_CAR][PosY]     = -194.3317;
	DataCars[MAX_CAR][PosZ]     = 0.3617;
	DataCars[MAX_CAR][PosZZ]  = 270.0933;
	DataCars[MAX_CAR][Modelo] = 493;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LICENCIEROS;

	MAX_CAR++; // CAMIÓN DE LICENCIEROS
	DataCars[MAX_CAR][PosX]   = -2063.4512;
	DataCars[MAX_CAR][PosY]     = -143.2802;
	DataCars[MAX_CAR][PosZ]     = 35.0500;
	DataCars[MAX_CAR][PosZZ]  = 356.2116;
	DataCars[MAX_CAR][Modelo] = 403;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LICENCIEROS;

	MAX_CAR++; // Sentinel  1  LICENCIEROS
	DataCars[MAX_CAR][PosX]   = -2062.5288;
	DataCars[MAX_CAR][PosY]     = -109.9416;
	DataCars[MAX_CAR][PosZ]     = 35.2093;
	DataCars[MAX_CAR][PosZZ]  = 180.3135;
	DataCars[MAX_CAR][Modelo] = 405;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LICENCIEROS;

	MAX_CAR++; // Sentinel 2  LICENCIEROS
	DataCars[MAX_CAR][PosX]   = -2072.0889;
	DataCars[MAX_CAR][PosY]     = -109.9933;
	DataCars[MAX_CAR][PosZ]     = 35.2260;
	DataCars[MAX_CAR][PosZZ]  = 180.3135;
	DataCars[MAX_CAR][Modelo] = 405;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LICENCIEROS;

	MAX_CAR++; // Sentinel 3  LICENCIEROS
	DataCars[MAX_CAR][PosX]   = -2082.1277;
	DataCars[MAX_CAR][PosY]     = -110.0483;
	DataCars[MAX_CAR][PosZ]     = 35.2182;
	DataCars[MAX_CAR][PosZZ]  = 180.3135;
	DataCars[MAX_CAR][Modelo] = 405;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LICENCIEROS;

	MAX_CAR++; // Sentinel 4 LICENCIEROS
	DataCars[MAX_CAR][PosX]   = -2091.4277;
	DataCars[MAX_CAR][PosY]     = -110.0991;
	DataCars[MAX_CAR][PosZ]     = 35.2109;
	DataCars[MAX_CAR][PosZZ]  = 180.3135;
	DataCars[MAX_CAR][Modelo] = 405;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LICENCIEROS;

/////////////////////////////////////		// Traficantes
	MAX_CAR++; // Camper 1
	DataCars[MAX_CAR][PosX]   = 1049.5192;
	DataCars[MAX_CAR][PosY]     = -306.6437;
	DataCars[MAX_CAR][PosZ]     = 73.9857;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 483;
	DataCars[MAX_CAR][Color1] = 252;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TRAFICANTES;

	MAX_CAR++; // Camper 2
	DataCars[MAX_CAR][PosX]   = 1041.9279;
	DataCars[MAX_CAR][PosY]     = -306.4722;
	DataCars[MAX_CAR][PosZ]     = 73.9872;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 483;
	DataCars[MAX_CAR][Color1] = 252;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TRAFICANTES;

	MAX_CAR++; // Camper 3
	DataCars[MAX_CAR][PosX]   = 1049.3835;
	DataCars[MAX_CAR][PosY]     = -291.9089;
	DataCars[MAX_CAR][PosZ]     = 73.9734;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 483;
	DataCars[MAX_CAR][Color1] = 252;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TRAFICANTES;

	MAX_CAR++; // Camper 4
	DataCars[MAX_CAR][PosX]   = 1041.8984;
	DataCars[MAX_CAR][PosY]     = -292.9134;
	DataCars[MAX_CAR][PosZ]     = 73.9849;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 483;
	DataCars[MAX_CAR][Color1] = 252;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TRAFICANTES;

/////////////////////////////////////	/// La Cosa Nostra
	MAX_CAR++; // Stafford 1
	DataCars[MAX_CAR][PosX]   = 1246.5371;
	DataCars[MAX_CAR][PosY]     = -2030.5886;
	DataCars[MAX_CAR][PosZ]     = 59.6070;
	DataCars[MAX_CAR][PosZZ]  = 269.9200;
	DataCars[MAX_CAR][Modelo] = 580;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LCN;

	MAX_CAR++; // Stafford 2
	DataCars[MAX_CAR][PosX]   = 1246.3102;
	DataCars[MAX_CAR][PosY]     = -2024.3002;
	DataCars[MAX_CAR][PosZ]     = 59.6129;
	DataCars[MAX_CAR][PosZZ]  = 269.9200;
	DataCars[MAX_CAR][Modelo] = 580;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LCN;

	MAX_CAR++; // Stafford 3
	DataCars[MAX_CAR][PosX]   = 1275.5823;
	DataCars[MAX_CAR][PosY]     = -2036.8193;
	DataCars[MAX_CAR][PosZ]     = 58.8556;
	DataCars[MAX_CAR][PosZZ]  = 89.1287;
	DataCars[MAX_CAR][Modelo] = 580;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LCN;

	MAX_CAR++; // Stafford 4
	DataCars[MAX_CAR][PosX]   = 1275.6466;
	DataCars[MAX_CAR][PosY]     = -2027.7294;
	DataCars[MAX_CAR][PosZ]     = 58.8190;
	DataCars[MAX_CAR][PosZZ]  = 90.6892;
	DataCars[MAX_CAR][Modelo] = 580;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LCN;

	MAX_CAR++; // Hustler 1
	DataCars[MAX_CAR][PosX]   = 1277.1549;
	DataCars[MAX_CAR][PosY]     = -2018.6228;
	DataCars[MAX_CAR][PosZ]     = 58.7358;
	DataCars[MAX_CAR][PosZZ]  = 89.0893;
	DataCars[MAX_CAR][Modelo] = 545;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LCN;

	MAX_CAR++; // Limo 1
	DataCars[MAX_CAR][PosX]   = 1274.4896;
	DataCars[MAX_CAR][PosY]     = -2032.3936;
	DataCars[MAX_CAR][PosZ]     = 58.8427;
	DataCars[MAX_CAR][PosZZ]  = 89.4884;
	DataCars[MAX_CAR][Modelo] = 409;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LCN;

	MAX_CAR++; // Heli
	DataCars[MAX_CAR][PosX]   = 1116.3240;
	DataCars[MAX_CAR][PosY]     = -2053.2993;
	DataCars[MAX_CAR][PosZ]     = 74.2678;
	DataCars[MAX_CAR][PosZZ]  = 179.4773;
	DataCars[MAX_CAR][Modelo] = 487;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LCN;

/////////////////////////////////////	//// DETECTIVES
	MAX_CAR++; // Limousine 1
	DataCars[MAX_CAR][PosX]   = -2064.2510;
	DataCars[MAX_CAR][PosY]     = 1421.9753;
	DataCars[MAX_CAR][PosZ]     = 6.8259;
	DataCars[MAX_CAR][PosZZ]  = 179.6253;
	DataCars[MAX_CAR][Modelo] = 409;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = ADP;

	MAX_CAR++; // Limousine 2
	DataCars[MAX_CAR][PosX]   = -2092.2761;
	DataCars[MAX_CAR][PosY]     = 1422.1587;
	DataCars[MAX_CAR][PosZ]     = 6.8259;
	DataCars[MAX_CAR][PosZZ]  = 179.6253;
	DataCars[MAX_CAR][Modelo] = 409;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = ADP;

	MAX_CAR++; // Manana 1
	DataCars[MAX_CAR][PosX]   = -2091.9221;
	DataCars[MAX_CAR][PosY]     = 1411.7478;
	DataCars[MAX_CAR][PosZ]     = 6.8386;
	DataCars[MAX_CAR][PosZZ]  = 270.0179;
	DataCars[MAX_CAR][Modelo] = 410;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = ADP;

	MAX_CAR++; // Manana 2
	DataCars[MAX_CAR][PosX]   = -2091.9207;
	DataCars[MAX_CAR][PosY]     = 1404.6810;
	DataCars[MAX_CAR][PosZ]     = 6.8386;
	DataCars[MAX_CAR][PosZZ]  = 270.0179;
	DataCars[MAX_CAR][Modelo] = 410;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = ADP;

	MAX_CAR++; // Manana 3
	DataCars[MAX_CAR][PosX]   = -2091.9187;
	DataCars[MAX_CAR][PosY]     = 1397.6490;
	DataCars[MAX_CAR][PosZ]     = 6.8386;
	DataCars[MAX_CAR][PosZZ]  = 270.0179;
	DataCars[MAX_CAR][Modelo] = 410;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = ADP;

	MAX_CAR++; // Manana 4
	DataCars[MAX_CAR][PosX]   = -2091.9167;
	DataCars[MAX_CAR][PosY]     = 1390.6129;
	DataCars[MAX_CAR][PosZ]     = 6.8387;
	DataCars[MAX_CAR][PosZZ]  = 270.0179;
	DataCars[MAX_CAR][Modelo] = 410;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = ADP;

	MAX_CAR++; // Manana 5
	DataCars[MAX_CAR][PosX]   = -2091.9146;
	DataCars[MAX_CAR][PosY]     = 1383.5077;
	DataCars[MAX_CAR][PosZ]     = 6.8424;
	DataCars[MAX_CAR][PosZZ]  = 270.0179;
	DataCars[MAX_CAR][Modelo] = 410;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = ADP;

	MAX_CAR++; // Heli
	DataCars[MAX_CAR][PosX]   = -2071.7710;
	DataCars[MAX_CAR][PosY]   = 1426.2206;
	DataCars[MAX_CAR][PosZ]   = 13.7946;
	DataCars[MAX_CAR][PosZZ]  = 181.4709;
	DataCars[MAX_CAR][Modelo] = 487;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]   = ADP;

/////////////////////////////////////	/// Yakuza
	MAX_CAR++; // NRG 1
	DataCars[MAX_CAR][PosX]   = -2272.4731;
	DataCars[MAX_CAR][PosY]     = 2303.1187;
	DataCars[MAX_CAR][PosZ]     = 4.4006;
	DataCars[MAX_CAR][PosZZ]  = 268.6271;
	DataCars[MAX_CAR][Modelo] = 522;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = YKZ;

	MAX_CAR++; // NRG 2
	DataCars[MAX_CAR][PosX]   = -2272.3984;
	DataCars[MAX_CAR][PosY]     = 2306.2275;
	DataCars[MAX_CAR][PosZ]     = 4.4008;
	DataCars[MAX_CAR][PosZZ]  = 268.6271;
	DataCars[MAX_CAR][Modelo] = 522;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = YKZ;

	MAX_CAR++; // NRG 3
	DataCars[MAX_CAR][PosX]   = -2272.3269;
	DataCars[MAX_CAR][PosY]     = 2309.2114;
	DataCars[MAX_CAR][PosZ]     = 4.4011;
	DataCars[MAX_CAR][PosZZ]  = 268.6271;
	DataCars[MAX_CAR][Modelo] = 522;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = YKZ;

	MAX_CAR++; // NRG 4
	DataCars[MAX_CAR][PosX]   = -2272.2563;
	DataCars[MAX_CAR][PosY]     = 2312.1572;
	DataCars[MAX_CAR][PosZ]     = 4.4013;
	DataCars[MAX_CAR][PosZZ]  = 268.6271;
	DataCars[MAX_CAR][Modelo] = 522;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = YKZ;

	MAX_CAR++; // Sultan 1
	DataCars[MAX_CAR][PosX]   = -2251.5767;
	DataCars[MAX_CAR][PosY]     = 2317.9282;
	DataCars[MAX_CAR][PosZ]     = 4.5278;
	DataCars[MAX_CAR][PosZZ]  = 89.7769;
	DataCars[MAX_CAR][Modelo] = 560;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = YKZ;

	MAX_CAR++; // Sultan 2
	DataCars[MAX_CAR][PosX]   = -2251.5996;
	DataCars[MAX_CAR][PosY]     = 2312.1257;
	DataCars[MAX_CAR][PosZ]     = 4.5278;
	DataCars[MAX_CAR][PosZZ]  = 89.7769;
	DataCars[MAX_CAR][Modelo] = 560;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = YKZ;

	MAX_CAR++; // Sultan 3
	DataCars[MAX_CAR][PosX]   = -2251.6233;
	DataCars[MAX_CAR][PosY]     = 2305.9558;
	DataCars[MAX_CAR][PosZ]     = 4.5277;
	DataCars[MAX_CAR][PosZZ]  = 89.7769;
	DataCars[MAX_CAR][Modelo] = 560;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = YKZ;

	MAX_CAR++; // Sultan 4
	DataCars[MAX_CAR][PosX]   = -2251.6470;
	DataCars[MAX_CAR][PosY]     = 2299.9570;
	DataCars[MAX_CAR][PosZ]     = 4.5276;
	DataCars[MAX_CAR][PosZZ]  = 89.7769;
	DataCars[MAX_CAR][Modelo] = 560;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = YKZ;

	MAX_CAR++; // Heli
	DataCars[MAX_CAR][PosX]   = -2227.2917;
	DataCars[MAX_CAR][PosY]     = 2326.7493;
	DataCars[MAX_CAR][PosZ]     = 7.2656;
	DataCars[MAX_CAR][PosZZ]  = 88.9387;
	DataCars[MAX_CAR][Modelo] = 487;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = YKZ;

	MAX_CAR++; // Bote 1
	DataCars[MAX_CAR][PosX]   = -2225.4934;
	DataCars[MAX_CAR][PosY]     = 2401.3386;
	DataCars[MAX_CAR][PosZ]     = -0.4979;
	DataCars[MAX_CAR][PosZZ]  = 44.7916;
	DataCars[MAX_CAR][Modelo] = 446;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = YKZ;

	MAX_CAR++; // Bote 2
	DataCars[MAX_CAR][PosX]   = -2204.9954;
	DataCars[MAX_CAR][PosY]     = 2421.3252;
	DataCars[MAX_CAR][PosZ]     = -0.5210;
	DataCars[MAX_CAR][PosZZ]  = 44.2520;
	DataCars[MAX_CAR][Modelo] = 446;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = YKZ;

/////////////////////////////////////	//// Taxistas
	MAX_CAR++; // Taxi 1
	DataCars[MAX_CAR][PosX]   = 1803.0527;
	DataCars[MAX_CAR][PosY]     = -1928.2758;
	DataCars[MAX_CAR][PosZ]     = 13.1682;
	DataCars[MAX_CAR][PosZZ]  = 89.9607;
	DataCars[MAX_CAR][Modelo] = 420;
	DataCars[MAX_CAR][Color1] = 6;
	DataCars[MAX_CAR][Color2] = 6;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TAXI;
	SetVehicleTaxi(MAX_CAR);

	MAX_CAR++; // Taxi 2
	DataCars[MAX_CAR][PosX]   = 1803.0560;
	DataCars[MAX_CAR][PosY]     = -1923.5580;
	DataCars[MAX_CAR][PosZ]     = 13.1708;
	DataCars[MAX_CAR][PosZZ]  = 89.9607;
	DataCars[MAX_CAR][Modelo] = 420;
	DataCars[MAX_CAR][Color1] = 6;
	DataCars[MAX_CAR][Color2] = 6;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TAXI;
	SetVehicleTaxi(MAX_CAR);

	MAX_CAR++; // Taxi 3
	DataCars[MAX_CAR][PosX]   = 1803.0596;
	DataCars[MAX_CAR][PosY]     = -1918.6929;
	DataCars[MAX_CAR][PosZ]     = 13.1736;
	DataCars[MAX_CAR][PosZZ]  = 89.9607;
	DataCars[MAX_CAR][Modelo] = 420;
	DataCars[MAX_CAR][Color1] = 6;
	DataCars[MAX_CAR][Color2] = 6;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TAXI;
	SetVehicleTaxi(MAX_CAR);

	MAX_CAR++; // Taxi 4
	DataCars[MAX_CAR][PosX]   = 1803.0625;
	DataCars[MAX_CAR][PosY]     = -1913.9565;
	DataCars[MAX_CAR][PosZ]     = 13.1763;
	DataCars[MAX_CAR][PosZZ]  = 89.9607;
	DataCars[MAX_CAR][Modelo] = 420;
	DataCars[MAX_CAR][Color1] = 6;
	DataCars[MAX_CAR][Color2] = 6;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TAXI;
	SetVehicleTaxi(MAX_CAR);

	MAX_CAR++; // Taxi 5
	DataCars[MAX_CAR][PosX]   = 1803.0660;
	DataCars[MAX_CAR][PosY]     = -1909.1177;
	DataCars[MAX_CAR][PosZ]     = 13.1791;
	DataCars[MAX_CAR][PosZZ]  = 89.9607;
	DataCars[MAX_CAR][Modelo] = 420;
	DataCars[MAX_CAR][Color1] = 6;
	DataCars[MAX_CAR][Color2] = 6;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TAXI;
	SetVehicleTaxi(MAX_CAR);

	MAX_CAR++; // Taxi 6
	DataCars[MAX_CAR][PosX]   = 1778.1522;
	DataCars[MAX_CAR][PosY]     = -1909.0978;
	DataCars[MAX_CAR][PosZ]     = 13.0649;
	DataCars[MAX_CAR][PosZZ]  = 269.3847;
	DataCars[MAX_CAR][Modelo] = 420;
	DataCars[MAX_CAR][Color1] = 6;
	DataCars[MAX_CAR][Color2] = 6;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TAXI;
	SetVehicleTaxi(MAX_CAR);

	MAX_CAR++; // Taxi 7
	DataCars[MAX_CAR][PosX]   = 1778.1006;
	DataCars[MAX_CAR][PosY]     = -1913.8856;
	DataCars[MAX_CAR][PosZ]     = 13.0677;
	DataCars[MAX_CAR][PosZZ]  = 269.3847;
	DataCars[MAX_CAR][Modelo] = 420;
	DataCars[MAX_CAR][Color1] = 6;
	DataCars[MAX_CAR][Color2] = 6;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TAXI;
	SetVehicleTaxi(MAX_CAR);

	MAX_CAR++; // Taxi 8
	DataCars[MAX_CAR][PosX]   = 1778.0482;
	DataCars[MAX_CAR][PosY]     = -1918.7432;
	DataCars[MAX_CAR][PosZ]     = 13.0704;
	DataCars[MAX_CAR][PosZZ]  = 269.3847;
	DataCars[MAX_CAR][Modelo] = 420;
	DataCars[MAX_CAR][Color1] = 6;
	DataCars[MAX_CAR][Color2] = 6;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TAXI;
	SetVehicleTaxi(MAX_CAR);

	MAX_CAR++; // Taxi 9
	DataCars[MAX_CAR][PosX]   = 1777.9969;
	DataCars[MAX_CAR][PosY]     = -1923.5170;
	DataCars[MAX_CAR][PosZ]     = 13.0731;
	DataCars[MAX_CAR][PosZZ]  = 269.3847;
	DataCars[MAX_CAR][Modelo] = 420;
	DataCars[MAX_CAR][Color1] = 6;
	DataCars[MAX_CAR][Color2] = 6;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TAXI;
	SetVehicleTaxi(MAX_CAR);

	MAX_CAR++; // Taxi 10
	DataCars[MAX_CAR][PosX]   = 1777.9457;
	DataCars[MAX_CAR][PosY]     = -1928.2849;
	DataCars[MAX_CAR][PosZ]     = 13.0759;
	DataCars[MAX_CAR][PosZZ]  = 269.3847;
	DataCars[MAX_CAR][Modelo] = 420;
	DataCars[MAX_CAR][Color1] = 6;
	DataCars[MAX_CAR][Color2] = 6;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TAXI;
	SetVehicleTaxi(MAX_CAR);

	MAX_CAR++; // Bus 1
	DataCars[MAX_CAR][PosX]   = 1762.8081;
	DataCars[MAX_CAR][PosY]     = -1888.1882;
	DataCars[MAX_CAR][PosZ]     = 13.6937;
	DataCars[MAX_CAR][PosZZ]  = 269.8838;
	DataCars[MAX_CAR][Modelo] = 437;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TAXI;

	MAX_CAR++; // Bus 2
	DataCars[MAX_CAR][PosX]   = 1801.4537;
	DataCars[MAX_CAR][PosY]     = -1939.2023;
	DataCars[MAX_CAR][PosZ]     = 13.6816;
	DataCars[MAX_CAR][PosZZ]  = 89.7052;
	DataCars[MAX_CAR][Modelo] = 437;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TAXI;

	MAX_CAR++; // Tren 1
	DataCars[MAX_CAR][PosX]   = 1752.1603;
	DataCars[MAX_CAR][PosY]     = -1953.9154;
	DataCars[MAX_CAR][PosZ]     = 13.5469;
	DataCars[MAX_CAR][PosZZ]  = 89.8376;
	DataCars[MAX_CAR][Modelo] = 538;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TAXI;

	MAX_CAR++; // Tren 1 INVALID TRAILER
	DataCars[MAX_CAR][PosX]   = 1733.6321;
	DataCars[MAX_CAR][PosY]     = -1953.7561;
	DataCars[MAX_CAR][PosZ]     = 14.9954;
	DataCars[MAX_CAR][PosZZ]  = 269.9219;
	DataCars[MAX_CAR][Modelo] = 570;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TAXI;

	MAX_CAR++; // Tren 1 INVALID TRAILER
	DataCars[MAX_CAR][PosX]   = 1712.7133;
	DataCars[MAX_CAR][PosY]     = -1953.6953;
	DataCars[MAX_CAR][PosZ]     = 14.9954;
	DataCars[MAX_CAR][PosZZ]  = 269.7455;
	DataCars[MAX_CAR][Modelo] = 570;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TAXI;

	MAX_CAR++; // Tren 1 INVALID TRAILER
	DataCars[MAX_CAR][PosX]   = 1691.7847;
	DataCars[MAX_CAR][PosY]     = -1953.6418;
	DataCars[MAX_CAR][PosZ]     = 14.9954;
	DataCars[MAX_CAR][PosZZ]  = 269.9615;
	DataCars[MAX_CAR][Modelo] = 570;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TAXI;

	MAX_CAR++; // Tren 2
	DataCars[MAX_CAR][PosX]   = -1943.3994;
	DataCars[MAX_CAR][PosY]     = 156.0088;
	DataCars[MAX_CAR][PosZ]     = 27.0006;
	DataCars[MAX_CAR][PosZZ]  = 357.5287;
	DataCars[MAX_CAR][Modelo] = 538;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TAXI;

	MAX_CAR++; // Tren 2 INVALID TRAILER
	DataCars[MAX_CAR][PosX]   = -1943.3994;
	DataCars[MAX_CAR][PosY]     = 156.0088;
	DataCars[MAX_CAR][PosZ]     = 27.0006;
	DataCars[MAX_CAR][PosZZ]  = 357.5287;
	DataCars[MAX_CAR][Modelo] = 570;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TAXI;

	MAX_CAR++; // Tren 2 INVALID TRAILER
	DataCars[MAX_CAR][PosX]   = -1943.3994;
	DataCars[MAX_CAR][PosY]     = 156.0088;
	DataCars[MAX_CAR][PosZ]     = 27.0006;
	DataCars[MAX_CAR][PosZZ]  = 357.5287;
	DataCars[MAX_CAR][Modelo] = 570;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TAXI;

	MAX_CAR++; // Tren 2 INVALID TRAILER
	DataCars[MAX_CAR][PosX]   = -1943.3994;
	DataCars[MAX_CAR][PosY]     = 156.0088;
	DataCars[MAX_CAR][PosZ]     = 27.0006;
	DataCars[MAX_CAR][PosZZ]  = 357.5287;
	DataCars[MAX_CAR][Modelo] = 570;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TAXI;

	MAX_CAR++; // Tran Vía San Fierro
	DataCars[MAX_CAR][PosX]   = -2006.4021;
	DataCars[MAX_CAR][PosY]     = 142.8303;
	DataCars[MAX_CAR][PosZ]     = 27.5391;
	DataCars[MAX_CAR][PosZZ]  = 179.2768;
	DataCars[MAX_CAR][Modelo] = 449;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TAXI;
	TramSFID = MAX_CAR;

/////////////////////////////////////	//// SFPD
	MAX_CAR++; // Heli
	DataCars[MAX_CAR][PosX]   = -1680.3624;
	DataCars[MAX_CAR][PosY]     = 705.8151;
	DataCars[MAX_CAR][PosZ]     = 30.6016;
	DataCars[MAX_CAR][PosZZ]  = 179.5311;
	DataCars[MAX_CAR][Modelo] = 497;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1608.3695068359;
	DataCars[MAX_CAR][PosY]   = 748.70001220703;
	DataCars[MAX_CAR][PosZ]   = -5.5818099975586;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 523;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1604.4149169922;
	DataCars[MAX_CAR][PosY]   = 748.70001220703;
	DataCars[MAX_CAR][PosZ]   = -5.5818099975586;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 523;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1600.1611328125;
	DataCars[MAX_CAR][PosY]   = 748.70001220703;
	DataCars[MAX_CAR][PosZ]   = -5.5818099975586;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 523;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1596.2014160156;
	DataCars[MAX_CAR][PosY]   = 748.70001220703;
	DataCars[MAX_CAR][PosZ]   = -5.5818099975586;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 523;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1592.1605224609;
	DataCars[MAX_CAR][PosY]   = 748.70001220703;
	DataCars[MAX_CAR][PosZ]   = -5.5818099975586;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 523;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1587.9897460938;
	DataCars[MAX_CAR][PosY]   = 748.70001220703;
	DataCars[MAX_CAR][PosZ]   = -5.5818099975586;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 523;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1573.703125;
	DataCars[MAX_CAR][PosY]   = 742.61755371094;
	DataCars[MAX_CAR][PosZ]   = -5.3721876144409;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 597;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1573.703125;
	DataCars[MAX_CAR][PosY]   = 738.7099609375;
	DataCars[MAX_CAR][PosZ]   = -5.3721876144409;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 597;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1573.703125;
	DataCars[MAX_CAR][PosY]   = 734.53442382813;
	DataCars[MAX_CAR][PosZ]   = -5.3721876144409;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 597;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1573.703125;
	DataCars[MAX_CAR][PosY]   = 730.591796875;
	DataCars[MAX_CAR][PosZ]   = -5.3721876144409;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 597;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1573.703125;
	DataCars[MAX_CAR][PosY]   = 726.412109375;
	DataCars[MAX_CAR][PosZ]   = -5.3721876144409;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 597;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1573.703125;
	DataCars[MAX_CAR][PosY]   = 722.40380859375;
	DataCars[MAX_CAR][PosZ]   = -5.3721876144409;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 597;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1573.703125;
	DataCars[MAX_CAR][PosY]   = 718.24395751953;
	DataCars[MAX_CAR][PosZ]   = -5.3721876144409;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 597;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;


	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1573.703125;
	DataCars[MAX_CAR][PosY]   = 712.20965576172;
	DataCars[MAX_CAR][PosZ]   = -5.3721876144409;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 597;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1604.2319335938;
	DataCars[MAX_CAR][PosY]   = 692.5;
	DataCars[MAX_CAR][PosZ]   = -4.9220609664917;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 490;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1608.3657226563;
	DataCars[MAX_CAR][PosY]   = 692.5;
	DataCars[MAX_CAR][PosZ]   = -4.9220609664917;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 490;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1628.7404785156;
	DataCars[MAX_CAR][PosY]   = 692.5;
	DataCars[MAX_CAR][PosZ]   = -4.9220609664917;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 490;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1632.7247314453;
	DataCars[MAX_CAR][PosY]   = 692.5;
	DataCars[MAX_CAR][PosZ]   = -4.9220609664917;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 490;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++; // Bote 1
	DataCars[MAX_CAR][PosX]   = -1435.7548;
	DataCars[MAX_CAR][PosY]     = 698.4241;
	DataCars[MAX_CAR][PosZ]     = 0.8379;
	DataCars[MAX_CAR][PosZZ]  = 269.1413;
	DataCars[MAX_CAR][Modelo] = 430;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++; // Bote 2
	DataCars[MAX_CAR][PosX]   = -1435.7548;
	DataCars[MAX_CAR][PosY]     = 709.9980;
	DataCars[MAX_CAR][PosZ]     = 1.0950;
	DataCars[MAX_CAR][PosZZ]  = 269.1413;
	DataCars[MAX_CAR][Modelo] = 430;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++; // Bote 3
	DataCars[MAX_CAR][PosX]   = -1435.7548;
	DataCars[MAX_CAR][PosY]     = 721.1343;
	DataCars[MAX_CAR][PosZ]     = 1.1943;
	DataCars[MAX_CAR][PosZZ]  = 269.1413;
	DataCars[MAX_CAR][Modelo] = 472;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++; // Bote 4
	DataCars[MAX_CAR][PosX]   = -1435.7548;
	DataCars[MAX_CAR][PosY]     = 734.0255;
	DataCars[MAX_CAR][PosZ]     = 1.3738;
	DataCars[MAX_CAR][PosZZ]  = 269.1413;
	DataCars[MAX_CAR][Modelo] = 472;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

/////////////////////////////////////	////// NFS
	MAX_CAR++; // Grua Grotti 1
	DataCars[MAX_CAR][PosX]   = 528.98968506;
	DataCars[MAX_CAR][PosY]     = -1322.86389160;
	DataCars[MAX_CAR][PosZ]     = 17.23218727;
	DataCars[MAX_CAR][PosZZ]  = 0.00000000;
	DataCars[MAX_CAR][Modelo] = 525;
	DataCars[MAX_CAR][Color1] = 17;
	DataCars[MAX_CAR][Color2] = 32;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = NFS;

	MAX_CAR++; // Grua Grotti 2
	DataCars[MAX_CAR][PosX]   = 523.92413330;
	DataCars[MAX_CAR][PosY]     = -1322.83740234;
	DataCars[MAX_CAR][PosZ]     = 17.23218727;
	DataCars[MAX_CAR][PosZZ]  = 0.00000000;
	DataCars[MAX_CAR][Modelo] = 525;
	DataCars[MAX_CAR][Color1] = 17;
	DataCars[MAX_CAR][Color2] = 32;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = NFS;

/////////////////////////////////////	/// SAMD
	MAX_CAR++; // Ambulancia 1
	DataCars[MAX_CAR][PosX]   = -2591.7585;
	DataCars[MAX_CAR][PosY]     = 634.7858;
	DataCars[MAX_CAR][PosZ]     = 27.4688;
	DataCars[MAX_CAR][PosZZ]  = 269.2393;
	DataCars[MAX_CAR][Modelo] = 416;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 3;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFMD;

	MAX_CAR++; // Ambulancia 2
	DataCars[MAX_CAR][PosX]   = -2591.6882;
	DataCars[MAX_CAR][PosY]     = 640.1004;
	DataCars[MAX_CAR][PosZ]     = 27.4812;
	DataCars[MAX_CAR][PosZZ]  = 269.2394;
	DataCars[MAX_CAR][Modelo] = 416;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 3;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFMD;

	MAX_CAR++; // Ambulancia 3
	DataCars[MAX_CAR][PosX]   = -2591.6196;
	DataCars[MAX_CAR][PosY]     = 645.2371;
	DataCars[MAX_CAR][PosZ]     = 27.5020;
	DataCars[MAX_CAR][PosZZ]  = 269.2395;
	DataCars[MAX_CAR][Modelo] = 416;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 3;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFMD;

	MAX_CAR++; // Ambulancia 4
	DataCars[MAX_CAR][PosX]   = -2578.7898;
	DataCars[MAX_CAR][PosY]     = 625.9899;
	DataCars[MAX_CAR][PosZ]     = 27.4688;
	DataCars[MAX_CAR][PosZZ]  = 359.2691;
	DataCars[MAX_CAR][Modelo] = 416;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 3;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFMD;

	MAX_CAR++; // Ambulancia 5
	DataCars[MAX_CAR][PosX]   = -2573.4375;
	DataCars[MAX_CAR][PosY]     = 625.9218;
	DataCars[MAX_CAR][PosZ]     = 27.4871;
	DataCars[MAX_CAR][PosZZ]  = 359.2693;
	DataCars[MAX_CAR][Modelo] = 416;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 3;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFMD;

	MAX_CAR++; // Ambulancia 6
	DataCars[MAX_CAR][PosX]   = -2568.4534;
	DataCars[MAX_CAR][PosY]     = 625.8582;
	DataCars[MAX_CAR][PosZ]     = 27.4938;
	DataCars[MAX_CAR][PosZZ]  = 359.2691;
	DataCars[MAX_CAR][Modelo] = 416;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 3;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFMD;

	MAX_CAR++;  // Heli 1
	DataCars[MAX_CAR][PosX]   = -2674.1103515625;
	DataCars[MAX_CAR][PosY]     = 514.5869140625;
	DataCars[MAX_CAR][PosZ]     = 49;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 417;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 6;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFMD;

	MAX_CAR++;  // Heli 2
	DataCars[MAX_CAR][PosX]   = -2633.2783203125;
	DataCars[MAX_CAR][PosY]     = 514.5869140625;
	DataCars[MAX_CAR][PosZ]     = 49;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 417;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 6;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFMD;

/////////////////////////////////////	/// CNN
	MAX_CAR++; // Van 1
	DataCars[MAX_CAR][PosX]   = 751.1636;
	DataCars[MAX_CAR][PosY]     = -1334.8700;
	DataCars[MAX_CAR][PosZ]     = 13.5966;
	DataCars[MAX_CAR][PosZZ]  = 179.7017;
	DataCars[MAX_CAR][Modelo] = 582;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 3;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CNN;

	MAX_CAR++; // Van 2
	DataCars[MAX_CAR][PosX]   = 755.2587;
	DataCars[MAX_CAR][PosY]     = -1334.8914;
	DataCars[MAX_CAR][PosZ]     = 13.6152;
	DataCars[MAX_CAR][PosZZ]  = 179.7021;
	DataCars[MAX_CAR][Modelo] = 582;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 3;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CNN;

	MAX_CAR++; // Van 3
	DataCars[MAX_CAR][PosX]   = 759.4441;
	DataCars[MAX_CAR][PosY]     = -1334.9127;
	DataCars[MAX_CAR][PosZ]     = 13.6217;
	DataCars[MAX_CAR][PosZZ]  = 179.7016;
	DataCars[MAX_CAR][Modelo] = 582;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 3;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CNN;

	MAX_CAR++; // Heli
	DataCars[MAX_CAR][PosX]   = 743.9432;
	DataCars[MAX_CAR][PosY]     = -1371.2987;
	DataCars[MAX_CAR][PosZ]     = 25.9211;
	DataCars[MAX_CAR][PosZZ]  = 89.5514;
	DataCars[MAX_CAR][Modelo] = 488;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 3;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CNN;

/////////////////////////////////////	/// Sicarios
	MAX_CAR++;// Heli Sicarios
	DataCars[MAX_CAR][PosX]   = 1218.5954589844;
	DataCars[MAX_CAR][PosY]     = 162.64079284668;
	DataCars[MAX_CAR][PosZ]     = 26.519660949707;
	DataCars[MAX_CAR][PosZZ]  = 359.25;
	DataCars[MAX_CAR][Modelo] = 487;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SICARIOS;

	MAX_CAR++;// Land Staker 1
	DataCars[MAX_CAR][PosX]   = 1541.8558349609;
	DataCars[MAX_CAR][PosY]     = 18.432361602783;
	DataCars[MAX_CAR][PosZ]     = 24.270402908325;
	DataCars[MAX_CAR][PosZZ]  = 279.25;
	DataCars[MAX_CAR][Modelo] = 400;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SICARIOS;

	MAX_CAR++;// Land Staker 2
	DataCars[MAX_CAR][PosX]   = 1542.5139160156;
	DataCars[MAX_CAR][PosY]     = 14.379981040955;
	DataCars[MAX_CAR][PosZ]     = 24.270402908325;
	DataCars[MAX_CAR][PosZZ]  = 279.25;
	DataCars[MAX_CAR][Modelo] = 400;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SICARIOS;

	MAX_CAR++;// Moto 1
	DataCars[MAX_CAR][PosX]   = 1546.41796875;
	DataCars[MAX_CAR][PosY]     = 19.840473175049;
	DataCars[MAX_CAR][PosZ]     = 23.794792175293;
	DataCars[MAX_CAR][PosZZ]  = 283.095703125;
	DataCars[MAX_CAR][Modelo] = 521;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SICARIOS;

	MAX_CAR++;// Moto 2
	DataCars[MAX_CAR][PosX]   = 1546.7686767578;
	DataCars[MAX_CAR][PosY]     = 18.128845214844;
	DataCars[MAX_CAR][PosZ]     = 23.794792175293;
	DataCars[MAX_CAR][PosZZ]  = 283.095703125;
	DataCars[MAX_CAR][Modelo] = 521;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SICARIOS;

	MAX_CAR++;// Moto 3
	DataCars[MAX_CAR][PosX]   = 1547.1199951172;
	DataCars[MAX_CAR][PosY]     = 16.201814651489;
	DataCars[MAX_CAR][PosZ]     = 23.794792175293;
	DataCars[MAX_CAR][PosZZ]  = 283.095703125;
	DataCars[MAX_CAR][Modelo] = 521;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SICARIOS;

	MAX_CAR++;// Moto 4
	DataCars[MAX_CAR][PosX]   = 1547.3201904297;
	DataCars[MAX_CAR][PosY]     = 14.61416053772;
	DataCars[MAX_CAR][PosZ]     = 23.794792175293;
	DataCars[MAX_CAR][PosZZ]  = 283.09588623047;
	DataCars[MAX_CAR][Modelo] = 521;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SICARIOS;

/////////////////////////////////////	/// Camioneros
	MAX_CAR++; // Camion 1
	DataCars[MAX_CAR][PosX]   = -534.4978;
	DataCars[MAX_CAR][PosY]     = -474.1056;
	DataCars[MAX_CAR][PosZ]     = 26.1178;
	DataCars[MAX_CAR][PosZZ]  = 178.6684;
	DataCars[MAX_CAR][Modelo] = 514;
	DataCars[MAX_CAR][Color1] = 94;
	DataCars[MAX_CAR][Color2] = 13;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CAMIONEROS;

	MAX_CAR++; // Camion 2
	DataCars[MAX_CAR][PosX]   = -529.5223;
	DataCars[MAX_CAR][PosY]     = -474.2213;
	DataCars[MAX_CAR][PosZ]     = 26.1178;
	DataCars[MAX_CAR][PosZZ]  = 178.6684;
	DataCars[MAX_CAR][Modelo] = 514;
	DataCars[MAX_CAR][Color1] = 94;
	DataCars[MAX_CAR][Color2] = 13;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CAMIONEROS;

	MAX_CAR++; // Camion 3
	DataCars[MAX_CAR][PosX]   = -524.5577;
	DataCars[MAX_CAR][PosY]     = -474.3367;
	DataCars[MAX_CAR][PosZ]     = 26.1177;
	DataCars[MAX_CAR][PosZZ]  = 178.6684;
	DataCars[MAX_CAR][Modelo] = 515;
	DataCars[MAX_CAR][Color1] = 94;
	DataCars[MAX_CAR][Color2] = 13;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CAMIONEROS;

	MAX_CAR++; // Camion 4
	DataCars[MAX_CAR][PosX]   = -519.5417;
	DataCars[MAX_CAR][PosY]     = -474.4533;
	DataCars[MAX_CAR][PosZ]     = 26.1176;
	DataCars[MAX_CAR][PosZZ]  = 178.6684;
	DataCars[MAX_CAR][Modelo] = 515;
	DataCars[MAX_CAR][Color1] = 94;
	DataCars[MAX_CAR][Color2] = 13;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CAMIONEROS;

	MAX_CAR++; // Camion 5
	DataCars[MAX_CAR][PosX]   = -514.4847;
	DataCars[MAX_CAR][PosY]     = -474.5709;
	DataCars[MAX_CAR][PosZ]     = 26.1176;
	DataCars[MAX_CAR][PosZZ]  = 178.6684;
	DataCars[MAX_CAR][Modelo] = 403;
	DataCars[MAX_CAR][Color1] = 94;
	DataCars[MAX_CAR][Color2] = 13;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CAMIONEROS;

	MAX_CAR++; // Camion 6
	DataCars[MAX_CAR][PosX]   = -509.5095;
	DataCars[MAX_CAR][PosY]     = -474.6866;
	DataCars[MAX_CAR][PosZ]     = 26.1175;
	DataCars[MAX_CAR][PosZZ]  = 178.6684;
	DataCars[MAX_CAR][Modelo] = 403;
	DataCars[MAX_CAR][Color1] = 94;
	DataCars[MAX_CAR][Color2] = 13;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CAMIONEROS;

	MAX_CAR++; // Trailer 1
	DataCars[MAX_CAR][PosX]   = -589.5950;
	DataCars[MAX_CAR][PosY]     = -473.4910;
	DataCars[MAX_CAR][PosZ]     = 26.1167;
	DataCars[MAX_CAR][PosZZ]  = 178.6684;
	DataCars[MAX_CAR][Modelo] = 591;
	DataCars[MAX_CAR][Color1] = 94;
	DataCars[MAX_CAR][Color2] = 13;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CAMIONEROS;

	MAX_CAR++; // Trailer 2
	DataCars[MAX_CAR][PosX]   = -584.6484;
	DataCars[MAX_CAR][PosY]     = -473.6060;
	DataCars[MAX_CAR][PosZ]     = 26.1166;
	DataCars[MAX_CAR][PosZZ]  = 178.6684;
	DataCars[MAX_CAR][Modelo] = 591;
	DataCars[MAX_CAR][Color1] = 94;
	DataCars[MAX_CAR][Color2] = 13;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CAMIONEROS;

	MAX_CAR++; // Trailer 3
	DataCars[MAX_CAR][PosX]   = -579.4829;
	DataCars[MAX_CAR][PosY]     = -473.7262;
	DataCars[MAX_CAR][PosZ]     = 26.1166;
	DataCars[MAX_CAR][PosZZ]  = 178.6684;
	DataCars[MAX_CAR][Modelo] = 435;
	DataCars[MAX_CAR][Color1] = 94;
	DataCars[MAX_CAR][Color2] = 13;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CAMIONEROS;

	MAX_CAR++; // Trailer 4
	DataCars[MAX_CAR][PosX]   = -574.5507;
	DataCars[MAX_CAR][PosY]     = -473.8409;
	DataCars[MAX_CAR][PosZ]     = 26.1165;
	DataCars[MAX_CAR][PosZZ]  = 178.6684;
	DataCars[MAX_CAR][Modelo] = 435;
	DataCars[MAX_CAR][Color1] = 94;
	DataCars[MAX_CAR][Color2] = 13;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CAMIONEROS;

	MAX_CAR++; // Trailer 5
	DataCars[MAX_CAR][PosX]   = -569.4827;
	DataCars[MAX_CAR][PosY]     = -473.9586;
	DataCars[MAX_CAR][PosZ]     = 26.1165;
	DataCars[MAX_CAR][PosZZ]  = 178.6684;
	DataCars[MAX_CAR][Modelo] = 584;
	DataCars[MAX_CAR][Color1] = 94;
	DataCars[MAX_CAR][Color2] = 13;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CAMIONEROS;

	MAX_CAR++; // Trailer 6
	DataCars[MAX_CAR][PosX]   = -564.5710;
	DataCars[MAX_CAR][PosY]     = -474.0728;
	DataCars[MAX_CAR][PosZ]     = 26.1165;
	DataCars[MAX_CAR][PosZZ]  = 178.6684;
	DataCars[MAX_CAR][Modelo] = 584;
	DataCars[MAX_CAR][Color1] = 94;
	DataCars[MAX_CAR][Color2] = 13;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CAMIONEROS;

	MAX_CAR++; // Camion Normal 01
	DataCars[MAX_CAR][PosX]   = -563.4069;
	DataCars[MAX_CAR][PosY]     = -500.8364;
	DataCars[MAX_CAR][PosZ]     = 26.1077;
	DataCars[MAX_CAR][PosZZ]  = 0.4410;
	DataCars[MAX_CAR][Modelo] = 456;
	DataCars[MAX_CAR][Color1] = 94;
	DataCars[MAX_CAR][Color2] = 13;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CAMIONEROS;

	MAX_CAR++; // Camion Normal 02
	DataCars[MAX_CAR][PosX]   = -574.2763;
	DataCars[MAX_CAR][PosY]     = -500.9201;
	DataCars[MAX_CAR][PosZ]     = 26.1077;
	DataCars[MAX_CAR][PosZZ]  = 0.4410;
	DataCars[MAX_CAR][Modelo] = 456;
	DataCars[MAX_CAR][Color1] = 94;
	DataCars[MAX_CAR][Color2] = 13;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CAMIONEROS;

	MAX_CAR++; // Camion Normal 03
	DataCars[MAX_CAR][PosX]   = -550.1696;
	DataCars[MAX_CAR][PosY]     = -500.7345;
	DataCars[MAX_CAR][PosZ]     = 26.1077;
	DataCars[MAX_CAR][PosZZ]  = 0.4410;
	DataCars[MAX_CAR][Modelo] = 578;
	DataCars[MAX_CAR][Color1] = 94;
	DataCars[MAX_CAR][Color2] = 13;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CAMIONEROS;

	MAX_CAR++; // Camion Normal 04
	DataCars[MAX_CAR][PosX]   = -536.1178;
	DataCars[MAX_CAR][PosY]     = -500.6263;
	DataCars[MAX_CAR][PosZ]     = 26.1077;
	DataCars[MAX_CAR][PosZZ]  = 0.4410;
	DataCars[MAX_CAR][Modelo] = 578;
	DataCars[MAX_CAR][Color1] = 94;
	DataCars[MAX_CAR][Color2] = 13;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CAMIONEROS;

	MAX_CAR++; // Barco 01
	DataCars[MAX_CAR][PosX]   = -333.3390;
	DataCars[MAX_CAR][PosY]     = -467.9969;
	DataCars[MAX_CAR][PosZ]     = 0.5728;
	DataCars[MAX_CAR][PosZZ]  = 222.7603;
	DataCars[MAX_CAR][Modelo] = 454;
	DataCars[MAX_CAR][Color1] = 94;
	DataCars[MAX_CAR][Color2] = 13;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CAMIONEROS;

	MAX_CAR++; // Barco 02
	DataCars[MAX_CAR][PosX]   = -325.4545;
	DataCars[MAX_CAR][PosY]     = -459.7680;
	DataCars[MAX_CAR][PosZ]     = 0.5728;
	DataCars[MAX_CAR][PosZZ]  = 229.0898;
	DataCars[MAX_CAR][Modelo] = 454;
	DataCars[MAX_CAR][Color1] = 94;
	DataCars[MAX_CAR][Color2] = 13;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CAMIONEROS;

	MAX_CAR++; // Heli
	DataCars[MAX_CAR][PosX]   = -512.8495;
	DataCars[MAX_CAR][PosY]     = -522.8721;
	DataCars[MAX_CAR][PosZ]     = 35.9787;
	DataCars[MAX_CAR][PosZZ]  = 90.1976;
	DataCars[MAX_CAR][Modelo] = 487;
	DataCars[MAX_CAR][Color1] = 94;
	DataCars[MAX_CAR][Color2] = 13;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CAMIONEROS;

	MAX_CAR++; // Barco 0
	DataCars[MAX_CAR][PosX]   = -3528.7776;
	DataCars[MAX_CAR][PosY]     = 1946.2223;
	DataCars[MAX_CAR][PosZ]     = -0.0544;
	DataCars[MAX_CAR][PosZZ]  = 349.2972;
	DataCars[MAX_CAR][Modelo] = 484;
	DataCars[MAX_CAR][Color1] = 94;
	DataCars[MAX_CAR][Color2] = 13;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CAMIONEROS;

/////////////////////////////////////	/// LSPD
	MAX_CAR++;  // Enforce 1
	DataCars[MAX_CAR][PosX]   = 1544.8000488281;
	DataCars[MAX_CAR][PosY]     = -1672.1405029297;
	DataCars[MAX_CAR][PosZ]     = 5.9092860221863;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 427;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Enforce 2
	DataCars[MAX_CAR][PosX]   = 1544.8000488281;
	DataCars[MAX_CAR][PosY]     = -1668.1258544922;
	DataCars[MAX_CAR][PosZ]     = 5.9092860221863;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 427;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Enforce 3
	DataCars[MAX_CAR][PosX]   = 1544.8000488281;
	DataCars[MAX_CAR][PosY]     = -1663.1979980469;
	DataCars[MAX_CAR][PosZ]     = 5.9092860221863;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 427;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Enforce 4
	DataCars[MAX_CAR][PosX]   = 1544.8000488281;
	DataCars[MAX_CAR][PosY]     = -1659.0476074219;
	DataCars[MAX_CAR][PosZ]     = 5.9092860221863;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 427;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Motos 1
	DataCars[MAX_CAR][PosX]   = 1601.4000244141;
	DataCars[MAX_CAR][PosY]     = -1683.990234375;
	DataCars[MAX_CAR][PosZ]     = 5.4726204872131;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 523;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Motos 2
	DataCars[MAX_CAR][PosX]   = 1601.4000244141;
	DataCars[MAX_CAR][PosY]     = -1688.1809082031;
	DataCars[MAX_CAR][PosZ]     = 5.4726204872131;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 523;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Motos 3
	DataCars[MAX_CAR][PosX]   = 1601.4000244141;
	DataCars[MAX_CAR][PosY]     = -1692.1328125;
	DataCars[MAX_CAR][PosZ]     = 5.4726204872131;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 523;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Motos 4
	DataCars[MAX_CAR][PosX]   = 1601.4000244141;
	DataCars[MAX_CAR][PosY]     = -1696.1959228516;
	DataCars[MAX_CAR][PosZ]     = 5.4726204872131;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 523;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Motos 5
	DataCars[MAX_CAR][PosX]   = 1601.4000244141;
	DataCars[MAX_CAR][PosY]     = -1700.2593994141;
	DataCars[MAX_CAR][PosZ]     = 5.4726204872131;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 523;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Coches 1
	DataCars[MAX_CAR][PosX]   = 1595.380859375;
	DataCars[MAX_CAR][PosY]     = -1710.6999511719;
	DataCars[MAX_CAR][PosZ]     = 5.7106246948242;
	DataCars[MAX_CAR][PosZZ]  = 0;
	DataCars[MAX_CAR][Modelo] = 596;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Coches 2
	DataCars[MAX_CAR][PosX]   = 1591.4084472656;
	DataCars[MAX_CAR][PosY]     = -1710.6999511719;
	DataCars[MAX_CAR][PosZ]     = 5.7106246948242;
	DataCars[MAX_CAR][PosZZ]  = 0;
	DataCars[MAX_CAR][Modelo] = 596;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Coches 3
	DataCars[MAX_CAR][PosX]   = 1587.3811035156;
	DataCars[MAX_CAR][PosY]     = -1710.6999511719;
	DataCars[MAX_CAR][PosZ]     = 5.7106246948242;
	DataCars[MAX_CAR][PosZZ]  = 0;
	DataCars[MAX_CAR][Modelo] = 596;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Coches 4
	DataCars[MAX_CAR][PosX]   = 1583.380859375;
	DataCars[MAX_CAR][PosY]     = -1710.6999511719;
	DataCars[MAX_CAR][PosZ]     = 5.7106246948242;
	DataCars[MAX_CAR][PosZZ]  = 0;
	DataCars[MAX_CAR][Modelo] = 596;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Coches 5
	DataCars[MAX_CAR][PosX]   = 1578.4676513672;
	DataCars[MAX_CAR][PosY]     = -1710.6999511719;
	DataCars[MAX_CAR][PosZ]     = 5.7106246948242;
	DataCars[MAX_CAR][PosZZ]  = 0;
	DataCars[MAX_CAR][Modelo] = 596;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Coches 6
	DataCars[MAX_CAR][PosX]   = 1574.3060302734;
	DataCars[MAX_CAR][PosY]     = -1710.6999511719;
	DataCars[MAX_CAR][PosZ]     = 5.7106246948242;
	DataCars[MAX_CAR][PosZZ]  = 0;
	DataCars[MAX_CAR][Modelo] = 596;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Coches 7
	DataCars[MAX_CAR][PosX]   = 1570.3618;
	DataCars[MAX_CAR][PosY]     = -1710.6999511719;
	DataCars[MAX_CAR][PosZ]     = 5.7106246948242;
	DataCars[MAX_CAR][PosZZ]  = 0;
	DataCars[MAX_CAR][Modelo] = 596;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Heli 1
	DataCars[MAX_CAR][PosX]   = 1565.6494140625;
	DataCars[MAX_CAR][PosY]     = -1645.3994140625;
	DataCars[MAX_CAR][PosZ]     = 28.667114257813;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 497;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Heli 2
	DataCars[MAX_CAR][PosX]   = 1565.6494140625;
	DataCars[MAX_CAR][PosY]     = -1661;
	DataCars[MAX_CAR][PosZ]     = 28.667114257813;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 497;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Heli 3
	DataCars[MAX_CAR][PosX]   = 1565.8544921875;
	DataCars[MAX_CAR][PosY]     = -1689.6572265625;
	DataCars[MAX_CAR][PosZ]     = 28.667114257813;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 497;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Heli 4
	DataCars[MAX_CAR][PosX]   = 1565.8544921875;
	DataCars[MAX_CAR][PosY]     = -1706;
	DataCars[MAX_CAR][PosZ]     = 28.667114257813;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 497;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++; // Bote
	DataCars[MAX_CAR][PosX]   = 928.1587;
	DataCars[MAX_CAR][PosY]     = -1989.7061;
	DataCars[MAX_CAR][PosZ]     = 0.8967;
	DataCars[MAX_CAR][PosZZ]  = 90.6503;
	DataCars[MAX_CAR][Modelo] = 430;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++; // Bote 2
	DataCars[MAX_CAR][PosX]   = 928.2813;
	DataCars[MAX_CAR][PosY]     = -2000.4855;
	DataCars[MAX_CAR][PosZ]     = 0.8588;
	DataCars[MAX_CAR][PosZZ]  = 90.6503;
	DataCars[MAX_CAR][Modelo] = 430;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Gruas
	DataCars[MAX_CAR][PosX]   = 1585.4000244141;
	DataCars[MAX_CAR][PosY]     = -1667.4223632813;
	DataCars[MAX_CAR][PosZ]     = 5.8818655014038;
	DataCars[MAX_CAR][PosZZ]  = 270;
	DataCars[MAX_CAR][Modelo] = 525;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Gruas
	DataCars[MAX_CAR][PosX]   = 1585.4000244141;
	DataCars[MAX_CAR][PosY]     = -1671.53515625;
	DataCars[MAX_CAR][PosZ]     = 5.8818655014038;
	DataCars[MAX_CAR][PosZZ]  = 270;
	DataCars[MAX_CAR][Modelo] = 525;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

/////////////////////////////////////	/// TALLER
	MAX_CAR++; // Grua 1
	DataCars[MAX_CAR][PosX]   = -2920.1748;
	DataCars[MAX_CAR][PosY]     = 494.8304;
	DataCars[MAX_CAR][PosZ]     = 4.8084;
	DataCars[MAX_CAR][PosZZ]  = 180.1841;
	DataCars[MAX_CAR][Modelo] = 525;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TALLER_SF;

	MAX_CAR++; // Grua 2
	DataCars[MAX_CAR][PosX]   = -2908.1624;
	DataCars[MAX_CAR][PosY]     = 494.8687;
	DataCars[MAX_CAR][PosZ]     = 4.8359;
	DataCars[MAX_CAR][PosZZ]  = 180.1841;
	DataCars[MAX_CAR][Modelo] = 525;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TALLER_SF;

	MAX_CAR++; // Grua 3
	DataCars[MAX_CAR][PosX]   = -2896.0710;
	DataCars[MAX_CAR][PosY]     = 494.9073;
	DataCars[MAX_CAR][PosZ]     = 4.8636;
	DataCars[MAX_CAR][PosZZ]  = 180.1841;
	DataCars[MAX_CAR][Modelo] = 525;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TALLER_SF;

	MAX_CAR++; // Grua 4
	DataCars[MAX_CAR][PosX]   = -2920.1353;
	DataCars[MAX_CAR][PosY]     = 432.4344;
	DataCars[MAX_CAR][PosZ]     = 4.7335;
	DataCars[MAX_CAR][PosZZ]  = 359.8983;
	DataCars[MAX_CAR][Modelo] = 525;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TALLER_SF;

/////////////////////////////////////	/// CONTRABANDSITAS
	MAX_CAR++; // Furgo 1
	DataCars[MAX_CAR][PosX]   = 740.6208;
	DataCars[MAX_CAR][PosY]     = -1433.4133;
	DataCars[MAX_CAR][PosZ]     = 13.3777;
	DataCars[MAX_CAR][PosZZ]  = 91.4680;
	DataCars[MAX_CAR][Modelo] = 418;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CONTRABANDISTAS;

	MAX_CAR++; // Furgo 2
	DataCars[MAX_CAR][PosX]   = 731.9662;
	DataCars[MAX_CAR][PosY]     = -1433.4888;
	DataCars[MAX_CAR][PosZ]     = 13.3790;
	DataCars[MAX_CAR][PosZZ]  = 91.4680;
	DataCars[MAX_CAR][Modelo] = 418;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CONTRABANDISTAS;

	MAX_CAR++; // Furgo 3
	DataCars[MAX_CAR][PosX]   = 725.0215;
	DataCars[MAX_CAR][PosY]     = -1433.5420;
	DataCars[MAX_CAR][PosZ]     = 13.3869;
	DataCars[MAX_CAR][PosZZ]  = 91.4680;
	DataCars[MAX_CAR][Modelo] = 418;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CONTRABANDISTAS;

	MAX_CAR++; // Barco 1
	DataCars[MAX_CAR][PosX]   = 737.2951;
	DataCars[MAX_CAR][PosY]     = -1495.3147;
	DataCars[MAX_CAR][PosZ]     = -0.4090;
	DataCars[MAX_CAR][PosZZ]  = 182.8832;
	DataCars[MAX_CAR][Modelo] = 446;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CONTRABANDISTAS;

	MAX_CAR++; // Barco 2
	DataCars[MAX_CAR][PosX]   = 730.7525;
	DataCars[MAX_CAR][PosY]     = -1495.6427;
	DataCars[MAX_CAR][PosZ]     = -0.2777;
	DataCars[MAX_CAR][PosZZ]  = 182.8832;
	DataCars[MAX_CAR][Modelo] = 446;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CONTRABANDISTAS;

	MAX_CAR++; // Barco 3
	DataCars[MAX_CAR][PosX]   = 717.8978;
	DataCars[MAX_CAR][PosY]     = -1496.2860;
	DataCars[MAX_CAR][PosZ]     = 0.0425;
	DataCars[MAX_CAR][PosZZ]  = 182.8832;
	DataCars[MAX_CAR][Modelo] = 446;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CONTRABANDISTAS;

//  BOMBEROS SAMD
	MAX_CAR++; // Camión de Incendios 1
	DataCars[MAX_CAR][PosX]   = -2021.6116;
	DataCars[MAX_CAR][PosY]     = 75.6371;
	DataCars[MAX_CAR][PosZ]     = 28.3045;
	DataCars[MAX_CAR][PosZZ]  = 272.6790;
	DataCars[MAX_CAR][Modelo] = 407;
	DataCars[MAX_CAR][Color1] = 3;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFMD;

	MAX_CAR++; // Camión de Incendios 2
	DataCars[MAX_CAR][PosX]   = -2021.8024;
	DataCars[MAX_CAR][PosY]     = 84.2643;
	DataCars[MAX_CAR][PosZ]     = 28.2756;
	DataCars[MAX_CAR][PosZZ]  = 272.6640;
	DataCars[MAX_CAR][Modelo] = 407;
	DataCars[MAX_CAR][Color1] = 3;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFMD;

	MAX_CAR++; // Camión de Incendios 3
	DataCars[MAX_CAR][PosX]   = -2022.2018;
	DataCars[MAX_CAR][PosY]     = 92.8959;
	DataCars[MAX_CAR][PosZ]     = 28.3128;
	DataCars[MAX_CAR][PosZZ]  = 272.7454;
	DataCars[MAX_CAR][Modelo] = 407;
	DataCars[MAX_CAR][Color1] = 3;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFMD;

	MAX_CAR++; // Heli de Incendios
	DataCars[MAX_CAR][PosX]   = -2037.1472;
	DataCars[MAX_CAR][PosY]     = 88.6138;
	DataCars[MAX_CAR][PosZ]     = 42.0682;
	DataCars[MAX_CAR][PosZZ]  = 271.7486;
	DataCars[MAX_CAR][Modelo] = 563;
	DataCars[MAX_CAR][Color1] = 3;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFMD;

	MAX_CAR++; // Camión 4
	DataCars[MAX_CAR][PosX]   = 1336.7229003906;
	DataCars[MAX_CAR][PosY]     = 2663.2060546875;
	DataCars[MAX_CAR][PosZ]     = 11.219346046448;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 407;
	DataCars[MAX_CAR][Color1] = 3;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 14;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = SFMD;

	MAX_CAR++; // Camión 5
	DataCars[MAX_CAR][PosX]   = 1336.7229003906;
	DataCars[MAX_CAR][PosY]     = 2655.9899902344;
	DataCars[MAX_CAR][PosZ]     = 11.219346046448;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 407;
	DataCars[MAX_CAR][Color1] = 3;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 14;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = SFMD;

	MAX_CAR++; // Camión 6
	DataCars[MAX_CAR][PosX]   = 1336.7229003906;
	DataCars[MAX_CAR][PosY]     = 2648.7255859375;
	DataCars[MAX_CAR][PosZ]     = 11.219346046448;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 407;
	DataCars[MAX_CAR][Color1] = 3;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 14;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = SFMD;

	MAX_CAR++;// Moto 5
	DataCars[MAX_CAR][PosX]   = 1541.1495;
	DataCars[MAX_CAR][PosY]     = 16.1527;
	DataCars[MAX_CAR][PosZ]     = 23.7118;
	DataCars[MAX_CAR][PosZZ]  = 270;
	DataCars[MAX_CAR][Modelo] = 522;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SICARIOS;

	MAX_CAR++;  // Motos
	DataCars[MAX_CAR][PosX]   = 1601.4000244141;
	DataCars[MAX_CAR][PosY]     = -1704.3664550781;
	DataCars[MAX_CAR][PosZ]     = 5.4726204872131;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 523;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Capitan
	DataCars[MAX_CAR][PosX]   = 1564.5778808594;
	DataCars[MAX_CAR][PosY]     = -1710.6999511719;
	DataCars[MAX_CAR][PosZ]     = 5.7106246948242;
	DataCars[MAX_CAR][PosZZ]  = 0;
	DataCars[MAX_CAR][Modelo] = 596;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Rancher
	DataCars[MAX_CAR][PosX]   = 1544.8000488281;
	DataCars[MAX_CAR][PosY]     = -1680.3083496094;
	DataCars[MAX_CAR][PosZ]     = 6.2107515335083;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 490;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Rancher
	DataCars[MAX_CAR][PosX]   = 1544.8000488281;
	DataCars[MAX_CAR][PosY]     = -1676.2602539063;
	DataCars[MAX_CAR][PosZ]     = 6.2107515335083;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 490;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Rancher
	DataCars[MAX_CAR][PosX]   = 1544.8000488281;
	DataCars[MAX_CAR][PosY]     = -1655.0871582031;
	DataCars[MAX_CAR][PosZ]     = 6.2107515335083;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 490;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Rancher
	DataCars[MAX_CAR][PosX]   = 1544.8000488281;
	DataCars[MAX_CAR][PosY]     = -1650.9654541016;
	DataCars[MAX_CAR][PosZ]     = 6.2107515335083;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 490;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Otros
	DataCars[MAX_CAR][PosX]   = 1526.62109375;
	DataCars[MAX_CAR][PosY]     = -1644.8000488281;
	DataCars[MAX_CAR][PosZ]     = 6.0756249427795;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 601;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Otros
	DataCars[MAX_CAR][PosX]   = 1530.6099853516;
	DataCars[MAX_CAR][PosY]     = -1644.8000488281;
	DataCars[MAX_CAR][PosZ]     = 6.0756249427795;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 528;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Otros
	DataCars[MAX_CAR][PosX]   = 1534.6911621094;
	DataCars[MAX_CAR][PosY]     = -1644.8000488281;
	DataCars[MAX_CAR][PosZ]     = 6.0756249427795;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 528;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Otros
	DataCars[MAX_CAR][PosX]   = 1538.8933105469;
	DataCars[MAX_CAR][PosY]     = -1644.8000488281;
	DataCars[MAX_CAR][PosZ]     = 6.0756249427795;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 601;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;  // Grúa 1
	DataCars[MAX_CAR][PosX]   = 1760.0187;
	DataCars[MAX_CAR][PosY]     = -2057.7227;
	DataCars[MAX_CAR][PosZ]     = 13.4611;
	DataCars[MAX_CAR][PosZZ]  = 180.6893;
	DataCars[MAX_CAR][Modelo] = 525;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TALLER_LS;

	MAX_CAR++;  // Grúa 2
	DataCars[MAX_CAR][PosX]   = 1742.8982;
	DataCars[MAX_CAR][PosY]     = -2057.5647;
	DataCars[MAX_CAR][PosZ]     = 13.4632;
	DataCars[MAX_CAR][PosZZ]  = 179.6863;
	DataCars[MAX_CAR][Modelo] = 525;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TALLER_LS;

	MAX_CAR++;  // Grúa 3
	DataCars[MAX_CAR][PosX]   = 1768.4342;
	DataCars[MAX_CAR][PosY]     = -2040.6183;
	DataCars[MAX_CAR][PosZ]     = 13.4080;
	DataCars[MAX_CAR][PosZZ]  = 270.0025;
	DataCars[MAX_CAR][Modelo] = 525;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TALLER_LS;

	MAX_CAR++;  // Grúa 4
	DataCars[MAX_CAR][PosX]   = 1733.9149;
	DataCars[MAX_CAR][PosY]     = -2064.9548;
	DataCars[MAX_CAR][PosZ]     = 13.4872;
	DataCars[MAX_CAR][PosZZ]  = 269.5565;
	DataCars[MAX_CAR][Modelo] = 525;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TALLER_LS;

	MAX_CAR++;  // Grúa 5
	DataCars[MAX_CAR][PosX]   = 1738.8793;
	DataCars[MAX_CAR][PosY]     = -2057.4553;
	DataCars[MAX_CAR][PosZ]     = 13.4553;
	DataCars[MAX_CAR][PosZZ]  = 179.5769;
	DataCars[MAX_CAR][Modelo] = 525;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = TALLER_LS;

	MAX_CAR++;  // SAMD Ambulancia Frente 1
	DataCars[MAX_CAR][PosX]   = -2623.1892;
	DataCars[MAX_CAR][PosY]     = 611.7438;
	DataCars[MAX_CAR][PosZ]     = 14.6023;
	DataCars[MAX_CAR][PosZZ]  = 89.8236;
	DataCars[MAX_CAR][Modelo] = 416;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 3;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFMD;

	MAX_CAR++;  // SAMD Ambulancia Frente 2
	DataCars[MAX_CAR][PosX]   = -2623.1826;
	DataCars[MAX_CAR][PosY]     = 605.1359;
	DataCars[MAX_CAR][PosZ]     = 14.6020;
	DataCars[MAX_CAR][PosZZ]  = 89.2766;
	DataCars[MAX_CAR][Modelo] = 416;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 3;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFMD;

	MAX_CAR++;  // Hermes 1
	DataCars[MAX_CAR][PosX]   = 1076.2325;
	DataCars[MAX_CAR][PosY]     = 1748.9976;
	DataCars[MAX_CAR][PosZ]     = 10.8344;
	DataCars[MAX_CAR][PosZZ]  = 181.8838;
	DataCars[MAX_CAR][Modelo] = 474;
	DataCars[MAX_CAR][Color1] = 2;
	DataCars[MAX_CAR][Color2] = 2;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 5;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = COLTS;

	MAX_CAR++;  // Hermes 2
	DataCars[MAX_CAR][PosX]   = 1072.1497;
	DataCars[MAX_CAR][PosY]     = 1748.9341;
	DataCars[MAX_CAR][PosZ]     = 10.8313;
	DataCars[MAX_CAR][PosZZ]  = 179.7764;
	DataCars[MAX_CAR][Modelo] = 474;
	DataCars[MAX_CAR][Color1] = 2;
	DataCars[MAX_CAR][Color2] = 2;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 5;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = COLTS;

	MAX_CAR++;  // Camión
	DataCars[MAX_CAR][PosX]   = 1067.8439;
	DataCars[MAX_CAR][PosY]     = 1748.7277;
	DataCars[MAX_CAR][PosZ]     = 11.0039;
	DataCars[MAX_CAR][PosZZ]  = 182.4700;
	DataCars[MAX_CAR][Modelo] = 499;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 2;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 5;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = COLTS;

	MAX_CAR++;  // Oceanic 1
	DataCars[MAX_CAR][PosX]   	= 1063.6736;
	DataCars[MAX_CAR][PosY]     = 1748.9016;
	DataCars[MAX_CAR][PosZ]     = 10.7906;
	DataCars[MAX_CAR][PosZZ]  = 180.7035;
	DataCars[MAX_CAR][Modelo] = 467;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 2;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 5;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = COLTS;

	MAX_CAR++;  // Oceanic 2
	DataCars[MAX_CAR][PosX]   	= 1059.8132;
	DataCars[MAX_CAR][PosY]     = 1748.9148;
	DataCars[MAX_CAR][PosZ]     = 10.7904;
	DataCars[MAX_CAR][PosZZ]  = 181.4968;
	DataCars[MAX_CAR][Modelo] = 467;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 2;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 5;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = COLTS;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -2464.943359375;
	DataCars[MAX_CAR][PosY]   = -113.14616394043;
	DataCars[MAX_CAR][PosZ]   = 25.705739974976;
	DataCars[MAX_CAR][PosZZ]  = 270;
	DataCars[MAX_CAR][Modelo] = 463;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = AK;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -2464.943359375;
	DataCars[MAX_CAR][PosY]   = -117.00308990479;
	DataCars[MAX_CAR][PosZ]   = 25.554130554199;
	DataCars[MAX_CAR][PosZZ]  = 270;
	DataCars[MAX_CAR][Modelo] = 463;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = AK;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -2464.943359375;
	DataCars[MAX_CAR][PosY]   = -120.818359375;
	DataCars[MAX_CAR][PosZ]   = 25.51718711853;
	DataCars[MAX_CAR][PosZZ]  = 270;
	DataCars[MAX_CAR][Modelo] = 463;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = AK;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -2457.9987792969;
	DataCars[MAX_CAR][PosY]   = -159.32424926758;
	DataCars[MAX_CAR][PosZ]   = 26.157337188721;
	DataCars[MAX_CAR][PosZZ]  = 0;
	DataCars[MAX_CAR][Modelo] = 463;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = AK;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 2641.7080078125;
	DataCars[MAX_CAR][PosY]   = 788.24041748047;
	DataCars[MAX_CAR][PosZ]   = 10.942454338074;
	DataCars[MAX_CAR][PosZZ]  = 0;
	DataCars[MAX_CAR][Modelo] = 467;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Interior]  = 6;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = AK;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 2636.6923828125;
	DataCars[MAX_CAR][PosY]   = 788.24041748047;
	DataCars[MAX_CAR][PosZ]   = 10.942454338074;
	DataCars[MAX_CAR][PosZZ]  = 0;
	DataCars[MAX_CAR][Modelo] = 467;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Interior]  = 6;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = AK;

	MAX_CAR++; // Grua Grotti 3
	DataCars[MAX_CAR][PosX]   = 518.83105469;
	DataCars[MAX_CAR][PosY]     = -1322.63403320;
	DataCars[MAX_CAR][PosZ]     = 17.23218727;
	DataCars[MAX_CAR][PosZZ]  = 0.00000000;
	DataCars[MAX_CAR][Modelo] = 525;
	DataCars[MAX_CAR][Color1] = 17;
	DataCars[MAX_CAR][Color2] = 32;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = NFS;

	MAX_CAR++; // Grua Wang 1
	DataCars[MAX_CAR][PosX]   = -1893.22888184;
	DataCars[MAX_CAR][PosY]     = 263.09890747;
	DataCars[MAX_CAR][PosZ]     = 41.03687668;
	DataCars[MAX_CAR][PosZZ]  = 77.99987793;
	DataCars[MAX_CAR][Modelo] = 525;
	DataCars[MAX_CAR][Color1] = 17;
	DataCars[MAX_CAR][Color2] = 32;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = NFS;

	MAX_CAR++; // Grua Wang 2
	DataCars[MAX_CAR][PosX]   = -1892.07592773;
	DataCars[MAX_CAR][PosY]     = 267.72857666;
	DataCars[MAX_CAR][PosZ]     = 41.03687668;
	DataCars[MAX_CAR][PosZZ]  = 76.00000000;
	DataCars[MAX_CAR][Modelo] = 525;
	DataCars[MAX_CAR][Color1] = 17;
	DataCars[MAX_CAR][Color2] = 32;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = NFS;

	MAX_CAR++; // Grua Wang 3
	DataCars[MAX_CAR][PosX]   = -1890.88366699;
	DataCars[MAX_CAR][PosY]     = 272.19702148;
	DataCars[MAX_CAR][PosZ]     = 41.03687668;
	DataCars[MAX_CAR][PosZZ]  = 76.00000000;
	DataCars[MAX_CAR][Modelo] = 525;
	DataCars[MAX_CAR][Color1] = 17;
	DataCars[MAX_CAR][Color2] = 32;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = NFS;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 2333;
	DataCars[MAX_CAR][PosY]     = 1407.265625;
	DataCars[MAX_CAR][PosZ]     = 43.049373626709;
	DataCars[MAX_CAR][PosZZ]  = 0;
	DataCars[MAX_CAR][Modelo] = 582;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 3;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Interior]  = 11;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CNN;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 2328.599609375;
	DataCars[MAX_CAR][PosY]     = 1407.265625;
	DataCars[MAX_CAR][PosZ]     = 43.049373626709;
	DataCars[MAX_CAR][PosZZ]  = 0;
	DataCars[MAX_CAR][Modelo] = 582;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 3;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Interior]  = 11;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CNN;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 2324.3000488281;
	DataCars[MAX_CAR][PosY]     = 1407.265625;
	DataCars[MAX_CAR][PosZ]     = 43.049373626709;
	DataCars[MAX_CAR][PosZZ]  = 0;
	DataCars[MAX_CAR][Modelo] = 582;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 3;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Interior]  = 11;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CNN;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 2337.2529296875;
	DataCars[MAX_CAR][PosY]     = 1407.265625;
	DataCars[MAX_CAR][PosZ]     = 43.049373626709;
	DataCars[MAX_CAR][PosZZ]  = 0;
	DataCars[MAX_CAR][Modelo] = 582;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 3;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Interior]  = 11;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CNN;

	MAX_CAR++; // PCJ 1
	DataCars[MAX_CAR][PosX]   = 1247.07580566;
	DataCars[MAX_CAR][PosY]     = -2043.97033691;
	DataCars[MAX_CAR][PosZ]     = 59.46927643;
	DataCars[MAX_CAR][PosZZ]  = 0.00000000;
	DataCars[MAX_CAR][Modelo] = 461;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LCN;

	MAX_CAR++; // PCJ 2
	DataCars[MAX_CAR][PosX]   = 1250.75439453;
	DataCars[MAX_CAR][PosY]     = -2044.19250488;
	DataCars[MAX_CAR][PosZ]     = 59.38314056;
	DataCars[MAX_CAR][PosZZ]  = 0.00000000;
	DataCars[MAX_CAR][Modelo] = 461;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LCN;

	MAX_CAR++; // PCJ 3
	DataCars[MAX_CAR][PosX]   = 1254.23449707;
	DataCars[MAX_CAR][PosY]     = -2044.32824707;
	DataCars[MAX_CAR][PosZ]     = 59.23312759;
	DataCars[MAX_CAR][PosZZ]  = 0.00000000;
	DataCars[MAX_CAR][Modelo] = 461;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LCN;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 2454.9091796875;
	DataCars[MAX_CAR][PosY]     = 2294.0625;
	DataCars[MAX_CAR][PosZ]     = 91.529998779297;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 467;
	DataCars[MAX_CAR][Color1] = 6;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 4;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = HEORS;


	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 2450.525390625;
	DataCars[MAX_CAR][PosY]     = 2294.0625;
	DataCars[MAX_CAR][PosZ]     = 91.909378051758;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 414;
	DataCars[MAX_CAR][Color1] = 6;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 4;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = HEORS;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 2459.30078125;
	DataCars[MAX_CAR][PosY]     = 2294.0625;
	DataCars[MAX_CAR][PosZ]     = 91.909378051758;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 414;
	DataCars[MAX_CAR][Color1] = 6;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 4;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = HEORS;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 2772.306640625;
	DataCars[MAX_CAR][PosY]     = -1618.4372558594;
	DataCars[MAX_CAR][PosZ]     = 10.759050369263;
	DataCars[MAX_CAR][PosZZ]  = 270;
	DataCars[MAX_CAR][Modelo] = 474;
	DataCars[MAX_CAR][Color1] = 6;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = HEORS;


	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 2772.306640625;
	DataCars[MAX_CAR][PosY]     = -1609.5581054688;
	DataCars[MAX_CAR][PosZ]     = 10.759050369263;
	DataCars[MAX_CAR][PosZZ]  = 270;
	DataCars[MAX_CAR][Modelo] = 474;
	DataCars[MAX_CAR][Color1] = 6;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = HEORS;


	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 2772.306640625;
	DataCars[MAX_CAR][PosY]     = -1614.0994873047;
	DataCars[MAX_CAR][PosZ]     = 10.759050369263;
	DataCars[MAX_CAR][PosZZ]  = 270;
	DataCars[MAX_CAR][Modelo] = 467;
	DataCars[MAX_CAR][Color1] = 6;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 5;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = HEORS;
   
	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -38.914875030518;
	DataCars[MAX_CAR][PosY]     = 2496.9296875;
	DataCars[MAX_CAR][PosZ]     = 16.38437461853;
	DataCars[MAX_CAR][PosZZ]  = 0;
	DataCars[MAX_CAR][Modelo] = 474;
	DataCars[MAX_CAR][Color1] = 53;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 5;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = VELTRAN;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -33.706218719482;
	DataCars[MAX_CAR][PosY]     = 2496.9296875;
	DataCars[MAX_CAR][PosZ]     = 16.38437461853;
	DataCars[MAX_CAR][PosZZ]  = 0;
	DataCars[MAX_CAR][Modelo] = 474;
	DataCars[MAX_CAR][Color1] = 53;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 5;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = VELTRAN;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -28.7470703125;
	DataCars[MAX_CAR][PosY]     = 2496.9296875;
	DataCars[MAX_CAR][PosZ]     = 16.343023300171;
	DataCars[MAX_CAR][PosZZ]  = 0;
	DataCars[MAX_CAR][Modelo] = 467;
	DataCars[MAX_CAR][Color1] = 53;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 5;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = VELTRAN;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -43.849609375;
	DataCars[MAX_CAR][PosY]     = 2496.9296875;
	DataCars[MAX_CAR][PosZ]     = 16.343023300171;
	DataCars[MAX_CAR][PosZZ]  = 0;
	DataCars[MAX_CAR][Modelo] = 467;
	DataCars[MAX_CAR][Color1] = 53;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 5;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = VELTRAN;


	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -48.85844039917;
	DataCars[MAX_CAR][PosY]     = 2496.9296875;
	DataCars[MAX_CAR][PosZ]     = 16.343023300171;
	DataCars[MAX_CAR][PosZZ]  = 0;
	DataCars[MAX_CAR][Modelo] = 414;
	DataCars[MAX_CAR][Color1] = 53;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 5;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = VELTRAN;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -23.694538116455;
	DataCars[MAX_CAR][PosY]     = 2496.9296875;
	DataCars[MAX_CAR][PosZ]     = 16.343023300171;
	DataCars[MAX_CAR][PosZZ]  = 0;
	DataCars[MAX_CAR][Modelo] = 414;
	DataCars[MAX_CAR][Color1] = 53;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 5;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = VELTRAN;

//////////////////// LSMD
	MAX_CAR++; // Ambulancía
	DataCars[MAX_CAR][PosX]   = -13.94921875;
	DataCars[MAX_CAR][PosY]     = 1548.390625;
	DataCars[MAX_CAR][PosZ]     = 13.094888305664;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 416;
	DataCars[MAX_CAR][Color1] = 16;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 18;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = LSMD;

	MAX_CAR++; 	// Ambulancía
	DataCars[MAX_CAR][PosX]   = -6.7373046875;
	DataCars[MAX_CAR][PosY]     = 1548.390625;
	DataCars[MAX_CAR][PosZ]     = 13.094888305664;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 416;
	DataCars[MAX_CAR][Color1] = 16;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 18;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = LSMD;

	MAX_CAR++; // Ambulancía
	DataCars[MAX_CAR][PosX]   = 0.3486328125;
	DataCars[MAX_CAR][PosY]     = 1548.390625;
	DataCars[MAX_CAR][PosZ]     = 13.094888305664;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 416;
	DataCars[MAX_CAR][Color1] = 16;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 18;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = LSMD;

	MAX_CAR++; // Ambulancía
	DataCars[MAX_CAR][PosX]   = 7.478515625;
	DataCars[MAX_CAR][PosY]     = 1548.390625;
	DataCars[MAX_CAR][PosZ]     = 13.094888305664;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 416;
	DataCars[MAX_CAR][Color1] = 16;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 18;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = LSMD;

	MAX_CAR++; // Ambulancía
	DataCars[MAX_CAR][PosX]   = 14.638671875;
	DataCars[MAX_CAR][PosY]     = 1548.390625;
	DataCars[MAX_CAR][PosZ]     = 13.094888305664;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 416;
	DataCars[MAX_CAR][Color1] = 16;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 18;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = LSMD;

	MAX_CAR++; // Ambulancía
	DataCars[MAX_CAR][PosX]   = 21.8125;
	DataCars[MAX_CAR][PosY]     = 1548.390625;
	DataCars[MAX_CAR][PosZ]     = 13.094888305664;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 416;
	DataCars[MAX_CAR][Color1] = 16;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 18;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = LSMD;

	MAX_CAR++; // Ambulancía
	DataCars[MAX_CAR][PosX]   = 28.9599609375;
	DataCars[MAX_CAR][PosY]     = 1548.390625;
	DataCars[MAX_CAR][PosZ]     = 13.094888305664;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 416;
	DataCars[MAX_CAR][Color1] = 16;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 18;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = LSMD;

	// Heli
	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 1179.5531005859;
	DataCars[MAX_CAR][PosY]     = -1376.6584472656;
	DataCars[MAX_CAR][PosZ]     = 24.877077102661;
	DataCars[MAX_CAR][PosZZ]  = 0;
	DataCars[MAX_CAR][Modelo] = 417;
	DataCars[MAX_CAR][Color1] = 16;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = LSMD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1624.7038574219;
	DataCars[MAX_CAR][PosY]   = 692.5;
	DataCars[MAX_CAR][PosZ]   = -4.9941873550415;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 427;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1620.70703125;
	DataCars[MAX_CAR][PosY]   = 692.5;
	DataCars[MAX_CAR][PosZ]   = -4.9941873550415;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 427;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1612.3961181641;
	DataCars[MAX_CAR][PosY]   = 692.5;
	DataCars[MAX_CAR][PosZ]   = -4.9941873550415;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 427;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1616.685546875;
	DataCars[MAX_CAR][PosY]   = 692.5;
	DataCars[MAX_CAR][PosZ]   = -4.9941873550415;
	DataCars[MAX_CAR][PosZZ]  = 180;
	DataCars[MAX_CAR][Modelo] = 427;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1639;
	DataCars[MAX_CAR][PosY]   = 674.19085693359;
	DataCars[MAX_CAR][PosZ]   = -5.3119788169861;
	DataCars[MAX_CAR][PosZZ]  = 270;
	DataCars[MAX_CAR][Modelo] = 601;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1639;
	DataCars[MAX_CAR][PosY]   = 661.95233154297;
	DataCars[MAX_CAR][PosZ]   = -5.3119788169861;
	DataCars[MAX_CAR][PosZZ]  = 270;
	DataCars[MAX_CAR][Modelo] = 601;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1639;
	DataCars[MAX_CAR][PosY]   = 670.01165771484;
	DataCars[MAX_CAR][PosZ]   = -5.3119788169861;
	DataCars[MAX_CAR][PosZZ]  = 270;
	DataCars[MAX_CAR][Modelo] = 528;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1639;
	DataCars[MAX_CAR][PosY]   = 666.00103759766;
	DataCars[MAX_CAR][PosZ]   = -5.3119788169861;
	DataCars[MAX_CAR][PosZZ]  = 270;
	DataCars[MAX_CAR][Modelo] = 528;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1623;
	DataCars[MAX_CAR][PosY]   = 649.58148193359;
	DataCars[MAX_CAR][PosZ]   = -5.2521877288818;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 525;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -1623;
	DataCars[MAX_CAR][PosY]   = 653.6396484375;
	DataCars[MAX_CAR][PosZ]   = -5.2521877288818;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 525;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = SFPD;

// Bomberos LSMD
	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 1928.4000244141;
	DataCars[MAX_CAR][PosY]   = 1212.9482421875;
	DataCars[MAX_CAR][PosZ]   = 18.724687576294;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 407;
	DataCars[MAX_CAR][Color1] = 16;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 18;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = LSMD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 1928.4000244141;
	DataCars[MAX_CAR][PosY]   = 1208.7163085938;
	DataCars[MAX_CAR][PosZ]   = 18.724687576294;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 407;
	DataCars[MAX_CAR][Color1] = 16;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 18;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = LSMD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 1928.4000244141;
	DataCars[MAX_CAR][PosY]   = 1217.388671875;
	DataCars[MAX_CAR][PosZ]   = 18.724687576294;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 407;
	DataCars[MAX_CAR][Color1] = 16;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 18;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = LSMD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 1928.4000244141;
	DataCars[MAX_CAR][PosY]   = 1195.6826171875;
	DataCars[MAX_CAR][PosZ]   = 18.724687576294;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 407;
	DataCars[MAX_CAR][Color1] = 16;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 18;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = LSMD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 1928.4000244141;
	DataCars[MAX_CAR][PosY]   = 1200.015625;
	DataCars[MAX_CAR][PosZ]   = 18.724687576294;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 407;
	DataCars[MAX_CAR][Color1] = 16;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 18;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = LSMD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 1928.4000244141;
	DataCars[MAX_CAR][PosY]   = 1204.4462890625;
	DataCars[MAX_CAR][PosZ]   = 18.724687576294;
	DataCars[MAX_CAR][PosZZ]  = 90;
	DataCars[MAX_CAR][Modelo] = 407;
	DataCars[MAX_CAR][Color1] = 16;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 18;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = LSMD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]     = 1529;
	DataCars[MAX_CAR][PosY]     = -1687.9899902344;
	DataCars[MAX_CAR][PosZ]     = 5.890625;
	DataCars[MAX_CAR][PosZZ]    = 270;
	DataCars[MAX_CAR][Modelo]   = 405;
	DataCars[MAX_CAR][Color1]   = 0;
	DataCars[MAX_CAR][Color2]   = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]     = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]     = 1529;
	DataCars[MAX_CAR][PosY]     = -1683.775390625;
	DataCars[MAX_CAR][PosZ]     = 5.890625;
	DataCars[MAX_CAR][PosZZ]    = 270;
	DataCars[MAX_CAR][Modelo]   = 405;
	DataCars[MAX_CAR][Color1]   = 0;
	DataCars[MAX_CAR][Color2]   = 270;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]     = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]     = 1545.6025390625;
	DataCars[MAX_CAR][PosY]     = -1684.3319091797;
	DataCars[MAX_CAR][PosZ]     = 5.890625;
	DataCars[MAX_CAR][PosZZ]    = 90;
	DataCars[MAX_CAR][Modelo]   = 405;
	DataCars[MAX_CAR][Color1]   = 0;
	DataCars[MAX_CAR][Color2]   = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]     = false;
	DataCars[MAX_CAR][Time]     = LSPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]     = -1639.3426513672;
	DataCars[MAX_CAR][PosY]     = 649.63903808594;
	DataCars[MAX_CAR][PosZ]     = -5.4105124473572;
	DataCars[MAX_CAR][PosZZ]    = 270;
	DataCars[MAX_CAR][Modelo]   = 405;
	DataCars[MAX_CAR][Color1]   = 0;
	DataCars[MAX_CAR][Color2]   = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]     = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]     = -1639.3426513672;
	DataCars[MAX_CAR][PosY]     = 653.69921875;
	DataCars[MAX_CAR][PosZ]     = -5.4105124473572;
	DataCars[MAX_CAR][PosZZ]    = 270;
	DataCars[MAX_CAR][Modelo]   = 405;
	DataCars[MAX_CAR][Color1]   = 0;
	DataCars[MAX_CAR][Color2]   = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]     = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]     = -1639.3426513672;
	DataCars[MAX_CAR][PosY]     = 657.79998779297;
	DataCars[MAX_CAR][PosZ]     = -5.4105124473572;
	DataCars[MAX_CAR][PosZZ]    = 270;
	DataCars[MAX_CAR][Modelo]   = 405;
	DataCars[MAX_CAR][Color1]   = 0;
	DataCars[MAX_CAR][Color2]   = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]     = false;
	DataCars[MAX_CAR][Time]     = SFPD;

	// END VEHICLES
	MAX_CAR_FACCION = MAX_CAR;
}
public LoadCarsPublic()
{
// BICIS EN EL INICIO
	MAX_CAR++; //Bici 1
	DataCars[MAX_CAR][PosX]   = 1677.0835;
	DataCars[MAX_CAR][PosY]     = -1719.2893;
	DataCars[MAX_CAR][PosZ]     = 13.0619;
	DataCars[MAX_CAR][PosZZ]  = 269.9419;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; //Bici  2
	DataCars[MAX_CAR][PosX]   = 1677.0857;
	DataCars[MAX_CAR][PosY]     = -1717.1659;
	DataCars[MAX_CAR][PosZ]     = 13.0619;
	DataCars[MAX_CAR][PosZZ]  = 269.9419;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 8;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; //Bici  3
	DataCars[MAX_CAR][PosX]   = 1677.0880;
	DataCars[MAX_CAR][PosY]     = -1715.0660;
	DataCars[MAX_CAR][PosZ]     = 13.0619;
	DataCars[MAX_CAR][PosZZ]  = 269.9419;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; //Bici  4
	DataCars[MAX_CAR][PosX]   = 1677.0905;
	DataCars[MAX_CAR][PosY]     = -1713.0879;
	DataCars[MAX_CAR][PosZ]     = 13.0619;
	DataCars[MAX_CAR][PosZZ]  = 269.9419;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 7;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; //Bici  5
	DataCars[MAX_CAR][PosX]   = 1677.0927;
	DataCars[MAX_CAR][PosY]     = -1710.9142;
	DataCars[MAX_CAR][PosZ]     = 13.0619;
	DataCars[MAX_CAR][PosZZ]  = 269.9419;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 62;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; //Bici  6
	DataCars[MAX_CAR][PosX]   = 1677.0945;
	DataCars[MAX_CAR][PosY]     = -1708.8873;
	DataCars[MAX_CAR][PosZ]     = 13.0619;
	DataCars[MAX_CAR][PosZZ]  = 269.9419;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 30;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; //Bici  7
	DataCars[MAX_CAR][PosX]   = 1677.0972;
	DataCars[MAX_CAR][PosY]     = -1706.7830;
	DataCars[MAX_CAR][PosZ]     = 13.0619;
	DataCars[MAX_CAR][PosZZ]  = 269.9419;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 45;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; //Bici  8
	DataCars[MAX_CAR][PosX]   = 1677.1080;
	DataCars[MAX_CAR][PosY]     = -1704.6831;
	DataCars[MAX_CAR][PosZ]     = 13.0619;
	DataCars[MAX_CAR][PosZZ]  = 269.9419;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 3;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;
/////////////
	MAX_CAR++; // Bote 1 LS
	DataCars[MAX_CAR][PosX]   = 928.4375;
	DataCars[MAX_CAR][PosY]     = -2014.2172;
	DataCars[MAX_CAR][PosZ]     = 0.8104;
	DataCars[MAX_CAR][PosZZ]  = 90.6503;
	DataCars[MAX_CAR][Modelo] = 453;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; // Bote 2 LS
	DataCars[MAX_CAR][PosX]   = 928.5720;
	DataCars[MAX_CAR][PosY]     = -2026.0569;
	DataCars[MAX_CAR][PosZ]     = 0.7688;
	DataCars[MAX_CAR][PosZZ]  = 90.6503;
	DataCars[MAX_CAR][Modelo] = 453;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; // Bote 1 SF
	DataCars[MAX_CAR][PosX]   = -1435.7548;
	DataCars[MAX_CAR][PosY]     = 746.7482;
	DataCars[MAX_CAR][PosZ]     = 2.1691;
	DataCars[MAX_CAR][PosZZ]  = 268.9928;
	DataCars[MAX_CAR][Modelo] = 454;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; // Bote 2 SF
	DataCars[MAX_CAR][PosX]   = -1435.7548;
	DataCars[MAX_CAR][PosY]     = 759.0771;
	DataCars[MAX_CAR][PosZ]     = 1.7041;
	DataCars[MAX_CAR][PosZZ]  = 268.9928;
	DataCars[MAX_CAR][Modelo] = 454;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; // Bote 3 SF
	DataCars[MAX_CAR][PosX]   = -1435.7548;
	DataCars[MAX_CAR][PosY]     = 772.3331;
	DataCars[MAX_CAR][PosZ]     = 2.1044;
	DataCars[MAX_CAR][PosZZ]  = 268.9928;
	DataCars[MAX_CAR][Modelo] = 446;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; // Bote 4 SF
	DataCars[MAX_CAR][PosX]   = -1435.7548;
	DataCars[MAX_CAR][PosY]     = 785.4797;
	DataCars[MAX_CAR][PosZ]     = 2.1817;
	DataCars[MAX_CAR][PosZZ]  = 268.9928;
	DataCars[MAX_CAR][Modelo] = 452;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; // Bote De la Isla Público
	DataCars[MAX_CAR][PosX]   = 723.4192;
	DataCars[MAX_CAR][PosY]     = -2918.0864;
	DataCars[MAX_CAR][PosZ]     = 1.1700;
	DataCars[MAX_CAR][PosZZ]  = 263.7822;
	DataCars[MAX_CAR][Modelo] = 484;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

/////////////// BICIS
	MAX_CAR++; // Bicis 1
	DataCars[MAX_CAR][PosX]   = 2490.2905;
	DataCars[MAX_CAR][PosY]     = -1754.9509;
	DataCars[MAX_CAR][PosZ]     = 12.8665;
	DataCars[MAX_CAR][PosZZ]  = 359.9865;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 69;
	DataCars[MAX_CAR][Color2] = 21;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; // Bicis 2
	DataCars[MAX_CAR][PosX]   = 2012.8352;
	DataCars[MAX_CAR][PosY]     = -2008.8220;
	DataCars[MAX_CAR][PosZ]     = 12.8429;
	DataCars[MAX_CAR][PosZZ]  = 179.7848;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 55;
	DataCars[MAX_CAR][Color2] = 25;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; // Bicis 3
	DataCars[MAX_CAR][PosX]   = 1773.0316;
	DataCars[MAX_CAR][PosY]     = -2081.3962;
	DataCars[MAX_CAR][PosZ]     = 13.2073;
	DataCars[MAX_CAR][PosZZ]  = 177.9209;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 4;
	DataCars[MAX_CAR][Color2] = 3;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; // Bicis 4
	DataCars[MAX_CAR][PosX]   = 992.5903;
	DataCars[MAX_CAR][PosY]     = -1521.3861;
	DataCars[MAX_CAR][PosZ]     = 13.5033;
	DataCars[MAX_CAR][PosZZ]  = 87.9006;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 2;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; // Bicis 5
	DataCars[MAX_CAR][PosX]   = 1626.3202;
	DataCars[MAX_CAR][PosY]     = -989.7035;
	DataCars[MAX_CAR][PosZ]     = 23.5804;
	DataCars[MAX_CAR][PosZZ]  = 113.3287;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 6;
	DataCars[MAX_CAR][Color2] = 2;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; // Bicis 6
	DataCars[MAX_CAR][PosX]   = 158.3846;
	DataCars[MAX_CAR][PosY]     = -177.6241;
	DataCars[MAX_CAR][PosZ]     = 1.2297;
	DataCars[MAX_CAR][PosZZ]  = 92.4481;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 2;
	DataCars[MAX_CAR][Color2] = 4;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; // Bicis 7
	DataCars[MAX_CAR][PosX]   = 1621.3726;
	DataCars[MAX_CAR][PosY]     = -1559.6271;
	DataCars[MAX_CAR][PosZ]     = 13.4484;
	DataCars[MAX_CAR][PosZZ]  = 88.7252;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 3;
	DataCars[MAX_CAR][Color2] = 9;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; // Bicis 8
	DataCars[MAX_CAR][PosX]   = 1772.1222;
	DataCars[MAX_CAR][PosY]     = -1655.3744;
	DataCars[MAX_CAR][PosZ]     = 13.8814;
	DataCars[MAX_CAR][PosZZ]  = 211.0688;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 5;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; // Bicis 9
	DataCars[MAX_CAR][PosX]   = 290.4928;
	DataCars[MAX_CAR][PosY]     = -1601.3239;
	DataCars[MAX_CAR][PosZ]     = 32.2046;
	DataCars[MAX_CAR][PosZZ]  = 77.6592;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 4;
	DataCars[MAX_CAR][Color2] = 3;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; // Bicis 10
	DataCars[MAX_CAR][PosX]   = -2299.9954;
	DataCars[MAX_CAR][PosY]     = 1158.7000;
	DataCars[MAX_CAR][PosZ]     = 52.9684;
	DataCars[MAX_CAR][PosZZ]  = 355.7299;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 6;
	DataCars[MAX_CAR][Color2] = 5;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; // Bicis 11
	DataCars[MAX_CAR][PosX]   = -1785.2278;
	DataCars[MAX_CAR][PosY]     = 790.1981;
	DataCars[MAX_CAR][PosZ]     = 24.2191;
	DataCars[MAX_CAR][PosZZ]  = 179.2185;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; // Bicis 12
	DataCars[MAX_CAR][PosX]   = -2464.1604;
	DataCars[MAX_CAR][PosY]     = 505.9433;
	DataCars[MAX_CAR][PosZ]     = 29.7192;
	DataCars[MAX_CAR][PosZZ]  = 93.5356;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; // Bicis 13
	DataCars[MAX_CAR][PosX]   = -2515.1606;
	DataCars[MAX_CAR][PosY]     = -1.1859;
	DataCars[MAX_CAR][PosZ]     = 24.9042;
	DataCars[MAX_CAR][PosZZ]  = 269.1152;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 2;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; // Bicis 14
	DataCars[MAX_CAR][PosX]   = -1877.7968;
	DataCars[MAX_CAR][PosY]     = 467.4769;
	DataCars[MAX_CAR][PosZ]     = 34.5613;
	DataCars[MAX_CAR][PosZZ]  = 272.0557;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 5;
	DataCars[MAX_CAR][Color2] = 3;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;
//////// BICIS SF MOCHIS!
	MAX_CAR++; //Bici 1
	DataCars[MAX_CAR][PosX]   = -2034.4753;
	DataCars[MAX_CAR][PosY]     = 471.5098;
	DataCars[MAX_CAR][PosZ]     = 34.6871;
	DataCars[MAX_CAR][PosZZ]  = 180.1743;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; //Bici  2
	DataCars[MAX_CAR][PosX]   = -2032.4241;
	DataCars[MAX_CAR][PosY]     = 471.5315;
	DataCars[MAX_CAR][PosZ]     = 34.6871;
	DataCars[MAX_CAR][PosZZ]  = 180.1743;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 8;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; //Bici  3
	DataCars[MAX_CAR][PosX]   = -2030.3009;
	DataCars[MAX_CAR][PosY]     = 471.5540;
	DataCars[MAX_CAR][PosZ]     = 34.6871;
	DataCars[MAX_CAR][PosZZ]  = 180.1743;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; //Bici  4
	DataCars[MAX_CAR][PosX]   = -2028.3229;
	DataCars[MAX_CAR][PosY]     = 471.5749;
	DataCars[MAX_CAR][PosZ]     = 34.6871;
	DataCars[MAX_CAR][PosZZ]  = 180.1743;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 7;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; //Bici  5
	DataCars[MAX_CAR][PosX]   = -2026.3214;
	DataCars[MAX_CAR][PosY]     = 471.5966;
	DataCars[MAX_CAR][PosZ]     = 34.6871;
	DataCars[MAX_CAR][PosZZ]  = 180.1743;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 62;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; //Bici  6
	DataCars[MAX_CAR][PosX]   = -2024.2953;
	DataCars[MAX_CAR][PosY]     = 471.6180;
	DataCars[MAX_CAR][PosZ]     = 34.6871;
	DataCars[MAX_CAR][PosZZ]  = 180.1743;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 30;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; //Bici  7
	DataCars[MAX_CAR][PosX]   = -2022.1968;
	DataCars[MAX_CAR][PosY]     = 471.6403;
	DataCars[MAX_CAR][PosZ]     = 34.6871;
	DataCars[MAX_CAR][PosZZ]  = 180.1743;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 45;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; //Bici  8
	DataCars[MAX_CAR][PosX]   = -2020.0486;
	DataCars[MAX_CAR][PosY]     = 471.6630;
	DataCars[MAX_CAR][PosZ]     = 34.6871;
	DataCars[MAX_CAR][PosZZ]  = 180.1743;
	DataCars[MAX_CAR][Modelo] = 510;
	DataCars[MAX_CAR][Color1] = 3;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;
//////// AVIONES
	// AVIONES LS
	MAX_CAR++; // Avion 1
	DataCars[MAX_CAR][PosX]   = 1617.6868;
	DataCars[MAX_CAR][PosY]     = -2625.3660;
	DataCars[MAX_CAR][PosZ]     = 13.5469;
	DataCars[MAX_CAR][PosZZ]  = 356.5330;
	DataCars[MAX_CAR][Modelo] = 511;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; // Avion 2
	DataCars[MAX_CAR][PosX]   = 1682.6178;
	DataCars[MAX_CAR][PosY]     = -2624.2598;
	DataCars[MAX_CAR][PosZ]     = 13.5469;
	DataCars[MAX_CAR][PosZZ]  = 356.5330;
	DataCars[MAX_CAR][Modelo] = 511;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; // Avion 3
	DataCars[MAX_CAR][PosX]   = 1753.2244;
	DataCars[MAX_CAR][PosY]     = -2624.2266;
	DataCars[MAX_CAR][PosZ]     = 13.5469;
	DataCars[MAX_CAR][PosZZ]  = 356.5330;
	DataCars[MAX_CAR][Modelo] = 511;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; // Avion 4
	DataCars[MAX_CAR][PosX]   = 1821.5743;
	DataCars[MAX_CAR][PosY]     = -2623.3508;
	DataCars[MAX_CAR][PosZ]     = 13.5469;
	DataCars[MAX_CAR][PosZZ]  = 356.5330;
	DataCars[MAX_CAR][Modelo] = 511;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; // Avion 5
	DataCars[MAX_CAR][PosX]   = 1889.9186;
	DataCars[MAX_CAR][PosY]     = -2623.7393;
	DataCars[MAX_CAR][PosZ]     = 13.5469;
	DataCars[MAX_CAR][PosZZ]  = 356.5330;
	DataCars[MAX_CAR][Modelo] = 511;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;
	// AVIONES SF
	MAX_CAR++; // Avion 1
	DataCars[MAX_CAR][PosX]   = -1436.9209;
	DataCars[MAX_CAR][PosY]     = -527.5603;
	DataCars[MAX_CAR][PosZ]     = 14.1719;
	DataCars[MAX_CAR][PosZZ]  = 201.6985;
	DataCars[MAX_CAR][Modelo] = 511;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; // Avion 2
	DataCars[MAX_CAR][PosX]   = -1363.2106;
	DataCars[MAX_CAR][PosY]     = -490.0142;
	DataCars[MAX_CAR][PosZ]     = 14.1719;
	DataCars[MAX_CAR][PosZZ]  = 206.9626;
	DataCars[MAX_CAR][Modelo] = 511;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; // Avion 3
	DataCars[MAX_CAR][PosX]   = -1215.0913;
	DataCars[MAX_CAR][PosY]     = -152.6281;
	DataCars[MAX_CAR][PosZ]     = 14.1484;
	DataCars[MAX_CAR][PosZZ]  = 134.8558;
	DataCars[MAX_CAR][Modelo] = 511;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++; // Avion 4
	DataCars[MAX_CAR][PosX]   = -1258.2246;
	DataCars[MAX_CAR][PosY]     = -109.2923;
	DataCars[MAX_CAR][PosZ]     = 14.1484;
	DataCars[MAX_CAR][PosZZ]  = 134.4171;
	DataCars[MAX_CAR][Modelo] = 511;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 235.95248413086;
	DataCars[MAX_CAR][PosY]     = 2472.0737304688;
	DataCars[MAX_CAR][PosZ]     = 17.851051330566;
	DataCars[MAX_CAR][PosZZ]  = 0;
	DataCars[MAX_CAR][Modelo] = 503;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 1;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 15;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 236.80352783203;
	DataCars[MAX_CAR][PosY]     = 2493.8601074219;
	DataCars[MAX_CAR][PosZ]     = 17.681560516357;
	DataCars[MAX_CAR][PosZZ]  = 0;
	DataCars[MAX_CAR][Modelo] = 411;
	DataCars[MAX_CAR][Color1] = 3;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 15;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 237.16889953613;
	DataCars[MAX_CAR][PosY]     = 2516.4240722656;
	DataCars[MAX_CAR][PosZ]     = 17.621561050415;
	DataCars[MAX_CAR][PosZZ]  = 0;
	DataCars[MAX_CAR][Modelo] = 575;
	DataCars[MAX_CAR][Color1] = 6;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Interior]  = 15;
	DataCars[MAX_CAR][World]   = WORLD_DEFAULT_INTERIOR;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 2766.0444;
	DataCars[MAX_CAR][PosY]     = -2033.5204;
	DataCars[MAX_CAR][PosZ]     = 13.1631;
	DataCars[MAX_CAR][PosZZ]  = 271.0413;
	DataCars[MAX_CAR][Modelo] = 509;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 5;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 2685.3411;
	DataCars[MAX_CAR][PosY]     = -1974.7372;
	DataCars[MAX_CAR][PosZ]     = 13.1626;
	DataCars[MAX_CAR][PosZZ]  = 85.1544;
	DataCars[MAX_CAR][Modelo] = 509;
	DataCars[MAX_CAR][Color1] = 4;
	DataCars[MAX_CAR][Color2] = 9;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 2634.8181;
	DataCars[MAX_CAR][PosY]     = -2005.4088;
	DataCars[MAX_CAR][PosZ]     = 13.1637;
	DataCars[MAX_CAR][PosZZ]  = 281.0791;
	DataCars[MAX_CAR][Modelo] = 509;
	DataCars[MAX_CAR][Color1] = 6;
	DataCars[MAX_CAR][Color2] = 50;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -2476.4790;
	DataCars[MAX_CAR][PosY]     = -197.5568;
	DataCars[MAX_CAR][PosZ]     = 25.1357;
	DataCars[MAX_CAR][PosZZ]  = 2.3163;
	DataCars[MAX_CAR][Modelo] = 509;
	DataCars[MAX_CAR][Color1] = 1;
	DataCars[MAX_CAR][Color2] = 0;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -2534.4126;
	DataCars[MAX_CAR][PosY]     = -38.4596;
	DataCars[MAX_CAR][PosZ]     = 25.1279;
	DataCars[MAX_CAR][PosZZ]  = 269.7780;
	DataCars[MAX_CAR][Modelo] = 509;
	DataCars[MAX_CAR][Color1] = 8;
	DataCars[MAX_CAR][Color2] = 51;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -2714.2458;
	DataCars[MAX_CAR][PosY]     = -241.4685;
	DataCars[MAX_CAR][PosZ]     = 6.6733;
	DataCars[MAX_CAR][PosZZ]  = 178.9659;
	DataCars[MAX_CAR][Modelo] = 509;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 50;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;
	MAX_CAR_PUBLIC = MAX_CAR;
	
	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 2118.5427;
	DataCars[MAX_CAR][PosY]     = -1344.7986;
	DataCars[MAX_CAR][PosZ]     = 23.9844;
	DataCars[MAX_CAR][PosZZ]  = 88.3509;
	DataCars[MAX_CAR][Modelo] = 509;
	DataCars[MAX_CAR][Color1] = 0;
	DataCars[MAX_CAR][Color2] = 50;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;
	MAX_CAR_PUBLIC = MAX_CAR;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 2173.2085;
	DataCars[MAX_CAR][PosY]     = -1424.8947;
	DataCars[MAX_CAR][PosZ]     = 23.9844;
	DataCars[MAX_CAR][PosZZ]  = 0.6192;
	DataCars[MAX_CAR][Modelo] = 509;
	DataCars[MAX_CAR][Color1] = 6;
	DataCars[MAX_CAR][Color2] = 6;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;
	MAX_CAR_PUBLIC = MAX_CAR;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = 2188.4690;
	DataCars[MAX_CAR][PosY]     = -1503.1975;
	DataCars[MAX_CAR][PosZ]     = 23.9552;
	DataCars[MAX_CAR][PosZZ]  = 355.4596;
	DataCars[MAX_CAR][Modelo] = 509;
	DataCars[MAX_CAR][Color1] = 6;
	DataCars[MAX_CAR][Color2] = 6;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;
	MAX_CAR_PUBLIC = MAX_CAR;

	MAX_CAR++;
	DataCars[MAX_CAR][PosX]   = -2088.4094;
	DataCars[MAX_CAR][PosY]     = 903.1467;
	DataCars[MAX_CAR][PosZ]     = 65.5231;
	DataCars[MAX_CAR][PosZZ]  = 353.4789;
	DataCars[MAX_CAR][Modelo] = 509;
	DataCars[MAX_CAR][Color1] = 15;
	DataCars[MAX_CAR][Color2] = 15;
	format(DataCars[MAX_CAR][Dueno], MAX_PLAYER_NAME, "0");
	DataCars[MAX_CAR][Lock]   = false;
	DataCars[MAX_CAR][Time]     = CIVIL;
	MAX_CAR_PUBLIC = MAX_CAR;

	// END VEHICLES PUBLICS
}
public IsGuanteraOpen(playerid)
{
	new VehicleInside = IsPlayerInsideVehicle(playerid);
	if ( VehicleInside )
	{
		if (DataCars[VehicleInside][GuanteraLock] ||
			strlen(DataCars[VehicleInside][Dueno]) == 1 && VehicleInside <= MAX_CAR_DUENO )
		{
		    return VehicleInside;
		}
		else
		{
			SendInfoMessage(playerid, 0, "1581", "La guantera de éste vehículo se encuentra cerrada!");
		}
	}
	return false;
}
public IsMaleteroOpen(playerid)
{
    if ( !IsPlayerInAnyVehicle(playerid) )
    {
	    new MyNearCar = IsPlayerInNearVehicle(playerid);
		if ( MyNearCar )
		{
			if (DataCars[MyNearCar][MaleteroState] ||
    			strlen(DataCars[MyNearCar][Dueno]) == 1 && MyNearCar <= MAX_CAR_DUENO )
			{
			    return MyNearCar;
			}
			else
			{
				SendInfoMessage(playerid, 0, "251", "El maletero de éste vehículo se encuentra cerrado!");
			}
		}
	}
	else
	{
		SendInfoMessage(playerid, 0, "250", "Desde adentro del vehículo no puedes acceder al maletero");
	}
	return false;
}
public LoadStaticObjects()
{

//=======================================================================================
//=======================================================================================
	// REJAS DE LOS SPRAY       (18)
	CreateDynamicObjectExULP(980, -2716.371826, 217.276764, 6.192754, 0, 0, 89, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(980, -2716.371826, 217.276764, 6.192754, 0, 0, 89, -1, -1, -1, MAX_RADIO_STREAM); //
	CreateDynamicObjectExULP(980, -1936.045898, 238.765091, 36.085892, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM); //
	CreateDynamicObjectExULP(980, -1903.888550, 277.860413, 42.820267, 0, 0, 180, -1, -1, -1, MAX_RADIO_STREAM); //
	CreateDynamicObjectExULP(980, 488.477295, -1735.528442, 12.917402, 0, 0, 171, -1, -1, -1, MAX_RADIO_STREAM); //
	CreateDynamicObjectExULP(976, 2071.255859, -1827.541138, 12.708785, 0, 0, -89, -1, -1, -1, MAX_RADIO_STREAM); //
	CreateDynamicObjectExULP(976, 1028.865479, -1029.366455, 31.263472, 0, 0, 179, -1, -1, -1, MAX_RADIO_STREAM); //
	CreateDynamicObjectExULP(980, 1043.933350, -1026.021729, 33.874954, 0, 0, 180, -1, -1, -1, MAX_RADIO_STREAM); //
	CreateDynamicObjectExULP(975, 720.169312, -462.474487, 17.010628, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM); //
	CreateDynamicObjectExULP(980, 1968.566895, 2162.555664, 12.621687, 0, 0, 270, -1, -1, -1, MAX_RADIO_STREAM); //
	CreateDynamicObjectExULP(980, 2386.587402, 1043.470947, 12.593704, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM); //

	CreateDynamicObjectExULP(986, -99.714607, 1111.534424, 20.452366, 0, 0, 179, -1, -1, -1, MAX_RADIO_STREAM); //
	CreateDynamicObjectExULP(980, -2425.477051, 1028.070923, 52.171051, 0, 0, 180, -1, -1, -1, MAX_RADIO_STREAM); //
	CreateDynamicObjectExULP(976, 2001.490601, 2317.493164, 9.982223, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM); //
	CreateDynamicObjectExULP(985, 2393.687256, 1483.140381, 11.530980, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM); //
	CreateDynamicObjectExULP(985, 2405.697510, 1483.226807, 11.570413, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM); //
	CreateDynamicObjectExULP(969, 1843.411621, -1858.589478, 12.549690, 0, 0, 89, -1, -1, -1, MAX_RADIO_STREAM); //
	CreateDynamicObjectExULP(980, -1421.735718, 2591.065430, 57.616653, 0, 0, 179, -1, -1, -1, MAX_RADIO_STREAM); //
	CreateDynamicObjectExULP(976, 2000.855103, 2303.761963, 10.004567, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM); //

// Reja de Colts Tunning (Exterior)
	CreateDynamicObjectExULP(971,2644.899902,-2039.394531,11.919919,0.000000,90.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);

// Puerta YKZ y SML RemoveBulding
	CreateDynamicObjectExULP(966,-2172.361572,661.244628,48.437500,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(966,-2037.361083,-102.738075,34.164062,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8558,-2077.378662,-105.761245,35.685604,0.000000,0.000000,180.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8418,-2055.143798,-122.521598,34.400001,0.000000,0.000000,180.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8843,-2040.787597,-117.911026,34.205001,0.000000,0.000000,180.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-2037.301635,-103.282257,34.736198,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-2044.274414,-102.979331,34.736198,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,-2060.350097,-102.874549,35.701141,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,-2048.047851,-102.874023,35.701141,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,-2054.449218,-102.874023,35.701141,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1280,-2045.491455,-118.740013,34.638488,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1280,-2044.199951,-121.432411,34.638488,0.000000,0.000000,180.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1280,-2045.491210,-121.431640,34.638488,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1280,-2044.199951,-118.739257,34.638488,0.000000,0.000000,180.000000,-1,-1,-1,MAX_RADIO_STREAM);

// Gasolineras en el agua
	CreateDynamicObjectExULP(1380,-988.205139,-657.856811,54.000000,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1380,-1017.175048,-657.221252,54.000000,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3427,-980.103515,-704.026733,31.007812,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3427,-1054.879638,-652.251342,31.007812,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3675,-988.332641,-658.877868,42.299999,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3675,-988.314880,-656.000000,47.750000,0.000000,180.000000,180.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(16087,-993.918090,-657.331359,54.669990,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3287,-986.123046,-655.529724,58.000000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3287,-989.699340,-655.552978,58.000000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3636,-940.694641,-656.370666,43.887275,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5706,-940.837890,-651.562316,32.500000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5706,-940.837890,-669.670104,32.500000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1389,-988.792053,-656.668823,53.085884,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1389,-988.871582,-658.716491,53.085884,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3287,-1015.114196,-655.107910,58.000000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3287,-1018.852111,-655.575927,58.000000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3675,-1017.299987,-658.877868,42.299999,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3675,-1017.264465,-656.000000,47.750000,0.000000,179.994506,179.994506,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(966,-1035.440063,-588.339782,31.007812,0.000000,0.000000,358.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(968,-1035.466308,-588.333190,31.710407,0.000000,0.000000,358.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(979,-1044.506225,-572.318786,31.848031,0.000000,0.000000,268.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(979,-1044.378540,-561.835815,31.848031,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(979,-1044.176757,-550.701354,31.848031,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(978,-1033.233642,-572.688049,31.848031,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(978,-1033.221557,-562.190185,31.848031,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(978,-1033.117309,-551.394287,31.848031,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(979,-1044.849975,-582.879028,31.848031,0.000000,0.000000,267.994995,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(978,-1033.212402,-582.984558,31.848031,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(978,-1033.143920,-540.437194,31.848031,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(978,-1033.184326,-529.536254,31.848031,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(978,-1033.298339,-519.023620,31.848031,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(978,-1033.237304,-508.615325,31.848031,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(978,-1033.236938,-497.853027,31.848031,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(978,-1033.229614,-487.300842,31.848031,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(979,-1043.968750,-540.111938,31.848031,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(979,-1043.858642,-529.502441,31.848031,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(979,-1043.728515,-519.338439,31.842208,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(979,-1043.374877,-508.515380,31.842208,0.000000,0.000000,267.994506,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(979,-1043.086303,-497.656585,31.842208,0.000000,0.000000,267.994506,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(979,-1042.954956,-485.985656,31.848031,0.000000,0.000000,271.989501,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4100,-1028.650512,-588.505493,32.709480,0.000000,0.000000,139.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4100,-1049.623657,-587.946777,32.709480,0.000000,0.000000,139.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-1034.666259,-577.716918,34.882232,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-1034.366455,-567.531860,34.882232,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-1034.340576,-556.943176,34.882232,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-1034.476318,-545.898925,34.882232,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-1034.440917,-535.050842,34.882232,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-1034.349609,-513.843811,34.882232,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-1034.509033,-524.360107,34.882232,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-1034.582641,-503.496429,34.882232,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-1034.486938,-492.645538,34.882232,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-1034.748901,-482.505401,34.984928,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-1043.464355,-577.701904,34.882232,0.000000,0.000000,180.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-1043.170898,-566.812255,34.882232,0.000000,0.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-1042.947875,-556.093933,34.882232,0.000000,0.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-1043.008178,-545.254272,34.882232,0.000000,0.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-1042.978637,-534.779052,34.882232,0.000000,0.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-1042.862304,-524.442626,34.882232,0.000000,0.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-1042.480346,-513.910705,34.876407,0.000000,0.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-1042.080200,-502.775543,34.876407,0.000000,0.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-1041.606567,-491.704284,34.876407,0.000000,0.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-1041.789672,-480.592651,34.882232,0.000000,0.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-1035.427246,-587.631835,31.572135,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-1042.265258,-587.725097,31.572135,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5706,836.089477,-2078.934082,-3.500000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5816,847.567199,-2069.340332,8.500000,0.000000,0.000000,180.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,821.904785,-2067.635253,12.530036,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,826.057800,-2067.626708,12.530036,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,830.128051,-2067.620849,12.530036,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,834.258972,-2067.619873,12.530036,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,838.404296,-2067.604492,12.530036,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,842.557983,-2067.591308,12.530036,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,846.714111,-2067.599121,12.530036,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237,852.351745,-2067.593750,11.899999,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,821.740905,-2065.980224,0.871965,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,825.883728,-2065.985839,0.871965,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,830.035522,-2065.993896,0.871965,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,834.162536,-2066.004638,0.871965,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,838.305969,-2066.007080,0.871965,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,842.460327,-2065.998779,0.871965,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,846.609680,-2066.001464,0.871965,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,850.431274,-2066.007324,0.871965,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,852.465209,-2068.079345,0.871965,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,852.453002,-2072.221191,0.871965,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(17068,856.109313,-2075.116210,0.000000,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(9192,835.553955,-2078.497802,5.188537,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1686,852.106140,-2079.134277,0.320484,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1686,852.210876,-2086.225830,0.320484,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(17068,856.306091,-2083.108154,0.000000,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,852.571105,-2078.139648,0.871965,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,852.608825,-2086.288330,0.871965,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2600,842.517150,-2087.976806,1.092756,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2600,850.369812,-2088.164794,1.092756,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2600,823.214599,-2088.115478,1.092756,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1571,843.848266,-2071.762939,1.651299,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,852.566223,-2084.094970,0.884807,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,852.542419,-2076.028076,0.884807,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,852.421997,-2074.310058,0.884807,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,852.548278,-2088.544677,0.884807,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,850.473144,-2088.639648,0.834769,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,846.347045,-2088.639648,0.823814,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,842.218261,-2088.639648,0.789335,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,838.072814,-2088.639648,0.775131,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,833.947326,-2088.639648,0.762489,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,829.806701,-2088.639648,0.749425,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,825.698791,-2088.639648,0.760740,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,821.689086,-2088.639648,0.771608,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,819.707092,-2088.398925,0.800000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,819.597473,-2086.102294,0.871965,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(17068,815.983642,-2083.013916,0.000000,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,819.699523,-2082.040283,0.884807,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,819.694946,-2079.814453,0.871965,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(17068,815.964294,-2074.367187,0.000000,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,819.604797,-2075.473632,0.884807,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,819.677856,-2073.408691,0.884807,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,819.693054,-2071.210937,0.871965,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,819.680725,-2068.034912,0.871965,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1686,820.217285,-2078.610107,0.320484,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2600,831.941833,-2088.022460,1.092756,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,819.682678,-2083.963623,0.884807,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,849.068603,-2067.658935,12.542879,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,851.513549,-2067.704101,12.542879,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1214,851.500000,-2067.939941,11.978555,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1686,820.122253,-2069.932373,0.320484,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,852.577453,-2080.228515,0.871965,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,852.450317,-2082.317382,0.884807,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,819.699157,-2077.747070,0.871965,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5706,-1466.774291,814.602172,-3.500000,0.000000,0.000000,180.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(7347,-1461.664794,809.914916,-46.189998,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(16001,-1485.699096,817.634094,6.187500,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1366,-1487.900024,821.752929,7.360383,0.000000,270.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1366,-1487.900024,819.909118,7.367556,0.000000,270.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(17068,-1446.602539,823.140136,0.000000,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,-1450.433227,819.886840,0.871965,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,-1450.430908,815.785400,0.871965,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-1450.376098,822.166137,0.884807,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-1450.453491,824.010559,0.884807,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(17068,-1446.748901,812.444396,0.000000,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-1450.368041,813.552612,0.884807,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,-1450.326660,809.123413,0.871965,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,-1450.334106,804.985290,0.871965,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1686,-1451.140991,806.998046,0.320484,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1686,-1451.016235,817.939392,0.320484,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,-1480.794555,801.579956,0.871965,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,-1476.659545,801.582641,0.871965,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,-1472.520996,801.587890,0.871965,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,-1468.387573,801.603027,0.871965,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,-1464.240966,801.600646,0.871965,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,-1460.100585,801.605834,0.871965,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,-1455.970092,801.610534,0.871965,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,-1452.392211,801.610534,0.871965,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11495,-1446.611816,802.460449,0.000000,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8168,-1480.251953,807.075744,2.268457,0.000000,0.000000,105.999938,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(9193,-1462.823486,812.670532,5.188537,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-1450.322753,811.408203,0.884807,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-1450.477661,803.066894,0.884807,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-1450.432983,801.549987,0.884807,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);

// Heors (Interior)
	CreateDynamicObjectExULP(14801,1729.879882,-2450.266601,13.840000,0.000000,0.000000,0.000000,-1,13,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11008,1732.787353,-2470.566162,19.445516,0.000000,0.000000,0.000000,-1,13,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11008,1750.251953,-2448.600585,19.445516,0.000000,0.000000,90.000000,-1,13,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11008,1735.387695,-2428.571289,19.445516,0.000000,0.000000,179.994506,-1,13,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11008,1707.412231,-2444.951904,19.445516,0.000000,0.000000,270.000000,-1,13,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11008,1708.708007,-2459.373046,19.445516,0.000000,0.000000,270.000000,-1,13,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11008,1728.904296,-2451.333007,32.299999,270.000000,0.000000,179.994506,-1,13,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1555,1725.799072,-2449.300048,12.600000,0.000000,0.000000,270.000000,-1,13,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1555,1732.880004,-2445.770019,12.600000,0.000000,0.000000,180.000000,-1,13,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1555,1730.199951,-2453.458984,12.600000,0.000000,0.000000,0.000000,-1,13,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2945,1731.015502,-2447.697998,13.953310,0.000000,0.000000,90.000000,-1,13,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2945,1730.072753,-2453.138671,13.953310,0.000000,0.000000,90.000000,-1,13,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,1724.821411,-2447.922119,13.050000,0.000000,0.000000,0.000000,-1,13,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(643,1728.600830,-2447.644775,13.095083,0.000000,0.000000,0.000000,-1,13,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1808,1730.418090,-2449.595214,12.624611,0.000000,0.000000,180.000000,-1,13,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2063,1724.752441,-2447.138183,13.533564,0.000000,0.000000,90.000000,-1,13,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,1724.674926,-2447.972167,13.500000,0.000000,0.000000,0.000000,-1,13,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,1724.693359,-2447.194824,13.050000,0.000000,0.000000,0.000000,-1,13,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,1724.917846,-2447.178222,13.050000,0.000000,0.000000,0.000000,-1,13,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,1724.783081,-2446.361328,13.050000,0.000000,0.000000,0.000000,-1,13,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,1724.850585,-2447.241699,13.500000,0.000000,0.000000,0.000000,-1,13,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,1724.644409,-2446.496337,13.500000,0.000000,0.000000,0.000000,-1,13,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,1724.565917,-2446.328857,13.920000,0.000000,0.000000,0.000000,-1,13,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,1724.865234,-2446.323242,13.920000,0.000000,0.000000,0.000000,-1,13,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,1724.731445,-2447.225097,13.920000,0.000000,0.000000,0.000000,-1,13,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,1724.596313,-2448.051513,13.920000,0.000000,0.000000,0.000000,-1,13,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,1724.895507,-2448.045898,13.920000,0.000000,0.000000,0.000000,-1,13,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1528,1730.805297,-2447.660888,13.862562,0.000000,0.000000,0.000000,-1,13,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1528,1733.175415,-2449.875244,13.605158,0.000000,0.000000,0.000000,-1,13,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2255,1729.243041,-2446.290039,13.984704,0.000000,0.000000,0.000000,-1,13,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14472,1726.141845,-2450.620605,14.069694,0.000000,0.000000,90.083679,-1,13,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(15046,1781.837890,-2461.745117,13.804576,0.000000,0.000000,0.000000,-1,13,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1498,1781.104248,-2454.468505,12.558413,0.000000,0.000000,0.000000,-1,13,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1498,1779.445434,-2437.976562,12.558413,0.000000,0.000000,180.000000,-1,13,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1498,1783.900024,-2451.076904,12.558413,0.000000,0.000000,90.000000,-1,13,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1728,1780.847045,-2444.281250,12.554687,0.000000,0.000000,90.000000,-1,13,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14384,1790.556518,-2442.433349,14.054682,0.000000,0.000000,270.000000,-1,13,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2297,1787.036376,-2444.389160,12.554687,0.000000,0.000000,180.000000,-1,13,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1432,1790.287109,-2442.545898,12.554687,0.000000,0.000000,0.000000,-1,13,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1728,1783.006225,-2441.312011,12.554687,0.000000,0.000000,6.935729,-1,13,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2197,1792.339965,-2438.364990,12.554687,0.000000,0.000000,90.000000,-1,13,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2197,1791.469970,-2438.320312,12.554687,0.000000,0.000000,270.000000,-1,13,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2197,1792.500000,-2438.320312,12.554687,0.000000,0.000000,270.000000,-1,13,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1528,1787.697387,-2443.955566,14.989718,0.000000,0.000000,0.000000,-1,13,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1528,1783.845825,-2447.955078,14.901790,0.000000,0.000000,0.000000,-1,13,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1827,1783.450927,-2443.409423,12.554687,0.000000,0.000000,0.000000,-1,13,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1670,1783.283447,-2443.608154,12.998999,0.000000,0.000000,0.000000,-1,13,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1670,1783.656127,-2443.064941,12.998999,0.000000,0.000000,139.154083,-1,13,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2823,1780.973999,-2442.373535,13.045746,0.000000,0.000000,0.000000,-1,13,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2839,1790.290405,-2442.589111,13.170025,0.000000,0.000000,0.000000,-1,13,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2857,1784.691284,-2442.415771,12.554687,0.000000,0.000000,0.000000,-1,13,-1,MAX_RADIO_STREAM);

// Supermercado LS
	CreateDynamicObjectExULP(6060,1805.726806,-2542.629638,13.299900,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(6060,1805.231323,-2482.198486,13.699999,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(6060,1858.435546,-2533.511718,13.699999,0.000000,0.000000,270.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(6060,1727.146240,-2532.090820,13.699999,0.000000,0.000000,90.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3997,1770.353881,-2531.797119,20.881046,0.000000,180.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3997,1789.728027,-2535.534179,12.600000,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(6060,1786.612426,-2581.349365,13.699999,0.000000,0.000000,180.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1826.260009,-2538.966796,12.600000,0.000000,0.000000,90.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1826.260009,-2527.563964,12.600000,0.000000,0.000000,90.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1826.260009,-2524.554687,12.600000,0.000000,0.000000,270.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1826.260009,-2535.964111,12.600000,0.000000,0.000000,270.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1759.299804,-2527.563476,12.600000,0.000000,0.000000,90.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1759.300048,-2538.964599,12.600000,0.000000,0.000000,90.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1759.300048,-2524.554687,12.600000,0.000000,0.000000,270.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1759.300048,-2535.964111,12.600000,0.000000,0.000000,270.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(738,1773.778564,-2522.319335,12.699999,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(738,1793.778320,-2540.319335,12.699999,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(738,1813.778320,-2540.319335,12.699999,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(738,1813.778320,-2522.319335,12.699999,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(738,1793.778320,-2522.319335,12.699999,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(738,1773.778320,-2540.319335,12.699999,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(804,1777.011840,-2529.052734,13.864370,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(804,1772.278442,-2535.009277,13.864370,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(804,1777.392456,-2534.534423,13.864370,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(804,1772.283813,-2528.924316,13.864370,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(802,1775.395019,-2531.325439,13.080042,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(802,1775.333007,-2532.457519,13.080042,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(802,1774.511230,-2532.521484,13.080042,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(802,1774.416992,-2531.326171,13.080042,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(802,1774.756835,-2531.825683,13.080042,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(802,1773.632568,-2531.839843,13.080042,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(802,1772.657470,-2531.852539,13.080042,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(802,1773.256835,-2531.844726,13.080042,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(802,1775.805175,-2531.811523,13.080042,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(802,1776.854003,-2531.797851,13.080042,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(802,1777.378173,-2531.791015,13.080042,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(802,1776.103759,-2531.807617,13.080042,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(802,1772.505859,-2531.854492,13.080042,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(802,1774.794311,-2528.751220,13.080042,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(802,1774.804199,-2529.650390,13.080042,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(802,1774.813964,-2530.549804,13.080042,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(802,1774.804077,-2529.725341,13.080042,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(802,1774.839599,-2532.872558,13.080042,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(802,1774.848266,-2533.696533,13.080042,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(802,1774.856201,-2534.445800,13.080042,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(802,1774.862304,-2535.044921,13.080042,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(802,1774.842651,-2533.321044,13.080042,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(802,1774.830688,-2532.345947,13.080042,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(804,1776.431884,-2533.439453,13.864370,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(804,1773.558105,-2533.401123,13.864370,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(804,1775.913085,-2530.328857,13.864370,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(804,1773.560791,-2530.228271,13.864370,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1364,1806.687255,-2526.045898,13.384121,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1364,1806.687255,-2537.436767,13.384121,0.000000,0.000000,180.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1364,1800.686523,-2526.045898,13.384121,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1364,1800.686523,-2537.436523,13.384121,0.000000,0.000000,179.994506,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1360,1803.712402,-2526.119628,13.372021,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1360,1803.674926,-2537.598632,13.372021,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(6965,1788.894165,-2531.602539,10.998999,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(994,1786.034545,-2534.599853,12.600000,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(994,1786.028198,-2528.337402,12.600000,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(994,1786.061157,-2534.580566,12.600000,0.000000,0.000000,90.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(994,1792.290161,-2534.625976,12.600000,0.000000,0.000000,90.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14531,1552.465820,-2558.273437,16.180000,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(18026,1595.988281,-2558.858398,12.699999,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1984,1604.020507,-2557.438476,12.699999,0.000000,0.000000,90.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1891,1590.995117,-2555.146484,12.699999,0.000000,0.000000,90.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1891,1590.995117,-2562.550048,12.600000,0.000000,0.000000,90.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1883,1594.995117,-2555.146484,12.680000,0.000000,0.000000,90.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1889,1598.995117,-2555.146484,12.699999,0.000000,0.000000,90.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1883,1594.995117,-2562.549804,12.550000,0.000000,0.000000,90.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1889,1598.995117,-2562.550048,12.600000,0.000000,0.000000,90.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1888,1600.933593,-2550.889648,12.699999,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1887,1591.006103,-2550.916259,12.699999,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1886,1602.901977,-2565.688964,16.500000,0.000000,6.000000,246.371398,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1886,1603.166992,-2551.716796,16.500000,9.997558,358.494873,322.185058,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1886,1588.830078,-2557.798828,16.500000,9.997558,358.494873,140.553588,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1885,1603.989379,-2554.613525,12.699999,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1848,1603.583007,-2562.484375,12.582783,0.000000,0.000000,270.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1848,1588.442138,-2555.270507,12.582783,0.000000,0.000000,89.697814,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1848,1588.251953,-2562.528808,12.582783,0.000000,0.000000,89.692382,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1850,1601.149414,-2567.799804,13.699999,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1996,1600.877685,-2566.938232,12.582783,0.000000,0.000000,179.994506,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2362,1604.117431,-2552.229980,14.544023,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2362,1604.093872,-2552.229980,13.829090,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1991,1601.869995,-2566.938232,12.582783,0.000000,0.000000,180.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1996,1599.900512,-2566.938232,12.582783,0.000000,0.000000,179.994506,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1996,1589.976806,-2566.770751,12.582783,0.000000,0.000000,179.994506,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1991,1590.969970,-2566.770019,12.582783,0.000000,0.000000,179.994506,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1991,1591.930053,-2566.769531,12.582783,0.000000,0.000000,179.994506,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1850,1591.181762,-2567.530029,13.699999,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1850,1607.931396,-2552.408935,13.998999,0.000000,270.000000,90.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2362,1607.819946,-2553.850097,14.320772,0.000000,0.000000,270.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2362,1607.819946,-2553.850097,13.500000,0.000000,0.000000,270.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1522,1595.328125,-2566.750000,12.699999,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1850,1604.709472,-2552.090820,13.800000,0.000000,270.000000,180.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1983,1605.927246,-2552.499023,13.199999,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1984,1557.013427,-2558.750000,12.699999,0.000000,0.000000,90.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1891,1543.699951,-2560.176757,12.699999,0.000000,0.000000,179.994506,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1889,1543.699951,-2556.599609,12.699999,0.000000,0.000000,179.994506,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1889,1549.000000,-2560.176757,12.699999,0.000000,0.000000,180.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1890,1549.000000,-2556.599609,12.699999,0.000000,0.000000,179.994506,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1984,1557.012695,-2562.750000,12.699999,0.000000,0.000000,90.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1848,1543.595703,-2553.484375,12.699997,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1848,1549.058105,-2553.484375,12.699997,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1885,1557.238281,-2555.976562,12.562812,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1885,1557.109375,-2559.958251,12.562812,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14667,1543.525390,-2553.048828,13.460000,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1522,1540.710937,-2561.893554,12.569744,0.000000,0.000000,270.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1522,1558.858032,-2554.018798,12.569744,0.000000,0.000000,270.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2541,1554.258422,-2554.168212,12.562812,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2541,1552.257812,-2554.167968,12.562812,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2541,1553.257812,-2554.167968,12.562812,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1996,1553.729980,-2556.793945,12.562812,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1991,1552.732543,-2556.792724,12.562812,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1996,1552.732543,-2559.948242,12.562812,0.000000,0.000000,180.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1991,1553.729980,-2559.949951,12.562812,0.000000,0.000000,180.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1886,1558.516967,-2554.474853,16.181545,9.997558,358.494873,301.935058,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1886,1558.576660,-2562.336669,16.181545,9.997558,358.494873,225.027725,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1886,1542.937866,-2561.862060,16.181545,9.997558,358.494873,136.873260,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1886,1541.932617,-2554.563476,16.181545,9.997558,358.494873,76.469024,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1883,1546.255249,-2564.600097,12.546875,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1883,1551.432495,-2563.653076,12.546875,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1883,1546.254882,-2563.652343,12.546875,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1883,1551.431640,-2564.600097,12.546875,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(12845,1589.029907,-2583.428710,14.679393,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(12844,1588.900146,-2583.755615,14.522583,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(12844,1589.200683,-2583.581054,14.489999,0.000000,0.000000,180.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1522,1593.797363,-2588.179931,12.546875,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1522,1592.298950,-2588.179687,12.546875,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1522,1582.615722,-2579.202392,12.546875,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);

// PigPen Map
	CreateDynamicObjectExULP(8674,2435.760009,-1246.484008,25.008506,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,2395.379882,-1246.156250,25.000000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,2440.979980,-1241.359985,25.000000,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,2440.979980,-1231.060058,25.008506,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,2411.500000,-1222.106445,24.624164,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,2426.216796,-1246.483398,25.008506,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,2405.668945,-1246.156250,25.000000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8647,2396.407226,-1246.157226,23.500000,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1231,2421.046875,-1246.489990,25.552953,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,2415.640625,-1222.106445,24.624164,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,2409.419921,-1220.010009,24.624164,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1232,2411.018554,-1246.158203,25.000000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,2417.729980,-1220.020019,24.624164,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1231,2434.905029,-1219.504882,27.234712,0.000000,0.000000,358.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(634,2412.739257,-1220.444580,24.000000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(634,2417.239257,-1220.510253,24.000000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(803,2411.307373,-1220.114990,24.976943,0.000000,354.000000,88.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(803,2415.806152,-1220.331420,24.976943,0.000000,353.995971,39.994995,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(638,2419.446044,-1219.506835,25.202928,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(638,2423.623046,-1219.518432,25.234607,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,2424.899902,-1221.519531,24.700000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1280,2429.699951,-1222.479248,24.700000,0.000000,350.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,2427.399902,-1222.106445,24.999000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,2431.540039,-1222.106445,24.999000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,2433.580078,-1220.000000,24.999000,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,2425.340087,-1220.060058,24.999000,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,2418.212890,-1221.519531,24.700000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1280,2413.263671,-1222.478515,24.358215,0.000000,349.996948,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(634,2429.660400,-1220.795898,24.000000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(634,2433.186523,-1220.848876,24.000000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(803,2427.569091,-1220.586547,24.976943,0.000000,353.995971,101.994995,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(803,2431.564208,-1220.267578,24.976943,0.000000,353.995971,71.994995,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,2438.759521,-1242.295410,23.355304,0.000000,0.000000,268.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,2435.441162,-1242.295410,23.331192,0.000000,0.000000,267.994995,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,2432.136718,-1242.295410,23.317562,0.000000,0.000000,267.994995,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,2429.131835,-1242.295410,23.271728,0.000000,0.000000,267.994995,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,2426.220214,-1242.295410,23.193458,0.000000,0.000000,267.994995,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,2423.117187,-1242.295410,23.122116,0.000000,0.000000,267.994995,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,2426.019287,-1245.850585,23.452247,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,2435.308593,-1245.850585,23.504354,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,2440.477539,-1219.777954,25.003452,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1597,2420.996826,-1231.837280,26.180000,2.500000,2.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1290,2425.330322,-1231.982299,29.799999,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1290,2416.629394,-1231.982299,29.440000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(996,2417.535156,-1232.716430,24.267309,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(996,2417.535156,-1231.257568,24.333791,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1231,2407.686523,-1219.504882,27.000000,0.000000,0.000000,357.994995,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(978,2441.298583,-1224.579101,28.723602,0.000000,344.000000,88.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(669,2440.090820,-1229.939941,24.000000,0.000000,0.000000,48.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,2409.075195,-1242.295410,22.812500,0.000000,0.000000,267.994995,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,2405.599609,-1242.295410,22.812500,0.000000,0.000000,267.994995,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,2435.778564,-1219.304443,24.518136,0.000000,0.000000,267.994995,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,2439.752685,-1219.304443,24.525924,0.000000,0.000000,267.994995,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,2403.840087,-1223.724487,25.004905,0.000000,350.000000,88.000000,-1,-1,-1,MAX_RADIO_STREAM);

// Banco (Exterior)
	CreateDynamicObjectExULP(1215,-2708.465576,371.200012,4.541537,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(737,-2732.753173,367.477416,3.500000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,-2706.300048,381.059997,4.503403,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,-2710.098876,379.612182,4.520231,0.000000,0.000000,45.399993,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,-2702.505615,379.621673,4.520231,0.000000,0.000000,314.900024,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,-2711.520019,376.070739,4.516693,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,-2710.058349,372.541351,4.528363,0.000000,0.000000,314.895629,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,-2701.079101,376.087890,4.523283,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,-2702.489746,372.566894,4.530507,0.000000,0.000000,45.395507,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,-2706.266113,371.113739,4.530619,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1280,-2706.163085,382.145568,3.768542,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1280,-2712.754150,376.251800,3.777394,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1280,-2723.295898,390.205596,3.768542,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1280,-2699.823486,376.193328,3.777553,0.000000,0.000000,180.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(9915,-2696.389892,377.700012,6.000000,0.000000,0.000000,194.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1223,-2765.600097,372.252685,4.500000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1223,-2702.357421,372.523010,3.750000,0.000000,0.000000,313.994750,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1223,-2710.190917,372.470001,3.740000,0.000000,0.000000,225.989257,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1223,-2702.410156,379.727539,3.740000,0.000000,0.000000,43.994750,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(805,-2706.197509,378.696685,5.119976,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(805,-2709.579833,375.718688,5.119976,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(805,-2705.752685,373.075012,5.119976,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(805,-2702.950683,376.799560,5.119976,0.000000,0.000000,180.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(804,-2709.477539,373.184204,5.151079,0.000000,0.000000,236.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(804,-2709.221923,379.311920,5.151079,0.000000,0.000000,167.997314,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(804,-2702.867919,378.801788,5.151079,0.000000,0.000000,81.991943,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(804,-2703.319580,373.047943,5.151079,0.000000,0.000000,345.990966,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-2704.100097,380.959991,4.510000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(638,-2701.514892,380.563842,4.072031,0.000000,0.000000,225.199951,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(638,-2701.505371,371.669494,4.086863,0.000000,0.000000,135.197753,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(638,-2710.976318,371.542358,4.086889,0.000000,0.000000,45.197753,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1280,-2715.505371,349.565063,3.815417,0.000000,0.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1280,-2715.491210,355.864318,3.815417,0.000000,0.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1359,-2697.134765,398.412597,4.065744,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1280,-2740.736328,352.045715,3.815417,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1280,-2740.830322,384.014709,3.768542,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1280,-2706.183593,369.948242,3.786335,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1280,-2730.948974,390.179626,3.768542,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1359,-2727.046386,361.114746,4.115869,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1280,-2731.011474,360.989440,3.819035,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1280,-2723.420898,361.007812,3.818979,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1359,-2727.089843,390.115234,4.065744,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(737,-2732.753173,383.974548,3.500000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2773,-2650.148437,378.748077,5.678668,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2773,-2650.148437,373.461212,5.673478,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2773,-2766.470458,368.917510,5.851910,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2773,-2766.499755,382.229431,5.851910,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,-2740.473632,362.718292,3.955230,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(997,-2763.376708,379.065460,5.017635,0.000000,20.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(997,-2763.376708,372.146881,4.963504,0.000000,19.995117,359.999511,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2811,-2766.537353,373.874725,5.334682,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2811,-2766.537353,377.232147,5.334682,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(638,-2711.041015,380.541015,4.064221,0.000000,0.000000,135.192260,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(997,-2763.216552,364.575744,4.946481,0.000000,19.989624,315.994506,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(997,-2763.198242,386.535522,4.939306,0.000000,19.995117,46.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1223,-2710.187500,379.719726,3.740000,0.000000,0.000000,135.999755,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1223,-2765.600097,378.839721,4.500000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,-2740.466064,366.868072,3.943069,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,-2713.773681,344.637756,3.965543,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,-2672.131103,388.418640,3.918668,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,-2740.458007,388.401367,3.918668,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,-2740.459960,384.270507,3.918668,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1280,-2740.796386,366.923645,3.792781,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1280,-2740.736328,398.027770,3.768542,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,-2740.458007,370.997070,3.930969,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,-2709.659667,344.636047,3.965543,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,-2702.951416,344.626831,3.965543,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,-2698.828369,344.628845,3.965543,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-2708.519531,380.969726,4.510000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-2704.080078,371.199890,4.520280,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,-2713.743164,406.458007,3.918668,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,-2709.619140,406.458984,3.918668,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,-2703.000732,406.465667,3.918668,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,-2698.890869,406.464263,3.918668,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-2707.459716,344.649139,3.978385,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-2705.251953,406.445312,3.931510,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-2707.402343,406.446289,3.931510,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-2705.196289,344.663085,3.978385,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1280,-2715.491210,394.846679,3.768542,0.000000,0.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1280,-2715.491210,401.953338,3.768542,0.000000,0.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1359,-2715.476562,352.674804,4.112619,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1280,-2696.984130,355.855804,3.815417,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1280,-2696.984130,349.602630,3.815417,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1359,-2686.073974,390.073303,4.065744,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1280,-2696.984130,401.907684,3.768542,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1280,-2696.984130,394.895874,3.768542,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1359,-2715.476562,398.384765,4.065744,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(737,-2681.641357,384.124023,3.500000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(737,-2681.641357,367.078857,3.500000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,-2740.460937,380.120117,3.918668,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,-2672.122558,384.309967,3.918668,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,-2672.117675,380.187316,3.918668,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,-2672.128417,362.738037,3.955162,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,-2672.134033,366.852905,3.943104,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,-2672.137939,370.966339,3.931050,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1280,-2671.824462,366.847595,3.792994,0.000000,0.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1280,-2671.824462,384.226837,3.768542,0.000000,0.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1280,-2691.208496,360.944580,3.819166,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1280,-2681.316650,360.929718,3.819210,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1359,-2697.134765,352.568359,4.112619,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1280,-2691.227050,390.152130,3.768542,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1359,-2686.080078,361.011718,4.116170,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1280,-2681.110107,390.102416,3.768542,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-2759.516845,390.171173,4.005075,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-2759.531250,372.121093,4.022434,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-2759.538330,360.866363,4.017688,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-2759.516601,379.072265,4.010772,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(8674,-2765.719238,428.178466,4.819481,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(8674,-2755.421630,428.180084,4.819481,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(8674,-2745.132812,428.188812,4.819481,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1372,-2770.311767,421.245117,3.508921,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1450,-2770.244384,419.841308,4.108479,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1264,-2770.273681,422.734832,3.980665,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(673,-2770.102294,341.148559,3.481260,0.000000,0.000000,280.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(673,-2770.102294,352.426605,3.487007,0.000000,0.000000,60.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(673,-2770.102294,398.126831,3.476646,0.000000,0.000000,20.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(673,-2770.102294,410.296386,3.470535,0.000000,0.000000,40.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(711,-2769.909179,360.450408,9.300000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(711,-2769.909179,390.828125,9.444503,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(8674,-2769.267578,322.935821,4.825532,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(8674,-2748.722167,322.930877,4.825532,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(8674,-2759.012451,322.927459,4.825532,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(707,-2760.959228,420.981689,2.000000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);

// Parking Ayuntamiento (Exterior)
	CreateDynamicObjectExULP(1233,1760.712890,-1703.806640,13.999656,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8407,1759.801147,-1696.069946,13.926782,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(966,1760.415649,-1694.674438,12.431350,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,1757.726440,-1686.241088,12.496453,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,1757.636230,-1706.022705,12.513443,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237,1758.261718,-1696.066772,12.486967,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1231,1757.457885,-1686.228637,15.234344,0.000000,0.000000,268.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1231,1757.309570,-1705.977539,15.251253,0.000000,0.000000,87.989501,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1290,1761.366088,-1695.887207,15.000000,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(966,1760.415039,-1697.449951,12.431350,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(638,1759.355834,-1686.723266,13.149484,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(638,1759.238647,-1705.460937,13.173467,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(18014,1768.739379,-1704.993652,12.904925,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(18014,1789.099487,-1705.031005,12.904925,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1223,1778.787109,-1705.353515,12.523742,0.000000,0.000000,93.999023,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4100,1798.859985,-1703.989990,14.230421,0.000000,0.000000,49.998779,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1760.383789,-1704.794921,13.013949,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1760.408203,-1687.358642,12.987615,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1290,1797.464843,-1696.687500,18.549365,0.000000,0.000000,272.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4100,1798.917968,-1693.704101,14.222685,0.000000,0.000000,49.998779,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1804.234497,-1722.292358,14.016066,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1798.890014,-1717.130004,14.008999,0.000000,0.000000,92.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(737,1805.132324,-1703.090820,12.600000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(737,1805.172851,-1717.090820,12.600000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1280,1793.017822,-1705.042358,12.928818,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1280,1764.819458,-1705.093139,12.863092,0.000000,0.000000,269.994995,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1232,1790.909790,-1686.569458,15.000000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1232,1770.192626,-1686.642700,15.000000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1779.264648,-1687.367187,12.983853,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);

// Bomeros LSMD (Interior)
	CreateDynamicObjectExULP(1522,1706.790039,1199.846679,33.803314,0.000000,0.000000,90.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1522,1706.769531,1199.899414,33.803314,0.000000,0.000000,270.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(10378,1698.229492,1215.922851,33.889060,0.000000,0.000000,357.989501,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(638,1706.344238,1202.809570,34.615158,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(638,1706.227905,1196.878295,34.617343,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2276,1703.802490,1204.499511,36.647106,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1893,1702.920043,1202.080444,38.546184,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1893,1702.902587,1197.492675,38.546184,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1731,1706.606323,1197.855346,35.938297,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1731,1706.603515,1201.826416,35.938297,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1710,1704.751953,1195.136962,33.920310,0.000000,0.000000,180.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1712,1700.135498,1196.299194,33.920310,0.000000,0.000000,88.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1744,1701.785156,1205.169921,36.108818,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1819,1702.549316,1196.883544,33.920310,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2208,1699.030395,1205.895141,33.920310,0.000000,0.000000,270.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2204,1701.106201,1204.933837,33.907981,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2269,1704.976562,1195.232421,36.250583,0.000000,0.000000,180.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2266,1705.551269,1195.196655,37.083889,0.000000,0.000000,179.994506,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2265,1704.263793,1195.205078,37.247604,0.000000,0.000000,179.994506,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2259,1700.106201,1197.265136,36.117702,0.000000,0.000000,90.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2258,1702.276123,1194.703979,37.165534,0.000000,0.000000,179.994506,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2811,1700.265502,1195.467529,33.920310,0.000000,0.000000,306.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2245,1703.069946,1197.391479,34.744739,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2208,1699.029296,1201.000000,33.919898,0.000000,0.000000,270.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1498,1704.406250,1204.966796,33.908691,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2894,1698.998168,1200.272338,34.785190,0.000000,0.000000,78.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2283,1695.781982,1199.771972,36.413539,0.000000,0.000000,180.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2108,1692.315307,1199.908081,33.920310,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1713,1696.255249,1204.444458,33.910072,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1658,1703.515747,1199.876708,38.136383,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1657,1703.525634,1199.879760,38.119647,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2066,1695.086059,1204.453613,33.910171,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2604,1694.464111,1200.192504,34.717185,0.000000,0.000000,178.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1806,1693.398681,1200.925903,33.920310,0.000000,0.000000,220.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1714,1695.346069,1201.113891,33.920738,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2009,1693.648437,1203.463623,33.913471,0.000000,0.000000,178.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1811,1694.704345,1202.702026,34.542076,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1811,1692.581909,1203.393310,34.538429,0.000000,0.000000,112.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1498,1696.765502,1199.656127,33.908691,0.000000,0.000000,357.994995,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1752,1702.718017,1205.126586,36.449317,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1788,1701.803710,1204.871093,36.517314,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1808,1699.930419,1198.766601,33.920310,0.000000,0.000000,88.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2813,1699.083007,1203.448364,34.785602,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2818,1706.343750,1199.397460,33.920310,0.000000,0.000000,87.994995,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2286,1692.059570,1202.400390,36.452705,0.000000,0.000000,87.994995,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2270,1692.515136,1203.690429,36.095588,0.000000,0.000000,87.994995,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2257,1696.947753,1204.957275,36.796115,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2811,1706.330322,1204.516845,33.914768,0.000000,0.000000,305.996704,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11008,1698.588867,1177.625000,39.995590,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11008,1723.761230,1195.383300,39.995590,0.000000,0.000000,90.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11008,1697.484375,1222.045898,39.995590,0.000000,0.000000,179.994506,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11008,1674.971679,1201.323242,39.995590,0.000000,0.000000,270.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11008,1688.342285,1182.605957,39.995590,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11008,1682.557617,1188.837890,39.995590,0.000000,0.000000,270.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11008,1950.202148,1209.108276,21.951129,0.000000,0.000000,90.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(7984,1922.718750,1185.253906,7.800000,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(9697,1929.009765,1197.839843,17.369064,0.000000,0.000000,270.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11008,1950.202148,1187.198974,21.951129,0.000000,0.000000,90.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11008,1878.538085,1209.882812,21.951129,0.000000,0.000000,270.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11008,1922.859375,1176.125000,21.951129,0.000000,0.000000,0.208740,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11008,1922.430664,1237.017578,21.951129,0.000000,0.000000,179.994506,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11008,1900.550048,1237.010009,21.951129,0.000000,0.000000,179.994506,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11008,1928.820556,1181.635620,21.951129,0.000000,0.000000,90.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11008,1885.049804,1178.230957,21.951129,0.000000,0.000000,270.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8843,1908.589843,1183.198120,17.379999,0.000000,0.000000,179.994506,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8843,1905.446777,1183.442382,17.379999,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1498,1913.833740,1193.108398,17.354686,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(7984,1908.577148,1185.138671,33.500000,0.000000,179.994506,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(9697,1899.334350,1241.610595,17.369064,0.000000,0.000000,90.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1613,1912.711425,1193.138793,23.285951,0.000000,0.000000,270.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1615,1912.732299,1193.139892,18.761417,0.000000,0.000000,270.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2614,1914.553222,1193.189941,21.148357,0.000000,0.000000,180.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11008,1902.890747,1161.214965,23.999900,0.000000,0.000000,270.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11008,1890.596679,1172.147460,21.951129,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11008,1878.538940,1187.979980,21.951129,0.000000,0.000000,270.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(10378,1875.321533,1400.842651,15.970000,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11008,1856.081909,1421.090942,22.000000,0.000000,0.000000,179.994506,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11008,1878.595825,1412.233642,22.000000,0.000000,0.000000,90.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11008,1850.304077,1373.341674,22.000000,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11008,1838.768554,1397.794067,22.000000,0.000000,0.000000,270.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11008,1873.064941,1418.179687,22.000000,0.000000,0.000000,180.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11008,1881.861328,1397.193359,22.000000,0.000000,0.000000,90.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11008,1866.225341,1370.012573,22.000000,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1498,1862.446777,1386.994506,16.001607,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11008,1844.687255,1379.375000,22.000000,0.000000,0.000000,270.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11008,1691.839965,1199.945434,55.599998,270.000000,180.000000,270.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11008,1862.393676,1395.814208,37.299999,270.000000,0.000000,270.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11008,1705.592773,1199.832031,55.599998,270.000000,0.000000,270.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14827,1858.826171,1393.381103,19.898351,0.000000,0.000000,270.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2627,1857.407592,1399.199218,15.966524,0.000000,0.000000,270.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2628,1857.679565,1395.393920,15.962624,0.000000,0.000000,90.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2630,1857.218750,1392.232788,15.973677,0.000000,0.000000,90.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2690,1857.894531,1403.097167,16.321601,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2690,1858.351440,1403.116577,16.321601,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2690,1860.021606,1403.077758,16.313791,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2690,1858.880371,1403.089355,16.321601,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2690,1859.484375,1403.068847,16.321601,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1808,1856.432128,1401.193969,15.961156,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2628,1863.389160,1399.717651,15.962624,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1943,1864.381835,1397.098999,16.200855,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1942,1864.400146,1397.314453,16.306205,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1944,1864.427856,1396.923583,16.137514,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1945,1864.415649,1396.703613,16.087289,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2629,1863.369750,1395.443115,16.072479,0.000000,0.000000,270.000000,-1,18,-1,MAX_RADIO_STREAM);

// Camino a la Petrolera (Exterior)
	CreateDynamicObjectExULP(16223,-3122.959960,1524.693359,5.599999,0.000000,359.994506,359.989013,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(7938,-2777.554687,1353.690429,3.000000,0.977783,0.977783,351.990966,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11421,-2779.531250,1367.614257,-2.400000,0.000000,0.000000,313.994750,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13370,-2790.524414,1381.321289,-33.000000,0.000000,353.995971,279.992065,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(672,-2793.848632,1400.317382,6.100227,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(683,-2813.316406,1360.925781,3.975959,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(685,-2826.301513,1366.646972,3.899093,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(691,-2795.540039,1357.484375,2.917685,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(703,-2818.317138,1440.406860,5.594955,0.000000,0.000000,12.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(705,-2926.077880,1460.521606,3.639690,0.000000,0.000000,29.992675,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(707,-2825.894287,1348.135131,4.083629,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(738,-2754.498291,1331.373046,5.858286,0.000000,0.000000,277.989868,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-2757.874023,1343.722656,9.929352,0.000000,0.000000,15.994628,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1231,-2770.017578,1320.041992,9.283056,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1231,-2750.992187,1320.744140,9.034105,0.000000,0.000000,181.999511,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-2776.284179,1354.672607,9.929352,0.000000,0.000000,213.994628,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-3040.259521,1475.596435,9.718688,0.000000,0.000000,241.984863,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1231,-2797.721191,1390.785522,9.976423,0.000000,0.000000,61.995849,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-2781.469726,1377.372070,9.929352,0.000000,0.000000,51.976318,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(18239,-2809.405273,1366.559570,5.900000,0.000000,0.000000,243.984375,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5297,-2850.320312,1403.299804,11.670000,0.000000,0.000000,155.994873,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13370,-2821.683593,1403.263671,-33.000000,0.000000,353.995971,63.995361,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13370,-2819.125976,1404.732421,-31.000000,0.000000,353.995971,263.995971,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13370,-2824.052734,1398.365234,-31.000000,0.000000,353.995971,159.988403,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13370,-2820.383789,1416.064453,-31.000000,0.000000,353.995971,249.993896,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5297,-2950.699218,1447.998046,11.670000,0.000000,0.000000,335.994873,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13370,-2820.383789,1416.064453,-31.000000,0.000000,353.995971,249.993896,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13370,-2922.045898,1461.777343,-31.000000,0.000000,353.995971,299.992675,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13370,-2922.024414,1466.633789,-31.000000,0.000000,353.995971,277.987060,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8132,-2776.007812,1318.244140,9.000000,0.000000,0.000000,279.992065,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(16096,-2765.438476,1307.186523,4.500000,0.000000,11.997070,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(16096,-2760.681152,1307.188964,4.500000,0.000000,11.997070,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(16096,-2756.172851,1307.189941,4.500000,0.000000,11.997070,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(16096,-2765.779785,1311.330078,4.899000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(16096,-2760.932128,1311.321166,4.899000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(16096,-2756.500000,1311.322753,4.899000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(16096,-2765.699951,1316.105834,4.899000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(16096,-2760.822265,1316.111328,4.899000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(16096,-2756.489990,1316.059082,4.899000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(16096,-2756.179931,1320.189941,4.500000,0.000000,11.997070,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(16096,-2760.877929,1320.199951,4.500000,0.000000,11.991577,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(16096,-2765.389892,1320.198974,4.500000,0.000000,11.991577,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,-2753.777832,1316.388549,7.372825,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,-2767.802001,1316.161376,7.372825,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,-2753.774414,1310.978515,7.372825,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,-2767.781005,1311.268310,7.372825,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(621,-2771.038818,1308.822998,-2.000000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(621,-2750.543212,1309.125244,-2.000000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(647,-2769.619873,1319.829711,8.131070,0.000000,0.000000,222.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(647,-2752.221435,1320.739990,8.131070,0.000000,0.000000,261.996093,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,-2767.875488,1306.046752,6.782054,0.000000,350.000000,90.299987,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-2767.776855,1318.633056,7.269316,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-2767.804443,1308.693603,7.257332,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,-2753.796386,1306.022949,6.776432,0.000000,349.996948,90.296630,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-2753.832763,1308.409545,7.257332,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,-2767.789794,1321.213500,6.808641,0.000000,349.996948,270.296630,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-2767.757812,1313.727539,7.393011,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-2753.882568,1313.658691,7.393011,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,-2753.743896,1321.330322,6.781887,0.000000,349.991455,270.291137,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-2753.846435,1318.854003,7.207159,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(707,-2767.086669,1403.139892,2.675666,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1280,-2810.339111,1373.022705,6.199999,0.000000,0.000000,245.989379,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-2767.046386,1328.273193,9.929352,0.000000,0.000000,185.994628,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(738,-2772.715820,1344.343750,6.400000,0.000000,0.000000,293.983154,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(738,-2771.797119,1369.841674,6.530000,0.000000,0.000000,315.983154,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1280,-2758.237304,1350.857910,6.592475,0.000000,0.000000,24.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1280,-2770.578125,1332.867187,6.592475,0.000000,0.000000,187.999633,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1280,-2785.012695,1360.401855,6.797901,0.000000,0.000000,223.998046,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1359,-2759.097656,1352.874023,6.925011,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(685,-2778.667480,1388.478027,1.331325,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(691,-2786.496337,1410.511596,2.917685,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(703,-2842.035156,1373.521484,6.620314,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(707,-2847.849365,1443.103637,4.083629,0.000000,0.000000,54.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(705,-2805.903320,1410.818359,1.754142,0.000000,0.000000,13.996582,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(618,-2836.529052,1359.846069,5.698898,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(655,-2840.789306,1384.196533,6.916313,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-2897.569335,1430.744873,20.219493,0.000000,0.000000,71.984863,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(660,-2832.628662,1369.745971,6.923004,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(669,-2857.055175,1364.151611,2.185409,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(683,-2837.709960,1422.967773,7.081771,0.000000,0.000000,347.997436,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(672,-2862.783691,1430.593383,3.961489,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(705,-2866.722656,1387.452148,5.809688,0.000000,0.000000,13.996582,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-2827.424804,1386.537109,10.302289,0.000000,0.000000,241.984863,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-2841.521484,1405.714843,12.374244,0.000000,0.000000,71.982421,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-2870.558593,1406.335937,17.518684,0.000000,0.000000,241.984863,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-2959.588134,1458.059936,11.569137,0.000000,0.000000,71.982421,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(689,-2959.872070,1473.879882,2.000000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(707,-2935.729003,1417.155761,3.336799,0.000000,0.000000,255.992431,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13370,-2923.084716,1459.305175,-31.000000,0.000000,353.995971,259.987060,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13370,-2940.197265,1449.195312,-32.200000,0.000000,353.995971,251.982421,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13370,-2977.495117,1489.877929,-32.889999,0.000000,353.995971,287.979125,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-2931.329101,1432.882812,17.979503,0.000000,0.000000,241.984863,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(691,-3003.473144,1454.026000,3.813083,0.000000,0.000000,8.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(703,-2987.463867,1481.266967,5.829032,0.000000,0.000000,352.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(705,-2988.544921,1443.340454,4.605651,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(706,-2960.609375,1436.113647,3.247074,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(708,-3007.833496,1503.087768,3.065021,0.000000,0.000000,10.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(722,-2973.833984,1494.663085,0.000000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1290,-2819.193359,1370.375000,12.500000,0.000000,0.000000,67.999877,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1290,-3049.418457,1493.214233,12.063194,0.000000,0.000000,67.999877,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(737,-3033.980957,1485.784790,6.199999,0.000000,0.000000,336.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(707,-3462.628906,1696.464355,3.923572,0.000000,0.000000,265.992431,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(737,-3064.279296,1499.900756,6.199999,0.000000,0.000000,335.994873,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1290,-3079.883056,1507.468017,12.066202,0.000000,0.000000,67.999877,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(616,-3023.947998,1501.173706,-1.256093,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(669,-2990.341796,1507.628906,6.690734,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(664,-2979.751464,1427.276245,2.067104,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(737,-3094.157470,1513.957885,6.199999,0.000000,0.000000,335.994873,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1290,-3252.500000,1583.449096,13.121320,0.000000,0.000000,67.999877,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(737,-3125.948486,1528.292846,6.199999,0.000000,0.000000,335.994873,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1290,-3110.046875,1520.908203,12.066202,0.000000,0.000000,67.999877,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(737,-3155.327392,1540.788330,6.199999,0.000000,0.000000,335.994873,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1290,-3140.532226,1534.435546,12.052490,0.000000,0.000000,67.999877,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(16223,-3358.105468,1631.300048,5.599999,0.000000,359.994506,179.989013,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(737,-3183.393066,1552.849975,6.199999,0.000000,0.000000,335.994873,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1290,-3170.243164,1547.377929,12.032045,0.000000,0.000000,67.999877,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(737,-3211.035888,1565.854980,6.699999,0.000000,0.000000,335.994873,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1290,-3195.760742,1558.837890,12.015437,0.000000,0.000000,67.999877,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-2992.125000,1459.600585,9.988969,0.000000,0.000000,241.984863,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-3030.228515,1497.847412,9.795351,0.000000,0.000000,63.984863,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-3263.287109,1600.822387,10.310533,0.000000,0.000000,63.984375,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-3302.621337,1592.057739,9.717621,0.000000,0.000000,241.984863,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-3058.615234,1510.730468,9.809337,0.000000,0.000000,63.984375,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-3070.198242,1489.680664,9.714690,0.000000,0.000000,241.984863,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-3091.898437,1525.826171,9.828240,0.000000,0.000000,63.984375,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-3101.635742,1504.067382,9.713541,0.000000,0.000000,241.984863,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-3120.571289,1538.564453,9.807115,0.000000,0.000000,63.984375,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-3130.205078,1516.804687,9.711089,0.000000,0.000000,241.984863,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-3150.149414,1551.338867,9.766438,0.000000,0.000000,63.984375,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-3158.899414,1529.280273,9.722112,0.000000,0.000000,241.984863,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-3187.199218,1541.589843,9.734760,0.000000,0.000000,241.984863,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-3177.486328,1563.527343,9.724070,0.000000,0.000000,63.984375,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(737,-3239.062988,1577.867675,7.599999,0.000000,0.000000,335.994873,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1290,-3223.962890,1571.206054,12.974000,0.000000,0.000000,67.999877,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(737,-3268.845703,1590.315063,6.599999,0.000000,0.000000,335.994873,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-3205.299804,1575.713867,10.152576,0.000000,0.000000,63.984375,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-3215.212890,1554.015625,10.228302,0.000000,0.000000,241.984863,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-3234.744140,1588.260742,11.311995,0.000000,0.000000,63.984375,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-3243.781250,1566.497070,11.232070,0.000000,0.000000,241.984863,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1290,-3341.681396,1622.234375,12.050943,0.000000,0.000000,67.999877,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(737,-3296.923095,1602.881713,6.099999,0.000000,0.000000,335.994873,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-3320.703369,1626.085327,9.719381,0.000000,0.000000,63.984375,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-3274.124023,1579.658203,10.201748,0.000000,0.000000,241.984863,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1290,-3283.678710,1596.778320,12.017277,0.000000,0.000000,67.999877,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(737,-3325.926757,1615.478515,6.099999,0.000000,0.000000,335.994873,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-3292.861328,1613.930664,9.729186,0.000000,0.000000,63.984375,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-3427.900146,1647.820678,9.810681,0.000000,0.000000,241.984863,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1290,-3311.000000,1608.763671,12.028314,0.000000,0.000000,67.999877,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(737,-3358.680175,1629.321899,6.099999,0.000000,0.000000,335.994873,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-3417.512939,1669.291625,9.721313,0.000000,0.000000,63.984375,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-3329.283203,1603.880859,9.763619,0.000000,0.000000,241.984863,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1290,-3438.250976,1666.238037,12.072896,0.000000,0.000000,67.999877,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(737,-3390.581787,1644.008544,6.099999,0.000000,0.000000,335.994873,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1290,-3374.433593,1636.779296,12.062638,0.000000,0.000000,67.999877,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(737,-3422.092041,1658.447387,6.099999,0.000000,0.000000,335.994873,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1290,-3406.188476,1651.111328,12.065643,0.000000,0.000000,67.999877,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(737,-3453.369140,1673.605957,6.400000,0.000000,0.000000,335.994873,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1290,-3471.053710,1681.986328,12.250619,0.000000,0.000000,67.999877,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1290,-3438.250976,1666.237304,12.072896,0.000000,0.000000,67.999877,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-3354.987304,1641.028320,9.717685,0.000000,0.000000,63.984375,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-3365.049804,1619.230468,9.813821,0.000000,0.000000,241.984863,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-3384.744140,1654.384765,9.714513,0.000000,0.000000,63.984375,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-3395.751953,1633.101562,9.831762,0.000000,0.000000,241.984863,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-3459.500976,1661.987304,9.808381,0.000000,0.000000,241.984863,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-3450.889160,1685.472167,9.729305,0.000000,0.000000,63.984375,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13370,-3499.795898,1678.989257,-32.099998,0.000000,355.995483,99.970092,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(16037,-3612.396484,1803.217773,4.889999,0.000000,0.000000,77.991943,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(707,-3021.546875,1456.734375,0.037982,0.000000,0.000000,265.989990,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13370,-3494.885742,1676.752929,-39.000000,0.000000,353.995971,105.974121,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(17546,-2988.483398,1463.760742,-2.009900,0.000000,0.000000,349.996948,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(17546,-2989.184570,1464.091796,-2.009900,0.000000,0.000000,313.994750,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13370,-2954.879882,1453.580566,-32.700000,0.000000,353.995971,285.979614,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13370,-2959.625244,1453.784179,-32.700000,0.000000,353.995971,287.979614,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13370,-2939.960693,1450.999633,-32.200000,0.000000,353.995971,251.982421,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13370,-2955.515625,1483.679199,-32.900001,0.000000,353.995971,293.979614,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13370,-2974.294921,1465.004394,-32.700000,0.000000,353.995971,41.979614,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13370,-2981.076904,1470.417236,-32.700000,0.000000,353.995971,51.978759,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13370,-2991.435546,1469.454467,-32.700000,0.000000,353.995971,57.976318,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4100,-3003.591552,1457.804077,7.563706,0.000000,0.000000,130.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4100,-2993.723632,1481.332031,7.563706,0.000000,0.000000,95.993041,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237,-2987.494140,1474.962524,6.091323,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237,-2988.411132,1475.710937,6.091358,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237,-2986.205078,1474.365112,6.086730,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237,-2994.989746,1456.996215,5.862036,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237,-2996.022460,1456.901367,5.862036,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237,-2993.837890,1456.555664,5.862036,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(7938,-3614.199218,1705.909179,-1.460000,0.977783,0.977783,161.987915,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237,-3633.668945,1745.655273,0.952073,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237,-3633.038574,1745.520751,0.952089,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237,-3617.033935,1742.146362,1.201814,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237,-3616.435546,1742.022827,1.220395,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(7938,-3554.456787,1670.989990,-1.460000,0.977783,359.300048,233.987915,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(7938,-3493.861328,1679.212890,-1.460000,0.972290,358.994750,54.100006,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1231,-2805.450927,1373.344848,9.698026,0.000000,0.000000,241.995849,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1223,-3608.337402,1863.839965,1.599327,0.000000,0.000000,78.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1223,-3591.597656,1860.305664,1.599327,0.000000,0.000000,77.997436,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237,-3609.807128,1864.136718,1.177816,0.000000,0.000000,8.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237,-3590.871093,1860.329101,1.167787,0.000000,0.000000,7.998046,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237,-3609.221679,1863.991210,1.160264,0.000000,0.000000,7.998046,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1223,-3004.740478,1474.831176,6.247752,0.000000,0.000000,6.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,-3012.087890,1475.877441,6.214908,0.000000,0.000000,24.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,-3012.126708,1475.750976,6.214908,0.000000,0.000000,283.999145,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,-3008.836425,1477.188720,6.227118,0.000000,0.000000,335.994628,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,-3011.021728,1472.485107,6.211530,0.000000,0.000000,335.989379,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-3011.215576,1472.495849,6.774641,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-3009.025390,1477.219726,6.790662,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,-3005.816406,1475.910156,6.241280,0.000000,0.000000,285.996093,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,-3008.058593,1471.110351,6.238748,0.000000,0.000000,23.999633,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(716,-3008.796875,1473.946289,6.000000,0.000000,0.000000,336.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(803,-3008.762207,1473.886474,7.281342,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(638,-3005.327392,1470.930297,6.559070,0.000000,0.000000,150.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(638,-3004.036132,1473.913208,6.559070,0.000000,0.000000,163.994873,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237,-3004.648681,1472.415527,5.862036,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1223,-3006.324951,1471.158081,6.246541,0.000000,0.000000,305.994873,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(669,-3468.666503,1659.803955,3.283374,0.000000,0.000000,10.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13370,-3485.716552,1702.876831,-34.900001,0.000000,353.995971,329.970581,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(738,-3524.109619,1666.182128,1.632319,0.000000,0.000000,305.983154,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(738,-3546.658935,1672.639648,1.832319,0.000000,0.000000,281.980224,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(738,-3564.262695,1656.881347,2.319999,0.000000,0.000000,265.975097,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(738,-3579.912353,1674.795166,1.899999,0.000000,0.000000,247.973510,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(738,-3609.274902,1675.721557,2.000000,0.000000,0.000000,233.972412,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(738,-3610.335693,1698.521850,2.000000,0.000000,0.000000,211.970336,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(738,-3630.818847,1709.906005,1.899999,0.000000,0.000000,193.970214,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(738,-3618.797363,1732.416259,1.700000,0.000000,0.000000,177.969116,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-3521.503662,1683.612670,5.428607,0.000000,0.000000,121.984863,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-3544.167968,1659.767456,5.892557,0.000000,0.000000,281.981201,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-3564.013671,1669.679565,5.892557,0.000000,0.000000,85.980590,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-3585.208251,1662.683593,5.887118,0.000000,0.000000,245.979003,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-3601.521484,1686.015258,5.688399,0.000000,0.000000,51.977416,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-3621.016113,1691.946289,5.688399,0.000000,0.000000,209.976318,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-3617.580566,1712.507934,5.688399,0.000000,0.000000,9.976196,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-3632.119628,1733.805175,5.688399,0.000000,0.000000,173.975585,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-3616.276123,1754.681396,1.735573,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-3611.559326,1776.936767,1.735573,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-3605.217529,1806.511840,1.735573,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-3598.952392,1836.050292,1.735573,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(792,-3596.411865,1848.283691,1.371249,0.000000,0.000000,348.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(792,-3602.123779,1821.475463,1.371249,0.000000,0.000000,347.997436,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(792,-3608.285400,1792.735473,1.371249,0.000000,0.000000,347.997436,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(792,-3614.073974,1765.754638,1.371249,0.000000,0.000000,347.997436,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13370,-3483.474609,1722.191894,-34.900001,0.000000,353.995971,351.968872,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(789,-3483.663085,1703.900878,16.915334,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(790,-3489.170898,1667.427734,0.000000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(733,-3514.268310,1700.488159,0.000000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(726,-3503.598388,1666.557617,0.544166,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(973,-3501.464599,1694.871704,4.250000,0.000000,3.000000,193.899963,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(973,-3490.720214,1696.615844,4.900000,0.000000,4.000000,186.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(973,-3480.071289,1697.537231,5.971575,0.000000,5.998535,181.998535,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(973,-3495.944580,1675.181030,5.099999,0.000000,334.999267,353.897705,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(973,-3486.619384,1672.417358,7.500000,0.000000,0.000000,335.998535,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1290,-3633.426757,1744.531616,7.008986,0.000000,0.000000,348.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1290,-3616.837402,1741.391723,7.256399,0.000000,0.000000,350.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237,-3491.205322,1674.614013,6.117041,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237,-3485.375976,1697.186523,4.432674,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237,-3496.091308,1695.944458,3.339999,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1232,-3501.425781,1675.297485,5.162317,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1232,-3507.200195,1693.274414,5.598657,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1232,-3481.157226,1670.140869,9.169094,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1232,-3472.901367,1697.352416,8.509101,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237,-3474.195800,1697.550659,5.699516,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237,-3471.945068,1697.085815,6.013336,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4100,-2819.910888,1363.972290,7.800000,0.000000,0.000000,115.993041,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4100,-2822.852294,1373.253051,7.800000,0.000000,0.000000,23.988159,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1290,-3019.028320,1479.055664,12.205184,0.000000,0.000000,67.999877,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1257,-2805.192626,1391.838500,7.400919,0.000000,0.000000,66.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13370,-3492.916992,1673.341796,-33.000000,0.000000,355.995483,77.970092,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13370,-2806.931640,1342.127685,-31.000000,0.000000,353.995971,199.992065,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13370,-2812.866699,1395.638671,-33.000000,0.000000,353.995971,63.995361,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11421,-3601.773437,1678.755126,-6.340000,0.000000,0.000000,141.994750,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3286,-3479.257324,1658.727172,10.100000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13367,-2999.983886,1492.204833,17.000000,0.000000,0.000000,338.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3175,-2982.977294,1488.760620,4.318080,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3253,-2969.829345,1495.542358,6.071872,0.000000,0.000000,350.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1280,-2969.637695,1492.099609,6.473227,0.000000,0.000000,80.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1223,-2972.454101,1491.127685,5.681963,0.000000,0.000000,260.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(683,-2765.013427,1382.691772,0.303781,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1359,-2759.097656,1352.874023,6.925011,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1359,-2802.316650,1390.679199,6.821264,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(955,-2806.748046,1371.302734,6.349999,0.000000,0.000000,155.994873,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-2808.821777,1395.030395,7.662942,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13370,-2804.766845,1402.815063,-31.000000,0.000000,353.995971,243.995971,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-2816.360351,1377.894531,7.661154,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13370,-2797.927978,1376.738159,-33.000000,0.000000,353.995971,95.995361,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13758,-2971.327636,1508.755981,21.985040,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1344,-2815.074707,1371.005615,7.145391,0.000000,352.000000,243.599975,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(652,-2800.403076,1391.875122,6.305428,0.000000,0.000000,72.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(652,-2807.000244,1374.099975,6.305428,0.000000,0.000000,71.998901,-1,-1,-1,MAX_RADIO_STREAM);

// Interior Camión Swat
	CreateDynamicObjectExULP(14576,1743.774658,-2658.162109,9.300000,0.000000,179.994506,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14576,1768.256835,-2671.865234,9.300000,0.000000,180.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2678,1758.400512,-2668.923095,13.299999,90.000000,90.000000,90.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2678,1757.658691,-2668.923095,13.339999,0.000000,90.000000,90.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2678,1757.658203,-2666.486328,13.339999,0.000000,90.000000,90.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2678,1758.400390,-2666.487060,13.299999,90.000000,90.000000,90.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2678,1754.400390,-2668.922851,13.299999,90.000000,90.000000,90.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2678,1754.400390,-2668.649902,13.339999,0.000000,90.000000,270.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2678,1754.400390,-2666.211914,13.339999,0.000000,90.000000,270.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2678,1754.400390,-2666.486328,13.299999,90.000000,90.000000,90.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(18018,1765.491210,-2676.360351,10.199999,0.000000,0.000000,90.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(18018,1764.840087,-2658.525390,18.399999,0.000000,180.000000,90.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2678,1758.979858,-2669.978027,13.339999,0.000000,90.000000,180.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2678,1753.351562,-2669.977539,13.339999,0.000000,90.000000,179.994506,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2678,1753.078979,-2665.159912,13.339999,0.000000,90.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2678,1758.708984,-2665.159912,13.339999,0.000000,90.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1965,1755.984985,-2670.800048,14.135360,0.000000,0.000000,90.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1967,1756.083984,-2670.800048,14.135583,0.000000,0.000000,90.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2044,1756.515625,-2664.460693,15.018212,90.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2035,1755.433715,-2664.461181,14.219201,90.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2036,1756.596801,-2664.461181,14.068314,90.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2034,1756.647338,-2664.461181,14.361448,90.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1672,1756.916992,-2664.460693,15.036220,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2358,1754.882446,-2664.823242,12.754034,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2358,1757.159912,-2664.812011,12.754034,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2358,1755.639648,-2664.830078,12.754034,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2358,1756.396484,-2664.810546,12.754034,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2358,1755.182250,-2664.847167,12.998347,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2358,1756.729736,-2664.867919,12.998347,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2358,1755.972656,-2664.855468,12.998347,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2678,1756.194580,-2664.424316,14.590000,0.000000,90.000000,179.994506,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2678,1756.194335,-2664.423828,15.344430,0.000000,90.000000,179.994506,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2036,1755.478515,-2664.459960,15.036925,90.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2035,1756.515625,-2664.460693,14.707493,90.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2034,1755.305908,-2664.460693,14.774806,90.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2044,1755.827148,-2664.461181,14.585409,90.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1672,1757.066894,-2664.462402,15.036220,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1672,1757.216308,-2664.464355,15.036220,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);

// LSMD Bomberos (Exterior)
	CreateDynamicObjectExULP(6965,1997.540039,-1450.524414,15.072598,0.000000,0.000000,3.988037,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(17951,2012.409179,-1408.034179,17.768096,0.000000,0.000000,89.494628,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1223,2014.399414,-1407.699218,15.192187,0.000000,0.000000,265.995483,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1223,2010.579101,-1407.699218,15.192187,0.000000,0.000000,265.995483,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1231,2005.964843,-1420.402954,18.542579,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1594,2041.729492,-1410.954101,16.641054,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1594,2041.727539,-1416.174804,16.647766,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8843,2012.385742,-1415.290039,16.013854,0.000000,0.000000,87.994995,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(736,2018.860351,-1422.043945,26.074689,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(738,2008.756835,-1453.720703,12.654687,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(738,1994.341796,-1439.658203,12.822332,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,2005.588378,-1408.260986,15.992187,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,2016.000000,-1408.260742,15.992187,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,2038.631835,-1429.669921,16.722255,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,2038.631835,-1425.549804,16.722255,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,1994.140625,-1453.390625,12.554687,0.000000,0.000000,39.995727,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4100,2004.404296,-1396.602539,21.000000,0.000000,0.000000,317.999267,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8657,2000.404296,-1396.368164,18.257389,0.000000,0.000000,267.994995,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1231,1993.947265,-1453.597656,15.285079,0.000000,0.000000,125.996704,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,2017.245117,-1456.737304,16.429107,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,2009.727172,-1434.051147,13.105454,0.000000,0.000000,223.200012,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,2015.750976,-1428.390625,13.094042,0.000000,0.000000,223.198242,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,2012.742187,-1431.214843,13.099739,0.000000,0.000000,223.198242,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1223,2012.917968,-1431.295898,12.468165,0.000000,0.000000,313.994750,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1232,2023.304687,-1420.824218,15.331954,0.000000,0.000000,329.996337,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1232,2027.791015,-1425.162475,15.331954,0.000000,0.000000,1.996337,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,2007.338867,-1437.373046,13.111641,0.000000,0.000000,245.192871,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,2021.707397,-1450.008300,15.496253,0.000000,0.000000,13.996582,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1280,2010.740234,-1433.615234,12.953914,0.000000,0.000000,133.994750,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,2019.972656,-1432.663085,13.110005,0.000000,0.000000,222.994995,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,2016.956054,-1435.467773,13.117766,0.000000,0.000000,222.989501,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,2013.928710,-1438.281250,13.125413,0.000000,0.000000,222.989501,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,2010.518554,-1440.602539,13.110621,0.000000,0.000000,204.993896,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,2008.499023,-1441.432617,13.127640,0.000000,0.000000,9.997558,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1280,2014.275390,-1437.500000,12.956043,0.000000,0.000000,313.796997,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1280,2018.787231,-1433.207763,12.956043,0.000000,0.000000,313.796997,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1223,2016.756835,-1435.445312,12.488910,0.000000,0.000000,131.989746,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(736,2026.476440,-1429.698730,26.074689,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1280,2015.231445,-1429.330078,12.945341,0.000000,0.000000,133.989257,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(638,2037.170043,-1401.672241,16.997674,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(638,2022.184570,-1401.671875,16.877674,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1364,2029.646484,-1401.989257,17.036300,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,2038.627929,-1421.423828,16.722255,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,2040.700317,-1419.371459,16.722255,0.000000,0.000000,180.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,2044.799804,-1419.370117,16.725000,0.000000,0.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(718,2041.272460,-1428.230468,15.899999,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(718,2041.253906,-1422.980468,15.899999,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1231,2028.049072,-1441.907958,18.533487,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(803,2041.180664,-1421.814453,17.083368,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(803,2041.544921,-1426.061523,17.083368,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(803,2041.938476,-1430.027832,17.083368,0.000000,0.000000,128.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(805,2041.319335,-1424.452148,17.083368,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1231,2038.208007,-1425.677734,18.722579,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1280,2038.143554,-1421.782226,16.393543,0.000000,0.000000,359.796752,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1280,2038.271484,-1429.300781,16.393543,0.000000,0.000000,1.796264,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,2038.941406,-1414.801757,16.728385,0.000000,0.000000,9.997558,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,2022.877929,-1407.391601,16.748615,0.000000,0.000000,9.997558,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,2029.471679,-1407.322265,16.750373,0.000000,0.000000,9.997558,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,2035.320312,-1409.551757,16.728385,0.000000,0.000000,9.997558,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1223,2029.633789,-1401.053710,15.192187,0.000000,0.000000,267.994995,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8657,2048.762695,-1435.160156,18.257389,0.000000,0.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4100,2048.600585,-1444.260742,21.000000,0.000000,0.000000,229.993286,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1344,2037.911865,-1435.807983,16.976541,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1359,2016.777343,-1428.101562,13.239831,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1359,2020.258789,-1431.760742,13.253244,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1264,2038.079223,-1434.177246,16.571680,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1450,2037.739257,-1437.462036,16.838436,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1209,2038.179443,-1432.624023,16.055076,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1290,2044.937500,-1448.694335,22.891036,0.000000,0.000000,87.994995,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1290,2000.384765,-1401.717773,22.858119,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1613,2007.206054,-1408.070556,18.629705,0.000000,0.000000,88.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2690,2016.395996,-1408.185913,17.927040,0.000000,0.000000,2.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3522,2037.859008,-1441.930297,16.490509,0.000000,0.000000,180.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2614,2012.521606,-1408.117797,20.895158,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2612,2020.869262,-1404.552368,18.241794,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1615,2016.180908,-1408.065917,20.436931,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(679,2037.899291,-1440.004272,16.580425,0.000000,0.000000,192.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(679,2037.906372,-1443.788085,16.580425,0.000000,0.000000,183.997070,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(682,2037.825927,-1442.052978,16.580425,0.000000,0.000000,218.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(802,2037.854248,-1441.133789,16.973318,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(802,2037.819824,-1443.006835,16.973318,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,2006.491210,-1439.412109,13.127620,0.000000,0.000000,13.996582,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1997.487304,-1425.093750,15.764203,0.000000,0.000000,13.996582,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(966,1996.975585,-1441.490234,12.561931,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(966,2006.601318,-1450.965576,12.561931,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237,1997.065673,-1449.071533,12.562584,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237,2007.493408,-1450.788452,12.554687,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237,1997.065673,-1440.719238,12.564539,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237,1999.068725,-1450.788452,12.554687,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);

// Parking SML (Exterior)
	CreateDynamicObjectExULP(966,-2123.802001,-80.852531,34.320312,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1237,-2131.487304,-80.906646,34.320312,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1237,-2122.861816,-80.959671,34.320312,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(4100,-2134.862548,-181.080047,36.021980,0.000000,0.000000,320.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(4100,-2148.599121,-181.049102,35.998001,0.000000,0.000000,319.998779,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(8856,-2119.976074,-93.413803,34.560626,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(8558,-2133.633056,-107.457061,35.840000,0.000000,0.000000,180.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(17070,-2122.823242,-129.467834,34.320312,0.000000,0.000000,92.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(10183,-2135.516357,-105.199058,34.332256,0.000000,0.000000,226.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(10183,-2100.857910,-130.153427,34.332256,0.000000,0.000000,316.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-2098.479492,-82.652526,34.891666,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1290,-2129.608398,-93.479736,40.586570,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1290,-2110.251708,-93.361160,40.586570,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(3460,-2155.831298,-107.588424,38.540924,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(3460,-2111.208984,-107.775390,38.227954,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(3460,-2100.028076,-90.260566,38.227954,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(673,-2113.198242,-93.560928,31.563148,0.000000,0.000000,316.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(673,-2117.779296,-93.439605,31.563148,0.000000,0.000000,50.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(673,-2122.421142,-93.526382,31.563148,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(673,-2126.746582,-93.504669,31.563148,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-2109.181152,-93.382202,34.884635,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-2119.849365,-109.422737,34.884635,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-2134.224609,-109.311088,34.891666,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-2148.384521,-109.493270,34.884635,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(717,-2113.530517,-112.004547,34.370311,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(737,-2100.500732,-84.565483,34.367343,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(737,-2134.219726,-113.247238,34.367343,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(738,-2135.756103,-77.850120,34.370311,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(738,-2117.755859,-77.849609,34.370311,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1231,-2121.386230,-79.732528,37.050704,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1231,-2132.934326,-79.772010,37.050704,0.000000,0.000000,180.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1231,-2155.096679,-97.457031,37.050704,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1290,-2126.408447,-129.461135,40.343734,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-2130.843750,-93.389648,34.884635,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-2139.231445,-81.703666,34.891666,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(804,-2111.742919,-93.368057,35.742622,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(804,-2128.295898,-93.419136,35.742622,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(808,-2124.746826,-93.399978,36.365089,0.000000,0.000000,70.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(808,-2116.225585,-93.336502,36.365089,0.000000,0.000000,284.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(804,-2120.247558,-93.489356,35.742622,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(8843,-2120.842285,-87.258071,34.320312,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(8843,-2120.935058,-98.053779,34.320312,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1231,-2110.963623,-123.084632,37.050704,0.000000,0.000000,87.994506,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1231,-2110.991943,-139.851135,37.050704,0.000000,0.000000,87.989501,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-2097.233642,-147.749511,34.884635,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-2097.268798,-112.448944,34.884635,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-2097.287109,-130.265655,34.884635,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(8558,-2099.865966,-129.940719,35.840000,0.000000,0.000000,269.994506,-1,-1,-1,MAX_RADIO_STREAM_MIN);

// Ayuntamiento Gianmarco (Exterior)
	CreateDynamicObjectExULP(1344,1365.057128,-1768.571899,13.347278,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1232,1379.227783,-1750.735839,15.183517,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1232,1379.221679,-1755.515625,15.183517,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1378.763427,-1742.715087,13.111198,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1223,1368.403686,-1767.353271,12.546875,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,1383.779052,-1754.850952,12.546875,0.000000,0.000000,88.994750,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1419,1377.069946,-1742.324218,13.086351,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1419,1379.140869,-1744.346313,13.078573,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4100,1363.028198,-1772.551879,14.191904,0.000000,0.000000,50.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8645,1363.000000,-1781.226806,13.319172,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1412,1379.117187,-1767.146118,13.820835,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1280,1363.660156,-1772.786132,12.885893,0.000000,0.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1233,1379.210937,-1769.232421,14.106554,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(638,1379.430541,-1748.197875,13.243908,0.000000,0.000000,180.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(638,1379.474487,-1759.250366,13.243908,0.000000,0.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(638,1379.494262,-1763.184936,13.243908,0.000000,0.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(804,1378.282470,-1743.350097,13.726350,0.000000,0.000000,86.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(817,1377.939086,-1743.701416,12.989429,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(738,1382.860595,-1742.519165,12.684000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(738,1383.039062,-1776.637695,12.684000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1231,1363.060546,-1772.869140,15.000000,0.000000,0.000000,87.994995,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1232,1379.146484,-1769.723632,15.183517,0.000000,0.000000,31.997680,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1280,1377.554687,-1767.804687,12.948230,0.000000,0.000000,89.994506,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(949,1363.542480,-1775.213378,13.096983,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2811,1377.879882,-1751.653320,13.140625,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2811,1377.837280,-1754.600097,13.140625,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);

// Garage LSMD (Interior)
	CreateDynamicObjectExULP(8390,9.094726,1544.813476,-0.899999,0.000000,0.000000,270.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(7488,-14.698242,1579.912109,11.100000,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(7488,-67.726562,1533.027343,11.100000,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(7488,82.531250,1531.718750,11.100000,0.000000,0.000000,179.994506,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(7488,7.517578,1492.462890,11.100000,0.000000,0.000000,90.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(7488,58.299804,1579.912109,11.100000,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(7488,60.000000,1489.001953,11.100000,0.000000,0.000000,179.994506,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(7488,-49.106445,1489.001953,11.100000,0.000000,0.000000,179.994506,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(7488,8.113281,1492.435546,29.519973,0.000000,179.994506,270.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8390,-15.292968,1514.765625,32.330001,0.000000,179.994506,270.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1498,33.268554,1529.414062,11.795312,0.000000,0.000000,270.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3352,39.117187,1514.787109,13.093124,0.000000,0.000000,270.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3352,-24.369140,1514.787109,13.093128,0.000000,0.000000,270.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1498,-17.686523,1529.396484,11.795312,0.000000,0.000000,270.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8843,40.387695,1517.284179,11.800000,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8843,38.127929,1517.257812,11.800000,0.000000,0.000000,179.994506,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8843,-25.532226,1516.537109,11.800000,0.000000,0.000000,179.994506,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8843,-23.087890,1516.858398,11.800000,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8843,-4.724609,1533.478515,11.800000,0.000000,0.000000,90.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8843,-4.768554,1537.012695,11.800000,0.000000,0.000000,270.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8843,21.293945,1533.398437,11.800000,0.000000,0.000000,90.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8843,21.187500,1536.701171,11.800000,0.000000,0.000000,270.000000,-1,18,-1,MAX_RADIO_STREAM);

// LSMD (Interior)
	CreateDynamicObjectExULP(14594,375.462890,1892.869140,16.640625,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14594,394.887695,1879.383789,16.700000,0.000000,0.000000,269.890136,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14594,395.238433,1881.568115,16.640625,0.000000,0.000000,269.884643,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14594,394.483062,1880.200805,16.600000,0.000000,0.000000,269.884643,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14444,392.953125,1902.208007,16.399999,0.000000,0.000000,179.994506,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1714,381.884765,1907.782104,16.715623,0.000000,0.000000,65.805908,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1702,388.157348,1911.207641,16.715625,0.000000,0.000000,270.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1702,388.157348,1909.254150,16.715625,0.000000,0.000000,270.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1702,387.587249,1903.742065,16.715625,0.000000,0.000000,180.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1702,385.833953,1913.655273,16.715625,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1714,381.886810,1904.771484,16.715623,0.000000,0.000000,105.821960,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1663,385.197906,1905.906127,17.168029,0.000000,0.000000,263.808227,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1663,385.193359,1907.069335,17.168029,0.000000,0.000000,275.048217,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,384.100006,1914.180053,16.715625,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,388.793823,1912.812011,16.715625,0.000000,0.000000,270.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,388.793823,1905.594970,16.715625,0.000000,0.000000,90.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1567,309.079986,1811.338500,16.647813,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1498,375.419464,1909.828857,16.711610,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1498,375.329986,1914.177612,16.711610,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2190,383.622863,1907.015502,17.634374,0.000000,0.000000,249.076507,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2190,383.565551,1904.582031,17.634374,0.000000,0.000000,261.071044,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2826,383.332031,1903.896240,17.634374,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2824,383.485961,1905.491088,17.634374,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2828,383.416992,1906.349609,17.634374,0.000000,0.000000,52.470703,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2854,383.355957,1907.948730,17.634374,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(630,388.309173,1903.462646,17.740783,0.000000,0.000000,321.745605,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(630,373.168731,1913.828125,17.740783,0.000000,0.000000,321.745605,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(630,373.200286,1910.072265,17.740783,0.000000,0.000000,321.745605,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14595,306.704101,1805.698242,20.579999,0.000000,0.000000,269.884643,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14594,317.467773,1797.963867,16.620000,0.000000,0.000000,89.626464,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14594,298.742187,1827.294921,16.620000,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14594,300.782196,1827.110839,16.500000,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14594,299.415039,1827.344726,16.639999,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,296.182312,1808.246704,16.655624,0.000000,0.000000,270.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,303.320007,1811.378051,16.655624,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1567,372.798828,1912.875976,16.706140,0.000000,0.000000,270.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1702,311.216735,1806.608642,16.647813,0.000000,0.000000,270.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1702,304.957031,1804.122314,16.647813,0.000000,0.000000,180.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1702,302.762084,1804.122314,16.647813,0.000000,0.000000,179.994506,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1702,306.101562,1810.842773,16.647813,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1702,307.149993,1804.122314,16.647813,0.000000,0.000000,179.994506,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(630,388.428710,1913.567382,17.740783,0.000000,0.000000,321.745605,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(630,307.418365,1803.766357,17.680782,0.000000,0.000000,321.745605,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(630,311.386962,1803.889648,17.680782,0.000000,0.000000,71.166412,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(630,311.447265,1810.932617,17.680782,0.000000,0.000000,71.163940,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(630,302.205078,1810.970703,17.680782,0.000000,0.000000,323.239746,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(630,296.735473,1803.272460,17.680782,0.000000,0.000000,47.938720,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1702,296.832946,1804.230224,16.647813,0.000000,0.000000,90.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1702,299.779174,1803.286621,16.647813,0.000000,0.000000,180.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2283,307.198822,1811.319946,18.894628,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2283,298.701629,1808.773071,18.855127,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2283,304.128265,1803.609008,18.923660,0.000000,0.000000,180.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14595,282.043060,1887.656616,20.592525,0.000000,0.000000,90.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,310.309082,1899.727539,16.741758,0.000000,0.000000,90.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3383,304.462860,1904.030517,16.734375,0.000000,0.000000,270.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(18023,306.719268,1901.625854,18.500000,0.000000,180.000000,180.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(18021,305.358245,1905.000000,17.700000,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(18021,307.748077,1904.582275,17.700000,0.000000,0.000000,90.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3393,300.917449,1903.457641,16.734375,0.000000,0.000000,180.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3391,303.473022,1899.841796,16.734375,0.000000,0.000000,270.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3389,300.917449,1905.832397,16.741758,0.000000,0.000000,180.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3387,300.917449,1900.997802,16.734375,0.000000,0.000000,180.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3383,305.944305,1904.030517,16.719999,0.000000,0.000000,90.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(18023,306.215789,1902.770141,18.000000,0.000000,0.000000,179.994506,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(18021,304.326019,1901.819702,17.700000,0.000000,0.000000,90.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3391,310.146118,1904.079589,16.734375,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1999,292.499908,1878.511718,16.640625,0.000000,0.000000,90.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2009,293.494659,1876.509643,16.640625,0.000000,0.000000,90.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2828,293.438568,1876.464355,17.453125,0.000000,0.000000,327.181884,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1714,293.988403,1878.518432,16.640625,0.000000,0.000000,279.666320,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1702,288.067626,1871.668701,16.640625,0.000000,0.000000,90.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1702,288.067626,1873.945190,16.640625,0.000000,0.000000,90.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2343,293.796051,1873.045532,17.221710,0.000000,0.000000,90.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2724,291.093231,1879.426269,17.187627,0.000000,0.000000,80.679168,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,287.521484,1876.319335,16.640625,0.000000,0.000000,90.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14633,267.779296,1887.879882,18.129999,0.000000,0.000000,90.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14598,282.059906,1887.670043,20.590000,0.000000,0.000000,90.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2610,295.697021,1879.486083,17.466085,0.000000,0.000000,270.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2610,295.696289,1878.979980,17.466085,0.000000,0.000000,270.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2610,295.696289,1878.477050,17.466085,0.000000,0.000000,270.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14595,295.176757,1875.307617,20.299999,0.000000,0.000000,179.994506,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,291.912109,1875.720703,18.299999,0.000000,0.000000,270.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2724,291.015594,1878.134277,17.187627,0.000000,0.000000,102.428100,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,291.912109,1880.165039,20.100000,0.000000,0.000000,90.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,291.912109,1880.165039,20.100000,0.000000,0.000000,270.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14595,270.565368,1870.609375,19.549999,0.000000,0.000000,270.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2286,295.799987,1879.015258,19.200000,0.000000,0.000000,270.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14595,267.451690,1916.581787,20.549999,0.000000,0.000000,270.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,282.950012,1921.160034,16.655624,0.000000,0.000000,90.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14444,288.251373,1941.702636,16.399999,0.000000,0.000000,270.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14594,268.983642,1937.320678,16.639999,0.000000,0.000000,90.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14595,269.364196,1921.868652,20.549999,0.000000,0.000000,270.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14594,268.820190,1937.264160,16.500000,0.000000,0.000000,90.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,291.912109,1875.720703,18.299999,0.000000,0.000000,90.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1702,291.915557,1922.704101,16.647813,0.000000,0.000000,180.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1702,291.915557,1925.000000,16.647813,0.000000,0.000000,179.994506,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1702,291.915557,1928.000000,16.647813,0.000000,0.000000,179.994506,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1702,289.915039,1922.704101,16.647813,0.000000,0.000000,179.994506,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1702,287.915039,1922.704101,16.647813,0.000000,0.000000,179.994506,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1702,287.915039,1925.000000,16.647813,0.000000,0.000000,179.994506,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1702,289.915039,1928.000000,16.647813,0.000000,0.000000,179.994506,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1702,289.915039,1925.000000,16.647813,0.000000,0.000000,179.994506,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(630,283.280334,1920.746337,17.680782,0.000000,0.000000,49.824554,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(630,295.439453,1871.510742,17.671409,0.000000,0.000000,155.269775,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(630,283.288085,1923.111328,17.680782,0.000000,0.000000,49.822998,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2824,283.721893,1931.932006,17.634374,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2824,284.469055,1931.993896,17.634374,0.000000,0.000000,249.826538,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2813,285.307098,1931.959106,17.634374,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1964,287.160949,1932.258178,17.777000,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2737,290.950012,1932.656982,18.700000,0.000000,0.000000,0.000000,-1,18,-1,MAX_RADIO_STREAM);

// LSMD (Exterior)
	CreateDynamicObjectExULP(1232,1176.307739,-1318.339233,15.645038,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1232,1176.296020,-1329.163940,15.648311,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1231,1184.864257,-1343.012695,15.918043,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,1178.051513,-1329.420288,13.637472,0.000000,0.000000,0.700012,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,1178.073242,-1318.169311,13.636880,0.000000,0.000000,0.697631,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,1176.259277,-1325.556884,13.012489,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,1176.277954,-1322.126098,13.013410,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,1180.093872,-1313.995605,13.646883,0.000000,0.000000,90.697631,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,1180.115234,-1316.088867,13.646901,0.000000,0.000000,90.697631,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,1177.980834,-1311.954467,13.624479,0.000000,0.000000,0.697631,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,1173.859985,-1312.000976,13.616327,0.000000,0.000000,0.697631,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,1181.723754,-1311.811523,12.564700,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1181.058227,-1335.602416,13.138197,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,1180.154296,-1331.472412,13.626752,0.000000,0.000000,90.109985,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,1181.395629,-1335.611816,12.574760,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1181.114257,-1311.849609,13.129107,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(996,1185.643432,-1320.642944,13.319567,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(10184,1172.755981,-1303.343872,15.514433,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(10184,1172.729003,-1344.180053,15.515545,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,1180.160156,-1333.556640,13.626752,0.000000,0.000000,90.104370,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,1173.950439,-1335.651733,13.628859,0.000000,0.000000,180.104370,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,1178.102539,-1335.639648,13.632177,0.000000,0.000000,180.098876,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5130,1188.099975,-1348.444824,15.449999,0.000000,0.000000,314.299987,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(16731,1174.098999,-1361.228515,20.799829,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(996,1190.184936,-1351.634887,13.317958,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3934,1179.351074,-1375.822509,22.994075,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1231,1184.389526,-1366.868896,15.954580,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,1182.058593,-1344.552124,19.000158,0.000000,0.000000,90.104370,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,1182.078125,-1352.202880,19.000000,0.000000,0.000000,90.104370,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,1177.063598,-1354.355346,19.016016,0.000000,0.000000,180.104370,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,1178.120971,-1342.480957,19.020000,0.000000,0.000000,180.098876,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1223,1177.281127,-1354.197021,18.463844,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1223,1177.272094,-1342.625976,18.495838,0.000000,0.000000,267.994506,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1280,1178.938354,-1342.827636,18.849302,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1280,1179.048339,-1353.994628,18.859588,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1280,1189.356689,-1348.510009,15.734168,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,1179.969726,-1354.359375,19.006788,0.000000,0.000000,180.098876,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,1179.884765,-1342.477539,18.998573,0.000000,0.000000,180.098876,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,1175.998901,-1340.423950,19.003820,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,1175.980102,-1307.469116,19.002416,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,1175.998046,-1336.308593,19.003820,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,1175.995117,-1332.178710,19.003812,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,1175.991210,-1328.083984,18.996412,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,1176.007812,-1323.946289,19.007135,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,1176.014648,-1319.816406,19.017707,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,1176.014648,-1315.682617,19.021553,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,1175.983398,-1311.617187,18.998373,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1181.823730,-1350.286621,19.013746,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1181.821777,-1346.529418,19.013751,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1231,1183.260986,-1312.647094,15.296928,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1231,1182.889892,-1334.388427,15.311874,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1184.426025,-1296.068481,13.773850,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1185.569335,-1328.395629,13.137207,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1184.486206,-1300.200683,13.780767,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(996,1190.203125,-1342.426757,13.313461,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1185.584960,-1319.791992,13.135068,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8557,1147.323852,-1363.861816,14.228577,0.000000,0.000000,270.300048,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1228,1174.759765,-1355.479980,18.775644,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1228,1174.722534,-1366.887329,23.463144,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1280,1178.058593,-1329.012695,13.493131,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1280,1177.961791,-1318.635986,13.497909,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(638,1172.102294,-1327.592163,15.107074,0.000000,0.000000,180.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(638,1172.140136,-1319.868530,15.092383,0.000000,0.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1175.843383,-1324.021606,19.005985,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1175.721191,-1305.690429,19.016363,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1359,1181.197509,-1313.601562,13.267189,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1280,1185.947387,-1321.628540,12.959899,0.000000,0.000000,180.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1280,1185.955566,-1326.221191,12.961021,0.000000,0.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1359,1181.120361,-1333.826049,13.276502,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1364,1181.282104,-1331.323242,13.368000,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1364,1181.340942,-1316.242309,13.358558,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1361,1186.214965,-1323.953002,13.302454,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);

// Veltran (Interior)
	CreateDynamicObjectExULP(5886,-72.882812,2521.295898,20.500000,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5886,-49.889217,2474.582519,20.500000,0.000000,0.000000,90.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5886,-21.911113,2544.559082,20.500000,0.000000,0.000000,270.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5886,0.634765,2493.825195,20.500000,0.000000,0.000000,179.994506,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(9836,-44.799804,2505.053710,9.300000,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(9836,-33.321811,2489.214355,30.399999,0.000000,180.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(10183,-36.188644,2497.206787,15.524396,0.000000,0.000000,225.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3352,-54.374660,2521.025390,16.816562,0.000000,1.000000,179.994506,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3352,-27.187433,2526.020507,16.816562,0.000000,0.000000,90.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3352,-54.362686,2510.061767,16.816562,0.000000,1.000000,179.994506,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1536,-54.331554,2514.800048,15.518750,359.000000,0.000000,90.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1536,-17.883483,2499.894775,15.518750,1.000000,0.000000,90.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8843,-25.781250,2522.774414,15.550000,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8843,-50.607421,2519.430664,15.550000,0.000000,0.000000,90.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8843,-50.607421,2508.544921,15.550000,0.000000,0.000000,90.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8843,-28.548828,2522.450195,15.550000,0.000000,0.000000,179.994506,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8843,-50.473491,2511.770996,15.550000,0.000000,0.000000,270.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8843,-50.473491,2522.315185,15.550000,0.000000,0.000000,270.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1526,-17.996849,2497.490234,18.082296,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1526,-17.994932,2516.753173,18.891622,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1526,-44.756591,2525.927246,19.187042,0.000000,0.000000,90.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1526,-54.251274,2504.297607,19.228490,0.000000,0.000000,180.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1526,-54.251205,2520.838623,16.952770,0.000000,0.000000,179.994506,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1526,-34.856056,2525.927246,17.368915,0.000000,0.000000,90.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(942,-19.144479,2521.699218,17.961977,0.000000,0.000000,90.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(939,-19.143554,2512.483398,17.961977,0.000000,0.000000,90.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1334,-38.389896,2525.160400,16.631582,0.000000,0.000000,180.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,-36.971679,2517.306640,15.512454,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,-33.649414,2514.086914,15.512454,0.000000,0.000000,90.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,-36.971679,2514.049804,15.512454,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,-40.229492,2514.049804,15.512454,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,-43.490001,2514.049804,15.512454,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,-46.750000,2514.049804,15.512454,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,-40.229999,2517.306640,15.512454,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,-43.489257,2517.306640,15.512454,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,-46.750000,2517.306640,15.512454,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,-46.831497,2514.086914,15.512454,0.000000,0.000000,90.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3066,-39.369312,2515.683349,16.566730,0.000000,0.000000,270.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2062,-46.087669,2516.428710,16.087383,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2062,-44.698009,2515.222656,16.087383,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2062,-45.950714,2514.979003,16.087383,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2062,-44.920566,2516.206054,16.087383,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14700,30.573242,2499.547851,16.994745,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2528,34.053043,2503.391601,15.495921,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2527,36.684158,2502.267089,15.495921,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2526,33.964416,2500.440429,15.495921,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2523,36.937740,2501.536621,15.495921,0.000000,0.000000,270.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2297,22.437273,2506.663085,15.319467,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2103,25.549068,2507.882080,15.502193,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1432,25.162784,2498.367187,15.505728,0.000000,0.000000,126.721801,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1763,24.963890,2502.813476,15.502570,0.000000,0.000000,179.737792,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1763,26.706125,2506.244140,15.502570,0.000000,0.000000,270.570068,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1759,26.900100,2503.663330,15.507524,0.000000,0.000000,231.531646,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1819,24.116237,2504.503906,15.501667,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2063,36.427745,2495.253417,16.402637,0.000000,0.000000,180.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1742,28.061046,2508.554931,15.500764,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14720,22.297876,2497.150146,15.492183,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1502,33.446758,2497.010009,15.494745,0.000000,0.000000,90.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1502,31.270000,2504.907226,15.494745,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1502,33.445491,2501.070068,15.494745,0.000000,0.000000,90.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1556,35.699001,2499.830078,15.484375,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2846,34.494834,2505.497314,15.494745,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1745,36.542675,2508.594970,15.484375,0.000000,0.000000,180.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14532,30.862041,2509.319091,16.477464,0.000000,0.000000,225.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2846,30.063409,2507.683837,15.494745,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1745,34.366970,2508.594726,15.484375,0.000000,0.000000,179.994506,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1536,29.780000,2495.439941,15.494745,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1526,29.863212,2505.947021,17.146068,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1526,39.452301,2498.482421,17.387023,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1536,39.471454,2497.258300,15.494745,0.000000,0.000000,270.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1526,37.022941,2508.914306,17.305055,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(643,36.732112,2498.625976,15.964156,0.000000,0.000000,323.730651,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1670,36.784053,2498.640136,16.364236,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1670,24.623373,2505.051269,16.017328,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,36.365032,2495.166259,17.203012,0.000000,0.000000,268.550994,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,35.534542,2495.145996,15.857026,0.000000,0.000000,269.031616,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,35.555797,2495.369628,15.857026,0.000000,0.000000,269.027709,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,36.294994,2495.221191,15.857026,0.000000,0.000000,269.027709,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,37.265419,2495.125488,15.857026,0.000000,0.000000,269.027709,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,37.136959,2495.363769,15.857026,0.000000,0.000000,269.027709,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,35.509315,2495.113281,16.341815,0.000000,0.000000,270.961242,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,35.783298,2495.368652,16.341815,0.000000,0.000000,270.955810,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,36.421039,2495.102050,16.341815,0.000000,0.000000,270.955810,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,36.916862,2495.317382,16.341815,0.000000,0.000000,270.955810,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,37.345661,2495.164550,16.341815,0.000000,0.000000,270.955810,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,35.465679,2495.306152,16.769718,0.000000,0.000000,271.256134,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,36.288928,2495.268066,16.769718,0.000000,0.000000,271.252441,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,37.262004,2495.223144,16.769718,0.000000,0.000000,271.252441,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,36.362716,2495.465820,17.203012,0.000000,0.000000,268.549804,-1,5,-1,MAX_RADIO_STREAM);

// Sicarios Nuevo (Interior)
	CreateDynamicObjectExULP(18045,391.603271,2439.151611,17.500000,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(18088,416.980895,2438.827636,17.399999,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1810,386.883789,2437.665039,15.507812,0.000000,0.000000,179.994506,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(941,392.701080,2434.794677,15.989853,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2063,394.963500,2444.038574,16.416765,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(941,386.799804,2439.137695,15.989853,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2057,385.656829,2434.206787,16.662641,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,393.932891,2434.975585,16.558267,0.000000,0.000000,352.980560,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1654,415.630889,2435.885742,17.358160,0.000000,0.000000,186.557067,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1650,387.844543,2434.194091,16.798851,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2036,398.972259,2440.708251,17.577669,0.000000,90.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1672,384.518249,2434.089843,16.590000,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1672,384.541290,2434.313232,16.590000,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1672,384.666473,2434.073486,16.590000,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1654,387.253906,2434.181640,16.700000,0.000000,0.000000,186.553344,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2057,386.567382,2439.410156,16.635845,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2035,398.978271,2443.282470,17.571952,0.000000,90.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1252,386.869293,2434.211181,16.742000,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1252,386.338989,2434.222167,16.742000,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3092,392.883758,2434.915771,16.670000,90.000000,90.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,387.853515,2439.200195,16.489999,0.000000,0.000000,123.799438,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2905,389.220520,2434.647949,15.599261,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2906,389.849975,2435.341796,15.581825,0.000000,0.000000,93.083679,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2907,389.811828,2434.793701,15.675176,0.000000,0.000000,52.448974,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2908,390.075683,2434.975585,15.592560,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1221,412.122436,2434.878173,15.971616,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2906,389.545593,2434.576904,15.589153,0.000000,0.000000,31.245025,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2905,389.553558,2435.209228,15.599261,0.000000,0.000000,90.404083,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2677,387.251708,2437.471679,15.779829,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2044,398.978271,2443.793945,17.873624,0.000000,90.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2044,398.972259,2439.882812,17.274522,0.000000,90.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2034,398.971679,2439.604492,18.055648,0.000000,90.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2044,398.972259,2441.892578,17.952793,0.000000,90.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2035,384.538085,2438.201171,16.508811,0.000000,0.000000,99.766845,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2036,384.515625,2437.340820,16.518301,0.000000,0.000000,93.240966,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2035,398.972259,2440.084960,17.634920,0.000000,90.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2035,398.972259,2441.472167,17.605064,0.000000,90.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2036,398.978271,2442.770019,17.617008,0.000000,90.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2034,398.972259,2442.261230,17.612779,0.000000,90.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2038,387.168914,2439.462402,16.542600,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2358,393.964416,2444.016357,15.984368,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2358,394.786773,2444.009277,15.984368,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2358,395.700714,2443.989990,15.984368,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2358,394.100494,2444.101318,16.459611,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2358,394.929351,2444.114501,16.459611,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2358,395.757934,2444.132324,16.459611,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2358,394.132202,2444.008544,16.865955,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2358,394.962860,2444.050537,16.865955,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2358,395.782043,2444.142333,16.865955,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2358,394.118713,2444.123779,17.300943,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2358,395.818695,2443.971435,17.300943,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(643,393.461334,2440.382080,15.978283,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2034,393.175292,2440.687988,16.409181,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2034,393.187561,2440.102783,16.409181,0.000000,0.000000,93.833679,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2035,393.622497,2440.320068,16.370502,0.000000,0.000000,277.256103,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1498,396.600006,2434.590087,15.507812,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2036,417.504974,2436.096435,17.222988,0.000000,0.000000,1.791961,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1654,387.476562,2434.213867,16.700000,0.000000,0.000000,186.553344,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1654,415.616516,2436.260498,17.358160,0.000000,0.000000,186.553344,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1654,416.030395,2436.253417,17.358160,0.000000,0.000000,186.553344,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1654,416.121734,2435.894287,17.358160,0.000000,0.000000,186.553344,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1672,384.689453,2434.295898,16.590000,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2035,416.039886,2436.056884,17.971311,0.000000,0.000000,358.728027,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2035,417.735839,2436.064453,17.971311,0.000000,0.000000,358.725585,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2044,412.339782,2435.209960,16.455009,0.000000,0.000000,358.725585,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14782,388.069152,2443.985351,16.516048,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14782,384.686157,2443.084472,16.516048,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14782,411.315887,2436.123535,16.516048,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1550,412.932556,2434.736328,15.902716,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(960,389.625000,2434.927734,15.889602,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1242,412.049804,2434.875244,16.654928,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2044,416.910156,2436.093750,17.979393,0.000000,0.000000,358.725585,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1498,416.991607,2440.648925,15.399999,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1651,419.419677,2438.111328,17.045078,0.000000,0.000000,180.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,419.343292,2438.189941,17.619506,0.000000,0.000000,270.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,386.605010,2438.900878,16.489999,0.000000,0.000000,65.190246,-1,8,-1,MAX_RADIO_STREAM);

// CNN Nuevo (Exterior)
	CreateDynamicObjectExULP(11544,733.211669,-1365.430053,24.457008,0.000000,0.000000,179.799987,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11544,733.284973,-1359.119995,24.457008,0.000000,0.000000,359.796752,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3934,742.884094,-1371.276977,24.692211,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(6296,733.738769,-1340.097534,14.742176,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3458,784.205383,-1356.862915,14.070393,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3876,721.750976,-1376.673828,27.560190,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1694,719.477478,-1339.830810,36.570125,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1290,768.045654,-1346.587280,18.544181,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1290,768.041015,-1363.876953,18.544174,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1299,732.689453,-1333.505859,15.200722,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(792,784.879882,-1383.074218,12.801660,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5837,768.701171,-1382.832031,14.402187,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(638,746.953125,-1359.173828,16.993907,0.000000,0.000000,269.989013,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1597,767.848632,-1355.194702,15.185714,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,751.208984,-1330.857421,13.099885,0.000000,0.000000,359.296875,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,759.445312,-1330.948242,13.099688,0.000000,0.000000,359.296875,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,755.330078,-1330.902343,13.099788,0.000000,0.000000,359.296875,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,749.143188,-1332.901000,13.095396,0.000000,0.000000,89.296875,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,757.371093,-1332.991699,13.095197,0.000000,0.000000,89.296875,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,753.262634,-1332.954956,13.095278,0.000000,0.000000,89.296875,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,761.501159,-1333.041503,13.095088,0.000000,0.000000,89.296875,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5837,768.582946,-1332.141235,14.263326,0.000000,0.000000,177.994995,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(994,768.865478,-1358.570800,12.675630,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(994,767.270324,-1358.568603,12.694060,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,768.055603,-1363.333496,12.520771,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,768.073059,-1350.198608,12.528606,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,768.028320,-1359.697265,13.304128,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,768.062500,-1350.918945,13.296913,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,786.340759,-1356.955444,13.107420,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,786.450195,-1371.000976,13.119599,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1223,749.131530,-1335.024902,12.539248,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1223,761.482910,-1335.248413,12.538756,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,786.434570,-1342.222656,13.107536,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1231,755.432067,-1330.600097,15.279365,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1232,738.586669,-1336.545288,15.172548,0.000000,0.000000,309.995117,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1231,786.346679,-1378.221679,15.374713,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1231,786.448974,-1335.393432,15.273622,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1223,754.701416,-1356.644165,12.500000,0.000000,0.000000,87.999938,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1280,766.854675,-1355.496704,12.928474,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1280,769.215026,-1355.452514,12.931356,0.000000,0.000000,180.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(792,742.861328,-1332.166015,12.645530,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,740.784179,-1330.523437,13.113463,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,732.493225,-1353.995483,13.064323,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1223,748.001220,-1356.572509,12.500000,0.000000,0.000000,87.994995,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1280,746.239257,-1330.439453,12.950680,0.000000,0.000000,91.994018,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1280,750.704101,-1359.240234,16.698230,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1280,743.544250,-1359.243164,16.698230,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1280,760.732421,-1384.029296,13.092399,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(792,784.872070,-1332.812500,12.621660,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1280,786.120117,-1380.638671,13.077861,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8843,773.123046,-1354.972656,12.534770,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8843,762.373046,-1354.851562,12.534770,0.000000,0.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1223,754.409179,-1361.432617,11.112602,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1344,744.684631,-1358.946533,13.308218,0.000000,0.000000,177.994995,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1337,746.140014,-1359.146240,13.149225,0.000000,0.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1264,743.091918,-1359.220581,12.972144,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8843,750.874511,-1360.520996,12.534770,0.000000,0.000000,357.994506,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1232,648.044555,-1330.141723,20.191474,0.000000,0.000000,297.998657,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1232,647.737915,-1348.216308,20.191474,0.000000,0.000000,297.993164,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(737,735.606811,-1350.477905,12.600000,0.000000,0.000000,91.999511,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2921,781.898437,-1330.336914,16.269603,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2921,773.999755,-1384.798339,16.422632,0.000000,0.000000,186.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2690,754.821838,-1360.259765,14.574189,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3522,755.383789,-1368.496093,12.591530,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(862,755.230957,-1370.293945,12.681198,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(870,754.368469,-1369.004638,12.923319,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(859,755.220886,-1366.684326,12.681447,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(861,755.282836,-1367.662963,12.681447,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,754.963867,-1371.781250,13.091628,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1232,647.846557,-1367.070434,20.191474,0.000000,0.000000,297.993164,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1232,647.816589,-1384.334960,20.191474,0.000000,0.000000,297.993164,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1280,647.232666,-1339.242187,12.948230,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1280,647.152282,-1375.673828,13.078052,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(738,644.896057,-1366.991088,12.722246,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(792,644.886779,-1348.505126,12.646875,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1280,732.471679,-1352.327270,12.901355,0.000000,0.000000,179.994018,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1280,755.090637,-1364.076782,12.914111,0.000000,0.000000,180.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1280,755.041015,-1373.690429,12.954403,0.000000,0.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3873,699.708984,-1355.225585,28.248512,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(7586,699.708007,-1355.125000,49.639095,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(10357,702.122802,-1354.909423,20.874603,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(717,678.359252,-1388.488647,12.708749,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(717,699.711059,-1388.526367,12.789644,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(717,724.666503,-1388.474121,12.785570,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(717,675.832214,-1326.123657,12.766038,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(717,698.342529,-1326.023437,12.766038,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(717,721.594604,-1326.034545,12.766038,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3666,738.951904,-1374.791748,24.705896,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3666,746.645507,-1367.933593,24.705896,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3666,746.583984,-1374.797851,24.705896,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3666,739.004821,-1367.960083,24.705896,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8550,655.645874,-1357.127197,25.014923,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1231,758.890991,-1384.018432,15.419034,0.000000,0.000000,358.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(792,762.700744,-1383.069946,12.801660,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(792,762.290039,-1331.935668,12.646586,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,754.414062,-1359.990234,25.190000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,754.297485,-1384.084960,25.256534,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(996,754.549804,-1367.956054,25.399999,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(996,754.539062,-1382.802734,25.399999,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(996,746.638671,-1359.953125,25.399999,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(996,735.139648,-1359.937500,25.399999,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(994,754.541442,-1368.829956,24.692211,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,742.694824,-1359.939941,24.750000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(638,750.940490,-1359.191772,21.337657,0.000000,0.000000,269.989013,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(638,743.586364,-1359.178588,21.337657,0.000000,0.000000,269.989013,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2946,748.858947,-1359.598022,20.640625,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2946,745.690002,-1359.597656,20.640625,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,740.780639,-1354.329711,21.202924,0.000000,0.000000,12.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1483,747.229980,-1358.359985,22.399999,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1232,738.613281,-1343.610351,15.157020,0.000000,0.000000,289.995117,-1,-1,-1,MAX_RADIO_STREAM);

//  Cercado HQ Traficantes (Exterior)
	CreateDynamicObjectExULP(3066,1048.140869,-352.426757,74.046463,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(16601,1070.062622,-352.424865,80.534255,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3276,1032.479492,-315.441314,73.894706,0.000000,0.000000,358.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8650,1003.786193,-337.312316,73.408332,0.000000,0.000000,180.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1003.811462,-323.778747,75.799079,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1003.811096,-334.049987,75.799079,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8650,1003.786132,-294.890014,73.408332,0.000000,0.000000,180.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1003.810546,-344.349609,75.799079,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8650,1003.786132,-344.479492,73.408332,0.000000,0.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8650,1003.786132,-354.779998,73.000000,0.000000,0.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1003.810546,-364.928985,75.290000,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1003.810546,-354.629882,75.799079,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(654,1008.933593,-312.914062,72.992187,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(655,1008.997985,-292.098480,72.992187,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(658,1031.714721,-293.313293,72.992187,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(688,1001.712890,-373.336914,70.422569,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1003.810546,-313.500000,75.799079,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1003.810546,-303.200012,75.799079,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8650,1003.786132,-313.389648,73.408332,0.000000,0.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1003.810546,-292.899993,75.799079,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8650,1018.629882,-278.900390,73.405532,0.000000,0.000000,93.993530,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1003.810546,-285.199218,75.799079,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1019.245117,-278.928710,75.789108,0.000000,0.000000,183.999023,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1009.000000,-279.665039,75.799079,0.000000,0.000000,183.999023,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1009.000000,-279.665039,75.799079,0.000000,0.000000,183.999023,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1029.516113,-278.211822,75.789108,0.000000,0.000000,183.999023,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8650,1019.417358,-278.844635,73.405532,0.000000,0.000000,93.993530,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8650,1049.799926,-278.839996,73.405532,0.000000,0.000000,85.993530,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1050.043457,-278.929992,75.789108,0.000000,0.000000,175.999023,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1039.796875,-278.208984,75.789108,0.000000,0.000000,175.995483,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1060.310424,-279.653411,75.789108,0.000000,0.000000,175.995483,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8650,1070.680053,-280.302093,73.405532,0.000000,0.000000,85.993530,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1070.550048,-280.380004,75.789108,0.000000,0.000000,175.995483,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1080.810058,-281.097991,75.789108,0.000000,0.000000,175.995483,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8650,1100.599975,-285.041992,73.405532,0.000000,0.000000,75.989990,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1090.930053,-282.700012,75.789108,0.000000,0.000000,165.995483,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1100.896972,-285.190002,75.789108,0.000000,0.000000,165.992431,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1110.880004,-287.679992,75.789108,0.000000,0.000000,165.992431,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8650,1108.816772,-287.093902,73.405532,0.000000,0.000000,75.986938,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1118.369995,-289.558288,75.789108,0.000000,0.000000,165.995483,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8650,1123.310058,-305.661682,73.405532,0.000000,0.000000,359.986938,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1123.369018,-295.970001,75.789108,0.000000,0.000000,89.992431,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1123.368041,-306.254608,75.789108,0.000000,0.000000,89.989013,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8650,1123.302978,-336.000000,73.405532,0.000000,0.000000,359.983520,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1123.365966,-316.540008,75.789108,0.000000,0.000000,89.989013,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1123.359985,-326.825256,75.789108,0.000000,0.000000,89.989013,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1123.359985,-337.109985,75.789108,0.000000,0.000000,89.989013,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8650,1123.300048,-355.342437,73.405532,0.000000,0.000000,359.983520,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1123.359985,-347.404998,75.789108,0.000000,0.000000,89.989013,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1123.364379,-357.699310,75.789108,0.000000,0.000000,89.989013,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1123.359985,-365.420013,75.789108,0.000000,0.000000,89.989013,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8650,1108.446044,-370.463104,73.405532,0.000000,0.000000,269.983520,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1118.199951,-370.575988,75.789108,0.000000,0.000000,359.989013,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1107.909179,-370.573608,75.789108,0.000000,0.000000,359.983520,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1097.628662,-370.572998,75.789108,0.000000,0.000000,359.983520,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8650,1077.979980,-370.459991,73.405532,0.000000,0.000000,269.978027,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1087.343017,-370.572662,75.789108,0.000000,0.000000,359.983520,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1077.052124,-370.560821,75.789108,0.000000,0.000000,359.983520,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8650,1058.699951,-370.449188,73.405532,0.000000,0.000000,269.978027,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1066.770019,-370.558990,75.789108,0.000000,0.000000,359.983520,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1056.489135,-370.552398,75.789108,0.000000,0.000000,359.983520,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1048.773315,-370.550109,75.789108,0.000000,0.000000,359.983520,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1428,1070.069946,-345.500732,74.560043,0.000000,0.000000,176.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1474,1048.966918,-361.788970,74.458625,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1451,1068.593872,-344.852844,73.819694,0.000000,0.000000,180.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1458,1081.438964,-344.668853,73.299003,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1483,1080.619995,-344.571655,74.961784,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3252,1058.863647,-290.033142,72.992187,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(12921,1024.478515,-370.976806,75.964088,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13367,1031.871215,-306.706878,84.982765,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(17052,1111.672729,-359.269836,72.985054,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(660,1035.883300,-313.284332,72.992187,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(657,1056.755126,-295.463012,72.985054,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(660,1053.231567,-343.903930,72.992187,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(672,1035.895507,-362.661193,72.887344,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(689,993.019531,-357.756835,68.119369,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(691,991.782226,-310.722656,68.521720,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(696,1022.057250,-272.048431,70.186180,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(697,1001.321411,-276.981048,69.476409,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(703,1015.183593,-351.912109,72.792190,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(705,1087.549316,-295.485351,72.992187,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(719,1116.304687,-376.596679,69.078445,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14872,1009.399475,-365.003295,73.443511,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,1007.273681,-370.016052,74.550003,0.000000,0.000000,88.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,1013.263183,-370.187377,74.550003,0.000000,0.000000,87.994995,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,1016.261962,-370.241455,74.550003,0.000000,0.000000,87.994995,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,1033.043457,-370.161590,74.550003,0.000000,0.000000,87.994995,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,1039.040039,-370.309814,74.550003,0.000000,0.000000,87.994995,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,1042.038574,-370.383911,74.550003,0.000000,0.000000,87.994995,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,1030.182861,-371.577514,76.356658,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,1019.275390,-371.641601,76.437408,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(694,993.190246,-296.453002,70.018745,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1290,1097.679443,-352.184265,79.015609,0.000000,0.000000,180.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1280,1041.027587,-315.951324,73.393539,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1280,1050.562744,-316.044097,73.393539,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(664,1045.105590,-370.038940,71.419067,0.000000,0.000000,192.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(664,1003.430480,-368.991516,71.019065,0.000000,0.000000,259.997070,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,1085.176147,-343.123718,76.866607,0.000000,0.000000,268.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,1056.042968,-343.517272,76.866607,0.000000,0.000000,267.994995,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1290,1032.143920,-312.355560,79.015609,0.000000,0.000000,359.994506,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3666,1003.568847,-321.332702,75.038673,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3666,1003.582824,-337.413085,75.038673,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1344,1014.680541,-371.050476,73.475593,0.000000,0.000000,358.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1370,1049.278076,-361.830230,73.535797,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1440,1012.105834,-371.394378,73.173782,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1042.738769,-396.786743,67.221885,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1007.563476,-397.880859,69.130470,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1232,1104.528930,-297.345977,75.621696,0.000000,0.000000,182.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3522,1064.965332,-345.600982,73.070602,0.000000,0.000000,92.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2228,1061.876342,-346.196594,73.712043,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(647,1030.161132,-312.796875,74.824104,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(647,1034.559570,-312.340820,74.824104,0.000000,0.000000,103.996582,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(679,1065.480957,-345.545318,73.160514,0.000000,0.000000,114.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(682,1066.946533,-345.618316,73.160514,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(682,1063.344238,-345.788452,73.160514,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(801,1031.616210,-314.191406,72.992187,0.000000,0.000000,109.995117,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(804,1064.352539,-345.620117,74.339988,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(808,1095.849609,-321.768554,74.794128,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(817,1066.155883,-346.007202,73.603065,0.000000,0.000000,160.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(759,1009.783386,-337.378509,72.992187,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);

// Heors Almacén Garage(Exterior)
	CreateDynamicObjectExULP(3354,2787.633300,-1629.177368,11.219690,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(9697,2771.634277,-1581.274291,9.936252,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8843,2794.832031,-1604.994628,9.921875,0.000000,0.000000,333.134643,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(966,2799.859375,-1601.155151,9.929299,0.000000,0.000000,345.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,2783.959716,-1600.247314,13.000000,3.149993,0.000000,90.790008,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,2803.716064,-1602.158813,10.765810,0.000000,0.000000,75.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,2789.664306,-1598.435668,10.777304,0.000000,0.000000,74.998168,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,2787.344726,-1597.815917,10.777304,0.000000,0.000000,74.998168,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,2805.824218,-1602.717651,10.765810,0.000000,0.000000,74.998168,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,2771.131103,-1600.417358,13.699999,3.147583,0.000000,90.785522,-1,-1,-1,MAX_RADIO_STREAM);

// Heors Casa HQ (Interior)
	CreateDynamicObjectExULP(14819,299.273712,310.741790,1003.454589,0.000000,0.000000,90.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14819,311.333129,310.860595,1003.454589,0.000000,0.000000,90.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1528,306.242187,302.756713,1000.154541,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(643,301.732055,305.885772,998.618896,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1462,305.747161,305.197662,998.148437,0.000000,0.000000,270.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1221,305.677459,300.733062,998.610229,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1221,304.656921,300.757415,998.610229,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1221,303.616119,300.854034,998.610229,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1221,302.564117,300.937927,998.610229,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1221,302.929504,300.847656,999.527893,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1221,304.355712,300.828369,999.527893,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1221,305.413574,300.644287,999.527893,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1328,298.787689,300.890716,998.663574,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14604,300.527648,301.524993,999.129089,0.000000,0.000000,358.794891,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14583,300.541229,302.207916,1000.069580,0.000000,0.000000,270.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1528,298.242187,301.454742,999.804260,0.000000,0.000000,180.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5678,302.540924,297.782958,1000.619812,0.000000,0.000000,90.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5678,306.474822,308.195892,1000.619812,0.000000,0.000000,90.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5678,305.039489,309.577697,1000.619812,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,301.419891,305.759979,999.111877,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,301.791717,305.800506,999.111877,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,305.807373,308.989929,998.500000,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,305.507080,309.004760,998.500000,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,305.688873,308.168487,998.500000,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,305.776245,306.961975,998.500000,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,305.550720,306.973541,998.500000,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,305.517547,307.800323,998.500000,0.000000,0.000000,15.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,306.013916,309.015472,999.950012,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,305.717407,308.967407,999.950012,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,305.994842,308.175689,999.950012,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,305.771942,308.139373,999.950012,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,305.877777,307.472076,999.950012,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,305.506622,307.412628,999.950012,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,305.787109,307.077209,999.950012,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,305.721649,306.535064,999.950012,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,305.890014,308.979309,1000.867431,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,305.549804,308.556640,999.950012,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,305.678344,308.901153,1000.867431,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,305.935607,308.196044,1000.867431,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,305.820465,308.073303,1000.867431,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,305.911529,307.387756,1000.867431,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,305.629394,307.284545,1000.867431,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,305.912567,306.509399,1000.867431,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);

// Heors Almacén Garage (Interior)
	CreateDynamicObjectExULP(4178,2457.064208,2308.166015,94.376937,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4178,2430.128662,2291.413574,94.376937,0.000000,0.000000,90.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4178,2479.202636,2284.500488,94.376937,0.000000,0.000000,270.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4178,2450.922363,2262.451660,94.376937,0.000000,0.000000,180.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4178,2465.507080,2259.247802,90.000000,0.000000,0.000000,90.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5151,2487.566406,2296.859375,93.400001,0.000000,0.000000,90.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,2457.375000,2275.600097,92.113243,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(982,2472.449951,2278.921630,92.113243,0.000000,0.000000,90.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(9697,2456.963623,2294.300048,90.773750,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3352,2448.531005,2272.386962,92.057189,0.000000,0.000000,270.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1566,2469.285888,2274.826171,92.945098,0.000000,0.000000,90.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(9836,2454.387451,2287.221191,104.250000,0.000000,180.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5706,2473.808837,2265.904541,87.639999,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8843,2448.488525,2274.740966,90.769897,0.000000,0.000000,180.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1290,2442.267089,2300.817138,92.400001,0.000000,0.000000,90.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1290,2454.266601,2300.816406,92.400001,0.000000,0.000000,90.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1290,2466.266601,2300.816406,92.400001,0.000000,0.000000,90.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1528,2440.068603,2275.622802,94.171218,0.000000,0.000000,180.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1528,2469.262695,2289.365234,94.346138,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1528,2453.186767,2272.391601,92.113563,0.000000,0.000000,270.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1528,2465.292968,2272.391601,94.703086,0.000000,0.000000,270.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(939,2468.072265,2294.497802,93.202606,0.000000,0.000000,270.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1345,2440.835205,2274.658935,91.535614,0.000000,0.000000,270.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1438,2441.450683,2290.681640,90.759376,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(942,2441.465820,2294.796875,93.202606,0.000000,0.000000,90.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1299,2467.003173,2282.832031,91.215232,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1299,2467.122314,2285.188720,91.215232,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1431,2468.294921,2278.413330,92.008094,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1438,2441.416992,2288.771972,90.759376,0.000000,357.750000,270.211303,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2971,2458.667968,2274.063232,91.460479,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(643,2463.357177,2276.955078,91.930953,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1280,2463.491455,2272.853759,91.861831,0.000000,0.000000,270.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1670,2463.262939,2277.074218,92.345962,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4178,2444.761474,2071.218994,64.825386,0.000000,0.000000,179.994506,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4178,2427.446533,2098.380859,64.825386,0.000000,0.000000,90.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4178,2450.445556,2106.900634,64.825386,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4178,2461.395263,2086.530029,64.825386,0.000000,0.000000,270.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5151,2474.495117,2118.039794,63.999900,0.000000,0.000000,90.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(9836,2458.833740,2075.554931,75.383316,0.000000,179.994506,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1566,2437.350097,2082.799560,62.874687,0.000000,0.000000,90.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1566,2438.344970,2096.937988,62.874687,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2971,2438.612548,2090.888916,61.359275,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2971,2450.041259,2082.814941,61.359275,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(939,2450.311523,2086.413085,63.802501,0.000000,0.000000,270.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(942,2446.520751,2082.677734,63.802501,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1528,2451.455322,2092.641601,65.126045,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1528,2437.386474,2089.644042,64.689064,0.000000,0.000000,180.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1528,2439.886230,2081.159423,64.092102,0.000000,0.000000,270.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14532,2450.405029,2095.691162,62.341995,0.000000,0.000000,139.197875,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1763,2449.391845,2090.911621,61.359275,0.000000,0.000000,173.377380,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1763,2446.376708,2093.482421,61.359275,0.000000,0.000000,91.246612,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2063,2442.800048,2096.429199,62.268226,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2024,2447.999267,2093.813720,61.359275,0.000000,0.000000,310.980590,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1670,2448.528320,2094.196289,61.893260,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1670,2449.020263,2093.531494,61.893260,0.000000,0.000000,276.961242,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1759,2446.945312,2091.214111,61.359275,0.000000,0.000000,135.058227,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1432,2443.975097,2087.644287,61.359275,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2971,2438.571289,2088.790039,61.359275,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,2444.270507,2087.642333,62.067489,0.000000,0.000000,0.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,2443.739501,2087.640380,62.067489,0.000000,0.000000,203.057128,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,2441.975830,2096.447753,63.062679,0.000000,0.000000,268.734405,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,2441.972412,2096.393310,61.750000,0.000000,0.000000,267.529327,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,2442.802734,2096.593261,61.750000,0.000000,0.000000,267.528076,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,2442.793945,2096.292968,61.750000,0.000000,0.000000,267.528076,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,2443.622802,2096.418701,61.750000,0.000000,0.000000,267.528076,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,2441.931640,2096.596435,62.209999,0.000000,0.000000,267.529296,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,2441.963867,2096.297851,62.209999,0.000000,0.000000,267.528076,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,2442.782958,2096.386474,62.209999,0.000000,0.000000,267.528076,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,2443.593261,2096.548828,62.209999,0.000000,0.000000,267.528076,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,2443.625000,2096.250976,62.209999,0.000000,0.000000,267.528076,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,2441.842773,2096.334228,62.659999,0.000000,0.000000,263.914031,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,2442.802734,2096.556396,62.659999,0.000000,0.000000,263.913574,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,2443.641357,2096.393310,62.659999,0.000000,0.000000,263.913574,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,2442.742919,2096.297119,62.659999,0.000000,0.000000,263.913574,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,2443.399658,2096.386962,63.062679,0.000000,0.000000,268.731079,-1,4,-1,MAX_RADIO_STREAM);

	// Museo LS (Interior)
	CreateDynamicObjectExULP(9946,1388.333251,1210.705200,21.950000,0.000000,179.994506,270.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4101,1477.614257,1545.042968,25.600000,0.000000,0.000000,90.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4101,1342.873046,1604.854492,25.600000,0.000000,0.000000,270.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(9946,1367.389648,1571.423828,21.799999,0.000000,179.994506,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(9946,1452.629882,1609.799804,21.799999,0.000000,179.994506,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4101,1402.989257,1633.468750,24.399999,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(9946,1410.012695,1609.799804,21.799999,0.000000,179.994506,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(9946,1367.389648,1609.800048,23.500000,0.000000,179.994506,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(9946,1452.629882,1571.423828,21.799999,0.000000,179.994506,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4103,1439.908813,1655.324462,19.340000,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(9946,1410.012695,1571.423828,21.799999,0.000000,179.994506,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4103,1327.799804,1276.071289,19.500000,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4103,1329.808837,1263.954467,19.500000,0.000000,0.000000,270.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4103,1357.500000,1276.071289,19.500000,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4103,1377.235351,1148.683593,19.500000,0.000000,0.000000,179.994506,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4103,1406.989257,1148.683593,19.500000,0.000000,0.000000,179.994506,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4103,1395.814453,1164.180908,19.500000,0.000000,0.000000,90.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(9946,1349.969970,1210.403808,21.950000,0.000000,179.994506,270.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1533,1369.689941,1209.848144,10.007187,0.000000,0.000000,180.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1533,1368.200195,1209.847656,10.007187,0.000000,0.000000,179.994506,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4103,1517.736572,1412.840576,19.500000,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4103,1611.348388,1361.825317,19.500000,0.000000,0.000000,270.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4103,1488.022705,1412.840576,19.500000,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4103,1611.347656,1332.084960,19.500000,0.000000,0.000000,270.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4103,1567.364257,1231.461547,19.500000,0.000000,0.000000,180.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4103,1537.619140,1231.460937,19.500000,0.000000,0.000000,179.994506,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4103,1439.011718,1312.208007,19.500000,0.000000,0.000000,90.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4103,1439.012573,1282.452758,19.500000,0.000000,0.000000,90.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4103,1545.346679,1294.984375,19.500000,0.000000,0.000000,270.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4103,1565.440429,1235.143554,19.500000,0.000000,0.000000,179.994506,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(9946,1508.352539,1330.474609,21.959999,0.000000,179.994506,270.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(9946,1546.699218,1330.474609,21.959999,0.000000,179.994506,270.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(9946,1546.699218,1287.859375,21.969999,0.000000,180.000000,270.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(9946,1508.352539,1287.859375,21.969999,0.000000,180.000000,270.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1533,1550.255859,1339.666381,10.007187,0.000000,0.000000,270.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1533,1550.255859,1338.199951,10.007187,0.000000,0.000000,270.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4101,1378.775390,1508.960937,25.600000,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4643,1421.221679,1581.612304,12.199999,0.000000,0.000000,90.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4643,1529.254760,1325.339233,12.500000,0.000000,0.000000,270.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4643,1364.034179,1239.787231,12.199999,0.000000,0.000000,270.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3398,1401.082031,1565.598876,0.000000,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11489,1394.187744,1561.735473,9.856273,0.000000,0.000000,135.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3935,1512.292358,1343.657104,11.000000,0.000000,0.000000,180.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1500.060058,1324.255004,10.130566,0.000000,0.000000,90.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3521,1427.716430,1589.939453,11.393602,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3471,1414.825927,1588.130249,11.115164,0.000000,0.000000,90.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3462,1422.540649,1605.837036,11.441843,0.000000,0.000000,90.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(9915,1400.325439,1555.468872,-5.400000,0.000000,0.000000,90.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(10378,1440.942871,1561.207275,9.600000,0.000000,0.000000,180.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(10378,1423.405273,1540.192871,9.600000,0.000000,0.000000,179.994506,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(10378,1565.422851,1294.572509,9.899999,0.000000,0.000000,270.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(10378,1493.893188,1366.976806,9.899999,0.000000,0.000000,180.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(10378,1488.184204,1284.024414,9.899999,0.000000,0.000000,179.994506,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(10378,1488.178955,1268.117675,9.899999,0.000000,0.000000,179.994506,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3935,1390.629028,1556.754394,11.000000,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3935,1412.219604,1569.412109,11.000000,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3935,1412.244262,1556.745727,11.000000,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11489,1408.365966,1561.468994,9.856273,0.000000,0.000000,225.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5715,1403.410400,1607.388427,10.000000,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3471,1422.909179,1579.067871,11.115164,0.000000,0.000000,90.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5715,1414.465820,1598.414062,10.000000,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5715,1414.465820,1607.388427,10.000000,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5715,1403.410156,1598.414062,10.000000,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3471,1526.429809,1338.152221,11.455789,0.000000,0.000000,270.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3471,1414.825195,1579.067382,11.115164,0.000000,0.000000,90.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(10378,1454.254882,1634.149902,9.689999,0.000000,0.000000,179.994506,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3462,1427.540039,1605.836914,11.441843,0.000000,0.000000,90.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3462,1432.540039,1605.836914,11.441843,0.000000,0.000000,90.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4103,1441.569946,1662.010009,19.340000,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(9915,1417.992187,1574.134765,-5.400000,0.000000,0.000000,90.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3462,1517.642211,1312.244750,11.741842,0.000000,0.000000,270.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3462,1501.641601,1312.244140,11.741842,0.000000,0.000000,270.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3462,1509.641601,1312.244140,11.741842,0.000000,0.000000,270.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3462,1519.839721,1309.221313,11.741842,0.000000,0.000000,180.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3462,1519.838867,1301.220703,11.741842,0.000000,0.000000,179.994506,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2745,1519.080810,1293.682128,11.436743,0.000000,0.000000,90.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2745,1519.080810,1297.190429,11.436743,0.000000,0.000000,90.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2745,1520.535278,1295.555053,11.436743,0.000000,0.000000,90.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1500.050292,1327.255004,10.130566,0.000000,0.000000,270.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1536.629882,1296.179687,10.297189,0.000000,0.000000,179.994506,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1533.626953,1296.174804,10.297189,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(10757,1542.141113,1315.704345,14.517015,0.000000,0.000000,219.396911,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5715,1534.328247,1332.805541,3.599999,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5715,1529.537109,1337.852416,4.500000,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3398,1418.719482,1584.131103,0.000000,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3398,1537.676513,1325.115844,0.000000,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3398,1537.675781,1307.599975,0.000000,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3398,1546.675781,1307.599609,0.000000,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3398,1546.675781,1325.115234,0.000000,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,1549.900024,1322.098022,11.067369,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,1535.123046,1310.900024,11.067369,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,1549.900024,1310.899414,11.067369,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,1535.123046,1322.097656,11.067369,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,1407.140014,1555.680664,10.767370,0.000000,0.000000,270.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,1542.480957,1304.513061,11.067369,0.000000,0.000000,270.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,1542.480468,1328.441406,11.067369,0.000000,0.000000,270.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,1395.937744,1570.680664,10.767370,0.000000,0.000000,270.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,1395.937500,1555.680664,10.767370,0.000000,0.000000,270.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,1407.139648,1570.680664,10.767370,0.000000,0.000000,270.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,1424.724243,1591.541015,10.767370,0.000000,0.000000,270.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,1413.500000,1576.599975,10.767370,0.000000,0.000000,270.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,1426.584960,1603.308715,10.807369,0.000000,0.000000,270.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,1424.723632,1576.599975,10.767370,0.000000,0.000000,270.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,1413.500000,1591.541015,10.767370,0.000000,0.000000,270.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,1439.349975,1603.308593,10.807369,0.000000,0.000000,270.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,1420.183105,1609.735229,10.807369,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,1406.992065,1584.235473,10.767370,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,1431.113403,1584.235473,10.767370,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,1413.467163,1563.152465,10.767370,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,1389.568603,1563.152465,10.767370,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,1493.709960,1314.802124,11.067369,0.000000,0.000000,270.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,1515.892578,1314.801757,11.067369,0.000000,0.000000,270.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,1503.089843,1314.801757,11.067369,0.000000,0.000000,270.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,1440.640014,1603.308593,10.807369,0.000000,0.000000,270.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,1522.265991,1308.400024,11.067369,0.000000,0.000000,180.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,1522.265625,1286.170043,11.067369,0.000000,0.000000,179.994506,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,1522.265625,1295.599609,11.067369,0.000000,0.000000,179.994506,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,1510.188232,1336.435668,11.067369,0.000000,0.000000,270.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,1521.369995,1351.400024,11.067369,0.000000,0.000000,270.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,1510.187500,1351.400024,11.067369,0.000000,0.000000,270.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,1521.369140,1336.435546,11.067369,0.000000,0.000000,270.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,1527.769287,1343.853393,11.067369,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,1503.766113,1343.853393,11.067369,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11489,1516.171875,1342.754272,8.300000,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3471,1422.909179,1588.129882,11.115164,0.000000,0.000000,90.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3471,1526.429809,1349.786376,11.455789,0.000000,0.000000,270.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3471,1505.055297,1349.786376,11.455789,0.000000,0.000000,270.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3471,1505.055297,1338.152221,11.455789,0.000000,0.000000,270.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11489,1516.178466,1344.732421,8.300000,0.000000,0.000000,180.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3935,1390.722656,1569.416992,11.000000,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3935,1519.798950,1343.657104,11.000000,0.000000,0.000000,179.994506,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3398,1508.346435,1343.618286,0.000000,0.000000,0.000000,270.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3398,1523.883056,1343.618286,0.000000,0.000000,0.000000,270.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3398,1516.081298,1339.180297,0.000000,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3398,1516.081298,1348.845214,0.000000,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1544.629882,1296.179687,10.297189,0.000000,0.000000,179.994506,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1541.626953,1296.174804,10.297189,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	
	// NFS Parking
	CreateDynamicObjectExULP(7245,1566.320800,1257.912231,13.318957,0.000000,0.000000,358.000000,-1,10,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11327,1550.790771,1277.752685,12.360804,0.000000,0.000000,88.000000,-1,10,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2938,1555.203125,1261.432861,12.564229,0.000000,0.000000,358.000000,-1,10,-1,MAX_RADIO_STREAM);
	
	// CNN Garage (Interior)
	CreateDynamicObjectExULP(1498,2323.968750,1420.208984,41.894374,0.000000,0.000000,0.000000,-1,11,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3354,2319.772460,1415.900634,43.159999,0.000000,0.000000,179.994506,-1,11,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(6490,2305.228515,1404.060546,49.400001,0.000000,0.000000,0.000000,-1,11,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(6490,2355.471679,1417.965820,49.400001,0.000000,0.000000,179.994506,-1,11,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(6490,2318.591796,1463.501953,49.659999,0.000000,0.000000,270.000000,-1,11,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(6490,2281.309570,1407.185546,40.409999,0.000000,179.994506,179.994506,-1,11,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(9697,2335.207519,1405.583007,41.907245,0.000000,0.000000,180.000000,-1,11,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8843,2336.826904,1415.986083,41.884422,0.000000,0.000000,90.000000,-1,11,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1299,2338.983886,1417.963500,42.353481,0.000000,0.000000,0.000000,-1,11,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1299,2338.968750,1415.768432,42.353481,0.000000,0.000000,0.000000,-1,11,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1299,2336.850585,1418.036132,42.353481,0.000000,0.000000,0.000000,-1,11,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3463,2324.715820,1428.103759,33.200000,0.000000,0.000000,90.000000,-1,11,-1,MAX_RADIO_STREAM);

	//  CNN Garage (Exterior)
	CreateDynamicObjectExULP(1498,754.698974,-1362.342407,12.630000,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3354,751.177001,-1359.592529,13.920000,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);

	// LCN Parking (Exterior)
	CreateDynamicObjectExULP(1215,1226.594482,-2033.400146,64.790885,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,1238.059570,-2040.618164,60.595573,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1231,1183.410644,-2043.444702,70.731002,0.000000,0.000000,326.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1231,1166.483032,-2030.634765,70.731002,0.000000,0.000000,143.997314,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1231,1166.422485,-2043.241943,70.738204,0.000000,0.000000,213.997314,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1231,1183.564941,-2030.686279,70.738204,0.000000,0.000000,37.996276,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1232,1213.362060,-2033.418334,70.637733,0.000000,0.000000,89.998168,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,1169.941894,-2058.667724,68.572135,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,1197.688476,-2033.338867,68.572135,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,1226.688720,-2040.686889,64.790885,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,1238.095703,-2033.359375,60.595573,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1280,1173.276489,-2036.987670,68.542617,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1280,1176.741210,-2036.992797,68.542617,0.000000,0.000000,180.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1231,1122.815673,-2039.836547,71.466003,0.000000,0.000000,268.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1231,1122.711547,-2034.085937,71.466003,0.000000,0.000000,269.994995,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(638,1123.736450,-2040.906127,69.581352,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(638,1123.749145,-2033.054565,69.589759,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1223,1123.454345,-2068.649169,68.820312,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1223,1123.447509,-2005.178955,68.820312,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,1152.061889,-2033.213867,68.564933,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,1151.934570,-2040.829101,68.572135,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,1238.841674,-2034.078125,59.426712,0.000000,0.000000,314.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,1238.809448,-2040.013549,59.424915,0.000000,0.000000,225.994750,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1232,1213.441406,-2040.582031,70.644454,0.000000,0.000000,29.998168,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1232,1240.051757,-2038.651367,59.178497,0.000000,0.000000,29.998168,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,1197.525878,-2040.649169,68.564933,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,1180.306640,-2058.574218,68.572135,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,1169.624633,-2018.390502,68.572135,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,1174.963867,-2034.940429,68.705589,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(9915,1164.990478,-2036.199218,61.500000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(3458,1277.379150,-2027.552612,59.486183,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,1180.073242,-2018.505859,68.572135,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,1174.968750,-2039.126953,68.705589,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
//	CreateDynamicObjectExULP(6965,1259.036865,-2027.115722,58.000000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(808,1258.6516113281,-2027.1502685547,60.242851257324,0,0,0,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(808,1258.6513671875,-2027.1494140625,60.242851257324,0,0,200.65411376953,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(808,1257.5975341797,-2026.6931152344,60.242851257324,0,0,153.26409912109,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(808,1260.7309570313,-2026.9619140625,60.242851257324,0,0,200.64880371094,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(808,1260.1306152344,-2026.4216308594,60.242851257324,0,0,200.64880371094,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1290,1258.921386,-2034.929199,64.474166,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1290,1259.330810,-2019.001831,64.462471,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,1260.572875,-2028.595825,58.955032,0.000000,0.000000,225.994262,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,1257.677734,-2025.624267,59.037769,0.000000,0.000000,225.994262,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,1257.688110,-2028.611206,59.037471,0.000000,0.000000,313.994750,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,1260.580932,-2025.629394,58.954799,0.000000,0.000000,313.994750,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(997,1258.939819,-2034.476806,58.450218,0.000000,0.000000,88.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(997,1259.198974,-2022.557739,58.442817,0.000000,0.000000,87.994995,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1232,1240.059570,-2035.460937,59.178497,0.000000,0.000000,29.998168,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,1259.169921,-2022.725708,59.007968,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,1259.077148,-2030.928710,59.010604,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,1256.609863,-2027.110961,59.081130,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,1261.628051,-2027.153808,58.937721,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,1279.422851,-2013.241699,58.448707,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,1279.497680,-2027.864135,58.504837,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,1279.533325,-2041.814941,58.558864,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(3928,1116.411621,-2054.811035,73.429687,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1280,1260.811157,-2028.893798,58.798099,0.000000,0.000000,135.994567,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1280,1260.869018,-2025.337402,58.796443,0.000000,0.000000,223.994262,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1280,1257.434692,-2028.885253,58.894592,0.000000,0.000000,43.994262,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1280,1257.417968,-2025.389892,58.895069,0.000000,0.000000,315.989257,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1226,1350.798095,-1960.897216,33.979366,0.000000,0.000000,84.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1226,1422.768432,-1978.047607,49.596328,0.000000,0.000000,45.995971,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1226,1410.922485,-2032.564208,56.195240,0.000000,0.000000,127.991333,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1226,1274.169433,-1942.409179,32.192359,0.000000,0.000000,63.981445,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1226,1272.236328,-1911.358764,30.934799,0.000000,0.000000,273.978271,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1226,1334.859008,-1912.807250,24.870967,0.000000,0.000000,73.973632,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1226,1423.824218,-1926.985717,18.121509,0.000000,0.000000,307.969970,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1226,1375.093627,-2055.617187,58.618698,0.000000,0.000000,297.990722,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,1175.000000,-2036.900756,77.300003,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);

 	// Parking LS Ayuntamiento Museo (Exterior)
	CreateDynamicObjectExULP(997,1279.607421,-1837.209960,12.384038,0.000000,0.000000,0.395507,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(997,1276.624633,-1838.506225,12.388404,0.000000,0.000000,23.994995,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(997,1275.122070,-1841.387695,12.390857,0.000000,0.000000,61.990356,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1237,1274.762939,-1841.851806,12.390710,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(996,1268.902099,-1820.353393,13.320185,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(8674,1254.522460,-1837.412109,14.031756,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1597,1267.938720,-1816.926025,15.045296,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(966,1273.502929,-1841.975219,12.397403,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(8674,1282.953125,-1821.704101,14.035494,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(8674,1282.947021,-1831.998046,14.048386,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(997,1268.126342,-1825.113159,12.381761,0.000000,0.000000,90.395507,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(997,1260.383056,-1837.274291,12.379055,0.000000,0.000000,338.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(8674,1282.952148,-1811.396606,14.035359,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(8674,1282.929321,-1801.102294,14.043610,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1359,1281.758056,-1846.696411,13.252667,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1231,1282.621948,-1836.809082,15.113204,0.000000,0.000000,180.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1232,1249.349121,-1804.855224,15.239025,0.000000,0.000000,304.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1232,1278.025268,-1840.400878,15.196559,0.000000,0.000000,353.995971,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(997,1280.367187,-1842.188476,12.571292,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1290,1268.025512,-1828.598510,18.405960,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1290,1268.051757,-1805.245239,18.422550,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(997,1280.062500,-1841.476562,12.570016,0.000000,0.000000,90.390014,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(997,1268.174316,-1811.938354,12.392381,0.000000,0.000000,90.390014,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(996,1267.422729,-1820.363281,13.343283,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,1274.077270,-1841.999511,12.961797,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,1268.136718,-1814.909179,13.154189,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1223,1269.063964,-1816.977783,12.289999,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1223,1267.294311,-1817.032714,12.257081,0.000000,0.000000,180.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1237,1209.456176,-1841.883422,12.382812,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(997,1263.474365,-1838.445800,12.379446,0.000000,0.000000,298.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(997,1253.229370,-1842.170654,12.563091,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(997,1259.901611,-1841.518676,12.570432,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(997,1256.491210,-1842.170898,12.563859,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(997,1250.003784,-1842.170776,12.562284,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,1268.139404,-1821.471801,13.163710,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,1266.178710,-1841.959960,12.961683,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,1260.008544,-1837.511596,13.108448,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(997,1246.715576,-1842.179931,12.560426,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(997,1243.492797,-1842.184570,12.559085,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(8674,1244.238525,-1837.417846,14.034909,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(8674,1233.947631,-1837.422241,14.044484,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(8674,1228.805664,-1837.410766,14.044377,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(8674,1282.920776,-1798.530029,14.042506,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(8674,1259.479003,-1793.161621,14.060666,0.000000,0.000000,180.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1231,1282.876586,-1793.168212,15.289043,0.000000,0.000000,165.994506,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(3458,1280.435424,-1815.352172,13.904354,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(8674,1277.495117,-1793.136718,14.034947,0.000000,0.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(8674,1267.179687,-1793.156250,14.052462,0.000000,0.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(997,1268.147094,-1808.717407,12.395574,0.000000,0.000000,90.390014,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(997,1268.152832,-1828.353149,12.382568,0.000000,0.000000,90.390014,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,1268.162963,-1812.621582,13.156495,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(8843,1272.323852,-1810.031982,12.383905,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(997,1240.176879,-1842.198242,12.552051,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(9697,1278.933349,-1784.635253,12.411352,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,1282.609863,-1802.181274,12.947135,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,1282.530883,-1829.281372,12.947135,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,1282.610351,-1815.272460,12.947135,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(3458,1241.262695,-1834.768432,13.912359,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(6965,1265.243530,-1816.791259,15.300076,0.000000,0.000000,350.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(996,1236.369628,-1821.631469,13.169631,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(997,1236.529052,-1822.223022,12.570095,0.000000,0.000000,0.390014,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(997,1236.624267,-1818.219116,12.425502,0.000000,0.000000,0.384521,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(997,1236.635742,-1814.166748,12.431423,0.000000,0.000000,0.384521,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1226,1237.051513,-1818.067871,16.447694,0.000000,0.000000,180.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1232,1261.543945,-1840.279296,15.191938,0.000000,0.000000,303.997192,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1232,1235.925781,-1825.027343,15.225936,0.000000,0.000000,303.997192,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1232,1259.133911,-1794.086547,15.230392,0.000000,0.000000,263.997192,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(997,1263.929565,-1819.704345,12.392314,0.000000,0.000000,357.990356,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(997,1262.333984,-1816.786254,12.444844,0.000000,0.000000,65.989013,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(997,1263.929687,-1819.599975,12.449708,0.000000,0.000000,120.500000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(997,1263.697265,-1813.828125,12.398187,0.000000,0.000000,359.989013,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(996,1261.629272,-1816.758789,13.147616,0.000000,0.000000,178.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1290,1253.889526,-1816.494750,18.433032,0.000000,0.000000,272.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,1239.920043,-1822.204101,12.978591,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,1262.987304,-1816.810546,12.960813,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,1254.779296,-1800.704101,13.158073,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,1240.084960,-1814.160156,12.990701,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1232,1195.135986,-1837.418701,15.228219,0.000000,0.000000,121.997192,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(997,1236.928344,-1842.187500,12.557165,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(997,1233.648437,-1842.178833,12.558223,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(997,1230.394897,-1842.188232,12.557071,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(997,1227.145629,-1842.187500,12.557168,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(997,1223.815185,-1842.192382,12.556568,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(997,1223.849243,-1841.443115,12.556568,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(997,1220.591796,-1838.350952,12.379682,0.000000,0.000000,18.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(997,1218.792968,-1841.036132,12.382743,0.000000,0.000000,55.995605,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1237,1265.414062,-1841.870117,12.397094,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,1255.130859,-1837.105468,12.949447,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,1241.144165,-1837.017211,12.949663,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,1227.026123,-1837.010253,12.949680,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(8843,1247.272338,-1809.444702,12.422752,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(8843,1241.475585,-1829.804809,12.405235,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(8843,1213.395996,-1830.983886,12.404933,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(966,1210.269775,-1841.924194,12.382812,0.000000,0.000000,180.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,1208.895507,-1841.993286,12.947135,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,1218.549804,-1841.340820,12.947425,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1237,1217.917114,-1841.920288,12.383823,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(8674,1194.929077,-1832.455444,14.058323,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(8674,1194.923828,-1824.736328,14.056635,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(997,1208.818359,-1841.832519,12.533013,0.000000,0.000000,111.991790,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(997,1207.501464,-1838.801391,12.552733,0.000000,0.000000,151.989135,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(997,1204.674682,-1837.197998,12.552733,0.000000,0.000000,179.984863,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(997,1201.501342,-1837.225219,12.560050,0.000000,0.000000,179.983520,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(997,1198.287597,-1837.200805,12.647884,0.000000,0.000000,179.983520,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1226,1214.252807,-1826.167602,16.447694,0.000000,0.000000,89.994506,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1232,1195.059570,-1825.068359,15.225875,0.000000,0.000000,121.992187,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,1201.618164,-1829.528442,12.971033,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(994,1195.260620,-1825.523315,12.411600,0.000000,0.000000,0.099975,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(994,1195.150390,-1829.520507,12.411600,0.000000,0.000000,0.098876,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(994,1195.041015,-1833.518554,12.411600,0.000000,0.000000,0.098876,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,1204.655273,-1823.446289,13.155933,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,1201.536743,-1833.508544,12.966175,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1280,1267.761840,-1808.952636,12.797359,0.000000,0.000000,1.100006,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1280,1267.684204,-1825.211791,12.782815,0.000000,0.000000,1.098632,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1280,1200.526367,-1820.425537,12.986890,0.000000,0.000000,91.098632,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1280,1207.900756,-1820.355957,12.997495,0.000000,0.000000,91.093139,-1,-1,-1,MAX_RADIO_STREAM_MIN);

	// Parking LS Ayuntamiento (Exterior)
	CreateDynamicObjectExULP(970,1103.583007,-1735.109985,13.329674,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,1085.211059,-1748.076538,13.136919,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,1080.903564,-1748.078002,13.137122,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,1080.829223,-1752.772216,13.136510,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,1087.304077,-1750.438110,13.134463,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,1074.380493,-1750.408569,13.136579,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,1076.487304,-1748.081054,13.137646,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,1076.491210,-1752.765625,13.137223,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,1085.164306,-1752.760375,13.137951,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(994,1080.834350,-1753.303710,12.393437,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(994,1080.842407,-1762.135864,12.374027,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(994,1080.833862,-1770.957397,12.354638,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1232,1101.984252,-1777.263061,15.157470,0.000000,0.000000,14.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,1095.333740,-1735.111816,13.318475,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1232,1080.790039,-1760.863281,15.013465,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,1091.235717,-1735.113281,13.307429,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,1087.119262,-1735.118652,13.296235,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,1082.993774,-1735.120849,13.285094,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,1078.883544,-1735.126586,13.273907,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1232,1102.769409,-1735.262451,15.414836,0.000000,0.000000,267.994995,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,1074.754638,-1735.122680,13.262912,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,1062.417846,-1735.123168,13.229753,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,1070.652343,-1735.120117,13.251939,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,1066.550781,-1735.122070,13.240866,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,1058.624755,-1738.964111,13.209147,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1232,1080.403320,-1735.278320,15.359355,0.000000,0.000000,267.994995,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,1058.625610,-1747.213623,13.175115,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,1058.628906,-1743.087890,13.188117,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,1058.577148,-1771.881347,13.097993,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,1058.616210,-1751.331054,13.162259,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,1058.616210,-1755.428710,13.149252,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,1058.605468,-1759.556640,13.136418,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,1058.597656,-1763.650390,13.123600,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,1058.584960,-1767.767578,13.110849,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,1058.569335,-1773.971313,13.091551,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,1062.307128,-1777.802856,13.085154,0.000000,0.000000,180.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1232,1058.973999,-1777.288330,15.168144,0.000000,0.000000,283.994995,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,1099.450195,-1735.107421,13.325245,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(4639,1105.252075,-1735.870483,14.293463,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(3458,1060.893066,-1756.323608,13.899999,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1232,1059.050659,-1735.591186,15.301153,0.000000,0.000000,195.990356,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(8843,1080.548217,-1742.054809,12.499587,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(8843,1069.975219,-1762.236083,12.499587,0.000000,0.000000,180.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(8843,1091.232666,-1761.815063,12.499587,0.000000,0.000000,359.994506,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1280,1074.090698,-1750.480712,12.818410,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1280,1083.471191,-1747.715454,12.826214,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1280,1078.297485,-1747.696411,12.839015,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1280,1087.656250,-1750.514648,12.787152,0.000000,0.000000,180.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,1074.647827,-1777.812988,13.085407,0.000000,0.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,1066.424804,-1777.807617,13.085294,0.000000,0.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,1070.534179,-1777.811523,13.085389,0.000000,0.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,1078.765136,-1777.814575,13.085446,0.000000,0.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,1086.943237,-1777.812744,13.085400,0.000000,0.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,1082.868164,-1777.812500,13.085412,0.000000,0.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,1095.169433,-1777.798461,13.085044,0.000000,0.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,1091.067382,-1777.806640,13.085269,0.000000,0.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,1102.533935,-1770.694335,13.075816,0.000000,0.000000,269.994506,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1232,1080.797851,-1769.426757,14.994642,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,1099.293945,-1777.802734,13.085157,0.000000,0.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,1102.532226,-1774.825195,13.075802,0.000000,0.000000,269.994506,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,1102.524902,-1754.182983,13.075703,0.000000,0.000000,269.989013,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,1102.521484,-1766.561523,13.075670,0.000000,0.000000,269.989013,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,1102.525390,-1762.427734,13.075710,0.000000,0.000000,269.989013,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,1102.521484,-1758.327148,13.075668,0.000000,0.000000,269.989013,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,1091.110107,-1777.482177,13.090007,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,1092.328125,-1735.402587,13.315998,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,1069.839111,-1777.510253,13.090706,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,1058.804687,-1762.410156,13.135228,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,1058.813476,-1749.195312,13.176974,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,1086.878173,-1750.408203,13.197140,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,1074.841796,-1750.500000,13.203398,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,1070.672851,-1735.377929,13.258422,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,1102.250732,-1763.896484,13.085131,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1232,1102.690185,-1751.760864,15.162923,0.000000,0.000000,359.996582,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(5837,1109.999023,-1748.442382,14.287807,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(966,1106.553466,-1745.013183,12.404897,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,1104.500976,-1750.242187,13.116345,0.000000,0.000000,217.989013,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,1106.917724,-1746.770874,13.429908,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1237,1106.587158,-1746.008422,12.276946,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1237,1106.550292,-1737.537597,12.534008,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1237,1059.570312,-1777.780151,12.533107,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1237,1102.013427,-1777.954833,12.535427,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1237,1102.639648,-1777.335937,12.532339,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1237,1058.651367,-1776.680664,12.529404,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1237,1059.732299,-1735.301513,12.666612,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1237,1058.745117,-1736.321289,12.663042,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1425,1069.862426,-1776.998413,12.788907,0.000000,0.000000,180.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1425,1091.181518,-1777.017089,12.791917,0.000000,0.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(669,1051.339477,-1768.488769,12.630310,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(673,1050.945434,-1745.861450,12.663967,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(673,1051.061523,-1737.047851,12.673456,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);

	// Jizzy (Exterior)
	CreateDynamicObjectExULP(16096,-2680.447753,1399.912963,24.807270,0.000000,0.000000,259.500000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1498,1870.468750,-1669.174804,30.804687,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3934,1871.205688,-1656.578735,30.804687,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3934,-2641.604492,1418.667968,22.892593,0.000000,0.000000,285.371398,-1,-1,-1,MAX_RADIO_STREAM);

	// Jizzy (Interior)
	CreateDynamicObjectExULP(1498,-2676.6767578125,1392.1864013672,917.3515625,0,0,90,-1, 3, -1, MAX_RADIO_STREAM);

	// Alhambra (Interior)
	CreateDynamicObjectExULP(1498,473.4755859375,-12.478381156921,1002.6953125,0,0,90,-1, 17, -1, MAX_RADIO_STREAM);


// Almacén Traficantes (Interior)
	CreateDynamicObjectExULP(18353,2839.550537,1978.619384,27.100000,0.000000,0.000000,0.000000,-1,10,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3375,2809.988525,1981.734985,21.700000,0.000000,180.000000,90.000000,-1,10,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3375,2791.563476,2013.301025,20.418390,0.000000,0.000000,90.000000,-1,10,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3375,2826.611083,1991.764526,20.418390,0.000000,0.000000,270.000000,-1,10,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3419,2804.580810,2013.398071,15.300000,0.000000,0.000000,270.000000,-1,10,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3419,2819.600097,2013.397460,15.399999,0.000000,0.000000,270.000000,-1,10,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3419,2822.000000,1991.737548,15.300000,0.000000,0.000000,90.000000,-1,10,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3419,2807.591796,1991.737304,15.300000,0.000000,0.000000,90.000000,-1,10,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14875,2801.760986,2002.701538,16.449001,0.000000,0.000000,90.000000,-1,10,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1458,2801.593261,1995.838134,15.998999,0.000000,0.000000,0.000000,-1,10,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1457,2802.519287,2009.015991,17.290674,0.000000,0.000000,90.000000,-1,10,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1453,2802.868164,2009.765380,16.175411,0.000000,0.000000,0.000000,-1,10,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1452,2805.328613,1994.935791,16.695289,0.000000,0.000000,180.000000,-1,10,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,2803.533203,2009.812500,15.724126,0.000000,0.000000,0.000000,-1,10,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2063,2810.967773,1994.725097,16.597202,0.000000,0.000000,180.000000,-1,10,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2037,2809.969970,1995.006469,16.195917,0.000000,0.000000,193.762161,-1,10,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2037,2810.262695,1994.938964,16.195917,0.000000,0.000000,193.760375,-1,10,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2037,2810.662109,1995.001098,16.195917,0.000000,0.000000,193.760375,-1,10,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2037,2811.337890,1994.923095,16.195917,0.000000,0.000000,193.760375,-1,10,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2037,2811.630859,1994.854858,16.195917,0.000000,0.000000,193.760375,-1,10,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2037,2811.922851,1995.020019,16.195917,0.000000,0.000000,193.760375,-1,10,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2037,2811.023437,1994.972656,16.195917,0.000000,0.000000,193.760375,-1,10,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2037,2809.939697,1994.781982,16.579145,0.000000,0.000000,193.760375,-1,10,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2037,2810.464111,1994.750488,16.579145,0.000000,0.000000,193.760375,-1,10,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2037,2811.213378,1994.706054,16.579145,0.000000,0.000000,193.760375,-1,10,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2037,2811.966796,1994.736938,16.579145,0.000000,0.000000,193.760375,-1,10,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2037,2812.038574,1994.566284,17.029989,0.000000,0.000000,193.760375,-1,10,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2037,2811.982421,1994.783325,17.029989,0.000000,0.000000,193.760375,-1,10,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2037,2811.473144,1994.653320,17.029989,0.000000,0.000000,193.760375,-1,10,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2037,2811.416992,1994.871215,17.029989,0.000000,0.000000,193.760375,-1,10,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2037,2810.853515,1994.650024,17.029989,0.000000,0.000000,193.760375,-1,10,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2037,2810.779296,1994.939941,17.029989,0.000000,0.000000,193.760375,-1,10,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2037,2810.234375,1994.645751,17.029989,0.000000,0.000000,193.760375,-1,10,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2037,2810.087402,1994.917480,17.029989,0.000000,0.000000,193.760375,-1,10,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2037,2809.816650,1994.749633,17.029989,0.000000,0.000000,193.760375,-1,10,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14875,2816.347900,1996.035400,16.449001,0.000000,0.000000,270.000000,-1,10,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3375,2809.286132,2023.383178,21.700000,0.000000,179.994506,90.000000,-1,10,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3276,1007.579101,-338.182617,73.894706,0.000000,0.000000,90.000000,-1,10,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3276,1007.630859,-373.458007,73.387367,0.000000,355.995483,90.000000,-1,10,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3276,1094.708984,-285.850006,73.894706,0.000000,0.000000,348.750000,-1,10,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3276,1035.432617,-279.944335,73.894706,0.000000,0.000000,0.000000,-1,10,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3276,1071.199218,-282.135742,73.887573,0.000000,0.000000,356.248168,-1,10,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3276,1106.414794,-288.211730,73.894706,0.000000,0.000000,348.750000,-1,10,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3276,1118.153686,-290.551971,73.894706,0.000000,0.000000,348.750000,-1,10,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3276,1124.226562,-297.668823,73.894706,0.000000,0.000000,272.595886,-1,10,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3276,1124.088012,-309.453887,73.894706,0.000000,0.000000,265.842773,-1,10,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3276,1123.213867,-321.227539,73.894706,0.000000,0.000000,265.841674,-1,10,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3276,1122.376342,-332.939331,73.894706,0.000000,0.000000,265.841674,-1,10,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3276,1121.505493,-344.708770,73.894706,0.000000,0.000000,265.841674,-1,10,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3276,1120.705810,-356.523498,73.894706,0.000000,0.000000,265.841674,-1,10,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3276,1116.872192,-365.612792,73.885162,0.000000,0.000000,219.527404,-1,10,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3276,1095.336547,-368.477905,73.885162,0.000000,0.000000,180.000000,-1,10,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3276,1048.499023,-368.449798,73.894706,0.000000,0.000000,179.994506,-1,10,-1,MAX_RADIO_STREAM);

// AK 1 (Exterior)
	CreateDynamicObjectExULP(966,-2479.876953,-132.609375,24.617187,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237,-2479.769775,-135.282043,24.617187,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237,-2479.769775,-133.342590,24.617187,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237,-2479.769775,-123.294921,24.617187,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237,-2479.769775,-125.094726,24.617187,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237,-2479.769775,-124.194335,24.617187,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237,-2479.769775,-134.310058,24.617187,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,-2470.245117,-167.293914,25.700000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,-2470.245117,-163.190002,25.700000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,-2446.699707,-163.999801,35.400001,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,-2446.699218,-167.302734,35.400001,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,-2445.999023,-88.763633,34.000000,359.599975,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,-2451.279296,-88.762695,34.000000,0.500000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3035,-2466.730712,-93.500663,25.505241,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1438,-2457.550292,-93.543586,24.990940,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1438,-2460.592041,-93.590621,24.950607,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1415,-2456.942138,-96.055381,24.978725,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(933,-2467.339599,-95.613624,24.698764,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(947,-2463.729980,-99.577713,27.065383,0.000000,0.000000,180.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2114,-2459.577636,-97.256088,25.125411,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2114,-2459.568115,-97.790901,25.125679,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3065,-2464.377441,-101.284461,24.979293,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);

// AK 2 (Exterior)
	CreateDynamicObjectExULP(5816,-2462.719482,-151.243804,29.100000,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8673,-2489.756835,-147.942855,34.115497,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8673,-2477.594970,-159.275207,34.115497,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8673,-2477.748779,-136.149063,34.115497,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1281,-2478.500244,-148.066757,33.448963,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1281,-2478.669189,-154.773223,33.448963,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1281,-2469.806640,-148.192733,33.448963,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1281,-2478.291992,-141.471466,33.448963,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1281,-2469.750244,-141.523300,33.448963,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1281,-2469.789794,-154.997772,33.448963,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2232,-2487.077880,-150.384826,33.246459,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2232,-2487.166503,-145.721801,33.246459,0.000000,0.000000,89.250000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2100,-2487.369873,-148.192062,32.648582,0.000000,0.000000,92.038818,-1,-1,-1,MAX_RADIO_STREAM);
	
// Puerta de Casa Gian Ayuntamiento
	CreateDynamicObjectExULP(3354,1371.577392,-1767.243164,13.844690,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);

// AK (Interior)
	CreateDynamicObjectExULP(14735,2690.945312,811.578125,11.588800,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1502,2678.898437,815.489257,9.963800,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1502,2686.113281,816.592773,9.963800,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1502,2683.497070,813.159179,9.971218,0.000000,0.000000,270.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1502,2667.759765,813.219726,9.971218,0.000000,0.000000,270.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1801,2661.506591,812.002197,9.963800,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1801,2664.297119,811.978027,9.963800,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1801,2662.442138,812.977722,9.963800,0.000000,0.000000,180.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1801,2665.247802,812.930114,9.963800,0.000000,0.000000,179.994506,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2135,2690.300292,811.365600,9.971218,0.000000,0.000000,270.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2136,2688.140136,808.860290,9.971218,0.000000,0.000000,180.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2138,2689.217041,808.882080,9.963800,0.000000,0.000000,180.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2139,2690.250976,810.214599,9.971218,0.000000,0.000000,270.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2140,2690.344970,812.515808,9.971218,0.000000,0.000000,270.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2303,2690.304443,815.010498,9.971218,0.000000,0.000000,270.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2305,2690.295654,808.960327,9.971218,0.000000,0.000000,270.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2140,2690.334472,813.662780,9.971218,0.000000,0.000000,270.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1432,2688.333007,813.538085,9.971218,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1432,2685.756591,810.718994,9.971218,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1728,2676.063964,807.604492,9.963800,0.000000,0.000000,90.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1709,2677.466064,809.982421,9.963800,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2100,2682.904296,807.336975,9.963800,0.000000,0.000000,215.057006,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2297,2679.936767,806.617553,9.963800,0.000000,0.000000,133.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2370,2679.232177,808.320495,9.399999,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1670,2679.897460,809.063293,10.246898,0.000000,0.000000,344.115356,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1670,2679.039062,808.380859,10.246898,0.000000,0.000000,92.788787,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1670,2679.795410,808.442260,10.246898,0.000000,0.000000,270.957458,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1485,2679.346435,809.249755,10.246898,0.000000,0.000000,151.103088,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2282,2673.055419,814.947692,11.568948,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2282,2677.247802,814.948791,11.568948,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2282,2675.244384,814.899414,11.568948,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2063,2685.299804,818.919982,10.872753,0.000000,0.000000,90.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1433,2679.277343,818.887695,10.143487,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2079,2679.136962,817.677978,10.599592,0.000000,0.000000,273.051025,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2079,2680.303955,818.770507,10.599592,0.000000,0.000000,1.174407,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2079,2679.234619,820.254028,10.599592,0.000000,0.000000,89.888275,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2079,2678.022216,818.946289,10.599592,0.000000,0.000000,183.691528,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,2673.718750,804.203796,9.963800,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1756,2678.951171,821.992370,9.963800,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2089,2682.4677734375, 820.240234375, 9.9638004302979,0,0,270,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2089,2682.4853515625,818.3203125,9.9638004302979,0,0,270,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1717,2678.029785,815.968078,9.963800,0.000000,0.000000,90.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2859,2685.731445,810.702148,10.586556,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2839,2688.421142,813.564147,10.586556,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,2685.258789,818.108032,10.399999,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,2685.556640,818.140625,10.399999,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,2685.399169,818.877563,10.399999,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,2685.232666,819.688415,10.399999,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,2685.530273,819.720703,10.399999,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,2685.220947,818.043273,10.840000,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,2685.455810,818.743591,10.840000,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,2685.256103,819.251281,10.840000,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,2685.444580,819.645812,10.840000,0.000000,0.000000,359.250000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,2685.252441,819.677795,11.239999,0.000000,0.000000,359.247436,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,2685.243896,818.852600,11.239999,0.000000,0.000000,359.247436,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,2685.160156,818.028198,11.239999,0.000000,0.000000,359.247436,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1498,2689.150390,818.716369,9.970716,0.000000,0.000000,90.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3557,2626.375732,791.780395,12.399999,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3557,2626.375000,801.400024,12.399999,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3557,2662.978515,797.000000,12.399999,0.000000,0.000000,180.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3557,2662.978515,787.400390,12.399999,0.000000,0.000000,179.994506,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3557,2633.959960,777.322875,12.399999,0.000000,0.000000,90.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3557,2643.615234,777.322265,12.399999,0.000000,0.000000,90.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3557,2635.209960,808.558593,12.399999,0.000000,0.000000,270.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(6057,2647.476318,789.907104,18.100492,180.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3557,2653.239990,777.322265,12.399999,0.000000,0.000000,90.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3557,2644.875000,808.558593,12.399999,0.000000,0.000000,270.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3557,2654.540039,808.558593,12.399999,0.000000,0.000000,270.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3557,2659.174804,801.697082,12.399999,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3352,2655.447265,789.488403,11.361563,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1498,2653.171386,801.015441,10.000000,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3783,2645.427001,797.509948,7.769999,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3783,2645.699951,790.251464,7.769999,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3783,2645.699951,782.989990,7.769999,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(996,2634.231445,797.538879,10.821209,0.000000,0.000000,90.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(996,2639.231445,797.538085,10.821209,0.000000,0.000000,90.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(996,2644.231445,797.538085,10.821209,0.000000,0.000000,90.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(996,2649.231445,797.538085,10.821209,0.000000,0.000000,90.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(996,2639.231445,781.500000,10.821209,0.000000,0.000000,90.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(996,2634.231445,781.500000,10.821209,0.000000,0.000000,90.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(996,2644.231445,781.500000,10.821209,0.000000,0.000000,90.000000,-1,6,-1,MAX_RADIO_STREAM);

// COLTS (Interior)
	CreateDynamicObjectExULP(5489,1073.449584,1759.348876,9.989999,0.000000,0.000000,90.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3823,1061.706054,1731.100585,18.399999,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3823,1076.129882,1731.100585,18.399999,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3823,1086.761718,1739.473632,18.399999,0.000000,0.000000,90.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3823,1086.762084,1753.947509,18.399999,0.000000,0.000000,90.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3823,1075.013793,1757.791625,18.399999,0.000000,0.000000,180.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3823,1060.533569,1757.791625,18.399999,0.000000,0.000000,180.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3823,1052.585937,1745.085815,18.399999,0.000000,0.000000,270.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3823,1052.585937,1730.609985,18.399999,0.000000,0.000000,270.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11327,1067.538452,1736.076782,12.406847,0.000000,0.000000,270.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2949,1079.430664,1752.807617,9.880598,0.000000,0.000000,90.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,1071.720703,1752.920410,11.023713,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,1077.015625,1752.830078,11.023713,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,1083.103881,1752.834228,11.023713,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,1081.826416,1749.964477,11.023713,0.000000,0.000000,270.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,1081.918945,1744.583618,11.023713,0.000000,0.000000,270.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,1081.933715,1739.115844,11.023713,0.000000,0.000000,270.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,1078.969482,1736.000488,11.023713,0.000000,0.000000,180.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,1073.507934,1735.964599,11.023713,0.000000,0.000000,179.994506,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,1059.389892,1736.063720,11.023713,0.000000,0.000000,179.994506,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,1057.457641,1738.755371,11.023713,0.000000,0.000000,270.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,1057.436523,1744.339355,11.023713,0.000000,0.000000,270.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,1057.434204,1749.876220,11.023713,0.000000,0.000000,270.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,1060.335571,1752.885131,11.023713,0.000000,0.000000,179.994506,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,1065.855346,1752.830932,11.023713,0.000000,0.000000,179.994506,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5489,1066.754150,1757.517456,15.000000,180.000000,0.000000,90.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3823,1087.269531,1700.837890,13.000000,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3823,1101.745117,1700.837890,13.000000,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3823,1099.874633,1714.288940,13.000000,0.000000,0.000000,180.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3823,1086.909667,1719.371459,13.000000,0.000000,0.000000,179.994506,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3823,1098.214843,1717.932983,13.000000,0.000000,0.000000,90.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3823,1082.760620,1706.357788,13.000000,0.000000,0.000000,270.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3823,1108.474365,1707.000244,13.000000,0.000000,0.000000,90.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2949,1103.421875,1708.235839,9.820312,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2949,1087.889770,1706.761474,9.820312,0.000000,0.000000,179.994506,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5726,1092.852539,1710.784179,5.099999,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5726,1090.685546,1710.266601,17.229999,179.994506,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2114,1092.898437,1714.035888,10.061633,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2114,1092.445434,1714.009887,10.061633,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1432,1090.905029,1710.687866,9.915323,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2037,1091.271728,1710.969604,10.603021,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2037,1092.331665,1714.123168,5.837526,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2035,1090.874389,1710.457275,10.555098,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,1090.670043,1710.987670,10.600000,0.000000,0.000000,295.980590,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2063,1090.092895,1713.922241,10.824275,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,1090.866943,1714.027465,10.319999,0.000000,0.000000,272.595825,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,1090.829589,1713.805419,10.319999,0.000000,0.000000,272.592773,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,1089.879638,1714.037353,10.319999,0.000000,0.000000,273.342773,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,1089.924316,1713.740722,10.319999,0.000000,0.000000,273.339843,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,1089.296997,1713.871704,10.319999,0.000000,0.000000,273.339843,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,1090.932373,1713.960205,10.800000,0.000000,72.749969,266.592773,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,1090.245361,1713.770263,10.800000,0.000000,72.745971,266.588745,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,1089.353515,1713.966308,10.800000,0.000000,72.745971,266.588745,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,1090.181884,1713.997802,10.800000,0.000000,72.745971,266.588745,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2915,1089.571777,1713.937744,11.714436,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2915,1091.071533,1713.958007,11.714436,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2967,1090.984863,1710.821044,10.530661,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);

// Teatro LS (Interior)
	CreateDynamicObjectExULP(8534,1382.706054,1861.085937,19.688192,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8534,1438.048828,1811.046875,19.688192,0.000000,0.000000,270.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8534,1384.530273,1781.747070,19.688192,0.000000,0.000000,179.994506,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8534,1341.440429,1805.436523,19.688192,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8534,1387.245117,1829.355468,15.000000,179.994506,0.000000,270.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8534,1373.250976,1829.355468,15.000000,179.994506,0.000000,270.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8534,1359.193359,1829.355468,15.000000,0.000000,179.994506,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8534,1511.268554,1727.452148,14.399999,179.994506,0.000000,270.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8535,1378.649414,1832.771484,-4.000000,0.000000,270.000000,270.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8535,1369.328125,1805.099487,-4.000000,0.000000,270.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8535,1375.538818,1805.099487,-4.000000,0.000000,270.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8535,1381.793945,1805.098632,-4.000000,0.000000,270.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8535,1387.967651,1805.099487,-4.000000,0.000000,270.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8535,1393.753906,1805.098632,-4.000000,0.000000,270.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1290,1370.140625,1830.417968,4.000000,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1290,1375.820678,1830.693847,4.000000,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1290,1382.107421,1830.877441,4.000000,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1290,1388.401977,1830.642578,4.000000,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1290,1393.928100,1830.526611,4.000000,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8535,1399.375000,1812.626953,-3.299999,0.000000,270.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8535,1405.666015,1813.271484,-3.900000,0.000000,270.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8535,1413.179687,1817.372070,5.099999,0.000000,179.994506,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1723,1383.400024,1825.705810,9.843520,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1723,1371.109985,1822.705078,9.843520,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1723,1383.400024,1819.705078,9.843520,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1723,1383.399414,1816.705078,9.843520,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1723,1383.400024,1813.705078,9.843520,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1723,1377.109985,1810.705078,9.843520,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1723,1371.109375,1825.705078,9.843520,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1723,1383.400024,1822.705078,9.843520,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1723,1371.109375,1819.705078,9.843520,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1723,1371.109375,1816.705078,9.843520,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1723,1371.109375,1813.705078,9.843520,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1723,1371.109375,1810.705078,9.843520,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1723,1377.109375,1825.705078,9.843520,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1723,1377.109375,1822.705078,9.843520,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1723,1377.109375,1819.705078,9.843520,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1723,1377.109375,1816.705078,9.843520,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1723,1377.109375,1813.705078,9.843520,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1723,1389.599975,1810.705078,9.843520,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1723,1389.599975,1825.705078,9.843520,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1723,1389.599975,1822.705078,9.843520,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1723,1389.599975,1819.705078,9.843520,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1723,1389.599975,1816.705078,9.843520,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1723,1395.400024,1813.705078,9.843520,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1723,1383.399414,1810.705078,9.843520,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1723,1395.399414,1825.705078,9.843520,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1723,1395.400024,1810.705078,9.843520,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1723,1389.599609,1813.705078,9.843520,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1723,1395.400024,1816.705078,9.843520,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1723,1395.399414,1819.705078,9.843520,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1723,1395.400024,1822.705078,9.843520,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1536,1409.600463,1827.750122,9.909999,0.000000,0.000000,270.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1536,1369.890014,1828.423461,9.835936,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1536,1369.849975,1831.439941,9.835936,0.000000,0.000000,270.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8535,1405.966430,1791.529907,-4.199999,0.000000,270.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8535,1406.238525,1791.468383,-4.400000,0.000000,270.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8535,1406.447998,1791.403076,-4.599999,0.000000,270.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1295,1399.019531,1833.979492,10.853732,0.000000,0.000000,270.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1295,1403.019531,1833.979492,10.853732,0.000000,0.000000,270.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1295,1407.019531,1833.979492,10.853732,0.000000,0.000000,270.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1295,1400.826171,1809.179687,10.853732,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1295,1404.826171,1809.179687,10.853732,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1295,1408.826171,1809.179687,10.853732,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1295,1410.727661,1828.201782,10.853732,0.000000,0.000000,180.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1295,1410.727539,1824.201171,10.853732,0.000000,0.000000,179.994506,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1295,1410.727539,1820.201171,10.853732,0.000000,0.000000,179.994506,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1295,1410.727539,1816.201171,10.853732,0.000000,0.000000,179.994506,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1723,1403.069213,1825.006225,10.535937,0.000000,0.000000,329.166320,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1704,1404.728759,1819.148925,10.535937,0.000000,0.000000,224.781616,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3494,1402.637451,1813.985717,14.549712,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3494,1402.637451,1828.945312,14.549712,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3494,1402.636718,1828.945312,20.000000,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3494,1402.636718,1813.985351,20.000000,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1827,1403.299804,1821.473266,10.535935,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2108,1403.417602,1817.724365,10.535935,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8534,1565.036010,1726.130859,19.688192,0.000000,0.000000,270.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8535,1525.234375,1724.335937,-4.000000,0.000000,270.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8535,1537.794921,1724.335937,-4.000000,0.000000,270.000000,179.994506,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8534,1498.071533,1721.844238,19.688192,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8534,1519.122558,1770.837890,19.688192,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8534,1344.975585,1829.355468,15.000000,179.994506,0.000000,270.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1536,1536.599975,1723.439941,9.835934,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1536,1536.560058,1726.464843,9.835934,0.000000,0.000000,270.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1536,1536.599609,1714.439453,9.835934,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1536,1536.559570,1717.464843,9.835934,0.000000,0.000000,270.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1536,1526.516845,1729.640014,9.835936,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1536,1526.512695,1709.182617,9.835936,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1537,1534.541015,1731.135742,9.835934,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1537,1532.989257,1709.159179,9.835935,0.000000,0.000000,179.994506,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8534,1517.332031,1669.445312,19.639999,0.000000,0.000000,270.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14606,1525.255859,1724.015380,14.500000,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2605,1528.818969,1723.467163,10.234373,0.000000,0.000000,302.140808,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2605,1528.463745,1717.543212,10.234373,0.000000,0.000000,245.806762,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1537,1526.619018,1721.499511,9.835936,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2309,1527.846313,1722.899291,9.835936,0.000000,0.000000,309.480590,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2309,1527.454101,1717.946289,9.835936,0.000000,0.000000,251.165069,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8535,1511.447265,1650.294921,-4.000000,0.000000,270.000000,179.994506,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8535,1482.739135,1660.980957,-4.000000,0.000000,270.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8534,1538.533569,1647.296386,19.639999,0.000000,0.000000,270.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8534,1444.315185,1659.984985,19.639999,0.000000,0.000000,180.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8534,1487.287841,1697.843383,19.688192,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8534,1484.132202,1655.492187,19.688192,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8534,1489.111083,1662.199218,14.399999,179.994506,0.000000,270.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8534,1466.156127,1662.168701,14.399999,179.994506,0.000000,270.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1537,1487.248291,1669.314208,9.835935,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1537,1508.557250,1669.309326,9.835936,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1537,1505.541992,1645.984985,9.835936,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1537,1488.824829,1644.286376,9.835934,0.000000,0.000000,270.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1290,1481.248046,1669.162353,9.399999,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1290,1481.248046,1645.162109,9.399999,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1290,1481.248046,1657.162109,9.399999,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1290,1512.887084,1645.201049,9.399999,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1290,1512.886718,1657.200195,9.399999,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1290,1512.886718,1669.200195,9.399999,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8534,1588.060302,1562.637451,19.629999,0.000000,0.000000,180.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8534,1583.612915,1626.971923,19.629999,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8535,1587.628662,1588.847045,-4.000000,0.000000,270.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8535,1587.628662,1601.418090,-4.000000,0.000000,270.000000,270.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8534,1644.818847,1588.877319,19.639999,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8534,1607.380737,1582.964355,19.639999,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8534,1597.104248,1564.153442,14.399999,0.005493,180.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1536,1596.142944,1591.069946,9.835934,0.000000,0.000000,180.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1295,1593.272338,1600.556640,10.140000,0.000000,0.000000,270.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1295,1585.271484,1600.556640,10.140000,0.000000,0.000000,270.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1295,1602.271484,1600.556640,10.140000,0.000000,0.000000,270.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1295,1586.913940,1589.010620,10.140000,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1295,1603.913085,1589.009765,10.140000,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1295,1594.913085,1589.009765,10.140000,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(18014,1598.812500,1597.928466,10.268137,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,1588.798828,1596.959594,11.501676,0.000000,0.000000,135.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,1588.798828,1596.958984,11.501676,0.000000,0.000000,315.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,1592.589965,1595.380004,11.501676,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,1597.030029,1595.379882,11.501676,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,1592.589843,1595.379882,11.501676,0.000000,0.000000,180.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,1600.825195,1596.949218,11.501676,0.000000,0.000000,44.994506,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,1597.029296,1595.379882,11.501676,0.000000,0.000000,180.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,1600.825195,1596.949218,11.501676,0.000000,0.000000,225.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(18014,1591.161865,1597.961181,10.268137,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(870,1598.455932,1596.897583,10.078057,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3532,1595.723754,1596.578247,10.518029,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3532,1591.682861,1596.887939,10.518029,0.000000,0.000000,264.167480,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(870,1594.969726,1598.017578,10.078057,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(870,1594.669921,1598.010742,10.078057,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2001,1590.997314,1595.968994,9.835934,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2001,1598.980468,1596.013427,9.835934,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2001,1594.854980,1596.075317,9.835934,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1536,1593.123535,1591.027709,9.835934,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1536,1584.311889,1598.493041,9.835934,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1536,1603.612304,1598.480590,9.835934,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8534,1549.095825,1458.830932,19.620000,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8534,1555.289306,1397.026611,19.620000,0.000000,0.000000,180.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8534,1589.813720,1437.354370,19.639999,0.000000,0.000000,270.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8534,1541.017700,1450.075683,19.639999,0.000000,0.000000,270.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8535,1550.195800,1424.182495,-3.900000,0.000000,270.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8534,1547.228881,1404.461547,14.399999,0.000000,179.994506,180.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1536,1561.385620,1428.597412,9.935935,0.000000,0.000000,270.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1537,1551.598388,1425.513427,9.935934,0.000000,0.000000,180.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1536,1531.237304,1425.476562,9.935935,0.000000,0.000000,179.994506,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1290,1545.094482,1423.030639,9.399999,0.000000,0.000000,270.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1290,1560.093750,1423.030273,9.399999,0.000000,0.000000,270.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1290,1530.093750,1423.030273,9.399999,0.000000,0.000000,270.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1290,1560.069946,1432.852661,9.399999,0.000000,0.000000,270.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1290,1545.069335,1432.852539,9.399999,0.000000,0.000000,270.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1290,1530.069335,1432.852539,9.399999,0.000000,0.000000,270.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1723,1530.689453,1429.774291,9.935935,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1723,1535.689453,1426.029418,9.935935,0.000000,0.000000,180.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1723,1533.689453,1429.773437,9.935935,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2010,1536.861328,1429.728759,9.949999,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2010,1550.920043,1425.916503,9.949999,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2010,1553.932739,1425.916503,9.949999,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1247,1530.439453,1425.477539,12.728347,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,1539.181640,1428.695312,12.154999,0.000000,90.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,1539.181640,1428.695312,12.154999,0.000000,90.000000,270.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,1537.510009,1430.349975,12.154999,0.000000,90.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,1534.177978,1430.349609,12.154999,0.000000,90.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,1530.849975,1430.349609,12.154999,0.000000,90.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,1529.180053,1428.687988,12.154999,0.000000,90.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);

// Teatro Parking (Interior)
	CreateDynamicObjectExULP(8040,1922.299804,1873.466796,27.399999,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8411,1930.929565,1867.299926,97.599998,180.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8411,1930.929565,1892.756713,97.599998,179.994506,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8411,1886.402587,1881.680664,97.599998,0.000000,180.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8040,1922.308959,1873.392333,27.200000,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8040,1921.550781,1873.608398,27.200000,0.000000,0.000000,179.994506,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1498,1957.552856,1891.288330,26.634374,0.000000,0.000000,0.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3354,1957.668334,1855.673461,27.939817,0.000000,0.000000,270.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1498,1960.864624,1859.452270,26.634374,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1498,1883.015136,1887.487792,26.634374,0.000000,0.000000,90.000000,-1,8,-1,MAX_RADIO_STREAM);

// Teatro LS (Exterior)
	CreateDynamicObjectExULP(3475,1242.000000,-1175.900024,23.000000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,1242.000000,-1172.129882,23.000000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,1247.000000,-1194.014648,23.000000,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,1263.982421,-1194.014648,23.000000,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,1257.989257,-1194.014648,23.000000,0.000000,0.000000,90.747070,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,1251.989257,-1194.014648,23.000000,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,1257.543945,-1171.241210,23.000000,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,1252.229492,-1171.241210,23.000000,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(966,1324.807006,-1171.762695,22.828125,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5340,1246.812377,-1181.447143,24.128765,0.000000,0.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,1262.859375,-1189.599975,23.299999,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1262.692382,-1193.000000,23.142448,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1258.879882,-1193.000000,23.142448,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1254.830078,-1193.000000,23.142448,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1250.863281,-1193.000000,23.142448,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1246.958007,-1193.000000,23.142448,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1276.561401,-1172.303955,23.372528,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1276.561401,-1177.970092,23.322071,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1304.560546,-1172.303710,23.372528,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1304.560546,-1177.969726,23.322071,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1290.560546,-1172.303710,23.372528,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1290.560546,-1177.969726,23.322071,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8168,1327.968750,-1175.372070,24.526098,0.000000,0.000000,197.056274,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8169,1328.040405,-1175.320190,22.828125,0.000000,0.000000,197.057067,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,1327.415893,-1191.582519,22.571504,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,1327.415039,-1193.582519,22.571504,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,1327.415039,-1189.582031,22.571504,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,1327.415039,-1187.582031,22.571504,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,1327.415039,-1185.582031,22.571504,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,1327.415039,-1183.582031,22.571504,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1330.808593,-1181.662597,23.142448,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,1330.695190,-1189.171997,22.571504,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,1330.695190,-1193.210937,22.571504,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,1327.415039,-1181.582031,22.571504,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,1330.695190,-1185.176391,22.571504,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1330.808593,-1185.596069,23.142448,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1330.808593,-1189.595214,23.142448,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1330.808593,-1193.438842,23.142448,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,1258.859375,-1189.599975,23.299999,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,1254.859375,-1189.599975,23.299999,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,1250.859375,-1189.599975,23.299999,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,1259.619506,-1192.817138,23.299999,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,1253.199951,-1192.816406,23.299999,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,1246.900024,-1192.816406,23.299999,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,1246.890014,-1189.599609,23.299999,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1533,1312.147949,-1172.061767,22.775138,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1533,1261.637695,-1172.077148,22.815948,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1536,1257.653808,-1164.413940,22.828125,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(910,1252.754638,-1167.053466,24.097280,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(854,1253.233398,-1168.077148,23.034866,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1450,1256.994873,-1167.362915,23.428392,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1441,1255.513183,-1169.862670,23.479774,0.000000,0.000000,180.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1265,1252.894287,-1165.016967,23.297168,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2670,1253.865966,-1165.262084,22.920177,0.000000,0.000000,300.185729,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8843,1303.599975,-1175.254272,22.780000,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8843,1276.020385,-1175.254272,22.760000,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1498,1244.562377,-1177.886718,22.329999,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1498,1226.229248,-1179.688354,21.426034,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1498,1231.697998,-1210.027587,24.601257,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1243.000000,-1224.427734,24.899999,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,1244.400024,-1213.082153,25.000000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,1226.645507,-1219.099975,25.000000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,1226.645507,-1225.099975,25.000000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,1226.645507,-1231.099609,25.000000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,1226.645507,-1237.099609,25.000000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,1241.400024,-1239.885253,25.000000,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,1229.439453,-1239.884765,25.000000,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,1235.399414,-1239.884765,25.000000,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,1244.400024,-1231.099609,25.000000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,1244.400024,-1225.099609,25.000000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,1244.400024,-1219.099609,25.000000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,1226.645507,-1213.082031,25.000000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,1244.399414,-1237.099609,25.000000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,1243.933715,-1237.129882,25.000000,0.000000,0.000000,180.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1227.662109,-1214.427734,25.000000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1227.662109,-1234.427734,24.600000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1243.000000,-1234.427734,24.600000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1227.662109,-1224.427734,24.899999,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1243.000000,-1214.427734,25.000000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3934,1235.536987,-1233.072875,24.299999,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3934,1235.536987,-1219.269042,24.520000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);

// COLTS Garage (Interior)
	CreateDynamicObjectExULP(8569,2341.704833,-1184.215209,1037.349975,180.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2091,2337.692871,-1182.853393,1030.976562,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1417,2338.922119,-1182.599975,1034.349975,0.000000,0.000000,180.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1417,2337.949218,-1182.599975,1033.140014,0.000000,0.000000,179.994506,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1417,2338.921875,-1182.599975,1033.140014,0.000000,0.000000,179.994506,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1417,2337.949218,-1182.599975,1034.349975,0.000000,0.000000,179.994506,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3055,2339.860107,-1182.290039,1033.174682,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(17564,2330.337158,-1172.859497,1028.099975,0.000000,0.000000,90.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(16637,2330.609619,-1173.012207,1028.800903,90.000000,180.000000,180.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14638,2338.514160,-1177.598266,1026.900024,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14638,2338.601074,-1177.669799,1026.900024,0.000000,0.000000,179.994506,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14638,2338.508056,-1177.529174,1026.900024,0.000000,0.000000,179.994506,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(16637,2338.417968,-1177.446655,1028.800903,90.000000,180.005493,359.989013,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(16000,2340.420166,-1188.608520,1020.233947,0.000000,0.000000,270.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11447,2327.191894,-1181.210815,1026.976562,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11447,2338.243652,-1183.569458,1026.976562,0.000000,0.000000,270.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11447,2319.831054,-1188.682006,1027.408691,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2949,2320.458251,-1186.300048,1027.400024,0.000000,0.000000,270.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1498,2328.819824,-1177.601196,1030.976562,0.000000,0.000000,0.000000,-1,5,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14638,2345.906250,-1180.109619,1030.968750,0.000000,0.000000,179.994506,-1,5,-1,MAX_RADIO_STREAM);

// Peaje San Fierro 2 (Exterior)
	CreateDynamicObjectExULP(10829,-1002.728027,-420.743560,35.153781,0.000000,6.000000,129.999938,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3785,-1004.821289,-425.589050,38.649173,0.000000,354.000000,312.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3785,-997.568176,-419.509704,38.626773,0.000000,353.995971,311.995239,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3785,-997.495117,-418.861602,38.581974,0.000000,359.995971,39.795654,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3785,-1005.485961,-425.569427,38.581974,0.000000,359.994506,220.752563,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(7190,-1034.218505,-442.032653,35.554153,1.000000,0.000000,294.680053,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(7190,-962.987915,-437.566192,34.035751,354.700012,0.000000,256.675231,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1350,-989.581970,-431.641479,35.242187,0.000000,0.000000,56.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1350,-1009.174255,-428.801635,35.304512,0.000000,0.000000,38.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1366,-1007.873596,-426.465423,36.033977,0.000000,0.000000,318.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8843,-970.116699,-373.179840,35.260574,0.000000,0.000000,348.680053,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8843,-961.148986,-327.517517,35.260574,0.000000,0.000000,349.038574,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8843,-953.607299,-287.516998,35.641372,0.000000,0.000000,349.275634,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8843,-959.681091,-286.587188,35.641372,0.000000,0.000000,169.271850,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8843,-967.278442,-326.569580,35.641372,0.000000,0.000000,169.266357,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8843,-976.333374,-372.019775,35.473373,0.000000,0.000000,169.266357,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1294,-969.198547,-380.027893,39.554500,0.000000,0.000000,348.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1294,-966.480224,-367.106811,39.554500,0.000000,0.000000,347.997436,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1294,-963.973205,-353.693023,39.554500,0.000000,0.000000,347.997436,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1294,-961.314453,-339.854125,39.554500,0.000000,0.000000,347.997436,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1294,-958.617248,-326.138214,39.554500,0.000000,0.000000,347.997436,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1294,-955.634338,-310.797882,39.554500,0.000000,0.000000,347.997436,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1294,-953.096374,-296.948333,39.554500,0.000000,0.000000,347.997436,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1294,-950.461059,-281.813659,39.554500,0.000000,0.000000,347.997436,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1294,-947.434387,-266.309204,39.554500,0.000000,0.000000,347.997436,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1294,-972.332153,-393.166931,39.554500,0.000000,0.000000,343.997436,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1294,-976.744934,-405.946533,39.554500,0.000000,0.000000,338.077514,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1294,-957.738525,-264.083282,39.554500,0.000000,0.000000,167.997436,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1294,-960.762329,-279.682159,39.554500,0.000000,0.000000,167.991943,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1294,-963.612060,-294.493682,39.554500,0.000000,0.000000,167.991943,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1294,-966.308471,-308.812622,39.554500,0.000000,0.000000,168.111938,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1294,-969.216979,-323.732116,39.554500,0.000000,0.000000,168.107299,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1294,-971.922546,-337.582946,39.554500,0.000000,0.000000,168.107299,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1294,-974.770629,-351.338104,39.554500,0.000000,0.000000,168.107299,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1294,-977.297790,-364.639739,39.554500,0.000000,0.000000,168.107299,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1294,-979.964233,-377.673156,39.554500,0.000000,0.000000,168.107299,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1294,-982.834289,-390.465484,39.554500,0.000000,0.000000,163.667236,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1294,-986.319641,-401.983673,39.554500,0.000000,0.000000,158.227294,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3578,-975.011169,-381.114440,35.976245,0.000000,0.000000,257.640014,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3578,-970.187927,-356.745941,35.953845,0.000000,0.000000,258.597412,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3578,-965.622558,-333.687622,35.953845,0.000000,0.000000,258.596191,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3578,-960.934509,-309.352569,35.942646,0.000000,0.000000,259.196166,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3578,-956.502746,-285.557434,35.942646,0.000000,0.000000,259.436157,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3578,-980.937866,-402.549926,35.953845,0.000000,0.000000,250.197509,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1323,-983.545043,-432.575164,36.880466,0.000000,0.000000,341.999969,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3513,-960.598754,-260.814086,40.222885,0.000000,0.000000,348.640136,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1616,-997.220397,-419.065368,39.445178,11.881469,8.176361,152.065551,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(981,-1024.169189,-453.828735,36.223045,0.000000,0.000000,204.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-955.315795,-279.336303,35.831310,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-998.932678,-446.302337,36.525707,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-1009.330810,-429.688598,35.831310,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-994.514221,-414.085083,36.268108,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-987.837036,-431.532836,35.831310,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1306,-976.678649,-419.275970,42.696586,0.000000,0.000000,332.080078,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-987.293334,-446.964721,36.346508,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-974.683227,-448.716674,35.544109,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-963.327575,-451.708404,34.495708,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-952.347290,-454.416229,33.151714,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237,-977.481933,-391.714752,35.274780,0.000000,0.000000,349.640014,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237,-972.445312,-368.659179,35.274780,0.000000,0.000000,349.639892,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237,-967.871215,-345.348419,35.274780,0.000000,0.000000,349.639892,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237,-963.193054,-321.374938,35.274780,0.000000,0.000000,349.639892,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237,-958.621948,-297.303741,35.274780,0.000000,0.000000,349.639892,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(982,-968.294067,-407.200714,36.378181,0.000000,0.000000,348.759887,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,-998.319580,-411.960815,35.605663,352.500732,0.000000,46.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(982,-993.272338,-401.959442,36.378181,0.000000,0.000000,348.755493,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,-1003.800354,-409.370086,34.855266,354.008544,2.022216,82.378601,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,-1010.090820,-409.422302,34.272869,355.759948,2.021484,98.375518,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,-1015.523742,-412.223754,34.070873,0.700012,4.017822,136.098937,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,-1015.166076,-416.538879,34.518871,352.917419,4.047912,52.661560,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,-1010.187927,-420.490600,35.314067,352.913818,4.042968,50.457397,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-971.587463,-417.795989,36.268108,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,-976.726928,-417.470306,36.302646,0.000000,0.000000,234.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237,-973.617919,-419.571685,35.633178,0.000000,0.000000,349.639892,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237,-972.623718,-419.601470,35.745178,0.000000,0.000000,349.639892,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237,-971.449951,-419.800018,35.733978,0.000000,0.000000,349.639892,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,-980.878051,-418.383789,36.269046,0.399993,0.000000,330.637695,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,-984.181579,-423.879852,36.168247,0.395507,0.000000,326.913696,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,-988.087829,-428.896331,36.011447,1.899993,0.000000,316.909179,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,-988.055358,-428.861755,34.761447,1.895141,0.000000,316.906127,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3934,-1003.671691,-419.506439,38.480632,354.000000,0.000000,40.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8572,-1007.549926,-417.052978,36.702606,9.000000,2.019653,220.158996,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1362,-1006.579772,-417.038848,35.201480,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(12913,-1019.632629,-419.846130,36.187938,0.000000,352.000000,314.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(966,-983.245544,-408.084136,35.312953,0.000000,0.000000,338.879882,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(966,-982.670166,-408.301635,35.312953,0.000000,0.000000,158.756591,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237,-975.492187,-411.281646,35.633178,0.000000,0.000000,349.639892,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237,-974.430664,-411.713195,35.633178,0.000000,0.000000,349.639892,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237,-973.282348,-412.153656,35.633178,0.000000,0.000000,349.639892,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237,-972.208007,-412.706390,35.633178,0.000000,0.000000,349.639892,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237,-971.109375,-413.228149,35.703979,0.000000,0.000000,349.639892,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237,-990.422241,-405.223144,35.565979,0.000000,0.000000,349.639892,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237,-991.541381,-404.765533,35.599578,0.000000,0.000000,349.639892,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237,-993.251770,-404.234222,35.689178,0.000000,0.000000,349.639892,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237,-970.027221,-413.679382,35.703979,0.000000,0.000000,349.639892,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-983.145202,-408.701202,35.864910,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);

// Peaje San Fierro Garita (Interior)
	CreateDynamicObjectExULP(10227,-1229.724243,-226.530502,15.026695,0.000000,0.000000,44.719970,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(18007,-1228.944213,-223.050903,15.528039,0.000000,0.000000,314.000000,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(18007,-1231.101318,-229.335800,15.494440,0.000000,0.000000,133.994842,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(18082,-1230.857055,-225.004302,13.264503,0.000000,0.000000,221.480102,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(18082,-1228.781860,-227.024291,13.286903,0.000000,0.000000,41.879028,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2970,-1230.097167,-228.695892,13.349050,0.000000,0.000000,42.119995,-1,4,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2970,-1230.145751,-228.738174,13.610250,0.000000,0.000000,42.116088,-1,4,-1,MAX_RADIO_STREAM);

// SAMD (Exterior) 05/09/2011
	CreateDynamicObjectExULP(1233,-2646.475830,596.093872,15.012804,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1233,-2622.797851,598.462890,15.012804,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1233,-2676.915527,595.472290,15.012804,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1321,-2616.872070,574.213684,15.085937,0.000000,0.000000,179.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2745,-2654.664062,579.909545,15.758620,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1234,-2710.372558,590.418273,15.012804,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1216,-2710.124755,589.179382,14.145127,0.000000,0.000000,90.500000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(9896,-2684.301513,690.136169,6.986301,0.000000,0.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(984,-2643.136718,631.627197,14.089804,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(984,-2670.314941,631.659118,14.089804,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(983,-2679.887695,631.535949,14.136679,0.000000,0.000000,272.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(983,-2686.077636,630.399414,14.136679,0.000000,0.000000,288.999511,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(983,-2695.084228,625.558715,14.136679,0.000000,0.000000,307.995361,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(983,-2699.353515,620.899414,14.136679,0.000000,359.247436,326.749877,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(983,-2703.478515,611.453125,14.136679,0.000000,359.241943,345.789184,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(983,-2703.462890,599.471679,14.136679,0.000000,359.241943,14.227294,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(983,-2699.434570,590.254577,14.136679,0.000000,359.241943,33.387329,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(994,-2618.177246,608.568054,13.453125,0.000000,0.000000,89.640014,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(996,-2625.815673,614.935852,14.201880,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(996,-2625.860351,608.404846,14.201880,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(994,-2618.222412,601.969726,13.453125,0.000000,0.000000,89.637451,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(996,-2625.897460,601.861328,14.201880,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(997,-2660.891601,581.195312,13.457758,0.000000,0.000000,1.554565,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(997,-2675.695556,580.803222,13.457758,0.000000,0.000000,1.799926,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(808,-2698.020019,581.648010,16.090978,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(808,-2624.363281,580.604492,15.990179,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(808,-2613.913818,608.241088,16.090978,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(824,-2616.895996,581.711059,15.555179,0.000000,0.000000,304.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(870,-2614.260253,602.807312,14.867121,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(870,-2614.155273,614.043090,14.867121,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(3660,-2641.140380,580.330200,16.013267,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-2701.542236,593.037048,14.017448,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-2702.858398,596.037109,14.017448,0.000000,0.000000,1.999511,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-2704.542480,602.817443,14.017448,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-2704.562255,608.015625,14.017448,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-2702.833740,614.918334,14.017448,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-2701.502929,617.996887,14.017448,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-2692.526367,627.918945,14.017448,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-2689.478515,629.547485,14.017448,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-2663.666503,632.066223,14.017448,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-2649.794433,632.060668,14.017448,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1231,-2569.374023,646.968872,29.542892,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1231,-2569.323974,657.218750,29.542892,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1231,-2569.271484,667.968750,29.542892,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1257,-2623.883789,556.803710,14.888566,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(9812,-2600.361572,643.326904,21.823089,0.000000,0.000000,269.880004,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(3463,-2600.655029,618.657348,15.453125,0.000000,0.000000,87.679931,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(3532,-2599.001220,608.298400,15.308836,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(6965,-2662.386474,607.958679,16.419195,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(824,-2705.517822,583.173339,15.555179,0.000000,0.000000,303.997192,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(982,-2661.667480,595.223083,14.136679,0.000000,0.000000,91.640014,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-2675.895507,595.221679,14.017448,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-2647.434570,596.031311,14.017448,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(9897,-2746.949218,612.456359,15.326562,0.000000,0.000000,45.000122,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(9897,-2705.638671,596.063842,15.326562,0.000000,0.000000,225.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1256,-2710.907714,595.138366,14.112581,0.000000,0.000000,180.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1256,-2710.890380,602.649414,14.112581,0.000000,0.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1256,-2710.884277,610.137145,14.112581,0.000000,0.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1256,-2710.901367,617.627685,14.112581,0.000000,0.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1256,-2710.879394,625.118713,14.112581,0.000000,0.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1256,-2710.913330,632.610168,14.112581,0.000000,0.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-2624.082031,598.651367,14.017448,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-2621.345458,598.991699,14.017448,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1232,-2711.062011,628.703674,16.012794,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1232,-2711.060546,621.229614,16.012794,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1232,-2711.078125,613.724609,16.012794,0.000000,0.000000,0.119995,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1232,-2711.064697,606.199523,16.012794,0.000000,0.000000,0.115356,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1232,-2711.069580,598.779052,16.012794,0.000000,0.000000,0.115356,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1232,-2711.055908,591.187255,16.012794,0.000000,0.000000,0.115356,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(966,-2603.414794,579.038330,13.441925,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1237,-2602.429931,578.990722,13.453125,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1237,-2611.076416,579.126708,13.453125,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(966,-2602.333740,695.704040,26.797126,0.000000,0.000000,358.996459,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(983,-2613.071777,695.834167,27.496055,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(966,-2614.285156,589.142578,13.430725,0.000000,0.000000,269.598999,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1237,-2614.359130,586.315063,13.453125,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1237,-2614.257568,598.610534,13.453125,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1237,-2614.272460,597.202270,13.453125,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1237,-2614.314453,587.739257,13.453125,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(966,-2614.091308,620.994506,13.430725,0.000000,0.000000,269.598999,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1237,-2614.092041,618.318176,13.453125,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1237,-2614.060546,619.777954,13.453125,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1237,-2613.987060,628.943359,13.453125,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1237,-2613.972656,630.530273,13.453125,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);

// Museo (Exterior)
	CreateDynamicObjectExULP(824,-2433.391845,150.188964,35.703376,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(824,-2433.519531,153.586456,35.703376,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(824,-2433.260742,158.433197,35.703376,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(824,-2433.132080,162.311538,35.703376,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(824,-2433.115966,166.677597,35.703376,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(824,-2438.365234,166.751098,35.703376,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(824,-2438.437011,161.501617,35.703376,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(824,-2438.521972,155.251739,35.703376,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(824,-2438.521484,155.250976,35.703376,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(824,-2438.635253,149.551239,35.703376,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(824,-2443.843750,150.224334,35.703376,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(824,-2443.724365,157.014236,35.703376,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(824,-2445.262207,161.588439,35.703376,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(824,-2444.152099,167.864898,35.703376,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3515,-2436.108154,153.618499,33.227642,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3515,-2442.612548,154.321472,33.216442,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3515,-2445.202636,164.702896,33.216442,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3515,-2437.273925,163.409606,33.227642,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3515,-2434.592529,166.196960,33.216442,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3515,-2443.073242,159.425155,33.227642,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3515,-2434.386718,161.180877,33.238842,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);

// Cámaras
	CreateDynamicObjectExULP(1622,1501.008300,-1749.572387,29.546875,-2.400000,-42.000000,-68.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN); // Ayuntamiento
	CreateDynamicObjectExULP(1622,1553.428710,-1671.332885,25.546875,12.800000,-45.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN); 	// LSPD Frente
	CreateDynamicObjectExULP(1622,-1615.370971,715.063537,19.441812,0.699999,-23.000000,-207.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN); 	// SFPD Frente
	CreateDynamicObjectExULP(1622,-1768.036499,-655.176757,23.761083,14.000000,-23.100000,-170.400100,-1,-1,-1,MAX_RADIO_STREAM_MIN);// Peaje SF izquierda
	CreateDynamicObjectExULP(1622,-1753.277954,-662.290893,24.712955,1.970000,-16.050001,7.000000,-1,-1,-1,MAX_RADIO_STREAM_MIN);  	// Peaje SF Derecha
	CreateDynamicObjectExULP(1622,50.318767,-1519.668212,10.447824,-6.899999,-26.100000,460.700073,-1,-1,-1,MAX_RADIO_STREAM_MIN); 	// Peaje LS izquierda
	CreateDynamicObjectExULP(1622,55.498741,-1544.388183,10.447824,-6.999999,-26.100000,280.700073,-1,-1,-1,MAX_RADIO_STREAM_MIN);   // Peaje LS derecha

// Sicarios HQ
	CreateDynamicObjectExULP(1497,1543.6549072266,21.886850357056,23.140625,0,0,9.75,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1497,1543.6549072266,21.99,23.140625,0,0,9.75,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1497,1538.2265625,16.533485412598,23.140625,0,0,99.744873046875,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1497,1538.1,16.533485412598,23.140625,0,0,99.744873046875,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1497,1541.3868408203,10.632144927979,23.140625,0,0,9.744873046875,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1497,1541.3868408203,10.55,23.140625,0,0,9.744873046875,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(12958,1225.1378173828,139.08578491211,22.561630249023,0,0,336,-1, -1, -1, MAX_RADIO_STREAM);

// Puertas Grotti Concecionario Garages (Exterior)
	CreateDynamicObjectExULP(1536,550.277343,-1294.337890,16.162866,0.000000,0.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3033,542.370727,-1294.337280,18.511604,0.000000,0.000000,359.750000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1536,549.309448,-1313.760131,16.187866,0.000000,0.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3033,540.201904,-1313.797973,18.511604,0.000000,0.000000,359.997314,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1536,1503.030639,1307.639282,1092.189086,0.000000,0.000000,89.400001,-1,-1,-1,MAX_RADIO_STREAM); // Interior

// LSPD Oficina (Interior) Willy 4-20-2011
	CreateDynamicObjectExULP(2202,254.844635,62.866031,1002.640625,0.000000,0.000000,180.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2164,216.110778,73.940574,1004.039062,0.000000,0.000000,180.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2200,219.824813,82.643577,1004.039062,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2024,216.573562,79.595535,1004.039062,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2596,221.593597,78.004981,1006.554016,0.000000,0.000000,295.525512,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2816,217.425872,79.758583,1004.573059,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2813,217.314346,80.393890,1004.573059,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2827,216.691284,80.164527,1004.573059,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2200,214.157806,75.561912,1004.039062,0.000000,0.000000,90.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1762,219.690704,80.820152,1004.039062,0.000000,0.000000,270.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1761,216.195892,81.899009,1004.039062,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1761,214.776962,78.566390,1004.039062,0.000000,0.000000,90.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2202,221.383636,77.982872,1004.039062,0.000000,0.000000,270.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1714,217.586608,75.234863,1004.039062,0.000000,0.000000,191.250000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2166,215.752075,75.330444,1004.039062,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2165,217.682739,76.328491,1004.039062,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2309,218.490203,77.973747,1004.039062,0.000000,0.000000,167.211914,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2309,217.262527,78.332077,1004.039062,0.000000,0.000000,180.708618,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2309,216.128112,77.710166,1004.039062,0.000000,0.000000,206.202392,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(627,214.813278,81.788986,1005.884399,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2828,216.725799,76.427726,1004.808776,0.000000,0.000000,181.329345,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2853,215.532196,75.548324,1004.830688,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(16378,252.168533,69.067092,1003.394775,0.000000,0.000000,90.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1622,249.894775,71.666564,1007.163513,0.000000,350.250000,357.750000,-1,6,-1,MAX_RADIO_STREAM);

// Iglesia LS (Interior)
	CreateDynamicObjectExULP(2948,237.219284,158.097045,1002.023437,0.000000,0.000000,180.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2948,237.212127,160.021865,1002.023437,0.000000,0.000000,0.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8675,2865.531250,921.144531,21.000000,90.000000,0.000000,270.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8675,2863.806640,920.585937,21.000000,90.000000,0.000000,90.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8675,2861.362060,901.635742,2.900000,179.994506,0.000000,0.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8675,2857.539550,906.099121,21.200000,145.997344,179.994506,0.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8675,2866.631591,947.648681,7.000000,0.000000,0.000000,90.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8675,2861.086914,930.055664,6.989999,303.997192,0.000000,0.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8675,2857.042968,921.531250,6.989999,303.997192,0.000000,0.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8675,2862.612548,942.172241,2.980000,0.000000,180.000000,0.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8675,2860.145263,937.267211,21.799999,34.000000,0.000000,0.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1739,2864.684082,932.642700,10.985132,0.000000,0.000000,90.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2120,2863.291503,932.711608,10.729800,0.000000,0.000000,90.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2206,2865.760742,930.908203,10.092861,0.000000,0.000000,179.994506,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2120,2866.104980,932.694396,10.729659,0.000000,0.000000,90.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14722,2870.512939,930.331726,8.300000,0.000000,0.000000,90.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14722,2858.383789,927.994079,8.300000,0.000000,0.000000,270.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8675,2860.416992,939.000976,7.300000,303.997192,0.000000,0.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8675,2866.630859,942.500000,2.799999,0.000000,0.000000,90.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8675,2858.024414,913.268554,6.989999,303.997192,0.000000,0.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2636,2869.500244,926.079101,10.417835,0.000000,0.000000,270.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2636,2868.800048,926.079101,10.417835,0.000000,0.000000,270.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2636,2868.099853,923.079101,10.417835,0.000000,0.000000,270.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2636,2867.399658,914.079101,10.417835,0.000000,0.000000,270.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2636,2867.399414,926.079101,10.417835,0.000000,0.000000,270.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2636,2860.800048,926.079101,10.417835,0.000000,0.000000,270.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2636,2859.399414,914.079101,10.417835,0.000000,0.000000,270.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2636,2860.099609,917.079101,10.417835,0.000000,0.000000,270.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2636,2862.199951,917.079101,10.417835,0.000000,0.000000,270.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2636,2861.500000,926.079101,10.417835,0.000000,0.000000,270.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2636,2866.699462,926.079101,10.417835,0.000000,0.000000,270.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2636,2869.500000,917.079101,10.417835,0.000000,0.000000,270.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2636,2868.799804,917.079101,10.417835,0.000000,0.000000,270.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2636,2868.099609,926.079101,10.417835,0.000000,0.000000,270.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2636,2867.399414,926.079101,10.417835,0.000000,0.000000,270.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2636,2866.699218,917.079101,10.417835,0.000000,0.000000,270.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2636,2862.199218,926.079101,10.417835,0.000000,0.000000,270.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2636,2861.500000,923.079101,10.417835,0.000000,0.000000,270.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2636,2860.799804,917.079101,10.417835,0.000000,0.000000,270.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2636,2860.099609,926.079101,10.417835,0.000000,0.000000,270.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2636,2859.399414,926.079101,10.417835,0.000000,0.000000,270.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2636,2869.500000,923.079101,10.417835,0.000000,0.000000,270.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2636,2868.799804,923.079101,10.417835,0.000000,0.000000,270.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2636,2868.099609,914.079101,10.417835,0.000000,0.000000,270.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2636,2867.399414,923.079101,10.417835,0.000000,0.000000,270.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2636,2862.199218,923.079101,10.417835,0.000000,0.000000,270.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2636,2861.500000,917.079101,10.417835,0.000000,0.000000,270.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2636,2860.799804,923.079101,10.417835,0.000000,0.000000,270.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2636,2859.399414,923.079101,10.417835,0.000000,0.000000,270.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2636,2860.099609,923.079101,10.417835,0.000000,0.000000,270.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2636,2869.500000,914.079101,10.417835,0.000000,0.000000,270.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2636,2868.799804,914.079101,10.417835,0.000000,0.000000,270.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2636,2868.099609,917.079101,10.417835,0.000000,0.000000,270.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2636,2867.399414,917.079101,10.417835,0.000000,0.000000,270.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2636,2866.699218,914.079101,10.417835,0.000000,0.000000,270.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2636,2862.199218,914.079101,10.417835,0.000000,0.000000,270.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2636,2861.500000,914.079101,10.417835,0.000000,0.000000,270.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2636,2860.799804,914.079101,10.417835,0.000000,0.000000,270.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2636,2860.099609,914.079101,10.417835,0.000000,0.000000,270.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2636,2859.399414,917.079101,10.417835,0.000000,0.000000,270.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8675,2871.767333,933.585937,10.500000,0.000000,0.000000,90.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8675,2857.111328,906.958984,10.500000,0.000000,0.000000,270.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2636,2866.699218,923.079101,10.417835,0.000000,0.000000,270.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1667,2865.229736,930.840087,11.117902,0.000000,0.000000,0.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2894,2864.737548,930.904235,11.029323,0.000000,0.000000,0.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2726,2864.098388,930.942260,11.373371,0.000000,0.000000,0.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8675,2850.369384,921.004760,2.900000,0.000000,179.994506,90.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8675,2854.842041,920.110900,21.200000,34.002685,0.000000,90.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8675,2878.604736,921.381896,2.900000,0.005493,180.000000,270.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8675,2874.131835,920.810485,21.200000,34.002685,0.000000,270.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14638,2871.338867,910.080322,9.780356,0.000000,0.000000,0.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14638,2857.636962,909.900451,9.780356,0.000000,0.000000,0.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14638,2871.340087,913.056823,9.780356,0.000000,0.000000,180.000000,-1,19,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14638,2857.639892,912.890014,9.780356,0.000000,0.000000,180.000000,-1,19,-1,MAX_RADIO_STREAM);

// Parking Taller San Fierro (Exterior)
	CreateDynamicObjectExULP(5706,-2980.995605,402.864715,2.000000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5706,-2961.833251,362.012390,2.000000,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5706,-2935.668945,358.556396,2.000000,0.000000,0.000000,180.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5706,-2925.114501,358.584106,2.000000,0.000000,0.000000,180.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5706,-2925.198730,402.829742,2.000000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5706,-2981.031005,384.038330,2.000000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5706,-2984.380126,362.012390,2.000000,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5706,-2948.177978,402.829742,2.000000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3660,-2905.509765,396.053588,8.473551,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4639,-2906.854736,410.512207,7.517064,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3594,-2888.047363,393.575866,6.699999,0.000000,0.000000,95.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateObjectEx(7419,-2955.039794,371.513256,-0.500000,0.000000,0.000000,180.000000, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5706,-2892.657470,402.831176,2.000000,359.800048,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5706,-2860.634033,402.801971,-0.779999,0.000000,10.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3660,-2885.895751,396.053588,8.473551,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5706,-2925.114501,381.288360,2.000000,0.000000,0.000000,180.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5706,-2925.187744,404.053436,2.000000,0.000000,0.000000,180.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(978,-2868.998535,396.428283,5.300000,0.000000,10.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1364,-2905.682861,413.690551,6.604605,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(9697,-2928.856201,412.143371,5.834861,359.900024,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(7313,-2910.936035,403.164062,9.899999,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1320,-2859.172607,416.607818,4.984375,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1321,-2848.356201,359.663787,4.984375,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1622,-2916.437988,397.116516,11.052901,0.000000,0.000000,310.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1622,-2916.036376,409.354858,10.972444,0.000000,0.000000,128.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-2874.867431,396.659820,6.173467,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1231,-2891.913330,396.169036,8.554413,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-2876.415771,415.764373,6.339702,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8843,-2895.463134,405.349090,5.831050,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8843,-2895.171386,400.353881,5.828869,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);

// Garage Interior Concecionario Grotti (Interior)
	CreateDynamicObjectExULP(11317,1627.236938,-2490.712890,23.119285,0.000000,0.000000,88.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11317,1663.448120,-2498.035156,23.419281,0.000000,0.000000,268.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1536,1646.748779,-2485.703125,12.597719,0.000000,0.000000,358.250000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3033,1639.970336,-2502.896728,14.856504,0.000000,0.000000,358.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3033,1640.519409,-2485.493408,14.856504,0.000000,0.000000,357.994995,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1536,1635.941894,-2491.672851,12.597719,0.000000,0.000000,87.747680,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2261,1651.213012,-2502.793212,14.497464,0.000000,0.000000,177.750061,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2290,1654.347045,-2489.429199,12.614593,0.000000,0.000000,268.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2288,1654.416748,-2490.405761,14.605910,0.000000,0.000000,268.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1705,1654.012939,-2492.557373,12.614593,0.000000,0.000000,242.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1705,1653.750854,-2487.387695,12.614593,0.000000,0.000000,295.995849,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2184,1651.721069,-2500.690429,12.619769,0.000000,0.000000,247.500000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1827,1652.422973,-2490.301269,12.614593,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2190,1651.312377,-2502.355712,13.395506,0.000000,0.000000,79.250000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2202,1654.352905,-2494.989990,12.619769,0.000000,0.000000,268.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2816,1652.498046,-2490.181640,13.039587,0.000000,0.000000,84.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2741,1648.224365,-2503.096923,14.139970,0.000000,0.000000,178.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2309,1649.870727,-2501.881347,12.593379,0.000000,0.000000,260.250000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2309,1650.586059,-2500.439941,12.593379,0.000000,0.000000,227.999633,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2356,1652.852661,-2502.330810,12.774387,0.000000,0.000000,50.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2596,1651.345214,-2486.184814,14.939584,0.000000,0.000000,356.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2613,1654.590576,-2502.253662,12.601807,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1549,1652.117187,-2486.048095,12.582658,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2191,1654.119750,-2498.401367,12.598396,0.000000,0.000000,267.750000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2700,1645.235351,-2502.812744,15.042984,0.000000,0.000000,88.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2283,1635.809326,-2497.131103,14.716567,0.000000,0.000000,90.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2266,1654.085937,-2501.328857,14.490682,0.000000,0.000000,267.750000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2196,1652.650390,-2501.127685,13.395506,0.000000,0.000000,289.250000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2824,1651.710693,-2501.511474,13.395506,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1536,1647.534423,-2503.182128,12.597719,0.000000,0.000000,178.247680,-1,3,-1,MAX_RADIO_STREAM);


// Traficantes
	CreateDynamicObjectExULP(16501,1038.3015136719,-290.08099365234,73,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(16501,1045.548828125,-285.77807617188,73.599998474121,0,0,270, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(16501,1052.9033203125,-308.97988891602,73,0,0,180, -1, -1, -1, MAX_RADIO_STREAM);

// Mansión Drew (Exterior) 1kk
	CreateDynamicObjectExULP(1432,1255.942504,-800.015930,87.312500,0.000000,0.000000,1.996826,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1670,1253.388793,-800.200256,87.927841,0.000000,0.000000,96.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2747,1255.043090,-792.538146,87.717567,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2788,1256.225585,-792.685119,87.834785,0.000000,0.000000,28.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(638,1251.884521,-801.886718,83.837661,0.000000,0.000000,358.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(638,1245.929077,-801.822570,83.837661,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(638,1251.832031,-804.532226,83.837661,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(638,1245.914062,-804.291381,83.837661,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1487,1255.020263,-792.297912,88.336936,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1665,1255.621337,-792.611389,88.149932,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1665,1253.409301,-799.562316,87.938293,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1664,1252.716552,-799.881652,88.094543,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1668,1255.473388,-792.216918,88.306182,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1669,1256.122192,-799.533813,88.094543,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1481,1252.542480,-792.230102,88.008140,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1481,1253.466064,-792.240173,88.008140,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1432,1253.165039,-799.989257,87.312500,0.000000,0.000000,327.996826,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1665,1255.446044,-800.169738,87.938293,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1665,1255.905517,-799.497131,87.938293,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1664,1256.202026,-800.319580,88.094543,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1664,1255.913085,-799.799926,88.094543,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(646,1251.609008,-800.751708,88.737617,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(646,1257.188964,-800.792419,88.737617,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1287.626342,-782.966552,96.025260,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1287.617065,-794.090148,96.025260,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1294.859375,-794.126953,96.025260,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1294.953002,-783.120483,96.019767,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1478,1246.357421,-737.441101,94.705009,0.000000,0.000000,182.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(642,1266.549682,-807.863464,88.738342,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(642,1290.651367,-805.619995,88.735725,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(642,1266.845825,-802.076171,88.738342,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1231,1245.217407,-738.170043,96.922576,0.000000,0.000000,34.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1231,1235.272705,-743.065246,97.769317,0.000000,0.000000,35.997192,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1646,1289.693359,-804.150634,87.652557,0.000000,0.000000,293.994140,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1646,1289.557739,-806.969299,87.652557,0.000000,0.000000,237.996826,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1646,1267.028686,-809.286987,87.652549,0.000000,0.000000,111.741943,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1646,1266.955078,-806.391479,87.652549,0.000000,0.000000,71.993408,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1557,1297.045043,-797.602355,83.140625,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1557,1300.070556,-797.649230,83.140625,0.000000,0.000000,178.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1557,1296.973144,-801.585388,83.115623,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1557,1294.962646,-786.539428,87.312500,0.000000,0.000000,270.500000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1557,1292.857421,-787.972656,91.051322,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1646,1267.048583,-803.453247,87.652549,0.000000,0.000000,111.736450,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1646,1267.119018,-800.562622,87.649932,0.000000,0.000000,61.993408,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(18011,1282.170410,-837.037841,76.775611,0.000000,0.000000,180.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3810,1270.379760,-834.720886,80.186889,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3810,1290.656494,-834.708618,80.186752,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1616,1304.054931,-794.264465,91.275947,0.000000,0.000000,134.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2232,1293.792968,-801.196289,87.910377,0.000000,0.000000,293.999633,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2232,1292.298950,-798.938171,87.910377,0.000000,0.000000,299.998168,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2233,1292.327514,-798.299560,87.311531,0.000000,0.000000,304.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2233,1294.513427,-802.107666,87.355690,0.000000,0.000000,303.997192,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1616,1258.395019,-788.035827,95.487884,0.000000,0.000000,334.250000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1886,1240.377441,-802.942993,87.262908,20.000000,0.000000,36.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1886,1257.205444,-801.228515,86.497428,24.000000,0.000000,318.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2101,1292.901123,-800.091552,88.012512,0.000000,0.000000,298.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1433,1292.934326,-800.125610,87.492187,0.000000,0.000000,30.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1557,1279.060546,-811.554809,82.310066,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1557,1282.085449,-811.557067,82.315383,0.000000,0.000000,179.494506,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1557,1279.068115,-828.556640,75.671112,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1557,1282.083007,-828.546203,75.672348,0.000000,0.000000,180.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3935,1280.519531,-830.281250,84.667205,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3785,1245.919311,-800.635559,85.945678,0.000000,0.000000,272.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3785,1251.903320,-800.661499,85.960289,0.000000,0.000000,266.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(640,1292.170410,-833.381225,82.837661,0.000000,0.000000,269.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(640,1286.806640,-833.353881,82.837661,0.000000,0.000000,270.497558,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(640,1281.456909,-833.356628,82.837661,0.000000,0.000000,270.494384,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(640,1276.081909,-833.387512,82.837661,0.000000,0.000000,270.494384,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(640,1271.237548,-833.426391,82.837661,0.000000,0.000000,270.494384,-1,-1,-1,MAX_RADIO_STREAM);

// Taller Los Santos Oficina (Interior)
	CreateDynamicObjectExULP(14665,1591.240234,-2502.780273,14.537338,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14665,1593.305664,-2497.006835,13.937339,0.000000,0.000000,179.994506,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2200,1589.349853,-2492.225097,12.554687,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2947,1587.816528,-2505.075439,12.539022,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1712,1596.101440,-2503.139404,12.554687,0.000000,0.000000,272.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1712,1592.865600,-2507.271240,12.554687,0.000000,0.000000,179.249511,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1808,1594.587280,-2507.583251,12.554687,0.000000,0.000000,180.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1549,1596.373535,-2506.119140,12.639623,0.000000,0.000000,84.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2165,1594.913085,-2494.677734,12.554687,0.000000,0.000000,177.994995,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2167,1595.466918,-2492.066406,12.555832,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1755,1593.213012,-2501.785888,12.554687,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1755,1590.731323,-2503.771728,12.554687,0.000000,0.000000,48.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1815,1592.588012,-2504.868164,12.554687,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2007,1593.063842,-2492.551513,12.554687,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1811,1595.040161,-2496.149169,13.180992,0.000000,0.000000,282.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1811,1593.949218,-2495.998046,13.180992,0.000000,0.000000,245.994873,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2079,1594.160644,-2493.746093,13.190479,0.000000,0.000000,87.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2202,1588.360839,-2497.301025,12.554687,0.000000,0.000000,89.750000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2854,1593.016967,-2504.392089,13.051141,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2616,1587.964965,-2501.301513,14.187464,0.000000,0.000000,90.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1235,1588.185424,-2499.099609,13.057763,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2737,1596.683349,-2499.073730,14.554687,0.000000,0.000000,-90.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1429,1596.490356,-2507.588867,15.054491,8.000000,0.000000,224.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(330,1593.742309,-2494.480712,13.316972,88.000000,180.000000,180.000000,-1,15,-1,MAX_RADIO_STREAM);

// Taller Los Santos (Exterior)
	CreateDynamicObjectExULP(3624,1797.00390600,-2037.05761700,16.99993500,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3458,1759.66467300,-2074.20532200,13.91318900,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14826,1788.89697300,-2029.47802700,13.26138200,0,0,-180.00001985, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1290,1738.10730000,-2076.60986300,18.54215800,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(982,1812.98840300,-2054.68676800,17.04293100,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(982,1812.97534200,-2032.07287600,17.04293100,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,1788.30651900,-2019.29711900,16.93838900,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(982,1800.11926300,-2077.75244100,16.91482700,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(982,1774.51745600,-2077.76049800,16.89449300,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(982,1748.91528300,-2077.78686500,16.92896300,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,1732.93847700,-2077.78222700,16.92567400,0,0,-89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,1809.76110800,-2019.27746600,17.03047900,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,1803.38720700,-2019.28967300,17.00923900,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,1797.00561500,-2019.28710900,16.98561900,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,1792.22253400,-2019.31445300,16.93269500,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(980,1782.40881300,-2019.20971700,11.74764600,0,-90.24079544,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(980,1729.73120100,-2074.95654300,11.75587100,0,-90.24079544,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(980,1729.71667500,-2069.40576200,11.77434300,0,-90.24079544,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1251,1769.99926800,-2072.50463900,12.53424300,-0.85943669,88.52192205,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1251,1762.97900400,-2072.50170900,12.51732500,-0.85943669,88.52192205,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1251,1755.99853500,-2072.49438500,12.50121600,-0.85943669,88.52192205,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1251,1748.99694800,-2072.49145500,12.50945900,-0.85943669,88.52192205,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1251,1777.33947800,-2072.51220700,12.52500500,-0.85943669,88.52192205,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1251,1741.99548300,-2072.52099600,12.49291700,-0.85943669,88.52192205,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1777.33642600,-2068.99707000,12.40993100,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1769.99499500,-2068.98681600,12.39395600,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1762.95629900,-2069.00268600,12.40251900,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1755.98535200,-2068.98535200,12.38609300,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1748.96862800,-2068.97705100,12.39028200,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1741.98779300,-2069.01025400,12.36242600,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1223,1763.96301300,-2040.61914100,12.21115300,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1223,1772.81860400,-2019.16406300,12.16871800,0,0,-89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1223,1747.09045400,-2053.29638700,12.21079100,0,0,-89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237,1808.29602100,-2061.60205100,12.56101100,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237,1810.46191400,-2061.61914100,12.55861200,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8843,1802.00109900,-2070.14672900,12.56543300,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8843,1802.04858400,-2074.69335900,12.58545800,0,0,-89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(944,1796.97522000,-2029.18005400,13.38281600,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1271,1798.05200200,-2028.85119600,14.29391300,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1271,1797.31958000,-2029.49328600,14.29391300,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1271,1798.90197800,-2029.36596700,12.86067300,0,0,-180.00001985, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2479,1796.26025400,-2029.59729000,14.07148700,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3761,1792.98547400,-2026.64099100,14.44547100,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2626,1796.73022500,-2046.01672400,13.07684000,0,0,-179.99996255, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2579,1794.93762200,-2048.21557600,13.56171500,0,0,-180.00001985, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2578,1793.89294400,-2048.21948200,13.56189300,0,0,-179.99996255, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2485,1796.14428700,-2045.92785600,13.66143400,0,0,123.74994561, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1663,1796.66760300,-2047.41418500,12.97286000,0,0,-180.00001985, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1686,1790.49585000,-2044.16345200,12.55723800,0,0,-270.00000112, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1686,1787.85217300,-2044.15393100,12.55890500,0,0,-270.00000112, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2197,1799.44030800,-2046.84094200,12.55546900,0,0,179.99996255, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1225,1785.39160200,-2030.72399900,12.90585800,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1225,1807.21618700,-2056.32470700,12.96486800,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1225,1807.32153300,-2059.62158200,12.96474000,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(931,1801.35327100,-2032.92175300,11.45743400,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(931,1801.34387200,-2041.02465800,11.47949800,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(996,1798.62915000,-2037.02233900,12.77360700,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(10282,1805.41479500,-2033.08996600,13.53688600,0,0,-89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(10282,1805.39758300,-2040.90161100,13.54402500,0,0,-89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1096,1798.66955600,-2049.11572300,15.56486800,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1085,1797.38366700,-2049.11572300,15.57065000,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1079,1796.08898900,-2049.12060500,15.57380300,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1080,1794.82714800,-2049.12060500,15.56167800,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1008,1796.64538600,-2049.05688500,13.61010400,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1171,1810.68225100,-2030.10363800,14.10270000,0,0,89.99992398, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1172,1810.50244100,-2046.08801300,14.10876500,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1097,1810.30334500,-2046.83667000,14.05493400,0.85943669,-30.08028424,155.07612658, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1081,1810.30432100,-2031.09558100,14.00483300,0.00000000,-16.32929716,214.53218616, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1214,1812.78735400,-2077.75756800,16.17994900,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3761,1731.10754400,-2057.48681600,12.95712800,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
//	CreateDynamicObjectExULP(16599,1759.76342800,-2050.52368200,24.34701900,0,0,0, -1, 0, -1, MAX_RADIO_STREAM); // Tanque interior 0

// Taller LS Puertas (Exterior)
	CreateDynamicObjectExULP(1498,1764.252197,-2022.137329,13.104030,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1498,1735.632080,-2053.518066,12.536502,0.000000,0.000000,360.000000,-1,-1,-1,MAX_RADIO_STREAM);

// Talelr Los Santos (Interior)
	CreateDynamicObjectExULP(9163,1772.192382,-2038.273437,23.952186,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(9163,1783.590820,-2026.899414,23.952327,0.000000,0.000000,270.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(9163,1749.909179,-2062.036132,23.952186,0.000000,0.000000,270.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(9163,1721.257812,-2033.494140,23.952186,0.000000,0.000000,179.994506,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(9163,1721.326171,-2027.191406,23.952186,0.000000,0.000000,179.741821,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(9163,1749.682617,-1998.769531,23.952327,0.000000,0.000000,270.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(9163,1764.028320,-1998.851562,23.952327,0.000000,0.000000,269.741821,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(9163,1789.834960,-2007.052734,23.952186,0.000000,0.000000,179.994506,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8420,1714.820312,-2030.970703,19.691175,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8420,1714.820312,-2030.970703,19.691175,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8420,1794.112304,-2022.772460,19.691175,0.000000,0.000000,179.747314,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1496,1763.514770,-2023.713500,19.642738,0.000000,0.000000,89.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1496,1736.763671,-2053.363281,19.592731,0.000000,0.000000,178.989257,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(10558,1751.452148,-2053.588867,21.694576,0.000000,0.000000,270.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(10558,1768.945312,-2018.436523,21.694576,0.000000,0.000000,270.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(10558,1763.736328,-2032.031250,21.694576,0.000000,0.000000,359.747314,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14826,1744.096679,-2010.315429,20.257120,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5351,1767.281738,-2010.439941,19.667737,0.000000,0.000000,177.989074,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5351,1733.802612,-2011.233642,19.667737,0.000000,0.000000,177.984008,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5351,1734.113647,-2033.184082,19.667737,0.000000,0.000000,89.984008,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(10558,1763.685668,-2048.765625,21.694576,0.000000,0.000000,359.747314,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1299,1777.578002,-2009.414062,20.123598,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1428,1780.697265,-2012.014770,21.235593,0.000000,0.000000,267.749938,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3785,1779.924804,-2017.899169,25.606716,0.000000,0.000000,91.750000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1098,1730.081420,-2025.149536,20.409872,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1097,1730.096679,-2026.592773,22.576093,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1096,1730.103515,-2029.850585,22.584783,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1082,1730.074951,-2033.158813,22.609872,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1080,1730.012695,-2036.117187,22.609834,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1079,1730.018554,-2046.123046,20.384864,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1077,1730.005859,-2038.911132,22.659833,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1074,1730.078125,-2041.870117,22.684837,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1075,1729.985351,-2043.330078,20.359861,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1073,1730.080078,-2044.833007,22.659872,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1943,1736.016601,-2053.362304,22.797176,0.000000,0.000000,357.994995,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1943,1763.518432,-2022.937622,22.797176,0.000000,0.000000,85.994995,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1330,1780.356567,-2017.310180,20.143949,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2961,1759.882812,-2053.349121,21.626756,0.000000,0.000000,177.999877,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2961,1741.623901,-2053.333740,21.626756,0.000000,0.000000,177.994995,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2961,1763.522827,-2019.700561,21.626756,0.000000,0.000000,269.494995,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2961,1777.522338,-2018.218017,21.626756,0.000000,0.000000,177.994995,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2961,1763.512451,-2040.572387,21.626756,0.000000,0.000000,269.494628,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2712,1780.895507,-2014.780273,20.237728,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3034,1772.863891,-2007.595092,21.981813,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2611,1739.424072,-2007.480468,21.245603,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3034,1762.776000,-2007.514038,21.981813,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3034,1753.010864,-2007.491088,21.981813,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3034,1743.109741,-2007.456665,21.981813,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3034,1733.634643,-2007.448608,21.981813,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3034,1772.863281,-2007.594726,21.981813,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3034,1781.155395,-2013.015258,21.981813,0.000000,0.000000,270.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14795,1756.993164,-2031.160156,21.111650,0.000000,179.994506,1.999511,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14699,1743.245483,-2049.798583,24.760347,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14699,1757.239501,-2049.600585,24.760347,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14699,1757.159667,-2038.850585,24.760347,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14699,1757.254150,-2028.104736,24.760347,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14699,1757.129272,-2015.626464,24.760347,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14699,1743.135742,-2015.174804,24.760347,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14699,1743.125488,-2027.925170,24.760347,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14699,1743.259277,-2039.405029,24.760347,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14574,1730.118164,-2010.737182,20.908315,0.000000,0.000000,90.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2690,1732.799560,-2053.275634,21.144784,0.000000,0.000000,177.999877,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2690,1763.389648,-2025.540405,21.144784,0.000000,0.000000,265.995117,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2709,1780.928710,-2012.701171,19.807395,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2606,1730.290649,-2013.344726,22.499862,0.000000,0.000000,90.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2063,1730.351562,-2013.291015,20.576690,0.000000,0.000000,89.247436,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2479,1730.630249,-2053.074218,19.803121,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3761,1757.911621,-2008.314819,21.666719,0.000000,0.000000,269.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2567,1751.049682,-2008.853149,21.603147,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2579,1730.193603,-2016.917114,21.065252,0.000000,0.000000,88.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2626,1732.499633,-2019.320190,20.185449,0.000000,0.000000,89.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1663,1731.442138,-2018.998046,20.127952,0.000000,0.000000,87.500000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(944,1762.678833,-2041.847534,20.552524,0.000000,0.000000,89.500000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1271,1763.084106,-2039.797485,20.017738,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2197,1737.744384,-2009.004150,19.675546,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1225,1732.625122,-2008.372924,20.073492,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1225,1733.583984,-2008.088867,20.073492,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1225,1772.182495,-2008.124877,20.073492,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1225,1773.743408,-2008.122314,20.073492,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(996,1733.021240,-2025.781616,20.416492,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(996,1733.113769,-2033.927001,20.416492,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1775,1767.593872,-2008.112060,20.764774,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2464,1762.743041,-2041.478271,21.256626,0.000000,0.000000,78.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3576,1776.886474,-2016.029785,21.160409,0.000000,0.000000,268.750000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1000,1738.562133,-2052.837646,19.667737,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1010,1730.335205,-2052.655273,19.675546,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1010,1730.329345,-2052.330322,19.675546,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1013,1731.173095,-2053.383789,21.219739,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(10282,1735.380859,-2029.874511,20.679851,0.000000,0.000000,90.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(10282,1735.310546,-2037.874023,20.679851,0.000000,0.000000,90.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(996,1733.098632,-2041.941040,20.416492,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11392,1754.554931,-2029.196289,19.667737,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1438,1731.260986,-2048.921630,19.667737,0.000000,0.000000,86.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(930,1744.219604,-2053.046875,20.143613,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2970,1730.037231,-2022.284179,19.667737,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);

// Almacén LCN
	CreateDynamicObjectExULP(3604,674.147399,1828.333984,6.831064,0.000000,0.000000,0.000000,-1,12,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3604,697.680664,1837.452148,6.831064,0.000000,0.000000,90.000000,-1,12,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3604,674.146484,1849.333984,6.831064,0.000000,0.000000,179.994506,-1,12,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(6057,681.344726,1838.558593,0.230000,0.000000,0.000000,0.000000,-1,12,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(6057,681.344726,1838.558593,13.600000,0.000000,179.994506,0.000000,-1,12,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3604,688.699218,1849.297851,6.831064,0.000000,0.000000,179.994506,-1,12,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3604,665.257812,1837.395507,6.831064,0.000000,0.000000,270.000000,-1,12,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3604,688.699218,1828.297851,6.831064,0.000000,0.000000,0.000000,-1,12,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3604,697.680664,1837.452148,8.800000,0.000000,180.000000,90.000000,-1,12,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3604,688.699218,1849.297851,8.800000,0.000000,180.000000,179.994506,-1,12,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3604,674.146484,1849.333984,8.800000,0.000000,180.000000,179.994506,-1,12,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3604,665.257812,1837.395507,8.800000,0.000000,179.994506,270.000000,-1,12,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3604,674.146484,1828.333984,8.800000,0.000000,179.994506,0.000000,-1,12,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3604,688.699218,1828.297851,8.800000,0.000000,179.994506,0.000000,-1,12,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3761,681.329101,1841.020507,6.597235,0.000000,0.000000,0.000000,-1,12,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3761,678.754882,1834.284179,6.635207,0.000000,0.000000,271.411743,-1,12,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(10576,687.542480,1838.581787,8.838644,0.000000,0.000000,270.000000,-1,12,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(939,675.306945,1842.821044,7.041480,0.000000,0.000000,0.000000,-1,12,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(935,679.315063,1842.667480,5.161446,0.000000,0.000000,0.000000,-1,12,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(935,671.520141,1842.065673,5.161446,0.000000,0.000000,0.000000,-1,12,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(643,678.149780,1839.532836,5.082669,0.000000,0.000000,0.000000,-1,12,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1670,678.057312,1839.407470,5.499000,0.000000,0.000000,0.000000,-1,12,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2096,672.593505,1836.455566,4.620581,0.000000,0.000000,90.000000,-1,12,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2370,672.365356,1838.511718,4.623368,0.000000,0.000000,0.000000,-1,12,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2057,672.653381,1838.558593,5.640721,0.000000,0.000000,0.000000,-1,12,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2045,673.049926,1838.702026,5.563144,0.000000,0.000000,64.445800,-1,12,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2035,672.750305,1839.242187,5.494705,0.000000,0.000000,0.000000,-1,12,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2237,672.722290,1839.686157,5.715894,0.000000,12.749633,284.567871,-1,12,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1345,684.606384,1843.528442,5.375135,0.000000,0.000000,0.000000,-1,12,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(922,689.204284,1843.609985,5.479316,0.000000,0.000000,0.000000,-1,12,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5043,692.844238,1839.458496,6.104058,0.000000,0.000000,0.000000,-1,12,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5043,675.492004,1844.473754,6.104058,0.000000,0.000000,90.000000,-1,12,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14819,673.695007,1833.319335,5.787880,0.000000,0.000000,0.000000,-1,12,-1,MAX_RADIO_STREAM);

// Tumba (Interior)
	CreateDynamicObjectExULP(8396,586.836975,1656.358520,14.761646,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8396,583.413879,1654.936889,14.761646,0.000000,0.000000,290.621398,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8396,574.843261,1675.879150,14.761646,0.000000,0.000000,53.519409,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2896,573.504821,1662.423095,6.559999,0.000000,0.000000,90.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14444,556.209655,1663.049316,6.000000,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,573.385742,1666.875000,6.179687,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,573.492370,1664.040893,6.696915,0.000000,0.000000,270.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,580.573120,1666.453979,6.744010,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,568.008911,1666.505371,6.744010,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,572.385742,1655.259765,6.744010,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,572.281921,1662.490356,6.696915,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,573.486145,1660.926879,6.696915,0.000000,0.000000,270.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,574.692687,1662.485229,6.696915,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,572.176818,1661.091796,6.744010,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,574.811096,1661.098388,6.744010,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,574.793029,1663.881591,6.744010,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,572.158630,1663.874267,6.744010,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);

// Museo (Interior)
	CreateDynamicObjectExULP(10378,323.107421,2494.622070,15.800000,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(6296,345.113281,2471.815429,15.670000,0.000000,0.000000,90.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5848,307.000000,2532.899414,21.911830,0.000000,0.000000,171.293334,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3521,310.184570,2513.250976,17.337352,0.000000,0.000000,56.936645,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3471,345.886718,2515.439453,17.355789,0.000000,0.000000,270.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3462,345.065429,2471.701171,19.398452,0.000000,0.000000,270.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2745,339.650390,2512.926757,17.289867,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11489,337.929748,2521.411621,16.081249,0.000000,0.000000,33.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3935,292.246093,2512.244140,17.000000,0.000000,0.000000,179.994506,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11420,300.277343,2517.486328,16.000000,0.000000,0.000000,214.530029,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3462,341.516357,2472.275146,17.785280,0.000000,0.000000,270.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3471,350.058593,2518.614257,17.355789,0.000000,0.000000,270.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2745,351.855041,2512.831542,17.289867,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(9915,300.908203,2527.563476,1.299999,0.000000,0.000000,273.361816,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3462,348.585937,2472.224609,17.785280,0.000000,0.000000,270.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5848,364.544921,2516.000000,21.911830,0.000000,0.000000,81.546020,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5848,281.500000,2477.000000,21.911830,0.000000,0.000000,261.238403,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8664,352.327148,2462.777343,15.872628,0.000000,0.000000,359.241943,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5848,364.544921,2478.000000,21.911830,0.000000,0.000000,81.145019,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5848,309.307617,2456.137695,21.911830,0.000000,0.000000,351.095581,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5848,345.000000,2456.137695,21.911830,0.000000,0.000000,351.491088,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5848,345.000000,2532.899414,21.911830,0.000000,0.000000,171.491088,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5848,281.500000,2516.000000,21.911830,0.000000,0.000000,261.540527,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3935,291.994689,2523.751953,17.000000,0.000000,0.000000,179.994506,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3935,310.828002,2522.601806,17.000000,0.000000,0.000000,179.994506,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3471,341.378906,2518.744140,17.355789,0.000000,0.000000,270.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2064,294.040466,2517.521728,16.710470,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2061,295.148590,2518.571289,16.373178,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,333.200012,2523.780029,16.797918,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,311.864257,2510.071289,16.797918,0.000000,0.000000,270.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,307.864257,2510.071289,16.797918,0.000000,0.000000,270.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,303.864257,2510.071289,16.797918,0.000000,0.000000,270.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,299.864257,2510.071289,16.797918,0.000000,0.000000,270.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,295.864257,2510.071289,16.797918,0.000000,0.000000,270.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,291.864257,2510.071289,16.797918,0.000000,0.000000,270.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,334.564270,2510.071289,16.797918,0.000000,0.000000,270.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,338.563476,2510.071289,16.797918,0.000000,0.000000,270.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,342.563476,2510.071289,16.797918,0.000000,0.000000,270.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,346.563476,2510.071289,16.797918,0.000000,0.000000,270.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,350.563476,2510.071289,16.797918,0.000000,0.000000,270.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,354.563476,2510.071289,16.797918,0.000000,0.000000,270.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,312.982421,2511.779296,16.797918,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,312.982421,2515.779296,16.797918,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,312.982421,2519.779296,16.797918,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,333.200012,2511.779296,16.797918,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,333.200012,2515.779296,16.797918,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,333.200012,2519.779296,16.797918,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,312.982421,2523.779296,16.797918,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,354.563476,2479.071289,16.850000,0.000000,0.000000,270.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,350.563476,2479.071289,16.850000,0.000000,0.000000,270.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,346.563476,2479.071289,16.850000,0.000000,0.000000,270.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,342.563476,2479.071289,16.850000,0.000000,0.000000,270.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,338.563476,2479.071289,16.850000,0.000000,0.000000,270.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,334.563476,2479.071289,16.850000,0.000000,0.000000,270.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,333.199218,2477.779296,16.840000,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,333.199218,2473.779296,16.840000,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,333.199218,2469.779296,16.840000,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,333.199218,2465.779296,16.840000,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(10378,323.199218,2494.620117,24.500000,0.000000,179.994506,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11489,353.439453,2520.099609,16.081249,0.000000,0.000000,312.994995,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,291.864257,2479.071289,16.840000,0.000000,0.000000,270.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,295.864257,2479.071289,16.840000,0.000000,0.000000,270.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,299.864257,2479.071289,16.840000,0.000000,0.000000,270.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,303.864257,2479.071289,16.840000,0.000000,0.000000,270.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,307.864257,2479.071289,16.840000,0.000000,0.000000,270.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,311.864257,2479.071289,16.840000,0.000000,0.000000,270.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,313.100006,2477.779296,16.840000,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,313.100006,2473.779296,16.840000,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,33313.101562,2469.779296,16.840000,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,313.100006,2465.779296,16.840000,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,313.100006,2469.779296,16.840000,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(10757,301.432983,2472.060791,19.299999,356.000000,0.000000,122.758636,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(10378,300.505706,2474.226074,10.989999,0.000000,0.000000,220.922485,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5848,254.544921,2478.000000,21.911830,0.000000,0.000000,81.145019,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5848,254.544921,2516.000000,21.911830,0.000000,0.000000,81.540527,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5848,186.152832,2535.504394,21.911830,0.000000,0.000000,261.540527,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5848,186.128646,2453.443115,21.911830,0.000000,0.000000,261.238403,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8664,194.000976,2461.356445,15.872628,0.000000,0.000000,270.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5848,245.000000,2532.899414,21.911830,0.000000,0.000000,171.491088,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5848,207.000000,2532.899414,21.911830,0.000000,0.000000,171.293334,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5848,245.000000,2456.137695,21.911830,0.000000,0.000000,351.491088,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5848,209.307617,2456.137695,21.911830,0.000000,0.000000,351.090087,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8664,352.318237,2458.681884,24.000000,0.000000,179.994506,90.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8664,185.703125,2470.863281,24.000000,0.000000,179.994506,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3851,319.333007,2491.778076,19.260000,90.000000,180.000000,224.224121,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3851,322.733001,2490.340087,19.260000,90.000000,180.005493,270.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3851,326.863006,2491.810058,19.260000,90.000000,180.005493,315.269409,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3851,328.279998,2495.229980,19.260000,90.000000,179.994506,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3851,326.879638,2498.656250,19.260000,90.000000,179.994506,44.814453,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3851,323.470001,2500.085937,19.260000,90.000000,179.994506,90.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3851,319.359008,2498.649902,19.260000,90.000000,179.994506,135.564331,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3851,317.949218,2495.217773,19.260000,90.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(9915,323.339172,2485.160888,1.299999,0.000000,0.000000,99.738708,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3851,322.769989,2500.080078,19.260000,90.000000,179.994506,90.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3851,323.446014,2490.399902,19.260000,90.000000,180.005493,270.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1536,318.218750,2525.113281,15.950753,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1536,321.207000,2525.110595,15.950753,0.000000,0.000000,178.500000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1536,326.615325,2525.075195,15.950753,0.000000,0.000000,178.494873,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1536,323.597137,2525.070068,15.950753,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(9918,178.886718,2494.392578,35.900001,0.000000,0.000000,270.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2289,189.339843,2480.158203,21.868410,0.000000,0.000000,90.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2287,189.706375,2480.194091,19.932964,0.000000,0.000000,90.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2286,189.256484,2480.239013,18.648128,0.000000,0.000000,90.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2285,189.784057,2483.994384,21.628108,0.000000,0.000000,90.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2284,189.694046,2483.823486,18.338783,0.000000,0.000000,90.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2283,189.308700,2487.961914,21.929195,0.000000,0.000000,90.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2282,189.722900,2487.973876,19.952568,0.000000,0.000000,90.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2281,189.761657,2487.965087,18.257507,0.000000,0.000000,90.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2280,189.751953,2483.922607,19.816905,0.000000,0.000000,90.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2278,189.770050,2492.152099,20.000000,0.000000,0.000000,90.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2276,189.761947,2504.999755,21.600000,0.000000,0.000000,90.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2273,189.723205,2492.118408,18.301137,0.000000,0.000000,90.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2272,189.758834,2501.535644,19.799999,0.000000,0.000000,90.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2269,189.746078,2497.293457,19.799999,0.000000,0.000000,90.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2268,189.755142,2508.779785,19.879999,0.000000,0.000000,90.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2267,189.289733,2497.270019,21.972908,0.000000,0.000000,90.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2266,189.717056,2505.126464,18.450000,0.000000,0.000000,90.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2264,189.740478,2505.037353,19.879999,0.000000,0.000000,90.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2263,189.783782,2501.583984,18.418119,0.000000,0.000000,90.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2262,189.700256,2508.784667,21.629158,0.000000,0.000000,90.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2261,189.733810,2497.323974,18.266798,0.000000,0.000000,90.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2260,189.731811,2501.561279,21.649999,0.000000,0.000000,90.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2289,189.304901,2492.186523,21.868410,0.000000,0.000000,90.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2286,189.281356,2508.776123,18.648128,0.000000,0.000000,90.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2176,198.197265,2516.375976,18.792942,0.000000,0.000000,50.059204,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11420,236.210311,2516.663574,15.779999,0.000000,0.000000,141.828002,-1,15,-1,MAX_RADIO_STREAM); // Static
	CreateDynamicObjectExULP(11420,235.878906,2494.404296,15.779999,0.000000,0.000000,141.828002,-1,15,-1,MAX_RADIO_STREAM); // Static
	CreateDynamicObjectExULP(11420,235.188476,2472.082519,15.779999,0.000000,0.000000,141.828002,-1,15,-1,MAX_RADIO_STREAM); // Static
	CreateDynamicObjectExULP(4565,365.249023,2498.794921,15.109999,0.000000,0.000000,270.000000,-1,15,-1,MAX_RADIO_STREAM); // Static
	CreateDynamicObjectExULP(1215,329.076629,2492.772949,16.515075,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,329.051818,2497.573730,16.515075,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,325.765594,2500.820556,16.515075,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,320.368011,2500.797607,16.515075,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,317.221527,2497.614257,16.515075,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,317.124664,2492.763916,16.515075,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,320.443237,2489.473632,16.515075,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,325.802947,2489.466552,16.515075,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,333.243865,2479.082031,16.895013,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,313.145080,2479.187988,16.895013,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,313.165527,2510.240478,16.895013,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,333.074157,2510.299804,16.895013,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,232.603897,2475.743164,16.515075,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,231.985641,2468.829101,16.515075,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,236.198043,2466.989746,16.515075,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,236.232055,2476.720214,16.515075,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,240.017410,2474.077880,16.515075,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,239.876983,2469.316894,16.515075,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,236.499389,2489.451660,16.515075,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,232.881713,2491.124023,16.515075,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,240.195678,2491.014404,16.515075,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,240.322326,2496.686279,16.515075,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,236.716064,2498.629394,16.515075,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,233.576202,2497.634765,16.515075,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,233.576171,2497.634765,16.515075,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,233.935241,2512.994628,16.515075,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,234.165023,2519.948974,16.515075,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,236.977615,2521.057128,16.515075,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,236.896118,2511.811279,16.515075,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,240.574737,2513.745849,16.515075,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,240.328323,2519.341064,16.515075,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1536,356.860351,2500.890625,16.695938,0.000000,0.000000,90.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4565,216.893554,2455.420898,15.109999,0.000000,0.000000,179.994506, -1,15,-1,MAX_RADIO_STREAM); // Static
	CreateDynamicObjectExULP(1536,356.790008,2503.898925,16.695938,0.000000,0.000000,271.037719,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1536,356.789062,2494.000000,16.695938,0.000000,0.000000,271.032714,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1536,356.860351,2491.000000,16.695938,0.000000,0.000000,90.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1536,218.779998,2463.833007,16.695938,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1536,221.805221,2463.870117,16.695938,0.000000,0.000000,180.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1536,212.899948,2463.887939,16.695938,0.000000,0.000000,179.994506,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1536,209.889999,2463.863037,16.695938,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,220.842864,2503.132812,16.467981,0.000000,0.000000,270.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,224.842773,2503.132812,16.467981,0.000000,0.000000,270.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,216.842773,2503.132812,16.467981,0.000000,0.000000,270.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3851,225.450805,2500.396972,18.799999,90.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3851,225.450195,2496.396484,18.799999,90.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3851,225.450195,2492.396484,18.799999,90.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3851,225.450195,2488.396484,18.799999,90.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3851,225.450195,2484.396484,18.799999,90.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3851,223.445007,2482.387939,18.799999,90.000000,180.000000,270.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3851,215.444335,2482.387695,18.799999,90.000000,179.994506,270.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3851,219.444335,2482.387695,18.799999,90.000000,179.994506,270.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3851,211.444335,2482.387695,18.799999,90.000000,179.994506,270.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3851,209.450195,2484.396484,18.799999,90.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3851,209.450195,2488.396484,18.799999,90.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3851,209.450195,2492.396484,18.799999,90.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3851,209.450195,2496.396484,18.799999,90.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3851,209.450195,2500.396484,18.799999,90.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,225.952148,2501.314453,16.467981,0.000000,0.000000,179.994506,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,225.952148,2497.314453,16.467981,0.000000,0.000000,179.994506,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,225.952148,2493.314453,16.467981,0.000000,0.000000,179.994506,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,225.952148,2489.314453,16.467981,0.000000,0.000000,179.994506,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,225.952148,2485.314453,16.467981,0.000000,0.000000,179.994506,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,224.938720,2481.860595,16.467981,0.000000,0.000000,90.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,220.938476,2481.860351,16.467981,0.000000,0.000000,90.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,216.938476,2481.860351,16.467981,0.000000,0.000000,90.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,212.938476,2481.860351,16.467981,0.000000,0.000000,90.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3851,223.444335,2502.387695,18.799999,90.000000,179.994506,270.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3851,219.444335,2502.387695,18.799999,90.000000,179.994506,270.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3851,215.444335,2502.387695,18.799999,90.000000,180.005493,269.989013,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,208.952148,2501.314453,16.467981,0.000000,0.000000,179.994506,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,208.952148,2497.314453,16.467981,0.000000,0.000000,179.994506,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,208.952148,2493.314453,16.467981,0.000000,0.000000,179.994506,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,208.952148,2489.314453,16.467981,0.000000,0.000000,179.994506,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2773,208.952148,2485.314453,16.467981,0.000000,0.000000,179.994506,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(9915,216.941284,2478.669189,0.000000,0.000000,0.000000,91.508636,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3935,222.469650,2487.760742,17.000000,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3935,212.169113,2487.714111,17.000000,0.000000,0.000000,0.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3471,220.616134,2491.864501,17.355789,0.000000,0.000000,90.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11489,217.362991,2483.814453,16.081249,0.000000,0.000000,180.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3462,213.477172,2503.031005,17.464469,0.000000,0.000000,270.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3462,209.245147,2502.966796,17.464469,0.000000,0.000000,270.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2745,223.739486,2495.104736,17.159372,0.000000,0.000000,180.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3471,213.986587,2492.041992,17.355789,0.000000,0.000000,90.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2745,211.161514,2495.359375,17.159372,0.000000,0.000000,179.994506,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3471,217.411437,2494.835449,17.355789,0.000000,0.000000,90.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3851,211.444335,2498.387695,18.799999,90.000000,179.994506,270.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3851,219.444335,2498.387695,18.799999,90.000000,179.994506,270.000000,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3851,215.444335,2498.387695,18.799999,90.000000,180.005493,269.989013,-1,15,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8399,217.29827880859,2535.0510253906,20.691082000732,0,0,180, -1, 15, -1, MAX_RADIO_STREAM); // Last
	CreateDynamicObjectExULP(1215,215.98347473145,2516.126953125,16.515075683594,0,0,0, -1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,217.94522094727,2516.0576171875,16.515075683594,0,0,0, -1, 15, -1, MAX_RADIO_STREAM);

// SICARIOS Parking de vehículos CASONAS(EXTERIOR)
	CreateDynamicObjectExULP(1265,1563.697998,-40.031276,20.653673,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1265,1538.170288,99.253158,29.029890,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1265,1527.120239,9.298553,23.609668,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1265,1554.011840,10.197921,23.483552,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1265,1544.253173,75.383621,27.318462,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1265,1530.537109,83.055786,28.269886,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1265,1523.995117,29.161132,23.604455,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1265,1558.771484,40.214843,23.633106,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1265,1542.391601,54.946289,25.639667,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1265,1565.014892,-3.988383,21.997161,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1265,1555.310546,-22.351562,20.863498,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5779,1509.708129,10.373106,24.710306,0.000000,0.000000,190.500000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5779,1508.102905,20.564918,24.710306,0.000000,0.000000,190.497436,-1,-1,-1,MAX_RADIO_STREAM);

// DeathMatch LOCURA
	CreateDynamicObjectExULP(11317,-484.097656,2471.299804,63.669998,0.000000,0.000000,90.000000,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11317,-453.150390,2449.447265,63.599998,0.000000,0.000000,270.000000,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1726,-475.185485,2474.884521,52.865310,0.000000,0.000000,0.000000,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1727,-471.683197,2473.249755,52.865310,0.000000,0.000000,270.000000,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1714,-479.438537,2473.014892,52.865310,0.000000,0.000000,92.329101,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1827,-474.230102,2472.831787,52.865310,0.000000,0.000000,0.000000,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2207,-477.799804,2471.949218,52.865310,0.000000,0.000000,90.000000,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1727,-473.773803,2470.667968,52.865310,0.000000,0.000000,179.994506,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2777,-476.862182,2473.633789,53.362800,0.000000,0.000000,285.045776,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2777,-477.036865,2471.767333,53.362800,0.000000,0.000000,216.095581,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2894,-477.757873,2472.894287,53.642684,0.000000,0.000000,281.461242,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2007,-479.557495,2476.245117,52.865310,0.000000,0.000000,0.000000,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2007,-478.028503,2476.245117,52.865310,0.000000,0.000000,0.000000,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2816,-473.892822,2472.626220,53.299999,0.000000,0.000000,0.000000,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2826,-474.565063,2472.781982,53.299999,0.000000,0.000000,186.487854,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2827,-474.042358,2473.300292,53.266242,0.000000,0.000000,155.302978,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2828,-478.119018,2472.097656,53.642684,0.000000,0.000000,18.589813,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2190,-477.817016,2473.543457,53.642684,0.000000,0.000000,283.642028,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2202,-480.386047,2469.869873,52.865310,0.000000,0.000000,90.000000,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(10575,-475.000000,2443.727294,54.776760,0.000000,0.000000,270.000000,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(10575,-462.797851,2443.726562,54.776760,0.000000,0.000000,270.000000,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(10575,-456.351074,2472.907714,54.776760,0.000000,0.000000,0.000000,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,-456.342987,2464.887939,52.865310,0.000000,0.000000,90.000000,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,-1885.088867,192.087127,40.046875,0.000000,0.000000,90.000000,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13657,1399.944458,1308.876953,13.383806,0.000000,0.000000,0.000000,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13657,1399.955566,1352.531982,19.100000,180.000000,0.000000,0.000000,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11011,1396.083862,1303.636352,13.799999,0.000000,0.000000,180.000000,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11442,1483.638183,1293.311157,10.149431,0.000000,0.000000,269.166381,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11443,1486.157592,1354.112426,10.149431,0.000000,0.000000,271.256103,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11445,1485.218872,1310.361572,10.149431,0.000000,0.000000,84.993865,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11446,1479.990722,1282.501098,10.149431,0.000000,0.000000,0.000000,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11443,1489.526489,1375.395629,10.149431,0.000000,0.000000,271.252441,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11447,1486.776977,1365.246459,10.149431,0.000000,0.000000,274.256103,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11447,1486.692382,1344.215576,10.149431,0.000000,0.000000,271.251708,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11440,1498.738159,1296.020385,10.149431,0.000000,0.000000,358.620239,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11427,1487.757690,1333.860229,17.339290,0.000000,0.000000,3.000000,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11440,1499.843383,1352.092041,10.149431,0.000000,0.000000,358.615722,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11425,1462.828613,1320.711669,11.971117,0.000000,0.000000,319.685729,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11425,1452.832275,1358.644409,11.971117,0.000000,0.000000,180.422302,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11443,1445.668212,1348.771728,10.149431,0.000000,0.000000,329.861694,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11445,1441.138793,1322.432495,10.149431,0.000000,0.000000,84.990234,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11447,1485.952148,1322.507934,10.149431,0.000000,0.000000,271.996948,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11088,1407.117431,1354.018066,16.000000,0.000000,0.000000,270.840942,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11447,1449.007568,1296.155151,10.149431,0.000000,0.000000,12.875549,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11446,1443.452148,1303.740966,10.149431,0.000000,0.000000,328.820404,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(12958,1414.392456,1343.064941,13.600000,0.000000,0.000000,0.000000,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(12958,1412.065307,1353.015258,13.600000,0.000000,0.000000,268.711181,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5262,1398.731445,1352.226318,13.613910,0.000000,0.000000,0.000000,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5269,1408.040771,1375.950073,12.965297,0.000000,0.000000,270.666320,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3577,1416.167114,1332.620239,11.438756,0.000000,0.000000,0.000000,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3761,1399.227172,1329.301147,12.655231,0.000000,0.000000,0.000000,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3761,1392.766113,1329.147583,12.655231,0.000000,0.000000,0.000000,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3761,1399.209838,1335.674682,12.655231,0.000000,0.000000,0.000000,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3761,1396.965698,1339.662841,12.655231,0.000000,0.000000,270.801025,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(12839,1388.982788,1312.885864,13.600000,0.000000,0.000000,0.000000,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(939,1403.109252,1306.288452,13.422912,0.000000,0.000000,90.000000,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(922,1390.937255,1311.412719,11.872352,0.000000,0.000000,90.000000,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2885,1417.518432,1347.899047,16.799999,90.000000,179.994506,270.000000,10,-1,-1,MAX_RADIO_STREAM); /// Last
	CreateDynamicObjectExULP(2885,1417.517578,1351.599975,16.780000,90.000000,179.994506,270.000000,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2885,1410.675781,1351.562500,16.600000,270.000000,180.000000,270.000000,10,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2885,1410.675781,1347.859985,16.600000,270.000000,179.994506,270.000000,10,-1,-1,MAX_RADIO_STREAM);

// COCECIONARIO INTERIOR && PUERTA   WANG CAR
	CreateDynamicObjectExULP(1569,-1925.088867,292.087127,40.046875,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM); // Puerta (Exterior)
	CreateDynamicObjectExULP(1569,-496.342987,2564.887939,52.865310,0.000000,0.000000,90.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11317,-524.097656,2571.299804,63.669998,0.000000,0.000000,90.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11317,-493.150390,2549.447265,63.599998,0.000000,0.000000,270.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1726,-515.185485,2574.884521,52.865310,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1727,-511.683197,2573.249755,52.865310,0.000000,0.000000,270.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1714,-519.438537,2573.014892,52.865310,0.000000,0.000000,92.329101,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1827,-514.230102,2572.831787,52.865310,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2207,-517.799804,2571.949218,52.865310,0.000000,0.000000,90.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1727,-513.773803,2570.667968,52.865310,0.000000,0.000000,179.994506,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2777,-516.862182,2573.633789,53.362800,0.000000,0.000000,285.045776,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2777,-517.036865,2571.767333,53.362800,0.000000,0.000000,216.095581,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2894,-517.757873,2572.894287,53.642684,0.000000,0.000000,281.461242,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2007,-519.557495,2576.245117,52.865310,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2007,-518.028503,2576.245117,52.865310,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2816,-513.892822,2572.626220,53.299999,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2826,-514.565063,2572.781982,53.299999,0.000000,0.000000,186.487854,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2827,-514.042358,2573.300292,53.266242,0.000000,0.000000,155.302978,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2828,-518.119018,2572.097656,53.642684,0.000000,0.000000,18.589813,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2190,-517.817016,2573.543457,53.642684,0.000000,0.000000,283.642028,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2202,-520.386047,2569.869873,52.865310,0.000000,0.000000,90.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(10575,-515.000000,2543.727294,54.776760,0.000000,0.000000,270.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(10575,-502.797851,2543.726562,54.776760,0.000000,0.000000,270.000000,-1,16,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(10575,-496.351074,2572.907714,54.776760,0.000000,0.000000,0.000000,-1,16,-1,MAX_RADIO_STREAM);

// LSPD Y SAMD EXTERIORES (TECHOS)
	CreateDynamicObjectExULP(9241,-2674.000000,516.175781,46.500000,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(9241,-2633.399414,516.175781,46.500000,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3242,-2653.996582,546.285888,48.799999,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3934,1564.893432,-1645.392211,27.402114,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3934,1564.892578,-1661.000000,27.402114,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3934,1564.755859,-1706.000000,27.402114,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3934,1564.755859,-1689.670898,27.402114,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,1572.963500,-1635.521362,14.779999,0.000000,90.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,1572.962890,-1635.520507,19.209999,0.000000,90.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,1572.962890,-1635.520507,23.655000,0.000000,90.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,1572.962890,-1635.520507,28.100000,0.000000,90.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,1569.619995,-1635.520507,14.779999,0.000000,90.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,1571.290039,-1633.869140,19.209999,0.000000,90.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,1571.290039,-1633.869140,23.655000,0.000000,90.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,1571.290039,-1633.869140,28.100000,0.000000,90.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,1569.619140,-1635.520507,19.209999,0.000000,90.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,1569.619140,-1635.520507,23.655000,0.000000,90.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,1569.619140,-1635.520507,28.100000,0.000000,90.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,1569.619140,-1635.520507,14.779999,0.000000,90.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,1569.619140,-1635.520507,19.209999,0.000000,90.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,1569.619140,-1635.520507,23.655000,0.000000,90.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,1569.619140,-1635.520507,28.100000,0.000000,90.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,1571.290039,-1633.869140,19.209999,0.000000,90.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,1571.290039,-1633.869140,23.655000,0.000000,90.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,1571.290039,-1633.869140,28.100000,0.000000,90.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,1572.962890,-1635.520507,14.779999,0.000000,90.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,1572.962890,-1635.520507,23.655000,0.000000,90.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,1572.962890,-1635.520507,28.100000,0.000000,90.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,1571.368041,-1635.554199,30.319999,270.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,1571.367187,-1635.553710,30.319999,90.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);

// NFS Wang Cars (Exterior)
	CreateDynamicObjectExULP(966,-1980.680053,291.673736,34.036567,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(982,-1983.563110,238.826675,35.152305,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(982,-1995.311279,251.894042,35.159858,359.800048,0.000000,353.326568,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,-1993.239990,271.070007,35.105430,0.000000,0.000000,354.750000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,-1984.058593,278.090728,35.199180,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,-1988.252807,298.753082,35.199180,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,-1989.748046,278.116210,35.199180,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,-1984.148803,298.767974,35.199180,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(982,-1892.133178,250.969009,40.730430,0.000000,0.000000,167.493957,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(982,-1885.903930,275.877899,40.730430,0.000000,0.000000,164.492065,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(982,-1901.785034,251.366348,40.730430,0.000000,0.000000,179.492065,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(982,-1914.436157,251.520431,40.730430,0.000000,0.000000,179.489135,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,-1898.404174,238.525680,40.730430,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,-1892.099975,288.357971,40.730430,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,-1985.031127,310.192474,35.105430,0.000000,0.000000,270.799560,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,-1991.449951,302.000000,35.199180,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,-1991.449218,306.820007,35.199180,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,-1885.692382,288.357421,40.730430,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(966,-1911.283081,238.346893,34.182922,0.000000,0.000000,180.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,-1980.902832,295.537414,34.869998,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,-1980.766113,281.205017,34.869998,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,-1914.808471,238.485229,34.691368,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,-1900.893310,238.515899,34.691368,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);

// LICENCIEROS GARAGE INTERIOR && EXTERIOR
	CreateDynamicObjectExULP(10575,-2010.599975,-133.548431,36.244667,0.000000,0.000000,180.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11326,-2019.165649,-128.891204,36.200000,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(10575,-2010.599975,-143.020355,36.244667,0.000000,0.000000,180.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(10575,-2021.799804,-143.019531,36.244667,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(10575,-2021.799804,-133.547851,36.244667,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);

	CreateDynamicObjectExULP(3598,1940.474487,668.000000,25.393783,0.000000,0.000000,180.000000,-1,12,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3598,1940.473632,639.922851,25.393783,0.000000,0.000000,0.000000,-1,12,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3598,1966.000000,649.310852,25.393783,0.000000,0.000000,0.000000,-1,12,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3598,1966.000000,658.700012,25.393783,0.000000,0.000000,0.000000,-1,12,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3598,1914.500000,649.310546,25.393783,0.000000,0.000000,179.994506,-1,12,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3598,1914.500000,658.699218,25.393783,0.000000,0.000000,179.994506,-1,12,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(6057,1948.504882,655.098632,27.700000,179.994506,0.000000,90.000000,-1,12,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(6057,1926.499877,654.430297,27.700000,179.994506,0.000000,270.000000,-1,12,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11313,1952.900024,649.480834,20.315580,0.000000,0.000000,0.000000,-1,12,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11313,1952.900024,658.790222,20.315580,0.000000,0.000000,0.000000,-1,12,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11313,1927.612304,658.339172,20.315580,0.000000,0.000000,180.000000,-1,12,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11313,1927.612304,649.480468,20.315580,0.000000,0.000000,180.000000,-1,12,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(996,1929.000000,653.940673,19.095632,0.000000,0.000000,0.000000,-1,12,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(996,1944.699218,653.940429,19.095632,0.000000,0.000000,0.000000,-1,12,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1936.858764,653.948791,18.911201,0.000000,0.000000,0.000000,-1,12,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1943.783813,653.964111,18.911201,0.000000,0.000000,0.000000,-1,12,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1952.463989,653.956420,18.911201,0.000000,0.000000,0.000000,-1,12,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1927.998291,653.981933,18.911201,0.000000,0.000000,0.000000,-1,12,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8843,1940.108398,649.607421,18.399999,0.000000,0.000000,90.000000,-1,12,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8843,1940.174682,658.706115,18.350000,0.000000,0.000000,270.000000,-1,12,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8843,1940.173828,658.706054,18.399999,0.000000,0.000000,270.000000,-1,12,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(6057,1938.960937,647.764648,13.989999,0.000000,0.000000,0.000000,-1,12,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(6057,1940.392333,660.194458,13.989999,0.000000,0.000000,179.994506,-1,12,-1,MAX_RADIO_STREAM);

// Mapeo Shiro
	CreateDynamicObjectExULP(1481,963.216735,-684.140930,121.679382,0.000000,0.000000,122.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1481,962.729614,-683.365112,121.679382,0.000000,0.000000,121.997680,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1481,962.244934,-682.597473,121.679382,0.000000,0.000000,121.997680,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1737,963.960449,-685.042419,120.976257,0.000000,0.000000,302.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1255,969.405090,-685.550415,121.550155,0.000000,0.000000,120.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1255,971.315307,-684.417175,121.550155,0.000000,0.000000,123.247558,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2118,970.152282,-684.618041,120.976257,0.000000,0.000000,300.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1509,970.383666,-685.047241,121.965499,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1667,970.110656,-685.268188,121.856620,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1667,970.740539,-684.885192,121.856620,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1665,969.925109,-684.947082,121.778495,0.000000,0.000000,250.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1256,957.058776,-676.029846,120.806648,0.000000,0.000000,210.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1256,958.505859,-678.484375,120.803718,0.000000,0.000000,209.998168,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1256,959.931396,-680.946228,120.800842,0.000000,0.000000,209.998168,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2232,967.840515,-689.233459,121.574134,0.000000,0.000000,212.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2225,967.868164,-689.593811,121.673309,0.000000,0.000000,211.750000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2229,967.126892,-689.843994,120.976257,0.000000,0.000000,210.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2229,968.157836,-689.204223,120.976257,0.000000,0.000000,211.998168,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2344,970.412597,-684.463256,121.781715,358.010955,6.003631,346.209136,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1790,967.852722,-689.306640,122.504623,0.000000,0.000000,32.250000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2357,960.557495,-679.295043,120.537818,0.000000,0.000000,300.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2357,958.850463,-676.329406,120.541160,0.000000,0.000000,299.998168,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2921,1006.961669,-642.243286,125.148750,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(15038,968.812927,-688.536437,121.593444,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(15038,966.807128,-689.841003,121.593444,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1478,998.141967,-644.309143,121.260421,0.000000,0.000000,168.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1568,984.120849,-668.352966,120.638786,0.000000,0.000000,0.250000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1568,970.962097,-676.436340,120.590713,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(642,959.782531,-677.814392,121.299598,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);

// YKZ Almacén exterior
	CreateDynamicObjectExULP(1649,-2179.478515,696.628479,55.200000,0.000000,90.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,-2179.478515,696.627929,59.639999,0.000000,90.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,-2179.478515,696.627929,64.080001,0.000000,90.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,-2179.478515,696.627929,68.519996,0.000000,90.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,-2179.478515,696.627929,72.959999,0.000000,90.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,-2179.478515,696.627929,55.200000,0.000000,90.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,-2179.478515,696.627929,59.639999,0.000000,90.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,-2179.478515,696.627929,64.080001,0.000000,90.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,-2179.478515,696.627929,68.519996,0.000000,90.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,-2179.478515,696.627929,72.959999,0.000000,90.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,-2182.815917,696.627929,72.959999,0.000000,90.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,-2181.149414,698.296875,59.639999,0.000000,90.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,-2181.149414,698.296875,64.080001,0.000000,90.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,-2181.149414,698.296875,68.519996,0.000000,90.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,-2181.149414,698.296875,72.959999,0.000000,90.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,-2181.149414,698.296875,59.639999,0.000000,90.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,-2181.149414,698.296875,64.080001,0.000000,90.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,-2181.149414,698.296875,68.519996,0.000000,90.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,-2181.149414,698.296875,72.959999,0.000000,90.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,-2182.815429,696.627929,55.200000,0.000000,90.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,-2182.815429,696.627929,59.639999,0.000000,90.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,-2182.815429,696.627929,64.080001,0.000000,90.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,-2182.815429,696.627929,68.519996,0.000000,90.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,-2182.815429,696.627929,55.200000,0.000000,90.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,-2182.815429,696.627929,59.639999,0.000000,90.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,-2182.815429,696.627929,64.080001,0.000000,90.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,-2182.815429,696.627929,68.519996,0.000000,90.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,-2182.815429,696.627929,72.959999,0.000000,90.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8615,-2187.822265,685.998046,71.099998,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3666,-2181.876220,684.330017,69.279998,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3666,-2198.810058,684.205566,69.279998,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3666,-2198.854003,667.922851,69.279998,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3666,-2181.829345,668.077209,69.279998,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3928,-2190.297363,676.377563,68.785003,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3666,-2194.287841,672.869445,69.279998,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3666,-2194.210693,679.693542,69.279998,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3666,-2186.552246,679.770507,69.279998,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3666,-2186.520019,672.799865,69.279998,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8230,-2190.362060,676.163635,67.000000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8230,-2190.340576,658.149414,67.000000,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3671,-2186.455078,681.700744,51.000000,0.000000,0.000000,286.685729,-1,-1,-1,MAX_RADIO_STREAM);

// Garages públicos SF y LS
	CreateObjectEx(7245,2470.947265,2371.292968,73.556030,0.000000,0.000000,0.000000,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4638,2460.061767,2377.379394,71.833801,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4597,2459.623535,2357.762207,69.766998,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(10184,2445.116210,2373.519531,76.188369,0.000000,0.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(10010,2422.284667,2484.279785,68.999992,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(10184,2389.971191,2450.611572,76.900001,180.000000,0.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(10184,2389.971923,2451.460449,71.899902,0.000000,0.000000,179.994506,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(17951,1642.599487,-1681.646972,14.298022,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4641,1641.606933,-1687.605102,14.219750,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4597,1641.552978,-1667.906372,12.300000,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);

// SAMD INTERIOR
/*	CreateObjectEx(14395,1599.000000,720.642578,14.199000,0.000000,0.000000,270.000000,MAX_RADIO_STREAM);
	CreateObjectEx(14675,1599.402343,742.603515,20.899999,0.000000,0.000000,0.000000,MAX_RADIO_STREAM);*/
	CreateDynamicObjectExULP(14675,1658.188476,713.781250,20.849462,0.000000,0.000000,179.994506,-1,11,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14675,1595.756835,708.111328,17.399999,0.000000,0.000000,179.994506,-1,11,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14675,1689.030395,727.360778,20.840000,0.000000,0.000000,0.000000,-1,11,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14674,1600.918334,744.565307,9.820312,0.000000,0.000000,180.000000,-1,11,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14395,1596.000366,720.643127,14.199999,0.000000,0.000000,270.000000,-1,11,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14394,1600.025512,724.699340,13.666000,0.000000,0.000000,270.000000,-1,11,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1361,1604.167724,724.657287,14.147605,0.000000,0.000000,0.000000,-1,11,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1361,1596.017089,724.657226,14.147605,0.000000,0.000000,0.000000,-1,11,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1360,1592.150634,725.398437,14.176390,0.000000,0.000000,0.000000,-1,11,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1592.829956,727.299987,9.929323,0.000000,0.000000,90.000000,-1,11,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1602.329956,720.549987,14.340000,0.000000,0.000000,90.000000,-1,11,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1589.774414,720.245117,16.799999,0.000000,0.000000,0.000000,-1,11,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14675,1731.394531,724.613281,20.840000,0.000000,0.000000,0.000000,-1,11,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14675,1700.394531,718.376953,20.849462,0.000000,0.000000,179.994506,-1,11,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1592.829101,730.301757,9.929323,0.000000,0.000000,270.000000,-1,11,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1602.329101,723.549804,14.340000,0.000000,0.000000,270.000000,-1,11,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1669.429687,713.725585,9.875288,0.000000,0.000000,90.000000,-1,11,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1669.429687,716.719726,9.875288,0.000000,0.000000,270.000000,-1,11,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1536,1677.774414,724.423828,9.860429,0.000000,0.000000,90.000000,-1,11,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1536,1677.774414,727.429687,9.860131,0.000000,0.000000,270.000000,-1,11,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1672.477539,732.329101,9.866117,0.000000,0.000000,0.000000,-1,11,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1675.479492,732.329101,9.866117,0.000000,0.000000,179.994506,-1,11,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1672.477539,708.799804,9.866117,0.000000,0.000000,0.000000,-1,11,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1675.479492,708.799804,9.866117,0.000000,0.000000,179.994506,-1,11,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(626,1670.242187,709.471679,11.922089,0.000000,0.000000,0.000000,-1,11,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(626,1677.166015,709.766601,11.922089,0.000000,0.000000,0.000000,-1,11,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(627,1676.646972,730.671691,11.722088,0.000000,0.000000,0.000000,-1,11,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(627,1670.379760,730.733398,11.723573,0.000000,0.000000,0.000000,-1,11,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(630,1677.466430,719.672912,10.898485,0.000000,0.000000,0.000000,-1,11,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(630,1669.899414,720.156250,10.899591,0.000000,0.000000,0.000000,-1,11,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1711.797851,713.979492,9.879199,0.000000,0.000000,270.000000,-1,11,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1711.797851,710.972656,9.879199,0.000000,0.000000,90.000000,-1,11,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1536,1719.980468,732.019531,9.861059,0.000000,0.000000,270.000000,-1,11,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1536,1719.980468,729.009765,9.861059,0.000000,0.000000,90.000000,-1,11,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1716.599609,710.039062,9.866117,0.000000,0.000000,179.994506,-1,11,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(626,1712.898315,732.060668,11.921496,0.000000,0.000000,0.000000,-1,11,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(627,1712.745849,710.737792,11.724048,0.000000,0.000000,0.000000,-1,11,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(627,1719.328369,710.992431,11.718718,0.000000,0.000000,0.000000,-1,11,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1533,1719.809570,722.275390,9.874629,0.000000,0.000000,270.000000,-1,11,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1537,1719.809570,719.282226,9.874629,0.000000,0.000000,270.000000,-1,11,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1537,1677.605468,714.949218,9.873929,0.000000,0.000000,270.000000,-1,11,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1536,1677.631835,716.136535,14.528000,0.000000,0.000000,270.000000,-1,11,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2904,1596.167968,726.638671,12.222217,0.000000,0.000000,0.000000,-1,11,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2904,1594.071289,726.643554,12.222217,0.000000,0.000000,0.000000,-1,11,-1,MAX_RADIO_STREAM);

	CreateDynamicObjectExULP(1536,2118.980224,2418.159912,9.844410,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1536,2119.020019,2415.139892,9.844410,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,2116.887695,2406.279052,9.805687,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(10184,2101.856933,2374.796875,16.177516,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(10184,2061.540283,2437.726318,12.300000,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);

// Bomberos San Fierro (Exterior)
	CreateDynamicObjectExULP(3475,-2017.00585900,45.98314300,32.68542500,0,0,-1.71887339,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(3475,-2016.82690400,51.83968400,31.70388000,0,0,-1.71887339,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(3475,-2016.65795900,57.61295700,30.69928200,0,0,-1.71887339,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1223,-2026.71606400,79.75558500,26.78587000,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1223,-2026.60803200,88.33547200,26.77170900,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-2026.09484900,68.30658700,27.98382900,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-2026.06774900,65.89586600,27.98344800,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(8613,-2035.46655300,58.16423000,28.86209100,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(994,-2026.32971200,79.70472000,26.97091500,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(994,-2026.33056600,88.38043200,26.99032200,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1237,-2018.61560100,79.73376500,26.75315100,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1237,-2018.60302700,88.41165900,26.77097900,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(3877,-2026.80261200,96.58279400,38.92760100,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(3877,-2026.77844200,71.49100500,38.91559600,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(3877,-2047.84802200,71.47727200,38.93180800,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(3877,-2047.79724100,96.60649900,38.90771500,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateObjectEx(7981,-2037.43713400,83.56778000,36.40792100,0,0,89.99998128, MAX_RADIO_STREAM); // Helipuerto Bomberos
	CreateDynamicObjectExULP(8615,-2031.42065400,69.65745500,37.71067000,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(705,-2074.50732400,44.11934700,32.89469900,0,0,270.00000112,-1, -1, -1, MAX_RADIO_STREAM_MIN);

// Almacén YKZ (Exterior)
	CreateDynamicObjectExULP(10150,-2172.045898,693.159179,54.900001,0.000000,179.994506,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(9093,-2177.844970,711.708618,54.661598,0.000000,0.000000,270.000000,-1,-1,-1,MAX_RADIO_STREAM);
// Almacén YKZ (Interior)
	CreateDynamicObjectExULP(8947,962.862609,1730.338745,4.619999,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8947,949.426757,1730.438476,10.701217,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8947,966.944030,1726.864379,10.701217,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8947,967.603759,1749.809448,10.701217,0.000000,0.000000,90.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8947,973.266235,1734.975341,10.701217,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8947,956.752441,1712.272827,10.701217,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8947,961.081359,1730.567382,16.591447,180.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1498,957.400024,1724.502685,7.653543,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1498,959.635742,1733.833007,7.653543,0.000000,0.000000,90.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1498,963.052246,1742.435058,7.653543,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8947,933.635742,1891.528564,6.900000,0.000000,0.000000,90.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8947,933.635742,1906.270019,6.900000,0.000000,0.000000,90.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8947,918.876403,1904.905029,12.618903,0.000000,0.000000,270.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8947,909.440979,1896.746582,12.618903,0.000000,0.000000,270.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8947,909.440979,1881.996826,12.618903,0.000000,0.000000,270.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8947,932.380249,1876.859619,12.618903,0.000000,0.000000,270.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8947,956.860351,1889.472900,12.618903,0.000000,0.000000,90.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8947,956.860351,1904.197143,12.618903,0.000000,0.000000,90.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8947,935.124816,1918.603393,12.618903,0.000000,0.000000,270.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8947,933.635742,1891.528320,18.399999,180.000000,0.000000,90.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8947,933.635742,1906.269531,18.399999,180.000000,0.000000,90.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(10150,926.118041,1884.193969,11.899999,0.000000,180.000000,90.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(10150,938.276855,1911.275634,11.899999,0.000000,179.994506,90.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2971,932.542480,1910.313598,9.953544,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2971,943.534423,1887.909912,9.953544,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(12954,944.007934,1894.750732,10.539107,0.000000,0.000000,180.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(939,926.556396,1896.369995,12.396770,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(942,939.127746,1885.460327,12.396770,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1345,932.157287,1885.060302,10.723680,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2971,943.473632,1885.782226,9.953544,0.000000,0.000000,0.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1345,931.855468,1898.715820,10.723680,0.000000,0.000000,90.000000,-1,6,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1498,921.690551,1892.725830,9.953544,0.000000,0.000000,90.000000,-1,6,-1,MAX_RADIO_STREAM);

// Almacén SICARIOS
	CreateDynamicObjectExULP(11504,1036.881591,1263.824829,19.379102,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11504,1048.918701,1273.289062,19.379102,0.000000,0.000000,90.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11504,1035.734985,1285.223022,19.379102,0.000000,0.000000,180.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11504,1026.031127,1280.116333,19.379102,0.000000,0.000000,179.994506,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11504,1025.919433,1274.175170,19.379102,0.000000,0.000000,270.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3764,1036.520263,1284.792358,27.764667,0.000000,180.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3764,1036.279296,1263.861816,27.764667,0.000000,179.994506,180.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3764,1036.519531,1284.791992,15.100000,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3764,1036.919189,1263.858276,15.100000,0.000000,0.000000,179.994506,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4084,1029.983398,1272.064331,21.288080,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(942,1039.458862,1269.349487,21.908020,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(922,1033.226806,1268.673950,20.350334,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(942,1038.171142,1278.303833,21.908020,0.000000,0.000000,90.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3035,1044.003051,1269.710693,20.234930,0.000000,0.000000,270.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(960,1044.077026,1280.320556,19.846584,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1654,1044.567260,1280.636474,19.781902,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1654,1044.410278,1280.697021,19.781902,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1654,1044.202758,1280.730468,19.781902,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1654,1043.985351,1280.607788,19.781902,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1654,1043.737304,1280.635253,19.781902,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1654,1043.777587,1280.186523,19.781902,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1654,1044.001464,1280.206665,19.781902,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1654,1044.299804,1280.232910,19.781902,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1654,1044.523925,1280.252563,19.781902,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1654,1044.319458,1280.007690,19.781902,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1654,1044.020507,1279.979980,19.781902,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1654,1043.721679,1279.952636,19.781902,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1654,1044.226684,1280.400634,19.781902,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1654,1043.918090,1280.421997,19.781902,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1654,1044.447998,1280.439453,19.781902,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1654,1044.464843,1279.909423,19.781902,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2061,1038.237426,1278.595214,21.701333,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2061,1038.134765,1278.003906,21.701333,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2061,1038.198852,1278.373168,21.701333,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(643,1042.279052,1276.172851,19.935264,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1670,1042.215698,1276.049072,20.350000,0.000000,0.000000,0.000000,-1,7,-1,MAX_RADIO_STREAM);

// Cocina Trenes
	CreateDynamicObjectExULP(3961,2363.959716,1101.102294,36.500000,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3961,2358.571044,1106.179443,36.469123,0.000000,0.000000,90.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3961,2376.322265,1097.151123,36.469123,0.000000,0.000000,270.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3961,2358.565185,1109.548828,36.469123,0.000000,0.000000,90.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1537,2368.876220,1107.191528,34.530769,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3961,2368.4602050781,1109.6042480469,36.469123840332,0,0,180, -1, 3, -1, MAX_RADIO_STREAM);

// Vagones del tren
	CreateDynamicObjectExULP(18009,2404.059570,1164.997070,36.450000,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2639,2399.676513,1156.641967,34.233909,0.000000,0.000000,90.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2639,2397.553466,1156.641967,34.233909,0.000000,0.000000,270.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2639,2397.812255,1160.777343,34.233909,0.000000,0.000000,270.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2639,2400.094726,1160.777343,34.233909,0.000000,0.000000,90.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2639,2401.007568,1160.777343,34.233909,0.000000,0.000000,270.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2639,2400.649169,1156.641967,34.233909,0.000000,0.000000,270.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2639,2403.572021,1156.641967,34.233909,0.000000,0.000000,90.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2639,2407.410400,1156.641967,34.233909,0.000000,0.000000,90.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2639,2405.075927,1156.641967,34.233909,0.000000,0.000000,270.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2639,2403.043701,1160.777343,34.233909,0.000000,0.000000,90.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3851,2398.421142,1155.276733,36.450000,0.000000,0.000000,270.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3851,2409.918945,1155.276733,36.450000,0.000000,0.000000,270.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3851,2408.157958,1156.038452,36.450000,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3851,2402.561523,1162.135742,36.250000,0.000000,0.000000,270.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(18009,2403.952880,1157.974365,36.750000,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1533,2407.984375,1160.396118,33.606250,0.000000,0.000000,270.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(18009,2405.208984,1134.805664,36.509998,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3851,2403.502197,1131.615966,35.850002,0.000000,0.000000,270.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1533,2393.100097,1155.817260,33.606250,0.000000,0.000000,90.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3851,2400.177734,1137.485717,37.549999,90.000000,0.000000,270.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2639,2405.681884,1136.738159,33.850002,0.000000,0.000000,180.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2639,2403.500976,1136.738159,33.850002,0.000000,0.000000,180.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2639,2401.327148,1136.738159,33.850002,0.000000,0.000000,180.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2639,2399.153320,1136.738159,33.850002,0.000000,0.000000,180.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2639,2396.982421,1136.738159,33.850002,0.000000,0.000000,180.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2639,2405.703613,1132.725708,33.850002,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2639,2403.522949,1132.725708,33.850002,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2639,2401.348632,1132.725708,33.850002,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2639,2399.174804,1132.725708,33.850002,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2639,2397.000976,1132.725708,33.850002,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(18009,2404.900390,1137.656250,35.850002,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(18009,2397.874023,1134.847656,35.860000,0.000000,0.000000,179.994506,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1533,2393.792968,1135.487426,33.207813,0.000000,0.000000,90.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1533,2409.304687,1133.974975,33.207813,0.000000,0.000000,270.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3851,2402.913330,1137.495605,37.549999,90.000000,0.000000,270.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3851,2403.501708,1131.616577,31.950000,0.000000,0.000000,270.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2747,2406.207519,1156.623168,33.950000,0.000000,0.000000,270.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2747,2402.118408,1156.623168,33.950000,0.000000,0.000000,270.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2747,2398.569335,1156.623168,33.950000,0.000000,0.000000,270.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2747,2398.895996,1160.763671,33.950000,0.000000,0.000000,270.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2747,2402.007812,1160.763671,33.950000,0.000000,0.000000,270.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(18009,2402.546630,1111.317138,36.450000,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(18009,2398.521484,1112.735351,36.569999,0.000000,0.000000,270.506103,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3851,2401.610595,1114.651000,35.207813,0.000000,0.000000,90.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3851,2389.551757,1108.289794,35.207813,0.000000,0.000000,270.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3851,2405.182861,1116.845825,35.207813,0.000000,0.000000,138.269409,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1533,2391.084716,1109.560424,33.726249,0.000000,0.000000,90.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14565,2396.941406,1106.327880,35.450000,0.000000,0.000000,90.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14565,2405.157958,1107.660156,32.250000,0.000000,180.000000,90.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1664,2400.457031,1108.445068,34.429203,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1664,2396.536865,1108.510620,34.429203,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1512,2398.343505,1108.561279,34.462017,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1670,2399.375976,1108.499023,34.262500,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1670,2397.418701,1108.540527,34.262500,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1805,2397.322509,1109.221923,33.576892,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1805,2398.458496,1109.308715,33.576892,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1805,2399.347900,1109.303222,33.576892,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1805,2400.535644,1109.327270,33.576892,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2639,2398.941894,1113.941772,33.835472,0.000000,0.000000,179.994506,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2639,2400.484619,1111.795898,33.835472,0.000000,0.000000,90.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2639,2391.426513,1112.537841,34.133911,0.000000,0.000000,270.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2747,2398.112304,1111.844726,33.620365,0.000000,0.000000,270.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2747,2399.038330,1111.844726,33.620365,0.000000,0.000000,270.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1670,2398.209716,1111.929687,34.049999,0.000000,0.000000,272.461242,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1670,2399.166015,1111.870849,34.049999,0.000000,0.000000,263.916290,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2639,2396.666748,1112.712280,33.835472,0.000000,0.000000,270.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2639,2393.737304,1108.999511,34.133911,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2885,2398.090820,1155.057617,40.617107,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2885,2409.037597,1155.003295,40.617107,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2885,2408.523437,1160.862060,40.617107,0.000000,0.000000,90.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2885,2400.103271,1162.436645,40.617107,0.000000,0.000000,180.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2885,2391.396728,1160.660278,39.450000,0.000000,0.000000,180.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2885,2403.631591,1131.314819,40.617107,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2885,2403.677734,1137.789428,37.044361,0.000000,0.000000,180.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1533,2393.921630,1160.434082,33.606250,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1533,2406.592773,1137.555175,33.207813,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2885,2401.218994,1114.942016,39.450000,0.000000,0.000000,179.994506,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2885,2405.430664,1116.842773,39.450000,0.000000,0.000000,48.551574,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2885,2403.631591,1131.314819,40.617107,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2885,2386.544921,1108.489379,39.450000,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2885,2390.193359,1107.924316,39.450000,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2885,2389.881347,1114.598876,39.450000,0.000000,0.000000,180.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1533,2392.400390,1114.36,33.726249,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);

// Centro de recreación
	CreateDynamicObjectExULP(8494,-961.024414,2229.137695,37.000000,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8494,-961.024414,2209.040039,31.200000,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8494,-963.549804,2176.166015,37.000000,0.000000,0.000000,179.994506,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8494,-1005.090820,2176.166015,37.000000,0.000000,0.000000,179.994506,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8494,-1002.565429,2229.137695,37.000000,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8494,-992.090820,2196.264648,37.000000,0.000000,0.000000,180.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8494,-922.012695,2176.166015,37.000000,0.000000,0.000000,179.994506,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8494,-919.483398,2229.137695,37.000000,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8494,-919.361450,2209.031982,33.000000,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8494,-919.483398,2209.035156,37.000000,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8494,-880.474609,2176.166015,37.000000,0.000000,0.000000,179.994506,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8494,-877.945312,2229.137695,37.000000,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8494,-880.539062,2196.264648,35.000000,0.000000,0.000000,179.994506,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8494,-865.877929,2196.264648,37.000000,0.000000,0.000000,179.994506,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4718,-1020.628906,2220.279296,58.632427,90.000000,180.000000,180.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(12958,-941.175048,2205.343505,43.000000,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-943.376342,2205.220947,45.990001,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-943.376342,2203.861816,45.990001,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-943.376342,2202.500000,45.990001,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-940.067016,2205.220703,45.990001,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-940.067016,2203.861328,45.990001,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-940.067016,2202.500000,45.990001,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(12958,-942.277099,2203.968994,48.970001,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-944.285278,2203.874023,51.900001,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-944.285278,2202.514404,51.900001,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-944.285278,2201.151611,51.900001,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-940.977050,2203.874023,51.900001,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-940.977050,2202.513671,51.900001,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-940.977050,2201.151367,51.900001,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(12958,-943.303955,2203.142089,54.899002,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-945.422119,2203.093750,58.000000,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-945.422119,2201.731445,58.000000,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-945.422119,2200.372314,58.000000,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-942.109985,2203.093261,58.000000,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-942.109985,2201.730957,58.000000,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-942.109985,2200.371582,58.000000,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-940.067016,2202.500000,45.990001,0.000000,180.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-940.067016,2203.861328,45.990001,0.000000,180.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-940.066406,2205.220703,45.990001,0.000000,179.994506,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-943.375610,2205.220703,45.990001,0.000000,180.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-943.375610,2203.861328,45.990001,0.000000,180.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-943.375610,2202.500000,45.990001,0.000000,180.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-940.976196,2201.151367,51.900001,0.000000,180.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-940.976196,2202.513671,51.900001,0.000000,180.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-940.976196,2203.874023,51.900001,0.000000,180.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-944.284790,2201.151367,51.900001,0.000000,180.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-944.284790,2202.513671,51.900001,0.000000,180.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-944.284790,2203.874023,51.900001,0.000000,180.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-942.109375,2200.371582,58.000000,0.000000,180.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-942.109375,2201.730957,58.000000,0.000000,180.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-942.109375,2203.093261,58.000000,0.000000,180.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-945.421875,2200.371582,58.000000,0.000000,180.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-945.421875,2201.730957,58.000000,0.000000,180.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-945.421875,2203.093261,58.000000,0.000000,180.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4718,-960.570312,2136.518554,58.632427,90.000000,179.994506,270.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4718,-901.405273,2136.518554,58.632427,90.000000,179.994506,270.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4718,-933.774414,2274.791015,58.632427,90.000000,180.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4718,-881.592773,2274.791015,58.632427,90.000000,180.005493,89.989044,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4718,-834.168945,2183.610351,58.632427,90.000000,179.994506,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4718,-836.577148,2239.346679,58.632427,90.000000,180.005493,32.958984,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-946.680053,2203.861328,45.990001,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-946.679321,2203.861328,45.990001,0.000000,180.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-947.589965,2202.513671,51.900001,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-947.589477,2202.513671,51.900001,0.000000,180.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-948.729980,2201.731445,58.000000,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-948.729492,2201.731445,58.000000,0.000000,180.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(12958,-944.414428,2202.333496,61.000000,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-943.721069,2199.770019,64.000000,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-943.721069,2201.133300,64.000000,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-943.721069,2202.492187,64.000000,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-947.019531,2199.769531,64.000000,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-947.020019,2201.132812,64.000000,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-947.020019,2202.492187,64.000000,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-943.720703,2199.769531,64.000000,0.000000,180.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-943.720703,2201.132812,64.000000,0.000000,180.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-943.720703,2202.492187,64.000000,0.000000,180.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-947.019531,2199.769531,64.000000,0.000000,180.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-947.019531,2201.132812,64.000000,0.000000,180.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-947.019531,2202.492187,64.000000,0.000000,180.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-950.319946,2201.132812,64.000000,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1698,-950.319335,2201.132812,64.000000,0.000000,180.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,-941.851440,2205.801757,46.115631,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,-945.098022,2205.801757,46.115631,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,-938.512573,2202.323242,46.115631,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,-942.619995,2204.479736,52.025630,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,-945.870361,2204.479736,52.025630,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,-939.480712,2204.092773,52.025630,0.000000,0.000000,269.301025,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,-943.764526,2203.633544,58.125633,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,-947.011718,2203.633544,58.125633,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,-940.623046,2203.355468,58.125633,0.000000,0.000000,270.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,-945.375854,2203.008789,64.125633,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,-948.651855,2203.008789,64.125633,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,-942.242797,2202.708007,64.125633,0.000000,0.000000,270.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,-948.651367,2199.197265,64.125633,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14582,-917.564575,2206.303466,53.829444,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateObjectEx(16010,-918.669921,2209.914062,33.799999,0.000000,0.000000,90.000000,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(16010,-918.317382,2250.656005,33.799999,0.000000,90.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(16010,-918.677734,2183.572265,60.000000,0.000000,90.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(16010,-918.772460,2234.035156,60.000000,0.000000,90.000000,270.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14394,-937.942382,2225.600097,42.400001,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14394,-934.979492,2225.600097,42.400001,0.000000,0.000000,180.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14394,-902.539062,2225.600097,42.400001,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14394,-899.429687,2225.599609,42.400001,0.000000,0.000000,179.994506,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1645,-945.660888,2190.356445,42.543087,0.000000,0.000000,270.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1645,-945.339477,2188.687500,42.543087,0.000000,0.000000,270.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1646,-952.169311,2189.551025,42.548366,0.000000,0.000000,180.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1646,-955.916503,2189.532714,42.548366,0.000000,0.000000,179.994506,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1646,-955.325439,2215.766601,42.548366,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1646,-951.756347,2215.897460,42.548366,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1647,-964.640136,2188.389648,42.452594,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1647,-964.707275,2190.638427,42.452594,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1647,-964.953002,2215.009521,42.452594,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1647,-964.971801,2216.732666,42.452594,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1255,-946.629272,2221.835205,42.784835,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1646,-888.255493,2218.184814,42.548366,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1645,-887.161254,2188.395263,42.543087,0.000000,0.000000,270.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1647,-892.321289,2190.247802,42.452594,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1646,-896.116943,2216.600585,42.548366,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1647,-892.524047,2213.781982,42.452594,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1645,-895.727539,2185.896484,42.543087,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(16010,-918.771484,2213.000000,79.229995,0.000000,179.994506,270.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8661,-926.124023,2165.898437,50.299999,0.000000,179.994506,270.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(10865,-919.005859,2181.520507,51.400001,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8661,-911.208984,2165.898437,50.298999,0.000000,179.994506,270.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(10865,-919.005859,2181.520507,60.000000,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8661,-926.124023,2165.898925,58.900001,0.000000,180.000000,270.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8661,-911.208984,2165.898925,58.889999,0.000000,180.000000,270.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8661,-911.208984,2205.892578,50.298999,0.000000,179.994506,270.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8661,-926.124023,2205.731445,50.299999,0.000000,179.994506,270.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8661,-911.208984,2205.892578,58.889999,0.000000,179.994506,270.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8661,-926.124023,2205.731445,58.900001,0.000000,179.994506,270.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8494,-963.549804,2176.166015,77.000000,0.000000,180.000000,180.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8494,-922.012695,2176.166015,77.000000,0.000000,180.000000,180.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8494,-1005.090820,2196.264648,77.000000,0.000000,180.000000,180.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8494,-1002.565429,2229.137695,77.000000,0.000000,180.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8494,-961.024414,2209.040039,77.000000,0.000000,180.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8494,-961.024414,2229.137695,77.000000,0.000000,180.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8494,-919.483398,2229.137695,77.000000,0.000000,180.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8494,-880.474609,2176.166015,77.000000,0.000000,180.000000,180.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8494,-865.877929,2196.264648,81.000000,0.000000,179.994506,179.994506,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8494,-877.945312,2229.137695,77.000000,0.000000,180.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8494,-880.539062,2196.264648,77.000000,0.000000,180.000000,180.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(16684,-936.939941,2196.989990,77.000000,0.000000,90.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(16684,-936.909179,2192.779296,-3.000000,0.000000,90.000000,179.994506,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(16684,-900.929687,2196.989257,77.000000,0.000000,90.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(16684,-900.899414,2192.699218,22.000000,0.000000,90.000000,179.994506,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1491,-900.800048,2224.609375,43.229686,0.000000,0.000000,270.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1491,-900.800048,2221.580078,43.231388,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1491,-936.799804,2221.580078,43.231388,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1491,-936.800048,2224.609375,43.229686,0.000000,0.000000,270.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(9345,-917.647949,2193.402099,50.595157,0.000000,0.000000,180.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(16151,-927.306640,2224.574218,50.659999,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(16151,-908.508911,2224.574951,50.659999,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(642,-907.753906,2219.418945,51.768539,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(642,-928.033935,2218.015136,51.768539,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(642,-930.580566,2203.539550,51.768539,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(642,-906.110595,2204.909423,51.768539,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(642,-903.890991,2198.411621,51.768539,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(642,-905.449584,2212.643066,51.768539,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1594,-904.477416,2199.466796,50.822303,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1594,-904.595581,2213.673583,50.822303,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1594,-929.835571,2204.561767,50.822303,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1594,-906.994506,2205.648681,50.822303,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1594,-909.036132,2220.312500,50.822303,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1594,-928.842773,2216.961669,50.822303,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(6066,-919.157226,2196.825927,61.445762,0.000000,0.000000,270.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14627,-858.442993,2236.670898,92.898139,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(7191,-921.036010,2184.898925,43.309989,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(18051,-924.464843,2198.994140,43.728462,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(18051,-897.760375,2197.809570,43.728462,0.000000,0.000000,180.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2007,-920.084472,2202.885009,42.230529,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2007,-920.084472,2201.385742,42.230529,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2007,-920.084472,2199.887451,42.230529,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2007,-920.159179,2198.387695,42.230529,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2007,-920.084472,2196.888671,42.230529,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2007,-920.084472,2195.389648,42.230529,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2007,-920.084472,2193.815673,42.230529,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1810,-919.449707,2202.650390,42.230529,0.000000,0.000000,270.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1810,-919.449707,2201.151367,42.230529,0.000000,0.000000,270.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1810,-919.449707,2199.727294,42.230529,0.000000,0.000000,270.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1810,-919.449707,2198.152587,42.230529,0.000000,0.000000,270.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1810,-919.449707,2196.653320,42.230529,0.000000,0.000000,270.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1810,-919.449707,2195.154296,42.230529,0.000000,0.000000,270.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1810,-919.449707,2193.580322,42.230529,0.000000,0.000000,270.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(7191,-909.738891,2184.898925,43.309989,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(7191,-912.923950,2184.898925,43.309989,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14481,-915.847900,2195.348388,43.659496,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14481,-915.847900,2197.297851,43.659496,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14481,-915.847900,2199.471191,43.659496,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14481,-915.847900,2201.644042,43.659496,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(7191,-918.949951,2184.901123,45.200000,0.000000,270.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(7191,-914.989257,2184.900390,45.200000,0.000000,270.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(7191,-907.650024,2184.900390,45.200000,0.000000,270.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(7191,-903.687011,2184.900390,45.200000,0.000000,270.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(7191,-901.621948,2184.898437,43.309989,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14481,-905.729858,2195.380615,43.659496,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14481,-905.729858,2197.556884,43.659496,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14481,-905.729858,2199.505371,43.659496,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14481,-905.729858,2201.678466,43.659496,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2007,-902.238281,2202.917724,42.230529,0.000000,0.000000,270.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2007,-902.238281,2201.268066,42.230529,0.000000,0.000000,270.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2007,-902.238281,2199.843505,42.230529,0.000000,0.000000,270.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2007,-902.238281,2198.348632,42.230529,0.000000,0.000000,270.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2007,-902.238281,2196.849609,42.230529,0.000000,0.000000,270.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2007,-902.238281,2195.350585,42.230529,0.000000,0.000000,270.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2007,-902.238281,2193.851562,42.230529,0.000000,0.000000,270.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1810,-903.103515,2203.042968,42.230529,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1810,-903.103515,2201.468994,42.230529,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1810,-903.103515,2200.044677,42.230529,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1810,-903.103515,2198.549804,42.230529,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1810,-903.103515,2197.055664,42.230529,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1810,-903.103515,2195.556640,42.230529,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1810,-903.103515,2193.982666,42.230529,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3851,-907.717773,2207.016601,39.419998,90.000000,0.000000,270.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3851,-914.905883,2207.016601,39.419998,90.000000,0.000000,270.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3851,-918.906982,2206.000000,39.419998,90.000000,180.000000,270.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3851,-903.702758,2206.000000,39.419998,90.000000,180.000000,270.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3851,-914.905273,2204.989990,39.419998,90.000000,0.000000,270.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3851,-907.717773,2204.989990,39.419998,90.000000,0.000000,270.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(7191,-936.729980,2223.395507,68.599998,90.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(7191,-900.913940,2223.395507,68.599998,90.000000,0.000000,180.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1594,-918.304321,2216.134521,50.822303,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1594,-920.054809,2220.759277,50.822303,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1594,-934.401977,2210.365722,50.822303,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(642,-917.567260,2214.984619,51.768539,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(642,-920.919921,2220.067382,51.768539,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(642,-933.304931,2210.968994,51.768539,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,-916.977783,2225.656494,50.345314,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,-917.051269,2225.636718,42.398437,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,-921.344360,2225.659667,50.345314,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,-921.529541,2225.647949,58.945312,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,-929.692382,2191.989257,42.398437,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,-926.702392,2191.989990,42.398437,0.000000,0.000000,180.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14497,-928.125976,2200.109375,42.743175,0.000000,0.000000,90.082397,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(16010,-918.677734,2175.000000,-101.000000,0.000000,90.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1827,-925.441162,2200.423339,42.230529,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1643,-968.846923,2214.369873,42.210937,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1642,-968.347412,2190.182373,42.210937,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1641,-958.182128,2214.649902,42.210937,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1640,-958.783569,2190.960937,42.210937,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14780,-907.949829,2198.677734,59.812110,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2630,-920.996826,2217.114257,58.945312,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2629,-926.237915,2213.496337,58.945312,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2628,-929.382080,2217.357421,58.945312,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2627,-924.721313,2209.098144,58.945312,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14486,-911.950683,2214.626464,60.500000,0.000000,0.000000,180.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(946,-911.387939,2207.000000,61.148235,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(946,-911.387695,2220.122070,61.148235,0.000000,0.000000,179.994506,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14787,-918.894287,2214.752685,59.041404,0.000000,0.000000,270.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14780,-931.076538,2199.025390,59.812110,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2630,-928.951660,2210.091064,58.945312,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2629,-923.770751,2213.590576,58.945312,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2627,-921.020263,2211.600097,58.945312,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2628,-925.153320,2216.081298,58.945312,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(16151,-927.209960,2224.380859,42.560001,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(16151,-908.098144,2224.759765,42.560001,0.000000,0.000000,90.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(642,-931.998535,2216.290039,43.653759,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(642,-922.724609,2218.150390,43.653759,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(642,-912.581298,2218.654541,43.653759,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(642,-910.564819,2213.560058,43.653759,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(642,-918.139648,2212.348388,43.653759,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(642,-925.535644,2210.864501,43.653759,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1432,-931.217651,2215.644287,42.230529,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1432,-924.018676,2217.305175,42.230529,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1432,-913.752319,2217.653320,42.230529,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1432,-911.796020,2212.927001,42.230529,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1432,-919.550903,2211.804687,42.230529,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1432,-926.009155,2212.237060,42.230529,0.000000,0.000000,0.000000,4,-1,-1,MAX_RADIO_STREAM);

// PELETEROS PROTECCIóN CERCA
	CreateDynamicObjectExULP(4100,754.475708,-1536.224609,14.311264,-0.000000,0.000000,42.300071,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4100,752.919128,-1549.948120,14.273910,0.000000,0.000000,-315.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4100,772.574096,-1483.551391,14.229714,0.000000,0.000000,25.099998,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4100,777.584716,-1441.360839,14.105716,0.000000,0.000000,42.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4100,704.995910,-1569.456787,15.494467,0.000000,0.000000,49.629894,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4100,661.531188,-1547.648803,15.471553,0.009999,0.000000,49.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4100,661.285095,-1562.048095,15.516578,0.500000,-0.100000,-130.700042,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4100,712.132019,-1576.577148,15.483736,0.000000,0.000000,-39.309993,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4100,725.950134,-1576.528808,15.513988,0.000000,0.000000,-40.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4100,739.787658,-1576.549438,15.550058,0.000000,0.000000,-40.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4100,739.211242,-1576.579345,12.193216,-0.399996,180.569320,40.009983,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4100,751.950683,-1571.954833,15.599822,-0.002000,0.000000,0.009999,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4100,751.974975,-1571.984252,12.241392,-180.324020,-360.000000,79.789955,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4100,661.707885,-1526.647338,15.511983,0.000000,0.000000,50.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4100,661.655151,-1499.229736,15.531578,0.000000,0.000000,49.960010,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4100,661.583557,-1479.824829,15.531578,0.000000,0.000000,49.989997,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4100,673.899047,-1427.787353,15.507034,1.800000,1.529999,-38.010002,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4100,660.323486,-1433.204833,15.508953,0.000000,0.000000,50.000000,-1,-1,-1,MAX_RADIO_STREAM);
//	CreateDynamicObjectExULP(4100,661.687988,-1449.930541,15.511579,0.000000,0.000000,50.000000,-1,-1,-1,MAX_RADIO_STREAM);  /// Willy parking
	CreateDynamicObjectExULP(1622,714.259338,-1582.932250,5.385865,7.300001,-15.000000,-150.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1608,726.411682,-1578.566528,-8.545311,0.000000,0.000000,240.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1278,707.395324,-1586.024047,5.298754,73.800201,13.000000,78.000045,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1278,743.155883,-1585.095825,4.631947,71.600280,6.000000,-95.099998,-1,-1,-1,MAX_RADIO_STREAM);

// CASAS PUERTAS
	CreateDynamicObjectExULP(1498,242.298965,1120.017578,1079.969482,0.000000,0.000000,0.000000,112,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1507,231.509994,1083.624755,1086.800659,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1498,238.095245,1108.621337,1079.992431,0.300000,0.000000,0.099999,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1506,231.616699,1115.027465,1083.900390,-0.029999,0.000000,-91.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1507,238.518341,1084.731689,1083.077758,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1535,218.219543,1250.511474,1081.140869,0.000000,0.000000,88.900093,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1506,219.156158,1294.077636,1081.130859,-0.100000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1507,223.250259,1081.670410,1086.810546,0.099999,0.000000,-90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1498,-72.669486,1366.971801,1079.181152,0.099999,0.000000,-90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1498,291.700866,1479.210571,1079.255371,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1498,235.635009,1201.867065,1079.258178,0.099999,0.000000,-90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1498,459.497100,1408.689453,1083.308227,0.099999,0.000000,-90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1498,88.958068,1341.978759,1082.829345,-180.000122,179.699996,-1.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1507,237.746002,1190.675292,1083.417358,0.210000,-0.110000,-91.100028,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1498,81.355285,1342.052124,1082.857421,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);

// Puerta de casas garages
	CreateDynamicObjectExULP(1569,-275.503173,1458.740356,1087.900878,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1536,33.768882,1411.548950,1083.429809,0.000000,0.000000,-90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,28.839227,1339.820556,1087.875244,0.000000,0.000000,-0.100000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1506,459.601379,1413.746459,1083.308227,0.599999,0.099999,269.200012,-1,-1,-1,MAX_RADIO_STREAM);

///////////////////// GARAGES
	//1
	CreateDynamicObjectExULP(15053,2908.2275390625,2441.8583984375,11.10000038147,0,0,0, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,2906.0268554688,2429.5463867188,9.8575191497803,0,0,90, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,2906.1018066406,2433.5463867188,9.8592386245728,0,0,90, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3055,2903.529296875,2437.9296875,12.018432617188,0,0,0, -1, 1, 1, MAX_RADIO_STREAM);

	//2
	CreateDynamicObjectExULP(15046,2779.6005859375,2608.3896484375,11.070201873779,0,0,0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13028,2785.55859375,2629.8271484375,11.699999809265,0,0,0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,2780.3583984375,2623.990234375,9.8222284317017,0,0,181.54907226563, -1, 2, -1, MAX_RADIO_STREAM);

	//3
	CreateDynamicObjectExULP(15041,2793.162109375,2592.4755859375,11.819764137268,0,0,0, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,2788.5693359375,2594.0537109375,9.8203125,0,0,270, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,2785.2297363281,2597.3547363281,9.8203125,0,0,180, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13188,2783.66796875,2587.375,11.11812877655,0,0,270, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13188,2778.9643554688,2587.2021484375,11.11812877655,0,0,270, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13188,2778.7404785156,2587.3542480469,11.11812877655,0,0,270, -1, 3, -1, MAX_RADIO_STREAM);

	//4
	CreateDynamicObjectExULP(14759,2747.5678710938,2636.2397460938,16.942255020142,0,0,0, -1, 4, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13028,2748.8095703125,2636.7856445313,11.699999809265,0,0,180, -1, 4, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,2743.6225585938,2630.8967285156,10.445754051208,0,0,180, -1, 4, -1, MAX_RADIO_STREAM);

	//5
	CreateDynamicObjectExULP(14756,2746.63671875,2620.0517578125,12.311784744263,0,0,0, -1, 5, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13028,2749.3896484375,2612.3896484375,12.228978157043,0,0,180, -1, 5, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,2742.5437011719,2617.8481445313,10.363903999329,0,0,0, -1, 5, -1, MAX_RADIO_STREAM);

	//6
	CreateDynamicObjectExULP(14750,2749.556640625,2604.0202636719,16.942255020142,0,0,0, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13188,2748.349609375,2604.150390625,11.740071296692,0,0,0, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,2753.501953125,2598.68359375,10.451289176941,0,0,0, -1, 6, -1, MAX_RADIO_STREAM);

	//7
	CreateDynamicObjectExULP(14748,2798.216796875,2631.2868652344,11.820586204529,0,0,0, -1, 7, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,2795.5,2633.7001953125,9.8346529006958,0,0,181.54357910156, -1, 7, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3055,2796.8071289063,2635.0708007813,12.018705368042,0,0,270, -1, 7, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,2789.6872558594,2640.6953125,9.8346529006958,0,0,180, -1, 7, -1, MAX_RADIO_STREAM);

	//8
	CreateDynamicObjectExULP(14717,2766.7023925781,2636.6708984375,11.718388557434,0,0,0, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13028,2767.1398925781,2638.69140625,11.901206970215,0,0,270, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14819,2769.5109863281,2631.5732421875,11.133925437927,0,0,90, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,2762.8291015625,2636.0305175781,9.9840135574341,0,0,0, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,2762.8291015625,2636.0302734375,9.9840135574341,0,0,180, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,2769.7810058594,2633.3854980469,9.9840135574341,0,0,90, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,2769.7802734375,2633.384765625,9.9840135574341,0,0,270, -1, 8, -1, MAX_RADIO_STREAM);

	//9
	CreateDynamicObjectExULP(14714,2816.8779296875,2630.84375,11.681130409241,0,0,0, -1, 9, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13188,2822.109375,2628.3994140625,11.419415473938,0,0,270, -1, 9, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1504,2819.16015625,2630.85546875,9.8718729019165,0,0,90, -1, 9, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,2819.67578125,2638.7756347656,10.114307403564,0,0,0, -1, 9, -1, MAX_RADIO_STREAM);

	//10
	CreateDynamicObjectExULP(14711,2834.521484375,2633.7119140625,11.430619239807,0,0,0, -1, 10, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13028,2838.9272460938,2629.40234375,11.699999809265,0,0,270, -1, 10, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13028,2843.4755859375,2629.3920898438,11.699999809265,0,0,270, -1, 10, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,2838.1569824219,2639.3679199219,9.8290567398071,0,0,181.54357910156, -1, 10, -1, MAX_RADIO_STREAM);

	//11
	CreateDynamicObjectExULP(14710,2848.90234375,2624.3625488281,11.340000152588,0,0,90, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13188,2846.3715820313,2617.7399902344,11.11812877655,0,0,270, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,2842.7788085938,2624.1750488281,9.8337068557739,0,0,90, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,2850.1918945313,2623.1499023438,9.8243751525879,0,0,90, -1, 11, -1, MAX_RADIO_STREAM);

	//12
	CreateObjectEx(14708,2809.6943359375,2592.5083007813,11.701513290405,0,0,0, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,2810.5346679688,2601.4450683594,9.8000001907349,0,0,90, -1, 12, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,2806.6254882813,2606.109375,13.114036560059,0,0,90, -1, 12, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,2806.6474609375,2607.8332519531,13.114036560059,0,0,90, -1, 12, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,2806.7194824219,2607.6071777344,13.114036560059,0,0,90, -1, 12, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13028,2808.0187988281,2599.1044921875,11.699999809265,0,0,270, -1, 12, -1, MAX_RADIO_STREAM);

	//13
	CreateDynamicObjectExULP(14706,2770.8420410156,2524.361328125,13.073364257813,0,0,0, -1, 13, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13188,2771.8427734375,2522.794921875,11.11812877655,0,0,270, -1, 13, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1566,2767.5041503906,2531.9206542969,11.409088134766,0,0,90, -1, 13, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1566,2767.4848632813,2533.5546875,11.335723876953,0,0,90, -1, 13, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1566,2767.4321289063,2533.2502441406,11.335723876953,0,0,90, -1, 13, -1, MAX_RADIO_STREAM);

	//14
	CreateDynamicObjectExULP(14703,2752.787109375,2586.5874023438,14.131969451904,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13188,2762.2880859375,2583.1997070313,11.132910728455,0,0,270, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,2758.0593261719,2576.8530273438,9.8405780792236,0,0,270, -1, 14, -1, MAX_RADIO_STREAM);

	//15
	CreateDynamicObjectExULP(14702,2780.0036621094,2573.1040039063,14.134830474854,0,0,0, -1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13028,2770.2490234375,2568.3100585938,11.755148887634,0,0,90, -1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,2777.8728027344,2566.8930664063,9.8379554748535,0,0,270, -1, 15, -1, MAX_RADIO_STREAM);

	//16
	CreateDynamicObjectExULP(14701,2744.1970214844,2554.4047851563,11.89999961853,0,0,0, -1, 16, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,2749.5529785156,2557.2355957031,9.8329486846924,0,0,0, -1, 16, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,2751.0490722656,2557.1066894531,9.8329486846924,0,0,0, -1, 16, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13188,2756.4340820313,2562.525390625,11.419415473938,0,0,0, -1, 16, -1, MAX_RADIO_STREAM);

	//17
	CreateDynamicObjectExULP(15048,2736.2705078125,2502.9226074219,13.681542396545,0,0,0, -1, 17, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13188,2755.1145019531,2513.2814941406,11.132910728455,0,0,270, -1, 17, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,2752.8122558594,2503.2351074219,10.103808403015,0,0,0, -1, 17, -1, MAX_RADIO_STREAM);

	//18
	CreateDynamicObjectExULP(15058,2739.5278320313,2529.5148925781,13.800000190735,0,0,0, -1, 18, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13188,2743.845703125,2530.3859863281,11.11812877655,0,0,270, -1, 18, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,2739.8225097656,2523.7563476563,9.8625001907349,0,0,90, -1, 18, -1, MAX_RADIO_STREAM);

	//19
	CreateDynamicObjectExULP(15054,2772.556640625,2437.3061523438,11.89999961853,0,0,0, -1, 19, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13188,2767.5,2446.9455566406,11.197815895081,0,0,180, -1, 19, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13188,2767.5290527344,2451.8032226563,11.197815895081,0,0,180, -1, 19, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13188,2767.3784179688,2451.7277832031,11.197815895081,0,0,180, -1, 19, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,2777.5041503906,2445.3408203125,9.8999996185303,0,0,90, -1, 19, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,2772.6821289063,2442.01953125,9.8999996185303,0,0,0, -1, 19, -1, MAX_RADIO_STREAM);

	//20
	CreateDynamicObjectExULP(14754,2783.0737304688,2419.3488769531,9.3000001907349,0,0,0, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13188,2788.6638183594,2420.4763183594,11.197815895081,0,0,270, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,2784.4704589844,2423.9584960938,9.8625001907349,0,0,90, -1, 1, -1, MAX_RADIO_STREAM);


/// Bomberos Interior
	CreateDynamicObjectExULP(14825,1301.2734375,2656.2705078125,12.073930740356,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11313,1291.2716064453,2663.2243652344,11.818532943726,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11313,1291.2716064453,2648.6650390625,11.818532943726,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11313,1291.2716064453,2655.9543457031,11.818532943726,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14397,1290.8763427734,2651.5812988281,9.8503017425537,0,90,90, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14397,1290.8763427734,2658.8054199219,9.8503017425537,0,90,90, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14397,1290.8763427734,2666.0078125,9.8503017425537,0,90,90, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14397,1290.8763427734,2644.2822265625,9.8503017425537,0,90,90, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1291.5124511719,2652.3371582031,10.364088058472,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1291.5124511719,2659.5288085938,10.406915664673,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1291.5124511719,2645.1000976563,10.399775505066,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1291.5124511719,2666.7111816406,10.41358089447,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(996,1292.5,2659.5405273438,10.592745780945,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(996,1292.5,2652.3500976563,10.592745780945,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(996,1292.5,2645.1101074219,10.592745780945,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(996,1292.5,2666.7299804688,10.592745780945,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14825,1294.6208496094,2655.4904785156,12.072999954224,0,0,180, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1302.0816650391,2666.8972167969,9.8203125,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14825,1341.2734375,2656.2705078125,12.073930740356,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11313,1331.2716064453,2663.2243652344,11.818532943726,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11313,1331.2716064453,2648.6650390625,11.818532943726,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11313,1331.2716064453,2655.9543457031,11.818532943726,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14397,1330.8763427734,2651.5812988281,9.8503017425537,0,90,90, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14397,1330.8763427734,2658.8054199219,9.8503017425537,0,90,90, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14397,1330.8763427734,2666.0078125,9.8503017425537,0,90,90, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14397,1330.8763427734,2644.2822265625,9.8503017425537,0,90,90, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1331.5124511719,2652.3371582031,10.364088058472,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1331.5124511719,2659.5288085938,10.406915664673,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1331.5124511719,2645.1000976563,10.399775505066,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1331.5124511719,2666.7111816406,10.41358089447,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(996,1332.5,2659.5405273438,10.592745780945,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(996,1332.5,2652.3500976563,10.592745780945,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(996,1332.5,2645.1101074219,10.592745780945,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(996,1332.5,2666.7299804688,10.592745780945,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14825,1334.6201171875,2655.490234375,12.072999954224,0,0,180, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1342.1721191406,2644.8896484375,9.8203125,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14789,1482.2392578125,2846.0595703125,14.064999580383,0,0,90, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4701,1459.4462890625,2878.05078125,12.815473556519,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4701,1459.478515625,2837.8203125,12.699999809265,0,180,180, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14789,1504.123046875,2875.78515625,14.060000419617,0,0,270, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8614,1505.5517578125,2854.0283203125,11.529999732971,0,0,90, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14789,1498.9365234375,2872.4306640625,14,0,0,270, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14789,1482.0947265625,2841.5615234375,14.0640001297,0,0,90, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2165,1491.4569091797,2853.9089355469,9.8306245803833,0,0,90, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2165,1491.4569091797,2856.9680175781,9.8306245803833,0,0,90, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2165,1491.4569091797,2860.4858398438,9.8306245803833,0,0,90, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2165,1491.4569091797,2864.0739746094,9.8306245803833,0,0,90, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310,1489.9897460938,2855.080078125,10.329839706421,0,0,180, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310,1489.9897460938,2853.8723144531,10.329839706421,0,0,180, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310,1489.9897460938,2858.076171875,10.329839706421,0,0,180, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310,1489.9897460938,2856.9633789063,10.329839706421,0,0,180, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310,1489.9897460938,2861.6254882813,10.329839706421,0,0,180, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310,1489.9897460938,2860.4887695313,10.329839706421,0,0,180, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310,1489.9897460938,2865.2048339844,10.329839706421,0,0,180, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310,1489.9897460938,2864.0744628906,10.329839706421,0,0,180, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2164,1496.4398193359,2865.0114746094,9.8306245803833,0,0,270, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2164,1496.4398193359,2860.98046875,9.8306245803833,0,0,270, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2164,1496.4398193359,2856.9548339844,9.8306245803833,0,0,270, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2200,1496.4398193359,2863.2263183594,9.8306245803833,0,0,270, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2200,1496.4398193359,2859.2028808594,9.8306245803833,0,0,270, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2200,1496.4398193359,2855.18359375,9.8306245803833,0,0,270, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2164,1496.5069580078,2864.212890625,9.8306245803833,0,0,90, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2164,1496.5069580078,2860.1823730469,9.8306245803833,0,0,90, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2164,1496.5069580078,2856.1613769531,9.8306245803833,0,0,90, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2200,1496.7490234375,2861.9680175781,9.8306245803833,0,0,90, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2200,1496.7490234375,2857.9501953125,9.8306245803833,0,0,90, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2200,1496.7490234375,2853.9299316406,9.8299999237061,0,0,90, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14535,1502.2626953125,2862.8974609375,11.824999809265,0,0,90, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310,1492.5479736328,2864.6201171875,10.329839706421,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310,1492.5479736328,2861.0224609375,10.329839706421,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310,1492.5479736328,2857.5747070313,10.329839706421,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310,1492.5479736328,2854.3852539063,10.329839706421,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2571,1499.7218017578,2855.3413085938,9.8306245803833,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2290,1502.3957519531,2852.306640625,9.8306245803833,0,0,180, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1709,1481.900390625,2859.5703125,9.8306245803833,0,0,90, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1710,1485.2425537109,2864.0925292969,9.8306245803833,0,0,270, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2024,1482.6209716797,2861.6481933594,9.8364057540894,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2826,1482.5223388672,2862.3024902344,10.370389938354,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2827,1483.6224365234,2862.4650878906,10.370389938354,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2824,1483.4138183594,2861.7741699219,10.370389938354,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1479.7092285156,2855.3779296875,9.8306245803833,0,0,90, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3055,1504.6088867188,2861.6604003906,14.958906173706,0,0,90, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3055,1501.197265625,2855.7861328125,14.958906173706,0,0,30.179443359375, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3055,1493.888671875,2853.83984375,14.958906173706,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3055,1484.5517578125,2853.83984375,14.958906173706,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3055,1506.8054199219,2860.0534667969,9.9099998474121,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1491,1488.4794921875,2853.7900390625,12.760786056519,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3055,1489.1236572266,2853.8796386719,17.479999542236,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2627,1490.5213623047,2859.7038574219,12.760786056519,0,0,90, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2628,1492.2777099609,2854.6748046875,12.760786056519,0,0,180, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3055,1479.2014160156,2850.0998535156,14.958906173706,0,0,69.404083251953, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(9316,1469.4542236328,2845.5952148438,15.512178421021,0,0,90, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2948,1480.7619628906,2853.7709960938,15.035504341125,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2948,1480.8299560547,2851.8530273438,15.029999732971,0,0,180, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2948,1480.8902587891,2851.8193359375,15.029999732971,0,0,270, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3666,1484.8374023438,2858.1857910156,13.292100906372,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3666,1484.5002441406,2856.3090820313,13.292100906372,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3666,1482.8807373047,2855.28515625,13.292100906372,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3666,1479.7395019531,2857.0549316406,13.292100906372,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3666,1481.8552246094,2860.294921875,13.292100906372,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3666,1483.6892089844,2859.9360351563,13.292100906372,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3666,1480.6977539063,2855.3974609375,13.292100906372,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3666,1480.1734619141,2859.3471679688,13.292100906372,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3055,1494.2021484375,2857.7333984375,14.958906173706,0,0,270, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14782,1493.4133300781,2865.2231445313,13.776833534241,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14782,1487.1923828125,2865.2231445313,13.776833534241,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2629,1493.2517089844,2860.4838867188,12.760786056519,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2630,1490.1055908203,2856.5004882813,12.760786056519,0,0,180, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1700,1502.375,2860.544921875,12.760786056519,0,0,210.2343750, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1700,1498.7978515625,2858.4892578125,12.760786056519,0,0,210.234375, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1700,1497.7084960938,2859.8149414063,12.760786056519,0,0,90, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1700,1497.7423095703,2855.9204101563,12.760786056519,0,0,90, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1337,1479.2066650391,2875.5581054688,13.410011291504,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1251,1481.9610595703,2857.310546875,16.799999237061,90,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1251,1481.9609375,2857.310546875,9.9353094100952,90,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1839,1493.3682861328,2857.6752929688,12.760786056519,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1840,1493.6442871094,2858.70703125,12.760786056519,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1840,1493.6442871094,2856.5476074219,12.760786056519,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1789,1503.6883544922,2864.9995117188,13.316970825195,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14604,1499.6239013672,2861.6889648438,13.741431236267,0,0,131.58856201172, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14604,1500.7705078125,2861.1030273438,13.741431236267,0,0,202.89154052734, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1808,1502.0895996094,2863.0021972656,12.760786056519,0,0,180, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1808,1501.7314453125,2862.7504882813,12.760786056519,0,0,270, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1808,1502.4699707031,2862.7504882813,12.760786056519,0,0,90, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1808,1502.0895996094,2862.4772949219,12.760786056519,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11008,1483.7419433594,2727.287109375,16.711141586304,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11008,1485.0688476563,2765.46484375,16.711141586304,0,0,180, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11008,1505.0341796875,2759.1577148438,16.711141586304,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11008,1463.8907470703,2733.5441894531,16.711141586304,0,0,180, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14825,1484.8917236328,2754.251953125,12.073930740356,0,0,270, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1480.2291259766,2744.2883300781,9.8299999237061,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1488.2762451172,2744.2795410156,9.8299999237061,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1484.3148193359,2744.2885742188,9.8299999237061,0,0,0, -1, 14, -1, MAX_RADIO_STREAM);

/////////////////////////////////////
/////////////////////////////////////
/////////////////////////////////////
	// Super Mercado 1
	CreateDynamicObjectExULP(6060,1483.01953125,1442.4296875,17.711185455322,0,0,0, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(6061,1482.7880859375,1453.279296875,12.75,0,0,0, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3586,1495.140625,1453.140625,13.39999961853,0,0,90, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(6110,1483.3134765625,1442.34375,17.764408111572,0,0,0, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(792,1465.171875,1462.7841796875,16.885723114014,0,0,0, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(792,1485.3020019531,1462.7844238281,16.885723114014,0,0,0, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(792,1505.388671875,1462.7841796875,16.920000076294,0,0,0, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(792,1464.9296875,1442.783203125,16.89999961853,0,0,0, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(792,1484.943359375,1442.7836914063,16.89999961853,0,0,0, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(792,1505.1065673828,1442.7836914063,16.959999084473,0,0,0, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(6060,1481.2729492188,1502.6567382813,17.299999237061,0,0,0, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(6060,1467.7939453125,1403.9365234375,17.299999237061,0,0,180, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(6060,1430.736328125,1441.5859375,17.299999237061,0,0,90, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(6060,1540.6448974609,1440.5032958984,17.299999237061,0,0,270, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8419,1470.3226318359,1450.3735351563,37,180,0,90, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(792,1505.8388671875,1462.205078125,10.050000190735,0,0,0, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(792,1487.7980957031,1462.205078125,10.069999694824,0,0,0, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(792,1469.7261962891,1462.205078125,10.069999694824,0,0,0, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(792,1505.8395996094,1444.2614746094,10.050000190735,0,0,0, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(792,1487.8052978516,1444.2614746094,10.069999694824,0,0,0, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(792,1469.8122558594,1444.2614746094,10.069999694824,0,0,0, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1538,1462.9313964844,1470.1968994141,16.975076675415,0,0,0, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1538,1506.8953857422,1470.1584472656,17,0,0,0, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1462.9188232422,1447.3089599609,10.015318870544,0,0,90, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1462.9188232422,1455.6346435547,10.015318870544,0,0,90, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1462.9188232422,1450.2987060547,10.015318870544,0,0,270, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1462.9188232422,1458.6307373047,10.015318870544,0,0,270, -1, 1, -1, MAX_RADIO_STREAM);

	// Licorería
	CreateDynamicObjectExULP(12844,1331.646484375,1335.5380859375,11.796021461487,0,0,0, -1, 5, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(12845,1331.8087158203,1335.8332519531,11.959308624268,0,0,0, -1, 5, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(12844,1331.93359375,1335.6328125,11.789999961853,0,0,180, -1, 5, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1335.3990478516,1331.0543212891,9.8207693099976,0,0,0, -1, 5, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1338.396484375,1331.05859375,9.8207693099976,0,0,180, -1, 5, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1325.1375732422,1340.1066894531,9.8207693099976,0,0,0, -1, 5, -1, MAX_RADIO_STREAM);

	// Wong
	CreateDynamicObjectExULP(18030,1326.318359375,1354.775390625,12.192791938782,0,0,0, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1843,1305.216796875,1357.0310058594,9.8203125,0,0,90, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1844,1305.216796875,1353.9777832031,9.8203125,0,0,90, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1848,1305.216796875,1366.109375,9.8203125,0,0,90, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1884,1323.271484375,1366.48828125,9.8203125,0,0,90, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1887,1337.5174560547,1367.1474609375,9.8203125,0,0,270, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1888,1337.5166015625,1361.01953125,9.8203125,0,0,270, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1890,1331.0299072266,1366.451171875,9.8203125,0,0,270, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1889,1319.3034667969,1366.5104980469,9.8203125,0,0,270, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1891,1311.7032470703,1366.4543457031,9.8256044387817,0,0,270, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1988,1309.0712890625,1362.3388671875,9.8203125,0,0,90, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1983,1309.0717773438,1367.3221435547,9.8203125,0,0,90, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1984,1309.2517089844,1346.0887451172,9.8203125,0,0,90, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1349,1321.2307128906,1347.6412353516,10.390697479248,0,0,270, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1848,1305.216796875,1361.0639648438,9.8203125,0,0,90, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1984,1317.2872314453,1346.0887451172,9.8203125,0,0,90, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1984,1325.3276367188,1346.0887451172,9.8203125,0,0,90, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1984,1332.7512207031,1346.0887451172,9.8203125,0,0,90, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1349,1320.4453125,1347.6513671875,10.390697479248,0,0,270, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1349,1321.9799804688,1347.6381835938,10.390697479248,0,0,270, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1349,1321.974609375,1346.138671875,10.390697479248,0,0,90, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1349,1321.1501464844,1346.1239013672,10.390697479248,0,0,90, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1349,1320.3999023438,1346.1096191406,10.390697479248,0,0,90, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1891,1311.703125,1361.53125,9.8256044387817,0,0,270,-1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1884,1311.703125,1357.740234375,9.8203125,0,0,270, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1884,1311.7032470703,1352.1662597656,9.8203125,0,0,270, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1889,1319.302734375,1361.5908203125,9.8203125,0,0,270,-1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1890,1319.302734375,1357.7998046875,9.8203125,0,0,90, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1890,1319.3034667969,1352.1947021484,9.8203125,0,0,90, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1884,1323.271484375,1361.521484375,9.8203125,0,0,90,-1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1889,1323.271484375,1357.7869873047,9.8203125,0,0,270, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1889,1323.271484375,1352.2249755859,9.8203125,0,0,270, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1887,1337.5166015625,1364.0947265625,9.8203125,0,0,270, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1888,1337.5174560547,1357.9465332031,9.8203125,0,0,270,-1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1844,1337.5166015625,1354.8984375,9.8203125,0,0,270, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1890,1331.0299072266,1361.5921630859,9.8203125,0,0,270, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1884,1331.029296875,1357.8046875,9.8203125,0,0,270, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1884,1331.029296875,1352.228515625,9.8203125,0,0,270, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1996,1334.84375,1367.0068359375,9.8203125,0,0,90, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1991,1334.84375,1366.005859375,9.8203125,0,0,90, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1988,1334.8443603516,1357.0745849609,9.8203125,0,0,90, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1983,1334.84375,1360.8544921875,9.8203125,0,0,90, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1842,1315.5546875,1366.5859375,10.292907714844,0,0,270, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1842,1315.5551757813,1361.6608886719,10.292907714844,0,0,270, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1842,1315.5546875,1357.6875,10.292907714844,0,0,270, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1842,1315.5551757813,1352.1333007813,10.292907714844,0,0,270, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1983,1309.0712890625,1365.5,9.8203125,0,0,90, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1983,1308.033203125,1367.328125,9.8203125,0,0,270, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1983,1308.033203125,1365.5146484375,9.8203125,0,0,270, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1988,1309.0712890625,1360.5400390625,9.8203125,0,0,90, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1988,1308.033203125,1362.3056640625,9.8203125,0,0,270, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1988,1308.033203125,1360.5184326172,9.8203125,0,0,270, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1988,1309.0712890625,1358.7412109375,9.8203125,0,0,90, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1988,1309.0712890625,1357.0166015625,9.8203125,0,0,90, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1983,1309.0712890625,1352.9584960938,9.8203125,0,0,90, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1983,1309.0712890625,1351.1591796875,9.8203125,0,0,90, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1988,1308.033203125,1358.7275390625,9.8203125,0,0,270, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1988,1308.033203125,1357.0036621094,9.8203125,0,0,270, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1983,1308.033203125,1352.970703125,9.8203125,0,0,270, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1983,1308.033203125,1351.171875,9.8203125,0,0,270, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1996,1334.8443603516,1352.6251220703,9.8203125,0,0,90,-1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1991,1334.8443603516,1351.6364746094,9.8203125,0,0,90, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1996,1333.8286132813,1366.0200195313,9.8203125,0,0,270,-1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1991,1333.8286132813,1367.0217285156,9.8203125,0,0,270, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1991,1333.8286132813,1352.6409912109,9.8203125,0,0,270, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1996,1333.8286132813,1351.6412353516,9.8203125,0,0,270, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1988,1334.8443603516,1358.5732421875,9.8203125,0,0,90, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1983,1334.8443603516,1362.353515625,9.8203125,0,0,90, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1988,1333.828125,1357.041015625,9.8203125,0,0,270, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1988,1333.8286132813,1358.5484619141,9.8203125,0,0,270, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1983,1333.8286132813,1360.8726806641,9.8203125,0,0,270, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1983,1333.8286132813,1362.3736572266,9.8203125,0,0,270, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1842,1327.4562988281,1366.5859375,10.292907714844,0,0,270, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1842,1327.4562988281,1361.5368652344,10.292907714844,0,0,270, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1842,1327.4562988281,1357.7177734375,10.292907714844,0,0,270, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1842,1327.4562988281,1352.1916503906,10.292907714844,0,0,270, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,1329.1448974609,1341.1885986328,12.038221359253,0,0,180, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,1332.8221435547,1341.1885986328,12.038221359253,0,0,180, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,1337.1971435547,1341.1885986328,12.038221359253,0,0,180, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,1324.7293701172,1341.1885986328,12.038221359253,0,0,180, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,1313.5170898438,1341.1885986328,12.038221359253,0,0,180, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,1309.69140625,1341.1885986328,12.038221359253,0,0,180, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,1305.2819824219,1341.1885986328,12.038221359253,0,0,180, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,1317.9213867188,1341.1885986328,12.038221359253,0,0,180, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1848,1338.6657714844,1350.5185546875,9.8203125,0,0,90, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1848,1338.6650390625,1350.5185546875,11.64999961853,0,0,90, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1848,1338.6650390625,1350.5185546875,13.489999771118,0,0,90, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1322.0283203125,1341.06640625,9.8256044387817,0,0,180, -1, 3, -1, MAX_RADIO_STREAM);
///////////////////
///////////////////
///////////////////
	// Super Mercado 2
	// Disquera
	CreateDynamicObjectExULP(14419,1298.51953125,1308.611328125,13.14999961853,0,0,180, -1, 4, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14403,1283.3481445313,1305.6595458984,11.803508758545,0,0,0, -1, 4, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1281.5140380859,1298.6800537109,9.8999996185303,0,0,0, -1, 4, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1284.5159912109,1298.6800537109,9.8999996185303,0,0,180, -1, 4, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1288.8525390625,1305.9200439453,9.8999996185303,0,0,270, -1, 4, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1288.8525390625,1302.91796875,9.8999996185303,0,0,90, -1, 4, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1714,1282.8841552734,1299.1104736328,9.8999996185303,0,0,180, -1, 4, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2207,1283.8505859375,1300.7840576172,9.8999996185303,0,0,180, -1, 4, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2855,1283.7744140625,1300.2576904297,10.677372932434,0,0,0, -1, 4, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2894,1282.9243164063,1300.8757324219,10.677372932434,0,0,0, -1, 4, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1964,1283.4818115234,1300.9022216797,10.819999694824,0,0,0, -1, 4, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2190,1282.2548828125,1300.4174804688,10.677372932434,0,0,0, -1, 4, -1, MAX_RADIO_STREAM);

	// Metro
	CreateDynamicObjectExULP(14444,1308.982421875,1382.5185546875,9.6999998092651,0,0,0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1848,1322.19921875,1395.7060546875,9.8203125,0,0,0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1848,1327.23046875,1395.7060546875,9.8203125,0,0,0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1844,1331.2919921875,1395.7060546875,9.8203125,0,0,0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1844,1333.404296875,1387.1447753906,9.8203125,0,0,270, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1844,1333.404296875,1384.0886230469,9.8203125,0,0,270, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1844,1334.8143310547,1375.7447509766,9.6999998092651,0,0,90, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1844,1334.8134765625,1375.744140625,11.489999771118,0,0,90, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1514,1315.5672607422,1382.4453125,11.199741363525,0,0,180, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1514,1318.2224121094,1377.1845703125,11.199741363525,0,0,90, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1514,1318.2224121094,1379.9577636719,11.199741363525,0,0,90, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1514,1317.8981933594,1381.8918457031,11.199741363525,0,0,134.19903564453, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1349,1313.1451416016,1370.134765625,10.390697479248,0,0,0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1349,1313.1451416016,1370.9594726563,10.390697479248,0,0,0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1349,1313.1451416016,1371.7084960938,10.390697479248,0,0,0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1349,1313.1451416016,1372.5174560547,10.390697479248,0,0,0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1349,1313.1451416016,1373.3410644531,10.390697479248,0,0,0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1349,1314.6412353516,1373.3410644531,10.390697479248,0,0,0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1349,1314.6412353516,1372.5163574219,10.390697479248,0,0,0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1349,1314.6412353516,1371.6925048828,10.390697479248,0,0,0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1349,1314.6412353516,1370.9428710938,10.390697479248,0,0,0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1349,1314.6412353516,1370.1179199219,10.390697479248,0,0,0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1349,1316.1396484375,1373.3410644531,10.390697479248,0,0,0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1349,1316.1396484375,1372.5163574219,10.390697479248,0,0,0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1349,1316.1396484375,1371.6911621094,10.390697479248,0,0,0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1349,1316.1396484375,1370.9409179688,10.390697479248,0,0,0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1349,1316.1396484375,1370.1159667969,10.390697479248,0,0,0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1888,1333.8684082031,1378.5515136719,9.8203125,0,0,270, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1888,1333.8684082031,1375.5427246094,9.8203125,0,0,270, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1888,1333.8684082031,1372.5146484375,9.8203125,0,0,90, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1884,1330.0043945313,1372.5146484375,9.8203125,0,0,90, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1884,1330.00390625,1375.5126953125,9.8203125,0,0,90, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1884,1330.0043945313,1378.5258789063,9.8203125,0,0,90, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1891,1326.0107421875,1378.525390625,9.8256044387817,0,0,270, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1891,1326.0112304688,1375.5063476563,9.8256044387817,0,0,270, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1891,1326.0107421875,1372.4755859375,9.8256044387817,0,0,270, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1890,1330.00390625,1387.1044921875,9.8203125,0,0,270, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1890,1330.00390625,1384.0615234375,9.8203125,0,0,270, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1889,1326.0107421875,1383.982421875,9.8203125,0,0,270, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1889,1326.0107421875,1386.9814453125,9.8203125,0,0,270, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1844,1318.1440429688,1395.7060546875,9.8203125,0,0,0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1884,1318.2237548828,1392.1500244141,9.8796873092651,0,0,0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1887,1315.1151123047,1395.7060546875,9.8203125,0,0,0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1884,1315.1495361328,1392.1500244141,9.8796873092651,0,0,0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1848,1333.404296875,1391.896484375,9.8203125,0,0,270, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1891,1325.1114501953,1392.1500244141,9.8256044387817,0,0,0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1891,1328.1645507813,1392.1500244141,9.8256044387817,0,0,0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1889,1321.6763916016,1392.1500244141,9.8203125,0,0,0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1983,1309.3424072266,1394.0499267578,9.8203125,0,0,90, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1983,1309.3424072266,1391.1950683594,9.8203125,0,0,90, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1983,1309.341796875,1388.490234375,9.8203125,0,0,90, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1988,1308.3084716797,1388.4910888672,9.8203125,0,0,270, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1988,1308.3084716797,1391.1909179688,9.8203125,0,0,270, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1988,1308.3084716797,1394.0305175781,9.8203125,0,0,270, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1983,1305.0469970703,1388.4910888672,9.8203125,0,0,270, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1983,1305.0469970703,1391.1909179688,9.8203125,0,0,270, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1983,1305.0469970703,1394.0305175781,9.8203125,0,0,270, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1988,1306.0968017578,1388.4910888672,9.8203125,0,0,90, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1988,1306.0968017578,1391.1909179688,9.8203125,0,0,90, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1988,1306.0968017578,1394.0305175781,9.8203125,0,0,90, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1848,1308.2607421875,1385.208984375,9.6999998092651,0,0,0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1848,1308.2607421875,1385.208984375,11.529999732971,0,0,0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,1334.4858398438,1391.6343994141,15.800000190735,0,0,270, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1320.1904296875,1369.69140625,9.8796873092651,0,0,0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1323.1899414063,1369.6918945313,9.8796873092651,0,0,180, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(6965,1541.3665771484,1512.5358886719,13.479999542236,0,0,0, -1, 2, -1, MAX_RADIO_STREAM);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// OFICINA GOBIERNO SAN FIERRO
	CreateDynamicObjectExULP(14390,2440.595703125,2227.2724609375,93.881156921387,0,0,0,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,2466,2252,90.630043029785,0,0,270,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,2466,2248.9931640625,90.630043029785,0,0,90,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14389,2490.99609375,2287.3935546875,93.800003051758,0,0,180,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1702,2450.9133300781,2251.5451660156,90.631156921387,0,0,180,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2207,2456.4267578125,2248.5966796875,90.638175964355,0,0,90,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(626,2464.4714355469,2245.4711914063,92.843818664551,0,0,0,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1702,2448.8974609375,2253.2985839844,90.631156921387,0,0,269.85263061523,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1705,2450.5141601563,2252.3347167969,90.631156921387,0,0,180,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1714,2454.8029785156,2249.4907226563,90.631156921387,0,0,91.449005126953,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2894,2456.4052734375,2249.53515625,91.415550231934,0,0,316.33984375,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2197,2454.1494140625,2243.8037109375,90.631156921387,0,0,180,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2197,2454.8193359375,2243.8037109375,90.631156921387,0,0,180,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2197,2455.48828125,2243.8095703125,90.631156921387,0,0,180,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2197,2454.1494140625,2243.8037109375,92.300003051758,0,0,180,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14455,2453.806640625,2251.6999511719,92.309936523438,0,0,270,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2197,2454.8193359375,2243.8037109375,92.300003051758,0,0,180,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2197,2455.48828125,2243.8095703125,92.300003051758,0,0,180,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,2464.1530761719,2246.6999511719,92.860000610352,0,90,180,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,2460.8239746094,2246.6999511719,92.860000610352,0,90,180,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,2457.4880371094,2246.6999511719,92.860000610352,0,90,180,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,2464.15234375,2246.6999511719,92.860000610352,0,90,0,-1, 1, 1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,2460.8232421875,2246.6999511719,92.860000610352,0,90,0,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,2457.4873046875,2246.6999511719,92.860000610352,0,90,0,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,2457.0021972656,2245.4909667969,92.860000610352,0,90,313.84423828125,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,2457.001953125,2245.490234375,92.860000610352,0,90,134.03259277344,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(644,2460.5385742188,2245.5581054688,91.099998474121,0,0,0,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3532,2463.2712402344,2245.5959472656,91.313247680664,0,0,90,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3532,2459.8815917969,2245.7194824219,91.313247680664,0,0,90,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(626,2458.0100097656,2245.7475585938,92.843818664551,0,0,0.75,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14805,2461.8774414063,2250.8256835938,91.5,0,0,0,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1964,2455.8361816406,2250.048828125,91.559997558594,0,0,89.038757324219,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2196,2456.5988769531,2249.1818847656,91.415550231934,0,0,218.91635131836,-1, 1, -1, MAX_RADIO_STREAM);

// Cámaras de Seguridad SFPD
	CreateDynamicObjectExULP(18033,1953.3709716797,976.65844726563,22.842496871948,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(18033,1956.1389160156,974.36462402344,22.844999313354,0,0,270,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14570,1952.3474121094,971.92327880859,20.861223220825,0,0,180,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(18001,1957.5,975.11999511719,22.39999961853,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(18001,1957.5,975.1298828125,23.200000762939,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14576,1954.576171875,960.6708984375,27.799999237061,0,0,90,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14576,1961.0556640625,960.5556640625,17.680000305176,0,179.99450683594,90,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14576,1950.2843017578,983.05285644531,17.680000305176,0,179.99450683594,90,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1714,1957.8981933594,970.26641845703,20.870132446289,0,0,173.21722412109,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2207,1958.8623046875,973.228515625,20.870132446289,0,0,178.330078125,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1714,1956.0301513672,971.58880615234,20.870132446289,0,0,121.22198486328,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1714,1959.7918701172,971.17852783203,20.870132446289,0,0,218.05328369141,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2207,1956.9599609375,971.3505859375,20.870132446289,0,0,358.49487304688,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1953.8508300781,968.40002441406,20.870132446289,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3111,1957.990234375,972.251953125,21.648000717163,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2894,1957.97265625,971.1845703125,21.647504806519,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2894,1958.8791503906,971.90405273438,21.647504806519,0,0,71.788787841797,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1964,1957.18359375,971.8974609375,21.790000915527,0,0,253.5205078125,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2196,1957.3815917969,972.125,21.647504806519,0,0,260.1662902832,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2196,1957.9501953125,971.69018554688,21.647504806519,0,0,329.25,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2196,1959.3327636719,972.24078369141,21.647504806519,0,0,303.74926757813,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2007,1961.5854492188,969.04534912109,20.870943069458,0,0,180,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2007,1960.3857421875,969.04534912109,20.870943069458,0,0,179.99450683594,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2007,1959.1583251953,969.04534912109,20.870927810669,0,0,179.99450683594,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,260.04592895508,107.05999755859,1002.2257080078,0,0,180,-1, -1, -1, MAX_RADIO_STREAM);

// CONTRABANDISTAS
	CreateDynamicObjectExULP(4100,697.70282000,-1422.31140100,14.15188100,0,0,-38.90658449,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4100,718.76098600,-1422.21838400,14.17510800,0,0,-38.90658449,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(966,711.30920400,-1422.33837900,12.52855900,0,0,-0.85943669,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4100,757.89416500,-1422.93835400,14.17290100,0,0,-38.90658449,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(966,764.82299800,-1422.80835000,12.51754900,0,0,-180.85939924,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4100,775.10577400,-1429.31628400,14.21929600,0,0,-102.96882367,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3264,761.29711900,-1420.99926800,12.77031900,0,0,89.99998128,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3264,715.70300300,-1419.90234400,12.74840400,0,0,-89.99992398,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3265,703.36108400,-1422.05615200,12.41406400,0,0,-180.00001985,-1, -1, -1, MAX_RADIO_STREAM);

// Contrabandistas Parking (4-5-2011)
	CreateDynamicObjectExULP(966,660.811462,-1448.604736,13.851562,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4100,660.805541,-1462.259521,15.600000,0.000000,0.000000,50.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4100,660.834045,-1441.054077,15.600000,0.000000,0.000000,49.998779,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8378,726.160583,-1582.233520,-14.000000,0.000000,179.994506,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8378,725.203186,-1582.578247,-14.000000,0.000000,180.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);

// OFICINAS TAXISTAS (Interior)
	CreateDynamicObjectExULP(2948,2228.9567871094,-1149.5699462891,1028.796875,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2948,2228.9553222656,-1151.4837646484,1028.796875,0,0,179.37744140625,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2948,2192.37890625,-1148.1999511719,1032.7968750,0,0,90,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2948,2194.2900390625,-1148.1899414063,1032.796875,0,0,270,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2948,2192.3798828125,-1148.51000976560,1028.7968750,0,0,90,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2948,2194.3000488281,-1148.5,1028.796875,0,0,270,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1726,2216.314453125,-1154.9301757813,1024.796875,0,0,181.23779296875,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1726,2218.6381835938,-1154.9301757813,1024.796875,0,0,181.23596191406,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1726,2214.6486816406,-1148.4328613281,1024.796875,0,0,90,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1726,2228.2946777344,-1145.1539306641,1024.796875,0,0,270,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1726,2225.6359863281,-1144.6040039063,1024.796875,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);

	CreateDynamicObjectExULP(14534,1957.0798339844,1884.1640625,31.086999893188,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14534,1952.2178955078,1889.2589111328,31.083000183105,0,0,180,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1714,1957.3327636719,1885.4931640625,26.461999893188,0,0,269.46118164063,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1726,1950.8974609375,1889.6862792969,26.461999893188,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1726,1953.9448242188,1889.6862792969,26.461999893188,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2207,1955.8194580078,1886.4200439453,26.461999893188,0,0,270,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1714,1954.9779052734,1886.6477050781,26.461999893188,0,0,62.649047851563,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1714,1954.9541015625,1884.6750488281,26.461999893188,0,0,114.18286132813,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2894,1955.9135742188,1885.2718505859,27.239372253418,0,0,287.59594726563,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14455,1953.6573486328,1883.0992431641,28.133760452271,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1964,1956.0678710938,1884.8045654297,27.349105834961,0,0,260.16625976563,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2066,1958.7991943359,1886.1444091797,26.464685440063,0,0,270,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2066,1958.7991943359,1885.5668945313,26.464685440063,0,0,270,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2828,1956.2490234375,1886.4272460938,27.239372253418,0,0,194.35200500488,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2190,1956.1978759766,1884.8256835938,27.239372253418,0,0,93.564270019531,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2948,1950.0799560547,1886.8374023438,26.461999893188,0,0,90,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2948,1952,1886.8532714844,26.461999893188,0,0,270,-1, 15, -1, MAX_RADIO_STREAM);

// OFICINA CNN (Interior)
	CreateDynamicObjectExULP(14393,1165.0615234375,1327.0419921875,12.060000419617,0,0,0,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14393,1153.5849609375,1326.953125,12.059000015259,0,0,180,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1714,1159.4223632813,1330.0971679688,9.8256254196167,0,0,0,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1726,1161.0606689453,1323.2830810547,9.8318939208984,0,0,180,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1726,1161.7092285156,1325.9776611328,9.8318939208984,0,0,270,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(627,1161.6257324219,1323.3090820313,11.677202224731,0,0,337.49450683594,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2207,1158.4376220703,1328.6156005859,9.8256254196167,0,0,0,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2894,1158.5028076172,1329.2690429688,10.602998733521,0,0,0,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1958,1160.2689208984,1329.2882080078,10.652913093567,0,0,90,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2000,1156.6400146484,1330.7099609375,9.8256254196167,0,0,0,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2000,1157.1453857422,1330.7099609375,9.8256254196167,0,0,0,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2000,1162.0223388672,1330.7099609375,9.8256254196167,0,0,0,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2000,1161.5219726563,1330.7099609375,9.8256254196167,0,0,0,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2272,1158.2991943359,1330.7498779297,11.160943984985,0,0,0,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2272,1160.4724121094,1330.7498779297,11.160943031311,0,0,0,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2828,1159.9184570313,1328.5881347656,10.602998733521,0,0,17.730621337891,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2190,1158.7105712891,1328.6234130859,10.602998733521,0,0,151.85314941406,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2103,1161.7845458984,1331.0010986328,11.230016708374,0,0,0,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2700,1156.6192626953,1324.5749511719,11.711681365967,0,0,0,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1727,1156.8977050781,1325.0496826172,9.8318939208984,0,0,90,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1827,1159.8145751953,1325.1374511719,9.8256254196167,0,0,0,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2827,1159.8666992188,1324.7305908203,10.25,0,0,0,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2852,1159.8254394531,1325.4737548828,10.248176574707,0,0,268.09588623047,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1156.7662353516,1322.6999511719,9.8256254196167,0,0,0,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,2173.3999023438,1601.4000244141,998.96697998047,0,0,90,-1, 1, -1, MAX_RADIO_STREAM);

// DISQUERA CNN( Interior)
	CreateDynamicObjectExULP(14393,1155.7803955078,1235.2418212891,12.10000038147,0,0,0,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14392,1155.9080810547,1235.2399902344,11.011236190796,0,0,0,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14391,1156.3165283203,1234.3389892578,10.832979202271,0,0,0,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,1155.3876953125,1235.0306396484,11.531367301941,0,0,90,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,1155.3876953125,1230.5994873047,11.531367301941,0,0,90,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,1155.3876953125,1235.0302734375,11.531367301941,0,0,270,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,1155.3876953125,1230.5986328125,11.531367301941,0,0,270,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1536,1164.5200195313,1236.3900146484,9.8728942871094,0,0,270,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1536,1164.5600585938,1233.3699951172,9.8728942871094,0,0,90,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1714,1158.3325195313,1236.1713867188,9.8728942871094,0,0,254.62141418457,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1714,1158.4060058594,1234.1235351563,9.8728942871094,0,0,265.869140625,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1714,1159.8986816406,1232.8940429688,9.8728942871094,0,0,334.97283935547,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14403,1168.3000488281,1236.3284912109,11.699999809265,0,0,270,-1, 1, -1, MAX_RADIO_STREAM);

// ESCALERAS CNN EXTERIOR
/*	CreateDynamicObjectExULP(11544,733.425598,-1365.563842,24.442220,0.000000,0.000000,181.300079,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11544,733.419250,-1363.009155,24.442213,0.000000,0.000000,-359.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3934,742.053771,-1369.747558,24.642210,-0.099999,0.000000,91.690002,-1,-1,-1,MAX_RADIO_STREAM); // H Heli CNN*/

// LSPD Adorno
	CreateDynamicObjectExULP(626,243.29122924805,71.593170166016,1004.6892089844,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2356,256.73541259766,69.646438598633,1002.640625,0,0,90.75,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1761,242.919921875,68.4208984375,1002.640625,0,0,90,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1761,247.92886352539,71.762710571289,1002.640625,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1762,244.05838012695,71.759017944336,1002.640625,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,250.5390625,66.456001281738,1006.4000244141,0,90,90,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,250.53906251,69.7890625,1005.799987793,0,90,90,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,250.5390625,66.456001281738,1006.4000244141,0,90,270,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,250.5390625,69.7890625,1005,0,90,270,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1811,256.93893432617,63.910911560059,1003.2669067383,0,0,90,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11631,251.9522857666,70.621543884277,1003.8865356445,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2356,252.24394226074,69.647560119629,1002.640625,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1827,244.74403381348,69.341171264648,1002.640625,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2852,244.9496307373,68.94522857666,1003.0599975586,0,0,119.40292358398,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2852,244.53253173828,69.607246398926,1003.0599975586,0,0,160.69323730469,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2700,251.15092468262,70.970359802246,1005.2451171875,0,0,313.5,-1, -1, -1, MAX_RADIO_STREAM);

// MAPEADO adicional SF
	CreateDynamicObjectExULP(10982,-1991.27880900,-33.64490900,39.70708500,0,0,-89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateObjectEx(8569,-1987.34472700,-91.91194900,32.31654400,0,0,-266.56225435, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,-1990.49487300,-82.06143200,35.75253300,0,0,-86.56223451, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,-1982.21948200,-81.57943000,35.79534900,0,0,-86.56223451, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,-1978.63464400,-87.77775600,35.74847400,0,0,-176.56221578, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,-1978.20898400,-94.97602800,35.74847400,0,0,-176.56221578, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,-1989.32836900,-102.04919400,35.74847400,0,0,-266.56225435, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3852,-1995.80371100,-90.58214600,33.21257000,-20.62648062,0,-86.56223451, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,-1996.69982900,-85.64576700,35.79525800,0,0,3.43774677, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,-1995.89172400,-99.20455900,35.79534900,0,0,3.43774677, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3852,-1995.55419900,-94.17548400,33.21783100,-20.62648062,0,-86.56223451, -1, -1, -1, MAX_RADIO_STREAM);
//	CreateDynamicObjectExULP(1597,-1987.55139200,-91.67754400,37.76917600,0,0,-86.5622345, -1, -1, -1, MAX_RADIO_STREAM); Palmera Parking Autoescuela SF
	CreateDynamicObjectExULP(970,-1982.66711400,-82.10545300,35.66327300,0,0,3.43774677, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,-1986.82324200,-82.34973100,35.66327300,0,0,3.43774677, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,-1990.98278800,-82.61003900,35.66327300,0,0,3.43774677, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,-1992.91040000,-84.79157300,35.66327300,0,0,93.43772805, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,-1988.79870600,-84.54651600,35.66327300,0,0,93.43772805, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,-1984.61901900,-84.30730400,35.66327300,0,0,93.43772805, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,-1980.46948200,-84.05458800,35.66327300,0,0,93.43772805, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,-1981.56396500,-101.13599400,35.66327300,0,0,3.43774677, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,-1985.71679700,-101.38606300,35.66327300,0,0,3.43774677, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,-1989.87072800,-101.64180800,35.66327300,0,0,3.43774677, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,-1979.60266100,-98.93166400,35.66327300,0,0,93.43772805, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,-1983.74536100,-99.17198200,35.66327300,0,0,93.43772805, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,-1987.91589400,-99.42533100,35.66327300,0,0,93.43772805, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,-1992.04357900,-99.68460100,35.66327300,0,0,93.43772805, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,-1980.99731400,-101.54656200,35.79534900,0,0,-86.56223451, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-1996.53625500,-82.84912900,35.67611700,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-1979.34570300,-81.79757700,35.67611700,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-1978.22766100,-101.00427200,35.67611700,0,0,11.25002631, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-1995.41955600,-102.06297300,35.67611700,0,0,11.25002631, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1223,-1990.97375500,-82.33847800,35.07457700,0,0,274.29718459, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(647,-1994.99365200,-57.96723200,35.65219900,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(647,-1977.77600100,-50.98284900,35.67720000,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(647,-1974.44934100,-79.41565700,36.33376700,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(647,-1991.70507800,-107.59096500,35.60991300,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1223,-1986.81555200,-82.09967800,35.07457700,0,0,274.29718459, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1223,-1982.67443800,-81.85581200,35.07457700,0,0,274.29718459, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1223,-1981.57678200,-101.43341800,35.07457700,0,0,94.29722204, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1223,-1985.71704100,-101.66022500,35.07457700,0,0,94.29722204, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1223,-1989.88745100,-101.88919800,35.07457700,0,0,94.29722204, -1, -1, -1, MAX_RADIO_STREAM);

// ESTACIóN DE TRENES SAN FIERRO
	CreateDynamicObjectExULP(984,-1966.88476600,78.41358200,27.32418100,0,0,89.99998128,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(984,-1973.27490200,78.42010500,27.32418100,0,0,89.99998128,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(984,-1960.48388700,84.84230800,27.32418100,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(984,-1960.48254400,97.60971800,27.32418100,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(983,-1960.52441400,107.17553700,27.37105600,0,0,0.85943669,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(5627,-1944.88330100,183.70205700,29.85561400,0,0,-1.71887339,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,-1961.18066400,104.96418000,27.23898100,0,0,89.99998128,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,-1961.19372600,100.79401400,27.23898100,0,0,89.99998128,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,-1961.20092800,96.63525400,27.23898100,0,0,89.99998128,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,-1961.20153800,92.47555500,27.23898100,0,0,89.99998128,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,-1961.20715300,88.32878100,27.23898100,0,0,89.99998128,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,-1961.21398900,84.16614500,27.23898100,0,0,89.99998128,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,-1963.25012200,107.04366300,27.23898100,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,-1963.27575700,102.89382200,27.23898100,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,-1963.31286600,98.69526700,27.23898100,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,-1963.28637700,94.55728900,27.23898100,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,-1963.29736300,90.40081800,27.23898100,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,-1963.30517600,86.24601700,27.23898100,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,-1963.32507300,82.11628700,27.23898100,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1426,-1963.62609900,80.22132100,26.82927900,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1223,-1960.83886700,104.94105500,26.63140300,0,0,-180.00001985,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1223,-1960.84277300,100.78038000,26.65028600,0,0,-180.00001985,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1223,-1960.81347700,96.62509200,26.67528500,0,0,-180.00001985,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1223,-1960.88000500,92.44783800,26.67528500,0,0,-180.00001985,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1223,-1960.86743200,88.31062300,26.67528500,0,0,-180.00001985,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1223,-1960.85266100,84.14156300,26.67528500,0,0,-180.00001985,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-1980.42492700,140.60154700,27.25182300,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-1980.46215800,135.11001600,27.25182300,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(9191,-1970.11633300,108.38721500,31.91321600,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1223,-1974.39099100,108.18720200,30.59924500,0,0,-89.99998128,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1223,-1965.93652300,108.14733100,30.59985500,0,0,-89.99998128,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(984,-1980.23193400,101.57810200,27.32418100,0,0,179.99996255,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(984,-1980.23144500,93.59893800,27.32418100,0,0,179.99996255,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,-1977.67248500,107.04077900,27.23898100,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,-1979.73510700,104.98628200,27.23898100,0,0,89.99998128,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,-1979.72985800,100.82524900,27.23898100,0,0,89.99998128,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,-1979.72424300,96.66829700,27.23898100,0,0,89.99998128,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,-1979.72082500,92.50875900,27.23898100,0,0,89.99998128,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,-1977.63220200,90.42580400,27.23898100,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,-1977.62011700,94.59219400,27.23898100,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,-1977.66125500,98.76146700,27.23898100,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(970,-1977.66662600,102.90686800,27.23898100,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1223,-1980.01184100,104.99328600,26.67528500,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1223,-1980.01379400,100.84407000,26.67528500,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1223,-1980.00122100,96.69529000,26.67528500,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1223,-1979.99023400,92.52266700,26.67528500,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1214,-1980.24389600,86.95446000,26.68151100,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1214,-1980.24877900,78.42151600,26.68151100,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(3475,-1960.83593800,168.00904800,27.74677100,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(3475,-1960.85327100,173.83859300,27.73242400,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(3475,-1960.86218300,179.73536700,27.73242400,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(3475,-1960.85192900,185.58744800,27.72133100,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(3475,-1960.83667000,191.46876500,27.71292700,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(3475,-1960.83410600,197.39019800,27.71949000,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(3475,-1960.83935500,203.22329700,27.72676100,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(3475,-1963.90869100,206.48730500,27.72931500,0,0,89.99998128,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(3475,-1969.78051800,206.47718800,27.73301500,0,0,89.99998128,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(3475,-1975.67224100,206.46098300,27.74020800,0,0,89.99998128,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1223,-1959.74511700,110.88948800,26.67528500,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1223,-1959.75280800,121.73135400,26.67528500,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1223,-1959.73547400,132.60617100,26.67528500,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1223,-1959.75378400,143.46011400,26.67528500,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1223,-1959.74939000,154.30503800,26.67528500,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1223,-1959.76416000,165.18718000,26.67528500,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1231,-1938.39196800,154.27246100,28.01164200,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1231,-1938.67773400,143.20181300,28.01164200,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1231,-1939.03662100,132.03318800,28.01164200,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1231,-1939.11511200,120.86680600,28.00383400,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(4100,-1944.27465800,193.43585200,32.70468100,0,0,-41.56224387,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(4100,-1944.41259800,189.41258200,32.64653000,0,0,-41.56224387,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(5429,-1968.79675300,180.34646600,25.02073700,0,0,-3.36039747,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(672,-1973.85839800,197.46965000,27.69582700,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(672,-1969.50378400,179.08944700,28.55713700,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(800,-1970.95788600,183.46783400,29.04009200,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(800,-1969.80151400,192.77360500,28.05972500,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(800,-1969.40576200,198.06483500,27.37118500,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(800,-1975.70813000,189.41755700,27.87264400,0,0,0,-1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(800,-1973.63000500,178.97778300,27.75639000,0,0,22.49999532,-1, -1, -1, MAX_RADIO_STREAM_MIN);

// OFICINA ADP 1
	CreateDynamicObjectExULP(14581,2555.3681640625,1343.388671875,79.807739257813,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1998,2556.1567382813,1339.3785400391,77.476387023926,0,0,90,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2309,2553.4362792969,1340.6060791016,77.476387023926,0,0,257.91632080078,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2309,2553.6208496094,1339.1488037109,77.476387023926,0,0,299.59460449219,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,2555.0114746094,1341.1619873047,79.169998168945,0,0,180,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,2548.9423828125,1341.1619873047,79.169998168945,0,0,180,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,2555.0107421875,1341.1611328125,79.169998168945,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,2548.9423828125,1341.1611328125,79.169998168945,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14638,2558.2395019531,1344.185546875,77.476387023926,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14638,2558.2214355469,1347.2067871094,77.476387023926,0,0,180,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2207,2552.4523925781,1344.7199707031,77.400001525879,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2207,2554.3012695313,1346.6235351563,77.400001525879,0,0,180,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2120,2556.0209960938,1347.1604003906,78.114143371582,0,0,33.266326904297,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2120,2550.6940917969,1347.2266845703,78.114143371582,0,0,147.3486328125,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2120,2550.7224121094,1344.1247558594,78.114143371582,0,0,213.56010437012,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2120,2553.2768554688,1342.6917724609,78.114143371582,0,0,272.05737304688,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2120,2555.927734375,1344.2946777344,78.114143371582,0,0,325.22232055664,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2828,2556.0988769531,1339.2915039063,78.288887023926,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2066,2557.6457519531,1340.7854003906,77.476387023926,0,0,270,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2066,2557.6457519531,1340.2001953125,77.476387023926,0,0,270,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2066,2557.6457519531,1339.6192626953,77.476387023926,0,0,270,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2066,2557.6455078125,1340.78515625,78.889999389648,0,0,270,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2066,2557.6455078125,1340.2001953125,78.889999389648,0,0,270,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2066,2557.6455078125,1339.619140625,78.889999389648,0,0,270,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1702,2549.0034179688,1338.2325439453,77.476387023926,0,0,90,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1705,2552.802734375,1337.126953125,77.476387023926,0,0,180,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1705,2554.69921875,1337.126953125,77.476387023926,0,0,180,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1739,2553.2504882813,1348.8012695313,78.36939239502,0,0,90.859191894531,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1714,2556.3159179688,1340.2969970703,77.476387023926,0,0,271.55102539063,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1666,2555.2016601563,1346.9938964844,78.290000915527,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1666,2552.9443359375,1347.8588867188,78.290000915527,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1666,2551.1164550781,1346.3774414063,78.290000915527,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1666,2551.744140625,1344.2130126953,78.290000915527,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1666,2553.78125,1343.7104492188,78.290000915527,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1666,2555.4279785156,1345.0810546875,78.290000915527,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2894,2553.4067382813,1347.8177490234,78.199996948242,0,0,6.9101867675781,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2200,2557.2937011719,1337.3889160156,77.476387023926,0,0,180,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2555.28125,1350.4703369141,77.476387023926,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2551.2463378906,1350.5167236328,77.476387023926,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2548.2900390625,1347.8127441406,77.476387023926,0,0,270,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2548.2946777344,1344.2133789063,77.476387023926,0,0,270,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2548.1694335938,1337.8420410156,77.476387023926,0,0,270,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2548.3776855469,1337.0129394531,77.476387023926,0,0,180,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2558.0026855469,1337.0384521484,77.476387023926,0,0,180,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2553.2446289063,1336.3103027344,77.476387023926,0,0,180,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2558.1596679688,1339.6824951172,77.476387023926,0,0,270,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2558.2587890625,1344.7783203125,77.476387023926,0,0,270,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2558.2158203125,1350.1091308594,77.476387023926,0,0,270,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2555.408203125,1334.4481201172,77.476387023926,0,0,90,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2551.1337890625,1334.3656005859,77.476387023926,0,0,90,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2553.7600097656,1347.8245849609,82.199996948242,90,0,90,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2548.6958007813,1347.8579101563,82.199996948242,90,0,90,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2548.6611328125,1342.3773193359,82.199996948242,90,0,90,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2553.9204101563,1342.2889404297,82.199996948242,90,0,90,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2553.8935546875,1336.7308349609,82.199996948242,90,0,90,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2548.8918457031,1336.7244873047,82.199996948242,90,0,90,-1, -1, -1, MAX_RADIO_STREAM);

// OFICINA ADP 2
	CreateDynamicObjectExULP(14424,2573.9128417969,1348.2569580078,79.150001525879,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,2600.9265136719,1342.7354736328,79.150001525879,0,0,90,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,2600.9265136719,1347.0825195313,79.150001525879,0,0,90,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,2600.9265136719,1351.4291992188,79.150001525879,0,0,90,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,2600.92578125,1342.7353515625,79.150001525879,0,0,270,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,2600.92578125,1347.08203125,79.150001525879,0,0,270,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,2600.92578125,1351.4287109375,79.150001525879,0,0,270,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14638,2597.6687011719,1352.8800048828,77.476387023926,0,0,90,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14638,2594.6555175781,1352.8800048828,77.476387023926,0,0,270,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2241,2594.0300292969,1342.94921875,77.980186462402,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2195,2593.9873046875,1337.2117919922,78.093574523926,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(18014,2593.9406738281,1340.064453125,77.908592224121,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2811,2594.0288085938,1343.6635742188,77.476387023926,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2195,2593.9699707031,1344.4621582031,78.093574523926,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2165,2596.2497558594,1347.3388671875,77.476387023926,0,0,180,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2165,2599.0541992188,1347.3388671875,77.476387023926,0,0,180,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1811,2598.4694824219,1348.4571533203,78.102691650391,0,0,90.768310546875,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1811,2595.7104492188,1348.5081787109,78.102691650391,0,0,92.106353759766,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2309,2599.1291503906,1345.8223876953,77.476387023926,0,0,13.5,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2309,2597.9987792969,1345.8239746094,77.476387023926,0,0,342.02221679688,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2309,2595.2507324219,1345.8553466797,77.476387023926,0,0,342.02087402344,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2309,2596.4948730469,1345.7878417969,77.476387023926,0,0,20.995361328125,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1702,2600.2199707031,1344.6881103516,77.476387023926,0,0,270,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1702,2599.7062988281,1341.7222900391,77.476387023926,0,0,180,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1702,2597.7121582031,1337.4011230469,77.476387023926,0,0,180,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1702,2602.6147460938,1337.4011230469,77.476387023926,0,0,180,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1702,2600.1350097656,1337.4011230469,77.476387023926,0,0,180,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2164,2595.2131347656,1350.2818603516,77.5,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2164,2596.9897460938,1350.2818603516,77.5,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2164,2596.0185546875,1350.3499755859,77.5,0,0,180,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2164,2597.7866210938,1350.3499755859,77.5,0,0,180,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2200,2598.8793945313,1352.6431884766,77.476387023926,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,2601.4538574219,1336.8188476563,79.142127990723,0,0,180,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,2597.0842285156,1336.8188476563,79.142127990723,0,0,180,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,2601.7221679688,1352.8666992188,77.476387023926,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2885,2598.3857421875,1336.5139160156,84.187240600586,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2603.974609375,1350.0869140625,77.476387023926,0,0,270,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2603.9516601563,1344.7509765625,77.476387023926,0,0,270,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2603.95,1339.3537597656,77.476387023926,0,0,270,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2593.0871582031,1339.2729492188,77.476387023926,0,0,270,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2592.9934082031,1341.9572753906,77.476387023926,0,0,270,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2594.533203125,1347.6870117188,77.476387023926,0,0,270,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2594.6118164063,1350.0659179688,77.476387023926,0,0,270,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2603.7944335938,1352.9700927734,77.476387023926,0,0,180,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2597.8930664063,1352.9201660156,77.476387023926,0,0,180,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2592.3793945313,1352.9488525391,77.476387023926,0,0,180,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2591.6965332031,1344.9246826172,77.476387023926,0,0,180,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2598.6875,1350.1574707031,81.610908508301,90,0,270,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2603.8005371094,1350.185546875,81.610908508301,90,0,270,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2603.8176269531,1344.7141113281,81.610908508301,90,0,270,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2598.65234375,1344.6901855469,81.610908508301,90,0,270,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2598.646484375,1339.482421875,81.610908508301,90,0,270,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2603.6479492188,1339.4758300781,81.610908508301,90,0,270,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2593.5219726563,1339.4897460938,81.610908508301,90,0,270,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2593.521484375,1345.0356445313,81.610908508301,90,0,270,-1, -1, -1, MAX_RADIO_STREAM);

// Cámaras de Seguridad LSPD
	CreateDynamicObjectExULP(14570,2368.0810546875,1568.443359375,27.297771453857,0,0,90.104370117188, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14570,2362.017578125,1564.0087890625,27.297771453857,0,0,179.52758789063, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(18001,2367.419921875,1567.1796875,29.699998855591,0,0,0, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(18001,2371.2900390625,1563.279296875,28.799999237061,0,0,270, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(18001,2371.294921875,1563.279296875,29.699998855591,0,0,270, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(18001,2367.419921875,1567.189453125,28.799999237061,0,0,0, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1714,2366.91796875,1563.1627197266,27,0,0,136.71838378906, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2207,2369.0576171875,1563.94921875,27,0,0,135.05493164063, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2207,2366.0229492188,1565.7358398438,27,0,0,193.7734375, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2207,2368.8098144531,1560.4147949219,27,0,0,69.118347167969, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1714,2365.3679199219,1563.8439941406,27,0,0,186.18841552734, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1714,2367.6608886719,1561.7707519531,27,0,0,83.3515625, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2854,2368.9709472656,1562.3619384766,27.777372360229,0,0,324.74487304688, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2853,2368.4460449219,1560.6092529297,27.777372360229,0,0,0, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2852,2365.7607421875,1565.4251708984,27.777372360229,0,0,0, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1455,2364.4821777344,1564.951171875,27.849060058594,0,0,0, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1665,2367.650390625,1564.5739746094,27.788000106812,0,0,359.25, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1546,2367.3481445313,1564.5745849609,27.866500854492,0,0,0, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3017,2364.5314941406,1564.5827636719,27.780000686646,0,0,11.544860839844, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1455,2368.6547851563,1562.1666259766,27.849060058594,0,0,0, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2894,2369.0747070313,1561.4691162109,27.777372360229,0,0,90.697631835938, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2196,2368.6530761719,1561.3618164063,27.777372360229,0,0,91.60400390625, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2196,2365.2199707031,1565.5660400391,27.777372360229,0,0,330.13366699219, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2196,2368.4216308594,1564.8850097656,27.777372360229,0,0,292.81860351563, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1964,2367.9125976563,1564.5150146484,27.920000076294,0,0,126.66906738281, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14576,2356.8117675781,1559.8704833984,35,0,0,0, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14576,2356.7526855469,1570.1683349609,34.900001525879,0,0,0, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14412,2372.1628417969,1568.4814453125,36.299999237061,0,0,270, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,2359.4377441406,1557.5400390625,26.89999961853,0,0,0, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,2362.419921875,1557.5400390625,26.89999961853,0,0,180, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2007,2363.8933105469,1559.0688476563,26.944347381592,0,0,90, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2007,2363.8933105469,1560.0427246094,26.944347381592,0,0,90, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2007,2363.8933105469,1561.0241699219,26.944347381592,0,0,90, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2007,2363.8933105469,1561.9978027344,26.944347381592,0,0,90, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2007,2363.892578125,1559.068359375,28.340000152588,0,0,90, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2007,2363.892578125,1560.0379638672,28.340000152588,0,0,90, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2007,2363.892578125,1561.0114746094,28.340000152588,0,0,90, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2007,2363.892578125,1561.9851074219,28.340000152588,0,0,90, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2007,2362.630859375,1562.0264892578,26.956249237061,0,0,270, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2007,2362.630859375,1561.0520019531,26.956249237061,0,0,270, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2007,2362.630859375,1560.0773925781,26.956249237061,0,0,270, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2007,2362.630859375,1559.1004638672,26.956249237061,0,0,270, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2007,2362.630859375,1559.099609375,28.35000038147,0,0,270, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2007,2362.630859375,1560.0739746094,28.35000038147,0,0,270, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2007,2362.630859375,1561.0476074219,28.35000038147,0,0,270, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2007,2362.630859375,1562.0255126953,28.35000038147,0,0,270, -1, 11, -1, MAX_RADIO_STREAM);

	CreateDynamicObjectExULP(1569,218.72439575195,73.783393859863,1004.0390625,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,221.71586608887,73.783393859863,1004.0390625,0,0,180, -1, -1, -1, MAX_RADIO_STREAM);

// PALMERAS ADP
	CreateDynamicObjectExULP(711,-2106.393554,1347.953125,12.101579,-0.000000,-0.100000,-0.200000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(711,-2128.432373,1347.351806,12.497501,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(711,-2146.377685,1347.374877,12.546854,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(711,-2166.209228,1347.454467,12.539064,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(711,-2184.815429,1347.321899,12.439067,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(711,-2202.607666,1347.317260,12.587499,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(711,-2220.391357,1347.333618,12.587505,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(711,-2240.099365,1347.345825,12.487499,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(711,-2257.611328,1348.199096,12.187500,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);

// RADARES LSPD
	CreateDynamicObjectExULP(1596,1544.334106,-1643.994140,29.902112,-0.099999,-0.099999,272.700073,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1596,1544.089965,-1707.962768,29.894815,-0.000000,0.000000,267.100006,-1,-1,-1,MAX_RADIO_STREAM);

// OFICINA RADARES LSPD
/*	CreateDynamicObjectExULP(2165,214.504623,77.610244,1004.039062,0.000000,0.000000,-269.890014,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2185,218.992279,82.434066,1004.038818,-0.100000,0.000000,-180.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1663,218.383789,81.444435,1004.469116,1.679999,0.000000,-175.710037,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1663,215.467025,78.362869,1004.484191,0.000000,1.200000,-90.000000,-1,-1,-1,MAX_RADIO_STREAM);*/

// ALBUSTOS AYUNTAMIENTO
	CreateDynamicObjectExULP(647,1496.361816,-1710.398193,14.546875,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(647,1496.243652,-1703.449707,14.446875,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(647,1496.157104,-1697.072143,14.546875,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(647,1495.955810,-1690.026733,14.746872,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(647,1460.558227,-1710.684692,14.646879,0.000000,0.000000,-35.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(647,1460.169433,-1704.035766,14.746874,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(647,1460.411621,-1697.508789,14.746874,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(647,1460.482788,-1690.206665,14.646874,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(647,1475.534912,-1665.953857,14.553216,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(647,1484.428222,-1665.787475,14.853218,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);

//=======================================================================================
//=======================================================================================
// PEAJE TUNEL LS-SF (Exterior)
	CreateDynamicObjectExULP(3881, 21.725189208984, -1337.69921875, 10.884397506714, 0, 0, 127.99624633789, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1229, 0.81767272949219, -1350.5227050781, 11.182644844055, 0, 358, 326, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1229, 29.807426452637, -1305.7475585938, 13.680694580078, 0, 0, 137.99819946289, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(966, 5.8136596679688, -1318.0822753906, 10.491556167603, 0, 0, 308, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3881, 8.0947265625, -1319.5322265625, 12.374582290649, 2, 0, 307.99072265625, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(966, 24.058776855469, -1339.3756103516, 9.0782928466797, 0, 0, 127, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237, 1.1815948486328, -1312.3275146484, 10.625079154968, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237, 0.63788604736328, -1311.6704101563, 10.62234210968, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237, 7.8622055053711, -1323.7741699219, 10.51996421814, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237, 8.9713439941406, -1325.1451416016, 10.524433135986, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237, 8.4533996582031, -1324.4155273438, 10.525453567505, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237, 12.862800598145, -1319.7994384766, 10.892798423767, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237, 13.341445922852, -1320.4438476563, 10.892894744873, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237, 13.875946044922, -1321.0935058594, 10.895431518555, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237, 21.994239807129, -1333.2845458984, 9.296199798584, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237, 21.4658203125, -1332.6513671875, 9.2857971191406, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237, 20.924598693848, -1331.9898681641, 9.2833709716797, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237, 16.800422668457, -1337.3845214844, 9.1594905853271, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237, 16.252136230469, -1336.7543945313, 9.1571731567383, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237, 15.767974853516, -1336.1346435547, 9.1540622711182, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(638, 4.6870498657227, -1321.0655517578, 11.051753044128, 0, 0, 37.997192382813, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(638, 25.096939086914, -1336.2210693359, 9.8576593399048, 0, 0, 38, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(646, 12.970481872559, -1318.7416992188, 12.179617881775, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(646, 10.357467651367, -1315.0864257813, 12.215191841125, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(646, 11.637405395508, -1316.7788085938, 12.200326919556, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(646, 19.141761779785, -1341.8201904297, 10.481678009033, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(646, 16.424407958984, -1338.3818359375, 10.577231407166, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(646, 17.670070648193, -1339.9815673828, 10.537045478821, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237, 28.550834655762, -1345.267578125, 9.2166137695313, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237, 29.104434967041, -1346.00390625, 9.2180452346802, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);

	// CASA BUG WILLY 1-5-2011
	CreateDynamicObjectExULP(980,458.83056640625,511.44879150391,1003.1928710938,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(980,453.1416015625,505.51315307617,1003.1928710938,0,0,270, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(980,442.45001220703,508.5,1003.1928710938,0,0,270, -1, -1, -1, MAX_RADIO_STREAM);

	// Peaje SF segunda parte. (Exterior)
	CreateDynamicObjectExULP(3512,-1807.288940,-565.044372,14.772957,2.500000,0.100000,142.600036,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3512,-1796.270141,-564.775085,15.135938,0.000000,0.000000,185.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3512,-1786.097778,-564.944946,15.335949,0.000000,0.000000,-179.890014,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3512,-1776.341308,-564.976196,15.025930,-0.100000,0.000000,-180.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3512,-1806.991821,-595.136108,15.333843,-0.100000,0.000000,-355.800048,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3512,-1776.374145,-595.055969,15.014341,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3512,-1796.064208,-595.140747,15.266344,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3512,-1786.323852,-595.143005,15.289156,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3512,-1829.222045,-595.235717,15.485933,0.099999,0.000000,-0.200000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3512,-1841.366088,-595.353149,18.134471,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3512,-1853.167480,-595.198364,20.320365,0.000000,0.000000,20.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3512,-1866.774169,-595.183044,22.795808,0.000000,0.000000,10.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3512,-1829.533813,-564.717163,15.450329,0.000000,0.000000,-169.990005,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3512,-1842.357910,-564.784545,18.037948,0.000000,0.000000,-170.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3512,-1866.210693,-564.681152,22.782173,0.019998,-0.009998,-170.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3512,-1853.807373,-564.632263,20.866249,0.000000,0.009998,-180.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3512,-1808.151489,-554.086608,14.988426,0.000000,0.000000,70.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3512,-1828.740234,-607.135131,15.485115,0.000000,0.000000,-97.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3512,-1830.299804,-554.086242,14.863436,0.000000,0.000000,-60.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3512,-1828.465820,-618.333190,15.637722,0.000000,0.000000,-101.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3512,-1809.508178,-544.486206,14.623051,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3512,-1831.618164,-544.486267,14.668955,0.000000,0.000000,-70.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3512,-1828.104003,-628.938232,15.810362,0.000000,0.000000,-80.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3512,-1806.991821,-607.135131,15.430706,0.000000,0.000000,100.040008,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3512,-1806.991088,-617.812316,15.495907,0.000000,0.000000,100.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3512,-1806.991210,-628.938781,15.870945,-1.000000,-0.300000,79.700004,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13640,-1751.605590,-705.459655,26.239706,-1.059998,-9.029978,-63.389858,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13640,-1756.967651,-708.122436,26.375986,-1.500000,-8.729998,-64.809928,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-1752.835693,-674.303894,25.930097,-3.599998,0.000000,4.099998,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-1769.772338,-675.065917,26.072746,3.000000,-0.200000,183.499969,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-1769.035766,-686.239624,27.718904,0.500020,0.999998,-171.620117,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-1752.290527,-683.768859,27.313936,0.000000,0.000000,9.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-1750.546020,-692.530090,28.927730,-2.000000,-1.000000,19.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-1766.332885,-698.618103,29.586671,2.900000,0.000000,200.899993,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-1747.967895,-702.537475,31.210563,-4.000000,0.000000,26.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-1762.455322,-709.418701,31.464319,4.500000,-0.299997,-153.090042,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1216,-1772.335693,-591.460388,16.135936,0.000000,-0.009999,-90.600006,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3863,-1740.162841,-568.766723,16.635938,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3862,-1735.316894,-568.750366,16.635938,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(966,-1759.822387,-658.516967,19.700702,3.100000,2.100000,-182.100006,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1341,-1733.520751,-591.238281,16.395324,-0.100000,-0.000000,-270.100006,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(966,-1761.518066,-658.625671,19.533575,-8.600000,2.000000,-0.900000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1250,-1759.564697,-658.349487,20.464641,-1.000000,4.400000,86.099983,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1250,-1762.313476,-658.651977,20.462463,-2.099999,-7.399999,-97.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1278,-1761.160522,-661.169189,10.152952,-2.119999,0.019999,-2.890020,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(689,-1782.079467,-668.098022,22.252614,4.800000,-2.000000,-189.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(683,-1787.410278,-648.303344,19.924051,0.510000,1.599999,-435.800048,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4100,-1731.937377,-750.672546,36.584953,-0.599999,0.600000,4.099999,-1,-1,-1,MAX_RADIO_STREAM);

// PEAJE SF (Exterior)
	CreateDynamicObjectExULP(4100,-1761.276733,-709.357849,29.065689,174.899276,893.901367,-286.697875,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(690,-1790.693359,-682.899291,19.724456,0.200000,0.000000,27.199951,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(9623,-1760.566772,-658.931396,22.545537,-7.269996,-0.319999,-361.540191,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(683,-1795.819213,-655.490844,20.392150,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(690,-1778.964233,-639.420593,17.294948,0.000000,0.000000,625.080139,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4100,-1747.408325,-703.278991,28.935468,-187.169998,-186.380004,-286.750122,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4100,-1751.466064,-689.693176,26.330606,-9.455986,6.595993,61.900115,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4100,-1765.752685,-696.392395,26.967699,6.599997,-6.499997,-114.299964,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4100,-1768.564331,-682.444824,24.692520,-7.799986,4.899998,58.399948,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4100,-1752.645751,-676.150878,23.876680,-9.000000,4.899999,-309.500030,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1360,-1770.014282,-674.625549,22.864875,-7.899997,4.099996,3.609998,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1361,-1769.984497,-672.340881,22.541616,3.589920,-8.599974,-145.700012,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1360,-1769.865356,-670.023071,22.198516,-7.500000,4.000000,-362.799224,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,-1752.282714,-666.517944,21.666206,367.999603,3.799436,175.149291,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,-1769.719360,-665.449584,21.598058,-6.699998,-1.000000,-2.489896,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-1755.420898,-605.391906,19.384372,0.000000,0.000000,-361.399902,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-1768.171997,-604.605895,19.252986,0.400001,-1.400009,-183.069900,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-1754.196777,-618.606933,20.021398,-0.500000,0.000000,-1.799865,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-1768.311523,-618.626403,19.855361,0.220001,-1.300000,180.409988,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-1767.969482,-630.605041,20.967771,179.119857,178.999908,-0.089996,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-1753.818969,-630.645568,20.836133,0.000000,0.000000,1.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-1753.864257,-645.164489,22.188409,0.000000,-1.000000,-2.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,-1767.699218,-643.656250,22.062906,0.000000,0.000000,175.100006,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1425,-1760.717651,-648.318725,18.793287,1.500000,0.099999,178.599853,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1425,-1761.397827,-669.678283,21.588069,-6.849999,0.400000,-2.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1278,-1761.160522,-661.169189,10.152952,-2.119999,0.019999,-2.890020,-1,-1,-1,MAX_RADIO_STREAM);

// HOSPITAL AMBULANCIAS ( Exterior parking)
	CreateDynamicObjectExULP(1237,-2599.069824,680.260925,26.830001,180.699478,899.701171,-631.998046,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(966,-2599.373046,688.208129,26.816198,0.200000,0.000000,93.099937,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237,-2599.093505,678.864379,26.806203,-0.500000,-0.000000,-270.600036,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237,-2597.821289,690.853637,26.812500,0.000000,0.000000,90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(967,-2598.267089,689.406799,26.812500,0.000000,0.000000,-177.499969,-1,-1,-1,MAX_RADIO_STREAM);

// CNN VAN INTERIOR
	CreateDynamicObjectExULP(14393,2649.9631347656,1887.6120605469,20.049999237061,0,0,0, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14393,2636.3525390625,1887.5920410156,19.879999160767,0,0,0, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14393,2639.6652832031,1889.7932128906,20.04276657104,0,0,0, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14393,2639.6999511719,1889.79296875,19.700000762939,0,0,0, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14393,2640.7272949219,1895.3812255859,20.04700088501,0,0,90, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1714,2643.2727050781,1890.669921875,17.815660476685,0,0,180.32763671875, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1714,2641.8029785156,1890.240234375,17.815660476685,0,0,351.81011962891, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1714,2643.9079589844,1889.2583007813,17.815660476685,0,0,125.1379699707, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1714,2642.6516113281,1889.2415771484,17.815660476685,0,0,276.24536132813, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3051,2643.8872070313,1886.6793212891,18.590000152588,0,0,316.5, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3051,2642.7033691406,1886.6772460938,18.590000152588,0,0,136.24862670898, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2852,2641.5368652344,1888.6566162109,18.645624160767,0,0,183.6918182373,-1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2102,2641.6433105469,1887.2696533203,18.645624160767,0,0,141.05816650391,-1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1667,2641.3933105469,1889.3148193359,18.734203338623,0,0,0,-1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1665,2641.8869628906,1889.3237304688,18.659999847412,0,0,0,-1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1486,2641.3386230469,1888.6214599609,18.790573120117,0,0,0,-1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1955,2641.8837890625,1888.9328613281,18.657318115234,0,0,237.75723266602,-1, 3, -1, MAX_RADIO_STREAM);

// AMBULANCE INTERIOR
	CreateDynamicObjectExULP(18082,2453.443359375,1845.6177978516,17.58194732666,0,0,0,-1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(18082,2451.1811523438,1850.7144775391,16.071947097778,0,0,180,-1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(18082,2450.9826660156,1850.8326416016,16.871946334839,0,0,179.9945068359,-1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1997,2452.4633789063,1848.4527587891,15.32413482666,0,0,0,-1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3051,2451.8195800781,1845.3190917969,16.39999961853,0,0,315.77551269531,-1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(932,2450.9755859375,1846.9056396484,15.32413482666,0,0,38.705078125,-1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3051,2452.998046875,1845.3190917969,16.39999961853,0,0,137.10705566406,-1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3396,2452.357421875,1850.3658447266,15.32413482666,0,0,90.538818359375,-1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3391,2451.0024414063,1849.1940917969,15.32413482666,0,0,180.2184753418,-1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3389,2454.1586914063,1848.6092529297,15.32413482666,0,0,0,-1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3389,2454.1586914063,1847.6340332031,15.32413482666,0,0,0,-1, 3, -1, MAX_RADIO_STREAM);

//  PUERTA DE LA CASA BUG GROOVE
	CreateDynamicObjectExULP(1498,2401.76562500,-1714.42370600,13.14058300,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);

//  ISLA SF PESCAR
	CreateDynamicObjectExULP(12937,-1506.9443359375,1374.8447265625,4.5,0,0,196.07299804688, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11496,-1508.01953125,1384.6611328125,1.3999999761581,0,0,12.755126953125, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11496,-1506.0627441406,1385.1495361328,1.3700000047684,0,0,192.75, -1, -1, -1, MAX_RADIO_STREAM);

// IGLESIA SF (Interior)
	CreateDynamicObjectExULP(14853,1903.4072265625,1197.6318359375,18.10000038147,0,0,0, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14853,1952.92578125,1220.3994140625,18,0,0,180, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3499,1928,1216.1171875,20.60000038147,0,0,0, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3499,1928,1201.873046875,20.60000038147,0,0,0, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3499,1924,1216.1171875,20.60000038147,0,0,0, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3499,1924,1201.873046875,20.60000038147,0,0,0, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3499,1920,1216.1171875,20.60000038147,0,0,0, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3499,1920,1201.873046875,20.60000038147,0,0,0, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3499,1932,1216.1171875,20.60000038147,0,0,0, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3499,1932,1201.873046875,20.60000038147,0,0,0, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14394,1936.5,1209.099609375,17.389999389648,0,0,0, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14394,1936.5,1217.0380859375,17.389999389648,0,0,0, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14394,1936.5,1201.1533203125,17.389999389648,0,0,0, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5773,1967.3176269531,1194.9034423828,15.699999809265,0,0,0, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1739,1939.3485107422,1208.66015625,19.102350234985,0,0,0, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2120,1939.7520751953,1207.3465576172,18.846416473389,0,0,0, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2120,1939.7520751953,1210.0811767578,18.846506118774,0,0,0, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2442,1938.3646240234,1207.2391357422,18.211030960083,0,0,90, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2442,1937.9206542969,1209.6624755859,18.211790084839,0,0,0, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2441,1937.771484375,1208.662109375,18.211776733398,0,0,90, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2726,1937.6712646484,1209.1719970703,19.611392974854,0,0,0, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1667,1937.8326416016,1208.2370605469,19.355924606323,0,0,0, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1754,1932.0441894531,1204.4554443359,17.10000038147,0,0,90, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1754,1932.0441894531,1205.4262695313,17.10000038147,0,0,90, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1754,1932.0441894531,1206.3937988281,17.10000038147,0,0,90, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1754,1932.0441894531,1207.3503417969,17.10000038147,0,0,90, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1754,1932.0441894531,1212.5148925781,17.10000038147,0,0,90, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1754,1932.0441894531,1211.5405273438,17.10000038147,0,0,90, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1754,1932.0441894531,1210.5593261719,17.10000038147,0,0,90, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1754,1932.0441894531,1213.4838867188,17.10000038147,0,0,90, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1754,1930.0441894531,1204.4554443359,17.10000038147,0,0,90, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1754,1930.0441894531,1205.4262695313,17.10000038147,0,0,90, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1754,1930.0441894531,1206.3937988281,17.10000038147,0,0,90, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1754,1930.0441894531,1207.3503417969,17.10000038147,0,0,90, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1754,1930.0441894531,1212.5148925781,17.10000038147,0,0,90, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1754,1930.0441894531,1211.5405273438,17.10000038147,0,0,90, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1754,1930.0441894531,1210.5593261719,17.10000038147,0,0,90, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1754,1930.0441894531,1213.4838867188,17.10000038147,0,0,90, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1754,1928.0441894531,1204.4554443359,17.10000038147,0,0,90, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1754,1928.0441894531,1205.4262695313,17.10000038147,0,0,90, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1754,1928.0441894531,1206.3937988281,17.10000038147,0,0,90, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1754,1928.0441894531,1207.3503417969,17.10000038147,0,0,90, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1754,1928.0441894531,1212.5148925781,17.10000038147,0,0,90, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1754,1928.0441894531,1211.5405273438,17.10000038147,0,0,90, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1754,1928.0441894531,1210.5593261719,17.10000038147,0,0,90, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1754,1928.0441894531,1213.4838867188,17.10000038147,0,0,90, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1754,1926.0441894531,1204.4554443359,17.10000038147,0,0,90, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1754,1926.0441894531,1205.4262695313,17.10000038147,0,0,90, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1754,1926.0441894531,1206.3937988281,17.10000038147,0,0,90, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1754,1926.0441894531,1207.3503417969,17.10000038147,0,0,90, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1754,1926.0441894531,1212.5148925781,17.10000038147,0,0,90, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1754,1926.0441894531,1211.5405273438,17.10000038147,0,0,90, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1754,1926.0441894531,1210.5593261719,17.10000038147,0,0,90, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1754,1926.0441894531,1213.4838867188,17.10000038147,0,0,90, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1754,1924.0441894531,1204.4554443359,17.10000038147,0,0,90, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1754,1924.0441894531,1205.4262695313,17.10000038147,0,0,90, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1754,1924.0441894531,1206.3937988281,17.10000038147,0,0,90, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1754,1924.0441894531,1207.3503417969,17.10000038147,0,0,90, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1754,1924.0441894531,1212.5148925781,17.10000038147,0,0,90, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1754,1924.0441894531,1211.5405273438,17.10000038147,0,0,90, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1754,1924.0441894531,1210.5593261719,17.10000038147,0,0,90, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1754,1924.0441894531,1213.4838867188,17.10000038147,0,0,90, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1754,1922.0441894531,1204.4554443359,17.10000038147,0,0,90, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1754,1922.0441894531,1205.4262695313,17.10000038147,0,0,90, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1754,1922.0441894531,1206.3937988281,17.10000038147,0,0,90, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1754,1922.0441894531,1207.3503417969,17.10000038147,0,0,90, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1754,1922.0441894531,1212.5148925781,17.10000038147,0,0,90, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1754,1922.0441894531,1211.5405273438,17.10000038147,0,0,90, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1754,1922.0441894531,1210.5593261719,17.10000038147,0,0,90, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1754,1922.0441894531,1213.4838867188,17.10000038147,0,0,90, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2894,1937.8238525391,1208.6513671875,19.267345428467,0,0,90.859191894531, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3089,1936.3873291016,1218.7611083984,18.429002761841,0,0,179.69781494141, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3089,1933.3990478516,1218.765625,18.429002761841,0,0,0.29998779296875, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3089,1919.9990234375,1199.2700195313,18.429002761841,0,0,0, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3089,1922.9827880859,1199.2689208984,18.429002761841,0,0,180.1, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(801,1916.3299560547,1199.8752441406,17.60000038147,0,0,0, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(801,1916.0893554688,1200.5014648438,17.60000038147,0,0,12.75, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(998,1941.2232666016,1209.5679931641,21.08664894104,0,0,0, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(998,1949.8212890625,1207.8673095703,21.08664894104,0,0,180.75, -1, 6, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,1941.4509277344,1208.6325683594,22,0,90,180, -1, 6, -1, MAX_RADIO_STREAM);

// LCN (Cercado) (Exterior)
	CreateDynamicObjectExULP(8674,1110.8353271484,-2339.3225097656,13.377661705017,0,0,322.23065185547, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1102.5457763672,-2332.8779296875,13.377661705017,0,0,322.22900390625, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1094.900390625,-2325.8193359375,13.377661705017,0,0,312.47900390625, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1088.5720214844,-2317.5129394531,13.377661705017,0,0,302.72863769531, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1120.3653564453,-2344.68359375,13.377661705017,0,0,335.72900390625, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1130.2895507813,-2347.51953125,13.377661705017,0,0,354.47570800781, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1140.7896728516,-2347.2353515625,13.377661705017,0,0,7.2191162109375, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1151.0502929688,-2345.2016601563,13.377661705017,0,0,16.219116210938, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1161.0389404297,-2342.2553710938,13.377661705017,0,0,16.2158203125, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1170.5422363281,-2337.9760742188,13.377661705017,0,0,32.235229492188, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1179.0318603516,-2331.9233398438,13.377661705017,0,0,38.98388671875, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1187.353515625,-2325.6657714844,13.377661705017,0,0,34.478393554688, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1195.9538574219,-2319.7485351563,13.377661705017,0,0,34.47509765625, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1203.7453613281,-2310.1704101563,13.377661705017,0,0,68.225067138672, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1207.6455078125,-2300.4340820313,13.377661705017,0,0,68.219604492188, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1211.5401611328,-2290.7121582031,13.377661705017,0,0,68.219604492188, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1214.3940429688,-2280.7199707031,13.377661705017,0,0,79.469604492188, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1538.9934082031,-2094.6040039063,25.982540130615,0,0,115.75103759766, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1534.951171875,-2084.9877929688,25.982540130615,0,0,108.99645996094, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1531.5281982422,-2075.1179199219,25.982540130615,0,0,108.99536132813, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1530.1862792969,-2064.9777832031,25.982540130615,0,0,85.745361328125, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1521.0500488281,-2029.5808105469,28.5,0,354.74816894531,272.29943847656, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1520.4782714844,-2019.2365722656,27.540000915527,0,354.74816894531,273.98999023438, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1520.1702880859,-2008.9154052734,26.579999923706,0,354.74816894531,269.29577636719, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1520.2116699219,-1998.5620117188,25.629999160767,0,354.74304199219,270.04138183594, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1520.2032470703,-1988.1998291016,24.670000076294,0,354.74304199219,270.04138183594, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1519.7470703125,-1977.9083251953,23.719999313354,0,354.74304199219,275.29138183594, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1519.1413574219,-1967.5888671875,22.780000686646,0,354.74304199219,271.53845214844, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1518.7845458984,-1957.2972412109,21.829999923706,0,354.74304199219,271.5380859375, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8674,1519.2318115234,-1946.9848632813,20.870000839233,0,354.74304199219,263.2880859375, -1, -1, -1, MAX_RADIO_STREAM);

// OFICINA DEL GOBIERNO (Interior)
	CreateDynamicObjectExULP(14420,1858.9052734375,1398.3310546875,19.177722930908,0,0,270, -1, 7, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1857.5992431641,1413.0678710938,15.922342300415,0,0,0, -1, 7, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1860.5759277344,1413.0836181641,15.922342300415,0,0,179.99450683594, -1, 7, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1857.3385009766,1428.3298339844,15.922342300415,0,0,270, -1, 7, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1857.3411865234,1425.3218994141,15.922342300415,0,0,90, -1, 7, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1702,1857.8725585938,1421.9262695313,15.922342300415,0,0,90, -1, 7, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1702,1857.8725585938,1419.9020996094,15.922342300415,0,0,90, -1, 7, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1702,1857.8725585938,1417.8061523438,15.922342300415,0,0,90, -1, 7, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14458,1861.2807617188,1422.2591552734,16.882389068604,0,0,0, -1, 7, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1828,1860.4426269531,1426.7674560547,15.922342300415,0,0,0, -1, 7, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1828,1860.2758789063,1416.2653808594,15.922342300415,0,0,0, -1, 7, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2894,1861.7655029297,1420.6452636719,16.700000762939,0,0,134.65405273438, -1, 7, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1964,1862.2333984375,1420.1701660156,16.85000038147,0,0,323.59582519531, -1, 7, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2827,1861.2816162109,1421.5148925781,16.700000762939,0,0,269.59588623047, -1, 7, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2207,1861.2264404297,1422.1999511719,15.922342300415,0,0,270, -1, 7, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1827,1862.7585449219,1415.7071533203,15.922342300415,0,0,0, -1, 7, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2828,1862.0480957031,1422.2175292969,16.699714660645,0,0,194.67236328125, -1, 7, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(989,1862.6431884766,1428.931640625,17.743148803711,0,0,286.41625976563, -1, 7, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(989,1857.1682128906,1428.931640625,17.743148803711,0,0,286.41357421875, -1, 7, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(989,1857.3337402344,1426.0709228516,17.743148803711,0,0,196.78497314453, -1, 7, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(989,1857.3337402344,1420.658203125,17.743148803711,0,0,196.78161621094, -1, 7, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(989,1857.3337402344,1415.8581542969,17.743148803711,0,0,196.78161621094, -1, 7, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(989,1862.8686523438,1413.0131835938,17.743148803711,0,0,286.41357421875, -1, 7, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(989,1857.4526367188,1413.0131835938,17.743148803711,0,0,286.41357421875, -1, 7, -1, MAX_RADIO_STREAM);

// PUERTA AZOTEA (Exterior)
	CreateDynamicObjectExULP(1569,1438.2907714844,-1784.845703125,32.4296875,0,0,270, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1438.2907714844,-1787.8103027344,32.4296875,0,0,90, -1, -1, -1, MAX_RADIO_STREAM);

// PUERTA OFICINA (Interior)
	CreateDynamicObjectExULP(1569,368.92221069336,208.49493408203,1007.3828125,0,0,269.75610351563, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,368.92221069336,205.49111938477,1007.3828125,0,0,90, -1, -1, -1, MAX_RADIO_STREAM);

// TRAFICANTES (Exterior)
	CreateDynamicObjectExULP(12925,-471.59433000,-197.26675400,76.81495700,0,0,180.85945654,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3419,-536.01202400,-47.71782700,61.39176600,0,0,89.99998128,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3419,-484.33248900,-59.96513400,59.39541600,-1.71887339,0,270.00000112,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(12915,-493.40463300,-202.60586500,76.95048500,0,0,180.00001985,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(791,-531.24108900,-223.80587800,65.34308600,0,0,101.24995029,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(791,-482.82931500,-228.36018400,64.41898300,0,0,33.75002163,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(790,-508.45352200,-214.48323100,78.41715200,0,0,22.49999532,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(790,-576.49932900,-215.05943300,72.37044500,0,0,22.49999532,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(790,-548.11511200,-210.73353600,79.64233400,0,0,-56.25001695,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(791,-602.72949200,-212.98216200,63.51859300,0,0,89.99998128,-1, -1, -1, MAX_RADIO_STREAM);

/// Sala de Espera (Interior)
	CreateDynamicObjectExULP(14675,2807.4228515625,2453.5625,28.39999961853,0,0,179.99450683594, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14675,2835.4638671875,2469.3876953125,28.301023483276,0,0,0.252685546875, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14444,2822.2666015625,2475.818359375,17,0,0,268.8134765625, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1705,2825.251953125,2453.9990234375,17.424934387207,0,0,180, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1705,2824.1279296875,2453.9990234375,17.424934387207,0,0,180, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1705,2821.8681640625,2453.9990234375,17.424934387207,0,0,180, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1705,2820.724609375,2453.9990234375,17.424934387207,0,0,180, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1705,2825.251953125,2455.9990234375,17.424934387207,0,0,180, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1705,2824.1279296875,2455.9990234375,17.424934387207,0,0,180, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1705,2821.8681640625,2455.9990234375,17.424934387207,0,0,180, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1705,2820.724609375,2455.9990234375,17.424934387207,0,0,180, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1705,2825.251953125,2457.9990234375,17.424934387207,0,0,180, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1705,2824.1279296875,2457.9990234375,17.424934387207,0,0,180, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1705,2821.8681640625,2457.9990234375,17.424934387207,0,0,180, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1705,2820.724609375,2457.9990234375,17.424934387207,0,0,180, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1705,2825.251953125,2459.9990234375,17.424934387207,0,0,180, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1705,2824.1279296875,2459.9990234375,17.424934387207,0,0,180, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1705,2821.8681640625,2459.9990234375,17.424934387207,0,0,180, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1705,2820.724609375,2459.9990234375,17.424934387207,0,0,180, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1714,2820.75,2469.1689453125,17.42343711853,0,0,80.948974609375, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1714,2819.9216308594,2467.8864746094,17.42343711853,0,0,4.0431823730469, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1714,2817.9211425781,2468.0810546875,17.42343711853,0,0,1.79296875, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14633,2831.759765625,2499.7724609375,18.989999771118,0,0,0, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,2826.9921875,2467.2258300781,17.42343711853,0,0,270.64080810547, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,2827.0478515625,2464.2229003906,17.423633575439,0,0,91.194244384766, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,2815.9025878906,2458.6608886719,17.426500320435,0,0,270.63720703125, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,2815.9318847656,2455.669921875,17.426494598389,0,0,90.604370117188, -1, 11, -1, MAX_RADIO_STREAM);

	/// Consultorio (Interior)
	CreateDynamicObjectExULP(18082,2801.2275390625,2517.4711914063,11.931602478027,0,0,0, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14813,2800.5307617188,2519.2016601563,10.131404876709,0,0,0, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(18082,2801.1586914063,2517.6677246094,11.831602096558,0,0,180, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,2800.9406738281,2523.0554199219,9.673789978027,0,0,0, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,2803.9460449219,2523.0578613281,9.673789978027,0,0,179.64691162109, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1714,2802.8740234375,2516.2365722656,9.673789978027,0,0,186.35308837891, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1997,2802.751953125,2512.7368164063,9.673789978027,0,0,268.15411376953, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2207,2803.8276367188,2517.6496582031,9.673789978027,0,0,180, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2854,2802.845703125,2517.4311523438,10.451162338257,0,0,38.1552734375, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2828,2803.7971191406,2517.2580566406,10.451162338257,0,0,121.28875732422, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2190,2802.1394042969,2517.4997558594,10.451162338257,0,0,32.25, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14593,2802.673828125,2521.4189453125,11.995000839233,0,0,90, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(18082,2801.4216308594,2517.498046875,11.60000038147,0,0,0, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,2802.7536621094,2514.8569335938,11.337617874146,0,0,0, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,2802.7424316406,2514.9311523438,11.337617874146,0,0,180.12756347656, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1826,2803.9001464844,2513.8732910156,9.671875,0,0,0, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2343,2802.623046875,2514.0080566406,10.249250411987,0,0,265.23059082031, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2853,2799.0339355469,2513.5031738281,10.162134170532,0,0,16.5, -1, 11, -1, MAX_RADIO_STREAM);

/// VENTANAS SFPD INTERIOR
	CreateDynamicObjectExULP(1649,250.78608703613,119.64482879639,1004.7707519531,0,0,0, -1, 10, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,253.04054260254,117.67024230957,1004.7707519531,0,0,270, -1, 10, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,253.11514282227,117.65293121338,1004.7707519531,0,0,90, -1, 10, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,246.36213684082,119.64482879639,1004.7707519531,0,0,0, -1, 10, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,241.9359588623,119.64482879639,1004.7707519531,0,0,0, -1, 10, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,241.93727111816,119.41951751709,1004.7707519531,0,0,180, -1, 10, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,246.37100219727,119.41951751709,1004.7707519531,0,0,180, -1, 10, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,250.77328491211,119.41951751709,1004.7707519531,0,0,180, -1, 10, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,239.6056060791,112.29708099365,1004.7707519531,0,0,270, -1, 10, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,239.75480651855,112.33076477051,1004.7707519531,0,0,90, -1, 10, -1, MAX_RADIO_STREAM);

//  OFICINA NFS Grotti (Interior)
	CreateDynamicObjectExULP(14593,2272.5808105469,1320.2121582031,12.14847278595,0,0,0, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(15031,2297.04296875,1306.115234375,9.8203125,0,0,0, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1567,2279.0141601563,1306.6773681641,9.8203477859497,0,0,180, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1567,2295.888671875,1303.01953125,9.8203125,0,0,270, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14593,2268.8427734375,1302.400390625,12.04847240448,0,0,91.532653808594, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2737,2276.6389160156,1308.5565185547,11.548453330994,0,0,90, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2066,2277.037109375,1309.7857666016,9.8203477859497,0,0,90, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2066,2277.037109375,1310.3792724609,9.8203477859497,0,0,90, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2266,2281.0810546875,1309.0568847656,11.444146156311,0,0,270.18579101563, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2309,2281.0344238281,1307.5859375,9.8203477859497,0,0,7.5, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1998,2280.1459960938,1307.7370605469,9.8203477859497,0,0,0, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2309,2280.9189453125,1309.8940429688,9.8203477859497,0,0,166.62561035156, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2309,2279.9594726563,1309.8791503906,9.8203477859497,0,0,195.87414550781, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2309,2276.8959960938,1307.7700195313,9.8203477859497,0,0,270, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2309,2276.8959960938,1308.3155517578,9.8203477859497,0,0,270, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2309,2276.8959960938,1308.8520507813,9.8203477859497,0,0,270, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2164,2277.8781738281,1311.55078125,9.8203125,0,0,0, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2828,2279.9892578125,1307.9141845703,10.63284778595,0,0,252.82650756836, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2827,2280.28125,1308.8470458984,10.63284778595,0,0,0, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2528,2294.7412109375,1304.6787109375,9.8203125,0,0,0, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2523,2294.904296875,1304.556640625,9.8203125,0,0,0, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2519,2293.3955078125,1301.8930664063,9.8203125,0,0,89.628601074219, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2528,2293.8999023438,1304.6787109375,9.8203125,0,0,0, -1, 3, -1, MAX_RADIO_STREAM);


//  Estacionamiento para bicicletas SF (Exterior)
	CreateDynamicObjectExULP(970,-2033.61596700,474.12966900,34.72377400,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,-2029.45690900,474.13409400,34.72377400,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,-2025.30004900,474.13549800,34.72377400,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,-2021.13342300,474.13952600,34.72377000,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,-2035.68994100,472.06939700,34.72377000,0,0,-89.99998128,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,-2033.60693400,472.05923500,34.72377000,0,0,-89.99998128,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,-2031.54199200,472.06558200,34.72377400,0,0,-89.99998128,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,-2029.44641100,472.04705800,34.72377000,0,0,-89.99998128,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,-2027.37158200,472.05230700,34.72377400,0,0,-89.99998128,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,-2025.30432100,472.06304900,34.72377000,0,0,-89.99998128,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,-2023.21789600,472.05471800,34.72377000,0,0,-89.99998128,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,-2021.12854000,472.05423000,34.72377000,0,0,-89.99998128,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,-2019.05847200,472.05172700,34.72377400,0,0,-89.99998128,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(996,-2055.95605500,494.19073500,34.92063100,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(996,-2017.34423800,494.16973900,34.92063100,0,0,-180.00001985,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(996,-2025.51989700,494.16317700,34.92063100,0,0,180.00001985,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(996,-2033.70300300,494.16818200,34.92063100,0,0,180.00001985,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(996,-2016.69250500,493.48626700,34.92063100,0,0,-89.99998128,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(996,-2016.69616700,485.31781000,34.92063100,0,0,-89.99998128,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(996,-2016.68444800,477.14801000,34.92063100,0,0,270.00000112,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(994,-2016.66442900,454.20321700,34.27219400,0,0,89.99998128,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-2016.75048800,460.59249900,34.73619800,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-2016.75073200,469.49496500,34.73619800,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-2041.38793900,494.10641500,34.73619800,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-2048.31103500,494.10818500,34.73619800,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(744,-2023.92907700,483.04562400,33.50761400,0,0,-67.49998596,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(750,-2023.92810100,479.51925700,33.25750700,0,0,-11.25002631,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(7916,-2052.99218800,496.39248700,30.59705200,0,0,-44.99999064,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(744,-2026.80749500,486.06143200,34.38266800,0,0,-67.49998596,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(750,-2029.13147000,486.73107900,33.03249400,0,0,-11.25002631,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(745,-2025.95544400,479.47918700,32.39563800,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(745,-2029.00976600,479.50134300,32.09561900,0,0,-33.75002163,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(745,-2030.97082500,481.08966100,32.02061500,0,0,270.00000112,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(745,-2031.45068400,483.33773800,31.93908900,0,0,-89.99998128,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(745,-2030.37048300,486.46218900,32.09561900,0,0,33.75002163,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-2036.56494100,474.28305100,34.73619800,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-2036.58471700,492.87265000,34.73661400,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-2017.94677700,492.87356600,34.73619800,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-2017.95214800,474.29122900,34.73619800,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);

// PUERTA INTERIOR LICENCIEROS (Interior)
	CreateDynamicObjectExULP(1569,-2023.5158691406,-113.19999694824,1034.171875,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);

// ANTENA CNN (Exterior)
/*	CreateDynamicObjectExULP(16613,699.2333984375,-1358.0068359375,27.965076446533,0,0,179.40124511719, -1, -1, -1, MAX_RADIO_STREAM);*/

// PUERTA NFS INTERIOR (Interior)
	CreateDynamicObjectExULP(3089,1493.8311767578,1309.9599609375,1093.6112060547,0,0,0, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1536,1493.8149414063,1309.9799804688,1092.2982177734,0,0,0, -1, 3, -1, MAX_RADIO_STREAM);

// OFICINA DE LICENCIEROS (Interior)
/*	CreateDynamicObjectExULP(2202,1346.4703369141,1287.5086669922,9.82666015625,0,0,0, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(15031,1346.8671875,1287.984375,9.8203125,0,0,0, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14519,1349.7752685547,1287.8594970703,11.176866531372,0,0,0, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1714,1343.7448730469,1289.0100097656,9.8203125,0,0,100, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2009,1343.7860107422,1289.8812255859,9.8203125,0,0,270, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1347.9288330078,1290.4539794922,9.8203125,0,0,270, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2724,1345.853515625,1289.8052978516,10.367315292358,0,0,269.59594726563, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2724,1345.8802490234,1289.0938720703,10.367315292358,0,0,269.59350585938, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2813,1343.8013916016,1289.9742431641,10.625196456909,0,0,0, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2828,1344.7908935547,1289.8625488281,10.6328125,0,0,108.01818847656, -1, 11, -1, MAX_RADIO_STREAM);*/
	
// OFICINA DE LINCENCIEROS 9-10-2011 Nueva (Interior)
	CreateDynamicObjectExULP(15031,2261.014648,1012.637695,78.554687,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1738,2261.777343,1007.980590,79.209320,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1502,2259.915039,1008.009765,78.550003,0.000000,0.000000,90.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2207,2263.991210,1012.500000,78.554687,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1714,2264.904296,1013.686523,78.554687,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1723,2267.199218,1010.342773,78.554687,0.000000,0.000000,270.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,2260.534423,1009.668395,78.554687,0.000000,0.000000,90.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1808,2260.299804,1011.276367,78.554687,0.000000,0.000000,90.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1828,2264.325927,1009.827087,78.529899,0.000000,0.000000,4.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2186,2261.673583,1013.272766,78.554687,0.000000,0.000000,270.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2190,2265.303955,1012.395324,79.332061,0.000000,0.000000,180.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2332,2267.899902,1014.679992,79.017570,0.000000,0.000000,270.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2517,2259.199951,1010.099975,78.554687,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2528,2258.026367,1011.070678,78.554687,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2523,2257.899902,1008.948791,78.554687,0.000000,0.000000,90.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2815,2259.796142,1008.345458,78.554687,0.000000,0.000000,90.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2816,2264.708984,1012.513671,79.332061,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2828,2263.899414,1012.852539,79.332061,0.000000,0.000000,291.994628,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14527,2265.090820,1011.200195,79.400001,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310,2265.599121,1011.545837,79.053901,0.000000,0.000000,296.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310,2264.000976,1011.592773,79.053901,0.000000,0.000000,231.998291,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2289,2267.594238,1012.989990,80.300003,0.000000,0.000000,270.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2281,2262.699951,1012.299987,80.000000,0.000000,0.000000,90.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2276,2262.209960,1008.329101,80.300003,0.000000,0.000000,179.994506,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3934,-2027.998901,-110.847183,37.921875,0.000000,0.000000,90.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(630,2257.858398,1008.089843,79.579849,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,2263.269531,1007.750000,78.529998,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,2267.759765,1010.055664,78.529998,0.000000,0.000000,90.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2009,2259.051269,1013.430786,78.554687,0.000000,0.000000,180.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1714,2258.028320,1013.489990,78.554687,0.000000,0.000000,73.448974,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2828,2258.783203,1012.394958,79.359573,0.000000,0.000000,0.033447,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2816,2259.107421,1013.349426,79.359573,0.000000,0.000000,271.095886,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310,2260.393066,1012.452331,79.053901,0.000000,0.000000,346.056488,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310,2260.310546,1013.498901,79.053901,0.000000,0.000000,29.501831,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(630,2257.967529,1014.669006,79.579849,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2276,2259.734619,1012.274536,80.372695,0.000000,0.000000,179.994506,-1,3,-1,MAX_RADIO_STREAM);

// MAPEADO AUTOESCUELA (Exterior)
	CreateDynamicObjectExULP(11489,-2027.2976074219,-83.405609130859,34.515625,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(3525,-2032.1339111328,-86.072319030762,37.299999237061,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(3525,-2022.4515380859,-86.072319030762,37.299999237061,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(869,-2019.8962402344,-82.558837890625,34.965446472168,0,0,180, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(869,-2023.8937988281,-82.317314147949,34.965446472168,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(869,-2019.638671875,-85.733581542969,34.965446472168,0,0,180, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(869,-2022.8266601563,-85.5,34.965446472168,0,0,79.996948242188, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(869,-2026.0330810547,-85.58179473877,34.965446472168,0,0,353.99597167969, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(869,-2030.3107910156,-85.613746643066,34.965446472168,0,0,355.99499511719, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(869,-2034.7727050781,-85.589179992676,34.965446472168,0,0,177.99938964844, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(869,-2034.6226806641,-82.597091674805,34.965446472168,0,0,343.99548339844, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(869,-2030.61328125,-82.5966796875,34.965446472168,0,0,179.99450683594, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(869,-2027.4973144531,-82.699996948242,34.965446472168,0,0,258, -1, -1, -1, MAX_RADIO_STREAM_MIN);

	/// Teatro 1 (Interior)
	CreateDynamicObjectExULP(14623,1460.7373046875,1748.23046875,11.474744796753,0,0,0, -1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14606,1456.5693359375,1771.0458984375,14.598281860352,0,0,90, -1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14638,1454.6518554688,1769.0993652344,9.8762454986572,0,0,180, -1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,1454.654296875,1767.71875,11.548321723938,0,0,268.84094238281, -1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1557,1457.2900390625,1786.4654541016,9.9530515670776,0,0,0, -1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1557,1460.3199462891,1786.4691162109,9.9557552337646,0,0,180, -1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14638,1467.1899414063,1767.44921875,9.8125,0,0,359.25, -1, 15, -1, MAX_RADIO_STREAM);
	
	/// Teatro 2 (Interior)
	CreateDynamicObjectExULP(14623,1426.5721435547,1349.826171875,15.369256973267,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14623,1426.5341796875,1305.31640625,11.356925964355,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14623,1426.40625,1349.90625,15.371326446533,0,0,288.19885253906,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1428.02734375,1330.3000488281,9.8244514465332,0,0,9.75,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1430.9470214844,1330.7879638672,9.8244514465332,0,0,188.96472167969,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1557,1423.0633544922,1343.5727539063,9.8334884643555,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1557,1426.0964355469,1343.5786132813,9.8334884643555,0,0,180.26214599609,-1, 15, -1, MAX_RADIO_STREAM);
	
	/// Teatro Teatro (Interior)
	CreateObjectEx(4059,1124.3666992188,1544.6453857422,2.5,0,0,0, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14624,1095.8115234375,1538.32421875,10.825218200684,0,0,89.241943359375,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14624,1155.6044921875,1554.17578125,10.835218429565,0,0,269.50561523438,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1133.630859375,1556.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1134.7294921875,1556.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1132.5065917969,1556.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1131.4560546875,1556.68359375,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1124.7099609375,1556.7109375,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1123.5856933594,1556.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1122.4606933594,1556.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1121.3356933594,1556.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1120.2106933594,1556.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1119.0856933594,1556.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1117.9661865234,1556.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1133.630859375,1553.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1134.7294921875,1553.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1132.5065917969,1553.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1131.4560546875,1553.68359375,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1124.7099609375,1553.7109375,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1123.5856933594,1553.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1122.4606933594,1553.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1121.3356933594,1553.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1120.2106933594,1553.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1119.0856933594,1553.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1117.9661865234,1553.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1133.630859375,1550.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1134.7294921875,1550.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1132.5065917969,1550.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1131.4560546875,1550.68359375,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1124.7099609375,1550.7109375,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1123.5856933594,1550.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1122.4606933594,1550.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1121.3356933594,1550.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1120.2106933594,1550.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1119.0856933594,1550.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1117.9661865234,1550.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1133.630859375,1547.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1134.7294921875,1547.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1132.5065917969,1547.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1131.4560546875,1547.68359375,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1124.7099609375,1547.7109375,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1123.5856933594,1547.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1122.4606933594,1547.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1121.3356933594,1547.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1120.2106933594,1547.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1119.0856933594,1547.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1117.9661865234,1547.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1133.630859375,1544.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1134.7294921875,1544.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1132.5065917969,1544.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1131.4560546875,1544.68359375,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1124.7099609375,1544.7109375,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1123.5856933594,1544.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1122.4606933594,1544.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1121.3356933594,1544.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1120.2106933594,1544.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1119.0856933594,1544.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1117.9661865234,1544.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1133.630859375,1541.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1134.7294921875,1541.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1132.5065917969,1541.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1131.4560546875,1541.68359375,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1124.7099609375,1541.7109375,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1123.5856933594,1541.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1122.4606933594,1541.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1121.3356933594,1541.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1120.2106933594,1541.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1119.0856933594,1541.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1117.9661865234,1541.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14624,1095.8115234375,1538.32421875,10.825218200684,0,0,89.241943359375,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14624,1155.6044921875,1554.17578125,10.835218429565,0,0,269.50561523438,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1133.630859375,1556.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1134.7294921875,1556.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1132.5065917969,1556.7115478516,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1131.4560546875,1556.68359375,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1124.7099609375,1556.7109375,6.9992809295654,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14638,1114.9892578125,1571.5107421875,7.0061588287354,0,0,359.24743652344,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14624,1116.2490234375,1565.2666015625,11.590000152588,0,0,270.20874023438,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14638,1136.9202880859,1564.6203613281,7.0061588287354,0,0,179.25,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1136.1755371094,1536.2099609375,7.7540626525879,0,0,180,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1569,1133.173828125,1536.1999511719,7.7550940513611,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14624,1116.2502441406,1565.2646484375,10.730009078979,0,0,270.20874023438,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14616,1123.2312011719,1513.5529785156,11.286763191223,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14616,1123.2312011719,1509.1274414063,11.286763191223,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1723,1121.8101806641,1529.2697753906,7.7540626525879,0,0,135.51327514648,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1724,1125.5469970703,1529.8093261719,7.7540626525879,0,0,218.03161621094,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1704,1125.5596923828,1533.2155761719,7.7540626525879,0,0,280.41632080078,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1827,1123.0314941406,1531.8057861328,7.7540626525879,0,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2388,1128.6408691406,1538.294921875,9.3299999237061,180,0,0,-1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2388,1128.640625,1538.294921875,9.3006267547607,179.99450683594,0,0,-1, 15, -1, MAX_RADIO_STREAM);

// Estacionamiento para bicicletas y algo más (Exterior)
	CreateDynamicObjectExULP(970,1676.89294400,-1720.28356900,13.09835600,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,1674.80603000,-1718.18139600,13.09835600,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,1674.80932600,-1714.06054700,13.09835600,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,1674.80810500,-1709.89746100,13.09835600,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,1674.79895000,-1705.74951200,13.09020200,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,1676.87951700,-1703.67053200,13.09133300,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,1676.90515100,-1718.20312500,13.09835600,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,1676.89184600,-1716.11828600,13.09835600,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,1676.91296400,-1714.04492200,13.09835600,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,1676.89209000,-1711.99279800,13.09835600,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,1676.89794900,-1709.88525400,13.09835600,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,1676.90795900,-1707.83776900,13.09835600,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,1676.91381800,-1705.73693800,13.09835600,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1674.81018100,-1721.12121600,13.11119800,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1674.78076200,-1702.84423800,13.09924300,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(996,1700.17541500,-1722.32714800,13.30232300,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(996,1708.36608900,-1722.31408700,13.29563000,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(996,1699.52600100,-1714.76416000,13.29563000,0,0,-89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(996,1699.52380400,-1706.57617200,13.29563000,0,0,-89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(996,1699.51782200,-1683.95300300,13.29563000,0,0,-89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(996,1699.51220700,-1698.40441900,13.29563000,0,0,-89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(996,1736.99487300,-1722.28552200,13.29563000,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(996,1728.79638700,-1722.27929700,13.29563000,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(996,1744.46679700,-1721.56970200,13.28156600,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(996,1744.45935100,-1713.38256800,13.29563000,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(996,1744.47229000,-1705.20105000,13.29563000,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(996,1744.46643100,-1682.91809100,13.29563000,0,0,270.00000112, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1699.55883800,-1697.61523400,13.11119800,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1699.53430200,-1691.62939500,13.11119800,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1716.02185100,-1722.32397500,13.11119800,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1727.95788600,-1722.30114700,13.11119800,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1744.40075700,-1697.59729000,13.11119800,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1744.39941400,-1690.56958000,13.11119800,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);

// MUELLE SF (Exterior)
	CreateObjectEx(5184,-1466.53625500,725.81445300,19.39610700,0,0,89.99992398, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(982,-1470.09960900,660.90228300,1.10005500,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,-1450.88964800,660.90374800,1.05317800,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(982,-1470.04126000,790.72058100,1.09685000,0,0,-89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,-1450.86657700,790.72882100,1.04997500,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(17068,-1440.25793500,789.76672400,0.20846800,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(17068,-1440.24011200,776.75085400,0.20335700,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(17068,-1440.22814900,763.76001000,0.19325300,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(17068,-1440.24304200,750.77478000,0.18945600,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(17068,-1440.27990700,738.01977500,0.17868300,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(17068,-1440.18347200,724.99945100,0.19906400,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(17068,-1440.18627900,713.78857400,0.20164600,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(17068,-1440.24267600,702.57751500,0.18408400,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(12925,-1465.31799300,671.64312700,0.41130800,0,0,-89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3620,-1442.28588900,683.57476800,13.31563600,0,0,91.71885466, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8077,-1476.36486800,673.60211200,4.41463700,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,-1479.44189500,707.27648900,2.55623500,0,10.31324031,-89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,-1479.44812000,703.74157700,1.88082800,0,10.31324031,-89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,-1479.43884300,700.15301500,1.22841200,0,10.31324031,-89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1461,-1482.53283700,687.24401900,1.21450900,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(12925,-1473.13891600,730.01715100,0.41130800,0,0,180.00001985, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(12925,-1473.17102100,743.29974400,0.41130800,0,0,-180.00001985, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(7317,-1471.38793900,763.51135300,6.46606600,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-1468.70825200,679.87506100,0.97761900,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-1461.99145500,679.85241700,0.97761900,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-1464.83508300,726.68481400,0.97761900,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-1464.85009800,733.37548800,0.97761900,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-1464.82189900,739.98443600,0.97761900,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-1464.82202100,746.63128700,0.97761900,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-1444.21948200,790.61138900,0.97761900,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-1444.17187500,660.98889200,0.97761900,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5260,-1453.30847200,668.75470000,2.12381100,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3576,-1458.38354500,676.18450900,1.90596800,0,0,-180.00001985, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1231,-1455.96801800,728.48870800,2.91868800,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1231,-1455.97900400,754.07977300,2.96868800,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1231,-1455.96484400,702.87542700,2.96868800,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-1482.74353000,696.80316200,1.03031200,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-1429.44921900,790.52154500,0.96815100,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-1429.41723600,777.49780300,0.96304000,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-1429.41833500,764.48700000,0.95293600,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-1429.41345200,751.51709000,0.94913900,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-1429.46814000,738.75964400,0.93836600,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-1429.36926300,725.74151600,0.95874700,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-1429.35730000,714.52014200,0.96132900,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-1429.41687000,703.31231700,0.94376800,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);

//// PARKING Y ENTRADA AL TEATRO (Exterior)
	CreateDynamicObjectExULP(1319,-2200.6501464844,309.79763793945,34.669902801514,0,0,180, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1319,-2199.9235839844,309.79763793945,34.6640625,0,0,180, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1319,-2199.2136230469,309.79763793945,34.6640625,0,0,180, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(8042,-2199.115234375,310,39.700000762939,0,0,107, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(12930,-2160.4565429688,314.92001342773,33.400001525879,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(12930,-2238.4013671875,314.92001342773,33.400001525879,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2773,-2233.2126464844,249.19140625,34.837539672852,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2773,-2165.923828125,254.8642578125,34.844215393066,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2775,-2162.66015625,262.69921875,38,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1267,-2159.2531738281,306.82266235352,50.181880950928,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(4238,-2198.5,285.75,42.284984588623,0,0,210.5, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(4239,-2160.1000976563,306.79998779297,56.799999237061,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(4729,-2225.654296875,285.70126342773,42.254280090332,0,0,110, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(7910,-2173.302734375,285.2998046875,42.321296691895,0,0,179.99450683594, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(9527,-2199.0283203125,285.70126342773,48.075229644775,0,0,179.99450683594, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(16002,-2259.55078125,251.9285736084,34.3203125,0,0,179.99450683594, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(10252,-2242.2199707031,286.46499633789,35.982223510742,0,0,90, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(10252,-2157.8325195313,286.46499633789,35.982223510742,0,0,90, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(5837,-2170.2998046875,252,36.0378074646,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2773,-2165.923828125,249.19140625,34.837539672852,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2775,-2162.6301269531,241.29899597168,38,0,0,180, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2773,-2165.9189453125,242.1708984375,34.837539672852,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2773,-2165.9189453125,261.826171875,34.841831207275,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(18608,-2162.55078125,252.77734375,39.599998474121,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1622,-2172.796875,242.6572265625,38.004920959473,0,0,193.998046875, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2422,-2167,252.25,35.641819000244,0,0,90, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2424,-2168.4604492188,251.18473815918,34.6081199646,0,0,180, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2444,-2169.3989257813,251.18194580078,34.6081199646,0,0,180, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2052,-2169.6401367188,251.18919372559,35.663688659668,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1665,-2169.1276855469,251.12335205078,35.680000305176,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1485,-2169.3310546875,251.21850585938,35.663688659668,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1663,-2168.4213867188,252.05453491211,35.068332672119,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1360,-2167.7490234375,261.8994140625,35.098430633545,0,0,90, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1360,-2170.9812011719,261.89999389648,35.100009918213,0,0,90, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1360,-2167.7490234375,242.1904296875,35.092334747314,0,0,90, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1360,-2170.9812011719,242.19052124023,35.100345611572,0,0,90, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2773,-2167.3518066406,260.84948730469,34.843441009521,0,0,90, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2773,-2169.2709960938,260.84948730469,34.844379425049,0,0,90, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2773,-2171.1955566406,260.84948730469,34.845321655273,0,0,90, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2773,-2167.3515625,243.1259765625,34.837539672852,0,0,90, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2773,-2169.2709960938,243.12452697754,34.837539672852,0,0,90, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2773,-2171.1955566406,243.1223449707,34.837539672852,0,0,90, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1360,-2167.7490234375,249.21875,35.092334747314,0,0,90, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1360,-2167.7490234375,254.896484375,35.101978302002,0,0,90, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1360,-2170.98046875,249.21875,35.10383605957,0,0,90, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2773,-2167.3518066406,248.22480773926,34.837539672852,0,0,90, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2773,-2169.2709960938,248.22190856934,34.844142913818,0,0,90, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2773,-2171.1953125,248.2197265625,34.848838806152,0,0,90, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2773,-2167.6481933594,255.83999633789,34.849475860596,0,0,90, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2773,-2169.2717285156,254.77450561523,34.852142333984,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(7662,-2180.8803710938,287.92321777344,35.064651489258,0,0,90, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-2165.3173828125,254.921875,34.889762878418,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-2165.3173828125,249.2470703125,34.884635925293,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-2165.3178710938,261.87542724609,34.889801025391,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-2165.3178710938,242.18547058105,34.884635925293,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1231,-2233.3786621094,290.1455078125,36.847579956055,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1231,-2224.8627929688,290.1455078125,36.847579956055,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1231,-2216.3293457031,290.1455078125,36.847579956055,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1231,-2207.8020019531,290.1455078125,36.847579956055,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1231,-2199.2653808594,290.1455078125,36.847579956055,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1231,-2190.7331542969,290.1455078125,36.847579956055,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1231,-2182.2006835938,290.1455078125,36.847579956055,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1231,-2173.6791992188,290.1455078125,36.847579956055,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1231,-2165.1333007813,290.1455078125,36.847579956055,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1319,-2166.2529296875,252.984375,35.1549949646,0,0,90, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1319,-2166.2529296875,251.0302734375,35.162460327148,0,0,90, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1549,-2163.0224609375,262.84817504883,34.324100494385,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1549,-2163.0224609375,241.14237976074,34.3203125,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(3113,-2173.44921875,251.7998046875,36.772228240967,0,14.798583984375,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2886,-2170.1989746094,253.46000671387,35.549198150635,0,0,180, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2690,-2172.6591796875,252.4228515625,36.06489944458,0,0,90, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(14638,-2172.7998046875,256.94921875,34.335216522217,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(14638,-2172.8046875,259.966796875,34.328800201416,0,0,179.99450683594, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(14638,-2172.7998046875,244.2509765625,34.330394744873,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(14638,-2172.7998046875,247.2421875,34.33430480957,0,0,179.99450683594, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(3113,-2225.75,251.7998046875,37.001831054688,0,14.798583984375,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(5837,-2228.7998046875,252,36.0378074646,0,0,179.99450683594, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(18608,-2236,252.77734375,39.599998474121,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(14638,-2226.1999511719,256.94921875,34.3203125,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(14638,-2226.1999511719,259.966796875,34.3203125,0,0,179.99450683594, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1360,-2231.1811523438,242.1904296875,35.092334747314,0,0,90, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1360,-2227.759765625,242.1904296875,35.092334747314,0,0,90, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2773,-2233.2126464844,254.8642578125,34.84342956543,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2773,-2233.2126464844,242.20303344727,34.837539672852,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2773,-2233.2126464844,261.826171875,34.84342956543,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1360,-2231.1806640625,249.21875,35.092334747314,0,0,90, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1360,-2231.1806640625,254.896484375,35.092334747314,0,0,90, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1360,-2227.759765625,254.896484375,35.092334747314,0,0,90, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1360,-2231.1811523438,261.8994140625,35.098224639893,0,0,90, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1360,-2227.759765625,261.8994140625,35.098224639893,0,0,90, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(14638,-2226.1999511719,244.2509765625,34.3203125,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(14638,-2226.1999511719,247.2421875,34.3203125,0,0,179.99450683594, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2775,-2226.2805175781,258.47805786133,38.185009002686,0,0,270, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2775,-2226.2805175781,245.75617980957,38.185009002686,0,0,269.99450683594, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2773,-2231.6748046875,243.1259765625,34.837539672852,0,0,90, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2773,-2229.755859375,243.1259765625,34.837539672852,0,0,90, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2773,-2227.8388671875,243.1259765625,34.837539672852,0,0,90, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2773,-2231.2412109375,248.20483398438,34.837539672852,0,0,90, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2773,-2229.5908203125,249.23541259766,34.837539672852,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2773,-2231.6748046875,255.8173828125,34.84342956543,0,0,90, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2773,-2229.755859375,255.81311035156,34.837539672852,0,0,90, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2773,-2227.8361816406,255.80836486816,34.837539672852,0,0,90, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2773,-2231.6748046875,260.86151123047,34.84342956543,0,0,90, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2773,-2229.75390625,260.86190795898,34.84342956543,0,0,90, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2773,-2227.8337402344,260.85949707031,34.84342956543,0,0,90, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(8423,-2158.6000976563,276.84729003906,38.890064239502,0,0,90, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2691,-2240.0200195313,265.61965942383,36.881885528564,0,0,308.10003662109, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2662,-2236.1877441406,263.01000976563,37.37866973877,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2660,-2236.1999511719,241.02000427246,35.880893707275,0,0,180, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(3462,-2158.5539550781,239.06929016113,35.834030151367,0,0,218, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(8423,-2158.6000976563,227.16473388672,38.890064239502,0,0,90, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(3462,-2158.3103027344,265.33782958984,35.834030151367,0,0,139.99453735352, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2691,-2239.6999511719,238.80000305176,36.881885528564,0,0,231.40002441406, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2662,-2236.1877441406,241.02000427246,37.37866973877,0,0,180, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2660,-2236.1999511719,263.01000976563,35.880893707275,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1622,-2226.0187988281,261.53103637695,38.004920959473,0,0,16, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1319,-2232.7990722656,251.0302734375,35.1549949646,0,0,270, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1319,-2232.7990722656,252.984375,35.1549949646,0,0,270, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-2233.5346679688,254.921875,34.890525817871,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-2233.5346679688,249.19952392578,34.890525817871,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-2233.5346679688,242.18524169922,34.884635925293,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-2233.5346679688,261.87515258789,34.890525817871,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-2226.5554199219,248.55958557129,34.884635925293,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-2172.5705566406,255.42175292969,34.901401519775,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2422,-2232.1000976563,251.73052978516,35.641819000244,0,0,270, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2690,-2228.228515625,253.10000610352,35.784679412842,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2074,-2230.2802734375,251.92007446289,37.369998931885,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2074,-2168.4853515625,251.96990966797,37.369998931885,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2007,-2229.9577636719,252.72911071777,34.6081199646,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(2164,-2226.3999023438,252.43417358398,34.6081199646,0,0,270, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1663,-2231.390625,252.85484313965,35.068332672119,0,0,16, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(994,-2197.0844726563,309.330078125,34.1171875,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);

///// PROTECCIÓN GASOLINERAS SF Y CAMPOS (Exterior)
	CreateDynamicObjectExULP(11677,1004.4343261719,-948.36755371094,46.043098449707,0,0,53, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11417,-105.29484558105,-1193.4342041016,6.2909736633301,0,0,32, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,-92.699996948242,-1162.1899414063,1.9800000190735,0,0,68, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,-91.756210327148,-1162.5070800781,1.9800000190735,0,0,67.999877929688, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,-97.240936279297,-1172.8973388672,2.039999961853,0,0,67.999877929688, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,-96.299339294434,-1173.2299804688,2.039999961853,0,0,67.999877929688, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,-90.389022827148,-1175.8388671875,1.789999961853,0,357.5,67.999877929688, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,-85.95027923584,-1165.0400390625,1.8899999856949,0,1.2000122070313,67.999877929688, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(994,-1610.2292480469,-2713.8059082031,47.9453125,0,0,323, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(994,-1610.798828125,-2714.5485839844,47.9453125,0,0,322.998046875, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(994,-1613.556640625,-2718.2258300781,47.9453125,0,0,322.998046875, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(994,-1614.1141357422,-2718.9680175781,47.9453125,0,0,322.998046875, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(994,-1607.45703125,-2710.1682128906,47.9453125,0,0,322.998046875, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(994,-1606.9255371094,-2709.4631347656,47.9453125,0,0,322.998046875, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(994,-1604.1760253906,-2705.740234375,47.9453125,0,0,322.998046875, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(994,-1603.6298828125,-2705.0249023438,47.9453125,0,0,322.998046875, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-1612.1333007813,-2719.8520507813,48.509635925293,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-1608.8570556641,-2715.4047851563,48.509635925293,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-1605.5515136719,-2711.0432128906,48.509635925293,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-1602.2153320313,-2706.6904296875,48.509635925293,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11417,-1593.0615234375,-2739.4858398438,52.412910461426,0,0,10, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11417,-2243.3530273438,-2548.5139160156,35.795722961426,0,0,14, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(994,-2248.4870605469,-2562.2756347656,31.0703125,0,0,63, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(994,-2247.7121582031,-2562.7109375,31.07745552063,0,0,62.99560546875, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(994,-2243.5483398438,-2564.8002929688,31.0703125,0,0,62.99560546875, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(994,-2242.6828613281,-2565.2111816406,31.0703125,0,0,62.99560546875, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11417,-2023.4284667969,181.5690612793,32.709785461426,0,0,90, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1686,-2026.5955810547,156.82255554199,28.0390625,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,-2026.0302734375,156.76225280762,28.590543746948,0,0,90, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,-2027.0118408203,156.76225280762,28.590543746948,0,0,90, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(996,-2016.6087646484,148.77519226074,27.436254501343,0,0,90, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-2016.5404052734,156.63232421875,27.251823425293,0,0,90, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(996,-2016.6087646484,157.69549560547,27.436254501343,0,0,90, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-2016.5404052734,165.54466247559,27.251823425293,0,0,90, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-2016.5404052734,147.75090026855,27.251823425293,0,0,90, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-2026.5955810547,160.27062988281,28.603385925293,0,0,90, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-2026.5955810547,153.22596740723,28.603385925293,0,0,90, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(994,-1677.8190917969,405.46643066406,6.3984375,0,0,44.994506835938, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(994,-1672.5668945313,410.72399902344,6.3984375,0,0,44.994506835938, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(994,-1671.7083740234,409.87326049805,6.3984375,0,0,44.994506835938, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(994,-1676.9721679688,404.62310791016,6.3984375,0,0,44.994506835938, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(994,-1683.5639648438,411.21224975586,6.3984375,0,0,44.994506835938, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(994,-1678.2972412109,416.48797607422,6.3984375,0,0,44.994506835938, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(994,-1684.4241943359,412.05838012695,6.3984375,0,0,44.994506835938, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(994,-1679.1702880859,417.34906005859,6.3984375,0,0,44.994506835938, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8167,-1666.4035644531,417.02209472656,2.7000000476837,90,0,315, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8167,-1665.5202636719,416.17474365234,2.7000000476837,90,0,315, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8167,-1678.6861572266,403.01733398438,2.7000000476837,90,0,315, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8167,-1679.5347900391,403.89093017578,2.7000000476837,90,0,315, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8167,-1685.2546386719,409.6423034668,2.7000000476837,90,0,315, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8167,-1686.1273193359,410.49356079102,2.7000000476837,90,0,315, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-1679.9932861328,402.42730712891,6.962760925293,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-1686.5845947266,409.04977416992,6.962760925293,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-1664.9559326172,417.49685668945,6.962760925293,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8167,-1672.1302490234,422.75018310547,2.7000000476837,90,0,315, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8167,-1673.0307617188,423.62954711914,2.7000000476837,90,0,315, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-1671.5549316406,424.0885925293,6.962760925293,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,-2410.3576660156,976.20617675781,45.097618103027,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,-2411.2458496094,976.20617675781,45.097618103027,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-2410.8286132813,968.40417480469,45.025260925293,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-2410.8286132813,983.60400390625,45.025260925293,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);

// NEGOCIO ID 25 - CAFETERÍA // 1
	CreateDynamicObjectExULP(11319,681.3095703125,-447.8203125,-26.690000534058,0,90,0, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11319,680.31573486328,-447.12985229492,-23.60000038147,0,0,0, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11319,682.6328125,-447.15905761719,-23.60000038147,0,0,0, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3089,680.75799560547,-444.11346435547,-25.312034606934,0,0,0, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1494,680.75170898438,-444.04830932617,-26.609762191772,0,0,3.75, -1, 1, -1, MAX_RADIO_STREAM);

///// NEGOCIO ID 26 - BURGER RESTAURAT // 8
	CreateDynamicObjectExULP(18029,1364.2958984375,1258.046875,9.8001756668091,0,0,0, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(989,1363.8067626953,1272.1336669922,11.641118049622,0,0,16.799987792969, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2639,1368.115234375,1256.7233886719,10.447971343994,0,0,90, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3499,1364.09765625,1275.5703125,15.312463760376,0,0,0, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2208,1374.236328125,1258.8232421875,10.282031059265,90,179.99450683594,90, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2639,1368.115234375,1260.9201660156,10.447971343994,0,0,90, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2639,1368.1152343750,1262.9439697266,10.447971343994,0,0,90, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2639,1368.115234375,1267.154296875,10.447971343994,0,0,90, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2637,1367.0529785156,1256.7296142578,10.225052833557,0,0,270, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2637,1367.0529785156,1260.9263916016,10.225052833557,0,0,270, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2637,1367.0529785156,1262.9842529297,10.225052833557,0,0,270, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2637,1367.0529785156,1267.1843261719,10.225052833557,0,0,270, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2850,1367.0344238281,1266.7065429688,10.663437843323,0,0,47.639617919922, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2849,1367.3923339844,1260.4538574219,10.634380340576,0,0,49.609191894531, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2850,1367.0859375,1261.7579345703,10.663437843323,0,0,168.35681152344, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2829,1367.3280029297,1263.1854248047,10.634380340576,0,0,278.59594726563, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2832,1367.0744628906,1256.7290039063,10.653437614441,0,0,0, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2849,1366.7810058594,1260.6486816406,10.634380340576,0,0,221.48628234863, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2829,1366.7651367188,1263.2868652344,10.634380340576,0,0,74.718688964844, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2639,1366.0100097656,1256.7512207031,10.447971343994,0,0,270, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2639,1366.0100097656,1261.0151367188,10.447971343994,0,0,270, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2639,1366.0100097656,1263.0163574219,10.447971343994,0,0,270, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2639,1366.0100097656,1267.1206054688,10.447971343994,0,0,270, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2850,1366.98828125,1267.5297851563,10.663437843323,0,0,241.11663818359, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1514,1373.9833984375,1264.3873291016,11.083962440491,0,0,267.80102539063, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2208,1374.236328125,1262.4326171875,10.282031059265,90,179.99450683594,90, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2208,1374.236328125,1266.1259765625,10.282031059265,90,179.99450683594,90, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2208,1376.96484375,1261.66796875,10.282031059265,90,179.99450683594,90, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2208,1376.96484375,1265.3427734375,10.282031059265,90,179.99450683594,90, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2208,1379.1149902344,1257.6535644531,10.282031059265,90,180,0, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2208,1379.1142578125,1256.7392578125,10.282031059265,90,179.99450683594,0, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2350,1372.8308105469,1264.6278076172,10.192463874817,0,0,0, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2350,1372.8308105469,1263.9476318359,10.192463874817,0,0,0, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2350,1372.8308105469,1262.2570800781,10.192463874817,0,0,0, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2350,1372.8308105469,1261.5794677734,10.192463874817,0,0,0, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2350,1372.8308105469,1259.7784423828,10.192463874817,0,0,0, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2350,1372.8308105469,1259.1037597656,10.192463874817,0,0,0, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2350,1372.8308105469,1257.1547851563,10.192463874817,0,0,0, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2350,1372.8308105469,1256.4720458984,10.192463874817,0,0,0, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(18452,1370.8139648438,1265.3233642578,6.3990001678467,0,0,0.75, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(989,1363.8067626953,1266.6418457031,11.641118049622,0,0,16.798095703125, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(989,1363.8067626953,1261.1701660156,11.641118049622,0,0,16.798095703125, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(989,1363.8067626953,1255.6984863281,11.641118049622,0,0,16.798095703125, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(989,1377.125,1267.84375,11.641118049622,0,0,16.792602539063, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(989,1377.125,1262.3515625,11.641118049622,0,0,16.792602539063, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(989,1377.125,1258.380859375,11.641118049622,0,0,16.792602539063, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(989,1366.7630615234,1255.4978027344,11.641118049622,0,0,286.57971191406, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(989,1372.3798828125,1255.4970703125,11.641118049622,0,0,286.57287597656, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(989,1377.927734375,1255.4970703125,11.641118049622,0,0,286.57287597656, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(989,1367.6378173828,1275.6031494141,11.641118049622,0,0,287.32287597656, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(989,1371.4548339844,1275.6031494141,11.641118049622,0,0,287.31994628906, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(989,1374.3612060547,1273.3514404297,11.641118049622,0,0,16.798095703125, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(989,1377.0595703125,1270.755859375,11.641118049622,0,0,286.57287597656, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(989,1368.7279052734,1266.0612792969,11.641118049622,0,0,16.798095703125, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(989,1368.7470703125,1260.6123046875,11.641118049622,0,0,16.792602539063, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(989,1368.7473144531,1258.3637695313,11.641118049622,0,0,16.798095703125, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3051,1376.9638671875,1256.158203125,11.182516098022,0,0,46.499633789063, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649,1369.8723144531,1267.314453125,9.8004856109619,270,0,90, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2812,1373.5675048828,1256.8199462891,10.9185962677,0,0,268.41632080078, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2831,1373.5369873047,1259.3713378906,10.9185962677,0,0,238.12139892578, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2829,1373.6396484375,1262.1265869141,10.9185962677,0,0,0, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1486,1373.4715576172,1264.6163330078,10.993544578552,0,0,0, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1486,1373.5495605469,1261.4523925781,10.993544578552,0,0,0, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1665,1373.4282226563,1263.9475097656,10.929049491882,0,0,0, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14565,1377.0754394531,1257.0207519531,8.7751655578613,0,180,180, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2132,1376.4919433594,1256.2833251953,9.8203125,0,0,0, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2132,1376.4919433594,1255.5487060547,9.8203125,0,0,0, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14565,1377.4816894531,1256.9987792969,13.56775188446,0,0,180, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2132,1376.9801025391,1256.2554931641,11.48203086853,0,0,0, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2132,1376.9801025391,1255.5863037109,11.48203086853,0,0,0, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(989,1376.7802734375,1263.7111816406,14.296411514282,17,90,0, -1, 8, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(989,1376.8002929688,1258.0888671875,14.296411514282,16.995849609375,90,0, -1, 8, -1, MAX_RADIO_STREAM);

///// PROTECCIÓN GASOLINERAS LS Y CAMPOS  (Exterior)
	CreateDynamicObjectExULP(970,1942.140625,-1778.0500488281,13.192106246948,0,0,90, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,1942.140625,-1773.9300537109,13.192106246948,0,0,90, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,1942.140625,-1769.8100585938,13.192106246948,0,0,90, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,1942.140625,-1767.7099609375,13.192106246948,0,0,90, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,1941.1500244141,-1778.0500488281,13.192106246948,0,0,90, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,1941.1500244141,-1773.9300537109,13.191471099854,0,0,90, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,1941.1500244141,-1769.8100585938,13.192106246948,0,0,90, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,1941.1500244141,-1767.7099609375,13.192106246948,0,0,90, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1676,1000.4146728516,-937.34997558594,42.908992767334,0,0,7.5, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1676,1007.4282226563,-936.40002441406,42.908992767334,0,0,7.4981689453125, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(994,997.40002441406,-938.25744628906,41.328125,0,0,7.5, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(994,1004.3499755859,-937.34002685547,41.328125,0,0,7.4981689453125, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(994,997.26831054688,-937.2109375,41.328125,0,0,7.4981689453125, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(994,1004.2645874023,-936.28521728516,41.328125,0,0,7.4981689453125, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,655.19494628906,-570.42736816406,16.052972793579,0,0,90, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,656.1044921875,-570.42736816406,16.052972793579,0,0,90, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,656.1044921875,-559.77954101563,16.052972793579,0,0,90, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,655.19494628906,-559.77954101563,16.052972793579,0,0,90, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11417,654.08386230469,-587.52520751953,20.201992034912,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(12913,667.57708740234,-583.63159179688,17.961227416992,0,0,180, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,1379.6687011719,460.25714111328,19.896684646606,0,0,336, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,1380.0240478516,461.03591918945,19.896684646606,0,0,335.99487304688, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,1384.4685058594,459.05697631836,19.896684646606,0,0,335.99487304688, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,1384.1026611328,458.24130249023,19.896684646606,0,0,335.99487304688, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,655.63928222656,-572.41638183594,16.065814971924,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,655.63928222656,-557.83038330078,16.065814971924,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11417,1350.8807373047,475.21041870117,24.070476531982,0,0,110, -1, -1, -1, MAX_RADIO_STREAM);

///// PARKING SAMD (Exterior)
	CreateDynamicObjectExULP(997,-2599.1943359375,599.3828125,13.453125,0,0,269.99450683594, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,-2599.1943359375,588.73791503906,13.453125,0,0,269.99450683594, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-2599.2099609375,592.42102050781,14,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,-2599.1943359375,594.04998779297,13.453125,0,0,269.98901367188, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-2599.2099609375,597.75500488281,14.017448425293,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-2599.2099609375,587.10998535156,14.017448425293,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,-2598,593.5,13.453125,0,0,90, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,-2600.3999023438,593.5,13.453125,0,0,90, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,-2598,588.16998291016,13.453125,0,0,90, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,-2600.3999023438,588.16998291016,13.453125,0,0,90, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8042,-2566.9797363281,578.40002441406,19,0,0,286, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(17514,-2566.8635253906,603.00506591797,14,0,0,0.20001220703125, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-2568.1164550781,577.87518310547,14.023303985596,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-2557.521484375,577.87518310547,14.173698425293,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-2576.0085449219,577.87518310547,14.173698425293,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1231,-2547.0366210938,584.30639648438,16.183517456055,0,0,90, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1231,-2547.0366210938,595.85034179688,16.183517456055,0,0,90, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1223,-2557.8601074219,593.23602294922,13.39999961853,0,0,179.99450683594, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1223,-2558.0300292969,602.60034179688,13.39999961853,0,0,179.99450683594, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1223,-2558.0568847656,612.79553222656,13.39999961853,0,0,179.99450683594, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1223,-2575.6298828125,593.20300292969,13.39999961853,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1223,-2575.794921875,602.60034179688,13.39999961853,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1223,-2575.8630371094,612.79998779297,13.39999961853,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1231,-2547.0366210938,607.70178222656,16.183517456055,0,0,90, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1231,-2566.8635253906,597.5,16.183517456055,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1231,-2566.8635253906,607.5,16.189588546753,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1231,-2586.9528808594,591.73992919922,16.183517456055,0,0,90, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1231,-2586.9528808594,606.56011962891,16.183517456055,0,0,90, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1319,-2566.8601074219,578.36999511719,14.001791954041,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1319,-2566.2399902344,578.36999511719,14,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1319,-2565.5908203125,578.36999511719,14,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(994,-2575.3383789063,579.09704589844,13.574436187744,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);

 ///// LUCES LICENCIEROS (Exterior)
	CreateDynamicObjectExULP(1215,-2085.7666015625,-95.867385864258,34.728385925293,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(10183,-2085.6999511719,-98.5,34.176006317139,0,0,225.5, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1223,-2095.6999511719,-91.938026428223,34.171798706055,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-2075.6943359375,-95.859153747559,34.728385925293,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-2065.7565917969,-95.842758178711,34.728385925293,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-2087.5854492188,-87.739265441895,34.728385925293,0,0,90, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-2079.1477050781,-87.739265441895,34.728385925293,0,0,90, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-2070.708984375,-87.739265441895,34.728385925293,0,0,90, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-2062.2780761719,-87.739265441895,34.728385925293,0,0,90, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-2051.5258789063,-80.411003112793,34.728385925293,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1215,-2042.8823242188,-80.411003112793,34.728385925293,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1231,-2033.4676513672,-90.444686889648,37.050704956055,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1231,-2022.3409423828,-90.45027923584,37.050704956055,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1232,-2029.4605712891,-101.35348510742,36.800704956055,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1231,-2047.2113037109,-97,36.902267456055,0,0,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);

 ///// Parking del Bar Jizzy (Exterior)
	CreateDynamicObjectExULP(8407,-2614.951171875,1367.1550292969,7.6706800460815,0 ,0 ,2.25, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(973,-2632.1613769531,1380.8018798828,7.0035910606384,0 ,0 ,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(973,-2643.5720214844,1380.8018798828,7.0035910606384,0 ,0 ,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(973,-2620.693359375,1380.8018798828,7.0035910606384,0 ,0 ,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(973,-2643.6306152344,1330.6248779297,7.0035910606384,0 ,0 ,180, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(973,-2632.3352050781,1330.6248779297,7.0035910606384,0 ,0 ,179.99450683594, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(973,-2648.1923828125,1376.0698242188,7.0035910606384,0 ,0 ,90.243865966797, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(973,-2648.1923828125,1365.9079589844,7.0035910606384,0 ,0 ,90.24169921875, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(973,-2648.1923828125,1345.5725097656,7.0035910606384,0 ,0 ,90.24169921875, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(973,-2648.1923828125,1335.3588867188,7.0035910606384,0 ,0 ,90.24169921875, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(973,-2648.1923828125,1355.6885986328,7.0035910606384,0 ,0 ,90.243865966797, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(973,-2621.7934570313,1336.7125244141,7.0035910606384,0 ,0 ,224.99450683594, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(973,-2615.9675292969,1349.0035400391,7.0035910606384,0 ,0 ,270.05822753906, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(973,-2615.9675292969,1373.4868164063,7.0035910606384,0 ,0 ,270.05493164063, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8841,-2632.6184082031,1356.0880126953,9.4133796691895,0 ,0 ,269.73059082031, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1251,-2626.6762695313,1374.3176269531,6.1962809562683,0 ,0 ,270, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1251,-2626.6762695313,1368.3176269531,6.1962809562683,0 ,0 ,270, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1251,-2626.6762695313,1362.3176269531,6.1962809562683,0 ,0 ,270, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1251,-2626.6762695313,1356.3173828125,6.1962809562683,0 ,0 ,270, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1251,-2626.6762695313,1350.3173828125,6.1962809562683,0 ,0 ,270, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1251,-2626.6762695313,1344.3173828125,6.1962809562683,0 ,0 ,270, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1251,-2626.6762695313,1338.3173828125,6.1962809562683,0 ,0 ,270, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1251,-2638.5,1374.3173828125,6.1962809562683,0 ,0 ,270, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1251,-2638.5,1368.3173828125,6.1962809562683,0 ,0 ,270, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1251,-2638.5,1362.3173828125,6.1962809562683,0 ,0 ,270, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1251,-2626.67578125,1356.3173828125,6.1962809562683,0 ,0 ,270, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1251,-2638.5,1356.3173828125,6.1962809562683,0 ,0 ,270, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1251,-2638.5,1350.3173828125,6.1962809562683,0 ,0 ,270, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1251,-2638.5,1344.3173828125,6.1962809562683,0 ,0 ,270, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1251,-2638.5,1338.3173828125,6.1962809562683,0 ,0 ,270, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1251,-2638.5,1350.3173828125,6.1962809562683,0 ,0 ,270, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1251,-2615.7966308594,1361.1037597656,6.1905927658081,0 ,0 ,1.5, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1250,-2615.6870117188,1356.1641845703,6.5999999046326,0 ,0 ,178.28881835938, -1, -1, -1, MAX_RADIO_STREAM);

// Parking Ayuntamiento (Fix Rejas) (Exterior)
	CreateDynamicObjectExULP(980,2454.017822,2390.740722,70.993827,1.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(980,2453.269775,2379.197753,73.363815,-0.049999,13.979999,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(980,2450.829345,2379.214355,75.029273,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(980,2453.948730,2369.795166,72.610786,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(980,2449.610351,2369.799072,73.716453,0.000000,0.000000,0.000000,-1,-1,-1,MAX_RADIO_STREAM);

// PARKING UNIVERSIDAD (Exterior)
	CreateDynamicObjectExULP(997, -1504.2004394531,913.92102050781,6.18750,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,-1504.2004394531,926.15234375,6.1875,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(996,-1504.1356201172,916.61029052734,6.9362554550171,0,0,90, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(7091,-1491.8000488281,910.44500732422,15.739999771118,0,0,180, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(7091,-1491.8000488281,929.79998779297,15.739999771118,0,0,180, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-1504.2004394531,914.92742919922,6.751823425293,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-1504.1130371094,925.11511230469,6.751823425293,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-1499.9200439453,913.90002441406,6.751823425293,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-1499.9200439453,926.14056396484,6.751823425293,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1549,-1493.9947509766,923.20086669922,6.1875,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(9833,-1499.7592773438,920.02105712891,7.6999998092651,0,0,355, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(805,-1499.4067382813,919.81646728516,6.5,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1232,-1499.9000244141,906.23779296875,8.8241424560547,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(982,-1492.9364013672,898.25,6.871054649353,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,-1496.1533203125,906.23626708984,6.8688707351685,0,0,90, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,-1496.1533203125,911.0419921875,6.871054649353,0,0,90, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,-1496.1533203125,891.83074951172,6.871054649353,0,0,90, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,-1496.1533203125,901.43029785156,6.871054649353,0,0,90, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,-1496.1533203125,896.62817382813,6.871054649353,0,0,90, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,-1496.1533203125,887.0234375,6.871054649353,0,0,90, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,-1492.9364013672,885.43957519531,6.871054649353,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1232,-1499.9000244141,896.61834716797,8.8241424560547,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1232,-1499.9000244141,887.02447509766,8.8241424560547,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,-1496.1533203125,882.22094726563,6.871054649353,0,0,90, -1, -1, -1, MAX_RADIO_STREAM);

// FUENTE DE AGUA CNN (Exterior)
	CreateDynamicObjectExULP(3515,632.42419400,-1400.16833500,13.13733200,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(9833,631.93347200,-1400.21081500,17.09427100,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,633.96075400,-1398.67785600,12.89988300,0,0,-44.99999064,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,633.96563700,-1401.64550800,12.90219700,0,0,44.99999064,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,630.99475100,-1401.64062500,12.87962200,0,0,-44.99999064,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(970,631.00067100,-1398.71679700,12.86789600,0,0,44.99999064,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,635.07012900,-1400.18164100,12.92447100,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,632.49401900,-1402.80114700,12.89934500,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,629.87194800,-1400.20153800,12.88041000,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,632.47106900,-1397.66601600,12.89555600,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);

// SALA DE OPERACIONES SAMD (Interior)
	CreateDynamicObjectExULP(2146,2799.9272460938,2511.4152832031,17.157459259033,0,0,357.75, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2146,2799.0483398438,2512.0437011719,18,59.996337890625,179.99450683594,269.44519042969, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3383,2795.0756835938,2511.181640625,16.671909332275,0,0,180.71449279785, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(18023,2793.43359375,2501.6396484375,18.790855407715,0,0,0, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(18023,2798.2758789063,2518.3037109375,18.790000915527,0,0,180.10192871094, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2146,2799.126953125,2511.146484375,18,59.996337890625,179.99450683594,269.44519042969, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2690,2793.4948730469,2512.6354980469,18.528289794922,0,0,0, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3393,2797.9631347656,2507.7951660156,16.673667907715,0,0,268.82043457031, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3389,2799.8686523438,2509.4128417969,16.671875,0,0,0, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3387,2795.6577148438,2507.7702636719,16.673667907715,0,0,268.81896972656, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(921,2795.7397460938,2512.4072265625,19.208683013916,0,0,0, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1235,2791.744140625,2512.3464355469,17.174949645996,0,0,0, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3051,2791.3005371094,2508.8356933594,18.035871505737,0,0,46.5, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3051,2791.2998046875,2510.0341796875,18.035871505737,0,0,226.30187988281, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3394,2793.1826171875,2507.8298339844,16.671875,0,0,270, -1, 11, -1, MAX_RADIO_STREAM);

 // OFICINA SAMD 1 (Interior)
	CreateObjectEx(15054,2462.970703125,1040.3701171875,59.964393615723,0,0,0, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1502,2465.087890625,1040.7635498047,57.971073150635,0,0,359.99743652344, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1502,2461.7629394531,1043.6208496094,57.985340118408,0,0,269.99743652344, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3089,2467.888671875,1042.1044921875,59.293395996094,0,0,89.247436523438, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2525,2457.4382324219,1044.16796875,57.964393615723,0,0,0, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2523,2460.1455078125,1044.2200927734,57.964393615723,0,0,359.25, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2519,2455.8688964844,1040.8641357422,57.964393615723,0,0,0, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2527,2455.9616699219,1043.251220703,57.964393615723,0,0,0, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2525,2458.1870117188,1044.1801757813,57.964393615723,0,0,0, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2525,2459.0109863281,1044.1931152344,57.964393615723,0,0,0, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2523,2459.361328125,1044.2337646484,57.964393615723,0,0,359.24743652344, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2519,2458.1125488281,1040.8758544922,57.964393615723,0,0,0, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2518,2455.9353027344,1042.0026855469,58,0,0,91.5, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2742,2461.3696289063,1044.2553710938,59.717166900635,0,0,271.5, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2741,2460.8583984375,1044.7060546875,59.658683776855,0,0,0, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14519,2464.5642089844,1046.2467041016,59.320945739746,0,0,0, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1999,2462.4216308594,1036.6552734375,57.964393615723,0,0,0, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1999,2464.421875,1036.654296875,57.964393615723,0,0,0, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310,2462.6943359375,1037.7785644531,58.463607788086,0,0,91.5, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310,2463.59375,1037.8433837891,58.463607788086,0,0,86.999633789063, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310,2464.6528320313,1037.8569335938,58.463607788086,0,0,98.245239257813, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310,2465.5021972656,1037.7495117188,58.463607788086,0,0,80.995239257813, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1728,2462.5573730469,1040.1403808594,57.964393615723,0,0,0, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1728,2467.2211914063,1040.09375,57.964393615723,0,0,270, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1722,2462.923828125,1035.4475097656,57.964393615723,0,0,0, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1722,2464.9816894531,1035.4992675781,57.964393615723,0,0,0, -1, 11, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3089,2463.1069335938,1044.9575195313,59.293395996094,0,0,0.52902221679688, -1, 11, -1, MAX_RADIO_STREAM);

///// PÚBLICOS
// OTROS
// (Isla Afueras de LS) (Exterior)
	CreateDynamicObjectExULP(4876,654.54211400,-2944.55664100,-0.14989900,0,0,-11.95476440, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4876,552.41046100,-2942.08569300,2.58357200,0,0,134.99997191, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4876,571.84668000,-2974.77929700,2.23222500,0,0,-56.25001695, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(17472,627.62652600,-2949.54418900,6.10846200,0,0,-78.75001226, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(615,598.09570300,-2965.50708000,7.37789100,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(620,571.55578600,-2924.91015600,10.97621200,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(620,555.41931200,-2928.06860400,11.47702400,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(623,694.54205300,-2942.46826200,2.94929500,0,0,-33.75002163, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(623,682.24792500,-2930.06811500,4.76525100,0,0,11.25002631, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(745,686.39483600,-2933.77612300,3.43897900,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(880,670.90686000,-2939.88940400,7.28872700,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(655,665.18951400,-2940.70605500,7.54680400,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(655,666.70715300,-2932.24487300,6.61396200,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(655,662.76886000,-2951.57275400,8.63868900,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(655,660.24816900,-2961.95629900,9.46068800,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(655,676.62463400,-2941.11792000,5.74097200,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(655,673.18945300,-2952.48339800,7.00742500,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(655,670.30389400,-2962.26367200,7.99295900,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(655,653.10003700,-2954.90600600,7.57115100,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(655,656.74218800,-2944.17041000,6.76267400,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(655,651.67059300,-2934.65820300,4.70407200,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(655,679.09082000,-2961.31347700,6.43718500,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(655,685.01867700,-2950.41381800,4.86004800,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(655,664.75341800,-2970.17773400,9.34234400,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(655,652.47991900,-2969.85986300,9.20731400,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(655,646.69549600,-2964.83569300,7.75699400,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(655,658.16107200,-2925.36108400,4.33236100,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(669,657.82580600,-2978.92431600,9.06526200,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(669,571.07080100,-2968.99560500,7.82723800,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(669,558.88043200,-2978.35791000,9.43215800,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(671,561.13867200,-2983.37475600,10.34852900,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(669,586.08227500,-2985.24755900,9.10700800,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(744,565.32550000,-3001.90283200,10.24189000,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(703,535.57812500,-2976.22802700,7.60368300,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(647,533.67633100,-2949.87085000,10.30742200,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(647,538.37524400,-2946.76147500,10.60397200,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(647,528.48370400,-2944.93872100,10.24674100,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(647,533.43536400,-2944.04150400,10.85703200,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(647,529.19366500,-2949.67041000,10.24151900,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(647,593.93389900,-2972.03833000,10.18542800,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(647,524.59344500,-2949.99194300,9.73412200,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(647,520.54107700,-2948.52197300,9.45189000,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(12990,717.59631300,-2912.18237300,2.05316700,0,0,-272.73318169, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1608,453.68634000,-3108.70654300,-30.90458300,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1637,612.29278600,-2995.21777300,6.20024000,0,0,-67.49998596, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(16502,564.94409200,-3030.28955100,0.28288300,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(647,523.35400400,-2955.60815400,8.58030000,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(647,528.09222400,-2955.09375000,9.44949600,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(647,649.34063700,-2947.13256800,7.70925000,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(647,659.20721400,-2955.94335900,10.25258200,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(647,641.73724400,-2965.13183600,8.67988900,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(647,650.55767800,-2951.76025400,8.46898200,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(647,658.79528800,-2949.84375000,9.48937100,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4876,508.85568200,-2938.85986300,-0.57038100,0,0,163.51608138, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(620,489.71121200,-2947.16210900,5.44297000,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(620,503.78619400,-2938.00854500,6.77061500,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(620,482.93774400,-2927.84545900,5.13303400,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(624,499.11618000,-2925.05859400,7.36402300,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(624,474.77420000,-2948.76562500,2.70657500,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(17033,488.44043000,-2935.05908200,5.13609600,0,0,-112.49997660, -1, -1, -1, MAX_RADIO_STREAM);
	CreateObjectEx(3250,553.45526100,-2986.08471700,9.44349500,0,0,191.24998886, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4876,595.58606000,-2989.64990200,-2.54254200,0,0,-44.99999064, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(744,638.51171900,-2928.12329100,1.27860000,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(744,641.40002400,-2923.87133800,-1.06244600,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(744,642.95599400,-2919.33300800,1.35500800,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);

//  BUG CARABANAS (Interior)
	CreateDynamicObjectExULP(1794, 2.7991168498993, 6.0477714538574, 998.42840576172, 0, 0.75, 90, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(16500, -1.888671875, 3.3037109375, 1000.5269775391, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(16500, -1.888671875, -1.68359375, 1000.5269775391, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(16500, 2.5615234375, -3.677734375, 1000.5269775391, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(16500, 2.5615234375, 1.3867572546005, 1000.5269775391, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(16500, 2.5615234375, 6.3744711875916, 1000.5269775391, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(16500, -0.1241912394762, 7.7552452087402, 1000.5269775391, 0, 0, 270, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(16500, -1.96484375, -6.7470703125, 1000.5269775391, 0, 0, 179.24743652344, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(16500, 0.10644528269768, -6.4396018981934, 1000.5269775391, 0, 0, 89.994506835938, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(16500, 0.607421875, -7.5244140625, 998.38598632813, 0, 270, 89.994506835938, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2534, -1.3138148784637, 3.9005808830261, 998.42840576172, 0, 0, 270, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2534, -1.3134765625, 7.1232419013977, 998.42840576172, 0, 0, 270, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2534, -1.3134765625, 6.0487632751465, 998.42840576172, 0, 0, 270, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2534, -1.3134765625, 4.9735679626465, 998.42840576172, 0, 0, 270, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(16500, 0.31628769636154, 7.4249238967896, 1001.4630737305, 0, 270, 89.994506835938, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(16500, 0.16323557496071, 3.7846603393555, 1001.8344726563, 0, 270, 89.994506835938, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(16500, 0.1630859375, -0.20602633059025, 1001.8344726563, 0, 270, 89.994506835938, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(16500, 0.1630859375, -4.1952838897705, 1001.8344726563, 0, 270, 89.994506835938, -1, 2, -1, MAX_RADIO_STREAM);

// TRONCOS (Exterior)
	CreateDynamicObjectExULP(13640,2363.01123000,-1656.36804200,11.52881400,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13640,2246.36645500,-1658.68359400,13.38120700,0,0,-15, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13640,2360.40551800,-1729.73327600,11.50311100,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13640,2620.31347700,-1734.92224100,9.22440300,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13640,1084.77661100,-1849.63220200,11.50889600,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13640,1282.00244100,-1854.86084000,11.48590200,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13640,1410.21093800,-1869.69152800,11.52811100,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13640,899.75976600,-1771.94006300,11.60310900,0,0,-2, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13640,502.68496700,-1712.35681200,9.84832600,0,0,-9, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13640,-126.96583600,-1205.89526400,0.96558100,0,0,70, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13640,-99.51718900,-1129.30297900,-0.65611300,0,0,64, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13640,-898.48547400,-1112.82971200,96.82459300,0,0,-225, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1557,1301.536499,-784.514099,87.322502,0.000000,0.000000,-0.300000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13640,-1758.72363300,-604.59442100,14.44207400,0,0,-87, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13640,-2260.61547900,-166.27476500,33.34203300,0,0,-89, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13640,-2251.58642600,-91.89921600,33.31703200,0,0,-89, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13640,-2027.13720700,-72.85350000,33.26702900,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13640,-2009.74218800,-49.53948600,33.28513300,0,0,-89, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13640,-2004.50366200,-89.20652000,33.38242300,0,0,89, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13640,-2000.56591800,707.60357700,43.51703600,0,0,-89, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13640,-2007.96789600,754.21148700,43.49203500,0,0,-89, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13640,-1525.96862800,896.42633100,5.23432500,0,0,-93, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13640,-1796.61377000,-137.21212800,3.86515800,0,0,-89, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13640,-1801.78869600,-96.99089100,4.11497400,0,0,-89, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13640,1892.91943400,-1754.83361800,11.52811100,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13640,1979.98449700,-1749.59387200,11.47811100,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13640,1964.46569800,-1833.89477500,11.50311000,0,0,-89, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13640,1332.09155300,-1729.72741700,11.50311100,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13640,1315.01843300,-1752.15576200,11.47811100,0,0,-89, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13640,1294.86206100,-1691.82666000,11.50311100,0,0,89, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13640,1059.39221200,-1569.71179200,11.57388500,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13640,1015.43469200,-1574.86230500,11.52811100,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13640,-2851.29687500,442.52215600,2.59682600,0,0,-89, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13640,-2831.22168000,468.64886500,2.34941100,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13640,-2851.90820300,486.01559400,2.29818200,0,0,77, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13640,1546.42138700,-1589.70739700,11.50311100,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13640,-1733.18933100,324.91726700,5.27651300,0,0,44, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13640,-1760.75146500,287.54974400,5.73314900,0,0,44, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13640,-2351.53418000,-67.68260200,33.28421800,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13640,497.68631000,-1288.43493700,13.81506000,0,0,39, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13640,819.47778300,-1395.39123500,11.53167600,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13640,772.71081500,-1405.57629400,11.55523300,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);

// Objetos de Calle (Exterior)
	CreateDynamicObjectExULP(973,1359.35217300,-1722.32336400,13.38521000,0,0,-180, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(973,1359.27807600,-1683.79772900,13.48737400,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(973,1359.02209500,-1619.55566400,13.47541100,0,0,-179, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(973,1362.93335000,-1592.39367700,13.50033600,0,0,-15, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(979,-1235.59423800,-767.80914300,63.74424700,0,0,213, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(978,-1228.36132800,-761.87548800,63.74116100,0,0,-134, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(978,-1757.39648400,-567.01330600,16.32459400,0,0,180, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(979,-1766.85644500,-567.01196300,16.32459400,0,0,-180, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(973,1368.02160600,-1574.12353500,13.36209600,0,0,163, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(973,1579.41272000,-1754.46154800,13.38709400,0,0,89, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,1361.24462900,-1742.45288100,15.41985700,0,0,89, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(738,1360.88562000,-1744.85376000,12.97255300,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(7952,1304.22473100,-1795.35668900,13.29121300,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8825,1304.21130400,-1781.99243200,13.19745800,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4100,-2026.25317400,-60.01710500,36.02198000,0,0,-40, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4100,-2017.80773900,-46.84213300,36.02394100,0,0,51, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(7910,-2027.66345200,-39.94932600,47.15640300,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(997,1534.44104000,-1681.52111800,12.48313000,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(996,1537.57434100,-1680.37097200,13.13156800,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM); //No cambiar
	CreateDynamicObjectExULP(996,1537.57397500,-1671.95434600,13.13156800,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM); //No cambiar
	CreateDynamicObjectExULP(997,1534.46337900,-1663.89831500,12.48313000,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1216,2320.72583000,-1668.22680700,13.79599000,0,0,-168, -1, -1, -1, MAX_RADIO_STREAM);

// PETROLERA (Exterior)
	CreateObjectEx(8071,-3592.45629900,1952.34460400,2.29500400,0,0,-281.25002743, MAX_RADIO_STREAM);
	CreateObjectEx(8071,-3710.01123000,1975.83483900,2.28497600,0,0,-101.24995029, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(7191,-3764.15649400,1894.94201700,3.86502800,0,0,-101.25000758,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(7191,-3720.58007800,1886.20520000,3.86502800,0,0,-101.25000758,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(7191,-3676.96630900,1877.58020000,3.86502800,0,0,-101.25000758,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(7191,-3632.86889600,1868.84716800,3.87502600,0,0,-101.25000758,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(7191,-3782.14697300,1920.88037100,3.86502800,0,0,168.74999354,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(7191,-3773.55029300,1964.25903300,3.86502800,0,0,168.74999354,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(7191,-3764.80078100,2009.28735400,3.87569600,0,0,168.74999354,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(7191,-3755.93066400,2053.50048800,3.85398500,0,0,168.74999354,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(7191,-3730.04199200,2071.52783200,3.86500000,0,0,78.75001226,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(7191,-3686.00952100,2062.69824200,3.86499800,0,0,-281.25002743,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(7191,-3642.22290000,2054.06323200,3.86499800,0,0,-281.24997014,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(7191,-3598.88403300,2045.34484900,3.90005600,0,0,-281.25002743,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3707,-3674.15087900,1917.21081500,9.05090600,0,0,-11.25002631,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3707,-3654.54956100,2015.72204600,9.02590700,0,0,-11.25002631,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13065,-3571.30224600,2030.23584000,-0.85548400,0,0,-101.25000758,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3689,-3743.60327100,1983.72241200,9.02232900,0,0,78.75001226,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(17016,-3753.54589800,1947.38378900,68.17910000,0,0,-191.24998886,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(17017,-3756.55932600,1932.28466800,68.24356800,0,0,-101.25000758,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(17019,-3558.62719700,1889.44531300,7.17597700,0,0,258.75003211,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(7238,-3739.99194300,2003.66198700,27.64686600,0,0,-101.25000758,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(6932,-3661.78979500,1993.46374500,50.35311500,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3643,-3653.50634800,1883.73083500,7.04013900,0,0,78.75001226,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3638,-3533.29736300,2017.67016600,4.35830000,0,0,-11.25002631,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3287,-3642.32299800,1882.46594200,5.92440400,0,0,78.75001226,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3256,-3619.04467800,2037.00366200,1.12306800,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(12913,-3610.45629900,2034.77356000,3.23564900,0,0,78.75001226,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5126,-3674.26635700,1934.13293500,31.12595600,0,0,-11.25002631,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1394,-3648.76269500,1929.15271000,31.99744400,0,0,-101.24995029,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3427,-3692.05835000,2028.57360800,1.68758400,0,0,78.75001226,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3427,-3698.66088900,1996.69055200,1.74484700,0,0,78.74995497,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3427,-3713.44287100,1919.05407700,1.76540000,0,0,78.75001226,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3427,-3707.22412100,1950.62841800,1.71478400,0,0,78.75001226,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3463,-3561.58422900,1950.21862800,1.54697600,0,0,78.75001226,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3463,-3592.79907200,1956.28161600,1.54697600,0,0,78.75001226,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3463,-3630.30542000,1962.97155800,1.54697600,0,0,78.75001226,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3463,-3709.66503900,1976.10180700,1.53694800,0,0,78.75001226,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3460,-3547.11181600,2021.65100100,5.02342800,0,0,-191.24998886,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3620,-3616.15014600,1864.82702600,14.22324600,0,0,-11.25002631,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3287,-3632.40332000,1880.57812500,5.89186400,0,0,78.75001226,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1244,-3625.41626000,1878.99548300,1.95231800,0,0,78.75001226,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1244,-3623.60595700,1878.69323700,1.92731800,0,0,78.75001226,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1244,-3621.71923800,1878.24853500,1.90231800,0,0,-101.25000758,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1297,-3625.18237300,1872.94628900,4.37205700,0,0,-101.25000758,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1297,-3722.11889600,2058.12817400,4.51957100,0,0,168.74999354,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1297,-3756.76025400,1905.15405300,4.41203000,0,0,168.74999354,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5812,-3709.72192400,1936.30603000,0.84533700,0,0,-11.25002631,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5812,-3694.53344700,2013.22192400,0.82033700,0,0,-11.25002631,-1, -1, -1, MAX_RADIO_STREAM);

// PUERTO LOS SANTOS (Exterior)
	CreateDynamicObjectExULP(6300,972.69738800,-2003.35485800,-7.38826500,0,0,-89.99998128,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,968.14917000,-1972.98230000,1.30310200,0,0,89.99998128,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,955.37994400,-1972.95666500,1.30310200,0,0,89.99998128,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,940.58960000,-1973.00952100,1.29725500,0,0,-89.99998128,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,934.12158200,-1979.39502000,1.30310200,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,934.13439900,-2027.29968300,1.30310200,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,940.52069100,-2033.75512700,1.30310200,0,0,-89.99998128,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,964.52240000,-2033.75805700,1.30310200,0,0,-89.99998128,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,953.29687500,-2033.78540000,1.30310200,0,0,89.99998128,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(981,951.94677700,-2032.34716800,1.61791000,0,0,180.00001985,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(981,951.97271700,-1974.51684600,1.61791000,0,0,0.00011459,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(9747,1028.63952600,-2002.28076200,4.58075300,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11495,923.11755400,-1986.67382800,0.42383600,0,0,-270.00000112,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11495,923.09735100,-1997.23986800,0.46863800,0,0,89.99998128,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11495,923.05883800,-2009.14099100,0.48651500,0,0,-270.00000112,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11495,923.06372100,-2020.00695800,0.51093300,0,0,89.99998128,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(10832,968.17468300,-1989.52856400,2.46619700,0,0,89.99998128,-1, -1, -1, MAX_RADIO_STREAM);

// ALMACÉN LCN (Exterior)
	CreateDynamicObjectExULP(987,2342.78051800,-642.00433300,127.50116700,0,0,270.00000112,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,2342.78198200,-653.96441700,127.50207500,0,0,-89.99998128,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,2342.74218800,-665.85504200,127.49269900,0,0,0.00000000,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,2354.69653300,-642.03961200,127.50634000,0,0,180.00001985,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,2366.69897500,-642.04864500,127.51136800,0,0,180.00001985,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,2378.70678700,-642.04357900,127.51177200,0,0,179.99996255,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,2354.74853500,-665.85894800,127.46496600,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,2366.72436500,-665.85217300,127.47698200,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,2378.61474600,-662.88226300,130.00802600,0,0,-180.00001985,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,2378.61792000,-657.01477100,129.63832100,0,0,-180.00001985,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,2379.10693400,-657.05316200,129.61201500,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(647,2378.30053700,-642.92675800,127.58469400,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(647,2377.27368200,-641.34600800,127.79875900,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(647,2373.81103500,-641.32263200,128.04693600,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(647,2370.46508800,-640.72576900,128.51930200,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(647,2371.43579100,-643.19067400,127.81758100,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(647,2375.04199200,-642.96575900,127.70335400,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(647,2377.58764600,-654.90588400,128.35699500,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(647,2376.95678700,-657.91473400,128.64811700,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(12925,2353.40478500,-657.45318600,127.05270400,0,0,180.00001985, -1,-1,-1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(12925,2353.39428700,-648.58532700,127.05074300,0,0,-179.99996255, -1,-1,-1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(647,2376.41918900,-660.72741700,129.01176500,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(647,2377.32495100,-663.49475100,128.82067900,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(647,2365.63281300,-663.66107200,128.86392200,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);

// ALMACÉN YKZ (Exterior)
	CreateDynamicObjectExULP(922,-2182.76489300,718.31036400,53.77942300,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(922,-2177.09790000,714.89495800,53.77616500,0,0,-89.99998128,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(923,-2179.12231400,718.25714100,53.77176700,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2463,-2187.28759800,715.49011200,52.89683200,0,0,89.99998128,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2332,-2187.08203100,717.28192100,53.36394900,0,0,89.99998128,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2131,-2187.28930700,712.71691900,52.89556500,0,0,89.99998128,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3525,-2188.18408200,703.41510000,53.60958100,0,0,89.99998128,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3861,-2185.91528300,696.47631800,54.06295800,0,0,180.00001985,-1, -1, -1, MAX_RADIO_STREAM);

// CONTRABANDISTAS (Interior)
	CreateDynamicObjectExULP(1501, -2171.09765625, 639.95935058594, 1051.3760986328, 0, 0, 0,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1487, -2161.607421875, 643.72943115234, 1057.5837402344, 0, 0, 0, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1665, -2161.6474609375, 644.39459228516, 1057.3967285156, 0, 0, 0, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2863, -2162.7590332031, 639.26861572266, 1057.5032958984, 0, 0, 0, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2852, -2160.8623046875, 643.85681152344, 1057.3862304688, 0, 0, 0, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2421, -2157.4594726563, 638.83605957031, 1057.4116210938, 0, 0, 270, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1668, -2160.0932617188, 643.49816894531, 1057.5529785156, 0, 0, 0, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2255, -2160.103515625, 646.78302001953, 1059.4760742188, 0, 0, 0, -1,  1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2966, -2166.3723144531, 644.45825195313, 1057.1312255859, 0, 0, 83.25, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1665, -2166.4992675781, 643.97052001953, 1057.1120605469, 0, 0, 0, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1736, -2162.3266601563, 646.91302490234, 1059.9112548828, 0, 0, 0,-1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2829, -2160.8640136719, 637.14019775391, 1057.4418945313, 0, 0, 0, -1, 1, -1, MAX_RADIO_STREAM);

// ZOTANO CONTRABANDISTAS (Interior)
	CreateDynamicObjectExULP(2885, 1895.2775878906, 1016.8336181641, 37.59366607666, 0, 0, 90.065490722656, -1, 10, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2885, 1888.7552490234, 1020.0472412109, 37.59366607666, 0, 0, 269.92858886719, -1, 10, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2885, 1894.4251708984, 1022.3494262695, 37.59366607666, 0, 0, 179.86267089844, -1, 10, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2885, 1889.6057128906, 1014.1888427734, 37.59366607666, 0, 0, 180.62072753906, -1, 10, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1501, 1889.0174560547, 1016.3623657227, 30.8828125, 0, 0, 90.065490722656, -1, -1, 10, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1501, 1888.9660644531, 1019.3633422852, 30.8828125, 0, 0, 271.45596313477, -1, -1, 10, MAX_RADIO_STREAM);

// TRAFICANTES PUERTAS CERRADAS (Exterior)
	CreateDynamicObjectExULP(10558, 2177.8837890625, -2255.0078125, 15.606448173523, 0, 0, 135.09808349609, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1498, 2119.7905273438, -2275.1032714844, 19.671875, 0, 0, 133.57159423828, -1, -1, -1, MAX_RADIO_STREAM);

// 2 BUGS DE CASAS A LA VENTA
	// Casa 1
	CreateDynamicObjectExULP(2885, 1895.2775878906, 1016.8336181641, 37.59366607666, 0, 0, 90.065490722656, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2885, 1888.7552490234, 1020.0472412109, 37.59366607666, 0, 0, 269.92858886719, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2885, 1894.4251708984, 1022.3494262695, 37.59366607666, 0, 0, 179.86267089844, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2885, 1889.6057128906, 1014.1888427734, 37.59366607666, 0, 0, 180.62072753906, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1501, 1889.0174560547, 1016.3623657227, 30.8828125, 0, 0, 90.065490722656, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1501, 1888.9660644531, 1019.3633422852, 30.8828125, 0, 0, 271.45596313477, -1, -1, -1, MAX_RADIO_STREAM);

	// Casa 2
	CreateDynamicObjectExULP(2885, 2521.6999511719, -1681.3419189453, 1021.2094726563, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2885, 2532.9931640625, -1686.2703857422, 1014.0303344727, 90, 168.22192382813, 282.60699462891, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2885, 2533.3310546875, -1686.2001953125, 1021.2094726563, 0, 0, 0.76327514648438, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2885, 2527.5520019531, -1686.5541992188, 1021.2094726563, 0, 0, 269.93450927734, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1498, 2530.8706054688, -1681.1658935547, 1014.4985961914, 0, 0, 0, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1498, 2531.9194335938, -1681.1655273438, 1014.4985961914, 0, 0, 0, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649, 2533.1682128906, -1683.4783935547, 1016.1883544922, 0, 0, 270.69778442383, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2987, 2531.9501953125, -1683.7105712891, 1014.9163208008, 87.710144042969, 90, 0.82876586914063, -1, 1, -1, MAX_RADIO_STREAM);

	// Puerta de la casa Bug
	CreateDynamicObjectExULP(1506, -2668.0686035156, 913.68188476563, 78.677688598633, 0, 0, 270, -1, -1, -1, MAX_RADIO_STREAM);

// CNN PUERTAS (Interior)
	CreateDynamicObjectExULP(3089, 2150.0395507813, 1602.1088867188, 1002.2977294922, 0, 0, 89.302215576172, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3089, 2155.3693847656, 1611.3773193359, 1006.5086669922, 0, 0, 89.296875, -1, 1, -1, MAX_RADIO_STREAM);

// TRFICANTES PUERTAS CERRADAS (Interior)
	CreateDynamicObjectExULP(2885, 2522.3225097656, -1303.2750244141, 1053.9998779297, 0, 0, 269.93450927734, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2200, 2522.751953125, -1301.4039306641, 1047.2890625, 0, 0, 90.065490722656, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2200, 2522.751953125, -1303.6520996094, 1047.289062, 0, 0, 90.060424804688, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2608, 2522.8081054688, -1305.2833251953, 1048.7342529297, 0, 0, 89.302215576172, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3036, 2522.0739746094, -1304.1115722656, 1049.0592041016, 0, 0, 90.065490722656, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1536, 2522.5227050781, -1287.4306640625, 1053.640625, 0, 0, 89.302215576172, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1536, 2522.4973144531, -1284.4114990234, 1053.640625, 0, 0, 269.17120361328, -1, 3, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3036, 2522.0185546875, -1288.9744873047, 1055.4107666016, 0, 0, 90.060424804688, -1, 3, -1, MAX_RADIO_STREAM);

// UNIVERSIDAD
	CreateObjectEx(14415, 2626.685546875, -1326.5341796875, 1014.8243408203, 0, 0, 0, MAX_RADIO_STREAM);
	CreateObjectEx(14415, 2677.873046875, -1308.4619140625, 1014.8280029297, 0, 0, 181.38977050781, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1506, 2610.8735351563, -1331.0836181641, 1008.6602783203, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1506, 2612.3718261719, -1331.0830078125, 1008.6602783203, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2205, 2609.2744140625, -1338.9444580078, 1008.6602783203, 0, 0, 89.041351318359, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2205, 2643.5034179688, -1334.0151367188, 1008.6602783203, 0, 0, 90.75, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2205, 2643.4956054688, -1315.5096435547, 1008.6602783203, 0, 0, 90, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2205, 2670.5888671875, -1321.3560791016, 1008.6602783203, 0, 0, 92.28515625, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2205, 2675.3493652344, -1297.0847167969, 1008.6602783203, 0, 0, 91.521606445313, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2610.4169921875, -1339.11328125, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2610.4169921875, -1338.5886230469, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2610.4169921875, -1338.0632324219, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2610.4169921875, -1337.5378417969, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2610.4169921875, -1332.3654785156, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2610.4169921875, -1332.8896484375, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2610.4169921875, -1333.4143066406, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2610.4169921875, -1333.9387207031, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2612.8903808594, -1338.587890625, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2612.8896484375, -1339.1125488281, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2612.8896484375, -1338.0629882813, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2612.8896484375, -1337.5378417969, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2612.8896484375, -1332.3666992188, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2612.8896484375, -1332.8908691406, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2612.8896484375, -1333.4152832031, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2612.8896484375, -1333.9396972656, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2615.5129394531, -1339.1123046875, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2615.5126953125, -1338.5876464844, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2615.5126953125, -1338.0622558594, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2615.5126953125, -1337.5368652344, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2615.5129394531, -1332.2912597656, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2615.5126953125, -1332.8156738281, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2615.5126953125, -1333.4152832031, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2615.5126953125, -1333.9396972656, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2205, 2609.2744140625, -1333.9226074219, 1008.6602783203, 0, 0, 89.038696289063, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2205, 2611.8227539063, -1333.921875, 1008.6602783203, 0, 0, 89.038696289063, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2205, 2611.822265625, -1338.943359375, 1008.6602783203, 0, 0, 89.038696289063, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2205, 2614.4455566406, -1338.943359375, 1008.6602783203, 0, 0, 89.038696289063, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2205, 2614.4453125, -1333.9216308594, 1008.6602783203, 0, 0, 89.038696289063, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2207, 2604.54296875, -1336.708984375, 1008.6602783203, 0, 359.23645019531, 90.060424804688, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1714, 2603.2890625, -1335.744140625, 1008.6602783203, 0, 0, 90.060424804688, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2644.541015625, -1332.5482177734, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2638.9716796875, -1321.7321777344, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2671.83984375, -1302.5979003906, 1009.1631469727, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2207, 2629.8520507813, -1336.8947753906, 1008.6602783203, 0, 359.23095703125, 90.054931640625, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2207, 2630.1472167969, -1318.5211181641, 1008.6602783203, 0, 359.23095703125, 90.054931640625, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2207, 2661.7963867188, -1318.3527832031, 1008.6639404297, 0, 359.23095703125, 90.818481445313, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2207, 2661.7087402344, -1299.9425048828, 1008.6639404297, 0, 359.23095703125, 90.804931640625, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1714, 2628.4946289063, -1335.9669189453, 1008.6602783203, 0, 0, 90.054931640625, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1714, 2628.6655273438, -1317.599609375, 1008.6602783203, 0, 0, 90.054931640625, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1714, 2660.5412597656, -1317.4033203125, 1008.6639404297, 0, 0, 93.113494873047, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1714, 2660.2507324219, -1299.029296875, 1008.6639404297, 0, 0, 92.304931640625, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1491, 2698.4641113281, -1314.1630859375, 1008.6639404297, 0, 0, 271.46105957031, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1491, 2698.5454101563, -1317.1854248047, 1008.6639404297, 0, 0, 90.823974609375, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1491, 2693.5234375, -1303.5184326172, 1008.6639404297, 0, 0, 180.88903808594, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1491, 2690.5249023438, -1303.5925292969, 1008.6639404297, 0, 0, 1.5217895507813, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1491, 2685.5776367188, -1298.5700683594, 1008.6639404297, 0, 0, 91.587066650391, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1491, 2685.4611816406, -1295.533203125, 1008.6639404297, 0, 0, 271.45104980469, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1491, 2670.146484375, -1312.0690917969, 1008.6639404297, 0, 0, 181.38525390625, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1491, 2667.1545410156, -1312.2041015625, 1008.6641235352, 0, 0, 2.2774047851563, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1491, 2669.9401855469, -1303.6134033203, 1008.6639404297, 0, 0, 181.38427734375, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1491, 2666.9287109375, -1303.734375, 1008.6602783203, 0, 0, 2.274169921875, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2205, 2672.9060058594, -1321.2258300781, 1008.6602783203, 0, 0, 92.28515625, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2205, 2675.2416992188, -1321.0959472656, 1008.6602783203, 0, 0, 92.289825439453, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2205, 2670.3413085938, -1315.1105957031, 1008.6602783203, 0, 0, 91.5, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2205, 2672.6801757813, -1315.0705566406, 1008.6602783203, 0, 0, 91.521606445313, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2205, 2675.0048828125, -1314.8835449219, 1008.6602783203, 0, 0, 91.526550292969, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2676.1896972656, -1319.6309814453, 1009.1631469727, 0, 0, 3.0487060546875, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2676.2099609375, -1320.1555175781, 1009.1631469727, 0, 0, 3.043212890625, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2676.23046875, -1320.6799316406, 1009.1631469727, 0, 0, 3.043212890625, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2676.2509765625, -1321.2041015625, 1009.1631469727, 0, 0, 3.0377197265625, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2675.9558105469, -1313.3336181641, 1009.1631469727, 0, 0, 3.043212890625, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2675.9670410156, -1313.8576660156, 1009.1631469727, 0, 0, 3.043212890625, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2675.9787597656, -1314.3820800781, 1009.1631469727, 0, 0, 3.043212890625, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2675.990234375, -1314.90625, 1009.1631469727, 0, 0, 3.0377197265625, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2673.5939941406, -1315.0554199219, 1009.1631469727, 0, 0, 3.0377197265625, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2673.5817871094, -1314.5300292969, 1009.1631469727, 0, 0, 3.0377197265625, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2673.572265625, -1314.0045166016, 1009.1631469727, 0, 0, 3.0377197265625, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2673.5380859375, -1313.4801025391, 1009.1631469727, 0, 0, 3.0377197265625, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2671.2155761719, -1315.1363525391, 1009.1631469727, 0, 0, 3.0377197265625, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2671.1892089844, -1314.6110839844, 1009.1631469727, 0, 0, 3.0377197265625, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2671.1628417969, -1314.0856933594, 1009.1631469727, 0, 0, 3.0377197265625, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2671.1364746094, -1313.5603027344, 1009.1631469727, 0, 0, 3.0377197265625, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2673.7790527344, -1321.3233642578, 1009.1631469727, 0, 0, 3.0377197265625, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2673.7680664063, -1320.7985839844, 1009.1631469727, 0, 0, 3.0377197265625, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2673.7573242188, -1320.2731933594, 1009.1631469727, 0, 0, 3.0377197265625, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2673.7465820313, -1319.7478027344, 1009.1631469727, 0, 0, 3.0377197265625, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2671.4880371094, -1321.4466552734, 1009.1631469727, 0, 0, 3.0377197265625, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2671.4599609375, -1320.9216308594, 1009.1631469727, 0, 0, 3.0377197265625, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2671.4326171875, -1320.3962402344, 1009.1631469727, 0, 0, 3.0377197265625, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2671.4052734375, -1319.8708496094, 1009.1631469727, 0, 0, 3.0377197265625, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2205, 2672.9501953125, -1297.146484375, 1008.6602783203, 0, 0, 91.521606445313, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2205, 2670.7766113281, -1297.203125, 1008.6602783203, 0, 0, 91.521606445313, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2205, 2675.4870605469, -1302.4055175781, 1008.6602783203, 0, 91.521606445313, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2205, 2673.087890625, -1302.4677734375, 1008.6602783203, 0, 0, 91.521606445313, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2205, 2670.9143066406, -1302.5220947266, 1008.6602783203, 0, 0, 91.521606445313, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2671.8303222656, -1302.0727539063, 1009.1631469727, 0, 0, 1.5, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2671.8337402344, -1301.5461425781, 1009.1631469727, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2671.8249511719, -1301.0207519531, 1009.1631469727, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2674.0043945313, -1301.0595703125, 1009.1631469727, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2674.0124511719, -1301.5842285156, 1009.1631469727, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2674.0202636719, -1302.1086425781, 1009.1631469727, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2674.0280761719, -1302.6330566406, 1009.1631469727, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2676.5007324219, -1302.5925292969, 1009.1631469727, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2676.486328125, -1302.0671386719, 1009.1631469727, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2676.47265625, -1301.5417480469, 1009.1631469727, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2676.458984375, -1301.0163574219, 1009.1631469727, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2671.5900878906, -1295.6271972656, 1009.1631469727, 0, 0, 0.75, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2671.6411132813, -1297.2009277344, 1009.1631469727, 0, 0, 0.7470703125, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2671.6235351563, -1296.6755371094, 1009.1631469727, 0, 0, 0.7470703125, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2671.6059570313, -1296.1501464844, 1009.1631469727, 0, 0, 0.7470703125, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2673.8107910156, -1295.650390625, 1009.1631469727, 0, 0, 0.7470703125, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2673.9028320313, -1297.1469726563, 1009.1631469727, 0, 0, 0.7470703125, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2673.8425292969, -1296.1734619141, 1009.1631469727, 0, 0, 0.7470703125, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2673.8742675781, -1296.696655273, 1009.1631469727, 0, 0, 0.7470703125, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2676.2258300781, -1297.0216064453, 1009.1631469727, 0, 0, 0.7470703125, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2676.2138671875, -1296.5717773438, 1009.1631469727, 0, 0, 0.7470703125, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2676.2001953125, -1296.0466308594, 1009.1631469727, 0, 0, 0.7470703125, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2676.1865234375, -1295.5212402344, 1009.1631469727, 0, 0, 0.7470703125, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2205, 2641.1821289063, -1334.0489501953, 1008.6602783203, 0, 0, 90.7470703125, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2205, 2638.9328613281, -1334.0810546875, 1008.6602783203, 0, 0, 90.7470703125, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2205, 2639.0207519531, -1339.1770019531, 1008.6602783203, 0, 0, 90.7470703125, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2205, 2641.1791992188, -1339.1435546875, 1008.6602783203, 0, 0, 90.7470703125, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2205, 2643.5844726563, -1339.1088867188, 1008.6602783203, 0, 0, 90.7470703125, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2644.5529785156, -1333.0725097656, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2644.5646972656, -1333.5969238281, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2644.5764160156, -1334.1213378906, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2642.0747070313, -1332.5717773438, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2642.0861816406, -1333.0959472656, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2642.0979003906, -1333.6203613281, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2642.1079101563, -1334.0698242188, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2639.8588867188, -1334.1242675781, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2639.8464355469, -1333.5993652344, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2639.8337402344, -1333.0739746094, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2639.8210449219, -1332.5485839844, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2639.9392089844, -1339.2928466797, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2639.9350585938, -1338.7673339844, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2639.9311523438, -1338.2419433594, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2639.9272460938, -1337.7165527344, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2642.025390625, -1337.6987304688, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2642.0288085938, -1338.2229003906, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2642.0317382813, -1338.7473144531, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2642.0346679688, -1339.2717285156, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2644.4326171875, -1339.251953125, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2644.4291992188, -1338.7272949219, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2644.4252929688, -1338.2019042969, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2644.4213867188, -1337.6765136719, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2205, 2640.7739257813, -1315.4799804688, 1008.6602783203, 0, 0, 90, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2205, 2637.9323730469, -1315.2995605469, 1008.6602783203, 0, 0, 90, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2205, 2638.0678710938, -1321.5961914063, 1008.6602783203, 0, 0, 90, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2205, 2640.9860839844, -1321.6859130859, 1008.6602783203, 0, 0, 90, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2205, 2643.5417480469, -1321.6434326172, 1008.6602783203, 0, 0, 90, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2638.96484375, -1321.2067871094, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2638.9580078125, -1320.6813964844, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2638.951171875, -1320.1560058594, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2641.8740234375, -1320.2445068359, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2641.8706054688, -1320.7687988281, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2641.8666992188, -1321.2932128906, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2641.8627929688, -1321.8176269531, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2644.410644531, -1321.7915039063, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2644.4050292969, -1321.2663574219, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2644.399169921, -1320.7409667969, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2644.3933105469, -1320.2155761719, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2644.4477539063, -1315.6286621094, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2644.4370117188, -1315.1032714844, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2644.4262695313, -1314.5778808594, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2644.4155273438, -1314.0524902344, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2641.7131347656, -1315.5516357422, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2638.8149414063, -1315.3913574219, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2641.7094726563, -1315.0261230469, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2641.7055664063, -1314.5007324219, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2641.7016601563, -1313.9753417969, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2638.7990722656, -1314.8659667969, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2638.7834472656, -1314.3405761719, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2310, 2638.7678222656, -1313.8151855469, 1009.1594848633, 0, 0, 0, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1491, 2652.2978515625, -1316.3265380859, 1008.6639404297, 0, 0, 270.0241394043, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1491, 2652.3791503906, -1319.328125, 1008.6639404297, 0, 0, 92.272064208984, -1, -1, 2, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1491, 2618.6645507813, -1339.2912597656, 1008.6639404297, 0, 0, 90.768676757813, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1491, 2618.625, -1336.29296875, 1008.6639404297, 0, 0, 270.01342773438, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1491, 2634.4997558594, -1323.0340576172, 1008.6639404297, 0, 0, 358.51095581055, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1491, 2637.4975585938, -1323.0837402344, 1008.6639404297, 0, 0, 179.25805664063, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1491, 2634.4982910156, -1331.5793457031, 1008.6639404297, 0, 0, 0.005859375, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1491, 2637.5354003906, -1331.5544433594, 1008.6639404297, 0, 0, 180.0029296875, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1536, 2707.3266601563, -1313.9790039063, 1008.6639404297, 0, 0, 272.25, -1, 2, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1536, 2707.4279785156, -1316.9675292969, 1008.6639404297, 0, 0, 89.999694824219, -1, 2, -1, MAX_RADIO_STREAM);

// MECÁNICOS 15 (Interior)
	CreateDynamicObjectExULP(1501, -2171.09765625, 639.95935058594, 1051.3760986328, 0, 0, 0, -1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1487, -2161.607421875, 643.72943115234, 1057.5837402344, 0, 0, 0, -1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1665, -2161.6474609375, 644.39459228516, 1057.3967285156, 0, 0, 0, -1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2863, -2162.7590332031, 639.26861572266, 1057.5032958984,  0, 0, 0, -1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2852, -2160.8623046875, 643.85681152344, 1057.3862304688,  0, 0, 0, -1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2421, -2157.4594726563, 638.83605957031, 1057.4116210938,  0, 0, 270, -1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1668, -2160.0932617188, 643.49816894531, 1057.5529785156,  0, 0, 0, -1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2255, -2160.103515625, 646.78302001953, 1059.4760742188,  0, 0, 0, -1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2966, -2166.3723144531, 644.45825195313, 1057.1312255859,  0, 0, 83.25, -1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1665, -2166.4992675781, 643.97052001953, 1057.1120605469,  0, 0, 0, -1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1736, -2162.3266601563, 646.91302490234, 1059.9112548828,  0, 0, 0, -1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2829, -2160.8640136719, 637.14019775391, 1057.4418945313,  0, 0, 0, -1, 15, -1, MAX_RADIO_STREAM);
	
// MECÁNICOS 1 (Interior)
	CreateDynamicObjectExULP(13028, 603.45166015625, -7.929313659668, 1001.8225708008,  0, 0, 0, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13028, 603.451171875, -12.532783508301, 1001.8225708008,  0, 0, 0, -1, 1, -1, MAX_RADIO_STREAM);

// Mecánicos SF Oficina
// OLD
/*	CreateDynamicObjectExULP(3961, 603.7138671875, -22.361328125, 1134.9906005859,  0, 0, 0, -1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2875, 607.71142578125, -22.517490386963, -2147483648, 0, 0, 0, -1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14814, 596.57836914063, -11.949591636658, 1000.5054321289, 0, 0, 0, -1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2885, 592.76147460938, -20.690242767334, 1002.7877197266, 0, 0, 0, -1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2885, 592.14697265625, -14.934362411499, 1002.7877197266, 0, 0, 270, -1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2885, 596.7490234375, -14.625913619995, 1002.7877197266, 0, 0, 270, -1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2885, 591.52459716797, -20.41508102417, 1003.1632080078, 270.85317993164, 358.17834472656, 88.128173828125, -1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2605, 593.60382080078, -17.028011322021, 999.20397949219, 0, 0, 359.23645019531, -1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2161, 596.40734863281, -17.243410110474, 998.80554199219, 0, 0, 269.99963378906, -1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2167, 594.59881591797, -20.089738845825, 998.80554199219, 0, 0.75, 180.7470703125, -1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2161, 593.47338867188, -20.177175521851, 998.80554199219, 0, 0.75, 180.7495880127, -1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2309, 593.66387939453, -17.903856277466, 998.80554199219, 0, 0, 359.24264526367, -1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2309, 592.89587402344, -15.908222198486, 998.80554199219, 0, 0, 200.24197387695, -1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2309, 594.19976806641, -15.908203125, 998.80554199219, 0, 0, 158.98681640625, -1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14819, 596.68048095703, -15.24370765686, 999.95544433594, 0, 0, 270, -1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14819, 614.15008544922, 4.171290397644, 1001.4285888672, 0, 0, 0.75, -1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2957, 594.38842773438, -7.2061157226563, 1000.4253540039, 0, 0, 179.99993896484, -1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2885, 592.146484375, -3.883819103241, 1002.7877197266, 0, 0, 270, -1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2885, 596.74975585938, -3.653021812439, 1002.7877197266, 0, 0, 270, -1, 15, -1, MAX_RADIO_STREAM);
	CreateObjectEx(14814, 592.43518066406, -15.785945892334, 1000.5054321289, 0, 359.25, 180, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2309, 592.58807373047, -9.0020942687988, 998.80554199219, 0, 0, 268.48315429688, -1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2309, 592.587890625, -9.5390949249268, 998.80554199219, 0, 0, 268.47839355469, -1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2309, 592.587890625, -10.076204299927, 998.80554199219, 0, 0, 268.47839355469, -1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2309, 592.587890625, -10.613313674927, 998.80554199219, 0, 0, 268.47839355469, -1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2309, 593.73870849609, -10.61328125, 998.80554199219, 0, 0, 268.47839355469, -1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2309, 593.73828125, -10.076139450073, 998.80554199219, 0, 0, 268.47839355469, -1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2309, 593.73828125, -9.5380535125732, 998.80554199219, 0, 0, 268.47839355469, -1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2309, 593.73828125, -8.9999675750732, 998.80554199219, 0, 0, 268.47839355469, -1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1750, 596.40795898438, -10.424841880798, 999.57379150391, 0, 0, 269.25, -1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1785, 596.17254638672, -9.5956687927246, 999.69879150391, 0, 0, 90, -1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2175, 596.00390625, -9.7148456573486, 998.80554199219, 0, 0, 269.25, -1, 15, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2885, 591.29937744141, -9.3150119781494, 1003.1632080078, 271.12655639648, 40.804107666016, 130.74383544922, -1, 15, -1, MAX_RADIO_STREAM);*/
// NEW
	CreateDynamicObjectExULP(14814,2144.795898,2417.053710,66.003837,0.000000,0.000000,90.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2150.684814,2412.790283,64.277328,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2145.229980,2412.790039,64.277328,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2140.000000,2412.790039,64.277328,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2134.500000,2412.790039,64.277328,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2136.349609,2415.634765,64.277328,0.000000,0.000000,270.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2136.349609,2421.000000,64.277328,0.000000,0.000000,270.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2140.063476,2419.778320,64.277328,0.000000,0.000000,270.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2138.297851,2421.375000,64.277328,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2153.800048,2417.090087,64.277328,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2142.775390,2417.089843,64.277328,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2148.299804,2417.089843,64.277328,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2153.258789,2414.984375,64.277328,0.000000,0.000000,90.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2133.779296,2417.089843,64.277328,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2605,2140.282226,2415.254882,64.702392,0.000000,0.000000,270.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2161,2139.206054,2416.981445,64.303955,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2309,2141.855957,2415.737060,64.303955,0.000000,0.000000,126.942932,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2309,2141.851806,2414.549560,64.303955,0.000000,0.000000,72.079650,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2309,2139.126708,2415.239501,64.303955,0.000000,0.000000,271.546386,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2309,2151.519531,2416.655517,64.303955,0.000000,0.000000,180.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2309,2150.819580,2416.655273,64.303955,0.000000,0.000000,179.994506,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2309,2150.119384,2416.655273,64.303955,0.000000,0.000000,179.994506,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2309,2149.419189,2416.655273,64.303955,0.000000,0.000000,179.994506,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2309,2148.718994,2416.655273,64.303955,0.000000,0.000000,179.994506,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2309,2151.519531,2415.500000,64.303955,0.000000,0.000000,179.994506,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2309,2150.819335,2415.500000,64.303955,0.000000,0.000000,179.994506,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2309,2150.119140,2415.500000,64.303955,0.000000,0.000000,179.994506,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2309,2149.418945,2415.500000,64.303955,0.000000,0.000000,179.994506,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2309,2148.718750,2415.500000,64.303955,0.000000,0.000000,179.994506,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2175,2150.271240,2413.419677,64.303955,0.000000,0.000000,179.994506,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1750,2149.811523,2413.087646,65.063568,0.000000,0.000000,180.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1536,2146.056396,2412.816406,64.303955,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2067,2139.699218,2417.160156,64.303955,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2067,2139.120117,2417.160156,64.303955,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2067,2138.549804,2417.160156,64.303955,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2067,2138.549804,2417.160156,65.699996,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2067,2139.699218,2417.160156,65.699996,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2067,2139.120117,2417.160156,65.699996,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2607,2136.829345,2419.777587,64.699638,0.000000,0.000000,90.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2309,2139.329345,2420.089355,64.303955,0.000000,0.000000,147.059936,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2377,2140.022460,2418.189697,66.267425,0.000000,0.000000,270.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2399,2140.022460,2418.784912,66.277282,0.000000,0.000000,270.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2401,2140.022460,2419.434814,66.308311,0.000000,0.000000,270.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2844,2139.054199,2418.189941,64.303955,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2067,2137.979980,2417.160156,64.303955,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2067,2137.979980,2417.160156,65.699996,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2152.629638,2414.889160,68.001434,270.000000,0.000000,90.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2147.814941,2414.819824,68.001434,270.000000,0.000000,90.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2142.678466,2414.941650,68.001434,270.000000,0.000000,90.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2137.781250,2414.938964,68.001434,270.000000,0.000000,90.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(988,2140.526123,2420.269531,68.001434,270.000000,0.000000,90.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2001,2145.706787,2413.248291,64.303955,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2001,2147.954833,2413.233886,64.303955,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2001,2138.200195,2416.701904,64.303955,0.000000,0.000000,0.000000,-1,3,-1,MAX_RADIO_STREAM);

// MECÁNICOS WILLY (Interior)
	CreateDynamicObjectExULP(10558,622.7451171875,6.8134765625,1001.9000244141,0,0,0, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(10558,622.7451171875,-1.9599609375,1001.9000244141,0,0,0, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(17951,622.486328125,-1.4755859375,1001.6987915039,0,0,0, -1, 1, -1, MAX_RADIO_STREAM);

// TAXISTAS (Exterior)
	CreateDynamicObjectExULP(966,1811.61755400,-1893.14904800,12.40568200,0,0,270.00000112, -1, 0, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,1811.23535200,-1931.55322300,16.86069100,0,0,0,-1, 0, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,1811.24621600,-1918.77441400,16.86069100,0,0,0,-1, 0, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,1811.25927700,-1905.97265600,16.86069100,0,0,0,-1, 0, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,1811.22937000,-1939.53039600,16.90756600,0,0,0,-1, 0, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,1774.38269000,-1924.28137200,13.02193500,0,0,0,-1, 0, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,1774.36706500,-1913.06848100,13.02188800,0,0,0,-1, 0, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,1777.59399400,-1930.67578100,13.07110900,0,0,89.99998128,-1, 0, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,1777.60095200,-1925.86022900,13.07111400,0,0,89.99998128,-1, 0, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,1777.54895000,-1921.10949700,13.07127700,0,0,89.99998128,-1, 0, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,1777.56396500,-1916.26049800,13.07108600,0,0,89.99998128,-1, 0, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,1777.57348600,-1911.51355000,13.07109500,0,0,89.99998128,-1, 0, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,1806.59069800,-1924.36633300,13.02481700,0,0,0,-1, 0, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,1806.60559100,-1913.15612800,13.03027900,0,0,0,-1, 0, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,1803.41601600,-1930.67810100,13.07089300,0,0,89.99998128,-1, 0, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,1803.37475600,-1925.86022900,13.07326000,0,0,89.99998128,-1, 0, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,1803.40991200,-1921.09057600,13.07557700,0,0,-89.99998128,-1, 0, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,1803.40246600,-1916.26538100,13.07797000,0,0,89.99998128,-1, 0, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,1803.38403300,-1911.49816900,13.08027400,0,0,89.99998128,-1, 0, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1809.68420400,-1896.25476100,13.14244800,0,0,0,-1, 0, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1809.85827600,-1882.84130900,13.14743100,0,0,0,-1, 0, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1790.43981900,-1882.96569800,13.13320500,0,0,0,-1, 0, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1809.38330100,-1939.05261200,13.11181900,0,0,0,-1, 0, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1753.10925300,-1885.58960000,13.12157700,0,0,0,-1, 0, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1762.03881800,-1939.27856400,13.14531800,0,0,0,-1, 0, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8841,1790.23498500,-1916.30114700,15.72254400,0,0,89.99998128,-1, 0, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1229,1814.08300800,-1900.57678200,14.13409000,0,0,180.00001985,-1, 0, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1790.21594200,-1909.40441900,13.27124200,0,0,0,-1, 0, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1790.30761700,-1924.93884300,13.27124200,0,0,0,-1, 0, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1251,1806.71691900,-1903.15393100,12.50548000,0,0,0,-1, 0, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1251,1778.51391600,-1884.81921400,12.49285700,0,0,-89.99998128,-1, 0, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1251,1784.06616200,-1884.80993700,12.49698100,0,0,-89.99998128,-1, 0, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1251,1785.39465300,-1884.80957000,12.50185800,0,0,-89.99998128,-1, 0, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(18014,1794.75390600,-1882.50024400,13.00386000,0,0,89.99998128,-1, 0, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(18014,1800.19873000,-1882.48095700,13.00808800,0,0,-89.99998128,-1, 0, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(18014,1805.66833500,-1882.49377400,13.01196700,0,0,89.99998128,-1, 0, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4100,1811.32360800,-1901.26477100,14.27034500,0,0,50.15661079,-1, 0, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4100,1807.64477500,-1878.48669400,14.28530000,0,0,82.34240034,-1, 0, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4100,1777.08715800,-1942.64843800,14.26918900,0,0,-39.76602118,-1, 0, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(18014,1770.25415000,-1932.17126500,12.98933400,0,0,0,-1, 0, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(18014,1770.21923800,-1926.70959500,12.98940200,0,0,0,-1, 0, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(18014,1770.22265600,-1921.15246600,12.98939500,0,0,0,-1, 0, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(18014,1770.19799800,-1915.76867700,12.98944500,0,0,0,-1, 0, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(18014,1770.19665500,-1910.30651900,12.98959400,0,0,0,-1, 0, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,1803.44897500,-1906.80920400,13.08256400,0,0,89.99998128,-1, 0, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,1777.56140100,-1906.67724600,13.07108400,0,0,89.99998128,-1, 0, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(9345,1762.52783200,-1895.23022500,12.81165700,0,0,-180.00001985,-1, 0, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(4100,1763.37060500,-1942.58325200,14.27513000,0,0,-40.62545787,-1, 0, -1, MAX_RADIO_STREAM);

// YKZ (Exterior)
	CreateDynamicObjectExULP(3475,-2306.95825200,2337.47241200,6.36055000,0,0,-78.75001226,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,-2301.15771500,2338.63501000,6.36055000,0,0,-78.75001226,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,-2295.32299800,2339.84301800,6.36684000,0,0,-78.75001226,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,-2289.57714800,2340.97021500,6.35890500,0,0,-78.75001226,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,-2283.85571300,2342.13525400,6.37740700,0,0,-78.75001226,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,-2278.87988300,2344.69287100,6.36727000,0,0,-43.51310786,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3749,-2273.75195300,2352.43750000,9.67091500,0,0,56.25001695,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,-2266.33935500,2362.50097700,6.53230900,0,0,-33.75002163,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,-2263.07788100,2367.45263700,6.54693100,0,0,-33.75002163,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,-2259.74047900,2372.34716800,6.55623300,0,0,-33.75002163,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,-2256.42871100,2377.18652300,6.55317600,0,0,-33.75002163,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,-2251.28979500,2385.06347700,6.48484500,0,0,-44.99999064,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,-2247.51147500,2388.85083000,6.46936500,0,0,-44.99999064,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(708,-2230.56103500,2301.16870100,4.67471600,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(708,-2244.94799800,2347.88989300,4.70572200,0,0,11.25002631,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,-2309.70312500,2334.12573200,7.67933700,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,-2310.17797900,2331.13574200,7.67933700,0,0,180.00001985,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1231,-2262.15283200,2280.90551800,6.70693300,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1231,-2254.44213900,2363.03002900,6.71553100,0,0,-44.99999064,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1231,-2207.16406300,2394.78759800,6.69093900,0,0,-44.99999064,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3877,-2239.69213900,2314.51586900,8.21261600,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3877,-2239.72094700,2338.76318400,8.21261600,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3877,-2215.75854500,2339.09130900,8.21261600,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3877,-2215.54077100,2314.49389600,8.21261600,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(7191,-2282.30371100,2313.13061500,5.99136000,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(7191,-2282.30712900,2314.26367200,5.95439800,0,0,180.00001985,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3528,-2281.17993200,2313.43457000,8.00401100,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2098,-2281.48535200,2318.36621100,5.91734300,0,0,89.99998128,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2098,-2281.21533200,2308.90869100,5.91321200,0,0,-89.99998128,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3525,-2280.20361300,2347.18188500,4.71289100,0,0,-123.74994561,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3525,-2271.33789100,2360.29687500,4.73053700,0,0,-123.74994561,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3361,-2279.47094700,2295.83984400,5.96190100,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3861,-2242.46899400,2292.34204100,5.30972400,0,0,-89.99998128,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(923,-2243.45043900,2288.68090800,4.87082000,0,0,89.99998128,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(923,-2307.58984400,2332.23071300,4.86406200,0,0,-89.99998128,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(922,-2302.05639600,2296.23706100,4.86991500,0,0,89.99998128,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(922,-2290.92822300,2232.29370100,4.86773100,0,0,-89.99998128,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(922,-2243.29638700,2296.93579100,4.89956500,0,0,89.99998128,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(922,-2201.34960900,2393.29760700,4.86023500,0,0,44.99999064,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1231,-2262.01049800,2313.57251000,6.54289300,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);

// DETECTIVES (Exterior)
	CreateDynamicObjectExULP(987,-2096.08227500,1437.08239700,7.41651200,0,0,270.00000112,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,-2096.09472700,1425.05383300,7.41651200,0,0,-89.99998128,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,-2096.06152300,1413.06445300,7.41651200,0,0,-89.99998128,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,-2096.05712900,1401.06262200,7.41651200,0,0,-89.99998128,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,-2096.03418000,1389.05163600,7.41651200,0,0,-89.99998128,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,-2096.01171900,1380.02758800,7.41651200,0,0,-89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,-2084.14550800,1437.07226600,7.41651000,0,0,-180.00001985,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,-2072.13891600,1437.13159200,7.41651000,0,0,179.99996255,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,-2060.12866200,1437.10668900,7.39141300,0,0,-180.00001985,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,-2060.34838900,1425.10803200,7.41657800,0,0,-270.00000112,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,-2060.32348600,1413.08850100,7.41657800,0,0,89.99998128,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,-2060.32910200,1401.08728000,7.41657800,0,0,89.99998128,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,-2060.32959000,1389.07885700,7.41657800,0,0,89.99998128,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,-2060.34594700,1377.07873500,7.41657800,0,0,89.99998128,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,-2060.34619100,1368.11669900,7.41657800,0,0,89.99998128,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3458,-2091.98071300,1397.40673800,7.62219200,0,0,-90.00003857, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3515,-2078.41210900,1396.58166500,6.92086800,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(9833,-2078.85302700,1396.46313500,11.02782600,0,0,22.49999532,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5837,-2078.17114300,1379.34252900,7.81905700,0,0,-89.99998128,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8168,-2066.86547900,1378.23632800,8.04863900,0,0,-73.59339211,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3522,-2077.86792000,1396.47741700,6.17908200,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3522,-2079.28881800,1396.51269500,6.17908200,0,0,180.00001985,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3877,-2067.79467800,1417.53942900,6.84230000,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1280,-2061.81420900,1399.44445800,6.50291800,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1280,-2061.59008800,1388.68273900,6.50202100,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1280,-2061.76928700,1409.99450700,6.50202100,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,-2093.11181600,1368.09655800,8.47773700,0,0,89.99998128,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,-2087.24902300,1368.09680200,8.47773700,0,0,89.99998128,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,-2087.26196300,1367.62146000,8.47773700,0,0,-89.99998128,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,-2063.22802700,1367.79907200,8.47683900,0,0,270.00000112,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,-2066.06982400,1368.27966300,8.47684100,0,0,89.99998128,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,-2069.06738300,1368.29272500,8.47684300,0,0,89.99998128,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1231,-2078.20288100,1388.63378900,8.83195500,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1231,-2078.14160200,1404.83837900,8.83195500,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-2078.16723600,1374.17358400,6.66588600,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-2061.64331100,1383.30944800,6.66498900,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-2061.38916000,1404.58361800,6.66498800,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-2061.59814500,1394.08386200,6.66588600,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-2092.40918000,1417.00097700,6.66498800,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-2092.35546900,1378.08691400,6.66588600,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-2061.69311500,1435.37121600,6.66498900,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-2061.94555700,1370.21118200,6.66499100,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,-2071.39746100,1368.31408700,8.47773700,0,0,89.99998128,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(966,-2081.49853500,1368.05615200,6.10156300,0,0,180.00001985,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,-2084.91796900,1367.63256800,8.47773700,0,0,270.00000112,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8572,-2080.29003900,1420.61120600,8.32582900,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateObjectEx(13694,-2077.09570300,1427.89685100,0.65574000,0,0,180.00001985, MAX_RADIO_STREAM); // CASA
	
// CNN OLD (Exterior)
/*	CreateDynamicObjectExULP(3458,783.51812700,-1357.91955600,14.06218900,0,0,89,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,752.19891400,-1330.99353000,13.18363100,0,0,89,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,745.81024200,-1334.23352100,13.22454200,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,750.59515400,-1334.15844700,13.22432200,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,755.43066400,-1334.19848600,13.22461700,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,756.98242200,-1330.99340800,13.23166400,0,0,89,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,760.16827400,-1334.16992200,13.22396700,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(5837,769.01068100,-1382.77880900,14.40184500,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3242,731.64202900,-1340.39111300,14.53825000,0,0,89,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13640,608.90954600,-1406.21838400,11.54373600,0,0,4,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13640,819.16741900,-1395.51110800,11.54397700,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);

	CreateDynamicObjectExULP(1215,740.96356200,-1330.97656300,13.11246900,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,732.70074500,-1350.03857400,13.07057500,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,785.73303200,-1331.74682600,13.10667900,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,785.23602300,-1382.98474100,13.27125000,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,761.61505100,-1383.43579100,13.24846600,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,786.25506600,-1358.16284200,13.10731700,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,765.06207300,-1331.20446800,13.11196800,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1231,752.39721700,-1345.72778300,15.24612000,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1231,771.06835900,-1346.49865700,15.25481200,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1231,771.67669700,-1368.38867200,15.25628700,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);*/
	
// ESTUDIO DE LA CNN (Interior)
	CreateDynamicObjectExULP(3494,1111.9545898438,1265.6226806641,13.834089279175,0,0,0, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(980,1100.6721191406,1257.6921386719,12.593704223633,0,360,90, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(980,1100.4470214844,1257.6870117188,12.593704223633,0,360,90, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(980,1101.2202148438,1259.3446044922,12.593704223633,0,360,90, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14570,1123.7626953125,1246.51171875,10.65,0,0,0, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14643,1107.9813232422,1266.003,11.105,0,0,0, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14639, 1108, 1266, 11.130000114441, 0, 0, 0, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(980, 1107.4444580078, 1266.6223144531, 12.593704223633, 0, 0, 359.99853515625, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(980, 1104.4404296875, 1266.5126953125, 12.593704223633, 0, 2.999267578125, 1.494140625, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(980, 1101.357421875, 1260.8046875, 12.593704223633, 0, 3.746337890625, 90.741577148438, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(980, 1124.6591796875, 1249.3427734375, 12.593704223633, 0, 0.7305908203125, 91.483154296875, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(980, 1108.6279296875, 1242.74, 12.593704223633, 0, 2.2247314453125, 179.97802734375, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(980, 1099.689453125, 1243.36328125, 12.593704223633, 0, 0.7196044921875, 179.97253417969, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(980, 1100.2064208984, 1249.3635253906, 12.593704223633, 0, 359.97198486328, 89.972442626953, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(980, 1100.908203125, 1257.6767578125, 12.593704223633, 0, 0.714111328125, 89.961547851563, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(980, 1100.81640625, 1240.3361816406, 12.593704223633, 0, 0.7196044921875, 89.967041015625, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2239, 1119.4477539063, 1256.0649414063, 9.8203125, 0, 0, 0, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2071, 1114.3017578125, 1262.240234375, 11.335710525513, 0, 0, 0, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3494, 1101.5737304688, 1266.3975830078, 13.834089279175, 0, 0, 0, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3494, 1124.2316894531, 1243.8117675781, 13.834089279175, 0, 0, 0, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3494, 1101.2893066406, 1244.0222167969, 13.834089279175, 0, 0, 0, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3935, 1103.462890625, 1264.3916015625, 11, 0, 0, 230.24597167969, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3494, 1112.0048828125, 1253.9541015625, 13.834089279175, 0, 0, 0, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11411, 1121.6123046875, 1204.333984375, 187.28453063965, 0, 0, 0, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14434, 1126.4398193359, 1259.7183837891, 15.189729690552, 0, 0, 227.25001525879, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14805, 1106.7786865234, 1257.6723632813, 10.5, 0, 0, 0, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2232, 1103.7802734375, 1262.4442138672, 10.418188095093, 0, 0, 38.25, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2232, 1105.4312744141, 1263.8988037109, 10.418188095093, 0, 0, 40.498901367188, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2184, 1116.5101318359, 1260.6485595703, 9.8203125, 0, 0, 313.5, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1714, 1118.0439453125, 1261.3361816406, 9.8203125, 0, 0, 316.5, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1714, 1118.7813720703, 1260.6511230469, 9.8203125, 0, 0, 316.49963378906, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2885, 1118.8818359375, 1243.1650390625, 16.531167984009, 0, 0, 0, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649, 1115.5650634766, 1266.2930908203, 12.284889221191, 0, 0, 349.5, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649, 1119.5104980469, 1264.8681640625, 12.284889221191, 0, 0, 333.7470703125, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649, 1121.4139404297, 1263.4202880859, 12.284889221191, 0, 0, 321.74267578125, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649, 1122.9835205078, 1261.3603515625, 12.284889221191, 0, 0, 306.74011230469, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649, 1124.1115722656, 1258.9637451172, 12.284889221191, 0, 0, 293.98828125, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1649, 1124.6114501953, 1256.2707519531, 12.284889221191, 0, 0, 279.73315429688, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14391, 1116.6700439453, 1247.9782714844, 10.780397415161, 0, 0, 179.78149414063, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1714, 1114.6756591797, 1245.7924804688, 9.8203125, 0, 0, 86.241943359375, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3031, 1116.3475341797, 1254.9689941406, 11.424069404602, 0, 0, 59.999969482422, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3031, 1113.8498535156, 1258.5340576172, 11.424069404602, 0, 0, 29.996337890625, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14632, 1109.8618164063, 1253.2811279297, 11.319982528687, 0, 0, 180, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1714, 1114.6750488281, 1247.2475585938, 9.8203125, 0, 0, 86.241943359375, -1, 1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1714, 1114.6557617188, 1248.8068847656, 9.8203125, 0, 0, 86.241943359375, -1, 1, -1, MAX_RADIO_STREAM);

// OTROS PAISAJES LS - SF (Exterior)
	CreateDynamicObjectExULP(624,-157.10893200,-1416.48730500,1.40354700,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(624,-160.80497700,-1393.60376000,1.40354700,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(624,-162.71316500,-1370.66857900,1.40354700,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(624,-161.72607400,-1346.89636200,1.40354700,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(624,-160.08486900,-1323.20019500,1.40354700,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(624,-157.84442100,-1299.03161600,1.40354700,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(7595,-126.32838400,-1222.41723600,3.71471100,0,0,-14.76506508,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(7595,-137.60986300,-1415.79858400,3.71471100,0,0,15.54715248,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(7595,-114.72329700,-1463.70532200,3.71471100,0,0,36.32833170,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(694,-120.85666700,-1502.96057100,8.50689300,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(694,-106.24447600,-1345.55786100,7.58680700,0,0,-101.25000758,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(694,-54.91997100,-1088.66503900,10.02390700,0,0,-101.25000758,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(694,-146.34655800,-1139.85803200,7.56457900,0,0,-101.25000758,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(16777,-312.20611600,-879.20336900,46.19380600,0,0,-22.49999532,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(647,-321.80581700,-879.71093800,49.40503300,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(647,-324.20513900,-878.81939700,49.01303100,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(647,-332.60559100,-875.14221200,49.29985000,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(647,-335.84845000,-874.01001000,49.39725500,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-318.56030300,-878.86377000,47.40609000,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-337.35534700,-870.91387900,47.22341900,0,0,0,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(694,-131.24736000,-951.70269800,27.37740700,0,0,-112.49997660,-1, -1, -1, MAX_RADIO_STREAM);
	
// MOTEL (Exterior)
	CreateObjectEx(3596,-333.24868800,-888.47235100,50.13629500,0,0,157.49996723, MAX_RADIO_STREAM); // Motel

	// PUERTA INTERIOR
	CreateDynamicObjectExULP(3051,966.39483642578,-52.608592987061,1001.4867553711,0,0,45.75,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3051,966.40460205078,-53.733352661133,1001.4867553711,0,0,226.97766113281,-1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3051,966.38757324219,-53.166976928711,1003.3112182617,40.500152587891,270,89.7275390625,-1, -1, -1, MAX_RADIO_STREAM);
	
/* // PUERTAS ENCIMA DEL AYUNTAMIENTO
	CreateDynamicObjectExULP(18553, 1438.141723632, -1788.7578125, 33.721633911133, 0, 0, 180, -1, -1, -1, MAX_RADIO_STREAM);*/
	CreateDynamicObjectExULP(1498, 371.25634765625, 166.6453704834, 1007.3828125, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1498, 368.86364746094, 161.56318664551, 1013.1875, 0, 0, 90, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3051, 368.42947387695, 162.92672729492, 1026.1585693359, 0, 0, 46.5, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3051, 368.42977905273, 161.72286987305, 1026.1585693359, 0, 0, 46.499633789063, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3051, 368.82754516602, 162.9363861084, 1020.3465576172, 0, 0, 46.499633789063, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3051, 368.83151245117, 161.73362731934, 1020.3465576172, 0, 0, 46.499633789063, -1, -1, -1, MAX_RADIO_STREAM);

// PUERTAS DENTRO Y AFUERA DE LA LSPD
	CreateDynamicObjectExULP(3051, 216.8984375, 68.877731323242, 1005.4012451172, 0, 0, 46.5, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3051, 216.8984375, 67.708641052246, 1005.4088134766, 0, 0, 226.49964904785, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3051, 1565.48046875, -1667.3328857422, 28.757810592651, 0, 0, 316.5, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3051, 1564.2849121094, -1667.3303222656, 28.757810592651, 0, 0, 136.49639892578, -1, -1, -1, MAX_RADIO_STREAM);

// SFPD PUERTAS DE ADENTRO
	CreateDynamicObjectExULP(1965, 213.625, 122.01756286621, 999.29998779297, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1967, 213.625, 121.91562652588, 999.29998779297, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);

// SFPD PUERTA MOVIBLE DEL PARKING
	CreateDynamicObjectExULP(11416, -1619.462890625, 688.12097167969, 8.2872009277344, 0, 0, 271.12145996094, -1, -1, -1, MAX_RADIO_STREAM);

// SFPD GASOLINERA
	CreateDynamicObjectExULP(18452, -1638.5992431641, 692.74212646484, -3.29345703125, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1676, -1639.6861572266, 689.90002441406, -4.4625902175903, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1676, -1637.3282470703, 689.90002441406, -4.4625902175903, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1676, -1637.3205566406, 695.58819580078, -4.4625902175903, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1676, -1639.5950927734, 695.51446533203, -4.4625902175903, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);

//  ESCALERA CAMIONEROS
	CreateDynamicObjectExULP(5816, -503.28717041016, -511.05541992188, 30.200000762939, 0, 0, 270.02551269531, -1, -1, -1, MAX_RADIO_STREAM);

//  ESCALERA LICENCIEROS
	CreateDynamicObjectExULP(5821, -2017.5368652344, -108.44676971436, 34, 0, 0, 176.41748046875, -1, -1, -1, MAX_RADIO_STREAM_MIN);

// LSPD GASOLINERA
	CreateDynamicObjectExULP(18452, 1600.8446044922, -1709.8637695313, 7.83935546875, 0, 358.5, 0.75003051757813, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1676, 1599.7469482422, -1707.0134277344, -6.6432914733887, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1676, 1599.7469482422, -1712.6776123047, -6.6432914733887, 0, 0, 1.5, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1676, 1602.0893554688, -1712.6351318359, 6.7066731452942, 0, 0, 0.75, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1676, 1602.0893554688, -1707.0147705078, 6.7066731452942, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM);

// SFPD REJAS
	CreateDynamicObjectExULP(983,-1571.74047900,649.20849600,10.39629300,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,-1571.73681600,653.47583000,10.39629300,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(982,-1571.74829100,678.77667200,10.39628900,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,-1583.71472200,646.13043200,9.71273800,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,-1595.71728500,646.11431900,9.71273800,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,-1607.69397000,646.12329100,9.71273800,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,-1619.66784700,646.12524400,9.71273800,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,-1631.64843800,646.12616000,9.71273800,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,-1641.58630400,646.11096200,9.71273800,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,-1641.55053700,658.04064900,9.71273800,0,0,-89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,-1641.53576700,670.02948000,9.71273800,0,0,-89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,-1641.46655300,676.47729500,9.71273800,0,0,-89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,-1654.73754900,676.12023900,13.48500600,0,18.04817055,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,-1666.12341300,676.87878400,17.20855100,0,18.04817055,-3.51503878, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,-1677.33154300,679.11090100,20.93634800,0,18.04817055,-10.39058961, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,-1688.71594200,680.15197800,24.68732800,0,18.04817055,-6.09334886, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,-1699.69140600,680.05285600,26.82841700,2.57831008,11.17267701,-0.07729201, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,-1699.09191900,706.80188000,23.89062500,0,0,-89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,-1699.09106400,718.77087400,23.89062500,0,0,-89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,-1698.99060100,691.85675000,26.26680000,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,-1699.48681600,691.03820800,26.26680000,0,0,180.00001985, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,-1696.16687000,718.51055900,26.26680000,0,0,-89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,-1663.03259300,718.49542200,26.27374300,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(664,-1641.86743200,675.71752900,6.75880400,0,0,-168.74999354, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1267,-1571.47253400,646.18115200,22.25219300,0,0,270.00000112, -1, -1, -1, MAX_RADIO_STREAM);
	
// NFS GROTTI
	CreateDynamicObjectExULP(1522,534.52520800,-1294.39184600,16.17875500,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8168,567.12744100,-1287.35070800,18.19621100,0,0,297.73402320, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,565.98529100,-1270.08154300,16.80651100,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,551.84545900,-1260.17871100,16.80651100,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,534.02026400,-1273.47631800,16.80651100,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,516.09631300,-1287.41528300,16.80651100,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,497.31326300,-1303.22290000,16.80651100,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,513.68353300,-1329.71557600,16.80651100,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,575.53332500,-1313.89587400,16.80651100,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1216,437.41494800,-1299.31225600,14.84591400,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(966,560.68493700,-1254.15393100,15.92670400,0,0,28.51605217, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1214,561.73242200,-1253.18225100,15.97978400,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1214,553.58795200,-1258.18530300,15.91068300,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
// CAMIONEROS
	CreateDynamicObjectExULP(7834,-475.97964500,-544.95837400,28.16566700,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
// Peaje LS a SF
	CreateDynamicObjectExULP(10829,53.38740500,-1530.82275400,4.23331200,0,0,261.40569149, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1250,49.49018100,-1535.80004900,5.10075600,0,0,-7.81222224, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1250,56.90186300,-1528.36621100,4.94125500,0,0,-189.53111547, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(966,52.45056900,-1536.86682100,4.13187900,0,0,82.18770174, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(966,53.85026600,-1527.02954100,4.04501200,0,0,-97.81226081, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237,52.71272300,-1535.98632800,4.11685200,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1237,53.69006300,-1527.92981000,4.05946000,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(981,53.37887600,-1532.02929700,5.17495900,0,0,-7.81222224, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,58.17239400,-1529.47949200,7.76852800,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,57.22160700,-1535.73974600,7.76852800,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,48.21346300,-1534.41394000,7.79353100,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,49.14834200,-1528.10168500,7.76852800,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	
// ARBÓL GROVE
	CreateDynamicObjectExULP(709, 2489.2446,-1668.8193,8.3438,1,0, 100,-1, -1, -1, MAX_RADIO_STREAM);
	
// LSPD & AYUNTAMIENTO
	// LUCES Y HEAD AYUNTA
	CreateDynamicObjectExULP(1226,1504.877197,-1736.882934,16.426883,0.000000,0.000000,-90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,1484.863403,-1736.882934,16.426883,0.000000,0.000000,-90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,1467.689819,-1736.882934,16.426883,0.000000,0.000000,-90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1226,1451.385986,-1736.882934,16.426883,0.000000,0.000000,-90.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(10838,1481.226440,-1750.957641,39.503593,0.000000,0.000000,-89.999984,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8397,1479.464965,-1681.291625,23.246871,-179.000091,-180.900238,-720.100463,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(640,1466.453979,-1665.462524,13.748857,-359.509613,-1.999999,-179.690155,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(640,1492.224609,-1665.509521,13.746873,0.000000,-0.100000,-0.200000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1360,1468.342163,-1699.439941,13.826877,-0.000001,0.699998,0.600000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1361,1468.298950,-1696.698242,13.796873,0.000000,0.000000,-267.000000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1361,1468.279907,-1702.252563,13.796869,0.000000,0.000000,0.600000,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1360,1488.714477,-1699.098144,13.827877,-0.410079,0.000023,-0.000004,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1361,1488.658081,-1701.910034,13.846874,-2.500000,-0.299998,-406.399200,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1361,1488.689697,-1696.335449,13.806873,360.199554,-0.620565,307.749328,-1,-1,-1,MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1364,1468.516723,-1709.048583,13.886873,-1.591999,0.000000,-269.679809,-1,-1,-1,MAX_RADIO_STREAM);
	// ANTIGUO
	CreateDynamicObjectExULP(1216,1433.21447800,-1755.52148400,13.23887700,0,0,-180.000019850, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1216,1524.19311500,-1755.60424800,13.23887700,0,0,180.000019850, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(982,1466.66992200,-1737.48706100,13.23043000,0,0,89.999981280, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(982,1495.47729500,-1737.48925800,13.23043000,0,0,-89.999981280, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(982,1466.66418500,-1727.07727100,13.23043000,0,0,89.999981280, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(982,1495.30554200,-1727.12695300,13.23043000,0,0,89.999981280, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1214,1508.50415000,-1739.91247600,12.54088600,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1214,1508.52563500,-1742.29907200,12.54088600,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1214,1508.48754900,-1737.54711900,12.54088600,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1214,1453.63903800,-1737.49414100,12.54088600,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1214,1453.66101100,-1739.92492700,12.54088600,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1214,1453.66931200,-1742.23474100,12.54088600,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1214,1508.30969200,-1727.05542000,12.54088600,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1214,1508.25805700,-1724.13305700,12.54088600,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1214,1453.63818400,-1727.08581500,12.54088600,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1214,1453.56311000,-1724.17895500,12.54088600,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1214,1508.22204600,-1721.37829600,12.54088600,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1214,1453.52661100,-1721.40271000,12.54088600,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1257,1429.00903300,-1741.30810500,13.82606700,0,0,-89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1342,1487.54370100,-1709.58252000,14.08056800,0,0,-179.99996255, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8843,1480.69018600,-1734.49389600,12.38276600,0,0,-89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(8843,1480.53710900,-1730.04406700,12.38276600,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13640,1502.94702100,-1729.91296400,11.52808300,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(13640,1459.07605000,-1734.68371600,11.50308300,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,1547.70214800,-1635.34167500,14.65603100,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(638,1492.16516100,-1751.54089400,15.14234600,0,0,-89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(638,1486.57580600,-1751.55139200,15.14234600,0,0,-89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(638,1475.61254900,-1751.57775900,15.14234600,0,0,-89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(638,1470.13769500,-1751.54724100,15.14234600,0,0,-89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(638,1469.97326700,-1759.87085000,17.22828300,0,0,-89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(638,1492.47021500,-1759.88391100,17.22828300,0,0,-89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
//	CreateDynamicObjectExULP(3475,1539.32714800,-1826.66711400,14.92305000,0,0,180.00001985, -1, -1, -1, MAX_RADIO_STREAM);
//	CreateDynamicObjectExULP(3475,1539.33911100,-1832.54797400,14.92305000,0,0,180.00001985, -1, -1, -1, MAX_RADIO_STREAM);
//	CreateDynamicObjectExULP(3475,1419.27612300,-1832.54321300,14.92305000,0,0,180.00001985, -1, -1, -1, MAX_RADIO_STREAM);
//	CreateDynamicObjectExULP(3475,1419.29272500,-1826.66967800,14.92305000,0,0,180.00001985, -1, -1, -1, MAX_RADIO_STREAM);
//	CreateDynamicObjectExULP(971,1419.21044900,-1845.80822800,16.16680700,0,0,-89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
//	CreateDynamicObjectExULP(971,1539.49218800,-1845.81274400,16.11680800,0,0,-89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,1601.69482400,-1602.36425800,16.54796200,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,1588.88647500,-1602.35607900,16.54796200,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,1576.20617700,-1602.33703600,16.54204900,0,0,-89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,1563.52868700,-1602.33557100,16.54796200,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,1550.73449700,-1602.33215300,16.54796200,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,1542.77697800,-1602.31494100,16.59483700,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3336,1569.89331100,-1602.28698700,12.42532900,0,0,-180.00001985, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,1608.09606900,-1608.82226600,16.50856000,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,1608.10241700,-1621.62731900,16.50555800,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,1608.07019000,-1631.69836400,16.50856000,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,1604.88269000,-1638.09240700,16.55590100,0,0,-89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,1539.59362800,-1605.49169900,16.58192400,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(984,1539.63171400,-1611.38928200,16.53504900,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,1542.90124500,-1617.84399400,16.60802100,0,0,-89.999981280, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,1546.10095200,-1617.83581500,16.60802100,0,0,-89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,1548.02465800,-1620.98669400,14.698053000,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,1547.54821800,-1620.97033700,14.69805300,0,0,-180.00001985, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1592.92028800,-1637.59606900,13.28307300,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1584.36303700,-1637.61279300,12.954782000,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1231,1576.56982400,-1620.30957000,15.07727100,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(994,1568.90356400,-1620.29101600,12.64719200,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(994,1568.48742700,-1620.28564500,12.64719200,0,0,179.99996255, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(994,1561.76635700,-1620.28112800,12.64719200,0,0,180.00001985, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(994,1555.00329600,-1620.28161600,12.64719200,0,0,180.00001985, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1551.10156300,-1672.41613800,15.56120900,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1551.07373000,-1678.82873500,15.58620800,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1546.50573700,-1672.46130400,13.88464500,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1546.48291000,-1678.73571800,13.85964600,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1497.29235800,-1750.05432100,15.00963600,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1465.04834000,-1750.06726100,15.00963600,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1484.78051800,-1772.23620600,18.36007900,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,1477.35937500,-1772.21044900,18.36007900,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3515,1481.10192900,-1742.26428200,12.69211000,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(9833,1480.69531300,-1742.50146500,16.79904700,0,0,22.49999532, -1, -1, -1, MAX_RADIO_STREAM);

// PUERTA DEL PARKING LSPD
	CreateDynamicObjectExULP(2952, 1584.576171875, -1637.9348144531, 12.390459060669, 0, 0, 269.25, -1, -1, -1, MAX_RADIO_STREAM);

// LICENCIEROS  (79)
	CreateDynamicObjectExULP(1363,-2015.83581500,-78.27151500,35.15667300,0 ,0 ,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(7212,-2075.51293900,-80.30847900,35.72465500,0 ,0 ,-89, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(8674,-2022.21252400,-80.08999600,35.78722800,0 ,0 ,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(8674,-2032.50854500,-80.09416200,35.78722800,0 ,0 ,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(8674,-2017.03918500,-85.27117900,35.79347600,0 ,0 ,-89, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(8674,-2017.05371100,-97.37827300,35.78902800,0 ,0 ,-89, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(8168,-2039.70166000,-83.75797300,36.26828800,0 ,0 ,-73, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(979,-2079.97509800,-157.25614900,35.16053400,0 ,0 ,-67, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(978,-2063.97363300,-155.09823600,35.16053400,0 ,0 ,-213, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(979,-2074.24780300,-164.17807000,35.16053400,0 ,0 ,-33, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(978,-2055.54931600,-158.59765600,35.16053400,0 ,0 ,168, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(978,-2046.37695300,-160.39697300,35.16053400,0 ,0 ,168, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(979,-2065.72753900,-167.71110500,35.16053400,0 ,0 ,-11, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(978,-2039.09472700,-165.24418600,35.16761400,0 ,0 ,123, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(978,-2036.45983900,-173.86697400,35.16053400,0 ,0 ,89, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(979,-2056.57666000,-169.54962200,35.16053400,0 ,0 ,-11, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(16020,-2075.66040000,-137.25354000,34.89772000,0 ,0 ,-89, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(979,-2050.25244100,-174.73588600,35.16053400,0 ,0 ,-67, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(973,-2036.58313000,-185.00778200,35.16053400,0 ,0 ,89, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(973,-2048.23925800,-185.39758300,35.16053400,0 ,0 ,-89, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(7191,-2058.94433600,-202.31385800,36.29499100,0 ,0 ,89, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(978,-2036.60839800,-195.66984600,35.16053400,0 ,0 ,89, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(7191,-2065.93994100,-210.69166600,36.29499100,0 ,0 ,-89, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(7191,-2058.87304700,-219.85968000,36.29499100,0 ,0 ,89, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(7191,-2066.00439500,-229.16725200,36.29499100,0 ,0 ,-89, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(978,-2036.76001000,-210.86453200,35.16053400,0 ,0 ,89, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(978,-2036.35119600,-229.18380700,35.16761800,0 ,0 ,89, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(979,-2089.45385700,-205.00085400,35.16053400,0 ,0 ,270, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(979,-2089.23413100,-219.96104400,35.16053400,0 ,0 ,-89, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(973,-2052.89502000,-190.09816000,35.16053400,0 ,0 ,179, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(973,-2062.26538100,-190.11080900,35.16053400,0 ,0 ,179, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(973,-2071.64355500,-190.11172500,35.16053400,0 ,0 ,-179, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(973,-2080.99023400,-190.08337400,35.16053400,0 ,0 ,-179, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(979,-2089.43847700,-195.62136800,35.16053400,0 ,0 ,-89, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(7191,-2059.10986300,-238.82942200,36.29498700,0 ,0 ,89, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(979,-2089.03076200,-238.66626000,35.16053800,0 ,0 ,-89, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(973,-2089.08154300,-249.90437300,35.16053400,0 ,0 ,-89, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(973,-2081.61743200,-245.19781500,35.16053400,0 ,0 ,89, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(973,-2081.61035200,-249.73324600,35.16053400,0 ,0 ,89, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(7893,-2090.81152300,-259.87048300,34.88092800,0 ,0 ,-89, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(7893,-2079.87500000,-259.76620500,34.88092800,0 ,0 ,89, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(3852,-2085.47412100,-260.49981700,36.12954700,0 ,0 ,180, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(979,-2089.13793900,-269.98126200,35.16053400,0 ,0 ,-89, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(979,-2084.34082000,-274.70797700,35.16053400,0 ,0 ,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(973,-2076.92675800,-266.97778300,35.16053400,0 ,0 ,-179, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(973,-2073.01953100,-274.68942300,35.16053400,0 ,0 ,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(973,-2063.73754900,-274.71170000,35.16053400,0 ,0 ,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(973,-2067.84912100,-266.98425300,35.16053400,0 ,0 ,-179, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1315,-2057.06079100,-267.87387100,37.58939400,0 ,0 ,89, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(973,-2063.63085900,-266.98443600,35.16761400,0 ,0 ,180, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(973,-2054.37646500,-274.70498700,35.16761400,0 ,0 ,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(973,-2054.26318400,-266.97311400,35.16053400,0 ,0 ,179, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(973,-2045.02478000,-274.71002200,35.16053400,0 ,0 ,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(973,-2044.87390100,-266.98614500,35.16761400,0 ,0 ,179, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(978,-2035.01623500,-264.35699500,35.16053400,0 ,0 ,213, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(978,-2031.12866200,-257.11288500,35.16053400,0 ,0 ,-89, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(979,-2033.99694800,-274.62426800,35.16053400,0 ,0 ,0, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(979,-2025.89196800,-271.19104000,35.16761400,0 ,0 ,44, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(979,-2022.56982400,-263.09225500,35.16053400,0 ,0 ,89, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(979,-2022.55554200,-256.62448100,35.16053400,0 ,0 ,89, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(973,-2022.48034700,-245.46629300,35.16053400,0 ,0 ,89, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(973,-2031.09167500,-245.88754300,35.16053400,0 ,0 ,-89, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(973,-2029.22924800,-236.82125900,35.16053400,0 ,0 ,-112, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(973,-2020.67749000,-236.42758200,35.16053400,0 ,0 ,67, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(973,-2021.47656300,-228.17320300,35.16053400,0 ,0 ,123, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(973,-2029.99646000,-228.64091500,35.16053400,0 ,0 ,-56, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(973,-2029.96569800,-220.73800700,35.16053400,0 ,0 ,-123, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(973,-2021.47998000,-220.71902500,35.16053400,0 ,0 ,56, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(973,-2021.49206500,-212.91728200,35.16053400,0 ,0 ,123, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(973,-2029.91455100,-212.98278800,35.16053400,0 ,0 ,-56, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(973,-2029.95825200,-204.93211400,35.16053400,0 ,0 ,-123, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(973,-2021.43420400,-205.15393100,35.16053400,0 ,0 ,56, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(973,-2027.34082000,-196.39254800,35.16053400,0 ,0 ,-89, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(973,-2018.79809600,-196.44693000,35.16053400,0 ,0 ,89, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(973,-2018.81005900,-187.06591800,35.16053400,0 ,0 ,89, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(973,-2027.35192900,-187.00138900,35.16053400,0 ,0 ,-89, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(978,-2027.36608900,-175.72914100,35.16053400,0 ,0 ,-89, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(979,-2018.80053700,-175.77442900,35.16053400,0 ,0 ,89, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(1251,-2023.11950700,-170.85910000,34.42499500,0 ,0 ,89, -1, -1, -1, MAX_RADIO_STREAM_MIN);
	CreateDynamicObjectExULP(966,-2050.53613300,-80.56518600,34.16406300,0,0,180.00001985, -1, -1, -1, MAX_RADIO_STREAM_MIN);

// LCN  (0)
	CreateDynamicObjectExULP(982,1378.52270500,-1902.47192400,17.18561600,0,0,89.14054458, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(983,1394.48803700,-1902.67932100,17.16970800,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(982,1292.11291500,-1880.59533700,17.15543700,0,0,-89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(982,1266.52600100,-1880.58667000,17.16482500,0,0,-89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(982,1242.52551300,-1880.59082000,17.16871600,0,0,-89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,1434.57251000,-1882.66003400,14.93041200,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,1418.20715300,-1882.70080600,14.93100400,0,0,-89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
//	CreateDynamicObjectExULP(3627,1260.38928200,-2015.78979500,61.70626400,-1.71887339,0,-89.99998128, -1, -1, -1, MAX_RADIO_STREAM);

// Mecánicos (San Fierro)
	CreateDynamicObjectExULP(3624,-2975.60717800,470.92614700,8.56968500,0,0,-180.00001985, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(981,-2947.17553700,482.62271100,4.13861600,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3627,-2889.56689500,431.77868700,7.75354900,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(12929,-2920.20336900,494.69146700,3.91207500,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(12929,-2908.05712900,494.69500700,3.91207500,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(12943,-2895.92822300,494.70385700,3.90086300,0,0,270.00000112, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(11504,-2877.63940400,498.28970300,3.91348300,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,-2927.99951200,416.28839100,5.23089600,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,-2916.01757800,416.30114700,5.23089600,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,-2903.99243200,416.22998000,5.23089600,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,-2891.96972700,416.30545000,5.23089600,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,-2879.97705100,416.33578500,5.23089600,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,-2929.95312500,428.05795300,5.21347000,0,0,-80.46882835, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,-2931.28125000,439.94424400,5.20442200,0,0,-83.98392443, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,-2931.34716800,451.89126600,5.21942900,0,0,-89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,-2997.24487300,454.64563000,5.21467600,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,-2985.25463900,454.62170400,5.23101800,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,-2973.22973600,454.59692400,5.23101800,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,-2961.20312500,454.60415600,5.23101800,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,-2949.16992200,454.60626200,5.23101800,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,-2997.18286100,466.46206700,5.22897300,0,0,-89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,-2997.19189500,487.17367600,5.22897300,0,0,-89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,-2985.29858400,487.07370000,5.23080400,0,0,-180.00001985, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,-2919.72363300,510.28637700,5.23072100,0,0,-180.00001985, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,-2907.69702100,510.32571400,5.23072100,0,0,-180.00001985, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,-2895.70214800,510.32455400,5.23072100,0,0,-180.00001985, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,-2883.68750000,510.33203100,5.23072100,0,0,-180.00001985, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,-2871.70825200,510.30883800,5.23072100,0,0,-180.00001985, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,-2859.75927700,510.35195900,5.23072100,0,0,-180.00001985, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,-2876.89648400,416.34878500,5.23089600,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(987,-2853.73706100,510.36428800,5.23072100,0,0,180.00001985, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,-2864.99975600,419.31924400,6.23319600,0,0,-180.00001985, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,-2864.98706100,425.25329600,6.23319600,0,0,-180.00001985, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,-2864.96728500,431.15228300,6.23319600,0,0,-180.00001985, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,-2864.79492200,437.14166300,6.25819700,0,0,-180.00001985, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,-2864.79248000,442.93475300,6.25819700,0,0,-180.00001985, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,-2853.51879900,507.45575000,6.14023700,0,0,-16.48393847, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,-2854.77221700,504.75375400,6.14023700,0,0,164.37551807, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,-2856.47094700,499.15945400,6.10586100,0,0,-197.26610300, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,-2858.09375000,493.36416600,6.10161500,0,0,166.17168346, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,-2860.41210900,488.20709200,6.12157400,0,0,-214.60942087, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,-2863.69140600,483.22882100,6.16523700,0,0,147.18666962, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14826,-2966.79663100,478.63198900,4.49151500,0,0,180.00001985, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1225,-2987.26196300,462.60711700,4.31981800,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1225,-2967.01513700,476.67080700,4.31033400,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1686,-2967.64917000,462.84829700,3.92736600,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1686,-2969.89135700,462.82617200,3.92736600,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1717,-2975.54052700,460.82998700,3.91126100,0,0,134.99997191, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1718,-2976.23486300,460.43713400,5.19223300,0,0,-180.00001985, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1749,-2977.46240200,460.10653700,3.90877500,0,0,180.00001985, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2007,-2979.33911100,467.04318200,3.90967200,0,0,0.00011459, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2007,-2981.19653300,467.04885900,3.90967200,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2007,-2980.25244100,467.04330400,3.90967200,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2578,-2973.72363300,481.85870400,4.89376000,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2626,-2974.11743200,462.43490600,4.43177300,0,0,-180.00001985, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1663,-2974.14355500,461.28054800,4.37427700,0,0,-180.00001985, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(12929,-2920.09448200,432.12127700,3.91207500,0,0,-89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,-2931.14770500,451.63296500,7.59777100,0,0,1.71887339, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,-2934.20410200,454.71310400,7.60719300,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1257,-2846.18408200,442.52432300,4.77919200,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(632,-2878.40161100,492.23437500,4.36109600,0,0,-78.75001226, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,-2865.31176800,480.68667600,6.16523700,0,0,-212.89060478, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,-2865.52832000,448.67987100,6.19649600,0,0,25.93797127, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,-2866.77026400,454.24939000,6.19158800,0,0,0.00034377, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,-2864.34057600,442.90606700,6.24130300,0,0,-0.00005730, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,-2866.92504900,475.08038300,6.17682500,0,0,180.00001985, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3475,-2866.76611300,457.24301100,6.17177600,0,0,0.00011459, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(10282,-2983.99633800,471.45163000,4.91416800,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3389,-2981.11865200,474.87664800,3.91207900,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(3388,-2980.10961900,474.87338300,3.91126300,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(14826,-2983.63378900,479.16952500,4.56557800,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(2000,-2972.27343800,460.23455800,3.90967200,0,0,180.00001985, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1008,-2973.18286100,458.77002000,5.98519000,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1008,-2975.13476600,458.79501300,5.99314600,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1008,-2974.24926800,458.77002000,5.43894300,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1014,-2974.01733400,458.76519800,7.09048400,-74.77093497,0.85943669,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1073,-2975.94848600,458.72003200,7.11224900,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1079,-2977.09668000,458.72003200,7.10305500,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1075,-2972.14819300,458.71521000,7.10485700,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1074,-2970.99731400,458.71521000,7.09811500,0,0,89.99998128, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1348,-2976.92871100,481.61190800,4.58980200,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-2888.45703100,493.73922700,4.47089400,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-2887.63134800,495.01590000,4.47089400,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
	CreateDynamicObjectExULP(1215,-2866.72143600,493.72381600,4.47089400,0,0,0, -1, -1, -1, MAX_RADIO_STREAM);
    CreateDynamicObjectExULP(697,-2853.77026400,511.37951700,7.94962300,0,0,11.25002631, -1, -1, -1, MAX_RADIO_STREAM);
}
public LoadTelesPublics()
{
	/////////////////////////////////////////////////////////////////////
	Teles[MAX_TELE][PosX] 		= -2675.2092;
	Teles[MAX_TELE][PosY] 		= 552.2344;
	Teles[MAX_TELE][PosZ] 		= 14.6094;
	Teles[MAX_TELE][PosZZ] 		= 0.8626;
	Teles[MAX_TELE][PickupID] 	= CreatePickup	(1239, 	1, 	Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],	 	WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior] 	= 0;
	Teles[MAX_TELE][World] 		= WORLD_NORMAL;
	Teles[MAX_TELE][Lock] 		= false;
	SetStyleTextDrawTeles(MAX_TELE, "Bajos de la SFMD");
	Teles[MAX_TELE][Dueno]      = SFMD;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX] 		= -2651.6423339844;
	Teles[MAX_TELE][PosY] 		= 543.31774902344;
	Teles[MAX_TELE][PosZ] 		= 48.010936737061;
	Teles[MAX_TELE][PosZZ] 		= 180;
	Teles[MAX_TELE][PickupID] 	= CreatePickup	(1239, 	1, 	Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],	 	WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior] 	= 0;
	Teles[MAX_TELE][World] 		= WORLD_NORMAL;
	Teles[MAX_TELE][Lock] 		= false;
	SetStyleTextDrawTeles(MAX_TELE, "Techo de la SFMD");
	Teles[MAX_TELE][Dueno]      = SFMD;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1719.2092285156;
	Teles[MAX_TELE][PosY]       = 720.77124023438;
	Teles[MAX_TELE][PosZ]       = 10.873438072205;
	Teles[MAX_TELE][PosZZ]       = 90;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 11;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada a la Sala de Operaciones");
	Teles[MAX_TELE][Dueno]      = SFMD;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 2791.6501;
	Teles[MAX_TELE][PosY]       = 2509.3916;
	Teles[MAX_TELE][PosZ]       = 17.6737;
	Teles[MAX_TELE][PosZZ]       = 270;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 11;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida de la Sala de Operaciones");
	Teles[MAX_TELE][Dueno]      = SFMD;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1715.8145751953;
	Teles[MAX_TELE][PosY]       = 710.45025634766;
	Teles[MAX_TELE][PosZ]       = 10.878179740906;
	Teles[MAX_TELE][PosZZ]       = 0;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 11;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada a la Oficina");
	Teles[MAX_TELE][Dueno]      = SFMD;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 2467.5247;
	Teles[MAX_TELE][PosY]       = 1042.7755;
	Teles[MAX_TELE][PosZ]       = 58.9644;
	Teles[MAX_TELE][PosZZ]       = 90;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 11;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida de la Oficina");
	Teles[MAX_TELE][Dueno]      = SFMD;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1673.9642333984;
	Teles[MAX_TELE][PosY]       = 709.21551513672;
	Teles[MAX_TELE][PosZ]       = 10.874180030823;
	Teles[MAX_TELE][PosZZ]       = 0;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 11;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada a la Sala de Espera");
	Teles[MAX_TELE][Dueno]      = SFMD;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 2826.6069;
	Teles[MAX_TELE][PosY]       = 2465.6450;
	Teles[MAX_TELE][PosZ]       = 18.4234;
	Teles[MAX_TELE][PosZZ]       = 90;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 11;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida de la Sala de Espera");
	Teles[MAX_TELE][Dueno]      = SFMD;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1677.0227050781;
	Teles[MAX_TELE][PosY]       = 715.69012451172;
	Teles[MAX_TELE][PosZ]       = 10.873433303833;
	Teles[MAX_TELE][PosZZ]       = 90;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 11;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Consultorio");
	Teles[MAX_TELE][Dueno]      = SFMD;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 2802.4231;
	Teles[MAX_TELE][PosY]       = 2522.6433;
	Teles[MAX_TELE][PosZ]       = 10.8203;
	Teles[MAX_TELE][PosZZ]       = 180;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 11;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida del Consultorio");
	Teles[MAX_TELE][Dueno]      = SFMD;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = -2026.9376220703;
	Teles[MAX_TELE][PosY]       = 67.168426513672;
	Teles[MAX_TELE][PosZ]       = 28.691593170166;
	Teles[MAX_TELE][PosZZ]       = 270;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Bomberos");
	Teles[MAX_TELE][Dueno]      = SFMD;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1474.0496826172;
	Teles[MAX_TELE][PosY]       = 2746.30859375;
	Teles[MAX_TELE][PosZ]       = 11.247332572937;
	Teles[MAX_TELE][PosZZ]       = 270;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 14;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Bomberos");
	Teles[MAX_TELE][Dueno]      = SFMD;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = -2047.6833496094;
	Teles[MAX_TELE][PosY]       = 67.107147216797;
	Teles[MAX_TELE][PosZ]       = 28.645565032959;
	Teles[MAX_TELE][PosZZ]       = 90;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada Trasera");
	Teles[MAX_TELE][Dueno]      = SFMD;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1494.8901367188;
	Teles[MAX_TELE][PosY]       = 2746.3122558594;
	Teles[MAX_TELE][PosZ]       = 11.247332572937;
	Teles[MAX_TELE][PosZZ]       = 90;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 14;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida Trasera");
	Teles[MAX_TELE][Dueno]      = SFMD;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1302.8802490234;
	Teles[MAX_TELE][PosY]       = 2666.3251953125;
	Teles[MAX_TELE][PosZ]       = 10.841632843018;
	Teles[MAX_TELE][PosZZ]       = 180;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 14;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida al Garage");
	Teles[MAX_TELE][Dueno]      = SFMD;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1480.9244384766;
	Teles[MAX_TELE][PosY]       = 2744.7133789063;
	Teles[MAX_TELE][PosZ]       = 10.863215446472;
	Teles[MAX_TELE][PosZZ]       = 0;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 14;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada del Garage");
	Teles[MAX_TELE][Dueno]      = SFMD;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1342.86328125;
	Teles[MAX_TELE][PosY]       = 2645.3054199219;
	Teles[MAX_TELE][PosZ]       = 10.860591888428;
	Teles[MAX_TELE][PosZZ]       = 0;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 14;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida de Garage");
	Teles[MAX_TELE][Dueno]      = SFMD;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1488.9517822266;
	Teles[MAX_TELE][PosY]       = 2744.6943359375;
	Teles[MAX_TELE][PosZ]       = 10.847518920898;
	Teles[MAX_TELE][PosZZ]       = 0;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 14;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Garage");
	Teles[MAX_TELE][Dueno]      = SFMD;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1480.1163330078;
	Teles[MAX_TELE][PosY]       = 2856.2021484375;
	Teles[MAX_TELE][PosZ]       = 10.830624580383;
	Teles[MAX_TELE][PosZZ]       = 270;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 14;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida del Despacho");
	Teles[MAX_TELE][Dueno]      = SFMD;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1485.041015625;
	Teles[MAX_TELE][PosY]       = 2744.7016601563;
	Teles[MAX_TELE][PosZ]       = 10.855165481567;
	Teles[MAX_TELE][PosZZ]       = 0;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 14;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Despacho");
	Teles[MAX_TELE][Dueno]      = SFMD;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 2596.15625;
	Teles[MAX_TELE][PosY]       = 1352.5087890625;
	Teles[MAX_TELE][PosZ]       = 78.476387023926;
	Teles[MAX_TELE][PosZZ]       = 180.0000;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 9;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada a la Oficina del Director");
	Teles[MAX_TELE][Dueno]      = ADP;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 2557.8662109375;
	Teles[MAX_TELE][PosY]       = 1345.7208251953;
	Teles[MAX_TELE][PosZ]       = 78.476387023926;
	Teles[MAX_TELE][PosZZ]       = 94.3142;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 9;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida de la Oficina del Director");
	Teles[MAX_TELE][Dueno]      = ADP;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 2193.2927246094;
	Teles[MAX_TELE][PosY]       = -1147.6652832031;
	Teles[MAX_TELE][PosZ]       = 1033.796875;
	Teles[MAX_TELE][PosZZ]       = 352.0667;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 15;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Sal\xa6n");
	Teles[MAX_TELE][Dueno]      = TAXI;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 2228.5393066406;
	Teles[MAX_TELE][PosY]       = -1150.5076904297;
	Teles[MAX_TELE][PosZ]       = 1029.796875;
	Teles[MAX_TELE][PosZZ]       = 92.7406;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 15;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida de la Oficina");
	Teles[MAX_TELE][Dueno]      = TAXI;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1951.0385742188;
	Teles[MAX_TELE][PosY]       = 1887.2598876953;
	Teles[MAX_TELE][PosZ]       = 27.461999893188;
	Teles[MAX_TELE][PosZZ]       = 353.1283;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       8);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 15;
	Teles[MAX_TELE][World]       = 8;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Oficina del Director");
	Teles[MAX_TELE][Dueno]      = TAXI;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 2193.2702636719;
	Teles[MAX_TELE][PosY]       = -1148.0888671875;
	Teles[MAX_TELE][PosZ]       = 1029.796875;
	Teles[MAX_TELE][PosZZ]       = 357.0116;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 15;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Oficina del Director");
	Teles[MAX_TELE][Dueno]      = TAXI;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = -794.9324;
	Teles[MAX_TELE][PosY]       = 489.4544;
	Teles[MAX_TELE][PosZ]       = 1376.1953;
	Teles[MAX_TELE][PosZZ]      = 0.5641;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]   = 1;
	Teles[MAX_TELE][World]      = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Uscita di Ristorante Italiano");
	Teles[MAX_TELE][Dueno]      = LCN;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1217.3870;
	Teles[MAX_TELE][PosY]       = -1692.6326;
	Teles[MAX_TELE][PosZ]       = 19.7344;
	Teles[MAX_TELE][PosZZ]       = 273.5764;
	Teles[MAX_TELE][PickupID] 	= CreatePickup	(1239, 	1, 	Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],	 	WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Ingresso di Ristorante Italiano");
	Teles[MAX_TELE][Dueno]      = LCN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 2281.1328125;
	Teles[MAX_TELE][PosY]       = 1310.5087890625;
	Teles[MAX_TELE][PosZ]       = 10.82034778595;
	Teles[MAX_TELE][PosZZ]       = 89.5909;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 3;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida de la Oficina");
	Teles[MAX_TELE][Dueno]      = NFS;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1494.6038;
	Teles[MAX_TELE][PosY]       = 1304.2933;
	Teles[MAX_TELE][PosZ]       = 1093.2891;
	Teles[MAX_TELE][PosZZ]       = 352.4487;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 3;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada de la Oficina");
	Teles[MAX_TELE][Dueno]      = NFS;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 2278.2338867188;
	Teles[MAX_TELE][PosY]       = 1307.0657958984;
	Teles[MAX_TELE][PosZ]       = 10.82034778595;
	Teles[MAX_TELE][PosZZ]       = 0;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 3;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada del Aseo");
	Teles[MAX_TELE][Dueno]      = NFS;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 2295.4775390625;
	Teles[MAX_TELE][PosY]       = 1302.2651367188;
	Teles[MAX_TELE][PosZ]       = 10.8203125;
	Teles[MAX_TELE][PosZZ]       = 87.4208;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 3;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida del Aseo");
	Teles[MAX_TELE][Dueno]      = NFS;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = -2022.8104;
	Teles[MAX_TELE][PosY]       = -113.7378;
	Teles[MAX_TELE][PosZ]       = 1035.1719;
	Teles[MAX_TELE][PosZZ]       = 180;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 3;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Oficina del Director");
	Teles[MAX_TELE][Dueno]      = LICENCIEROS;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 2264.0251464844;
	Teles[MAX_TELE][PosY]       = 1008.1618652344;
	Teles[MAX_TELE][PosZ]       = 79.5546875;
	Teles[MAX_TELE][PosZZ]       = 0;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 3;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida");
	Teles[MAX_TELE][Dueno]      = LICENCIEROS;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX] 		= -2029.7047;
	Teles[MAX_TELE][PosY] 		= -120.7131;
	Teles[MAX_TELE][PosZ] 		= 35.1714;
	Teles[MAX_TELE][PosZZ] 		= 175.2865;
	Teles[MAX_TELE][PickupID] 	= CreatePickup	(1239, 	1, 	Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],	 	WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior] 	= 0;
	Teles[MAX_TELE][World] 		= WORLD_NORMAL;
	Teles[MAX_TELE][Lock] 		= false;
	SetStyleTextDrawTeles(MAX_TELE, "Patio de los Licencieros");
	Teles[MAX_TELE][Dueno]      = LICENCIEROS;
//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX] 		= -2029.7854;
	Teles[MAX_TELE][PosY] 		= -119.6171;
	Teles[MAX_TELE][PosZ] 		= 1035.1719;
	Teles[MAX_TELE][PosZZ] 		= 0.3638;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior] 	= 3;
	Teles[MAX_TELE][World] 		= WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock] 		= false;
	SetStyleTextDrawTeles(MAX_TELE, "Puerta trasera Licencieros");
	Teles[MAX_TELE][Dueno]      = LICENCIEROS;
/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX] 		= 1525.4343;
	Teles[MAX_TELE][PosY] 		= -1677.7581;
	Teles[MAX_TELE][PosZ] 		= 5.8906;
	Teles[MAX_TELE][PosZZ] 		= 274.0949;
	Teles[MAX_TELE][PickupID] 	= CreatePickup	(1239, 	1, 	Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],	 	WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior] 	= 0;
	Teles[MAX_TELE][World] 		= WORLD_NORMAL;
	Teles[MAX_TELE][Lock] 		= false;
	SetStyleTextDrawTeles(MAX_TELE, "Parqueo al fondo LSPD");
	Teles[MAX_TELE][Dueno]      = LSPD;
//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX] 		= 246.3023;
	Teles[MAX_TELE][PosY] 		= 87.4573;
	Teles[MAX_TELE][PosZ] 		= 1003.6406;
	Teles[MAX_TELE][PosZZ] 		= 180.3136;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior] 	= 6;
	Teles[MAX_TELE][World] 		= WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock] 		= false;
	SetStyleTextDrawTeles(MAX_TELE, "Puerta trasera de la LSPD");
	Teles[MAX_TELE][Dueno]      = LSPD;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 2360.966796875;
	Teles[MAX_TELE][PosY]       = 1558.0955810547;
	Teles[MAX_TELE][PosZ]       = 27.956249237061;
	Teles[MAX_TELE][PosZZ]      = 0;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 11;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "C\x98maras de Seguridad");
	Teles[MAX_TELE][Dueno]      = LSPD;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 220.17153930664;
	Teles[MAX_TELE][PosY]       = 74.203353881836;
	Teles[MAX_TELE][PosZ]       = 1005.0390625;
	Teles[MAX_TELE][PosZZ]       = 0;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 6;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "C\x98maras de Seguridad");
	Teles[MAX_TELE][Dueno]      = LSPD;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX] 		= 1568.6110;
	Teles[MAX_TELE][PosY] 		= -1690.9406;
	Teles[MAX_TELE][PosZ] 		= 5.8906;
	Teles[MAX_TELE][PosZZ] 		= 182.5682;
	Teles[MAX_TELE][PickupID] 	= CreatePickup	(1239, 	1, 	Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],	 	WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior] 	= 0;
	Teles[MAX_TELE][World] 		= WORLD_NORMAL;
	Teles[MAX_TELE][Lock] 		= false;
	SetStyleTextDrawTeles(MAX_TELE, "Parqueo a la entrada LSPD");
	Teles[MAX_TELE][Dueno]      = LSPD;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX] 		= 243.1564;
	Teles[MAX_TELE][PosY] 		= 66.3322;
	Teles[MAX_TELE][PosZ] 		= 1003.6406;
	Teles[MAX_TELE][PosZZ] 		= 269.0457;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior] 	= 6;
	Teles[MAX_TELE][World] 		= WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock] 		= false;
	SetStyleTextDrawTeles(MAX_TELE, "Puerta a la entrada LSPD");
	Teles[MAX_TELE][Dueno]      = LSPD;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1548.6943;
	Teles[MAX_TELE][PosY]       = -1364.4369;
	Teles[MAX_TELE][PosZ]       = 326.2183;
	Teles[MAX_TELE][PosZZ]       = 186.1149;
	Teles[MAX_TELE][PickupID] 	= CreatePickup	(1239, 	1, 	Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],	 	WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Asensor a la cima del Edificio");
	Teles[MAX_TELE][Dueno]      = CIVIL;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1574.7563;
	Teles[MAX_TELE][PosY]       = -1335.8326;
	Teles[MAX_TELE][PosZ]       = 16.4844;
	Teles[MAX_TELE][PosZZ]       = 314.2043;
	Teles[MAX_TELE][PickupID] 	= CreatePickup	(1239, 	1, 	Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],	 	WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Asensor a la salida del Edificio");
	Teles[MAX_TELE][Dueno]      = CIVIL;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 155.6292;
	Teles[MAX_TELE][PosY]       = -1950.2883;
	Teles[MAX_TELE][PosZ]       = 47.8750;
	Teles[MAX_TELE][PosZZ]       = 6.2527;
	Teles[MAX_TELE][PickupID] 	= CreatePickup	(1239, 	1, 	Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],	 	WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Escaleras a la cima del Faro");
	Teles[MAX_TELE][Dueno]      = CIVIL;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 154.2622;
	Teles[MAX_TELE][PosY]       = -1946.1864;
	Teles[MAX_TELE][PosZ]       = 5.1198;
	Teles[MAX_TELE][PosZZ]       = 2.4509;
	Teles[MAX_TELE][PickupID] 	= CreatePickup	(1239, 	1, 	Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],	 	WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Escaleras a la salida del Faro");
	Teles[MAX_TELE][Dueno]      = CIVIL;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = -1445.7500;
	Teles[MAX_TELE][PosY]       = -206.1691;
	Teles[MAX_TELE][PosZ]       = 6.0000;
	Teles[MAX_TELE][PosZZ]       = 273.1129;
	Teles[MAX_TELE][PickupID] 	= CreatePickup	(1239, 	1, 	Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],	 	WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Asensor al Subterraneo del Aereo");
	Teles[MAX_TELE][Dueno]      = CIVIL;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = -1422.1642;
	Teles[MAX_TELE][PosY]       = -287.7517;
	Teles[MAX_TELE][PosZ]       = 14.1484;
	Teles[MAX_TELE][PosZZ]       = 141.0719;
	Teles[MAX_TELE][PickupID] 	= CreatePickup	(1239, 	1, 	Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],	 	WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Asensor a la Salida del Aereo");
	Teles[MAX_TELE][Dueno]      = CIVIL;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = -1951.8713;
	Teles[MAX_TELE][PosY]       = -865.8907;
	Teles[MAX_TELE][PosZ]       = 32.2266;
	Teles[MAX_TELE][PosZZ]      = 2.1572;
	Teles[MAX_TELE][PickupID]  = CreatePickup	(1239, 	1, 	Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],	 	WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]   = 0;
	Teles[MAX_TELE][World]      = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Asensor a la entrada del Parque");
	Teles[MAX_TELE][Dueno]      = CIVIL;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = -1945.5076;
	Teles[MAX_TELE][PosY]       = -877.2965;
	Teles[MAX_TELE][PosZ]       = 35.8906;
	Teles[MAX_TELE][PosZZ]      = 89.7439;
	Teles[MAX_TELE][PickupID]  = CreatePickup	(1239, 	1, 	Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],	 	WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]   = 0;
	Teles[MAX_TELE][World]      = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Asensor a la salida del Parque");
	Teles[MAX_TELE][Dueno]      = CIVIL;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = -2269.5566;
	Teles[MAX_TELE][PosY]       = -156.0913;
	Teles[MAX_TELE][PosZ]       = 35.3203;
	Teles[MAX_TELE][PosZZ]       = 269.8338;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada del GYM");
	Teles[MAX_TELE][Dueno]      = LICENCIEROS;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 774.4182;
	Teles[MAX_TELE][PosY]       = -50.2380;
	Teles[MAX_TELE][PosZ]       = 1000.5859;
	Teles[MAX_TELE][PosZZ]       = 0.2655;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 6;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida del GYM");
	Teles[MAX_TELE][Dueno]      = LICENCIEROS;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 2229.2881;
	Teles[MAX_TELE][PosY]       = -1721.8671;
	Teles[MAX_TELE][PosZ]       = 13.5669;
	Teles[MAX_TELE][PosZZ]       = 126.9885;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada del GYM");
	Teles[MAX_TELE][Dueno]      = LICENCIEROS;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 772.3953;
	Teles[MAX_TELE][PosY]       = -4.5627;
	Teles[MAX_TELE][PosZ]       = 1000.7291;
	Teles[MAX_TELE][PosZZ]       = 2.6997;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 5;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida del GYM");
	Teles[MAX_TELE][Dueno]      = LICENCIEROS;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 2495.3052;
	Teles[MAX_TELE][PosY]       = -1690.0558;
	Teles[MAX_TELE][PosZ]       = 14.7656;
	Teles[MAX_TELE][PosZZ]       = 2.9780;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada a la Casa de CJ");
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 2495.8784;
	Teles[MAX_TELE][PosY]       = -1692.3300;
	Teles[MAX_TELE][PosZ]       = 1014.7422;
	Teles[MAX_TELE][PosZZ]       = 182.0026;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 3;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida de la casa de CJ");
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = -1989.6453;
	Teles[MAX_TELE][PosY]       = 1117.8682;
	Teles[MAX_TELE][PosZ]       = 54.4688;
	Teles[MAX_TELE][PosZZ]       = 271.0806;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada de la Iglesia");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1921.4556884766;
	Teles[MAX_TELE][PosY]       = 1199.9836425781;
	Teles[MAX_TELE][PosZ]       = 18.10000038147;
	Teles[MAX_TELE][PosZZ]       = 357.7330;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       8);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 6;
	Teles[MAX_TELE][World]       = 8;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida de la Iglesia");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = -2649.0046;
	Teles[MAX_TELE][PosY]       = 376.0089;
	Teles[MAX_TELE][PosZ]       = 6.1593;
	Teles[MAX_TELE][PosZZ]       = 89.0708;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada Oficina del Gobierno");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 2465.5559082031;
	Teles[MAX_TELE][PosY]       = 2250.4775390625;
	Teles[MAX_TELE][PosZ]       = 91.631156921387;
	Teles[MAX_TELE][PosZZ]       = 89.5417;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 1;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida Oficina del Gobierno");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = -2766.0508;
	Teles[MAX_TELE][PosY]       = 375.5933;
	Teles[MAX_TELE][PosZ]       = 6.3347;
	Teles[MAX_TELE][PosZZ]       = 271.1547;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1274,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Banco de San Fierro");
	BANCO_PICKUPID_out = Teles[MAX_TELE][PickupID];
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 2305.4546;
	Teles[MAX_TELE][PosY]       = -16.1226;
	Teles[MAX_TELE][PosZ]       = 26.7496;
	Teles[MAX_TELE][PosZZ]       = 270.0407;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1274,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Banco de San Fierro");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 368.50451660156;
	Teles[MAX_TELE][PosY]       = 206.96217346191;
	Teles[MAX_TELE][PosZ]       = 1008.3828125;
	Teles[MAX_TELE][PosZZ]       = 86.4808;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 3;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada a la Oficina");
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1857.7513427734;
	Teles[MAX_TELE][PosY]       = 1426.7786865234;
	Teles[MAX_TELE][PosZ]       = 16.922342300415;
	Teles[MAX_TELE][PosZZ]       = 261.6124;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 7;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida de la Oficina");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1859.1119384766;
	Teles[MAX_TELE][PosY]       = 1413.4916992188;
	Teles[MAX_TELE][PosZ]       = 16.922342300415;
	Teles[MAX_TELE][PosZZ]       = 0;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 7;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada a la Azotea");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1437.8747558594;
	Teles[MAX_TELE][PosY]       = -1786.3486328125;
	Teles[MAX_TELE][PosZ]       = 33.4296875;
	Teles[MAX_TELE][PosZZ]       = 83.3475;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida de la Azotea");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = -2444.9885253906;
	Teles[MAX_TELE][PosY]       = 755.20709228516;
	Teles[MAX_TELE][PosZ]       = 35.171875;
	Teles[MAX_TELE][PosZZ]       = 180;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al SuperMercado");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1463.3393554688;
	Teles[MAX_TELE][PosY]       = 1457.1593017578;
	Teles[MAX_TELE][PosZ]       = 11.051670074463;
	Teles[MAX_TELE][PosZZ]       = 270;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 1;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida del SuperMercado");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = -2440.337890625;
	Teles[MAX_TELE][PosY]       = 755.37475585938;
	Teles[MAX_TELE][PosZ]       = 35.171875;
	Teles[MAX_TELE][PosZZ]       = 180;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al SuperMercado");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1463.3317871094;
	Teles[MAX_TELE][PosY]       = 1448.8151855469;
	Teles[MAX_TELE][PosZ]       = 11.044595718384;
	Teles[MAX_TELE][PosZZ]       = 270;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 1;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida del SuperMercado");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1488.4030761719;
	Teles[MAX_TELE][PosY]       = 1439.1560058594;
	Teles[MAX_TELE][PosZ]       = 10.999785423279;
	Teles[MAX_TELE][PosZZ]       = 0;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 1;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Tiendas Metro");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1321.6187744141;
	Teles[MAX_TELE][PosY]       = 1370.10546875;
	Teles[MAX_TELE][PosZ]       = 10.879687309265;
	Teles[MAX_TELE][PosZZ]       = 0;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 2;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Tiendas Metro");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1486.8168945313;
	Teles[MAX_TELE][PosY]       = 1469.2908935547;
	Teles[MAX_TELE][PosZ]       = 17.923244476318;
	Teles[MAX_TELE][PosZZ]       = 184.5551;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 1;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Tiendas Wong");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1321.1669921875;
	Teles[MAX_TELE][PosY]       = 1341.4766845703;
	Teles[MAX_TELE][PosZ]       = 10.825604438782;
	Teles[MAX_TELE][PosZZ]       = 0;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 3;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Tiendas Wong");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1488.4807128906;
	Teles[MAX_TELE][PosY]       = 1467.4925537109;
	Teles[MAX_TELE][PosZ]       = 10.99523639679;
	Teles[MAX_TELE][PosZZ]       = 180;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 1;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Tienda de Discos");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1288.4362792969;
	Teles[MAX_TELE][PosY]       = 1304.3870849609;
	Teles[MAX_TELE][PosZ]       = 10.89999961853;
	Teles[MAX_TELE][PosZZ]       = 90;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 4;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Tienda de Discos");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1492.9178466797;
	Teles[MAX_TELE][PosY]       = 1437.2796630859;
	Teles[MAX_TELE][PosZ]       = 17.958332061768;
	Teles[MAX_TELE][PosZZ]       = 357.9750;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 1;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Tienda de Licores");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1336.8875732422;
	Teles[MAX_TELE][PosY]       = 1331.4705810547;
	Teles[MAX_TELE][PosZ]       = 10.820769309998;
	Teles[MAX_TELE][PosZZ]       = 0;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 5;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Tienda de Licores");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 2851.2627;
	Teles[MAX_TELE][PosY]       = -1532.5386;
	Teles[MAX_TELE][PosZ]       = 11.0938;
	Teles[MAX_TELE][PosZZ]       = 264.7181;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Recreation Park");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = -928.1292;
	Teles[MAX_TELE][PosY]       = 2192.6589;
	Teles[MAX_TELE][PosZ]       = 43.3984;
	Teles[MAX_TELE][PosZZ]       = 359.3733;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida del Recreation Park");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = -916.2724;
	Teles[MAX_TELE][PosY]       = 2225.0378;
	Teles[MAX_TELE][PosZ]       = 43.3984;
	Teles[MAX_TELE][PosZZ]       = 180;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Segundo Piso");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = -916.1951;
	Teles[MAX_TELE][PosY]       = 2225.0432;
	Teles[MAX_TELE][PosZ]       = 51.3453;
	Teles[MAX_TELE][PosZZ]       = 180;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Primer Piso");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = -920.5874;
	Teles[MAX_TELE][PosY]       = 2225.0952;
	Teles[MAX_TELE][PosZ]       = 51.3453;
	Teles[MAX_TELE][PosZZ]       = 180;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Tercer Piso");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = -920.7510;
	Teles[MAX_TELE][PosY]       = 2225.0178;
	Teles[MAX_TELE][PosZ]       = 59.9453;
	Teles[MAX_TELE][PosZZ]       = 180;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Segundo Piso");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
    MAX_TELE++;
    Teles[MAX_TELE][PosX]       = 613.4033;
    Teles[MAX_TELE][PosY]       = 3.5391;
    Teles[MAX_TELE][PosZ]       = 1000.9219;
    Teles[MAX_TELE][PosZZ]       = 180;
    Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
    Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
    Teles[MAX_TELE][Interior]    = 1;
    Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
    Teles[MAX_TELE][Lock]       = false;
    SetStyleTextDrawTeles(MAX_TELE, "Entrada a la Oficina");
    Teles[MAX_TELE][Dueno]      = TALLER_SF;

   //////////////////////////////
    MAX_TELE++;
    Teles[MAX_TELE][PosX]       = 2146.7790527344;
    Teles[MAX_TELE][PosY]       = 2413.2453613281;
    Teles[MAX_TELE][PosZ]       = 65.303955078125;
    Teles[MAX_TELE][PosZZ]       = 0;
    Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
    Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
    Teles[MAX_TELE][Interior]    = 3;
    Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
    Teles[MAX_TELE][Lock]       = false;
    SetStyleTextDrawTeles(MAX_TELE, "Salida de la Oficina");
    Teles[MAX_TELE][Dueno]      = TALLER_SF;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = -2170.2810;
	Teles[MAX_TELE][PosY]       = 635.5530;
	Teles[MAX_TELE][PosZ]       = 1052.3750;
	Teles[MAX_TELE][PosZZ]       = 2.5660;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 1;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al s\xa6tano");
	Teles[MAX_TELE][Dueno]      = CONTRABANDISTAS;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1889.8413;
	Teles[MAX_TELE][PosY]       = 1017.8366;
	Teles[MAX_TELE][PosZ]       = 31.8828;
	Teles[MAX_TELE][PosZZ]       = 268.9445;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 10;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida del s\xa6tano");
	Teles[MAX_TELE][Dueno]      = CONTRABANDISTAS;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 2157.3743;
	Teles[MAX_TELE][PosY]       = 1596.4598;
	Teles[MAX_TELE][PosZ]       = 999.9688;
	Teles[MAX_TELE][PosZZ]       = 4.7598;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 1;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Estudio CNN");
	Teles[MAX_TELE][Dueno]      = CNN;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1101;
	Teles[MAX_TELE][PosY]       = 1249;
	Teles[MAX_TELE][PosZ]       = 11;
	Teles[MAX_TELE][PosZZ]       = 269.0042;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 1;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida del Estudio CNN");
	Teles[MAX_TELE][Dueno]      = CNN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 738.1631;
	Teles[MAX_TELE][PosY]       = -1340.1409;
	Teles[MAX_TELE][PosZ]       = 13.5280;
	Teles[MAX_TELE][PosZZ]       = 265.0780;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada a la CNN");
	Teles[MAX_TELE][Dueno]      = CNN;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 2168.2505;
	Teles[MAX_TELE][PosY]       = 1618.6906;
	Teles[MAX_TELE][PosZ]       = 999.9783;
	Teles[MAX_TELE][PosZZ]       = 94.5618;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 1;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida de la CNN");
	Teles[MAX_TELE][Dueno]      = CNN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1134.5614;
	Teles[MAX_TELE][PosY]       = 1536.8871;
	Teles[MAX_TELE][PosZ]       = 8.7609;
	Teles[MAX_TELE][PosZZ]       = 11.6660;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 15;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida del Escenario");
	Teles[MAX_TELE][Dueno]      = CNN;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1429.37890625;
	Teles[MAX_TELE][PosY]       = 1330.96484375;
	Teles[MAX_TELE][PosZ]       = 10.824451446533;
	Teles[MAX_TELE][PosZZ]       = 8.9184;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 15;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada del Escenario");
	Teles[MAX_TELE][Dueno]      = CNN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1467.587890625;
	Teles[MAX_TELE][PosY]       = 1768.2156982422;
	Teles[MAX_TELE][PosZ]       = 10.886232376099;
	Teles[MAX_TELE][PosZZ]       = 256.6949;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 15;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada del Escenario");
	Teles[MAX_TELE][Dueno]      = CNN;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1136.5123291016;
	Teles[MAX_TELE][PosY]       = 1563.9095458984;
	Teles[MAX_TELE][PosZ]       = 7.9992809295654;
	Teles[MAX_TELE][PosZZ]       = 87.8791;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 15;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida del Escenario");
	Teles[MAX_TELE][Dueno]      = CNN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1108.5697021484;
	Teles[MAX_TELE][PosY]       = 1243.2000732422;
	Teles[MAX_TELE][PosZ]       = 10.8203125;
	Teles[MAX_TELE][PosZZ]       = 1.9525;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 1;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada a la Disquera");
	Teles[MAX_TELE][Dueno]      = CNN;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1164.0368652344;
	Teles[MAX_TELE][PosY]       = 1234.8566894531;
	Teles[MAX_TELE][PosZ]       = 10.86562538147;
	Teles[MAX_TELE][PosZZ]       = 93.6875;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 1;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida de la Disquera");
	Teles[MAX_TELE][Dueno]      = CNN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 2172.9865722656;
	Teles[MAX_TELE][PosY]       = 1602.1372070313;
	Teles[MAX_TELE][PosZ]       = 999.966796875;
	Teles[MAX_TELE][PosZZ]       = 81.4674;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 1;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada a la Oficina");
	Teles[MAX_TELE][Dueno]      = CNN;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1157.4987792969;
	Teles[MAX_TELE][PosY]       = 1323.1114501953;
	Teles[MAX_TELE][PosZ]       = 10.825625419617;
	Teles[MAX_TELE][PosZZ]       = 0;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 1;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida de la Oficina");
	Teles[MAX_TELE][Dueno]      = CNN;
/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1454.3125;
	Teles[MAX_TELE][PosY]       = 1768.3715820313;
	Teles[MAX_TELE][PosZ]       = 10.876362800598;
	Teles[MAX_TELE][PosZZ]       = 87.5658;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 15;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada del Escenario");
	Teles[MAX_TELE][Dueno]      = CNN;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1115.4089355469;
	Teles[MAX_TELE][PosY]       = 1572.2352294922;
	Teles[MAX_TELE][PosZ]       = 7.9992809295654;
	Teles[MAX_TELE][PosZZ]       = 255.4415;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 15;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida del Escenario");
	Teles[MAX_TELE][Dueno]      = CNN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = -2227.1040;
	Teles[MAX_TELE][PosY]       = 258.4172;
	Teles[MAX_TELE][PosZ]       = 35.3203;
	Teles[MAX_TELE][PosZZ]       = 91.3942;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Teatro");
	Teles[MAX_TELE][Dueno]      = CNN;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1466.6284179688;
	Teles[MAX_TELE][PosY]       = 1785.3125;
	Teles[MAX_TELE][PosZ]       = 10.890875816345;
	Teles[MAX_TELE][PosZZ]       = 173.0341;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 15;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida del Teatro");
	Teles[MAX_TELE][Dueno]      = CNN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = -2227.2205;
	Teles[MAX_TELE][PosY]       = 245.8377;
	Teles[MAX_TELE][PosZ]       = 35.3203;
	Teles[MAX_TELE][PosZZ]       = 88.4293;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Teatro");
	Teles[MAX_TELE][Dueno]      = CNN;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1454.88671875;
	Teles[MAX_TELE][PosY]       = 1785.3096923828;
	Teles[MAX_TELE][PosZ]       = 10.887344360352;
	Teles[MAX_TELE][PosZZ]       = 178.9875;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 15;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida del Teatro");
	Teles[MAX_TELE][Dueno]      = CNN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = -2172.0320;
	Teles[MAX_TELE][PosY]       = 258.4347;
	Teles[MAX_TELE][PosZ]       = 35.3285;
	Teles[MAX_TELE][PosZZ]       = 267.4893;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Teatro");
	Teles[MAX_TELE][Dueno]      = CNN;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1420.767578125;
	Teles[MAX_TELE][PosY]       = 1342.3922119141;
	Teles[MAX_TELE][PosZ]       = 10.824451446533;
	Teles[MAX_TELE][PosZZ]       = 170.4316;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 15;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida del Teatro");
	Teles[MAX_TELE][Dueno]      = CNN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = -2172.0396;
	Teles[MAX_TELE][PosY]       = 245.8115;
	Teles[MAX_TELE][PosZ]       = 35.3307;
	Teles[MAX_TELE][PosZZ]       = 274.1675;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Teatro");
	Teles[MAX_TELE][Dueno]      = CNN;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1432.4573974609;
	Teles[MAX_TELE][PosY]       = 1342.3981933594;
	Teles[MAX_TELE][PosZ]       = 10.824451446533;
	Teles[MAX_TELE][PosZZ]       = 158.0665;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 15;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida del Teatro");
	Teles[MAX_TELE][Dueno]      = CNN;
	/////////////////////////////////////////////////////////////////////

	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 552.0045;
	Teles[MAX_TELE][PosY]       = -2982.3110;
	Teles[MAX_TELE][PosZ]       = 10.9435;
	Teles[MAX_TELE][PosZZ]       = 9.9225;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada Casa en la Isla");
	Teles[MAX_TELE][Dueno]      = CIVIL;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 422.1125;
	Teles[MAX_TELE][PosY]       = 2536.4973;
	Teles[MAX_TELE][PosZ]       = 10.0000;
	Teles[MAX_TELE][PosZZ]       = 84.6123;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 10;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida Casa en la Isla");
	Teles[MAX_TELE][Dueno]      = CIVIL;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 718.6540;
	Teles[MAX_TELE][PosY]       = -1476.3484;
	Teles[MAX_TELE][PosZ]       = 5.4688;
	Teles[MAX_TELE][PosZZ]       = 176.4081;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada Trasera Contrabandistas");
	Teles[MAX_TELE][Dueno]      = CONTRABANDISTAS;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = -2170.2568;
	Teles[MAX_TELE][PosY]       = 639.5164;
	Teles[MAX_TELE][PosZ]       = 1052.3750;
	Teles[MAX_TELE][PosZZ]       = 178.6796;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 1;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida Trasera Contrabandistas");
	Teles[MAX_TELE][Dueno]      = CONTRABANDISTAS;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1564.8403;
	Teles[MAX_TELE][PosY]       = -1666.9033;
	Teles[MAX_TELE][PosZ]       = 28.3956;
	Teles[MAX_TELE][PosZZ]       = 1.3394;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Ascensor a la LSPD");
	Teles[MAX_TELE][Dueno]      = LSPD;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 217.4351;
	Teles[MAX_TELE][PosY]       = 68.2754;
	Teles[MAX_TELE][PosZ]       = 1005.0466;
	Teles[MAX_TELE][PosZZ]       = 270.9305;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 6;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Ascensor al techo de LSPD");
	Teles[MAX_TELE][Dueno]      = LSPD;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = -1606.3125;
	Teles[MAX_TELE][PosY]       = 672.0709;
	Teles[MAX_TELE][PosZ]       = -4.9063;
	Teles[MAX_TELE][PosZZ]       = 357.5396;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada a la SFPD");
	Teles[MAX_TELE][Dueno]      = SFPD;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 214.3840;
	Teles[MAX_TELE][PosY]       = 121.9527;
	Teles[MAX_TELE][PosZ]       = 999.0156;
	Teles[MAX_TELE][PosZZ]       = 272.1939;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 10;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida al Parqueo SFPD");
	Teles[MAX_TELE][Dueno]      = SFPD;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 259.27764892578;
	Teles[MAX_TELE][PosY]       = 107.46966552734;
	Teles[MAX_TELE][PosZ]       = 1003.2257080078;
	Teles[MAX_TELE][PosZZ]       = 0;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 10;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "C\x98maras de Seguridad");
	Teles[MAX_TELE][Dueno]      = SFPD;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1954.5887451172;
	Teles[MAX_TELE][PosY]       = 968.81573486328;
	Teles[MAX_TELE][PosZ]       = 21.870922088623;
	Teles[MAX_TELE][PosZZ]       = 0;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 7;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "C\x98maras de Seguridad");
	Teles[MAX_TELE][Dueno]      = SFPD;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 2706.5669;
	Teles[MAX_TELE][PosY]       = -1315.4844;
	Teles[MAX_TELE][PosZ]       = 1009.6639;
	Teles[MAX_TELE][PosZZ]       = 87.3108;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 2;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida de la Univeresidad");
	Teles[MAX_TELE][Dueno]      = LICENCIEROS;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = -1492.4878;
	Teles[MAX_TELE][PosY]       = 920.1396;
	Teles[MAX_TELE][PosZ]       = 7.1875;
	Teles[MAX_TELE][PosZZ]       = 88.9468;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada de la Universidad");
	Teles[MAX_TELE][Dueno]      = LICENCIEROS;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = -328.7082;
	Teles[MAX_TELE][PosY]       = -877.2928;
	Teles[MAX_TELE][PosZ]       = 49.2925;
	Teles[MAX_TELE][PosZZ]       = 331.9713;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Hotel Blur~N~~G~Precio: ~W~$40");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	HOTEL_PICKUPID_out = Teles[MAX_TELE][PickupID];
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 965.0988;
	Teles[MAX_TELE][PosY]       = -53.1099;
	Teles[MAX_TELE][PosZ]       = 1001.1246;
	Teles[MAX_TELE][PosZZ]       = 86.4610;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 3;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida del Hotel Blur");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 2393.4978027344;
	Teles[MAX_TELE][PosY]       = 1156.5870361328;
	Teles[MAX_TELE][PosZ]       = 34.606250762939;
	Teles[MAX_TELE][PosZZ]       = 267.0350;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       -1);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 3;
	Teles[MAX_TELE][World]       = 1;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Cocina del Tren");
	Teles[MAX_TELE][Dueno]      = CIVIL;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 2368.111132813;
	Teles[MAX_TELE][PosY]       = 1106.6160888672;
	Teles[MAX_TELE][PosZ]       = 35.5234375;
	Teles[MAX_TELE][PosZZ]       = 180;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       -1);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 3;
	Teles[MAX_TELE][World]       = 1;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Primer Vag\xa6n");
	Teles[MAX_TELE][Dueno]      = CIVIL;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 2407.4384765625;
	Teles[MAX_TELE][PosY]       = 1159.5922851563;
	Teles[MAX_TELE][PosZ]       = 34.606250762939;
	Teles[MAX_TELE][PosZZ]       = 90;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       -1);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 3;
	Teles[MAX_TELE][World]       = 1;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Segundo Vag\xa6n");
	Teles[MAX_TELE][Dueno]      = CIVIL;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 2394.1958007813;
	Teles[MAX_TELE][PosY]       = 1136.3139648438;
	Teles[MAX_TELE][PosZ]       = 34.267810821533;
	Teles[MAX_TELE][PosZZ]       = 270;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       -1);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 3;
	Teles[MAX_TELE][World]       = 2;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Primer Vag\xa6n");
	Teles[MAX_TELE][Dueno]      = CIVIL;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 2408.9052734375;
	Teles[MAX_TELE][PosY]       = 1133.2030029297;
	Teles[MAX_TELE][PosZ]       = 34.267810821533;
	Teles[MAX_TELE][PosZZ]       = 93.6150;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       -1);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 3;
	Teles[MAX_TELE][World]       = 2;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Bar del Tren");
	Teles[MAX_TELE][Dueno]      = CIVIL;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 2391.4890136719;
	Teles[MAX_TELE][PosY]       = 1110.3713378906;
	Teles[MAX_TELE][PosZ]       = 34.726249694824;
	Teles[MAX_TELE][PosZZ]       = 270;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       -1);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 3;
	Teles[MAX_TELE][World]       = 3;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Segundo Vag\xa6n");
	Teles[MAX_TELE][Dueno]      = CIVIL;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = -2156.4973144531;
	Teles[MAX_TELE][PosY]       = 645.49560546875;
	Teles[MAX_TELE][PosZ]       = 52.3671875;
	Teles[MAX_TELE][PosZZ]       = 270;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Callej\xa6n");
	Teles[MAX_TELE][Dueno]      = YKZ;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 958.16076660156;
	Teles[MAX_TELE][PosY]       = 1724.9559326172;
	Teles[MAX_TELE][PosZ]       = 8.6735439300537;
	Teles[MAX_TELE][PosZZ]       = 0;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 6;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida del Callej\xa6n");
	Teles[MAX_TELE][Dueno]      = YKZ;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 922.11932373047;
	Teles[MAX_TELE][PosY]       = 1893.5383300781;
	Teles[MAX_TELE][PosZ]       = 10.953544616699;
	Teles[MAX_TELE][PosZZ]       = 270;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 6;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Callej\xa6n");
	Teles[MAX_TELE][Dueno]      = YKZ;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 959.18499755859;
	Teles[MAX_TELE][PosY]       = 1734.5708007813;
	Teles[MAX_TELE][PosZ]       = 8.6735439300537;
	Teles[MAX_TELE][PosZZ]       = 90;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 6;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Garage");
	Teles[MAX_TELE][Dueno]      = YKZ;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = -2172.4489746094;
	Teles[MAX_TELE][PosY]       = 679.87506103516;
	Teles[MAX_TELE][PosZ]       = 55.161350250244;
	Teles[MAX_TELE][PosZZ]       = 90;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Callej\xa6n");
	Teles[MAX_TELE][Dueno]      = YKZ;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 963.85028076172;
	Teles[MAX_TELE][PosY]       = 1742.0075683594;
	Teles[MAX_TELE][PosZ]       = 8.6735439300537;
	Teles[MAX_TELE][PosZZ]       = 180;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 6;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida del Callej\xa6n");
	Teles[MAX_TELE][Dueno]      = YKZ;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1670.0425;
	Teles[MAX_TELE][PosY]       = 715.2111;
	Teles[MAX_TELE][PosZ]       = 10.8751;
	Teles[MAX_TELE][PosZZ]       = 270;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 11;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Segundo Piso");
	Teles[MAX_TELE][Dueno]      = SFMD;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1712.5504;
	Teles[MAX_TELE][PosY]       = 712.4996;
	Teles[MAX_TELE][PosZ]       = 10.8751;
	Teles[MAX_TELE][PosZZ]       = 270;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 11;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Primer Piso");
	Teles[MAX_TELE][Dueno]      = SFMD;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1719.3922;
	Teles[MAX_TELE][PosY]       = 730.5467;
	Teles[MAX_TELE][PosZ]       = 10.8729;
	Teles[MAX_TELE][PosZZ]       = 90;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 11;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Parking");
	Teles[MAX_TELE][Dueno]      = SFMD;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 2116.4800;
	Teles[MAX_TELE][PosY]       = 2405.5039;
	Teles[MAX_TELE][PosZ]       = 10.8281;
	Teles[MAX_TELE][PosZZ]       = 90;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 0;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Segundo Piso");
	Teles[MAX_TELE][Dueno]      = SFMD;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = -1924.6778564453;
	Teles[MAX_TELE][PosY]       = 292.90539550781;
	Teles[MAX_TELE][PosZ]       = 41.046875;
	Teles[MAX_TELE][PosZZ]       = 270;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al concesionario");
	Teles[MAX_TELE][Dueno]      = NFS;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = -496.75540161133;
	Teles[MAX_TELE][PosY]       = 2565.6108398438;
	Teles[MAX_TELE][PosZ]       = 53.870487213135;
	Teles[MAX_TELE][PosZZ]       = 90;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 16;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida del concesionario");
	Teles[MAX_TELE][Dueno]      = NFS;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1752.5007;
	Teles[MAX_TELE][PosY]       = -1912.1681;
	Teles[MAX_TELE][PosZ]       = 13.5675;
	Teles[MAX_TELE][PosZZ]       = 271.2171;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada trasera");
	Teles[MAX_TELE][Dueno]      = TAXI;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 2193.3528;
	Teles[MAX_TELE][PosY]       = -1138.6293;
	Teles[MAX_TELE][PosZ]       = 1029.7969;
	Teles[MAX_TELE][PosZZ]       = 183.2019;
	Teles[MAX_TELE][PickupID]   = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 15;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida trasera");
	Teles[MAX_TELE][Dueno]      = TAXI;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = -2468.2424316406;
	Teles[MAX_TELE][PosY]       = 136.53466796875;
	Teles[MAX_TELE][PosZ]       = 35.171875;
	Teles[MAX_TELE][PosZZ]       = 0;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Museo ~B~Colonial SF~N~~G~Precio: ~W~$40");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	MUSEO_PICKUPID_out[0] = Teles[MAX_TELE][PickupID];
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 319.75296020508;
	Teles[MAX_TELE][PosY]       = 2524.7204589844;
	Teles[MAX_TELE][PosZ]       = 16.950752258301;
	Teles[MAX_TELE][PosZZ]       = 180;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 15;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida del Museo ~B~Colonial");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = -2458.8830566406;
	Teles[MAX_TELE][PosY]       = 127.17351531982;
	Teles[MAX_TELE][PosZ]       = 35.175952911377;
	Teles[MAX_TELE][PosZZ]       = 0;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Museo ~B~Colonial~N~~G~Precio: ~W~$40");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	MUSEO_PICKUPID_out[1] = Teles[MAX_TELE][PickupID];
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 325.13787841797;
	Teles[MAX_TELE][PosY]       = 2524.6809082031;
	Teles[MAX_TELE][PosZ]       = 16.950752258301;
	Teles[MAX_TELE][PosZZ]       = 180;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 15;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida del Museo ~B~Colonial");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 356.43566894531;
	Teles[MAX_TELE][PosY]       = 2502.3215332031;
	Teles[MAX_TELE][PosZ]       = 17.695938110352;
	Teles[MAX_TELE][PosZZ]       = 90;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 15;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada a la Segunda Planta");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 211.33430480957;
	Teles[MAX_TELE][PosY]       = 2464.2944335938;
	Teles[MAX_TELE][PosZ]       = 17.695938110352;
	Teles[MAX_TELE][PosZZ]       = 0;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 15;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida de la Segunda Planta");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 356.42413330078;
	Teles[MAX_TELE][PosY]       = 2492.5109863281;
	Teles[MAX_TELE][PosZ]       = 17.688510894775;
	Teles[MAX_TELE][PosZZ]       = 90;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 15;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada a la Segunda Planta");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 220.27177429199;
	Teles[MAX_TELE][PosY]       = 2464.259765625;
	Teles[MAX_TELE][PosZ]       = 17.695938110352;
	Teles[MAX_TELE][PosZZ]       = 0;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 15;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida de la Segunda Planta");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 216.9066;
	Teles[MAX_TELE][PosY]       = 2518.2739;
	Teles[MAX_TELE][PosZ]       = 16.9508;
	Teles[MAX_TELE][PosZZ]       = 180;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 15;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada a la Tumba de Skiruch");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 574.20227050781;
	Teles[MAX_TELE][PosY]       = 1666.4656982422;
	Teles[MAX_TELE][PosZ]       = 7.1796875;
	Teles[MAX_TELE][PosZZ]       = 177.3484;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 15;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida de la Tumba de Skiruch");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 2347.5518;
	Teles[MAX_TELE][PosY]       = -661.9667;
	Teles[MAX_TELE][PosZ]       = 128.3023;
	Teles[MAX_TELE][PosZZ]       = 180;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Almac\x9en");
	Teles[MAX_TELE][Dueno]      = LCN;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 672.85406494141;
	Teles[MAX_TELE][PosY]       = 1833.5776367188;
	Teles[MAX_TELE][PosZ]       = 5.623797416687;
	Teles[MAX_TELE][PosZZ]       = 0;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 12;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida del Almac\x9en");
	Teles[MAX_TELE][Dueno]      = LCN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1736.0247;
	Teles[MAX_TELE][PosY]       = -2052.7773;
	Teles[MAX_TELE][PosZ]       = 20.6677;
	Teles[MAX_TELE][PosZZ]       = 359.9336;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 15;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida del Taller");
	Teles[MAX_TELE][Dueno]      = TALLER_LS;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1736.4465;
	Teles[MAX_TELE][PosY]       = -2054.0835;
	Teles[MAX_TELE][PosZ]       = 13.5707;
	Teles[MAX_TELE][PosZZ]       = 186.8224;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Taller");
	Teles[MAX_TELE][Dueno]      = TALLER_LS;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1297.4171;
	Teles[MAX_TELE][PosY]       = -800.9077;
	Teles[MAX_TELE][PosZ]       = 84.1406;
	Teles[MAX_TELE][PosZZ]       = 273.6443;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Subida a la Piscina");
	Teles[MAX_TELE][Dueno]      = CIVIL;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1302.2789;
	Teles[MAX_TELE][PosY]       = -784.9661;
	Teles[MAX_TELE][PosZ]       = 88.3125;
	Teles[MAX_TELE][PosZZ]       = 173.7368;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Bajada a la entrada");
	Teles[MAX_TELE][Dueno]      = CIVIL;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1295.4213;
	Teles[MAX_TELE][PosY]       = -787.3893;
	Teles[MAX_TELE][PosZ]       = 88.3125;
	Teles[MAX_TELE][PosZZ]       = 270.2211;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Subida a el techo");
	Teles[MAX_TELE][Dueno]      = CIVIL;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1293.5460;
	Teles[MAX_TELE][PosY]       = -788.4596;
	Teles[MAX_TELE][PosZ]       = 92.0313;
	Teles[MAX_TELE][PosZZ]       = 178.7269;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Bajada a la Piscina");
	Teles[MAX_TELE][Dueno]      = CIVIL;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1280.5542;
	Teles[MAX_TELE][PosY]       = -812.2928;
	Teles[MAX_TELE][PosZ]       = 83.4447;
	Teles[MAX_TELE][PosZZ]       = 180.4959;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al balc\xa6n");
	Teles[MAX_TELE][Dueno]      = CIVIL;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1280.5941;
	Teles[MAX_TELE][PosY]       = -828.9892;
	Teles[MAX_TELE][PosZ]       = 76.7210;
	Teles[MAX_TELE][PosZZ]       = 179.8692;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida del balc\xa6n");
	Teles[MAX_TELE][Dueno]      = CIVIL;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1730.4862;
	Teles[MAX_TELE][PosY]       = -2022.9677;
	Teles[MAX_TELE][PosZ]       = 20.6677;
	Teles[MAX_TELE][PosZZ]       = 273.4293;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 15;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada a la Oficina");
	Teles[MAX_TELE][Dueno]      = TALLER_LS;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1588.6605;
	Teles[MAX_TELE][PosY]       = -2505.8286;
	Teles[MAX_TELE][PosZ]       = 13.5547;
	Teles[MAX_TELE][PosZZ]       = 267.3497;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       6);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 15;
	Teles[MAX_TELE][World]       = 6;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida de la Oficina");
	Teles[MAX_TELE][Dueno]      = TALLER_LS;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1636.3885;
	Teles[MAX_TELE][PosY]       = -2491.0374;
	Teles[MAX_TELE][PosZ]       = 13.6198;
	Teles[MAX_TELE][PosZZ]       = 273.1169;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 3;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada a el Recibidor");
	Teles[MAX_TELE][Dueno]      = NFS;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1502.6072;
	Teles[MAX_TELE][PosY]       = 1308.4796;
	Teles[MAX_TELE][PosZ]       = 1093.2891;
	Teles[MAX_TELE][PosZZ]       = 89.9395;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 3;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Concesionario");
	Teles[MAX_TELE][Dueno]      = NFS;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 549.5990;
	Teles[MAX_TELE][PosY]       = -1293.8884;
	Teles[MAX_TELE][PosZ]       = 17.2482;
	Teles[MAX_TELE][PosZZ]       = 4.7037;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Concesionario");
	Teles[MAX_TELE][Dueno]      = NFS;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1647.4929;
	Teles[MAX_TELE][PosY]       = -2486.1321;
	Teles[MAX_TELE][PosZ]       = 13.6146;
	Teles[MAX_TELE][PosZZ]       = 178.7792;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 3;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida del Concesionario");
	Teles[MAX_TELE][Dueno]      = NFS;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 548.6264;
	Teles[MAX_TELE][PosY]       = -1314.2053;
	Teles[MAX_TELE][PosZ]       = 17.2422;
	Teles[MAX_TELE][PosZZ]       = 183.6187;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Concesionario");
	Teles[MAX_TELE][Dueno]      = NFS;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1646.8503;
	Teles[MAX_TELE][PosY]       = -2502.7546;
	Teles[MAX_TELE][PosZ]       = 13.6146;
	Teles[MAX_TELE][PosZZ]       = 353.6208;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 3;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida del Concesionario");
	Teles[MAX_TELE][Dueno]      = NFS;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 2233.8840;
	Teles[MAX_TELE][PosY]       = -1333.2333;
	Teles[MAX_TELE][PosZ]       = 23.9815;
	Teles[MAX_TELE][PosZZ]       = 90;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada a la Iglesia");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 2870.7888183594;
	Teles[MAX_TELE][PosY]       = 911.54583740234;
	Teles[MAX_TELE][PosZ]       = 10.780518531799;
	Teles[MAX_TELE][PosZZ]       = 90;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 19;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida de la Iglesia");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 2254.2273;
	Teles[MAX_TELE][PosY]       = -1333.2040;
	Teles[MAX_TELE][PosZ]       = 23.9815;
	Teles[MAX_TELE][PosZZ]       = 270;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada a la Iglesia");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 2858.1708984375;
	Teles[MAX_TELE][PosY]       = 911.40795898438;
	Teles[MAX_TELE][PosZ]       = 10.780572891235;
	Teles[MAX_TELE][PosZZ]       = 270;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 19;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida de la Iglesia");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = -999.5003;
	Teles[MAX_TELE][PosY]       = -416.4885;
	Teles[MAX_TELE][PosZ]       = 36.2180;
	Teles[MAX_TELE][PosZZ]       = 317.9548;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada a la Garita");
	Teles[MAX_TELE][Dueno]      = SFPD;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = -1229.4156;
	Teles[MAX_TELE][PosY]       = -228.9857;
	Teles[MAX_TELE][PosZ]       = 14.4109;
	Teles[MAX_TELE][PosZZ]       = 309.2047;
	Teles[MAX_TELE][PickupID]           = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX], Teles[MAX_TELE][PosY], Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 4;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida de la Garita");
	Teles[MAX_TELE][Dueno]      = SFPD;
	/////////////////////////////////////////////////////////////////////sssssssssssssssssssssssssssssssssssss
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 2338.822265625;
	Teles[MAX_TELE][PosY]       = -1176.9663085938;
	Teles[MAX_TELE][PosZ]       = 1027.9765625;
	Teles[MAX_TELE][PosZZ]       = 270;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 5;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada a la Sala");
	Teles[MAX_TELE][Dueno]      = COLTS;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 2345.2273;
	Teles[MAX_TELE][PosY]       = -1180.6946;
	Teles[MAX_TELE][PosZ]       = 1031.9688;
	Teles[MAX_TELE][PosZZ]       = 83.8390;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 5;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida de la Sala");
	Teles[MAX_TELE][Dueno]      = COLTS;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 2329.5974121094;
	Teles[MAX_TELE][PosY]       = -1178.0240478516;
	Teles[MAX_TELE][PosZ]       = 1031.9765625;
	Teles[MAX_TELE][PosZZ]       = 180;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 5;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada a la Cocina");
	Teles[MAX_TELE][Dueno]      = COLTS;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 2330.2036132813;
	Teles[MAX_TELE][PosY]       = -1173.0665283203;
	Teles[MAX_TELE][PosZ]       = 1027.9765625;
	Teles[MAX_TELE][PosZZ]       = 90;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 5;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida de la Cocina");
	Teles[MAX_TELE][Dueno]      = COLTS;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 2319.7219238281;
	Teles[MAX_TELE][PosY]       = -1185.8811035156;
	Teles[MAX_TELE][PosZ]       = 1028.6401367188;
	Teles[MAX_TELE][PosZZ]       = 0;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 5;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Subterr\x98neo");
	Teles[MAX_TELE][Dueno]      = COLTS;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1088.2927246094;
	Teles[MAX_TELE][PosY]       = 1707.5489501953;
	Teles[MAX_TELE][PosZ]       = 10.915323257446;
	Teles[MAX_TELE][PosZZ]       = 270;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 5;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entada a la Casa Colts");
	Teles[MAX_TELE][Dueno]      = COLTS;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1103.0180664063;
	Teles[MAX_TELE][PosY]       = 1707.4780273438;
	Teles[MAX_TELE][PosZ]       = 10.915323257446;
	Teles[MAX_TELE][PosZZ]       = 90;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 5;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Garage Colts");
	Teles[MAX_TELE][Dueno]      = COLTS;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1080.2182617188;
	Teles[MAX_TELE][PosY]       = 1752.4036865234;
	Teles[MAX_TELE][PosZ]       = 10.872812271118;
	Teles[MAX_TELE][PosZZ]       = 180;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 5;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Subterr\x98neo");
	Teles[MAX_TELE][Dueno]      = COLTS;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 2688.6977539063;
	Teles[MAX_TELE][PosY]       = 819.4150390625;
	Teles[MAX_TELE][PosZ]       = 10.963800430298;
	Teles[MAX_TELE][PosZZ]       = 90;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 6;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Garage");
	Teles[MAX_TELE][Dueno]      = AK;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 2653.9909667969;
	Teles[MAX_TELE][PosY]       = 800.59191894531;
	Teles[MAX_TELE][PosZ]       = 11.072454452515;
	Teles[MAX_TELE][PosZZ]       = 180;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 6;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada a la Casa AK");
	Teles[MAX_TELE][Dueno]      = AK;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1290.7635498047;
	Teles[MAX_TELE][PosY]       = -1161.25390625;
	Teles[MAX_TELE][PosZ]       = 23.960971832275;
	Teles[MAX_TELE][PosZZ]       = 0;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Teatro");
	Teles[MAX_TELE][Dueno]      = CNN;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1536.1700439453;
	Teles[MAX_TELE][PosY]       = 1715.9340820313;
	Teles[MAX_TELE][PosZ]       = 10.8359375;
	Teles[MAX_TELE][PosZZ]       = 90;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 8;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida del Teatro");
	Teles[MAX_TELE][Dueno]      = CNN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1283.6845703125;
	Teles[MAX_TELE][PosY]       = -1161.2530517578;
	Teles[MAX_TELE][PosZ]       = 23.960971832275;
	Teles[MAX_TELE][PosZZ]       = 0;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Teatro");
	Teles[MAX_TELE][Dueno]      = CNN;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1536.1544189453;
	Teles[MAX_TELE][PosY]       = 1724.9639892578;
	Teles[MAX_TELE][PosZ]       = 10.8359375;
	Teles[MAX_TELE][PosZZ]       = 90;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 8;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida del Teatro");
	Teles[MAX_TELE][Dueno]      = CNN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1312.9364013672;
	Teles[MAX_TELE][PosY]       = -1172.4615478516;
	Teles[MAX_TELE][PosZ]       = 23.798957824707;
	Teles[MAX_TELE][PosZZ]       = 180;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Pasillo");
	Teles[MAX_TELE][Dueno]      = CNN;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1486.4763183594;
	Teles[MAX_TELE][PosY]       = 1668.74609375;
	Teles[MAX_TELE][PosZ]       = 10.8359375;
	Teles[MAX_TELE][PosZZ]       = 180;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 8;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida del Pasillo");
	Teles[MAX_TELE][Dueno]      = CNN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1262.4205322266;
	Teles[MAX_TELE][PosY]       = -1172.4796142578;
	Teles[MAX_TELE][PosZ]       = 23.81217956543;
	Teles[MAX_TELE][PosZZ]       = 180;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Pasillo");
	Teles[MAX_TELE][Dueno]      = CNN;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1507.8590087891;
	Teles[MAX_TELE][PosY]       = 1668.7855224609;
	Teles[MAX_TELE][PosZ]       = 10.8359375;
	Teles[MAX_TELE][PosZZ]       = 180;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 8;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida del Pasillo");
	Teles[MAX_TELE][Dueno]      = CNN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1257.2631835938;
	Teles[MAX_TELE][PosY]       = -1165.2355957031;
	Teles[MAX_TELE][PosZ]       = 23.828125;
	Teles[MAX_TELE][PosZZ]       = 90;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada Secundaria");
	Teles[MAX_TELE][Dueno]      = CNN;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1560.9891357422;
	Teles[MAX_TELE][PosY]       = 1427.7696533203;
	Teles[MAX_TELE][PosZ]       = 10.93593788147;
	Teles[MAX_TELE][PosZZ]       = 90;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 8;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida");
	Teles[MAX_TELE][Dueno]      = CNN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1552.3513183594;
	Teles[MAX_TELE][PosY]       = 1426.0701904297;
	Teles[MAX_TELE][PosZ]       = 10.93593788147;
	Teles[MAX_TELE][PosZZ]       = 0;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 8;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada a la Boleteria");
	Teles[MAX_TELE][Dueno]      = CNN;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1527.1134033203;
	Teles[MAX_TELE][PosY]       = 1720.8371582031;
	Teles[MAX_TELE][PosZ]       = 10.8359375;
	Teles[MAX_TELE][PosZZ]       = 270;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 8;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida de la Boleteria");
	Teles[MAX_TELE][Dueno]      = CNN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1530.4528808594;
	Teles[MAX_TELE][PosY]       = 1425.8669433594;
	Teles[MAX_TELE][PosZ]       = 10.93593788147;
	Teles[MAX_TELE][PosZZ]       = 0;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 8;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Solo Actores");
	Teles[MAX_TELE][Dueno]      = CNN;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1409.2100830078;
	Teles[MAX_TELE][PosY]       = 1826.9398193359;
	Teles[MAX_TELE][PosZ]       = 10.93593788147;
	Teles[MAX_TELE][PosZZ]       = 90;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 8;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida");
	Teles[MAX_TELE][Dueno]      = CNN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1488.2552490234;
	Teles[MAX_TELE][PosY]       = 1645.0343017578;
	Teles[MAX_TELE][PosZ]       = 10.8359375;
	Teles[MAX_TELE][PosZZ]       = 90;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 8;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Teatro");
	Teles[MAX_TELE][Dueno]      = CNN;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1533.6856689453;
	Teles[MAX_TELE][PosY]       = 1709.6895751953;
	Teles[MAX_TELE][PosZ]       = 10.8359375;
	Teles[MAX_TELE][PosZZ]       = 0;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 8;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Pasillo");
	Teles[MAX_TELE][Dueno]      = CNN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1506.0463867188;
	Teles[MAX_TELE][PosY]       = 1645.3109130859;
	Teles[MAX_TELE][PosZ]       = 10.8359375;
	Teles[MAX_TELE][PosZZ]       = 270;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 8;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Teatro");
	Teles[MAX_TELE][Dueno]      = CNN;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1533.8020019531;
	Teles[MAX_TELE][PosY]       = 1730.5770263672;
	Teles[MAX_TELE][PosZ]       = 10.8359375;
	Teles[MAX_TELE][PosZZ]       = 180;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 8;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Pasillo");
	Teles[MAX_TELE][Dueno]      = CNN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1526.9104003906;
	Teles[MAX_TELE][PosY]       = 1730.3848876953;
	Teles[MAX_TELE][PosZ]       = 10.8359375;
	Teles[MAX_TELE][PosZZ]       = 270;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 8;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Pasillo Principal");
	Teles[MAX_TELE][Dueno]      = CNN;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1585.0755615234;
	Teles[MAX_TELE][PosY]       = 1598.1029052734;
	Teles[MAX_TELE][PosZ]       = 10.8359375;
	Teles[MAX_TELE][PosZZ]       = 180;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 8;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida");
	Teles[MAX_TELE][Dueno]      = CNN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1526.9020996094;
	Teles[MAX_TELE][PosY]       = 1709.9836425781;
	Teles[MAX_TELE][PosZ]       = 10.8359375;
	Teles[MAX_TELE][PosZZ]       = 270;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 8;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Pasillo Principal");
	Teles[MAX_TELE][Dueno]      = CNN;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1604.3533935547;
	Teles[MAX_TELE][PosY]       = 1598.0865478516;
	Teles[MAX_TELE][PosZ]       = 10.8359375;
	Teles[MAX_TELE][PosZZ]       = 180;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 8;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida");
	Teles[MAX_TELE][Dueno]      = CNN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1594.6496582031;
	Teles[MAX_TELE][PosY]       = 1591.458984375;
	Teles[MAX_TELE][PosZ]       = 10.8359375;
	Teles[MAX_TELE][PosZZ]       = 0;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 8;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Teatro");
	Teles[MAX_TELE][Dueno]      = CNN;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1370.279296875;
	Teles[MAX_TELE][PosY]       = 1829.9675292969;
	Teles[MAX_TELE][PosZ]       = 10.8359375;
	Teles[MAX_TELE][PosZZ]       = 270;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 8;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida");
	Teles[MAX_TELE][Dueno]      = CNN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1245.2952880859;
	Teles[MAX_TELE][PosY]       = -1177.4346923828;
	Teles[MAX_TELE][PosZ]       = 23.51279258728;
	Teles[MAX_TELE][PosZZ]       = 0;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],        WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Parking");
	Teles[MAX_TELE][Dueno]      = CNN;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1960.4025878906;
	Teles[MAX_TELE][PosY]       = 1860.1754150391;
	Teles[MAX_TELE][PosZ]       = 27.63437461853;
	Teles[MAX_TELE][PosZZ]       = 90;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 8;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida del Parkin");
	Teles[MAX_TELE][Dueno]      = CNN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1225.7741699219;
	Teles[MAX_TELE][PosY]       = -1178.9755859375;
	Teles[MAX_TELE][PosZ]       = 22.388561248779;
	Teles[MAX_TELE][PosZZ]       = 90;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Parking");
	Teles[MAX_TELE][Dueno]      = CNN;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1958.3662109375;
	Teles[MAX_TELE][PosY]       = 1890.8638916016;
	Teles[MAX_TELE][PosZ]       = 27.63437461853;
	Teles[MAX_TELE][PosZZ]       = 180;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 8;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida del Parking");
	Teles[MAX_TELE][Dueno]      = CNN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1232.5668945313;
	Teles[MAX_TELE][PosY]       = -1210.4500732422;
	Teles[MAX_TELE][PosZ]       = 25.60440826416;
	Teles[MAX_TELE][PosZZ]       = 180;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Parking");
	Teles[MAX_TELE][Dueno]      = CNN;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1883.4437255859;
	Teles[MAX_TELE][PosY]       = 1888.3226318359;
	Teles[MAX_TELE][PosZ]       = 27.63437461853;
	Teles[MAX_TELE][PosZZ]       = 270;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 8;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Segundo Piso");
	Teles[MAX_TELE][Dueno]      = CNN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1051.7932128906;
	Teles[MAX_TELE][PosY]       = -346.07562255859;
	Teles[MAX_TELE][PosZ]       = 73.9921875;
	Teles[MAX_TELE][PosZZ]       = 0;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Almacen");
	Teles[MAX_TELE][Dueno]      = TRAFICANTES;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 2817.095703125;
	Teles[MAX_TELE][PosY]       = 2010.1229248047;
	Teles[MAX_TELE][PosZ]       = 16.792163848877;
	Teles[MAX_TELE][PosZZ]       = 90;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 10;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida del Almacen");
	Teles[MAX_TELE][Dueno]      = TRAFICANTES;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1871.1759033203;
	Teles[MAX_TELE][PosY]       = -1668.7211914063;
	Teles[MAX_TELE][PosZ]       = 31.811527252197;
	Teles[MAX_TELE][PosZZ]       = 0;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Alhambra");
	Teles[MAX_TELE][Dueno]      = LCN;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 473.89947509766;
	Teles[MAX_TELE][PosY]       = -11.645506858826;
	Teles[MAX_TELE][PosZ]       = 1003.6953125;
	Teles[MAX_TELE][PosZZ]       = 270;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       20);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 17;
	Teles[MAX_TELE][World]       = 20;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Piso Superior");
	Teles[MAX_TELE][Dueno]      = LCN;
	PickUpAlambraAndJizzy[0] = MAX_TELE;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = -2679.7185;
	Teles[MAX_TELE][PosY]       = 1403.4821;
	Teles[MAX_TELE][PosZ]       = 23.8926;
	Teles[MAX_TELE][PosZZ]       = 344.8997;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Jizzy's");
	Teles[MAX_TELE][Dueno]      = YKZ;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = -2676.2512207031;
	Teles[MAX_TELE][PosY]       = 1392.9838867188;
	Teles[MAX_TELE][PosZ]       = 918.3515625;
	Teles[MAX_TELE][PosZZ]       = 270;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       11);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 3;
	Teles[MAX_TELE][World]       = 11;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Piso Superior");
	Teles[MAX_TELE][Dueno]      = YKZ;
	PickUpAlambraAndJizzy[1] = MAX_TELE;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 755.12426757813;
	Teles[MAX_TELE][PosY]       = -1361.5046386719;
	Teles[MAX_TELE][PosZ]       = 13.512796401978;
	Teles[MAX_TELE][PosZZ]       = 270;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Parking");
	Teles[MAX_TELE][Dueno]      = CNN;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 2324.7255859375;
	Teles[MAX_TELE][PosY]       = 1419.7823486328;
	Teles[MAX_TELE][PosZ]       = 42.883346557617;
	Teles[MAX_TELE][PosZZ]       = 180;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 11;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida del Parking");
	Teles[MAX_TELE][Dueno]      = CNN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1546.3073;
	Teles[MAX_TELE][PosY]       = 1282.2327;
	Teles[MAX_TELE][PosZ]       = 10.8268;
	Teles[MAX_TELE][PosZZ]       = 265.0191;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]            = 10;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida del Almac\x9en NFS");
	Teles[MAX_TELE][Dueno]      = NFS;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = -50.6239;
	Teles[MAX_TELE][PosY]       = -233.6132;
	Teles[MAX_TELE][PosZ]       = 6.7646;
	Teles[MAX_TELE][PosZZ]       = 0.9264;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo]        = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]            = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al almac\x9en NFS");
	Teles[MAX_TELE][Dueno]      = NFS;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1219.2227783203;
	Teles[MAX_TELE][PosY]       = -1811.7043457031;
	Teles[MAX_TELE][PosZ]       = 16.59375;
	Teles[MAX_TELE][PosZZ]       = 180;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Museo ~B~Colonial LS~N~~G~Precio: ~W~$40");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	MUSEO_PICKUPID_out[2] = Teles[MAX_TELE][PickupID];
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1397.5463867188;
	Teles[MAX_TELE][PosY]       = 1603.9676513672;
	Teles[MAX_TELE][PosZ]       = 11.09531211853;
	Teles[MAX_TELE][PosZZ]       = 180;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 7;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida del Museo Colonial");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1154.0031738281;
	Teles[MAX_TELE][PosY]       = -1772.6787109375;
	Teles[MAX_TELE][PosZ]       = 16.599193572998;
	Teles[MAX_TELE][PosZZ]       = 0;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Museo ~B~Colonial LS~N~~G~Precio: ~W~$40");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	MUSEO_PICKUPID_out[3] = Teles[MAX_TELE][PickupID];
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1500.4696044922;
	Teles[MAX_TELE][PosY]       = 1325.8043212891;
	Teles[MAX_TELE][PosZ]       = 11.129955291748;
	Teles[MAX_TELE][PosZZ]       = 270;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 7;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida del Museo Colonial");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1111.9200439453;
	Teles[MAX_TELE][PosY]       = -1792.8372802734;
	Teles[MAX_TELE][PosZ]       = 16.59375;
	Teles[MAX_TELE][PosZZ]       = 90;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Museo ~B~Colonial LS~N~~G~Precio: ~W~$40");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	MUSEO_PICKUPID_out[4] = Teles[MAX_TELE][PickupID];
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1535.1656494141;
	Teles[MAX_TELE][PosY]       = 1296.5877685547;
	Teles[MAX_TELE][PosZ]       = 11.307640075684;
	Teles[MAX_TELE][PosZZ]       = 0;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 7;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida del Museo Colonial");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1111.9191894531;
	Teles[MAX_TELE][PosY]       = -1801.1604003906;
	Teles[MAX_TELE][PosZ]       = 16.59375;
	Teles[MAX_TELE][PosZZ]       = 90;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Museo ~B~Colonial LS~N~~G~Precio: ~W~$40");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	MUSEO_PICKUPID_out[5] = Teles[MAX_TELE][PickupID];
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1543.0972900391;
	Teles[MAX_TELE][PosY]       = 1296.5903320313;
	Teles[MAX_TELE][PosZ]       = 11.307619094849;
	Teles[MAX_TELE][PosZZ]       = 0;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 7;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida del Museo Colonial");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1113.7189941406;
	Teles[MAX_TELE][PosY]       = -1837.3305664063;
	Teles[MAX_TELE][PosZ]       = 16.5999584198;
	Teles[MAX_TELE][PosZZ]       = 90;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Museo ~B~Colonial LS~N~~G~Precio: ~W~$40");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	MUSEO_PICKUPID_out[6] = Teles[MAX_TELE][PickupID];
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1387.5858154297;
	Teles[MAX_TELE][PosY]       = 1214.0670166016;
	Teles[MAX_TELE][PosZ]       = 10.985989570618;
	Teles[MAX_TELE][PosZZ]       = 90;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 7;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida del Museo Colonial");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1449.5339355469;
	Teles[MAX_TELE][PosY]       = 1601.7739257813;
	Teles[MAX_TELE][PosZ]       = 10.841849327087;
	Teles[MAX_TELE][PosZZ]       = 90;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 7;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Pasillo");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1338.0384521484;
	Teles[MAX_TELE][PosY]       = 1214.0311279297;
	Teles[MAX_TELE][PosZ]       = 10.842981338501;
	Teles[MAX_TELE][PosZZ]       = 270;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 7;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Museo");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1368.1462402344;
	Teles[MAX_TELE][PosY]       = 1210.2509765625;
	Teles[MAX_TELE][PosZ]       = 11.014349937439;
	Teles[MAX_TELE][PosZZ]       = 0;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 7;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Museo");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1549.8510742188;
	Teles[MAX_TELE][PosY]       = 1338.1644287109;
	Teles[MAX_TELE][PosZ]       = 11.148050308228;
	Teles[MAX_TELE][PosZZ]       = 90;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 7;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Pasillo");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 2770.6630859375;
	Teles[MAX_TELE][PosY]       = -1628.7229003906;
	Teles[MAX_TELE][PosZ]       = 12.177460670471;
	Teles[MAX_TELE][PosZZ]       = 0;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Almac\x9en");
	Teles[MAX_TELE][Dueno]      = HEORS;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 2437.7485351563;
	Teles[MAX_TELE][PosY]       = 2083.6484375;
	Teles[MAX_TELE][PosZ]       = 62.359275817871;
	Teles[MAX_TELE][PosZZ]       = 270;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 4;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida del Almac\x9en");
	Teles[MAX_TELE][Dueno]      = HEORS;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 2468.8718261719;
	Teles[MAX_TELE][PosY]       = 2275.6091308594;
	Teles[MAX_TELE][PosZ]       = 92.460479736328;
	Teles[MAX_TELE][PosZZ]       = 90;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 4;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Almac\x9en");
	Teles[MAX_TELE][Dueno]      = HEORS;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 2439.1596679688;
	Teles[MAX_TELE][PosY]       = 2096.5361328125;
	Teles[MAX_TELE][PosZ]       = 62.359275817871;
	Teles[MAX_TELE][PosZZ]       = 180;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 4;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Garage");
	Teles[MAX_TELE][Dueno]      = HEORS;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = -2129.2333984375;
	Teles[MAX_TELE][PosY]       = 894.77954101563;
	Teles[MAX_TELE][PosZ]       = 80;
	Teles[MAX_TELE][PosZZ]       = 90;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Garage");
	Teles[MAX_TELE][Dueno]      = VELTRAN;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = -53.895202636719;
	Teles[MAX_TELE][PosY]       = 2515.6477050781;
	Teles[MAX_TELE][PosZ]       = 16.518749237061;
	Teles[MAX_TELE][PosZZ]       = 270;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 5;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida del Garage");
	Teles[MAX_TELE][Dueno]      = VELTRAN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 39.081974029541;
	Teles[MAX_TELE][PosY]       = 2496.4230957031;
	Teles[MAX_TELE][PosZ]       = 16.493684768677;
	Teles[MAX_TELE][PosZZ]       = 90;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 5;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Garage");
	Teles[MAX_TELE][Dueno]      = VELTRAN;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = -18.352540969849;
	Teles[MAX_TELE][PosY]       = 2500.5434570313;
	Teles[MAX_TELE][PosZ]       = 16.518749237061;
	Teles[MAX_TELE][PosZZ]       = 90;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 5;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada a la Casa Volts");
	Teles[MAX_TELE][Dueno]      = VELTRAN;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 2807.4494628906;
	Teles[MAX_TELE][PosY]       = -1165.1273193359;
	Teles[MAX_TELE][PosZ]       = 1025.5703125;
	Teles[MAX_TELE][PosZZ]       = 180;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 8;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salon Privado");
	Teles[MAX_TELE][Dueno]      = SICARIOS;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 397.35479736328;
	Teles[MAX_TELE][PosY]       = 2435.0407714844;
	Teles[MAX_TELE][PosZ]       = 16.5078125;
	Teles[MAX_TELE][PosZZ]       = 0;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 8;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida del Salon Privado");
	Teles[MAX_TELE][Dueno]      = SICARIOS;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 2806.9921875;
	Teles[MAX_TELE][PosY]       = -1161.3823242188;
	Teles[MAX_TELE][PosZ]       = 1029.1645507813;
	Teles[MAX_TELE][PosZZ]       = 180;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 8;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Armario");
	Teles[MAX_TELE][Dueno]      = SICARIOS;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 417.75735473633;
	Teles[MAX_TELE][PosY]       = 2440.2165527344;
	Teles[MAX_TELE][PosZ]       = 16.50937461853;
	Teles[MAX_TELE][PosZZ]       = 180;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 8;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida del Armario");
	Teles[MAX_TELE][Dueno]      = SICARIOS;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 373.23968505859;
	Teles[MAX_TELE][PosY]       = 1912.1655273438;
	Teles[MAX_TELE][PosZ]       = 17.715625762939;
	Teles[MAX_TELE][PosZZ]       = 270;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 18;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Segundo Piso");
	Teles[MAX_TELE][Dueno]      = LSMD;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 309.90759277344;
	Teles[MAX_TELE][PosY]       = 1810.9261474609;
	Teles[MAX_TELE][PosZ]       = 17.647813796997;
	Teles[MAX_TELE][PosZZ]       = 180;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 18;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Primer Piso");
	Teles[MAX_TELE][Dueno]      = LSMD;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 384.9172668457;
	Teles[MAX_TELE][PosY]       = 1913.7716064453;
	Teles[MAX_TELE][PosZ]       = 17.715625762939;
	Teles[MAX_TELE][PosZZ]       = 180;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 18;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Consultorio del Doctor");
	Teles[MAX_TELE][Dueno]      = LSMD;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 287.93170166016;
	Teles[MAX_TELE][PosY]       = 1877.1405029297;
	Teles[MAX_TELE][PosZ]       = 17.640625;
	Teles[MAX_TELE][PosZZ]       = 270;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 18;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida del Consultorio");
	Teles[MAX_TELE][Dueno]      = LSMD;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 296.59497070313;
	Teles[MAX_TELE][PosY]       = 1807.5396728516;
	Teles[MAX_TELE][PosZ]       = 17.647813796997;
	Teles[MAX_TELE][PosZZ]       = 270;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 18;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Sala de Operaciones");
	Teles[MAX_TELE][Dueno]      = LSMD;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 309.89172363281;
	Teles[MAX_TELE][PosY]       = 1900.4086914063;
	Teles[MAX_TELE][PosZ]       = 17.741455078125;
	Teles[MAX_TELE][PosZZ]       = 90;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 18;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida");
	Teles[MAX_TELE][Dueno]      = LSMD;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 304.07443237305;
	Teles[MAX_TELE][PosY]       = 1810.9692382813;
	Teles[MAX_TELE][PosZ]       = 17.655624389648;
	Teles[MAX_TELE][PosZZ]       = 180;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 18;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Sala de Juntas");
	Teles[MAX_TELE][Dueno]      = LSMD;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 283.35873413086;
	Teles[MAX_TELE][PosY]       = 1921.982421875;
	Teles[MAX_TELE][PosZ]       = 17.655624389648;
	Teles[MAX_TELE][PosZZ]       = 270;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 18;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida");
	Teles[MAX_TELE][Dueno]      = LSMD;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 376.17913818359;
	Teles[MAX_TELE][PosY]       = 1910.2803955078;
	Teles[MAX_TELE][PosZ]       = 17.715625762939;
	Teles[MAX_TELE][PosZZ]       = 0;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 18;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Parking");
	Teles[MAX_TELE][Dueno]      = LSMD;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = -18.11075592041;
	Teles[MAX_TELE][PosY]       = 1528.5985107422;
	Teles[MAX_TELE][PosZ]       = 12.7953125;
	Teles[MAX_TELE][PosZZ]       = 90;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 18;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Hospital");
	Teles[MAX_TELE][Dueno]      = LSMD;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 376.13824462891;
	Teles[MAX_TELE][PosY]       = 1913.7503662109;
	Teles[MAX_TELE][PosZ]       = 17.715625762939;
	Teles[MAX_TELE][PosZZ]       = 180;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 18;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Parking");
	Teles[MAX_TELE][Dueno]      = LSMD;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 33.724506378174;
	Teles[MAX_TELE][PosY]       = 1528.7053222656;
	Teles[MAX_TELE][PosZ]       = 12.7953125;
	Teles[MAX_TELE][PosZZ]       = 270;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 18;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Hospital");
	Teles[MAX_TELE][Dueno]      = LSMD;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 2034.1711425781;
	Teles[MAX_TELE][PosY]       = -1401.6752929688;
	Teles[MAX_TELE][PosZ]       = 17.294792175293;
	Teles[MAX_TELE][PosZZ]       = 180;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Bomberos");
	Teles[MAX_TELE][Dueno]      = LSMD;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1706.3391113281;
	Teles[MAX_TELE][PosY]       = 1199.8503417969;
	Teles[MAX_TELE][PosZ]       = 34.920310974121;
	Teles[MAX_TELE][PosZZ]       = 90;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 18;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida");
	Teles[MAX_TELE][Dueno]      = LSMD;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1697.4730224609;
	Teles[MAX_TELE][PosY]       = 1200.0819091797;
	Teles[MAX_TELE][PosZ]       = 34.920310974121;
	Teles[MAX_TELE][PosZZ]       = 0;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 18;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Entrada al Garage");
	Teles[MAX_TELE][Dueno]      = LSMD;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1914.53515625;
	Teles[MAX_TELE][PosY]       = 1193.5671386719;
	Teles[MAX_TELE][PosZ]       = 18.354686737061;
	Teles[MAX_TELE][PosZZ]       = 0;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 18;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Oficina de Bomberos");
	Teles[MAX_TELE][Dueno]      = LSMD;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1705.1761474609;
	Teles[MAX_TELE][PosY]       = 1204.5402832031;
	Teles[MAX_TELE][PosZ]       = 34.912826538086;
	Teles[MAX_TELE][PosZZ]       = 180;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 18;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Sala de Entrenamiento");
	Teles[MAX_TELE][Dueno]      = LSMD;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1863.1311035156;
	Teles[MAX_TELE][PosY]       = 1387.4490966797;
	Teles[MAX_TELE][PosZ]       = 17.001432418823;
	Teles[MAX_TELE][PosZZ]       = 0;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 18;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Oficina de Bomberos");
	Teles[MAX_TELE][Dueno]      = LSMD;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1467.2353515625;
	Teles[MAX_TELE][PosY]       = -1009.9293823242;
	Teles[MAX_TELE][PosZ]       = 26.84375;
	Teles[MAX_TELE][PosZZ]       = 180;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Super Mercado");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1825.8466796875;
	Teles[MAX_TELE][PosY]       = -2526.0915527344;
	Teles[MAX_TELE][PosZ]       = 13.60000038147;
	Teles[MAX_TELE][PosZZ]       = 90;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 16;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1457.0697021484;
	Teles[MAX_TELE][PosY]       = -1009.924621582;
	Teles[MAX_TELE][PosZ]       = 26.84375;
	Teles[MAX_TELE][PosZZ]       = 180;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Super Mercado");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1825.8475341797;
	Teles[MAX_TELE][PosY]       = -2537.4846191406;
	Teles[MAX_TELE][PosZ]       = 13.60000038147;
	Teles[MAX_TELE][PosZZ]       = 90;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 16;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1430.6143798828;
	Teles[MAX_TELE][PosY]       = -969.28149414063;
	Teles[MAX_TELE][PosZ]       = 37.407398223877;
	Teles[MAX_TELE][PosZZ]       = 0;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Super Mercado");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1759.7305908203;
	Teles[MAX_TELE][PosY]       = -2526.0532226563;
	Teles[MAX_TELE][PosZ]       = 13.60000038147;
	Teles[MAX_TELE][PosZZ]       = 270;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 16;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1422.5239257813;
	Teles[MAX_TELE][PosY]       = -967.81103515625;
	Teles[MAX_TELE][PosZ]       = 37.448886871338;
	Teles[MAX_TELE][PosZZ]       = 0;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Super Mercado");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1759.7341308594;
	Teles[MAX_TELE][PosY]       = -2537.4375;
	Teles[MAX_TELE][PosZ]       = 13.60000038147;
	Teles[MAX_TELE][PosZZ]       = 270;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 16;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1802.9294433594;
	Teles[MAX_TELE][PosY]       = -2547.7795410156;
	Teles[MAX_TELE][PosZ]       = 13.60000038147;
	Teles[MAX_TELE][PosZZ]       = 0;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 16;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Tiendas Wong");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1596.0267333984;
	Teles[MAX_TELE][PosY]       = -2566.3146972656;
	Teles[MAX_TELE][PosZ]       = 13.574999809265;
	Teles[MAX_TELE][PosZZ]       = 0;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 16;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1775.4875488281;
	Teles[MAX_TELE][PosY]       = -2547.798828125;
	Teles[MAX_TELE][PosZ]       = 13.60000038147;
	Teles[MAX_TELE][PosZZ]       = 0;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 16;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Tiendas Metro");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1541.1444091797;
	Teles[MAX_TELE][PosY]       = -2562.5971679688;
	Teles[MAX_TELE][PosZ]       = 13.562812805176;
	Teles[MAX_TELE][PosZZ]       = 270;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 16;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1795.9865722656;
	Teles[MAX_TELE][PosY]       = -2515.7409667969;
	Teles[MAX_TELE][PosZ]       = 13.60000038147;
	Teles[MAX_TELE][PosZZ]       = 180;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 16;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Licoreria Bazar");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1593.8149414063;
	Teles[MAX_TELE][PosY]       = -2587.7404785156;
	Teles[MAX_TELE][PosZ]       = 13.546875;
	Teles[MAX_TELE][PosZZ]       = 0;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 16;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida");
	Teles[MAX_TELE][Dueno]      = GOBIERNO;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1778.7512207031;
	Teles[MAX_TELE][PosY]       = -2438.4311523438;
	Teles[MAX_TELE][PosZ]       = 13.5546875;
	Teles[MAX_TELE][PosZZ]       = 180;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 13;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Callej\xa6n");
	Teles[MAX_TELE][Dueno]      = HEORS;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1732.1931152344;
	Teles[MAX_TELE][PosY]       = -2446.1975097656;
	Teles[MAX_TELE][PosZ]       = 13.624611854553;
	Teles[MAX_TELE][PosZZ]       = 180;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 13;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Casa Heors");
	Teles[MAX_TELE][Dueno]      = HEORS;
	/////////////////////////////////////////////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 1730.9169921875;
	Teles[MAX_TELE][PosY]       = -2453.0366210938;
	Teles[MAX_TELE][PosZ]       = 13.624611854553;
	Teles[MAX_TELE][PosZZ]       = 0;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_DEFAULT_INTERIOR);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE + 1;
	Teles[MAX_TELE][Interior]    = 13;
	Teles[MAX_TELE][World]       = WORLD_DEFAULT_INTERIOR;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Salida");
	Teles[MAX_TELE][Dueno]      = HEORS;
	//////////////////////////////
	MAX_TELE++;
	Teles[MAX_TELE][PosX]       = 2034.4801;
	Teles[MAX_TELE][PosY]       = -1112.5176;
	Teles[MAX_TELE][PosZ]       = 26.0466;
	Teles[MAX_TELE][PosZZ]       = 90;
	Teles[MAX_TELE][PickupID]    = CreatePickup   (1239,    1,    Teles[MAX_TELE][PosX],Teles[MAX_TELE][PosY],Teles[MAX_TELE][PosZ],       WORLD_NORMAL);
	Teles[MAX_TELE][PickupIDGo] = MAX_TELE - 1;
	Teles[MAX_TELE][Interior]    = 0;
	Teles[MAX_TELE][World]       = WORLD_NORMAL;
	Teles[MAX_TELE][Lock]       = false;
	SetStyleTextDrawTeles(MAX_TELE, "Puerta Tracera");
	Teles[MAX_TELE][Dueno]      = HEORS;
	/////////////////////////////////////////////////////////////////////


	// END TELES
	// WORLD_NORMAL
	// WORLD_DEFAULT_INTERIOR

	/////////////////////////////////////////////////////////////////////

//      \x98 = A Con tílde
// 		\x9e = E con tílde
//      \xa2 = I Con tílde"
//		\xa6 = O Con tílde
}
public SetStyleTextDrawTeles(textdrawid, text[])
{
	new TextDrawTeleText[MAX_TEXT_CHAT];
	format(TextDrawTeleText, sizeof(TextDrawTeleText), "~B~Lugar: ~W~%s", text);
	TelesTextDraws[textdrawid] = TextDrawCreateEx(200.0, 380.0, TextDrawTeleText);
	TextDrawUseBox(TelesTextDraws[textdrawid], 1);
	TextDrawBackgroundColor(TelesTextDraws[textdrawid] ,0x000000FF);
	TextDrawBoxColor(TelesTextDraws[textdrawid], 0x00000066);
	TextDrawTextSize(TelesTextDraws[textdrawid], 350.0, 380.0);
	TextDrawSetShadow(TelesTextDraws[textdrawid], 1);
	TextDrawLetterSize(TelesTextDraws[textdrawid], 0.5 , 1.2);
	return textdrawid;
}
public ActTextDrawBizz(bizzid)
{
	new TextDrawNegociosText[300];
	if ( strlen(NegociosData[bizzid][Dueno]) != 1 )
	{
		format(TextDrawNegociosText, sizeof(TextDrawNegociosText),
		"%s~N~~N~~B~Lugar: ~W~Negocio~N~~G~Tipo: ~W~%s~N~~G~Propietario: ~W~%s~N~~G~Extorsionista: ~W~%s~N~~G~Entrada: ~W~$%i~N~~G~Nivel: ~W~%i",
			NegociosData[bizzid][NameBizz],
	        NegociosType[NegociosData[bizzid][Type]][TypeName],
	        NegociosData[bizzid][Dueno],
	        NegociosData[bizzid][Extorsion],
	        NegociosData[bizzid][PriceJoin],
	        NegociosData[bizzid][Level]
		);
	}
	else
	{
		format(TextDrawNegociosText, sizeof(TextDrawNegociosText),
		"~B~Lugar: ~W~Negocio~N~~G~Tipo: ~W~%s~N~~G~Estado: ~W~¡En Venta!~N~~G~Precio: ~W~$%i~N~~G~Nivel: ~W~%i~N~~G~Use ~R~/Comprar Negocio",
	        NegociosType[NegociosData[bizzid][Type]][TypeName],
			NegociosData[bizzid][Precio],
	        NegociosData[bizzid][Level]
		);
	}
	TextDrawSetString(NegociosTextDraws[bizzid], TextDrawNegociosText);
}
public DataLoadBizz(bizzid)
{
	new query[1000], Cache:cacheid, negocioExiste;
	mysql_format(dataBase, query, 100, "SELECT * FROM `%s` WHERE `ID`='%i';", DIR_NEGOCIOS, bizzid);
	cacheid = mysql_query(dataBase, query);
	cache_get_row_count(negocioExiste);

	if ( negocioExiste )
	{
	    cache_get_value_name_float(0, "PosOutX", NegociosData[bizzid][PosOutX]);
	    cache_get_value_name_float(0, "PosOutY", NegociosData[bizzid][PosOutY]);
	    cache_get_value_name_float(0, "PosOutZ", NegociosData[bizzid][PosOutZ]);
	    cache_get_value_name_float(0, "PosOutZZ", NegociosData[bizzid][PosOutZZ]);
	    NegociosData[bizzid][PickupOutId]	= CreatePickup	(1239, 	1, 	NegociosData[bizzid][PosOutX], NegociosData[bizzid][PosOutY], NegociosData[bizzid][PosOutZ], -1);
	    cache_get_value_name_int(0, "InteriorOut", NegociosData[bizzid][InteriorOut]);
	    cache_get_value_name_int(0, "Deposito", NegociosData[bizzid][Deposito]);
	    cache_get_value_name_int(0, "Precio", NegociosData[bizzid][Precio]);
	    cache_get_value_name_int(0, "Seguro", NegociosData[bizzid][Lock]);
	    cache_get_value_name_int(0, "Type", NegociosData[bizzid][Type]);
	    cache_get_value_name_int(0, "PriceJoin", NegociosData[bizzid][PriceJoin]);
	    cache_get_value_name_int(0, "PricePiece", NegociosData[bizzid][PricePiece]);
		cache_get_value_name(0, "NameBizz", NegociosData[bizzid][NameBizz],   MAX_BIIZ_NAME);
		cache_get_value_name(0, "Dueno", NegociosData[bizzid][Dueno],		  MAX_PLAYER_NAME);
		cache_get_value_name(0, "Extorsion", NegociosData[bizzid][Extorsion], MAX_PLAYER_NAME);
		cache_get_value_name_int(0, "Materiales", NegociosData[bizzid][Materiales]);
		cache_get_value_name_int(0, "DepositoExtorsion", NegociosData[bizzid][DepositoExtorsion]);
		cache_get_value_name_int(0, "Level", NegociosData[bizzid][Level]);
		cache_get_value_name_int(0, "Station", NegociosData[bizzid][Station]);

		NegociosData[bizzid][World]     	= bizzid;

		NegociosTextDraws[bizzid] = TextDrawCreateEx(180.0, 300.0, "Empty");
		TextDrawUseBox(NegociosTextDraws[bizzid], 1);
		TextDrawBackgroundColor(NegociosTextDraws[bizzid], 0x000000FF);
		TextDrawBoxColor(NegociosTextDraws[bizzid], 0x00000066);
		TextDrawTextSize(NegociosTextDraws[bizzid], 405.0, 380.0);
		TextDrawSetShadow(NegociosTextDraws[bizzid], 1);
		TextDrawLetterSize(NegociosTextDraws[bizzid], 0.4 , 1.1);

		CreateDynamicMapIconULP(NegociosData[bizzid][PosOutX], NegociosData[bizzid][PosOutY], NegociosData[bizzid][PosOutZ], NegociosType[NegociosData[bizzid][Type]][IdMapIcon]);

        ActTextDrawBizz(bizzid);
	}
	cache_delete(cacheid);
	return negocioExiste;
}
public DataSaveBizz(bizzid, bool:update)
{
	new query[1000], Cache:cacheid, negocioExiste;
	mysql_format(dataBase, query, 100, "SELECT * FROM `%s` WHERE `ID`='%i';", DIR_NEGOCIOS, bizzid);
	cacheid = mysql_query(dataBase, query);
	cache_get_row_count(negocioExiste);
	cache_delete(cacheid);

	if (!negocioExiste)
	{
		mysql_format(dataBase, query, 100, "INSERT INTO `%s` (`ID`) VALUES ('%i');", "negocios", bizzid);
		mysql_query(dataBase, query, false);
	}

	format(query, 100, "UPDATE `%s` SET ", DIR_NEGOCIOS);
	strcat(query, "`PosOutX`='%f',`PosOutY`='%f',`PosOutZ`='%f',`PosOutZZ`='%f',`InteriorOut`='%i',`Deposito`='%i',`Precio`='%i',`Seguro`='%i',`Type`='%i',`PriceJoin`='%i',");
	strcat(query, "`PricePiece`='%i',`NameBizz`='%e',`Dueno`='%e',`Extorsion`='%e',`Materiales`='%i',`DepositoExtorsion`='%i',`Level`='%i',`Station`='%i'");
	strcat(query, " WHERE `ID`='%i';");
	mysql_format(dataBase, query, 1000, query,
		NegociosData[bizzid][PosOutX],
	    NegociosData[bizzid][PosOutY],
	    NegociosData[bizzid][PosOutZ],
	    NegociosData[bizzid][PosOutZZ],
	    NegociosData[bizzid][InteriorOut],
	    NegociosData[bizzid][Deposito],
	    NegociosData[bizzid][Precio],
	    NegociosData[bizzid][Lock],
	    NegociosData[bizzid][Type],
	    NegociosData[bizzid][PriceJoin],

	    NegociosData[bizzid][PricePiece],
		NegociosData[bizzid][NameBizz],
		NegociosData[bizzid][Dueno],
		NegociosData[bizzid][Extorsion],
		NegociosData[bizzid][Materiales],
		NegociosData[bizzid][DepositoExtorsion],
		NegociosData[bizzid][Level],
		NegociosData[bizzid][Station],
		bizzid);
	mysql_query(dataBase, query, false);

	if ( update )
	{
		ActTextDrawBizz(bizzid);
	}
}
public LoadDataBizzType()
{
	new PickupModelBizz = 1272;
// 00 ///////////////////////////////////////////////////////////////////////// Lugar: Prolaps
	NegociosType[MAX_BIZZ_TYPE][PosInX] 				= 207.1340;
	NegociosType[MAX_BIZZ_TYPE][PosInY] 				= -139.3590;
	NegociosType[MAX_BIZZ_TYPE][PosInZ] 				= 1003.2390;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ] 				= 359.0096;
	NegociosType[MAX_BIZZ_TYPE][PosInX_PC] 				= 199.0661;
	NegociosType[MAX_BIZZ_TYPE][PosInY_PC] 				= -127.7109;
	NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] 				= 1003.5152;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]				= 180.3268;
	NegociosType[MAX_BIZZ_TYPE][InteriorId] 			= 3;
	format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "Ropa");
	NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
	NegociosType[MAX_BIZZ_TYPE][PickupId] 				= CreatePickup	(PickupModelBizz, 	1, 	NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ],	 	-1);
	NegociosType[MAX_BIZZ_TYPE][IdMapIcon]              = 45;
///////////////////////////////////////////////////////////////////////////
	MAX_BIZZ_TYPE++;
// 01 ///////////////////////////////////////////////////////////////////////// Lugar: Victim
	NegociosType[MAX_BIZZ_TYPE][PosInX] 				= 226.6100;
	NegociosType[MAX_BIZZ_TYPE][PosInY] 				= -8.2260;
	NegociosType[MAX_BIZZ_TYPE][PosInZ] 				= 1002.2109;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ] 				= 87.4987;
	NegociosType[MAX_BIZZ_TYPE][PosInX_PC] 				= 206.1365;
	NegociosType[MAX_BIZZ_TYPE][PosInY_PC] 				= -12.1991;
	NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] 				= 1001.2178;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]				= 0.1185;
	NegociosType[MAX_BIZZ_TYPE][InteriorId] 			= 5;
	format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "Ropa");
	NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
	NegociosType[MAX_BIZZ_TYPE][PickupId] 				= CreatePickup	(PickupModelBizz, 	1, 	NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ],	 	-1);
	NegociosType[MAX_BIZZ_TYPE][IdMapIcon]              = 45;
///////////////////////////////////////////////////////////////////////////
	MAX_BIZZ_TYPE++;
// 02 ///////////////////////////////////////////////////////////////////////// Lugar: SubUrban
	NegociosType[MAX_BIZZ_TYPE][PosInX] 				= 203.9409;
	NegociosType[MAX_BIZZ_TYPE][PosInY] 				= -49.8919;
	NegociosType[MAX_BIZZ_TYPE][PosInZ] 				= 1001.8047;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ] 				= 3.0708;
	NegociosType[MAX_BIZZ_TYPE][PosInX_PC] 				= 213.3677;
	NegociosType[MAX_BIZZ_TYPE][PosInY_PC] 				= -41.5770;
	NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] 				= 1002.0234;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]				= 88.5883;
	NegociosType[MAX_BIZZ_TYPE][InteriorId] 			= 1;
	format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "Ropa");
	NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
	NegociosType[MAX_BIZZ_TYPE][PickupId] 				= CreatePickup	(PickupModelBizz, 	1, 	NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ],	 	-1);
	NegociosType[MAX_BIZZ_TYPE][IdMapIcon]              = 45;
///////////////////////////////////////////////////////////////////////////
	MAX_BIZZ_TYPE++;
// 03 ///////////////////////////////////////////////////////////////////////// Lugar: Zip
	NegociosType[MAX_BIZZ_TYPE][PosInX] 				= 161.4387;
	NegociosType[MAX_BIZZ_TYPE][PosInY] 				= -96.1310;
	NegociosType[MAX_BIZZ_TYPE][PosInZ] 				= 1001.8047;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ] 				= 354.3740;
	NegociosType[MAX_BIZZ_TYPE][PosInX_PC] 				= 161.3552;
	NegociosType[MAX_BIZZ_TYPE][PosInY_PC] 				= -72.0944;
	NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] 				= 1001.8047;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]				= 177.2982;
	NegociosType[MAX_BIZZ_TYPE][InteriorId] 			= 18;
	format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "Ropa");
	NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
	NegociosType[MAX_BIZZ_TYPE][PickupId] 				= CreatePickup	(PickupModelBizz, 	1, 	NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ],	 	-1);
	NegociosType[MAX_BIZZ_TYPE][IdMapIcon]              = 45;
///////////////////////////////////////////////////////////////////////////
	MAX_BIZZ_TYPE++;
// 04 ///////////////////////////////////////////////////////////////////////// Lugar: Didier Sachs
	NegociosType[MAX_BIZZ_TYPE][PosInX] 				= 204.3610;
	NegociosType[MAX_BIZZ_TYPE][PosInY] 				= -168.0961;
	NegociosType[MAX_BIZZ_TYPE][PosInZ] 				= 1000.5234;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ] 				= 3.0833;
	NegociosType[MAX_BIZZ_TYPE][PosInX_PC] 				= 215.4577;
	NegociosType[MAX_BIZZ_TYPE][PosInY_PC] 				= -156.2483;
	NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] 				= 1000.5234;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]				= 88.3108;
	NegociosType[MAX_BIZZ_TYPE][InteriorId] 			= 14;
	format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "Ropa");
	NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
	NegociosType[MAX_BIZZ_TYPE][PickupId] 				= CreatePickup	(PickupModelBizz, 	1, 	NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ],	 	-1);
	NegociosType[MAX_BIZZ_TYPE][IdMapIcon]              = 45;
///////////////////////////////////////////////////////////////////////////
	MAX_BIZZ_TYPE++;
// 05 ///////////////////////////////////////////////////////////////////////// Lugar: Binco
	NegociosType[MAX_BIZZ_TYPE][PosInX] 				= 207.7097;
	NegociosType[MAX_BIZZ_TYPE][PosInY] 				= -110.5522;
	NegociosType[MAX_BIZZ_TYPE][PosInZ] 				= 1005.1328;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ] 				= 357.8142;
	NegociosType[MAX_BIZZ_TYPE][PosInX_PC] 				= 217.2972;
	NegociosType[MAX_BIZZ_TYPE][PosInY_PC] 				= -98.4899;
	NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] 				= 1005.2578;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]				= 92.2329;
	NegociosType[MAX_BIZZ_TYPE][InteriorId] 			= 15;
	format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "Ropa");
	NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
	NegociosType[MAX_BIZZ_TYPE][PickupId] 				= CreatePickup	(PickupModelBizz, 	1, 	NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ],	 	-1);
	NegociosType[MAX_BIZZ_TYPE][IdMapIcon]              = 45;
///////////////////////////////////////////////////////////////////////////
	MAX_BIZZ_TYPE++;
// 06 ///////////////////////////////////////////////////////////////////////// Lugar: Ring Donuts
	NegociosType[MAX_BIZZ_TYPE][PosInX] 				= 377.1915;
	NegociosType[MAX_BIZZ_TYPE][PosInY] 				= -192.9054;
	NegociosType[MAX_BIZZ_TYPE][PosInZ] 				= 1000.6401;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ] 				= 358.7130;
	NegociosType[MAX_BIZZ_TYPE][PosInX_PC] 				= 379.0891;
	NegociosType[MAX_BIZZ_TYPE][PosInY_PC] 				= -187.8959;
	NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] 				= 1000.6328;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]				= 270.1432;
	NegociosType[MAX_BIZZ_TYPE][InteriorId] 			= 17;
	format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "Restaurante");
	NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
	NegociosType[MAX_BIZZ_TYPE][PickupId] 				= CreatePickup	(PickupModelBizz, 	1, 	NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ],	 	-1);
	NegociosType[MAX_BIZZ_TYPE][IdMapIcon]              = 50;
///////////////////////////////////////////////////////////////////////////
	MAX_BIZZ_TYPE++;
// 07 ///////////////////////////////////////////////////////////////////////// Lugar: Jay's Diner
	NegociosType[MAX_BIZZ_TYPE][PosInX] 				= 459.9540;
	NegociosType[MAX_BIZZ_TYPE][PosInY] 				= -88.6612;
	NegociosType[MAX_BIZZ_TYPE][PosInZ] 				= 999.5547;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ] 				= 90.9800;
	NegociosType[MAX_BIZZ_TYPE][PosInX_PC] 				= 450.3769;
	NegociosType[MAX_BIZZ_TYPE][PosInY_PC] 				= -84.0060;
	NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] 				= 999.5547;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]				= 359.9035;
	NegociosType[MAX_BIZZ_TYPE][InteriorId] 			= 4;
	format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "Restaurante");
	NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
	NegociosType[MAX_BIZZ_TYPE][PickupId] 				= CreatePickup	(PickupModelBizz, 	1, 	NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ],	 	-1);
	NegociosType[MAX_BIZZ_TYPE][IdMapIcon]              = 50;
///////////////////////////////////////////////////////////////////////////
	MAX_BIZZ_TYPE++;
// 08 ///////////////////////////////////////////////////////////////////////// Lugar: Armeria 1
	NegociosType[MAX_BIZZ_TYPE][PosInX] 				= 315.8257;
	NegociosType[MAX_BIZZ_TYPE][PosInY] 				= -143.0595;
	NegociosType[MAX_BIZZ_TYPE][PosInZ] 				= 999.6016;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ] 				= 356.5333;
	NegociosType[MAX_BIZZ_TYPE][PosInX_PC] 				= 313.9653;
	NegociosType[MAX_BIZZ_TYPE][PosInY_PC] 				= -133.1587;
	NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] 				= 999.6016;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]				= 271.3058;
	NegociosType[MAX_BIZZ_TYPE][InteriorId] 			= 7;
	format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "Armeria");
	NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
	NegociosType[MAX_BIZZ_TYPE][PickupId] 				= CreatePickup	(PickupModelBizz, 	1, 	NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ],	 	-1);
	NegociosType[MAX_BIZZ_TYPE][IdMapIcon]              = 18;
///////////////////////////////////////////////////////////////////////////
	MAX_BIZZ_TYPE++;
// 09 ///////////////////////////////////////////////////////////////////////// Lugar: Armeria 2
	NegociosType[MAX_BIZZ_TYPE][PosInX] 				= 285.4598;
	NegociosType[MAX_BIZZ_TYPE][PosInY] 				= -40.8969;
	NegociosType[MAX_BIZZ_TYPE][PosInZ] 				= 1001.5156;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ] 				= 357.8593;
	NegociosType[MAX_BIZZ_TYPE][PosInX_PC] 				= 296.4650;
	NegociosType[MAX_BIZZ_TYPE][PosInY_PC] 				= -38.1313;
	NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] 				= 1001.5156;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]				= 177.8897;
	NegociosType[MAX_BIZZ_TYPE][InteriorId] 			= 1;
	format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "Armeria");
	NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
	NegociosType[MAX_BIZZ_TYPE][PickupId] 				= CreatePickup	(PickupModelBizz, 	1, 	NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ],	 	-1);
	NegociosType[MAX_BIZZ_TYPE][IdMapIcon]              = 18;
///////////////////////////////////////////////////////////////////////////
	MAX_BIZZ_TYPE++;
// 10 ///////////////////////////////////////////////////////////////////////// Lugar: Armeria 3
	NegociosType[MAX_BIZZ_TYPE][PosInX] 				= 285.7038;
	NegociosType[MAX_BIZZ_TYPE][PosInY] 				= -85.9912;
	NegociosType[MAX_BIZZ_TYPE][PosInZ] 				= 1001.5229;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ] 				= 5.4625;
	NegociosType[MAX_BIZZ_TYPE][PosInX_PC] 				= 297.8895;
	NegociosType[MAX_BIZZ_TYPE][PosInY_PC] 				= -80.4345;
	NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] 				= 1001.5156;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]				= 178.2963;
	NegociosType[MAX_BIZZ_TYPE][InteriorId] 			= 4;
	format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "Armeria");
	NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
	NegociosType[MAX_BIZZ_TYPE][PickupId] 				= CreatePickup	(PickupModelBizz, 	1, 	NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ],	 	-1);
	NegociosType[MAX_BIZZ_TYPE][IdMapIcon]              = 18;
///////////////////////////////////////////////////////////////////////////
	MAX_BIZZ_TYPE++;
// 11 ///////////////////////////////////////////////////////////////////////// Lugar: Armeria 4
	NegociosType[MAX_BIZZ_TYPE][PosInX] 				= 296.8842;
	NegociosType[MAX_BIZZ_TYPE][PosInY] 				= -111.5674;
	NegociosType[MAX_BIZZ_TYPE][PosInZ] 				= 1001.5156;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ] 				= 356.7233;
	NegociosType[MAX_BIZZ_TYPE][PosInX_PC] 				= 287.7097;
	NegociosType[MAX_BIZZ_TYPE][PosInY_PC] 				= -106.8642;
	NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] 				= 1001.5156;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]				= 355.1800;
	NegociosType[MAX_BIZZ_TYPE][InteriorId] 			= 6;
	format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "Armeria");
	NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
	NegociosType[MAX_BIZZ_TYPE][PickupId] 				= CreatePickup	(PickupModelBizz, 	1, 	NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ],	 	-1);
	NegociosType[MAX_BIZZ_TYPE][IdMapIcon]              = 18;
///////////////////////////////////////////////////////////////////////////
	MAX_BIZZ_TYPE++;
// 12 ///////////////////////////////////////////////////////////////////////// Lugar: Armeria 5
	NegociosType[MAX_BIZZ_TYPE][PosInX] 				= 287.7097;
	NegociosType[MAX_BIZZ_TYPE][PosInY] 				= -106.8642;
	NegociosType[MAX_BIZZ_TYPE][PosInZ] 				= 1001.5156;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ] 				= 355.1800;
	NegociosType[MAX_BIZZ_TYPE][PosInX_PC] 				= 316.3125;
	NegociosType[MAX_BIZZ_TYPE][PosInY_PC] 				= -169.6709;
	NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] 				= 999.6010;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]				= 354.2805;
	NegociosType[MAX_BIZZ_TYPE][InteriorId] 			= 6;
	format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "Armeria");
	NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
	NegociosType[MAX_BIZZ_TYPE][PickupId] 				= CreatePickup	(PickupModelBizz, 	1, 	NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ],	 	-1);
	NegociosType[MAX_BIZZ_TYPE][IdMapIcon]              = 18;
///////////////////////////////////////////////////////////////////////////
	MAX_BIZZ_TYPE++;
// 13 ///////////////////////////////////////////////////////////////////////// Lugar: Club
	NegociosType[MAX_BIZZ_TYPE][PosInX] 				= 493.3510;
	NegociosType[MAX_BIZZ_TYPE][PosInY] 				= -24.1066;
	NegociosType[MAX_BIZZ_TYPE][PosInZ] 				= 1000.6797;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ] 				= 1.8939;
	NegociosType[MAX_BIZZ_TYPE][PosInX_PC] 				= 499.5866;
	NegociosType[MAX_BIZZ_TYPE][PosInY_PC] 				= -20.4216;
	NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] 				= 1000.6797;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]				= 273.3881;
	NegociosType[MAX_BIZZ_TYPE][InteriorId] 			= 17;
	format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "Club");
	NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
	NegociosType[MAX_BIZZ_TYPE][PickupId] 				= CreatePickup	(PickupModelBizz, 	1, 	NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ],	 	-1);
	NegociosType[MAX_BIZZ_TYPE][IdMapIcon]              = 48;
///////////////////////////////////////////////////////////////////////////
	MAX_BIZZ_TYPE++;
// 14 ///////////////////////////////////////////////////////////////////////// Lugar: The Pig Pen
	NegociosType[MAX_BIZZ_TYPE][PosInX] 				= 1204.9838;
	NegociosType[MAX_BIZZ_TYPE][PosInY] 				= -13.4134;
	NegociosType[MAX_BIZZ_TYPE][PosInZ] 				= 1000.9219;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ] 				= 355.6215;
	NegociosType[MAX_BIZZ_TYPE][PosInX_PC] 				= 1215.9023;
	NegociosType[MAX_BIZZ_TYPE][PosInY_PC] 				= -13.0323;
	NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] 				= 1000.9219;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]				= 178.4822;
	NegociosType[MAX_BIZZ_TYPE][InteriorId] 			= 2;
	format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "Strip Club");
	NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
	NegociosType[MAX_BIZZ_TYPE][PickupId] 				= CreatePickup	(PickupModelBizz, 	1, 	NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ],	 	-1);
	NegociosType[MAX_BIZZ_TYPE][IdMapIcon]              = 48;
///////////////////////////////////////////////////////////////////////////
	MAX_BIZZ_TYPE++;
// 15 ///////////////////////////////////////////////////////////////////////// Lugar: Jizzy
	NegociosType[MAX_BIZZ_TYPE][PosInX] 				= -2636.7153;
	NegociosType[MAX_BIZZ_TYPE][PosInY] 				= 1403.0614;
	NegociosType[MAX_BIZZ_TYPE][PosInZ] 				= 906.4609;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ] 				= 357.6521;
	NegociosType[MAX_BIZZ_TYPE][PosInX_PC] 				= -2653.1179;
	NegociosType[MAX_BIZZ_TYPE][PosInY_PC] 				= 1410.1919;
	NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] 				= 906.2734;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]				= 82.8796;
	NegociosType[MAX_BIZZ_TYPE][InteriorId] 			= 3;
	format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "Jizzy");
	NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
	NegociosType[MAX_BIZZ_TYPE][PickupId] 				= CreatePickup	(PickupModelBizz, 	1, 	NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ],	 	-1);
	NegociosType[MAX_BIZZ_TYPE][IdMapIcon]              = 48;
///////////////////////////////////////////////////////////////////////////
	MAX_BIZZ_TYPE++;
// 16 ///////////////////////////////////////////////////////////////////////// Lugar: 24/7 1
	NegociosType[MAX_BIZZ_TYPE][PosInX] 				= -30.9650;
	NegociosType[MAX_BIZZ_TYPE][PosInY] 				= -91.3013;
	NegociosType[MAX_BIZZ_TYPE][PosInZ] 				= 1003.5469;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ] 				= 3.2113;
	NegociosType[MAX_BIZZ_TYPE][PosInX_PC] 				= -28.3832;
	NegociosType[MAX_BIZZ_TYPE][PosInY_PC] 				= -89.6670;
	NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] 				= 1003.5469;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]				= 180.6406;
	NegociosType[MAX_BIZZ_TYPE][InteriorId] 			= 18;
	format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "24/7");
	NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
	NegociosType[MAX_BIZZ_TYPE][PickupId] 				= CreatePickup	(PickupModelBizz, 	1, 	NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ],	 	-1);
	NegociosType[MAX_BIZZ_TYPE][IdMapIcon]              = 17;
///////////////////////////////////////////////////////////////////////////
	MAX_BIZZ_TYPE++;
// 17 ///////////////////////////////////////////////////////////////////////// Lugar: 24/7 2
	NegociosType[MAX_BIZZ_TYPE][PosInX] 				= -25.8594;
	NegociosType[MAX_BIZZ_TYPE][PosInY] 				= -140.8397;
	NegociosType[MAX_BIZZ_TYPE][PosInZ] 				= 1003.5469;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ] 				= 358.6795;
	NegociosType[MAX_BIZZ_TYPE][PosInX_PC] 				= -22.5046,
	NegociosType[MAX_BIZZ_TYPE][PosInY_PC] 				= -138.4611;
	NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] 				= 1003.5469;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]				= 181.1223;
	NegociosType[MAX_BIZZ_TYPE][InteriorId] 			= 16;
	format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "24/7");
	NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
	NegociosType[MAX_BIZZ_TYPE][PickupId] 				= CreatePickup	(PickupModelBizz, 	1, 	NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ],	 	-1);
	NegociosType[MAX_BIZZ_TYPE][IdMapIcon]              = 17;
///////////////////////////////////////////////////////////////////////////
	MAX_BIZZ_TYPE++;
// 18 ///////////////////////////////////////////////////////////////////////// Lugar: Bar 1
	NegociosType[MAX_BIZZ_TYPE][PosInX] 				= -228.8344;
	NegociosType[MAX_BIZZ_TYPE][PosInY] 				= 1401.1725;
	NegociosType[MAX_BIZZ_TYPE][PosInZ] 				= 27.7656;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ] 				= 273.3879;
	NegociosType[MAX_BIZZ_TYPE][PosInX_PC] 				= -225.2749;
	NegociosType[MAX_BIZZ_TYPE][PosInY_PC] 				= 1404.3914;
	NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] 				= 27.7734;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]				= 273.8058;
	NegociosType[MAX_BIZZ_TYPE][InteriorId] 			= 18;
	format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "Lil' Probe Inn");
	NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
	NegociosType[MAX_BIZZ_TYPE][PickupId] 				= CreatePickup	(PickupModelBizz, 	1, 	NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ],	 	-1);
	NegociosType[MAX_BIZZ_TYPE][IdMapIcon]              = 49;
///////////////////////////////////////////////////////////////////////////
	MAX_BIZZ_TYPE++;
// 19 ///////////////////////////////////////////////////////////////////////// Lugar: Bar 2
	NegociosType[MAX_BIZZ_TYPE][PosInX] 				= 501.9434;
	NegociosType[MAX_BIZZ_TYPE][PosInY] 				= -68.3368;
	NegociosType[MAX_BIZZ_TYPE][PosInZ] 				= 998.7578;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ] 				= 183.0326;
	NegociosType[MAX_BIZZ_TYPE][PosInX_PC] 				= 497.5212;
	NegociosType[MAX_BIZZ_TYPE][PosInY_PC] 				= -75.6564;
	NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] 				= 998.7578;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]				= 182.9688;
	NegociosType[MAX_BIZZ_TYPE][InteriorId] 			= 11;
	format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "Bar");
	NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
	NegociosType[MAX_BIZZ_TYPE][PickupId] 				= CreatePickup	(PickupModelBizz, 	1, 	NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ],	 	-1);
	NegociosType[MAX_BIZZ_TYPE][IdMapIcon]              = 49;
///////////////////////////////////////////////////////////////////////////
	MAX_BIZZ_TYPE++;
// 20 ///////////////////////////////////////////////////////////////////////// Lugar: SexShop 1
	NegociosType[MAX_BIZZ_TYPE][PosInX] 				= -100.4072;
	NegociosType[MAX_BIZZ_TYPE][PosInY] 				= -24.2039;
	NegociosType[MAX_BIZZ_TYPE][PosInZ] 				= 1000.7188;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ] 				= 356.6941;
	NegociosType[MAX_BIZZ_TYPE][PosInX_PC] 				= -107.0554;
	NegociosType[MAX_BIZZ_TYPE][PosInY_PC] 				= -11.0345;
	NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] 				= 1000.7188;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]				= 2.6070;
	NegociosType[MAX_BIZZ_TYPE][InteriorId] 			= 3;
	format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "SexShop");
	NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
	NegociosType[MAX_BIZZ_TYPE][PickupId] 				= CreatePickup	(PickupModelBizz, 	1, 	NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ],	 	-1);
	NegociosType[MAX_BIZZ_TYPE][IdMapIcon]              = 38;
///////////////////////////////////////////////////////////////////////////
	MAX_BIZZ_TYPE++;
// 21 ///////////////////////////////////////////////////////////////////////// Lugar: SexShop 2
	NegociosType[MAX_BIZZ_TYPE][PosInX] 				= 744.4740;
	NegociosType[MAX_BIZZ_TYPE][PosInY] 				= 1436.9453;
	NegociosType[MAX_BIZZ_TYPE][PosInZ] 				= 1102.7031;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ] 				= 357.3116;
	NegociosType[MAX_BIZZ_TYPE][PosInX_PC] 				= 745.1048;
	NegociosType[MAX_BIZZ_TYPE][PosInY_PC] 				= 1440.2638;
	NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] 				= 1102.7031;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]				= 90.8947;
	NegociosType[MAX_BIZZ_TYPE][InteriorId] 			= 6;
	format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "SexShop");
	NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
	NegociosType[MAX_BIZZ_TYPE][PickupId] 				= CreatePickup	(PickupModelBizz, 	1, 	NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ],	 	-1);
	NegociosType[MAX_BIZZ_TYPE][IdMapIcon]              = 38;
///////////////////////////////////////////////////////////////////////////
	MAX_BIZZ_TYPE++;
// 22 ///////////////////////////////////////////////////////////////////////// Lugar: Cluckin' Bell
	NegociosType[MAX_BIZZ_TYPE][PosInX] 				= 364.9758;
	NegociosType[MAX_BIZZ_TYPE][PosInY] 				= -11.0294;
	NegociosType[MAX_BIZZ_TYPE][PosInZ] 				= 1001.8516;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ] 				= 2.6789;
	NegociosType[MAX_BIZZ_TYPE][PosInX_PC] 				= 369.6758;
	NegociosType[MAX_BIZZ_TYPE][PosInY_PC] 				= -6.3894;
	NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] 				= 1001.8589;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]				= 1.9072;
	NegociosType[MAX_BIZZ_TYPE][InteriorId] 			= 9;
	format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "Cluckin' Bell");
	NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
	NegociosType[MAX_BIZZ_TYPE][PickupId] 				= CreatePickup	(PickupModelBizz, 	1, 	NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ],	 	-1);
	NegociosType[MAX_BIZZ_TYPE][IdMapIcon]              = 14;
///////////////////////////////////////////////////////////////////////////
	MAX_BIZZ_TYPE++;
// 23 ///////////////////////////////////////////////////////////////////////// Lugar:Burger Shot
	NegociosType[MAX_BIZZ_TYPE][PosInX] 				= 363.3516;
	NegociosType[MAX_BIZZ_TYPE][PosInY] 				= -74.7660;
	NegociosType[MAX_BIZZ_TYPE][PosInZ] 				= 1001.5078;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ] 				= 305.2676;
	NegociosType[MAX_BIZZ_TYPE][PosInX_PC] 				= 378.2618;
	NegociosType[MAX_BIZZ_TYPE][PosInY_PC] 				= -67.8177;
	NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] 				= 1001.5151;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]				= 3.3392;
	NegociosType[MAX_BIZZ_TYPE][InteriorId] 			= 10;
	format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "Burger Shot");
	NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
	NegociosType[MAX_BIZZ_TYPE][PickupId] 				= CreatePickup	(PickupModelBizz, 	1, 	NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ],	 	-1);
	NegociosType[MAX_BIZZ_TYPE][IdMapIcon]              = 10;
///////////////////////////////////////////////////////////////////////////
	MAX_BIZZ_TYPE++;
// 24 ///////////////////////////////////////////////////////////////////////// Lugar: Pizza Stack
	NegociosType[MAX_BIZZ_TYPE][PosInX] 				= 372.3392;
	NegociosType[MAX_BIZZ_TYPE][PosInY] 				= -132.8387;
	NegociosType[MAX_BIZZ_TYPE][PosInZ] 				= 1001.4922;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ] 				= 0.3519;
	NegociosType[MAX_BIZZ_TYPE][PosInX_PC] 				= 375.5667;
	NegociosType[MAX_BIZZ_TYPE][PosInY_PC] 				= -119.4645;
	NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] 				= 1001.4995;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]				= 354.5028;
	NegociosType[MAX_BIZZ_TYPE][InteriorId] 			= 5;
	format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "Pizza Stack");
	NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
	NegociosType[MAX_BIZZ_TYPE][PickupId] 				= CreatePickup	(PickupModelBizz, 	1, 	NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ],	 	-1);
	NegociosType[MAX_BIZZ_TYPE][IdMapIcon]              = 29;
///////////////////////////////////////////////////////////////////////////
	MAX_BIZZ_TYPE++;
// 25 ///////////////////////////////////////////////////////////////////////// Lugar: Bar
	NegociosType[MAX_BIZZ_TYPE][PosInX] = 677.30352783203;
	NegociosType[MAX_BIZZ_TYPE][PosInY] = -463.25582885742;
	NegociosType[MAX_BIZZ_TYPE][PosInZ] = -25.6171875;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ] = 265.4503;
	NegociosType[MAX_BIZZ_TYPE][PosInX_PC] = 681.57141113281;
	NegociosType[MAX_BIZZ_TYPE][PosInY_PC] = -456.29409790039;
	NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] = -25.609874725342;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]= 25.4987;
	NegociosType[MAX_BIZZ_TYPE][InteriorId] = 1;
	format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "Bar");
	NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
	NegociosType[MAX_BIZZ_TYPE][PickupId] = CreatePickup(PickupModelBizz, 1, NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ], -1);
	NegociosType[MAX_BIZZ_TYPE][IdMapIcon]              = 49;
///////////////////////////////////////////////////////////////////////////
	MAX_BIZZ_TYPE++;
// 26 ///////////////////////////////////////////////////////////////////////// Lugar: Restaurtante
	NegociosType[MAX_BIZZ_TYPE][PosInX] = 1367.0800;
	NegociosType[MAX_BIZZ_TYPE][PosInY] = 1274.5714;
	NegociosType[MAX_BIZZ_TYPE][PosInZ] = 10.8203;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ] = 184.6329;
	NegociosType[MAX_BIZZ_TYPE][PosInX_PC] = 1374.5895996094;
	NegociosType[MAX_BIZZ_TYPE][PosInY_PC] = 1262.2515869141;
	NegociosType[MAX_BIZZ_TYPE][PosInZ_PC] = 10.8203125;
	NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]= 15.983;
	NegociosType[MAX_BIZZ_TYPE][InteriorId] = 8;
	format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "Burger Restaurant");
	NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
	NegociosType[MAX_BIZZ_TYPE][PickupId] = CreatePickup(PickupModelBizz, 1, NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ], -1);
	NegociosType[MAX_BIZZ_TYPE][IdMapIcon]              = 50;
///////////////////////////////////////////////////////////////////////////
    MAX_BIZZ_TYPE++;
/// 27 ////////////////////////////////////////////////////////////////////// Lugar: Barbería 1
    NegociosType[MAX_BIZZ_TYPE][PosInX]                 = 411.57223510742;
    NegociosType[MAX_BIZZ_TYPE][PosInY]                 = -23.165138244629;
    NegociosType[MAX_BIZZ_TYPE][PosInZ]                 = 1001.8046875;
    NegociosType[MAX_BIZZ_TYPE][PosInZZ]                 = 0;
    NegociosType[MAX_BIZZ_TYPE][PosInX_PC]                 = 414.43997192383;
    NegociosType[MAX_BIZZ_TYPE][PosInY_PC]                 = -18.894048690796;
    NegociosType[MAX_BIZZ_TYPE][PosInZ_PC]                 = 1001.8046875;
    NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]                = 90;
    NegociosType[MAX_BIZZ_TYPE][InteriorId]             = 2;
    format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "Barbero");
    NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
    NegociosType[MAX_BIZZ_TYPE][PickupId]                 = CreatePickup    (PickupModelBizz,     1,     NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ],         -1);
    NegociosType[MAX_BIZZ_TYPE][IdMapIcon]              = 7;
///////////////////////////////////////////////////////////////////////////
    MAX_BIZZ_TYPE++;
// 28 /////////////////////////////////////////////////////////////////////// Lugar: Barbería 2
    NegociosType[MAX_BIZZ_TYPE][PosInX]                 = 411.92514038086;
    NegociosType[MAX_BIZZ_TYPE][PosInY]                 = -54.446674346924;
    NegociosType[MAX_BIZZ_TYPE][PosInZ]                 = 1001.8984375;
    NegociosType[MAX_BIZZ_TYPE][PosInZZ]                 = 0;
    NegociosType[MAX_BIZZ_TYPE][PosInX_PC]                 = 415.04098510742;
    NegociosType[MAX_BIZZ_TYPE][PosInY_PC]                 = -52.34215927124;
    NegociosType[MAX_BIZZ_TYPE][PosInZ_PC]                 = 1001.8984375;
    NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]                = 90;
    NegociosType[MAX_BIZZ_TYPE][InteriorId]             = 12;
    format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "Barbero");
    NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
    NegociosType[MAX_BIZZ_TYPE][PickupId]                 = CreatePickup    (PickupModelBizz,     1,     NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ],         -1);
    NegociosType[MAX_BIZZ_TYPE][IdMapIcon]              = 7;
///////////////////////////////////////////////////////////////////////////
    MAX_BIZZ_TYPE++;
// 29 /////////////////////////////////////////////////////////////////////// Lugar: Barbería 3
    NegociosType[MAX_BIZZ_TYPE][PosInX]                 = 418.59677124023;
    NegociosType[MAX_BIZZ_TYPE][PosInY]                 = -84.363059997559;
    NegociosType[MAX_BIZZ_TYPE][PosInZ]                 = 1001.8046875;
    NegociosType[MAX_BIZZ_TYPE][PosInZZ]                 = 0;
    NegociosType[MAX_BIZZ_TYPE][PosInX_PC]                 = 421.55499267578;
    NegociosType[MAX_BIZZ_TYPE][PosInY_PC]                 = -77.96834564209;
    NegociosType[MAX_BIZZ_TYPE][PosInZ_PC]                 = 1001.8046875;
    NegociosType[MAX_BIZZ_TYPE][PosInZZ_PC]                = 90;
    NegociosType[MAX_BIZZ_TYPE][InteriorId]             = 3;
    format(NegociosType[MAX_BIZZ_TYPE][TypeName], MAX_PLAYER_NAME, "Barbero");
    NegociosType[MAX_BIZZ_TYPE][TypePickupOrCheckponit] = true;
    NegociosType[MAX_BIZZ_TYPE][PickupId]                 = CreatePickup    (PickupModelBizz,     1,     NegociosType[MAX_BIZZ_TYPE][PosInX],NegociosType[MAX_BIZZ_TYPE][PosInY],NegociosType[MAX_BIZZ_TYPE][PosInZ],         -1);
    NegociosType[MAX_BIZZ_TYPE][IdMapIcon]              = 7;
///////////////////////////////////////////////////////////////////////////
}
public SetFunctionsForBizz(playerid, bizzid)
{
	switch (bizzid)
	{
	    case 24,22,25,23,16,17,18,27, 28, 29, 12,11,10,9,8,7,6,5,4,3,2,1,0:
	    {
	    	SetPlayerCheckpoint(playerid, NegociosType[bizzid][PosInX_PC], NegociosType[bizzid][PosInY_PC], NegociosType[bizzid][PosInZ_PC], 1.0);
		}
	}
}
public LoadCajeros()
{
	// CAJEROS
	CreateDynamicObjectExULP(2942, 1918.806763, -1765.879883, 13.189775, 0, 0, 180, -1, -1, -1, MAX_RADIO_STREAM); 	//Cajero LS 1   # 0
	Cajeros[MAX_CAJEROS][PosX] = 1918.806763;
	Cajeros[MAX_CAJEROS][PosY] = -1765.879883;
	Cajeros[MAX_CAJEROS][PosZ] = 13.189775;

	CreateDynamicObjectExULP(2942, 1367.271484, -1307.826904, 13.189775, 0, 0, -89, -1, -1, -1, MAX_RADIO_STREAM); 	//Cajero LS 2   # 1
	MAX_CAJEROS++;
	Cajeros[MAX_CAJEROS][PosX] = 1367.271484;
	Cajeros[MAX_CAJEROS][PosY] = -1307.826904;
	Cajeros[MAX_CAJEROS][PosZ] = 13.189775;

	CreateDynamicObjectExULP(2942, 1346.532349, -1759.225220, 13.158481, 0, 0, 180, -1, -1, -1, MAX_RADIO_STREAM); 	//Cajero LS 3   # 2
	MAX_CAJEROS++;
	Cajeros[MAX_CAJEROS][PosX] = 1346.532349;
	Cajeros[MAX_CAJEROS][PosY] = -1759.225220;
	Cajeros[MAX_CAJEROS][PosZ] = 13.158481;

	CreateDynamicObjectExULP(2942, -79.300514, -1171.916016, 1.777080, 0, 0, 247, -1, -1, -1, MAX_RADIO_STREAM); 	//Cajero LS/FG  # 3
	MAX_CAJEROS++;
	Cajeros[MAX_CAJEROS][PosX] = -79.300514;
	Cajeros[MAX_CAJEROS][PosY] = -1171.916016;
	Cajeros[MAX_CAJEROS][PosZ] = 1.777080;

	CreateDynamicObjectExULP(2942, -2095.375732, -95.220436, 34.806961, 0, 0, 90, -1, -1, -1, MAX_RADIO_STREAM); 	//Cajero SF 1   # 4
	MAX_CAJEROS++;
	Cajeros[MAX_CAJEROS][PosX] = -2095.375732;
	Cajeros[MAX_CAJEROS][PosY] = -95.220436;
	Cajeros[MAX_CAJEROS][PosZ] = 34.806961;

	CreateDynamicObjectExULP(2942, -1990.503174, 1345.649414, 6.827043, 0, 0, 0, -1, -1, -1, MAX_RADIO_STREAM); 				//Cajero SF 2   # 5
	MAX_CAJEROS++;
	Cajeros[MAX_CAJEROS][PosX] = -1990.503174;
	Cajeros[MAX_CAJEROS][PosY] = 1345.649414;
	Cajeros[MAX_CAJEROS][PosZ] = 6.827043;
}
public IsPlayerNearCajero(playerid)
{
	for (new i=0;i<=MAX_CAJEROS;i++)
	{
	    if (IsPlayerInRangeOfPoint(playerid, 2.0, Cajeros[i][PosX],Cajeros[i][PosY],Cajeros[i][PosZ]))
	    {
	    	return i;
    	}
	}
	SendInfoMessage(playerid, 0, "766", "No se encuentra cerca de un cajero ni en el banco");
	return -1;
}
public IsMyExtorsion(playerid, bizzid)
{
    if ( strfind(NegociosData[bizzid][Extorsion], PlayersDataOnline[playerid][NameOnline], false) == 0 && strlen(NegociosData[bizzid][Extorsion]) == strlen(PlayersDataOnline[playerid][NameOnline]) )
	{
	    return true;
    }
    else
    {
		return false;
	}
}
public IsMyBizz(playerid, bizzid, msg)
{
	if ( strfind(NegociosData[bizzid][Dueno], PlayersDataOnline[playerid][NameOnline], true) == 0 && strlen(NegociosData[bizzid][Dueno]) == strlen(PlayersDataOnline[playerid][NameOnline]) )
	{
	    return true;
    }
    else
    {
		if ( msg )
		{
			SendInfoMessage(playerid, 0, "300", "Este negocio no es suyo");
		}
		return false;
	}
}
public IsMyHouse(playerid, houseid)
{
	if ( strfind(HouseData[houseid][Dueno], PlayersDataOnline[playerid][NameOnline], true) == 0 && strlen(HouseData[houseid][Dueno]) == strlen(PlayersDataOnline[playerid][NameOnline]) )
	{
	    return true;
    }
    else
    {
		return false;
	}
}
public LoadMenuStatic()
{
////////////// SULTAN
	// Principal_Sultan;
    Principal_Sultan	 = CreateMenu("Sultan", 1, 400.0, 120.0, 180.0, 0.0);
	AddMenuItem(Principal_Sultan, 0, "Pack X-Flow");
	AddMenuItem(Principal_Sultan, 0, "Pack Alien");
	// XFlowYAlien_Sultan[0];
    XFlowYAlien_Sultan[0]	 = CreateMenu("X-Flow", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(XFlowYAlien_Sultan[0], 0, "Aler\xa6n");          	XFlowYAlien_SultanID[0][0] = 1139;
	AddMenuItem(XFlowYAlien_Sultan[0], 0, "Paragolpes Trasero"); 	XFlowYAlien_SultanID[0][1] = 1140;
	AddMenuItem(XFlowYAlien_Sultan[0], 0, "Paragolpes Delantero"); 	XFlowYAlien_SultanID[0][2] = 1170;
	AddMenuItem(XFlowYAlien_Sultan[0], 0, "Bajo Izquierdo");     	XFlowYAlien_SultanID[0][3] = 1030;
	AddMenuItem(XFlowYAlien_Sultan[0], 0, "Bajo Derecho");       	XFlowYAlien_SultanID[0][4] = 1031;
	AddMenuItem(XFlowYAlien_Sultan[0], 0, "Techo");			    	XFlowYAlien_SultanID[0][5] = 1033;
	AddMenuItem(XFlowYAlien_Sultan[0], 0, "Escapes");		    	XFlowYAlien_SultanID[0][6] = 1029;
	// XFlowYAlien_Sultan[1];
    XFlowYAlien_Sultan[1]	 = CreateMenu("Alien", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(XFlowYAlien_Sultan[1], 0, "Aler\xa6n");          	XFlowYAlien_SultanID[1][0] = 1138;
	AddMenuItem(XFlowYAlien_Sultan[1], 0, "Paragolpes Trasero"); 	XFlowYAlien_SultanID[1][1] = 1141;
	AddMenuItem(XFlowYAlien_Sultan[1], 0, "Paragolpes Delantero"); 	XFlowYAlien_SultanID[1][2] = 1169;
	AddMenuItem(XFlowYAlien_Sultan[1], 0, "Bajo Izquierdo");     	XFlowYAlien_SultanID[1][3] = 1026;
	AddMenuItem(XFlowYAlien_Sultan[1], 0, "Bajo Derecho");       	XFlowYAlien_SultanID[1][4] = 1027;
	AddMenuItem(XFlowYAlien_Sultan[1], 0, "Techo");			    	XFlowYAlien_SultanID[1][5] = 1032;
	AddMenuItem(XFlowYAlien_Sultan[1], 0, "Escapes");		    	XFlowYAlien_SultanID[1][6] = 1028;
////////////// ELEGY
	// Principal_Elegy;
    Principal_Elegy	 = CreateMenu("Elegy", 1, 400.0, 120.0, 180.0, 0.0);
	AddMenuItem(Principal_Elegy, 0, "Pack X-Flow");
	AddMenuItem(Principal_Elegy, 0, "Pack Alien");
	// XFlowYAlien_Elegy[0];
    XFlowYAlien_Elegy[0]	 = CreateMenu("X-Flow", 1, 400.0, 120.0, 180.0, 0.0);
	AddMenuItem(XFlowYAlien_Elegy[0], 0, "Aler\xa6n");          	XFlowYAlien_ElegyID[0][0] = 1146;
	AddMenuItem(XFlowYAlien_Elegy[0], 0, "Paragolpes Trasero"); 	XFlowYAlien_ElegyID[0][1] = 1148;
	AddMenuItem(XFlowYAlien_Elegy[0], 0, "Paragolpes Delantero"); 	XFlowYAlien_ElegyID[0][2] = 1172;
	AddMenuItem(XFlowYAlien_Elegy[0], 0, "Bajo Izquierdo");     	XFlowYAlien_ElegyID[0][3] = 1039;
	AddMenuItem(XFlowYAlien_Elegy[0], 0, "Bajo Derecho");       	XFlowYAlien_ElegyID[0][4] = 1041;
	AddMenuItem(XFlowYAlien_Elegy[0], 0, "Techo");			    	XFlowYAlien_ElegyID[0][5] = 1035;
	AddMenuItem(XFlowYAlien_Elegy[0], 0, "Escapes");		    	XFlowYAlien_ElegyID[0][6] = 1037;
	// XFlowYAlien_Elegy[1];
    XFlowYAlien_Elegy[1]	 = CreateMenu("Alien", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(XFlowYAlien_Elegy[1], 0, "Aler\xa6n");          	XFlowYAlien_ElegyID[1][0] = 1147;
	AddMenuItem(XFlowYAlien_Elegy[1], 0, "Paragolpes Trasero"); 	XFlowYAlien_ElegyID[1][1] = 1149;
	AddMenuItem(XFlowYAlien_Elegy[1], 0, "Paragolpes Delantero"); 	XFlowYAlien_ElegyID[1][2] = 1171;
	AddMenuItem(XFlowYAlien_Elegy[1], 0, "Bajo Izquierdo");     	XFlowYAlien_ElegyID[1][3] = 1040;
	AddMenuItem(XFlowYAlien_Elegy[1], 0, "Bajo Derecho");       	XFlowYAlien_ElegyID[1][4] = 1036;
	AddMenuItem(XFlowYAlien_Elegy[1], 0, "Techo");			    	XFlowYAlien_ElegyID[1][5] = 1038;
	AddMenuItem(XFlowYAlien_Elegy[1], 0, "Escapes");		    	XFlowYAlien_ElegyID[1][6] = 1034;
////////////// FLASH
	// Principal_Flash;
    Principal_Flash	 = CreateMenu("Flash", 1, 400.0, 120.0, 180.0, 0.0);
	AddMenuItem(Principal_Flash, 0, "Pack X-Flow");
	AddMenuItem(Principal_Flash, 0, "Pack Alien");
	// XFlowYAlien_Flash[0];
    XFlowYAlien_Flash[0]	 = CreateMenu("X-Flow", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(XFlowYAlien_Flash[0], 0, "Aler\xa6n");          	XFlowYAlien_FlashID[0][0] = 1050;
	AddMenuItem(XFlowYAlien_Flash[0], 0, "Paragolpes Trasero"); 	XFlowYAlien_FlashID[0][1] = 1151;
	AddMenuItem(XFlowYAlien_Flash[0], 0, "Paragolpes Delantero"); 	XFlowYAlien_FlashID[0][2] = 1152;
	AddMenuItem(XFlowYAlien_Flash[0], 0, "Bajo Izquierdo");     	XFlowYAlien_FlashID[0][3] = 1052;
	AddMenuItem(XFlowYAlien_Flash[0], 0, "Bajo Derecho");       	XFlowYAlien_FlashID[0][4] = 1048;
	AddMenuItem(XFlowYAlien_Flash[0], 0, "Techo");			    	XFlowYAlien_FlashID[0][5] = 1053;
	AddMenuItem(XFlowYAlien_Flash[0], 0, "Escapes");		    	XFlowYAlien_FlashID[0][6] = 1045;
	// Alien_Flash;
    XFlowYAlien_Flash[1]	 = CreateMenu("Alien", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(XFlowYAlien_Flash[1], 0, "Aler\xa6n");          	XFlowYAlien_FlashID[1][0] = 1049;
	AddMenuItem(XFlowYAlien_Flash[1], 0, "Paragolpes Trasero"); 	XFlowYAlien_FlashID[1][1] = 1150;
	AddMenuItem(XFlowYAlien_Flash[1], 0, "Paragolpes Delantero"); 	XFlowYAlien_FlashID[1][2] = 1153;
	AddMenuItem(XFlowYAlien_Flash[1], 0, "Bajo Izquierdo");     	XFlowYAlien_FlashID[1][3] = 1051;
	AddMenuItem(XFlowYAlien_Flash[1], 0, "Bajo Derecho");       	XFlowYAlien_FlashID[1][4] = 1047;
	AddMenuItem(XFlowYAlien_Flash[1], 0, "Techo");			    	XFlowYAlien_FlashID[1][5] = 1054;
	AddMenuItem(XFlowYAlien_Flash[1], 0, "Escapes");		    	XFlowYAlien_FlashID[1][6] = 1046;
////////////// STRATUM
	// Principal_Stratum;
    Principal_Stratum	 = CreateMenu("Stratum", 1, 400.0, 120.0, 180.0, 0.0);
	AddMenuItem(Principal_Stratum, 0, "Pack X-Flow");
	AddMenuItem(Principal_Stratum, 0, "Pack Alien");
	// XFlowYAlien_Stratum[0];
    XFlowYAlien_Stratum[0]	 = CreateMenu("X-Flow", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(XFlowYAlien_Stratum[0], 0, "Paragolpes Trasero"); 	XFlowYAlien_StratumID[0][0] = 1156;
	AddMenuItem(XFlowYAlien_Stratum[0], 0, "Paragolpes Delantero"); XFlowYAlien_StratumID[0][1] = 1157;
	// XFlowYAlien_Stratum[1];
    XFlowYAlien_Stratum[1]	 = CreateMenu("Alien", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(XFlowYAlien_Stratum[1], 0, "Paragolpes Trasero"); 	XFlowYAlien_StratumID[1][0] = 1154;
	AddMenuItem(XFlowYAlien_Stratum[1], 0, "Paragolpes Delantero");	XFlowYAlien_StratumID[1][1] = 1155;
////////////// JESTER
	// Principal_Jester;
    Principal_Jester	 = CreateMenu("Jester", 1, 400.0, 120.0, 180.0, 0.0);
	AddMenuItem(Principal_Jester, 0, "Pack X-Flow");
	AddMenuItem(Principal_Jester, 0, "Pack Alien");
	// XFlowYAlien_Jester[0];
    XFlowYAlien_Jester[0]	 = CreateMenu("X-Flow", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(XFlowYAlien_Jester[0], 0, "Aler\xa6n");          	XFlowYAlien_JesterID[0][0] = 1158;
	AddMenuItem(XFlowYAlien_Jester[0], 0, "Paragolpes Trasero"); 	XFlowYAlien_JesterID[0][1] = 1161;
	AddMenuItem(XFlowYAlien_Jester[0], 0, "Paragolpes Delantero"); 	XFlowYAlien_JesterID[0][2] = 1173;
	AddMenuItem(XFlowYAlien_Jester[0], 0, "Bajo Izquierdo");     	XFlowYAlien_JesterID[0][3] = 1072;
	AddMenuItem(XFlowYAlien_Jester[0], 0, "Bajo Derecho");       	XFlowYAlien_JesterID[0][4] = 1070;
	AddMenuItem(XFlowYAlien_Jester[0], 0, "Techo");			    	XFlowYAlien_JesterID[0][5] = 1068;
	AddMenuItem(XFlowYAlien_Jester[0], 0, "Escapes");		    	XFlowYAlien_JesterID[0][6] = 1066;
	// XFlowYAlien_Jester[1];
    XFlowYAlien_Jester[1]	 = CreateMenu("Alien", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(XFlowYAlien_Jester[1], 0, "Aler\xa6n");          	XFlowYAlien_JesterID[1][0] = 1162;
	AddMenuItem(XFlowYAlien_Jester[1], 0, "Paragolpes Trasero"); 	XFlowYAlien_JesterID[1][1] = 1159;
	AddMenuItem(XFlowYAlien_Jester[1], 0, "Paragolpes Delantero"); 	XFlowYAlien_JesterID[1][2] = 1160;
	AddMenuItem(XFlowYAlien_Jester[1], 0, "Bajo Izquierdo");     	XFlowYAlien_JesterID[1][3] = 1071;
	AddMenuItem(XFlowYAlien_Jester[1], 0, "Bajo Derecho");       	XFlowYAlien_JesterID[1][4] = 1069;
	AddMenuItem(XFlowYAlien_Jester[1], 0, "Techo");			    	XFlowYAlien_JesterID[1][5] = 1067;
	AddMenuItem(XFlowYAlien_Jester[1], 0, "Escapes");		    	XFlowYAlien_JesterID[1][6] = 1065;
////////////// URANUS
	// Principal_Uranus;
    Principal_Uranus	 = CreateMenu("Uranus", 1, 400.0, 120.0, 180.0, 0.0);
	AddMenuItem(Principal_Uranus, 0, "Pack X-Flow");
	AddMenuItem(Principal_Uranus, 0, "Pack Alien");
	// XFlowYAlien_Uranus[0];
    XFlowYAlien_Uranus[0]	 = CreateMenu("X-Flow", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(XFlowYAlien_Uranus[0], 0, "Aler\xa6n");          	XFlowYAlien_UranusID[0][0] = 1163;
	AddMenuItem(XFlowYAlien_Uranus[0], 0, "Paragolpes Trasero"); 	XFlowYAlien_UranusID[0][1] = 1167;
	AddMenuItem(XFlowYAlien_Uranus[0], 0, "Paragolpes Delantero"); 	XFlowYAlien_UranusID[0][2] = 1165;
	AddMenuItem(XFlowYAlien_Uranus[0], 0, "Bajo Izquierdo");     	XFlowYAlien_UranusID[0][3] = 1093;
	AddMenuItem(XFlowYAlien_Uranus[0], 0, "Bajo Derecho");       	XFlowYAlien_UranusID[0][4] = 1095;
	AddMenuItem(XFlowYAlien_Uranus[0], 0, "Techo");			    	XFlowYAlien_UranusID[0][5] = 1091;
	AddMenuItem(XFlowYAlien_Uranus[0], 0, "Escapes");		    	XFlowYAlien_UranusID[0][6] = 1089;
	// XFlowYAlien_Uranus[1];
    XFlowYAlien_Uranus[1]	 = CreateMenu("Alien", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(XFlowYAlien_Uranus[1], 0, "Aler\xa6n");          	XFlowYAlien_UranusID[1][0] = 1164;
	AddMenuItem(XFlowYAlien_Uranus[1], 0, "Paragolpes Trasero"); 	XFlowYAlien_UranusID[1][1] = 1168;
	AddMenuItem(XFlowYAlien_Uranus[1], 0, "Paragolpes Delantero"); 	XFlowYAlien_UranusID[1][2] = 1166;
	AddMenuItem(XFlowYAlien_Uranus[1], 0, "Bajo Izquierdo");     	XFlowYAlien_UranusID[1][3] = 1094;
	AddMenuItem(XFlowYAlien_Uranus[1], 0, "Bajo Derecho");       	XFlowYAlien_UranusID[1][4] = 1090;
	AddMenuItem(XFlowYAlien_Uranus[1], 0, "Techo");			    	XFlowYAlien_UranusID[1][5] = 1088;
	AddMenuItem(XFlowYAlien_Uranus[1], 0, "Escapes");		    	XFlowYAlien_UranusID[1][6] = 1092;

////////////// SAVANNA
	// Principal_Savanna;
    Principal_Savanna	 = CreateMenu("Savanna", 1, 400.0, 120.0, 180.0, 0.0);
	AddMenuItem(Principal_Savanna, 0, "Techo");
	AddMenuItem(Principal_Savanna, 0, "Tubos de Escape");
	AddMenuItem(Principal_Savanna, 0, "Bajos");
	AddMenuItem(Principal_Savanna, 0, "Bumpers");

	// Opciones_Savanna[0];
    Opciones_Savanna[0]	 = CreateMenu("Techo", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(Opciones_Savanna[0], 0, "Hardtop");         	Opciones_SavannaID[0][0] = 1130;
	AddMenuItem(Opciones_Savanna[0], 0, "Softtop"); 			Opciones_SavannaID[0][1] = 1131;

    Opciones_Savanna[1]	 = CreateMenu("Tubos de Escape", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(Opciones_Savanna[1], 0, "Chrome");          	Opciones_SavannaID[1][0]  = 1129;
	AddMenuItem(Opciones_Savanna[1], 0, "Slamin"); 				Opciones_SavannaID[1][1]     = 1132;

    Opciones_Savanna[2]	 = CreateMenu("Bajos", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(Opciones_Savanna[2], 0, "Izquierdo");       	Opciones_SavannaID[2][0]  = 1102;
	AddMenuItem(Opciones_Savanna[2], 0, "Derecho"); 			Opciones_SavannaID[2][1]  = 1133;

    Opciones_Savanna[3]	 = CreateMenu("Bumpers", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(Opciones_Savanna[3], 0, "Slamin Trasero");   	Opciones_SavannaID[3][0]  = 1186;
	AddMenuItem(Opciones_Savanna[3], 0, "Chrome Trasero"); 		Opciones_SavannaID[3][1]  = 1187;
	AddMenuItem(Opciones_Savanna[3], 0, "Slamin Delantero"); 	Opciones_SavannaID[3][2]  = 1188;
	AddMenuItem(Opciones_Savanna[3], 0, "Chrome Delantero"); 	Opciones_SavannaID[3][3]  = 1189;

////////////// Remington
	// Principal_Remington;
    Principal_Remington	 = CreateMenu("Remington", 1, 400.0, 120.0, 180.0, 0.0);
	AddMenuItem(Principal_Remington, 0, "Adornos");
	AddMenuItem(Principal_Remington, 0, "Tubos de Escape");
	AddMenuItem(Principal_Remington, 0, "Bajos");
	AddMenuItem(Principal_Remington, 0, "Bumpers");

	// Opciones_Remington[0];
    Opciones_Remington[0]	 = CreateMenu("Adornos", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(Opciones_Remington[0], 0, "Chrome");         			Opciones_RemingtonID[0][0] = 1100;
	AddMenuItem(Opciones_Remington[0], 0, "Luces"); 					Opciones_RemingtonID[0][1] = 1123;
	AddMenuItem(Opciones_Remington[0], 0, "Barras"); 					Opciones_RemingtonID[0][2] = 1123;

    Opciones_Remington[1]	 = CreateMenu("Tubos de Escape", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(Opciones_Remington[1], 0, "Chrome");          			Opciones_RemingtonID[1][0]  = 1126;
	AddMenuItem(Opciones_Remington[1], 0, "Slamin"); 					Opciones_RemingtonID[1][1]  = 1127;

    Opciones_Remington[2]	 = CreateMenu("Bajos", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(Opciones_Remington[2], 0, "Izquierdo Chrome Arches");   Opciones_RemingtonID[2][0]  = 1124;
	AddMenuItem(Opciones_Remington[2], 0, "Derecho Chrome Arches"); 	Opciones_RemingtonID[2][1]  = 1106;
	AddMenuItem(Opciones_Remington[2], 0, "Izquierdo Chrome Flames");   Opciones_RemingtonID[2][2]  = 1101;
	AddMenuItem(Opciones_Remington[2], 0, "Derecho Chrome Flames"); 	Opciones_RemingtonID[2][3]  = 1122;

    Opciones_Remington[3]	 = CreateMenu("Bumpers", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(Opciones_Remington[3], 0, "Slamin Trasero");   			Opciones_RemingtonID[3][0]  = 1178;
	AddMenuItem(Opciones_Remington[3], 0, "Chrome Trasero"); 			Opciones_RemingtonID[3][1]  = 1180;
	AddMenuItem(Opciones_Remington[3], 0, "Slamin Delantero"); 			Opciones_RemingtonID[3][2]  = 1185;
	AddMenuItem(Opciones_Remington[3], 0, "Chrome Delantero"); 			Opciones_RemingtonID[3][3]  = 1179;

////////////// Slamvan
	// Principal_Slamvan;
    Principal_Slamvan	 = CreateMenu("Slamvan", 1, 400.0, 120.0, 180.0, 0.0);
	AddMenuItem(Principal_Slamvan, 0, "Tubos de Escape");
	AddMenuItem(Principal_Slamvan, 0, "Bajos");
	AddMenuItem(Principal_Slamvan, 0, "Bumpers");

	// Opciones_Slamvan[0];
    Opciones_Slamvan[0]	 = CreateMenu("Tubos de Escape", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(Opciones_Slamvan[0], 0, "Chrome");          			Opciones_SlamvanID[0][0]  = 1113;
	AddMenuItem(Opciones_Slamvan[0], 0, "Slamin"); 						Opciones_SlamvanID[0][1]  = 1114;

    Opciones_Slamvan[1]	 = CreateMenu("Bajos", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(Opciones_Slamvan[1], 0, "Izquierdo Chrome");  			Opciones_SlamvanID[1][0]  = 1118;
	AddMenuItem(Opciones_Slamvan[1], 0, "Derecho Chrome"); 				Opciones_SlamvanID[1][1]  = 1120;
	AddMenuItem(Opciones_Slamvan[1], 0, "Izquierdo Wheelcovers");  		Opciones_SlamvanID[1][2]  = 1121;
	AddMenuItem(Opciones_Slamvan[1], 0, "Derecho Wheelcovers"); 		Opciones_SlamvanID[1][3]  = 1119;

    Opciones_Slamvan[2]	 = CreateMenu("Bumpers", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(Opciones_Slamvan[2], 0, "Slamin Trasero");   			Opciones_SlamvanID[2][0]  = 1110;
	AddMenuItem(Opciones_Slamvan[2], 0, "Chrome Trasero"); 				Opciones_SlamvanID[2][1]  = 1109;
	AddMenuItem(Opciones_Slamvan[2], 0, "Little Delantero 1"); 			Opciones_SlamvanID[2][2]  = 1111;
	AddMenuItem(Opciones_Slamvan[2], 0, "Little Delantero 2"); 			Opciones_SlamvanID[2][3]  = 1112;
	AddMenuItem(Opciones_Slamvan[2], 0, "Slamin Delantero"); 			Opciones_SlamvanID[2][4]  = 1116;
	AddMenuItem(Opciones_Slamvan[2], 0, "Chrome Delantero 1"); 			Opciones_SlamvanID[2][5]  = 1117;
	AddMenuItem(Opciones_Slamvan[2], 0, "Chrome Delantero 2"); 			Opciones_SlamvanID[2][6]  = 1117;

////////////// Blade
	// Principal_Blade;
    Principal_Blade	 = CreateMenu("Blade", 1, 400.0, 120.0, 180.0, 0.0);
	AddMenuItem(Principal_Blade, 0, "Techo");
	AddMenuItem(Principal_Blade, 0, "Tubos de Escape");
	AddMenuItem(Principal_Blade, 0, "Bajos");
	AddMenuItem(Principal_Blade, 0, "Bumpers");

	// Opciones_Blade[0];
    Opciones_Blade[0]	 = CreateMenu("Techo", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(Opciones_Blade[0], 0, "Covertible");       			Opciones_BladeID[0][0]  = 1103;
	AddMenuItem(Opciones_Blade[0], 0, "Vinyl");       				Opciones_BladeID[0][1]  = 1128;

    Opciones_Blade[1]	 = CreateMenu("Tubos de Escape", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(Opciones_Blade[1], 0, "Chrome");          			Opciones_BladeID[1][0]  = 1104;
	AddMenuItem(Opciones_Blade[1], 0, "Slamin"); 					Opciones_BladeID[1][1]  = 1105;

    Opciones_Blade[2]	 = CreateMenu("Bajos", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(Opciones_Blade[2], 0, "Izquierdo Chrome");  		Opciones_BladeID[2][0]  = 1107;
	AddMenuItem(Opciones_Blade[2], 0, "Derecho Chrome"); 			Opciones_BladeID[2][1]  = 1108;

    Opciones_Blade[3]	 = CreateMenu("Bumpers", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(Opciones_Blade[3], 0, "Slamin Trasero");   			Opciones_BladeID[3][0]  = 1183;
	AddMenuItem(Opciones_Blade[3], 0, "Chrome Trasero"); 			Opciones_BladeID[3][1]  = 1184;
	AddMenuItem(Opciones_Blade[3], 0, "Slamin Delantero"); 			Opciones_BladeID[3][2]  = 1181;
	AddMenuItem(Opciones_Blade[3], 0, "Chrome Delantero"); 			Opciones_BladeID[3][3]  = 1182;

/*
new Menu:Principal_Savanna;
new Menu:Opciones_Savanna[2];
new Opciones_SavannaID[2][7];
*/

////////////// Escape
    XFlowYAlien_Escape	 = CreateMenu("Otros", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(XFlowYAlien_Escape, 0, "Escapes 1");		    	XFlowYAlien_EscapeID[0] = 1018;
	AddMenuItem(XFlowYAlien_Escape, 0, "Escapes 2");		    	XFlowYAlien_EscapeID[1] = 1019;
	AddMenuItem(XFlowYAlien_Escape, 0, "Escapes 3");		    	XFlowYAlien_EscapeID[2] = 1020;
	AddMenuItem(XFlowYAlien_Escape, 0, "Escapes 4");		    	XFlowYAlien_EscapeID[3] = 1021;
	AddMenuItem(XFlowYAlien_Escape, 0, "Escapes 5");		    	XFlowYAlien_EscapeID[4] = 1022;
	AddMenuItem(XFlowYAlien_Escape, 0, "Llantas Especiales");  		XFlowYAlien_EscapeID[5] = 1025;

////////////// Sentinel
    XFlowYAlien_Sentinel	 = CreateMenu("Otros", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(XFlowYAlien_Sentinel, 0, "Escapes 1");		    	XFlowYAlien_SentinelID[0] = 1018;
	AddMenuItem(XFlowYAlien_Sentinel, 0, "Escapes 2");		    	XFlowYAlien_SentinelID[1] = 1019;
	AddMenuItem(XFlowYAlien_Sentinel, 0, "Escapes 3");		    	XFlowYAlien_SentinelID[2] = 1020;
	AddMenuItem(XFlowYAlien_Sentinel, 0, "Escapes 4");		    	XFlowYAlien_SentinelID[3] = 1021;
	AddMenuItem(XFlowYAlien_Sentinel, 0, "Escapes 5");		    	XFlowYAlien_SentinelID[4] = 1022;
	AddMenuItem(XFlowYAlien_Sentinel, 0, "Aler\xa6n 1");		    XFlowYAlien_SentinelID[5] = 1023;
	AddMenuItem(XFlowYAlien_Sentinel, 0, "Aler\xa6n 2");		    XFlowYAlien_SentinelID[6] = 1014;
	AddMenuItem(XFlowYAlien_Sentinel, 0, "Aler\xa6n 3");		    XFlowYAlien_SentinelID[7] = 1015;
	AddMenuItem(XFlowYAlien_Sentinel, 0, "Aler\xa6n 4");		    XFlowYAlien_SentinelID[8] = 1016;
	AddMenuItem(XFlowYAlien_Sentinel, 0, "Llantas Especiales");  	XFlowYAlien_SentinelID[9] = 1025;

////////////// EUROS
    XFlowYAlien_Euros	 = CreateMenu("Otros", 1, 380.0, 150.0, 190.0, 0.0);
	AddMenuItem(XFlowYAlien_Euros, 0, "Escapes 1");		    	XFlowYAlien_EurosID[0] = 1018;
	AddMenuItem(XFlowYAlien_Euros, 0, "Escapes 2");		    	XFlowYAlien_EurosID[1] = 1019;
	AddMenuItem(XFlowYAlien_Euros, 0, "Escapes 3");		    	XFlowYAlien_EurosID[2] = 1020;
	AddMenuItem(XFlowYAlien_Euros, 0, "Escapes 4");		    	XFlowYAlien_EurosID[3] = 1021;
	AddMenuItem(XFlowYAlien_Euros, 0, "Escapes 5");		    	XFlowYAlien_EurosID[4] = 1022;
	AddMenuItem(XFlowYAlien_Euros, 0, "Aler\xa6n 1");		    XFlowYAlien_EurosID[5] = 1023;
	AddMenuItem(XFlowYAlien_Euros, 0, "Aler\xa6n 2");		    XFlowYAlien_EurosID[6] = 1014;
	AddMenuItem(XFlowYAlien_Euros, 0, "Aler\xa6n 3");		    XFlowYAlien_EurosID[7] = 1015;
	AddMenuItem(XFlowYAlien_Euros, 0, "Aler\xa6n 4");		    XFlowYAlien_EurosID[8] = 1016;
	AddMenuItem(XFlowYAlien_Euros, 0, "Llantas Especiales");  	XFlowYAlien_EurosID[9] = 1025;
	AddMenuItem(XFlowYAlien_Euros, 0, "Roof 1");  				XFlowYAlien_EurosID[10] = 1011;
	AddMenuItem(XFlowYAlien_Euros, 0, "Roof 2");  				XFlowYAlien_EurosID[11] = 1012;

	//////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////

	// TallerPrincipal;
    TallerPrincipal	 = CreateMenu("Taller", 1, 400.0, 120.0, 150.0, 0.0);
	AddMenuItem(TallerPrincipal, 0, "Pintura");
	AddMenuItem(TallerPrincipal, 0, "Nitro");
	AddMenuItem(TallerPrincipal, 0, "Hidr\x98ulica");
	AddMenuItem(TallerPrincipal, 0, "Est\x9ereo");
	AddMenuItem(TallerPrincipal, 0, "Llantas I");
	AddMenuItem(TallerPrincipal, 0, "Llantas II");
	AddMenuItem(TallerPrincipal, 0, "Tunning");
	AddMenuItem(TallerPrincipal, 0, "Vinilos");
	AddMenuItem(TallerPrincipal, 0, "Cambiar Chapa");

	// Nitro;
    Nitro	 = CreateMenu("Nitros", 1, 400.0, 120.0, 150.0, 0.0);
	AddMenuItem(Nitro, 0, "Nitro 2x");  NitrosID[1] = 1009;
	AddMenuItem(Nitro, 0, "Nitro 5x");  NitrosID[0] = 1008;
	AddMenuItem(Nitro, 0, "Nitro 10x");	NitrosID[2] = 1010;

	// Llantas1;
    Llantas1	 = CreateMenu("Llantas I", 1, 400.0, 120.0, 150.0, 0.0);
	AddMenuItem(Llantas1, 0, "Shadow");  LlantasID1[0] = 1073;
	AddMenuItem(Llantas1, 0, "Mega");  	 LlantasID1[1] = 1074;
	AddMenuItem(Llantas1, 0, "Rimshine");LlantasID1[2] = 1075;
	AddMenuItem(Llantas1, 0, "Wires");   LlantasID1[3] = 1076;
	AddMenuItem(Llantas1, 0, "Classic"); LlantasID1[4] = 1077;
	AddMenuItem(Llantas1, 0, "Twist");   LlantasID1[5] = 1078;
	AddMenuItem(Llantas1, 0, "Cutter");  LlantasID1[6] = 1079;
	AddMenuItem(Llantas1, 0, "Switch");  LlantasID1[7] = 1080;

	// Llantas2;
    Llantas2	 = CreateMenu("Llantas II", 1, 400.0, 120.0, 150.0, 0.0);
	AddMenuItem(Llantas2, 0, "Grove");   LlantasID2[0] = 1081;
	AddMenuItem(Llantas2, 0, "Import");  LlantasID2[1] = 1082;
	AddMenuItem(Llantas2, 0, "Dollar");  LlantasID2[2] = 1083;
	AddMenuItem(Llantas2, 0, "Trance");  LlantasID2[3] = 1084;
	AddMenuItem(Llantas2, 0, "Atomic");  LlantasID2[4] = 1085;
	AddMenuItem(Llantas2, 0, "Ahab");	 LlantasID2[5] = 1096;
	AddMenuItem(Llantas2, 0, "Virtual"); LlantasID2[6] = 1097;
	AddMenuItem(Llantas2, 0, "Access");  LlantasID2[7] = 1098;

	// Vinilos;
    Vinilos	 = CreateMenu("Vinilos", 1, 400.0, 120.0, 150.0, 0.0);
	AddMenuItem(Vinilos, 0, "Vinilo I");
	AddMenuItem(Vinilos, 0, "Vinilo II");
	AddMenuItem(Vinilos, 0, "Vinilo III");
	AddMenuItem(Vinilos, 0, "Eliminar Vinilos");

	// CluckinBell;
    CluckinBell	 = CreateMenu("Cluckin' Bell", 2, 300.0, 200.0, 250.0, 70.0);
	AddMenuItem(CluckinBell, 0, "The Little");  				AddMenuItem(CluckinBell, 1, "$12");	CluckinBellPrecios[0] = 12;
	AddMenuItem(CluckinBell, 0, "Cluker");  					AddMenuItem(CluckinBell, 1, "$14"); CluckinBellPrecios[1] = 14;
	AddMenuItem(CluckinBell, 0, "Kids Meal");  					AddMenuItem(CluckinBell, 1, "$16");	CluckinBellPrecios[2] = 16;
	AddMenuItem(CluckinBell, 0, "Cluker Mediana");  			AddMenuItem(CluckinBell, 1, "$18");	CluckinBellPrecios[3] = 18;
	AddMenuItem(CluckinBell, 0, "Super Cluker");  				AddMenuItem(CluckinBell, 1, "$22");	CluckinBellPrecios[4] = 22;
	AddMenuItem(CluckinBell, 0, "Cluker' Bell + Coca Cola");  	AddMenuItem(CluckinBell, 1, "$25");	CluckinBellPrecios[5] = 25;
	AddMenuItem(CluckinBell, 0, "Especial Bell");  				AddMenuItem(CluckinBell, 1, "$30");	CluckinBellPrecios[6] = 30;
	// BurgerShot;
    BurgerShot	 = CreateMenu("Burger Shot", 2, 300.0, 200.0, 250.0, 70.0);
	AddMenuItem(BurgerShot, 0, "Simple Shot");  		AddMenuItem(BurgerShot, 1, "$14"); 	BurgerShotPrecios[0] = 14;
	AddMenuItem(BurgerShot, 0, "Doble Barreled");  		AddMenuItem(BurgerShot, 1, "$15"); 	BurgerShotPrecios[1] = 15;
	AddMenuItem(BurgerShot, 0, "Buckshot Especial");	AddMenuItem(BurgerShot, 1, "$18"); 	BurgerShotPrecios[2] = 18;
	AddMenuItem(BurgerShot, 0, "Parilla vegetariana"); 	AddMenuItem(BurgerShot, 1, "$17"); 	BurgerShotPrecios[3] = 17;
	AddMenuItem(BurgerShot, 0, "Filete de Mariscos");	AddMenuItem(BurgerShot, 1, "$35");	BurgerShotPrecios[4] = 35;
	AddMenuItem(BurgerShot, 0, "Pollo Bits");			AddMenuItem(BurgerShot, 1, "$30");	BurgerShotPrecios[5] = 30;
	AddMenuItem(BurgerShot, 0, "Caf\x9e");  			AddMenuItem(BurgerShot, 1, "$15");	BurgerShotPrecios[6] = 15;
	AddMenuItem(BurgerShot, 0, "Shake");  				AddMenuItem(BurgerShot, 1, "$16");	BurgerShotPrecios[7] = 16;
	// PizzaStack;
    PizzaStack	 = CreateMenu("Pizza Stack", 2, 300.0, 200.0, 250.0, 70.0);
	AddMenuItem(PizzaStack, 0, "The Bustert");  				AddMenuItem(PizzaStack, 1, "$14"); 	PizzaStackPrecios[0] = 14;
	AddMenuItem(PizzaStack, 0, "The Double D-Lux");  			AddMenuItem(PizzaStack, 1, "$15"); 	PizzaStackPrecios[1] = 15;
	AddMenuItem(PizzaStack, 0, "The Full Rack");				AddMenuItem(PizzaStack, 1, "$18"); 	PizzaStackPrecios[2] = 18;
	AddMenuItem(PizzaStack, 0, "Pizza Jam\xa6n y Queso"); 		AddMenuItem(PizzaStack, 1, "$22"); 	PizzaStackPrecios[3] = 22;
	AddMenuItem(PizzaStack, 0, "Pizza Comepleta + Coca Cola");	AddMenuItem(PizzaStack, 1, "$28");	PizzaStackPrecios[4] = 28;
	AddMenuItem(PizzaStack, 0, "Plato Del Hoy");				AddMenuItem(PizzaStack, 1, "$25");	PizzaStackPrecios[5] = 25;
	AddMenuItem(PizzaStack, 0, "Especial Pizza Familiar");		AddMenuItem(PizzaStack, 1, "$40");	PizzaStackPrecios[6] = 40;
	// JaysDiner;
    JaysDiner	 = CreateMenu("Jay's Diner", 2, 300.0, 200.0, 250.0, 70.0);
	AddMenuItem(JaysDiner, 0, "Spunk");  				AddMenuItem(JaysDiner, 1, "$14"); 	JaysDinerPrecios[0] = 14;
	AddMenuItem(JaysDiner, 0, "Bocadillo + Spunk");  	AddMenuItem(JaysDiner, 1, "$20"); 	JaysDinerPrecios[1] = 20;
	AddMenuItem(JaysDiner, 0, "Almuerzo Sencillo");		AddMenuItem(JaysDiner, 1, "$28"); 	JaysDinerPrecios[2] = 28;
	AddMenuItem(JaysDiner, 0, "Pollo a la Parilla"); 	AddMenuItem(JaysDiner, 1, "$22"); 	JaysDinerPrecios[3] = 22;
	AddMenuItem(JaysDiner, 0, "Cena completa");			AddMenuItem(JaysDiner, 1, "$60");	JaysDinerPrecios[4] = 60;
	AddMenuItem(JaysDiner, 0, "Caf\x9e");				AddMenuItem(JaysDiner, 1, "$15");	JaysDinerPrecios[5] = 15;
	AddMenuItem(JaysDiner, 0, "Postre");				AddMenuItem(JaysDiner, 1, "$19");	JaysDinerPrecios[6] = 19;
	// RingDonuts;
    RingDonuts	 = CreateMenu("Ring Donuts", 2, 300.0, 200.0, 250.0, 70.0);
	AddMenuItem(RingDonuts, 0, "Battered Ring");  				AddMenuItem(RingDonuts, 1, "$14"); 	RingDonutsPrecios[0] = 14;
	AddMenuItem(RingDonuts, 0, "Ring Donuts");  				AddMenuItem(RingDonuts, 1, "$15"); 	RingDonutsPrecios[1] = 15;
	AddMenuItem(RingDonuts, 0, "Especial Ring");				AddMenuItem(RingDonuts, 1, "$18"); 	RingDonutsPrecios[2] = 18;
	AddMenuItem(RingDonuts, 0, "Ring Dung del D\xa2a"); 		AddMenuItem(RingDonuts, 1, "$22"); 	RingDonutsPrecios[3] = 22;
	AddMenuItem(RingDonuts, 0, "Cena de Pareja");				AddMenuItem(RingDonuts, 1, "$28");	RingDonutsPrecios[4] = 28;
	AddMenuItem(RingDonuts, 0, "El especial del Chef");			AddMenuItem(RingDonuts, 1, "$45");	RingDonutsPrecios[5] = 45;
	AddMenuItem(RingDonuts, 0, "Completa de Rings");			AddMenuItem(RingDonuts, 1, "$30");	RingDonutsPrecios[6] = 30;
	// M24_7;
    M24_7	 = CreateMenu("24/7", 2, 300.0, 200.0, 250.0, 70.0);
	AddMenuItem(M24_7, 0, "C\x98mara de Fotos");  		AddMenuItem(M24_7, 1, "$200"); 	M24_7_Precios[0] = 200;
	AddMenuItem(M24_7, 0, "Patines");	  				AddMenuItem(M24_7, 1, "$150"); 	M24_7_Precios[1] = 150;
	AddMenuItem(M24_7, 0, "Dados");						AddMenuItem(M24_7, 1, "$60"); 	M24_7_Precios[2] = 60;
	AddMenuItem(M24_7, 0, "M\xa6vil"); 					AddMenuItem(M24_7, 1, "$300"); 	M24_7_Precios[3] = 300;
	AddMenuItem(M24_7, 0, "Agenda"); 					AddMenuItem(M24_7, 1, "$100"); 	M24_7_Precios[4] = 100;
	AddMenuItem(M24_7, 0, "Flores"); 					AddMenuItem(M24_7, 1, "$50"); 	M24_7_Precios[5] = 50;
	AddMenuItem(M24_7, 0, "Comprar Saldo"); 			AddMenuItem(M24_7, 1, " ");
	AddMenuItem(M24_7, 0, "Bolsa"); 				    AddMenuItem(M24_7, 1, "$150"); 	M24_7_Precios[7] = 150;
	AddMenuItem(M24_7, 0, "Condones"); 				    AddMenuItem(M24_7, 1, "$80"); 	M24_7_Precios[8] = 80;
	AddMenuItem(M24_7, 0, "Maleta"); 				    AddMenuItem(M24_7, 1, "$150"); 	M24_7_Precios[9] = 150;
	AddMenuItem(M24_7, 0, "Modelos de M\xa6viles"); 	AddMenuItem(M24_7, 1, "$200");	M24_7_Precios[10] = 200;

	// Tipos de teléfonos móviles
    TYPE_PHONES_MENU	 = CreateMenu("Modelos de M\xa6viles", 1, 300.0, 200.0, 250.0, 70.0);
   	AddMenuItem(TYPE_PHONES_MENU, 0, "Normal");
	AddMenuItem(TYPE_PHONES_MENU, 0, "Color Oro");
	AddMenuItem(TYPE_PHONES_MENU, 0, "Azul Claro");
	AddMenuItem(TYPE_PHONES_MENU, 0, "Naranja");
	AddMenuItem(TYPE_PHONES_MENU, 0, "Negro");
	AddMenuItem(TYPE_PHONES_MENU, 0, "Rosa");
	AddMenuItem(TYPE_PHONES_MENU, 0, "Rojo");
	AddMenuItem(TYPE_PHONES_MENU, 0, "Verde");
	AddMenuItem(TYPE_PHONES_MENU, 0, "Azul Oscuro");
	AddMenuItem(TYPE_PHONES_MENU, 0, "Amarillo");
	AddMenuItem(TYPE_PHONES_MENU, 0, "Blanco");
	
    SupermercadoArticulos	 = CreateMenu("Super Mercado San Fierro", 2, 300.0, 200.0, 250.0, 70.0);
	AddMenuItem(SupermercadoArticulos, 0, "Pack 6 Cervezas");  			AddMenuItem(SupermercadoArticulos, 1, "$50"); 	SupermercadoArticulosPrecios[0] = 50;
	AddMenuItem(SupermercadoArticulos, 0, "5 Vodkas");	  				AddMenuItem(SupermercadoArticulos, 1, "$100"); 	SupermercadoArticulosPrecios[1] = 100;
	AddMenuItem(SupermercadoArticulos, 0, "5 Refrescos");				AddMenuItem(SupermercadoArticulos, 1, "$70"); 	SupermercadoArticulosPrecios[2] = 70;
	AddMenuItem(SupermercadoArticulos, 0, "Pollo Crudo");				AddMenuItem(SupermercadoArticulos, 1, "$110"); 	SupermercadoArticulosPrecios[3] = 110;
	AddMenuItem(SupermercadoArticulos, 0, "Papas"); 					AddMenuItem(SupermercadoArticulos, 1, "$150"); 	SupermercadoArticulosPrecios[4] = 150;
	AddMenuItem(SupermercadoArticulos, 0, "Arroz"); 					AddMenuItem(SupermercadoArticulos, 1, "$250"); 	SupermercadoArticulosPrecios[5] = 250;


//=======================================================================================
//=======================================================================================
/////////// MENU ARMAS

	// Armas_Clases    [10][25];
	// Armas_Nombre	[10][11][25];
	// Armas_ID		[10][11];

//      \x98 = A Con tílde
// 		\x9e = E con tílde
//      \xa2 = I Con tílde
//		\xa6 = O Con tílde

	new SumarPrecios = 4;
	// Básicos I				- 01
    Armas_Clases    [0] 	= "B\x98sicos I";
    {
	    Armas_Nombre	[0][0] 	= "01-  Cuchillo"; 			Armas_ID		[0][0]  = 4;	Armas_Precios_Num	[0][0]	= 75 * SumarPrecios;	Armas_Municion[0][0]	= 1;		format(Armas_Precios[0][0], 6, "$%i", Armas_Precios_Num[0][0] * Armas_Municion[0][0]);			// 00   04 - Knife
	    Armas_Nombre	[0][1] 	= "02-  Palo de Golf";		Armas_ID		[0][1]  = 2;	Armas_Precios_Num	[0][1]	= 75 * SumarPrecios;	Armas_Municion[0][1]	= 1;		format(Armas_Precios[0][1], 6, "$%i", Armas_Precios_Num[0][1] * Armas_Municion[0][1]);			// 01   02 - Golf Club
	    Armas_Nombre	[0][2] 	= "03-  Bast\xa6n Normal"; 	Armas_ID		[0][2]  = 5;	Armas_Precios_Num	[0][2]	= 50 * SumarPrecios;	Armas_Municion[0][2]	= 1;		format(Armas_Precios[0][2], 6, "$%i", Armas_Precios_Num[0][2] * Armas_Municion[0][2]);			// 02	15 - Cane
	    Armas_Nombre	[0][3] 	= "04-  Pala"; 				Armas_ID		[0][3]  = 6;	Armas_Precios_Num	[0][3]	= 75 * SumarPrecios;	Armas_Municion[0][3]	= 1;		format(Armas_Precios[0][3], 6, "$%i", Armas_Precios_Num[0][3] * Armas_Municion[0][3]);			// 03   06 - Shovel
	    Armas_Nombre	[0][4] 	= "05-  Taco de Billar"; 	Armas_ID		[0][4]  = 7;	Armas_Precios_Num	[0][4]	= 75 * SumarPrecios;	Armas_Municion[0][4]	= 1;		format(Armas_Precios[0][4], 6, "$%i", Armas_Precios_Num[0][4] * Armas_Municion[0][4]);			// 04   07 - Pool Cue
	}
	// Básicos II  			- 02
    Armas_Clases    [1] 	= "B\x98sicos II";
    {
	    Armas_Nombre	[1][0] 	= "01-  Bate"; 					Armas_ID		[1][0]  = 5;	Armas_Precios_Num	[1][0]	= 60 * SumarPrecios;	Armas_Municion[1][0]	= 1;		format(Armas_Precios[1][0], 6, "$%i", Armas_Precios_Num[1][0] * Armas_Municion[1][0]);			// 01   05 - Baseball Bat
	    Armas_Nombre	[1][1] 	= "02-  Manopla";				Armas_ID		[1][1]  = 1;	Armas_Precios_Num	[1][1]	= 75 * SumarPrecios;	Armas_Municion[1][1]	= 1;		format(Armas_Precios[1][1], 6, "$%i", Armas_Precios_Num[1][1] * Armas_Municion[1][1]);			// 02	01 - Brass Knuckles
	    Armas_Nombre	[1][2] 	= "03-  Katana"; 				Armas_ID		[1][2]  = 8;	Armas_Precios_Num	[1][2]	= 50 * SumarPrecios;	Armas_Municion[1][2]	= 1;		format(Armas_Precios[1][2], 6, "$%i", Armas_Precios_Num[1][2] * Armas_Municion[1][2]);			// 03   03 - 08 - Katana
	    Armas_Nombre	[1][3] 	= "04-  Motocierra"; 			Armas_ID		[1][3]  = 9;	Armas_Precios_Num	[1][3]	= 75 * SumarPrecios;	Armas_Municion[1][3]	= 1;		format(Armas_Precios[1][3], 6, "$%i", Armas_Precios_Num[1][3] * Armas_Municion[1][3]);			// 04   09 - Chainsaw
    }
    // Pistolas  			- 03
    Armas_Clases    [2] 	= "Pistolas";
    {
		Armas_Nombre	[2][0] 	= "01-  9mm Plateada"; 			Armas_ID		[2][0]  = 22;	Armas_Precios_Num	[2][0]	= 7 * SumarPrecios;	Armas_Municion[2][0]	= 60;		format(Armas_Precios[2][0], 6, "$%i", Armas_Precios_Num[2][0] * Armas_Municion[2][0]);			// 00	22 - 9mm
		Armas_Nombre	[2][1] 	= "02-  Silenciada 9mm"; 		Armas_ID		[2][1]  = 23;	Armas_Precios_Num	[2][1]	= 6 * SumarPrecios;	Armas_Municion[2][1]	= 60;		format(Armas_Precios[2][1], 6, "$%i", Armas_Precios_Num[2][1] * Armas_Municion[2][1]);			// 01	23 - Silenced 9mm
		Armas_Nombre	[2][2] 	= "03-  Desert Eagle Plateada"; Armas_ID		[2][2]  = 24;	Armas_Precios_Num	[2][2]	= 10 * SumarPrecios;	Armas_Municion[2][2]	= 50;		format(Armas_Precios[2][2], 6, "$%i", Armas_Precios_Num[2][2] * Armas_Municion[2][2]);			// 02	24 - Desert Eagle
    }
    // Escopetas  			- 04
    Armas_Clases    [3] 	= "Escopetas";
    {
		Armas_Nombre	[3][0] 	= "01-  Escopeta Normal"; 		Armas_ID		[3][0]  = 25;	Armas_Precios_Num	[3][0]	= 9 * SumarPrecios;	Armas_Municion[3][0]	= 25;		format(Armas_Precios[3][0], 6, "$%i", Armas_Precios_Num[3][0] * Armas_Municion[3][0]);		// 00	25 - Shotgun
		Armas_Nombre	[3][1] 	= "02-  Escopeta de Combate";	Armas_ID		[3][1]  = 27;	Armas_Precios_Num	[3][1]	= 18 * SumarPrecios;	Armas_Municion[3][1]	= 40;		format(Armas_Precios[3][1], 6, "$%i", Armas_Precios_Num[3][1] * Armas_Municion[3][1]);		// 01	27 - Combat Shotgun
    }
    // Sub-Fusiles 			- 05
    Armas_Clases    [4] 	= "Sub-Fusiles";
    {
		Armas_Nombre	[4][0] 	= "01-  MP5";Armas_ID		[4][0]  = 29;	Armas_Precios_Num	[4][0]	= 7 * SumarPrecios;	Armas_Municion[4][0]	= 200;		format(Armas_Precios[4][0], 6, "$%i", Armas_Precios_Num[4][0] * Armas_Municion[4][0]);			// 00  29 - MP5
    }
    // Fusiles              - 06
    Armas_Clases    [5] 	= "Fusiles";
    {
		Armas_Nombre	[5][0] 	= "01-  AK47";				 	Armas_ID		[5][0]  = 30;	Armas_Precios_Num	[5][0]	= 6 * SumarPrecios;	Armas_Municion[5][0]	= 150;		format(Armas_Precios[5][0], 6, "$%i", Armas_Precios_Num[5][0] * Armas_Municion[5][0]);			// 00	 30 - AK47
		Armas_Nombre	[5][1] 	= "02-  M4"; 					Armas_ID		[5][1]  = 31;	Armas_Precios_Num	[5][1]	= 8 * SumarPrecios;	Armas_Municion[5][1]	= 150;		format(Armas_Precios[5][1], 6, "$%i", Armas_Precios_Num[5][1] * Armas_Municion[5][1]);			// 01	 31 - M4
    }
    // Rifles               - 07
    Armas_Clases    [6] 	= "Rifles";
    {
		Armas_Nombre	[6][0] 	= "01-  Rifle Corto Alcance";	Armas_ID		[6][0]  = 33;	Armas_Precios_Num	[6][0]	= 20 * SumarPrecios;	Armas_Municion[6][0]	= 100;		format(Armas_Precios[6][0], 6, "$%i", Armas_Precios_Num[6][0] * Armas_Municion[6][0]);			// 00  33 - Country Rifle
		Armas_Nombre	[6][1] 	= "02-  Rifle Largo Alcance"; 	Armas_ID		[6][1]  = 34;	Armas_Precios_Num	[6][1]	= 22 * SumarPrecios;	Armas_Municion[6][1]	= 100;		format(Armas_Precios[6][1], 6, "$%i", Armas_Precios_Num[6][1] * Armas_Municion[6][1]);			// 01  34 - Sniper Rifle
	}
    // Alto Riesgo          - 08
    Armas_Clases    [7] 	= "Alto Riesgo";
    {
		Armas_Nombre	[7][0] 	= "01-  Granadas"; 				Armas_ID		[7][0]  = 16;	Armas_Precios_Num	[7][0]	= 9 * SumarPrecios;	Armas_Municion[7][0]	= 60;		format(Armas_Precios[7][0], 6, "$%i", Armas_Precios_Num[7][0] *	Armas_Municion[7][0]);			// 00	16 - Grenade
		Armas_Nombre	[7][1] 	= "02-  Molotovs"; 				Armas_ID		[7][1]  = 18;	Armas_Precios_Num	[7][1]	= 10 * SumarPrecios;	Armas_Municion[7][1]= 70;		format(Armas_Precios[7][1], 6, "$%i", Armas_Precios_Num[7][1] * Armas_Municion[7][1]);			// 01	18 - Molotov Cocktail
		Armas_Nombre	[7][2] 	= "03-  Extintor"; 				Armas_ID		[7][2]  = 42;	Armas_Precios_Num	[7][2]	= 1 * SumarPrecios;	Armas_Municion[7][2]	= 250;		format(Armas_Precios[7][2], 6, "$%i", Armas_Precios_Num[7][2] * Armas_Municion[7][2]);			// 02	42 - Fire Extinguisher
    }
    // Otros                - 09
    Armas_Clases    [8] 	= "Otros";
    {
		Armas_Nombre	[8][0] 	= "01-  Spray de Grafitis"; 	Armas_ID		[8][0]  = 41;	Armas_Precios_Num	[8][0]	= 5 * SumarPrecios;	Armas_Municion[8][0]	= 100;		format(Armas_Precios[8][0], 6, "$%i", Armas_Precios_Num[8][0] * Armas_Municion[8][0]);				// 00   41 - Spraycan
		Armas_Nombre	[8][1] 	= "04-  Chaleco"; 				Armas_ID		[8][1]  = 0;	Armas_Precios_Num	[8][1]	= 150 * SumarPrecios;	Armas_Municion[8][1]	= 1;		format(Armas_Precios[8][1], 6, "$%i", Armas_Precios_Num[8][1] * Armas_Municion[8][1]);			// 01   00 - Chaleco
		Armas_Nombre	[8][2] 	= "03-  Paraca\xa2das"; 		Armas_ID		[8][2]  = 46;	Armas_Precios_Num	[8][2]	= 75 * SumarPrecios;	Armas_Municion[8][2]	= 1;		format(Armas_Precios[8][2], 6, "$%i", Armas_Precios_Num[8][2] * Armas_Municion[8][2]);			// 02   46 - Parachute
    }

    // Menu prncipal
	Menu_Principal_Armas = CreateMenu("Menu Principal", 2, 200.0, 100.0, 150.0, 150.0);
	SetMenuColumnHeader(Menu_Principal_Armas, 0, "ID");
	SetMenuColumnHeader(Menu_Principal_Armas, 1, "Clases");

	AddMenuItem(Menu_Principal_Armas, 0, "01-");
	AddMenuItem(Menu_Principal_Armas, 0, "02-");
	AddMenuItem(Menu_Principal_Armas, 0, "03-");
	AddMenuItem(Menu_Principal_Armas, 0, "04-");
	AddMenuItem(Menu_Principal_Armas, 0, "05-");
	AddMenuItem(Menu_Principal_Armas, 0, "06-");
	AddMenuItem(Menu_Principal_Armas, 0, "07-");
	AddMenuItem(Menu_Principal_Armas, 0, "08-");
	AddMenuItem(Menu_Principal_Armas, 0, "09-");

	AddMenuItem(Menu_Principal_Armas, 1, Armas_Clases    [0]);
	AddMenuItem(Menu_Principal_Armas, 1, Armas_Clases    [1]);
	AddMenuItem(Menu_Principal_Armas, 1, Armas_Clases    [2]);
	AddMenuItem(Menu_Principal_Armas, 1, Armas_Clases    [3]);
	AddMenuItem(Menu_Principal_Armas, 1, Armas_Clases    [4]);
	AddMenuItem(Menu_Principal_Armas, 1, Armas_Clases    [5]);
	AddMenuItem(Menu_Principal_Armas, 1, Armas_Clases    [6]);
	AddMenuItem(Menu_Principal_Armas, 1, Armas_Clases    [7]);
	AddMenuItem(Menu_Principal_Armas, 1, Armas_Clases    [8]);

	// Básico I    		- 01
	Menues_Armas					[0] = CreateMenu("01- B\x98sico I", 2, 300.0, 200.0, 250.0, 70.0);
	SetMenuColumnHeader(Menues_Armas[0], 0, "ID   Arma");
	SetMenuColumnHeader(Menues_Armas[0], 1, "Precio");

	AddMenuItem(Menues_Armas[0], 0, Armas_Nombre		[0][0]);  	AddMenuItem(Menues_Armas[0], 1, Armas_Precios	[0][0]);
	AddMenuItem(Menues_Armas[0], 0, Armas_Nombre		[0][1]);  	AddMenuItem(Menues_Armas[0], 1, Armas_Precios	[0][1]);
	AddMenuItem(Menues_Armas[0], 0, Armas_Nombre		[0][2]);  	AddMenuItem(Menues_Armas[0], 1, Armas_Precios	[0][2]);
	AddMenuItem(Menues_Armas[0], 0, Armas_Nombre		[0][3]);  	AddMenuItem(Menues_Armas[0], 1, Armas_Precios	[0][3]);
	AddMenuItem(Menues_Armas[0], 0, Armas_Nombre		[0][4]);  	AddMenuItem(Menues_Armas[0], 1, Armas_Precios	[0][4]);

	// Básico II 		- 02
   	Menues_Armas					[1] = CreateMenu("02- B\x98sico II", 2, 300.0, 200.0, 250.0, 70.0);
	SetMenuColumnHeader(Menues_Armas[1], 0, "ID   Arma");
	SetMenuColumnHeader(Menues_Armas[1], 1, "Precio");

	AddMenuItem(Menues_Armas[1], 0, Armas_Nombre		[1][0]);  	AddMenuItem(Menues_Armas[1], 1, Armas_Precios	[1][0]);
	AddMenuItem(Menues_Armas[1], 0, Armas_Nombre		[1][1]);  	AddMenuItem(Menues_Armas[1], 1, Armas_Precios	[1][1]);
	AddMenuItem(Menues_Armas[1], 0, Armas_Nombre		[1][2]);  	AddMenuItem(Menues_Armas[1], 1, Armas_Precios	[1][2]);
	AddMenuItem(Menues_Armas[1], 0, Armas_Nombre		[1][3]);  	AddMenuItem(Menues_Armas[1], 1, Armas_Precios	[1][3]);

	// Pistolas  			- 03
   	Menues_Armas					[2] = CreateMenu("03- Pistolas", 2, 300.0, 200.0, 250.0, 70.0);
	SetMenuColumnHeader(Menues_Armas[2], 0, "ID   Arma");
	SetMenuColumnHeader(Menues_Armas[2], 1, "Precio");

	AddMenuItem(Menues_Armas[2], 0, Armas_Nombre		[2][0]);  	AddMenuItem(Menues_Armas[2], 1, Armas_Precios	[2][0]);
	AddMenuItem(Menues_Armas[2], 0, Armas_Nombre		[2][1]);  	AddMenuItem(Menues_Armas[2], 1, Armas_Precios	[2][1]);
	AddMenuItem(Menues_Armas[2], 0, Armas_Nombre		[2][2]);  	AddMenuItem(Menues_Armas[2], 1, Armas_Precios	[2][2]);

    // Escopetas  			- 04
   	Menues_Armas					[3] = CreateMenu("04- Escopetas", 2, 300.0, 200.0, 250.0, 70.0);
	SetMenuColumnHeader(Menues_Armas[3], 0, "ID   Arma");
	SetMenuColumnHeader(Menues_Armas[3], 1, "Precio");

	AddMenuItem(Menues_Armas[3], 0, Armas_Nombre		[3][0]);  	AddMenuItem(Menues_Armas[3], 1, Armas_Precios	[3][0]);
	AddMenuItem(Menues_Armas[3], 0, Armas_Nombre		[3][1]);  	AddMenuItem(Menues_Armas[3], 1, Armas_Precios	[3][1]);

    // Sub-Fusiles 			- 05
   	Menues_Armas					[4] = CreateMenu("05- Sub-Fusiles", 2, 300.0, 200.0, 250.0, 70.0);
	SetMenuColumnHeader(Menues_Armas[4], 0, "ID   Arma");
	SetMenuColumnHeader(Menues_Armas[4], 1, "Precio");

	AddMenuItem(Menues_Armas[4], 0, Armas_Nombre		[4][0]);  	AddMenuItem(Menues_Armas[4], 1, Armas_Precios	[4][0]);

    // Fusiles              - 06
   	Menues_Armas					[5] = CreateMenu("06- Fusiles", 2, 300.0, 200.0, 250.0, 70.0);
	SetMenuColumnHeader(Menues_Armas[5], 0, "ID   Arma");
	SetMenuColumnHeader(Menues_Armas[5], 1, "Precio");

	AddMenuItem(Menues_Armas[5], 0, Armas_Nombre		[5][0]);  	AddMenuItem(Menues_Armas[5], 1, Armas_Precios	[5][0]);
	AddMenuItem(Menues_Armas[5], 0, Armas_Nombre		[5][1]);  	AddMenuItem(Menues_Armas[5], 1, Armas_Precios	[5][1]);

    // Rifles               - 07
   	Menues_Armas					[6] = CreateMenu("07- Rifles", 2, 300.0, 200.0, 250.0, 70.0);
	SetMenuColumnHeader(Menues_Armas[6], 0, "ID   Arma");
	SetMenuColumnHeader(Menues_Armas[6], 1, "Precio");

	AddMenuItem(Menues_Armas[6], 0, Armas_Nombre		[6][0]);  	AddMenuItem(Menues_Armas[6], 1, Armas_Precios	[6][0]);
	AddMenuItem(Menues_Armas[6], 0, Armas_Nombre		[6][1]);  	AddMenuItem(Menues_Armas[6], 1, Armas_Precios	[6][1]);

    // Alto Riesgo          - 08
  	Menues_Armas					[7] = CreateMenu("08- Armas de Alto Riesgo", 2, 300.0, 200.0, 250.0, 70.0);
	SetMenuColumnHeader(Menues_Armas[7], 0, "ID   Arma");
	SetMenuColumnHeader(Menues_Armas[7], 1, "Precio");

	AddMenuItem(Menues_Armas[7], 0, Armas_Nombre		[7][0]);  	AddMenuItem(Menues_Armas[7], 1, Armas_Precios	[7][0]);
	AddMenuItem(Menues_Armas[7], 0, Armas_Nombre		[7][1]);  	AddMenuItem(Menues_Armas[7], 1, Armas_Precios	[7][1]);
	AddMenuItem(Menues_Armas[7], 0, Armas_Nombre		[7][2]);  	AddMenuItem(Menues_Armas[7], 1, Armas_Precios	[7][2]);

     // Otros                - 09
  	Menues_Armas					[8] = CreateMenu("09- Otros", 2, 300.0, 200.0, 250.0, 70.0);
	SetMenuColumnHeader(Menues_Armas[8], 0, "ID   Arma");
	SetMenuColumnHeader(Menues_Armas[8], 1, "Precio");

	AddMenuItem(Menues_Armas[8], 0, Armas_Nombre		[8][0]);  	AddMenuItem(Menues_Armas[8], 1, Armas_Precios	[8][0]);
	AddMenuItem(Menues_Armas[8], 0, Armas_Nombre		[8][1]);  	AddMenuItem(Menues_Armas[8], 1, Armas_Precios	[8][1]);
	AddMenuItem(Menues_Armas[8], 0, Armas_Nombre		[8][2]);  	AddMenuItem(Menues_Armas[8], 1, Armas_Precios	[8][2]);
}
public CleanDataDeath(playerid)
{
	PlayersData[playerid][IsPlayerInBizz] 					= false;
	StopAudioPlayer(playerid, PlayersDataOnline[playerid][HandleAHouse]);
	PlayersData[playerid][IsPlayerInHouse]      			= false;
	PlayersData[playerid][IsPlayerInBank] 					= false;

	PlayersDataOnline[playerid][JobBonus] 					= false;
	PlayersDataOnline[playerid][IsTeazer]      				= false;
	PlayersData[playerid][MyBonus] 							= false;
	PlayersData[playerid][IsPlayerInVehInt] 				= false;
	DisablePlayerCheckpoint(playerid);
	PlayersDataOnline[playerid][SubAfterMenuRow] 			= 0;
	PlayersDataOnline[playerid][AfterMenuRow] 	 			= 0;
	SetPlayerDrunkLevel(playerid, 0);

	new CallID;
	for (new i = 0; i <= 2;i++)
	{
		CallID = IsFoundCall(PlayersData[playerid][Phone], i);
		if ( CallID != -1 )
		{
			RemoveCallPublics(CallID, i);
		}
		if ( i <= 1 )
		{
			CallID = IsFoundCallSAMD(PlayersData[playerid][Phone], 1, 0);
			if ( CallID != -1 )
			{
				RemoveCallSAMD(CallID, 0);
			}
			CallID = IsFoundCallSAMD(PlayersData[playerid][Phone], 1, 1);
			if ( CallID != -1 )
			{
				RemoveCallSAMD(CallID, 1);
			}
		}
	}
}
public SetMoneyExtorsion(bizzid, money)
{
    if ( strlen(NegociosData[bizzid][Extorsion]) != 2 )
    {
		NegociosData[bizzid][DepositoExtorsion] = NegociosData[bizzid][DepositoExtorsion] + (money / 5);
	    NegociosData[bizzid][Deposito] = NegociosData[bizzid][Deposito] + (money - (money / 5) );
    }
    else
    {
        NegociosData[bizzid][Deposito] = NegociosData[bizzid][Deposito] + money;
	}
	NegociosData[bizzid][Materiales] = NegociosData[bizzid][Materiales] - 2;
}
public PlayPlayerStreamSound(playerid, soundid)
{
	new Float:PlayerPos[3]; GetPlayerPos(playerid, PlayerPos[0], PlayerPos[1], PlayerPos[2]);
	for ( new i = 0; i < MAX_PLAYERS; i++ )
	{
		if ( IsPlayerConnected(i) )
		{
			if ( IsPlayerInRangeOfPoint(i,
			30.0,   				// Radio del sonido
			PlayerPos[0],  			// Coordenadas X
			PlayerPos[1],      		// Coordenadas Y
			PlayerPos[2]) )			// Coordenadas Z
			{
				PlayerPlaySound(i, soundid, PlayerPos[0], PlayerPos[1], PlayerPos[2]);
			}
		}
	}
	return 1;
}
public PlayStreamSound(Float:x, Float:y, Float:z, Float:Ratio, soundid)
{
	for ( new i = 0; i < MAX_PLAYERS; i++ )
	{
		if ( IsPlayerConnected(i) )
		{
			if ( IsPlayerInRangeOfPoint(i,
			Ratio,   				// Radio del sonido
			x,            			// Coordenadas X
			y,              		// Coordenadas Y
			z) )           			// Coordenadas Z
			{
				PlayerPlaySound(i, soundid, x, y, z);
			}
		}
	}
	return 1;
}
public LoadAllAnims()
{
	//////	ANIMACIONES
	// ATTRACTORS - 2
	ATTRACTORS_ANIMATIONS [0]   = "Stepsit_in";
	ATTRACTORS_ANIMATIONS [1]   = "Stepsit_loop";
	ATTRACTORS_ANIMATIONS [2]   = "Stepsit_out";
	// BAR - 11
	BAR_ANIMATIONS[0]   = "Barcustom_get";
	BAR_ANIMATIONS[1]   = "Barcustom_loop";
	BAR_ANIMATIONS[2]   = "Barcustom_order";
	BAR_ANIMATIONS[3]   = "BARman_idle";
	BAR_ANIMATIONS[4]   = "Barserve_bottle";
	BAR_ANIMATIONS[5]   = "Barserve_give";
	BAR_ANIMATIONS[6]   = "Barserve_glass";
	BAR_ANIMATIONS[7]   = "Barserve_in";
	BAR_ANIMATIONS[8]   = "Barserve_loop";
	BAR_ANIMATIONS[9]   = "Barserve_order";
	BAR_ANIMATIONS[10]   = "dnk_stndF_loop";
	BAR_ANIMATIONS[11]   = "dnk_stndM_loop";
	// BAT - 10
	BAT_ANIMATIONS [0]   = "Bat_1";
	BAT_ANIMATIONS [1]   = "Bat_2";
	BAT_ANIMATIONS [2]   = "Bat_3";
	BAT_ANIMATIONS [3]   = "Bat_4";
	BAT_ANIMATIONS [4]   = "Bat_block";
	BAT_ANIMATIONS [5]   = "Bat_Hit_1";
	BAT_ANIMATIONS [6]   = "Bat_Hit_2";
	BAT_ANIMATIONS [7]   = "Bat_Hit_3";
	BAT_ANIMATIONS [8]   = "Bat_IDLE";
	BAT_ANIMATIONS [9]   = "Bat_M";
	BAT_ANIMATIONS [10]   = "BAT_PART";
	// FIRE - 12
	FIRE_ANIMATIONS [0]   = "BD_Fire1";
	FIRE_ANIMATIONS [1]   = "BD_Fire2";
	FIRE_ANIMATIONS [2]   = "BD_Fire3";
	FIRE_ANIMATIONS [3]   = "BD_GF_Wave";
	FIRE_ANIMATIONS [4]   = "BD_Panic_01";
	FIRE_ANIMATIONS [5]   = "BD_Panic_02";
	FIRE_ANIMATIONS [6]   = "BD_Panic_03";
	FIRE_ANIMATIONS [7]   = "BD_Panic_04";
	FIRE_ANIMATIONS [8]   = "BD_Panic_Loop";
	FIRE_ANIMATIONS [9]   = "Grlfrd_Kiss_03";
	FIRE_ANIMATIONS [10]   = "M_smklean_loop";
	FIRE_ANIMATIONS [11]   = "Playa_Kiss_03";
	FIRE_ANIMATIONS [12]   = "wash_up";
	// PLAYA - 4
	PLAYA_ANIMATIONS [0]   = "bather";
	PLAYA_ANIMATIONS [1]   = "Lay_Bac_Loop";
	PLAYA_ANIMATIONS [2]   = "ParkSit_M_loop";
	PLAYA_ANIMATIONS [3]   = "ParkSit_W_loop";
	PLAYA_ANIMATIONS [4]   = "SitnWait_loop_W";
	// GYM - 6
	GYM_ANIMATIONS [0]   = "gym_bp_celebrate";
	GYM_ANIMATIONS [1]   = "gym_bp_down";
	GYM_ANIMATIONS [2]   = "gym_bp_getoff";
	GYM_ANIMATIONS [3]   = "gym_bp_geton";
	GYM_ANIMATIONS [4]   = "gym_bp_up_A";
	GYM_ANIMATIONS [5]   = "gym_bp_up_B";
	GYM_ANIMATIONS [6]   = "gym_bp_up_smooth";
	// BFINJECT - 3
	BFINJECT_ANIMATIONS [0]   = "BF_getin_LHS";
	BFINJECT_ANIMATIONS [1]   = "BF_getin_RHS";
	BFINJECT_ANIMATIONS [2]   = "BF_getout_LHS";
	BFINJECT_ANIMATIONS [3]   = "BF_getout_RHS";
	// BICID - 18
	BICID_ANIMATIONS [0]   = "BIKEd_Back";
	BICID_ANIMATIONS [1]   = "BIKEd_drivebyFT";
	BICID_ANIMATIONS [2]   = "BIKEd_drivebyLHS";
	BICID_ANIMATIONS [3]   = "BIKEd_drivebyRHS";
	BICID_ANIMATIONS [4]   = "BIKEd_Fwd";
	BICID_ANIMATIONS [5]   = "BIKEd_getoffBACK";
	BICID_ANIMATIONS [6]   = "BIKEd_getoffLHS";
	BICID_ANIMATIONS [7]   = "BIKEd_getoffRHS";
	BICID_ANIMATIONS [8]   = "BIKEd_hit";
	BICID_ANIMATIONS [9]   = "BIKEd_jumponL";
	BICID_ANIMATIONS [10]   = "BIKEd_jumponR";
	BICID_ANIMATIONS [11]   = "BIKEd_kick";
	BICID_ANIMATIONS [12]   = "BIKEd_Left";
	BICID_ANIMATIONS [13]   = "BIKEd_passenger";
	BICID_ANIMATIONS [14]   = "BIKEd_pushes";
	BICID_ANIMATIONS [15]   = "BIKEd_Ride";
	BICID_ANIMATIONS [16]   = "BIKEd_Right";
	BICID_ANIMATIONS [17]   = "BIKEd_shuffle";
	BICID_ANIMATIONS [18]   = "BIKEd_Still";
	// BICIH - 17
	BICIH_ANIMATIONS [0]   = "BIKEh_Back";
	BICIH_ANIMATIONS [1]   = "BIKEh_drivebyFT";
	BICIH_ANIMATIONS [2]   = "BIKEh_drivebyLHS";
	BICIH_ANIMATIONS [3]   = "BIKEh_drivebyRHS";
	BICIH_ANIMATIONS [4]   = "BIKEh_Fwd";
	BICIH_ANIMATIONS [5]   = "BIKEh_getoffBACK";
	BICIH_ANIMATIONS [6]   = "BIKEh_getoffLHS";
	BICIH_ANIMATIONS [7]   = "BIKEh_getoffRHS";
	BICIH_ANIMATIONS [8]   = "BIKEh_hit";
	BICIH_ANIMATIONS [9]   = "BIKEh_jumponL";
	BICIH_ANIMATIONS [10]   = "BIKEh_jumponR";
	BICIH_ANIMATIONS [11]   = "BIKEh_kick";
	BICIH_ANIMATIONS [12]   = "BIKEh_Left";
	BICIH_ANIMATIONS [13]   = "BIKEh_passenger";
	BICIH_ANIMATIONS [14]   = "BIKEh_pushes";
	BICIH_ANIMATIONS [15]   = "BIKEh_Ride";
	BICIH_ANIMATIONS [16]   = "BIKEh_Right";
	BICIH_ANIMATIONS [17]   = "BIKEh_Still";
	// BICIL - 8
	BICIL_ANIMATIONS [0]   = "bk_blnce_in";
	BICIL_ANIMATIONS [1]   = "bk_blnce_out";
	BICIL_ANIMATIONS [2]   = "bk_jmp";
	BICIL_ANIMATIONS [3]   = "bk_rdy_in";
	BICIL_ANIMATIONS [4]   = "bk_rdy_out";
	BICIL_ANIMATIONS [5]   = "struggle_cesar";
	BICIL_ANIMATIONS [6]   = "struggle_driver";
	BICIL_ANIMATIONS [7]   = "truck_driver";
	BICIL_ANIMATIONS [8]   = "truck_getin";
	// BICIS - 19
	BICIS_ANIMATIONS [0]   = "BIKEs_Back";
	BICIS_ANIMATIONS [1]   = "BIKEs_drivebyFT";
	BICIS_ANIMATIONS [2]   = "BIKEs_drivebyLHS";
	BICIS_ANIMATIONS [3]   = "BIKEs_drivebyRHS";
	BICIS_ANIMATIONS [4]   = "BIKEs_Fwd";
	BICIS_ANIMATIONS [5]   = "BIKEs_getoffBACK";
	BICIS_ANIMATIONS [6]   = "BIKEs_getoffLHS";
	BICIS_ANIMATIONS [7]   = "BIKEs_getoffRHS";
	BICIS_ANIMATIONS [8]   = "BIKEs_hit";
	BICIS_ANIMATIONS [9]   = "BIKEs_jumponL";
	BICIS_ANIMATIONS [10]   = "BIKEs_jumponR";
	BICIS_ANIMATIONS [11]   = "BIKEs_kick";
	BICIS_ANIMATIONS [12]   = "BIKEs_Left";
	BICIS_ANIMATIONS [13]   = "BIKEs_passenger";
	BICIS_ANIMATIONS [14]   = "BIKEs_pushes";
	BICIS_ANIMATIONS [15]   = "BIKEs_Ride";
	BICIS_ANIMATIONS [16]   = "BIKEs_Right";
	BICIS_ANIMATIONS [17]   = "BIKEs_Snatch_L";
	BICIS_ANIMATIONS [18]   = "BIKEs_Snatch_R";
	BICIS_ANIMATIONS [19]   = "BIKEs_Still";
	// BICIV - 17
	BICIV_ANIMATIONS [0]   = "BIKEv_Back";
	BICIV_ANIMATIONS [1]   = "BIKEv_drivebyFT";
	BICIV_ANIMATIONS [2]   = "BIKEv_drivebyLHS";
	BICIV_ANIMATIONS [3]   = "BIKEv_drivebyRHS";
	BICIV_ANIMATIONS [4]   = "BIKEv_Fwd";
	BICIV_ANIMATIONS [5]   = "BIKEv_getoffBACK";
	BICIV_ANIMATIONS [6]   = "BIKEv_getoffLHS";
	BICIV_ANIMATIONS [7]   = "BIKEv_getoffRHS";
	BICIV_ANIMATIONS [8]   = "BIKEv_hit";
	BICIV_ANIMATIONS [9]   = "BIKEv_jumponL";
	BICIV_ANIMATIONS [10]   = "BIKEv_jumponR";
	BICIV_ANIMATIONS [11]   = "BIKEv_kick";
	BICIV_ANIMATIONS [12]   = "BIKEv_Left";
	BICIV_ANIMATIONS [13]   = "BIKEv_passenger";
	BICIV_ANIMATIONS [14]   = "BIKEv_pushes";
	BICIV_ANIMATIONS [15]   = "BIKEv_Ride";
	BICIV_ANIMATIONS [16]   = "BIKEv_Right";
	BICIV_ANIMATIONS [17]   = "BIKEv_Still";
	// BICI - 3
	BICI_ANIMATIONS [0]   = "Pass_Driveby_BWD";
	BICI_ANIMATIONS [1]   = "Pass_Driveby_FWD";
	BICI_ANIMATIONS [2]   = "Pass_Driveby_LHS";
	BICI_ANIMATIONS [3]   = "Pass_Driveby_RHS";
	// GOLPE - 11
	GOLPE_ANIMATIONS [0]   = "BJ_COUCH_START_W";
	GOLPE_ANIMATIONS [1]   = "BJ_COUCH_LOOP_W";
	GOLPE_ANIMATIONS [2]   = "BJ_COUCH_END_W";
	GOLPE_ANIMATIONS [3]   = "BJ_COUCH_START_P";
	GOLPE_ANIMATIONS [4]   = "BJ_COUCH_LOOP_P";
	GOLPE_ANIMATIONS [5]   = "BJ_COUCH_END_P";
	GOLPE_ANIMATIONS [6]   = "BJ_STAND_START_W";
	GOLPE_ANIMATIONS [7]   = "BJ_STAND_LOOP_W";
	GOLPE_ANIMATIONS [8]   = "BJ_STAND_END_W";
	GOLPE_ANIMATIONS [9]   = "BJ_STAND_START_P";
	GOLPE_ANIMATIONS [10]   = "BJ_STAND_LOOP_P";
	GOLPE_ANIMATIONS [11]   = "BJ_STAND_END_P";
	// BMX - 17
	BMX_ANIMATIONS [0]   = "BMX_back";
	BMX_ANIMATIONS [1]   = "BMX_bunnyhop";
	BMX_ANIMATIONS [2]   = "BMX_drivebyFT";
	BMX_ANIMATIONS [3]   = "BMX_driveby_LHS";
	BMX_ANIMATIONS [4]   = "BMX_driveby_RHS";
	BMX_ANIMATIONS [5]   = "BMX_fwd";
	BMX_ANIMATIONS [6]   = "BMX_getoffBACK";
	BMX_ANIMATIONS [7]   = "BMX_getoffLHS";
	BMX_ANIMATIONS [8]   = "BMX_getoffRHS";
	BMX_ANIMATIONS [9]   = "BMX_jumponL";
	BMX_ANIMATIONS [10]   = "BMX_jumponR";
	BMX_ANIMATIONS [11]   = "BMX_Left";
	BMX_ANIMATIONS [12]   = "BMX_pedal";
	BMX_ANIMATIONS [13]   = "BMX_pushes";
	BMX_ANIMATIONS [14]   = "BMX_Ride";
	BMX_ANIMATIONS [15]   = "BMX_Right";
	BMX_ANIMATIONS [16]   = "BMX_sprint";
	BMX_ANIMATIONS [17]   = "BMX_still";
	// BOMBER - 5
	BOMBER_ANIMATIONS [0]   = "BOM_Plant";
	BOMBER_ANIMATIONS [1]   = "BOM_Plant_2Idle";
	BOMBER_ANIMATIONS [2]   = "BOM_Plant_Crouch_In";
	BOMBER_ANIMATIONS [3]   = "BOM_Plant_Crouch_Out";
	BOMBER_ANIMATIONS [4]   = "BOM_Plant_In";
	BOMBER_ANIMATIONS [5]   = "BOM_Plant_Loop";
	// BOX - 9
	BOX_ANIMATIONS [0]   = "boxhipin";
	BOX_ANIMATIONS [1]   = "boxhipup";
	BOX_ANIMATIONS [2]   = "boxshdwn";
	BOX_ANIMATIONS [3]   = "boxshup";
	BOX_ANIMATIONS [4]   = "bxhipwlk";
	BOX_ANIMATIONS [5]   = "bxhwlki";
	BOX_ANIMATIONS [6]   = "bxshwlk";
	BOX_ANIMATIONS [7]   = "bxshwlki";
	BOX_ANIMATIONS [8]   = "bxwlko";
	BOX_ANIMATIONS [9]   = "catch_box";
	// BALL - 40
	BALL_ANIMATIONS [0]   = "BBALL_def_jump_shot";
	BALL_ANIMATIONS [1]   = "BBALL_def_loop";
	BALL_ANIMATIONS [2]   = "BBALL_def_stepL";
	BALL_ANIMATIONS [3]   = "BBALL_def_stepR";
	BALL_ANIMATIONS [4]   = "BBALL_Dnk";
	BALL_ANIMATIONS [5]   = "BBALL_Dnk_Gli";
	BALL_ANIMATIONS [6]   = "BBALL_Dnk_Gli_O";
	BALL_ANIMATIONS [7]   = "BBALL_Dnk_Lnch";
	BALL_ANIMATIONS [8]   = "BBALL_Dnk_Lnch_O";
	BALL_ANIMATIONS [9]   = "BBALL_Dnk_Lnd";
	BALL_ANIMATIONS [10]   = "BBALL_Dnk_O";
	BALL_ANIMATIONS [11]   = "BBALL_idle";
	BALL_ANIMATIONS [12]   = "BBALL_idle2";
	BALL_ANIMATIONS [13]   = "BBALL_idle2_O";
	BALL_ANIMATIONS [14]   = "BBALL_idleloop";
	BALL_ANIMATIONS [15]   = "BBALL_idleloop_O";
	BALL_ANIMATIONS [16]   = "BBALL_idle_O";
	BALL_ANIMATIONS [17]   = "BBALL_Jump_Cancel";
	BALL_ANIMATIONS [18]   = "BBALL_Jump_Cancel_O";
	BALL_ANIMATIONS [19]   = "BBALL_Jump_End";
	BALL_ANIMATIONS [20]   = "BBALL_Jump_Shot";
	BALL_ANIMATIONS [21]   = "BBALL_Jump_Shot_O";
	BALL_ANIMATIONS [22]   = "BBALL_Net_Dnk_O";
	BALL_ANIMATIONS [23]   = "BBALL_pickup";
	BALL_ANIMATIONS [24]   = "BBALL_pickup_O";
	BALL_ANIMATIONS [25]   = "BBALL_react_miss";
	BALL_ANIMATIONS [26]   = "BBALL_react_score";
	BALL_ANIMATIONS [27]   = "BBALL_run";
	BALL_ANIMATIONS [28]   = "BBALL_run_O";
	BALL_ANIMATIONS [29]   = "BBALL_SkidStop_L";
	BALL_ANIMATIONS [30]   = "BBALL_SkidStop_L_O";
	BALL_ANIMATIONS [31]   = "BBALL_SkidStop_R";
	BALL_ANIMATIONS [32]   = "BBALL_SkidStop_R_O";
	BALL_ANIMATIONS [33]   = "BBALL_walk";
	BALL_ANIMATIONS [34]   = "BBALL_WalkStop_L";
	BALL_ANIMATIONS [35]   = "BBALL_WalkStop_L_O";
	BALL_ANIMATIONS [36]   = "BBALL_WalkStop_R";
	BALL_ANIMATIONS [37]   = "BBALL_WalkStop_R_O";
	BALL_ANIMATIONS [38]   = "BBALL_walk_O";
	BALL_ANIMATIONS [39]   = "BBALL_walk_start";
	BALL_ANIMATIONS [40]   = "BBALL_walk_start_O";
	// BUDDY - 4
	BUDDY_ANIMATIONS [0]   = "buddy_crouchfire";
	BUDDY_ANIMATIONS [1]   = "buddy_crouchreload";
	BUDDY_ANIMATIONS [2]   = "buddy_fire";
	BUDDY_ANIMATIONS [3]   = "buddy_fire_poor";
	BUDDY_ANIMATIONS [4]   = "buddy_reload";
	// BUS - 8
	BUS_ANIMATIONS [0]   = "BUS_close";
	BUS_ANIMATIONS [1]   = "BUS_getin_LHS";
	BUS_ANIMATIONS [2]   = "BUS_getin_RHS";
	BUS_ANIMATIONS [3]   = "BUS_getout_LHS";
	BUS_ANIMATIONS [4]   = "BUS_getout_RHS";
	BUS_ANIMATIONS [5]   = "BUS_jacked_LHS";
	BUS_ANIMATIONS [6]   = "BUS_open";
	BUS_ANIMATIONS [7]   = "BUS_open_RHS";
	BUS_ANIMATIONS [8]   = "BUS_pullout_LHS";
	// CAM - 13
	CAM_ANIMATIONS [0]   = "camcrch_cmon";
	CAM_ANIMATIONS [1]   = "camcrch_idleloop";
	CAM_ANIMATIONS [2]   = "camcrch_stay";
	CAM_ANIMATIONS [3]   = "camcrch_to_camstnd";
	CAM_ANIMATIONS [4]   = "camstnd_cmon";
	CAM_ANIMATIONS [5]   = "camstnd_idleloop";
	CAM_ANIMATIONS [6]   = "camstnd_lkabt";
	CAM_ANIMATIONS [7]   = "camstnd_to_camcrch";
	CAM_ANIMATIONS [8]   = "piccrch_in";
	CAM_ANIMATIONS [9]   = "piccrch_out";
	CAM_ANIMATIONS [10]   = "piccrch_take";
	CAM_ANIMATIONS [11]   = "picstnd_in";
	CAM_ANIMATIONS [12]   = "picstnd_out";
	CAM_ANIMATIONS [13]   = "picstnd_take";
	// CAR - 10
	CAR_ANIMATIONS [0]   = "Fixn_Car_Loop";
	CAR_ANIMATIONS [1]   = "Fixn_Car_Out";
	CAR_ANIMATIONS [2]   = "flag_drop";
	CAR_ANIMATIONS [3]   = "Sit_relaxed";
	CAR_ANIMATIONS [4]   = "Tap_hand";
	CAR_ANIMATIONS [5]   = "Tyd2car_bump";
	CAR_ANIMATIONS [6]   = "Tyd2car_high";
	CAR_ANIMATIONS [7]   = "Tyd2car_low";
	CAR_ANIMATIONS [8]   = "Tyd2car_med";
	CAR_ANIMATIONS [9]   = "Tyd2car_TurnL";
	CAR_ANIMATIONS [10]   = "Tyd2car_TurnR";
	// CARRY - 6
	CARRY_ANIMATIONS [0]   = "crry_prtial";
	CARRY_ANIMATIONS [1]   = "liftup";
	CARRY_ANIMATIONS [2]   = "liftup05";
	CARRY_ANIMATIONS [3]   = "liftup105";
	CARRY_ANIMATIONS [4]   = "putdwn";
	CARRY_ANIMATIONS [5]   = "putdwn05";
	CARRY_ANIMATIONS [6]   = "putdwn105";
	// CARCHAT - 20
	CARCHAT_ANIMATIONS [0]   = "carfone_in";
	CARCHAT_ANIMATIONS [1]   = "carfone_loopA";
	CARCHAT_ANIMATIONS [2]   = "carfone_loopA_to_B";
	CARCHAT_ANIMATIONS [3]   = "carfone_loopB";
	CARCHAT_ANIMATIONS [4]   = "carfone_loopB_to_A";
	CARCHAT_ANIMATIONS [5]   = "carfone_out";
	CARCHAT_ANIMATIONS [6]   = "CAR_Sc1_BL";
	CARCHAT_ANIMATIONS [7]   = "CAR_Sc1_BR";
	CARCHAT_ANIMATIONS [8]   = "CAR_Sc1_FL";
	CARCHAT_ANIMATIONS [9]   = "CAR_Sc1_FR";
	CARCHAT_ANIMATIONS [10]   = "CAR_Sc2_FL";
	CARCHAT_ANIMATIONS [11]   = "CAR_Sc3_BR";
	CARCHAT_ANIMATIONS [12]   = "CAR_Sc3_FL";
	CARCHAT_ANIMATIONS [13]   = "CAR_Sc3_FR";
	CARCHAT_ANIMATIONS [14]   = "CAR_Sc4_BL";
	CARCHAT_ANIMATIONS [15]   = "CAR_Sc4_BR";
	CARCHAT_ANIMATIONS [16]   = "CAR_Sc4_FL";
	CARCHAT_ANIMATIONS [17]   = "CAR_Sc4_FR";
	CARCHAT_ANIMATIONS [18]   = "car_talkm_in";
	CARCHAT_ANIMATIONS [19]   = "car_talkm_loop";
	CARCHAT_ANIMATIONS [20]   = "car_talkm_out";
	// CASINO - 24
	CASINO_ANIMATIONS [0]   = "cards_in";
	CASINO_ANIMATIONS [1]   = "cards_loop";
	CASINO_ANIMATIONS [2]   = "cards_lose";
	CASINO_ANIMATIONS [3]   = "cards_out";
	CASINO_ANIMATIONS [4]   = "cards_pick_01";
	CASINO_ANIMATIONS [5]   = "cards_pick_02";
	CASINO_ANIMATIONS [6]   = "cards_raise";
	CASINO_ANIMATIONS [7]   = "cards_win";
	CASINO_ANIMATIONS [8]   = "dealone";
	CASINO_ANIMATIONS [9]   = "manwinb";
	CASINO_ANIMATIONS [10]   = "manwind";
	CASINO_ANIMATIONS [11]   = "Roulette_bet";
	CASINO_ANIMATIONS [12]   = "Roulette_in";
	CASINO_ANIMATIONS [13]   = "Roulette_loop";
	CASINO_ANIMATIONS [14]   = "Roulette_lose";
	CASINO_ANIMATIONS [15]   = "Roulette_out";
	CASINO_ANIMATIONS [16]   = "Roulette_win";
	CASINO_ANIMATIONS [17]   = "Slot_bet_01";
	CASINO_ANIMATIONS [18]   = "Slot_bet_02";
	CASINO_ANIMATIONS [19]   = "Slot_in";
	CASINO_ANIMATIONS [20]   = "Slot_lose_out";
	CASINO_ANIMATIONS [21]   = "Slot_Plyr";
	CASINO_ANIMATIONS [22]   = "Slot_wait";
	CASINO_ANIMATIONS [23]   = "Slot_win_out";
	CASINO_ANIMATIONS [24]   = "wof";
	// CHAINSAW - 10
	CHAINSAW_ANIMATIONS [0]   = "CSAW_1";
	CHAINSAW_ANIMATIONS [1]   = "CSAW_2";
	CHAINSAW_ANIMATIONS [2]   = "CSAW_3";
	CHAINSAW_ANIMATIONS [3]   = "CSAW_G";
	CHAINSAW_ANIMATIONS [4]   = "CSAW_Hit_1";
	CHAINSAW_ANIMATIONS [5]   = "CSAW_Hit_2";
	CHAINSAW_ANIMATIONS [6]   = "CSAW_Hit_3";
	CHAINSAW_ANIMATIONS [7]   = "csaw_part";
	CHAINSAW_ANIMATIONS [8]   = "IDLE_csaw";
	CHAINSAW_ANIMATIONS [9]   = "WEAPON_csaw";
	CHAINSAW_ANIMATIONS [10]   = "WEAPON_csawlo";
	// CHOPA - 17
	CHOPA_ANIMATIONS [0]   = "CHOPPA_back";
	CHOPA_ANIMATIONS [1]   = "CHOPPA_bunnyhop";
	CHOPA_ANIMATIONS [2]   = "CHOPPA_drivebyFT";
	CHOPA_ANIMATIONS [3]   = "CHOPPA_driveby_LHS";
	CHOPA_ANIMATIONS [4]   = "CHOPPA_driveby_RHS";
	CHOPA_ANIMATIONS [5]   = "CHOPPA_fwd";
	CHOPA_ANIMATIONS [6]   = "CHOPPA_getoffBACK";
	CHOPA_ANIMATIONS [7]   = "CHOPPA_getoffLHS";
	CHOPA_ANIMATIONS [8]   = "CHOPPA_getoffRHS";
	CHOPA_ANIMATIONS [9]   = "CHOPPA_jumponL";
	CHOPA_ANIMATIONS [10]   = "CHOPPA_jumponR";
	CHOPA_ANIMATIONS [11]   = "CHOPPA_Left";
	CHOPA_ANIMATIONS [12]   = "CHOPPA_pedal";
	CHOPA_ANIMATIONS [13]   = "CHOPPA_Pushes";
	CHOPA_ANIMATIONS [14]   = "CHOPPA_ride";
	CHOPA_ANIMATIONS [15]   = "CHOPPA_Right";
	CHOPA_ANIMATIONS [16]   = "CHOPPA_sprint";
	CHOPA_ANIMATIONS [17]   = "CHOPPA_Still";
	// CLOTHES - 12
	CLOTHES_ANIMATIONS [0]   = "CLO_Buy";
	CLOTHES_ANIMATIONS [1]   = "CLO_In";
	CLOTHES_ANIMATIONS [2]   = "CLO_Out";
	CLOTHES_ANIMATIONS [3]   = "CLO_Pose_Hat";
	CLOTHES_ANIMATIONS [4]   = "CLO_Pose_In";
	CLOTHES_ANIMATIONS [5]   = "CLO_Pose_In_O";
	CLOTHES_ANIMATIONS [6]   = "CLO_Pose_Legs";
	CLOTHES_ANIMATIONS [7]   = "CLO_Pose_Loop";
	CLOTHES_ANIMATIONS [8]   = "CLO_Pose_Out";
	CLOTHES_ANIMATIONS [9]   = "CLO_Pose_Out_O";
	CLOTHES_ANIMATIONS [10]   = "CLO_Pose_Shoes";
	CLOTHES_ANIMATIONS [11]   = "CLO_Pose_Torso";
	CLOTHES_ANIMATIONS [12]   = "CLO_Pose_Watch";
	// COACH - 5
	COACH_ANIMATIONS [0]   = "COACH_inL";
	COACH_ANIMATIONS [1]   = "COACH_inR";
	COACH_ANIMATIONS [2]   = "COACH_opnL";
	COACH_ANIMATIONS [3]   = "COACH_opnR";
	COACH_ANIMATIONS [4]   = "COACH_outL";
	COACH_ANIMATIONS [5]   = "COACH_outR";
	// COLT - 6
	COLT_ANIMATIONS [0]   = "2guns_crouchfire";
	COLT_ANIMATIONS [1]   = "colt45_crouchfire";
	COLT_ANIMATIONS [2]   = "colt45_crouchreload";
	COLT_ANIMATIONS [3]   = "colt45_fire";
	COLT_ANIMATIONS [4]   = "colt45_fire_2hands";
	COLT_ANIMATIONS [5]   = "colt45_reload";
	COLT_ANIMATIONS [6]   = "sawnoff_reload";
	// COP - 11
	COP_ANIMATIONS [0]   = "Copbrowse_in";
	COP_ANIMATIONS [1]   = "Copbrowse_loop";
	COP_ANIMATIONS [2]   = "Copbrowse_nod";
	COP_ANIMATIONS [3]   = "Copbrowse_out";
	COP_ANIMATIONS [4]   = "Copbrowse_shake";
	COP_ANIMATIONS [5]   = "Coplook_in";
	COP_ANIMATIONS [6]   = "Coplook_loop";
	COP_ANIMATIONS [7]   = "Coplook_nod";
	COP_ANIMATIONS [8]   = "Coplook_out";
	COP_ANIMATIONS [9]   = "Coplook_shake";
	COP_ANIMATIONS [10]   = "Coplook_think";
	COP_ANIMATIONS [11]   = "Coplook_watch";
	// COPD - 3
	COPD_ANIMATIONS [0]   = "COP_Dvby_B";
	COPD_ANIMATIONS [1]   = "COP_Dvby_FT";
	COPD_ANIMATIONS [2]   = "COP_Dvby_L";
	COPD_ANIMATIONS [3]   = "COP_Dvby_R";
	// CRACK - 9
	CRACK_ANIMATIONS [0]   = "Bbalbat_Idle_01";
	CRACK_ANIMATIONS [1]   = "Bbalbat_Idle_02";
	CRACK_ANIMATIONS [2]   = "crckdeth1";
	CRACK_ANIMATIONS [3]   = "crckdeth2";
	CRACK_ANIMATIONS [4]   = "crckdeth3";
	CRACK_ANIMATIONS [5]   = "crckdeth4";
	CRACK_ANIMATIONS [6]   = "crckidle1";
	CRACK_ANIMATIONS [7]   = "crckidle2";
	CRACK_ANIMATIONS [8]   = "crckidle3";
	CRACK_ANIMATIONS [9]   = "crckidle4";
	// CRIB - 4
	CRIB_ANIMATIONS [0]   = "CRIB_Console_Loop";
	CRIB_ANIMATIONS [1]   = "CRIB_Use_Switch";
	CRIB_ANIMATIONS [2]   = "PED_Console_Loop";
	CRIB_ANIMATIONS [3]   = "PED_Console_Loose";
	CRIB_ANIMATIONS [4]   = "PED_Console_Win";
	// DAM - 4
	DAM_ANIMATIONS [0]   = "DAM_Dive_Loop";
	DAM_ANIMATIONS [1]   = "DAM_Land";
	DAM_ANIMATIONS [2]   = "DAM_Launch";
	DAM_ANIMATIONS [3]   = "Jump_Roll";
	DAM_ANIMATIONS [4]   = "SF_JumpWall";
	// DANCE - 12
	DANCE_ANIMATIONS [0]   = "bd_clap";
	DANCE_ANIMATIONS [1]   = "bd_clap1";
	DANCE_ANIMATIONS [2]   = "dance_loop";
	DANCE_ANIMATIONS [3]   = "DAN_Down_A";
	DANCE_ANIMATIONS [4]   = "DAN_Left_A";
	DANCE_ANIMATIONS [5]   = "DAN_Loop_A";
	DANCE_ANIMATIONS [6]   = "DAN_Right_A";
	DANCE_ANIMATIONS [7]   = "DAN_Up_A";
	DANCE_ANIMATIONS [8]   = "dnce_M_a";
	DANCE_ANIMATIONS [9]   = "dnce_M_b";
	DANCE_ANIMATIONS [10]   = "dnce_M_c";
	DANCE_ANIMATIONS [11]   = "dnce_M_d";
	DANCE_ANIMATIONS [12]   = "dnce_M_e";
	// DEALER - 6
	DEALER_ANIMATIONS [0]   = "DEALER_DEAL";
	DEALER_ANIMATIONS [1]   = "DEALER_IDLE";
	DEALER_ANIMATIONS [2]   = "DEALER_IDLE_01";
	DEALER_ANIMATIONS [3]   = "DEALER_IDLE_02";
	DEALER_ANIMATIONS [4]   = "DEALER_IDLE_03";
	DEALER_ANIMATIONS [5]   = "DRUGS_BUY";
	DEALER_ANIMATIONS [6]   = "shop_pay";
	// DILDO - 8
	DILDO_ANIMATIONS [0]   = "DILDO_1";
	DILDO_ANIMATIONS [1]   = "DILDO_2";
	DILDO_ANIMATIONS [2]   = "DILDO_3";
	DILDO_ANIMATIONS [3]   = "DILDO_block";
	DILDO_ANIMATIONS [4]   = "DILDO_G";
	DILDO_ANIMATIONS [5]   = "DILDO_Hit_1";
	DILDO_ANIMATIONS [6]   = "DILDO_Hit_2";
	DILDO_ANIMATIONS [7]   = "DILDO_Hit_3";
	DILDO_ANIMATIONS [8]   = "DILDO_IDLE";
	// DODGE - 3
	DODGE_ANIMATIONS [0]   = "Cover_Dive_01";
	DODGE_ANIMATIONS [1]   = "Cover_Dive_02";
	DODGE_ANIMATIONS [2]   = "Crushed";
	DODGE_ANIMATIONS [3]   = "Crush_Jump";
	// DOZER - 9
	DOZER_ANIMATIONS [0]   = "DOZER_Align_LHS";
	DOZER_ANIMATIONS [1]   = "DOZER_Align_RHS";
	DOZER_ANIMATIONS [2]   = "DOZER_getin_LHS";
	DOZER_ANIMATIONS [3]   = "DOZER_getin_RHS";
	DOZER_ANIMATIONS [4]   = "DOZER_getout_LHS";
	DOZER_ANIMATIONS [5]   = "DOZER_getout_RHS";
	DOZER_ANIMATIONS [6]   = "DOZER_Jacked_LHS";
	DOZER_ANIMATIONS [7]   = "DOZER_Jacked_RHS";
	DOZER_ANIMATIONS [8]   = "DOZER_pullout_LHS";
	DOZER_ANIMATIONS [9]   = "DOZER_pullout_RHS";
	// DRIVE - 7
	DRIVE_ANIMATIONS [0]   = "Gang_DrivebyLHS";
	DRIVE_ANIMATIONS [1]   = "Gang_DrivebyLHS_Bwd";
	DRIVE_ANIMATIONS [2]   = "Gang_DrivebyLHS_Fwd";
	DRIVE_ANIMATIONS [3]   = "Gang_DrivebyRHS";
	DRIVE_ANIMATIONS [4]   = "Gang_DrivebyRHS_Bwd";
	DRIVE_ANIMATIONS [5]   = "Gang_DrivebyRHS_Fwd";
	DRIVE_ANIMATIONS [6]   = "Gang_DrivebyTop_LHS";
	DRIVE_ANIMATIONS [7]   = "Gang_DrivebyTop_RHS";
	// FAT - 17
	FAT_ANIMATIONS [0]   = "FatIdle";
	FAT_ANIMATIONS [1]   = "FatIdle_armed";
	FAT_ANIMATIONS [2]   = "FatIdle_Csaw";
	FAT_ANIMATIONS [3]   = "FatIdle_Rocket";
	FAT_ANIMATIONS [4]   = "FatRun";
	FAT_ANIMATIONS [5]   = "FatRun_armed";
	FAT_ANIMATIONS [6]   = "FatRun_Csaw";
	FAT_ANIMATIONS [7]   = "FatRun_Rocket";
	FAT_ANIMATIONS [8]   = "FatSprint";
	FAT_ANIMATIONS [9]   = "FatWalk";
	FAT_ANIMATIONS [10]   = "FatWalkstart";
	FAT_ANIMATIONS [11]   = "FatWalkstart_Csaw";
	FAT_ANIMATIONS [12]   = "FatWalkSt_armed";
	FAT_ANIMATIONS [13]   = "FatWalkSt_Rocket";
	FAT_ANIMATIONS [14]   = "FatWalk_armed";
	FAT_ANIMATIONS [15]   = "FatWalk_Csaw";
	FAT_ANIMATIONS [16]   = "FatWalk_Rocket";
	FAT_ANIMATIONS [17]   = "IDLE_tired";
	// FIGHTB - 9
	FIGHTB_ANIMATIONS [0]   = "FightB_1";
	FIGHTB_ANIMATIONS [1]   = "FightB_2";
	FIGHTB_ANIMATIONS [2]   = "FightB_3";
	FIGHTB_ANIMATIONS [3]   = "FightB_block";
	FIGHTB_ANIMATIONS [4]   = "FightB_G";
	FIGHTB_ANIMATIONS [5]   = "FightB_IDLE";
	FIGHTB_ANIMATIONS [6]   = "FightB_M";
	FIGHTB_ANIMATIONS [7]   = "HitB_1";
	FIGHTB_ANIMATIONS [8]   = "HitB_2";
	FIGHTB_ANIMATIONS [9]   = "HitB_3";
	// FIGHTC - 11
	FIGHTC_ANIMATIONS [0]   = "FightC_1";
	FIGHTC_ANIMATIONS [1]   = "FightC_2";
	FIGHTC_ANIMATIONS [2]   = "FightC_3";
	FIGHTC_ANIMATIONS [3]   = "FightC_block";
	FIGHTC_ANIMATIONS [4]   = "FightC_blocking";
	FIGHTC_ANIMATIONS [5]   = "FightC_G";
	FIGHTC_ANIMATIONS [6]   = "FightC_IDLE";
	FIGHTC_ANIMATIONS [7]   = "FightC_M";
	FIGHTC_ANIMATIONS [8]   = "FightC_Spar";
	FIGHTC_ANIMATIONS [9]   = "HitC_1";
	FIGHTC_ANIMATIONS [10]   = "HitC_2";
	FIGHTC_ANIMATIONS [11]   = "HitC_3";
	// FIGHTD - 9
	FIGHTD_ANIMATIONS [0]   = "FightD_1";
	FIGHTD_ANIMATIONS [1]   = "FightD_2";
	FIGHTD_ANIMATIONS [2]   = "FightD_3";
	FIGHTD_ANIMATIONS [3]   = "FightD_block";
	FIGHTD_ANIMATIONS [4]   = "FightD_G";
	FIGHTD_ANIMATIONS [5]   = "FightD_IDLE";
	FIGHTD_ANIMATIONS [6]   = "FightD_M";
	FIGHTD_ANIMATIONS [7]   = "HitD_1";
	FIGHTD_ANIMATIONS [8]   = "HitD_2";
	FIGHTD_ANIMATIONS [9]   = "HitD_3";
	// FIGHTE - 3
	FIGHTE_ANIMATIONS [0]   = "FightKick";
	FIGHTE_ANIMATIONS [1]   = "FightKick_B";
	FIGHTE_ANIMATIONS [2]   = "Hit_fightkick";
	FIGHTE_ANIMATIONS [3]   = "Hit_fightkick_B";
	// FINALE - 15
	FINALE_ANIMATIONS [0]   = "FIN_Climb_In";
	FINALE_ANIMATIONS [1]   = "FIN_Cop1_ClimbOut2";
	FINALE_ANIMATIONS [2]   = "FIN_Cop1_Loop";
	FINALE_ANIMATIONS [3]   = "FIN_Cop1_Stomp";
	FINALE_ANIMATIONS [4]   = "FIN_Hang_L";
	FINALE_ANIMATIONS [5]   = "FIN_Hang_Loop";
	FINALE_ANIMATIONS [6]   = "FIN_Hang_R";
	FINALE_ANIMATIONS [7]   = "FIN_Hang_Slip";
	FINALE_ANIMATIONS [8]   = "FIN_Jump_On";
	FINALE_ANIMATIONS [9]   = "FIN_Land_Car";
	FINALE_ANIMATIONS [10]   = "FIN_Land_Die";
	FINALE_ANIMATIONS [11]   = "FIN_LegsUp";
	FINALE_ANIMATIONS [12]   = "FIN_LegsUp_L";
	FINALE_ANIMATIONS [13]   = "FIN_LegsUp_Loop";
	FINALE_ANIMATIONS [14]   = "FIN_LegsUp_R";
	FINALE_ANIMATIONS [15]   = "FIN_Let_Go";
	// FINALE2 - 7
	FINALE2_ANIMATIONS [0]   = "FIN_Cop1_ClimbOut";
	FINALE2_ANIMATIONS [1]   = "FIN_Cop1_Fall";
	FINALE2_ANIMATIONS [2]   = "FIN_Cop1_Loop";
	FINALE2_ANIMATIONS [3]   = "FIN_Cop1_Shot";
	FINALE2_ANIMATIONS [4]   = "FIN_Cop1_Swing";
	FINALE2_ANIMATIONS [5]   = "FIN_Cop2_ClimbOut";
	FINALE2_ANIMATIONS [6]   = "FIN_Switch_P";
	FINALE2_ANIMATIONS [7]   = "FIN_Switch_S";
	// FLAME - 0
	FLAME_ANIMATIONS [0]   = "FLAME_fire";
	// FLOWERS - 2
	FLOWERS_ANIMATIONS [0]   = "Flower_attack";
	FLOWERS_ANIMATIONS [1]   = "Flower_attack_M";
	FLOWERS_ANIMATIONS [2]   = "Flower_Hit";
	// FOOD - 32
	FOOD_ANIMATIONS [0]   = "EAT_Burger";
	FOOD_ANIMATIONS [1]   = "EAT_Chicken";
	FOOD_ANIMATIONS [2]   = "EAT_Pizza";
	FOOD_ANIMATIONS [3]   = "EAT_Vomit_P";
	FOOD_ANIMATIONS [4]   = "EAT_Vomit_SK";
	FOOD_ANIMATIONS [5]   = "FF_Dam_Bkw";
	FOOD_ANIMATIONS [6]   = "FF_Dam_Fwd";
	FOOD_ANIMATIONS [7]   = "FF_Dam_Left";
	FOOD_ANIMATIONS [8]   = "FF_Dam_Right";
	FOOD_ANIMATIONS [9]   = "FF_Die_Bkw";
	FOOD_ANIMATIONS [10]   = "FF_Die_Fwd";
	FOOD_ANIMATIONS [11]   = "FF_Die_Left";
	FOOD_ANIMATIONS [12]   = "FF_Die_Right";
	FOOD_ANIMATIONS [13]   = "FF_Sit_Eat1";
	FOOD_ANIMATIONS [14]   = "FF_Sit_Eat2";
	FOOD_ANIMATIONS [15]   = "FF_Sit_Eat3";
	FOOD_ANIMATIONS [16]   = "FF_Sit_In";
	FOOD_ANIMATIONS [17]   = "FF_Sit_In_L";
	FOOD_ANIMATIONS [18]   = "FF_Sit_In_R";
	FOOD_ANIMATIONS [19]   = "FF_Sit_Look";
	FOOD_ANIMATIONS [20]   = "FF_Sit_Loop";
	FOOD_ANIMATIONS [21]   = "FF_Sit_Out_180";
	FOOD_ANIMATIONS [22]   = "FF_Sit_Out_L_180";
	FOOD_ANIMATIONS [23]   = "FF_Sit_Out_R_180";
	FOOD_ANIMATIONS [24]   = "SHP_Thank";
	FOOD_ANIMATIONS [25]   = "SHP_Tray_In";
	FOOD_ANIMATIONS [26]   = "SHP_Tray_Lift";
	FOOD_ANIMATIONS [27]   = "SHP_Tray_Lift_In";
	FOOD_ANIMATIONS [28]   = "SHP_Tray_Lift_Loop";
	FOOD_ANIMATIONS [29]   = "SHP_Tray_Lift_Out";
	FOOD_ANIMATIONS [30]   = "SHP_Tray_Out";
	FOOD_ANIMATIONS [31]   = "SHP_Tray_Pose";
	FOOD_ANIMATIONS [32]   = "SHP_Tray_Return";
	// GYMA - 8
	GYMA_ANIMATIONS [0]   = "gym_barbell";
	GYMA_ANIMATIONS [1]   = "gym_free_A";
	GYMA_ANIMATIONS [2]   = "gym_free_B";
	GYMA_ANIMATIONS [3]   = "gym_free_celebrate";
	GYMA_ANIMATIONS [4]   = "gym_free_down";
	GYMA_ANIMATIONS [5]   = "gym_free_loop";
	GYMA_ANIMATIONS [6]   = "gym_free_pickup";
	GYMA_ANIMATIONS [7]   = "gym_free_putdown";
	GYMA_ANIMATIONS [8]   = "gym_free_up_smooth";
	// GANGS - 32
	GANGS_ANIMATIONS [0]   = "DEALER_DEAL";
	GANGS_ANIMATIONS [1]   = "DEALER_IDLE";
	GANGS_ANIMATIONS [2]   = "drnkbr_prtl";
	GANGS_ANIMATIONS [3]   = "drnkbr_prtl_F";
	GANGS_ANIMATIONS [4]   = "DRUGS_BUY";
	GANGS_ANIMATIONS [5]   = "hndshkaa";
	GANGS_ANIMATIONS [6]   = "hndshkba";
	GANGS_ANIMATIONS [7]   = "hndshkca";
	GANGS_ANIMATIONS [8]   = "hndshkcb";
	GANGS_ANIMATIONS [9]   = "hndshkda";
	GANGS_ANIMATIONS [10]   = "hndshkea";
	GANGS_ANIMATIONS [11]   = "hndshkfa";
	GANGS_ANIMATIONS [12]   = "hndshkfa_swt";
	GANGS_ANIMATIONS [13]   = "Invite_No";
	GANGS_ANIMATIONS [14]   = "Invite_Yes";
	GANGS_ANIMATIONS [15]   = "leanIDLE";
	GANGS_ANIMATIONS [16]   = "leanIN";
	GANGS_ANIMATIONS [17]   = "leanOUT";
	GANGS_ANIMATIONS [18]   = "prtial_gngtlkA";
	GANGS_ANIMATIONS [19]   = "prtial_gngtlkB";
	GANGS_ANIMATIONS [20]   = "prtial_gngtlkC";
	GANGS_ANIMATIONS [21]   = "prtial_gngtlkD";
	GANGS_ANIMATIONS [22]   = "prtial_gngtlkE";
	GANGS_ANIMATIONS [23]   = "prtial_gngtlkF";
	GANGS_ANIMATIONS [24]   = "prtial_gngtlkG";
	GANGS_ANIMATIONS [25]   = "prtial_gngtlkH";
	GANGS_ANIMATIONS [26]   = "prtial_hndshk_01";
	GANGS_ANIMATIONS [27]   = "prtial_hndshk_biz_01";
	GANGS_ANIMATIONS [28]   = "shake_cara";
	GANGS_ANIMATIONS [29]   = "shake_carK";
	GANGS_ANIMATIONS [30]   = "shake_carSH";
	GANGS_ANIMATIONS [31]   = "smkcig_prtl";
	GANGS_ANIMATIONS [32]   = "smkcig_prtl_F";
	// GHANDS - 19
	GHANDS_ANIMATIONS [0]   = "gsign1";
	GHANDS_ANIMATIONS [1]   = "gsign1LH";
	GHANDS_ANIMATIONS [2]   = "gsign2";
	GHANDS_ANIMATIONS [3]   = "gsign2LH";
	GHANDS_ANIMATIONS [4]   = "gsign3";
	GHANDS_ANIMATIONS [5]   = "gsign3LH";
	GHANDS_ANIMATIONS [6]   = "gsign4";
	GHANDS_ANIMATIONS [7]   = "gsign4LH";
	GHANDS_ANIMATIONS [8]   = "gsign5";
	GHANDS_ANIMATIONS [9]   = "gsign5LH";
	GHANDS_ANIMATIONS [10]   = "LHGsign1";
	GHANDS_ANIMATIONS [11]   = "LHGsign2";
	GHANDS_ANIMATIONS [12]   = "LHGsign3";
	GHANDS_ANIMATIONS [13]   = "LHGsign4";
	GHANDS_ANIMATIONS [14]   = "LHGsign5";
	GHANDS_ANIMATIONS [15]   = "RHGsign1";
	GHANDS_ANIMATIONS [16]   = "RHGsign2";
	GHANDS_ANIMATIONS [17]   = "RHGsign3";
	GHANDS_ANIMATIONS [18]   = "RHGsign4";
	GHANDS_ANIMATIONS [19]   = "RHGsign5";
	// GHETTO - 6
	GHETTO_ANIMATIONS [0]   = "GDB_Car2_PLY";
	GHETTO_ANIMATIONS [1]   = "GDB_Car2_SMO";
	GHETTO_ANIMATIONS [2]   = "GDB_Car2_SWE";
	GHETTO_ANIMATIONS [3]   = "GDB_Car_PLY";
	GHETTO_ANIMATIONS [4]   = "GDB_Car_RYD";
	GHETTO_ANIMATIONS [5]   = "GDB_Car_SMO";
	GHETTO_ANIMATIONS [6]   = "GDB_Car_SWE";
	// GOGGLES - 0
	GOGGLES_ANIMATIONS [0]   = "goggles_put_on";
	// GRAFFITI - 1
	GRAFFITI_ANIMATIONS [0]   = "graffiti_Chkout";
	GRAFFITI_ANIMATIONS [1]   = "spraycan_fire";
	// GRAVE - 2
	GRAVE_ANIMATIONS [0]   = "mrnF_loop";
	GRAVE_ANIMATIONS [1]   = "mrnM_loop";
	GRAVE_ANIMATIONS [2]   = "prst_loopa";
	// GRENADE - 2
	GRENADE_ANIMATIONS [0]   = "WEAPON_start_throw";
	GRENADE_ANIMATIONS [1]   = "WEAPON_throw";
	GRENADE_ANIMATIONS [2]   = "WEAPON_throwu";
	// GYMB - 23
	GYMB_ANIMATIONS [0]   = "GYMshadowbox";
	GYMB_ANIMATIONS [1]   = "gym_bike_celebrate";
	GYMB_ANIMATIONS [2]   = "gym_bike_fast";
	GYMB_ANIMATIONS [3]   = "gym_bike_faster";
	GYMB_ANIMATIONS [4]   = "gym_bike_getoff";
	GYMB_ANIMATIONS [5]   = "gym_bike_geton";
	GYMB_ANIMATIONS [6]   = "gym_bike_pedal";
	GYMB_ANIMATIONS [7]   = "gym_bike_slow";
	GYMB_ANIMATIONS [8]   = "gym_bike_still";
	GYMB_ANIMATIONS [9]   = "gym_jog_falloff";
	GYMB_ANIMATIONS [10]   = "gym_shadowbox";
	GYMB_ANIMATIONS [11]   = "gym_tread_celebrate";
	GYMB_ANIMATIONS [12]   = "gym_tread_falloff";
	GYMB_ANIMATIONS [13]   = "gym_tread_getoff";
	GYMB_ANIMATIONS [14]   = "gym_tread_geton";
	GYMB_ANIMATIONS [15]   = "gym_tread_jog";
	GYMB_ANIMATIONS [16]   = "gym_tread_sprint";
	GYMB_ANIMATIONS [17]   = "gym_tread_tired";
	GYMB_ANIMATIONS [18]   = "gym_tread_walk";
	GYMB_ANIMATIONS [19]   = "gym_walk_falloff";
	GYMB_ANIMATIONS [20]   = "Pedals_fast";
	GYMB_ANIMATIONS [21]   = "Pedals_med";
	GYMB_ANIMATIONS [22]   = "Pedals_slow";
	GYMB_ANIMATIONS [23]   = "Pedals_still";
	// HAIR - 12
	HAIR_ANIMATIONS [0]   = "BRB_Beard_01";
	HAIR_ANIMATIONS [1]   = "BRB_Buy";
	HAIR_ANIMATIONS [2]   = "BRB_Cut";
	HAIR_ANIMATIONS [3]   = "BRB_Cut_In";
	HAIR_ANIMATIONS [4]   = "BRB_Cut_Out";
	HAIR_ANIMATIONS [5]   = "BRB_Hair_01";
	HAIR_ANIMATIONS [6]   = "BRB_Hair_02";
	HAIR_ANIMATIONS [7]   = "BRB_In";
	HAIR_ANIMATIONS [8]   = "BRB_Loop";
	HAIR_ANIMATIONS [9]   = "BRB_Out";
	HAIR_ANIMATIONS [10]   = "BRB_Sit_In";
	HAIR_ANIMATIONS [11]   = "BRB_Sit_Loop";
	HAIR_ANIMATIONS [12]   = "BRB_Sit_Out";
	// HEIST - 9
	HEIST_ANIMATIONS [0]   = "CAS_G2_GasKO";
	HEIST_ANIMATIONS [1]   = "swt_wllpk_L";
	HEIST_ANIMATIONS [2]   = "swt_wllpk_L_back";
	HEIST_ANIMATIONS [3]   = "swt_wllpk_R";
	HEIST_ANIMATIONS [4]   = "swt_wllpk_R_back";
	HEIST_ANIMATIONS [5]   = "swt_wllshoot_in_L";
	HEIST_ANIMATIONS [6]   = "swt_wllshoot_in_R";
	HEIST_ANIMATIONS [7]   = "swt_wllshoot_out_L";
	HEIST_ANIMATIONS [8]   = "swt_wllshoot_out_R";
	HEIST_ANIMATIONS [9]   = "Use_SwipeCard";
	// HOUSE - 9
	HOUSE_ANIMATIONS [0]   = "BED_In_L";
	HOUSE_ANIMATIONS [1]   = "BED_In_R";
	HOUSE_ANIMATIONS [2]   = "BED_Loop_L";
	HOUSE_ANIMATIONS [3]   = "BED_Loop_R";
	HOUSE_ANIMATIONS [4]   = "BED_Out_L";
	HOUSE_ANIMATIONS [5]   = "BED_Out_R";
	HOUSE_ANIMATIONS [6]   = "LOU_In";
	HOUSE_ANIMATIONS [7]   = "LOU_Loop";
	HOUSE_ANIMATIONS [8]   = "LOU_Out";
	HOUSE_ANIMATIONS [9]   = "wash_up";
	// OFFICE - 9
	OFFICE_ANIMATIONS [0]   = "FF_Dam_Fwd";
	OFFICE_ANIMATIONS [1]   = "OFF_Sit_2Idle_180";
	OFFICE_ANIMATIONS [2]   = "OFF_Sit_Bored_Loop";
	OFFICE_ANIMATIONS [3]   = "OFF_Sit_Crash";
	OFFICE_ANIMATIONS [4]   = "OFF_Sit_Drink";
	OFFICE_ANIMATIONS [5]   = "OFF_Sit_Idle_Loop";
	OFFICE_ANIMATIONS [6]   = "OFF_Sit_In";
	OFFICE_ANIMATIONS [7]   = "OFF_Sit_Read";
	OFFICE_ANIMATIONS [8]   = "OFF_Sit_Type_Loop";
	OFFICE_ANIMATIONS [9]   = "OFF_Sit_Watch";
	// INTSHOP - 7
	INTSHOP_ANIMATIONS [0]   = "shop_cashier";
	INTSHOP_ANIMATIONS [1]   = "shop_in";
	INTSHOP_ANIMATIONS [2]   = "shop_lookA";
	INTSHOP_ANIMATIONS [3]   = "shop_lookB";
	INTSHOP_ANIMATIONS [4]   = "shop_loop";
	INTSHOP_ANIMATIONS [5]   = "shop_out";
	INTSHOP_ANIMATIONS [6]   = "shop_pay";
	INTSHOP_ANIMATIONS [7]   = "shop_shelf";
	// BUISNESS - 3
	BUISNESS_ANIMATIONS [0]   = "girl_01";
	BUISNESS_ANIMATIONS [1]   = "girl_02";
	BUISNESS_ANIMATIONS [2]   = "player_01";
	BUISNESS_ANIMATIONS [3]   = "smoke_01";
	// KART - 3
	KART_ANIMATIONS [0]   = "KART_getin_LHS";
	KART_ANIMATIONS [1]   = "KART_getin_RHS";
	KART_ANIMATIONS [2]   = "KART_getout_LHS";
	KART_ANIMATIONS [3]   = "KART_getout_RHS";
	// KISSING - 14
	KISSING_ANIMATIONS [0]   = "BD_GF_Wave";
	KISSING_ANIMATIONS [1]   = "gfwave2";
	KISSING_ANIMATIONS [2]   = "GF_CarArgue_01";
	KISSING_ANIMATIONS [3]   = "GF_CarArgue_02";
	KISSING_ANIMATIONS [4]   = "GF_CarSpot";
	KISSING_ANIMATIONS [5]   = "GF_StreetArgue_01";
	KISSING_ANIMATIONS [6]   = "GF_StreetArgue_02";
	KISSING_ANIMATIONS [7]   = "gift_get";
	KISSING_ANIMATIONS [8]   = "gift_give";
	KISSING_ANIMATIONS [9]   = "Grlfrd_Kiss_01";
	KISSING_ANIMATIONS [10]   = "Grlfrd_Kiss_02";
	KISSING_ANIMATIONS [11]   = "Grlfrd_Kiss_03";
	KISSING_ANIMATIONS [12]   = "Playa_Kiss_01";
	KISSING_ANIMATIONS [13]   = "Playa_Kiss_02";
	KISSING_ANIMATIONS [14]   = "Playa_Kiss_03";
	// KNIFE - 15
	KNIFE_ANIMATIONS [0]   = "KILL_Knife_Ped_Damage";
	KNIFE_ANIMATIONS [1]   = "KILL_Knife_Ped_Die";
	KNIFE_ANIMATIONS [2]   = "KILL_Knife_Player";
	KNIFE_ANIMATIONS [3]   = "KILL_Partial";
	KNIFE_ANIMATIONS [4]   = "knife_1";
	KNIFE_ANIMATIONS [5]   = "knife_2";
	KNIFE_ANIMATIONS [6]   = "knife_3";
	KNIFE_ANIMATIONS [7]   = "Knife_4";
	KNIFE_ANIMATIONS [8]   = "knife_block";
	KNIFE_ANIMATIONS [9]   = "Knife_G";
	KNIFE_ANIMATIONS [10]   = "knife_hit_1";
	KNIFE_ANIMATIONS [11]   = "knife_hit_2";
	KNIFE_ANIMATIONS [12]   = "knife_hit_3";
	KNIFE_ANIMATIONS [13]   = "knife_IDLE";
	KNIFE_ANIMATIONS [14]   = "knife_part";
	KNIFE_ANIMATIONS [15]   = "WEAPON_knifeidle";
	// LAPDAN - 1
	LAPDAN1_ANIMATIONS [0]   = "LAPDAN_D";
	LAPDAN1_ANIMATIONS [1]   = "LAPDAN_P";
	// LAPDAN - 2
	LAPDAN2_ANIMATIONS [0]   = "LAPDAN_D";
	LAPDAN2_ANIMATIONS [1]   = "LAPDAN_P";
	// LAPDAN - 3
	LAPDAN3_ANIMATIONS [0]   = "LAPDAN_D";
	LAPDAN3_ANIMATIONS [1]   = "LAPDAN_P";
	// LOWRIDER - 38
	LOWRIDER_ANIMATIONS [0]   = "F_smklean_loop";
	LOWRIDER_ANIMATIONS [1]   = "lrgirl_bdbnce";
	LOWRIDER_ANIMATIONS [2]   = "lrgirl_hair";
	LOWRIDER_ANIMATIONS [3]   = "lrgirl_hurry";
	LOWRIDER_ANIMATIONS [4]   = "lrgirl_idleloop";
	LOWRIDER_ANIMATIONS [5]   = "lrgirl_idle_to_l0";
	LOWRIDER_ANIMATIONS [6]   = "lrgirl_l0_bnce";
	LOWRIDER_ANIMATIONS [7]   = "lrgirl_l0_loop";
	LOWRIDER_ANIMATIONS [8]   = "lrgirl_l0_to_l1";
	LOWRIDER_ANIMATIONS [9]   = "lrgirl_l12_to_l0";
	LOWRIDER_ANIMATIONS [10]   = "lrgirl_l1_bnce";
	LOWRIDER_ANIMATIONS [11]   = "lrgirl_l1_loop";
	LOWRIDER_ANIMATIONS [12]   = "lrgirl_l1_to_l2";
	LOWRIDER_ANIMATIONS [13]   = "lrgirl_l2_bnce";
	LOWRIDER_ANIMATIONS [14]   = "lrgirl_l2_loop";
	LOWRIDER_ANIMATIONS [15]   = "lrgirl_l2_to_l3";
	LOWRIDER_ANIMATIONS [16]   = "lrgirl_l345_to_l1";
	LOWRIDER_ANIMATIONS [17]   = "lrgirl_l3_bnce";
	LOWRIDER_ANIMATIONS [18]   = "lrgirl_l3_loop";
	LOWRIDER_ANIMATIONS [19]   = "lrgirl_l3_to_l4";
	LOWRIDER_ANIMATIONS [20]   = "lrgirl_l4_bnce";
	LOWRIDER_ANIMATIONS [21]   = "lrgirl_l4_loop";
	LOWRIDER_ANIMATIONS [22]   = "lrgirl_l4_to_l5";
	LOWRIDER_ANIMATIONS [23]   = "lrgirl_l5_bnce";
	LOWRIDER_ANIMATIONS [24]   = "lrgirl_l5_loop";
	LOWRIDER_ANIMATIONS [25]   = "M_smklean_loop";
	LOWRIDER_ANIMATIONS [26]   = "M_smkstnd_loop";
	LOWRIDER_ANIMATIONS [27]   = "prtial_gngtlkB";
	LOWRIDER_ANIMATIONS [28]   = "prtial_gngtlkC";
	LOWRIDER_ANIMATIONS [29]   = "prtial_gngtlkD";
	LOWRIDER_ANIMATIONS [30]   = "prtial_gngtlkE";
	LOWRIDER_ANIMATIONS [31]   = "prtial_gngtlkF";
	LOWRIDER_ANIMATIONS [32]   = "prtial_gngtlkG";
	LOWRIDER_ANIMATIONS [33]   = "prtial_gngtlkH";
	LOWRIDER_ANIMATIONS [34]   = "RAP_A_Loop";
	LOWRIDER_ANIMATIONS [35]   = "RAP_B_Loop";
	LOWRIDER_ANIMATIONS [36]   = "RAP_C_Loop";
	LOWRIDER_ANIMATIONS [37]   = "Sit_relaxed";
	LOWRIDER_ANIMATIONS [38]   = "Tap_hand";
	// CHASE - 24
	CHASE_ANIMATIONS [0]   = "Carhit_Hangon";
	CHASE_ANIMATIONS [1]   = "Carhit_Tumble";
	CHASE_ANIMATIONS [2]   = "donutdrop";
	CHASE_ANIMATIONS [3]   = "Fen_Choppa_L1";
	CHASE_ANIMATIONS [4]   = "Fen_Choppa_L2";
	CHASE_ANIMATIONS [5]   = "Fen_Choppa_L3";
	CHASE_ANIMATIONS [6]   = "Fen_Choppa_R1";
	CHASE_ANIMATIONS [7]   = "Fen_Choppa_R2";
	CHASE_ANIMATIONS [8]   = "Fen_Choppa_R3";
	CHASE_ANIMATIONS [9]   = "Hangon_Stun_loop";
	CHASE_ANIMATIONS [10]   = "Hangon_Stun_Turn";
	CHASE_ANIMATIONS [11]   = "MD_BIKE_2_HANG";
	CHASE_ANIMATIONS [12]   = "MD_BIKE_Jmp_BL";
	CHASE_ANIMATIONS [13]   = "MD_BIKE_Jmp_F";
	CHASE_ANIMATIONS [14]   = "MD_BIKE_Lnd_BL";
	CHASE_ANIMATIONS [15]   = "MD_BIKE_Lnd_Die_BL";
	CHASE_ANIMATIONS [16]   = "MD_BIKE_Lnd_Die_F";
	CHASE_ANIMATIONS [17]   = "MD_BIKE_Lnd_F";
	CHASE_ANIMATIONS [18]   = "MD_BIKE_Lnd_Roll";
	CHASE_ANIMATIONS [19]   = "MD_BIKE_Lnd_Roll_F";
	CHASE_ANIMATIONS [20]   = "MD_BIKE_Punch";
	CHASE_ANIMATIONS [21]   = "MD_BIKE_Punch_F";
	CHASE_ANIMATIONS [22]   = "MD_BIKE_Shot_F";
	CHASE_ANIMATIONS [23]   = "MD_HANG_Lnd_Roll";
	CHASE_ANIMATIONS [24]   = "MD_HANG_Loop";
	// END - 7
	END_ANIMATIONS [0]   = "END_SC1_PLY";
	END_ANIMATIONS [1]   = "END_SC1_RYD";
	END_ANIMATIONS [2]   = "END_SC1_SMO";
	END_ANIMATIONS [3]   = "END_SC1_SWE";
	END_ANIMATIONS [4]   = "END_SC2_PLY";
	END_ANIMATIONS [5]   = "END_SC2_RYD";
	END_ANIMATIONS [6]   = "END_SC2_SMO";
	END_ANIMATIONS [7]   = "END_SC2_SWE";
	// MEDIC - 0
	MEDIC_ANIMATIONS [0]   = "CPR";
	// MISC - 40
	MISC_ANIMATIONS [0]   = "bitchslap";
	MISC_ANIMATIONS [1]   = "BMX_celebrate";
	MISC_ANIMATIONS [2]   = "BMX_comeon";
	MISC_ANIMATIONS [3]   = "bmx_idleloop_01";
	MISC_ANIMATIONS [4]   = "bmx_idleloop_02";
	MISC_ANIMATIONS [5]   = "bmx_talkleft_in";
	MISC_ANIMATIONS [6]   = "bmx_talkleft_loop";
	MISC_ANIMATIONS [7]   = "bmx_talkleft_out";
	MISC_ANIMATIONS [8]   = "bmx_talkright_in";
	MISC_ANIMATIONS [9]   = "bmx_talkright_loop";
	MISC_ANIMATIONS [10]   = "bmx_talkright_out";
	MISC_ANIMATIONS [11]   = "bng_wndw";
	MISC_ANIMATIONS [12]   = "bng_wndw_02";
	MISC_ANIMATIONS [13]   = "Case_pickup";
	MISC_ANIMATIONS [14]   = "door_jet";
	MISC_ANIMATIONS [15]   = "GRAB_L";
	MISC_ANIMATIONS [16]   = "GRAB_R";
	MISC_ANIMATIONS [17]   = "Hiker_Pose";
	MISC_ANIMATIONS [18]   = "Hiker_Pose_L";
	MISC_ANIMATIONS [19]   = "Idle_Chat_02";
	MISC_ANIMATIONS [20]   = "KAT_Throw_K";
	MISC_ANIMATIONS [21]   = "KAT_Throw_O";
	MISC_ANIMATIONS [22]   = "KAT_Throw_P";
	MISC_ANIMATIONS [23]   = "PASS_Rifle_O";
	MISC_ANIMATIONS [24]   = "PASS_Rifle_Ped";
	MISC_ANIMATIONS [25]   = "PASS_Rifle_Ply";
	MISC_ANIMATIONS [26]   = "pickup_box";
	MISC_ANIMATIONS [27]   = "Plane_door";
	MISC_ANIMATIONS [28]   = "Plane_exit";
	MISC_ANIMATIONS [29]   = "Plane_hijack";
	MISC_ANIMATIONS [30]   = "Plunger_01";
	MISC_ANIMATIONS [31]   = "Plyrlean_loop";
	MISC_ANIMATIONS [32]   = "plyr_shkhead";
	MISC_ANIMATIONS [33]   = "Run_Dive";
	MISC_ANIMATIONS [34]   = "Scratchballs_01";
	MISC_ANIMATIONS [35]   = "SEAT_LR";
	MISC_ANIMATIONS [36]   = "Seat_talk_01";
	MISC_ANIMATIONS [37]   = "Seat_talk_02";
	MISC_ANIMATIONS [38]   = "SEAT_watch";
	MISC_ANIMATIONS [39]   = "smalplane_door";
	MISC_ANIMATIONS [40]   = "smlplane_door";
	// MTB - 17
	MTB_ANIMATIONS [0]   = "MTB_back";
	MTB_ANIMATIONS [1]   = "MTB_bunnyhop";
	MTB_ANIMATIONS [2]   = "MTB_drivebyFT";
	MTB_ANIMATIONS [3]   = "MTB_driveby_LHS";
	MTB_ANIMATIONS [4]   = "MTB_driveby_RHS";
	MTB_ANIMATIONS [5]   = "MTB_fwd";
	MTB_ANIMATIONS [6]   = "MTB_getoffBACK";
	MTB_ANIMATIONS [7]   = "MTB_getoffLHS";
	MTB_ANIMATIONS [8]   = "MTB_getoffRHS";
	MTB_ANIMATIONS [9]   = "MTB_jumponL";
	MTB_ANIMATIONS [10]   = "MTB_jumponR";
	MTB_ANIMATIONS [11]   = "MTB_Left";
	MTB_ANIMATIONS [12]   = "MTB_pedal";
	MTB_ANIMATIONS [13]   = "MTB_pushes";
	MTB_ANIMATIONS [14]   = "MTB_Ride";
	MTB_ANIMATIONS [15]   = "MTB_Right";
	MTB_ANIMATIONS [16]   = "MTB_sprint";
	MTB_ANIMATIONS [17]   = "MTB_still";
/*	// MUSCULAR - 16
	MUSCULAR_ANIMATIONS [0]   = "MscleWalkst_armed";
	MUSCULAR_ANIMATIONS [1]   = "MscleWalkst_Csaw";
	MUSCULAR_ANIMATIONS [2]   = "Mscle_rckt_run";
	MUSCULAR_ANIMATIONS [3]   = "Mscle_rckt_walkst";
	MUSCULAR_ANIMATIONS [4]   = "Mscle_run_Csaw";
	MUSCULAR_ANIMATIONS [5]   = "MuscleIdle";
	MUSCULAR_ANIMATIONS [6]   = "MuscleIdle_armed";
	MUSCULAR_ANIMATIONS [7]   = "MuscleIdle_Csaw";
	MUSCULAR_ANIMATIONS [8]   = "MuscleIdle_rocket";
	MUSCULAR_ANIMATIONS [9]   = "MuscleRun";
	MUSCULAR_ANIMATIONS [10]   = "MuscleRun_armed";
	MUSCULAR_ANIMATIONS [11]   = "MuscleSprint";
	MUSCULAR_ANIMATIONS [12]   = "MuscleWalk";
	MUSCULAR_ANIMATIONS [13]   = "MuscleWalkstart";
	MUSCULAR_ANIMATIONS [14]   = "MuscleWalk_armed";
	MUSCULAR_ANIMATIONS [15]   = "Musclewalk_Csaw";
	MUSCULAR_ANIMATIONS [16]   = "Musclewalk_rocket";*/
/*	// NEVADA - 1
	NEVADA_ANIMATIONS [0]   = "NEVADA_getin";
	NEVADA_ANIMATIONS [1]   = "NEVADA_getout";*/
	// LOOKERS - 28
	LOOKERS_ANIMATIONS [0]   = "lkaround_in";
	LOOKERS_ANIMATIONS [1]   = "lkaround_loop";
	LOOKERS_ANIMATIONS [2]   = "lkaround_out";
	LOOKERS_ANIMATIONS [3]   = "lkup_in";
	LOOKERS_ANIMATIONS [4]   = "lkup_loop";
	LOOKERS_ANIMATIONS [5]   = "lkup_out";
	LOOKERS_ANIMATIONS [6]   = "lkup_point";
	LOOKERS_ANIMATIONS [7]   = "panic_cower";
	LOOKERS_ANIMATIONS [8]   = "panic_hide";
	LOOKERS_ANIMATIONS [9]   = "panic_in";
	LOOKERS_ANIMATIONS [10]   = "panic_loop";
	LOOKERS_ANIMATIONS [11]   = "panic_out";
	LOOKERS_ANIMATIONS [12]   = "panic_point";
	LOOKERS_ANIMATIONS [13]   = "panic_shout";
	LOOKERS_ANIMATIONS [14]   = "Pointup_in";
	LOOKERS_ANIMATIONS [15]   = "Pointup_loop";
	LOOKERS_ANIMATIONS [16]   = "Pointup_out";
	LOOKERS_ANIMATIONS [17]   = "Pointup_shout";
	LOOKERS_ANIMATIONS [18]   = "point_in";
	LOOKERS_ANIMATIONS [19]   = "point_loop";
	LOOKERS_ANIMATIONS [20]   = "point_out";
	LOOKERS_ANIMATIONS [21]   = "shout_01";
	LOOKERS_ANIMATIONS [22]   = "shout_02";
	LOOKERS_ANIMATIONS [23]   = "shout_in";
	LOOKERS_ANIMATIONS [24]   = "shout_loop";
	LOOKERS_ANIMATIONS [25]   = "shout_out";
	LOOKERS_ANIMATIONS [26]   = "wave_in";
	LOOKERS_ANIMATIONS [27]   = "wave_loop";
	LOOKERS_ANIMATIONS [28]   = "wave_out";
	// OTB - 10
	OTB_ANIMATIONS [0]   = "betslp_in";
	OTB_ANIMATIONS [1]   = "betslp_lkabt";
	OTB_ANIMATIONS [2]   = "betslp_loop";
	OTB_ANIMATIONS [3]   = "betslp_out";
	OTB_ANIMATIONS [4]   = "betslp_tnk";
	OTB_ANIMATIONS [5]   = "wtchrace_cmon";
	OTB_ANIMATIONS [6]   = "wtchrace_in";
	OTB_ANIMATIONS [7]   = "wtchrace_loop";
	OTB_ANIMATIONS [8]   = "wtchrace_lose";
	OTB_ANIMATIONS [9]   = "wtchrace_out";
	OTB_ANIMATIONS [10]   = "wtchrace_win";
	// PARA - 21
	PARA_ANIMATIONS [0]   = "FALL_skyDive";
	PARA_ANIMATIONS [1]   = "FALL_SkyDive_Accel";
	PARA_ANIMATIONS [2]   = "FALL_skyDive_DIE";
	PARA_ANIMATIONS [3]   = "FALL_SkyDive_L";
	PARA_ANIMATIONS [4]   = "FALL_SkyDive_R";
	PARA_ANIMATIONS [5]   = "PARA_decel";
	PARA_ANIMATIONS [6]   = "PARA_decel_O";
	PARA_ANIMATIONS [7]   = "PARA_float";
	PARA_ANIMATIONS [8]   = "PARA_float_O";
	PARA_ANIMATIONS [9]   = "PARA_Land";
	PARA_ANIMATIONS [10]   = "PARA_Land_O";
	PARA_ANIMATIONS [11]   = "PARA_Land_Water";
	PARA_ANIMATIONS [12]   = "PARA_Land_Water_O";
	PARA_ANIMATIONS [13]   = "PARA_open";
	PARA_ANIMATIONS [14]   = "PARA_open_O";
	PARA_ANIMATIONS [15]   = "PARA_Rip_Land_O";
	PARA_ANIMATIONS [16]   = "PARA_Rip_Loop_O";
	PARA_ANIMATIONS [17]   = "PARA_Rip_O";
	PARA_ANIMATIONS [18]   = "PARA_steerL";
	PARA_ANIMATIONS [19]   = "PARA_steerL_O";
	PARA_ANIMATIONS [20]   = "PARA_steerR";
	PARA_ANIMATIONS [21]   = "PARA_steerR_O";
	// PARK - 2
	PARK_ANIMATIONS [0]   = "Tai_Chi_in";
	PARK_ANIMATIONS [1]   = "Tai_Chi_Loop";
	PARK_ANIMATIONS [2]   = "Tai_Chi_Out";
	// PAUL - 11
	PAUL_ANIMATIONS [0]   = "Piss_in";
	PAUL_ANIMATIONS [1]   = "Piss_loop";
	PAUL_ANIMATIONS [2]   = "Piss_out";
	PAUL_ANIMATIONS [3]   = "PnM_Argue1_A";
	PAUL_ANIMATIONS [4]   = "PnM_Argue1_B";
	PAUL_ANIMATIONS [5]   = "PnM_Argue2_A";
	PAUL_ANIMATIONS [6]   = "PnM_Argue2_B";
	PAUL_ANIMATIONS [7]   = "PnM_Loop_A";
	PAUL_ANIMATIONS [8]   = "PnM_Loop_B";
	PAUL_ANIMATIONS [9]   = "wank_in";
	PAUL_ANIMATIONS [10]   = "wank_loop";
	PAUL_ANIMATIONS [11]   = "wank_out";
	// PLAYER - 3
	PLAYER_ANIMATIONS [0]   = "Plyr_DrivebyBwd";
	PLAYER_ANIMATIONS [1]   = "Plyr_DrivebyFwd";
	PLAYER_ANIMATIONS [2]   = "Plyr_DrivebyLHS";
	PLAYER_ANIMATIONS [3]   = "Plyr_DrivebyRHS";
	// PLAYID - 4
	PLAYID_ANIMATIONS [0]   = "shift";
	PLAYID_ANIMATIONS [1]   = "shldr";
	PLAYID_ANIMATIONS [2]   = "stretch";
	PLAYID_ANIMATIONS [3]   = "strleg";
	PLAYID_ANIMATIONS [4]   = "time";
	// POLICE - 9
	POLICE_ANIMATIONS [0]   = "CopTraf_Away";
	POLICE_ANIMATIONS [1]   = "CopTraf_Come";
	POLICE_ANIMATIONS [2]   = "CopTraf_Left";
	POLICE_ANIMATIONS [3]   = "CopTraf_Stop";
	POLICE_ANIMATIONS [4]   = "COP_getoutcar_LHS";
	POLICE_ANIMATIONS [5]   = "Cop_move_FWD";
	POLICE_ANIMATIONS [6]   = "crm_drgbst_01";
	POLICE_ANIMATIONS [7]   = "Door_Kick";
	POLICE_ANIMATIONS [8]   = "plc_drgbst_01";
	POLICE_ANIMATIONS [9]   = "plc_drgbst_02";
	// POOL - 20
	POOL_ANIMATIONS [0]   = "POOL_ChalkCue";
	POOL_ANIMATIONS [1]   = "POOL_Idle_Stance";
	POOL_ANIMATIONS [2]   = "POOL_Long_Shot";
	POOL_ANIMATIONS [3]   = "POOL_Long_Shot_O";
	POOL_ANIMATIONS [4]   = "POOL_Long_Start";
	POOL_ANIMATIONS [5]   = "POOL_Long_Start_O";
	POOL_ANIMATIONS [6]   = "POOL_Med_Shot";
	POOL_ANIMATIONS [7]   = "POOL_Med_Shot_O";
	POOL_ANIMATIONS [8]   = "POOL_Med_Start";
	POOL_ANIMATIONS [9]   = "POOL_Med_Start_O";
	POOL_ANIMATIONS [10]   = "POOL_Place_White";
	POOL_ANIMATIONS [11]   = "POOL_Short_Shot";
	POOL_ANIMATIONS [12]   = "POOL_Short_Shot_O";
	POOL_ANIMATIONS [13]   = "POOL_Short_Start";
	POOL_ANIMATIONS [14]   = "POOL_Short_Start_O";
	POOL_ANIMATIONS [15]   = "POOL_Walk";
	POOL_ANIMATIONS [16]   = "POOL_Walk_Start";
	POOL_ANIMATIONS [17]   = "POOL_XLong_Shot";
	POOL_ANIMATIONS [18]   = "POOL_XLong_Shot_O";
	POOL_ANIMATIONS [19]   = "POOL_XLong_Start";
	POOL_ANIMATIONS [20]   = "POOL_XLong_Start_O";
	// POOR - 1
	POOR_ANIMATIONS [0]   = "WINWASH_Start";
	POOR_ANIMATIONS [1]   = "WINWASH_Wash2Beg";
	// PYTHON - 4
	PYTHON_ANIMATIONS [0]   = "python_crouchfire";
	PYTHON_ANIMATIONS [1]   = "python_crouchreload";
	PYTHON_ANIMATIONS [2]   = "python_fire";
	PYTHON_ANIMATIONS [3]   = "python_fire_poor";
	PYTHON_ANIMATIONS [4]   = "python_reload ";
	// QUAD - 16
	QUAD_ANIMATIONS [0]   = "QUAD_back";
	QUAD_ANIMATIONS [1]   = "QUAD_driveby_FT";
	QUAD_ANIMATIONS [2]   = "QUAD_driveby_LHS";
	QUAD_ANIMATIONS [3]   = "QUAD_driveby_RHS";
	QUAD_ANIMATIONS [4]   = "QUAD_FWD";
	QUAD_ANIMATIONS [5]   = "QUAD_getoff_B";
	QUAD_ANIMATIONS [6]   = "QUAD_getoff_LHS";
	QUAD_ANIMATIONS [7]   = "QUAD_getoff_RHS";
	QUAD_ANIMATIONS [8]   = "QUAD_geton_LHS";
	QUAD_ANIMATIONS [9]   = "QUAD_geton_RHS";
	QUAD_ANIMATIONS [10]   = "QUAD_hit";
	QUAD_ANIMATIONS [11]   = "QUAD_kick";
	QUAD_ANIMATIONS [12]   = "QUAD_Left";
	QUAD_ANIMATIONS [13]   = "QUAD_passenger";
	QUAD_ANIMATIONS [14]   = "QUAD_reverse";
	QUAD_ANIMATIONS [15]   = "QUAD_ride";
	QUAD_ANIMATIONS [16]   = "QUAD_Right";
	// QUADD - 3
	QUADD_ANIMATIONS [0]   = "Pass_Driveby_BWD";
	QUADD_ANIMATIONS [1]   = "Pass_Driveby_FWD";
	QUADD_ANIMATIONS [2]   = "Pass_Driveby_LHS";
	QUADD_ANIMATIONS [3]   = "Pass_Driveby_RHS";
	// RAP - 7
	RAP_ANIMATIONS [0]   = "Laugh_01";
	RAP_ANIMATIONS [1]   = "RAP_A_IN";
	RAP_ANIMATIONS [2]   = "RAP_A_Loop";
	RAP_ANIMATIONS [3]   = "RAP_A_OUT";
	RAP_ANIMATIONS [4]   = "RAP_B_IN";
	RAP_ANIMATIONS [5]   = "RAP_B_Loop";
	RAP_ANIMATIONS [6]   = "RAP_B_OUT";
	RAP_ANIMATIONS [7]   = "RAP_C_Loop";
	// RIFLE - 4
	RIFLE_ANIMATIONS [0]   = "RIFLE_crouchfire";
	RIFLE_ANIMATIONS [1]   = "RIFLE_crouchload";
	RIFLE_ANIMATIONS [2]   = "RIFLE_fire";
	RIFLE_ANIMATIONS [3]   = "RIFLE_fire_poor";
	RIFLE_ANIMATIONS [4]   = "RIFLE_load";
	// RIOT - 6
	RIOT_ANIMATIONS [0]   = "RIOT_ANGRY";
	RIOT_ANIMATIONS [1]   = "RIOT_ANGRY_B";
	RIOT_ANIMATIONS [2]   = "RIOT_challenge";
	RIOT_ANIMATIONS [3]   = "RIOT_CHANT";
	RIOT_ANIMATIONS [4]   = "RIOT_FUKU";
	RIOT_ANIMATIONS [5]   = "RIOT_PUNCHES";
	RIOT_ANIMATIONS [6]   = "RIOT_shout";
	// ROB - 4
	ROB_ANIMATIONS [0]   = "CAT_Safe_End";
	ROB_ANIMATIONS [1]   = "CAT_Safe_Open";
	ROB_ANIMATIONS [2]   = "CAT_Safe_Open_O";
	ROB_ANIMATIONS [3]   = "CAT_Safe_Rob";
	ROB_ANIMATIONS [4]   = "SHP_HandsUp_Scr";
	// ROCKET - 4
	ROCKET_ANIMATIONS [0]   = "idle_rocket";
	ROCKET_ANIMATIONS [1]   = "RocketFire";
	ROCKET_ANIMATIONS [2]   = "run_rocket";
	ROCKET_ANIMATIONS [3]   = "walk_rocket";
	ROCKET_ANIMATIONS [4]   = "WALK_start_rocket";
	// RUSTLER - 4
	RUSTLER_ANIMATIONS [0]   = "Plane_align_LHS";
	RUSTLER_ANIMATIONS [1]   = "Plane_close";
	RUSTLER_ANIMATIONS [2]   = "Plane_getin";
	RUSTLER_ANIMATIONS [3]   = "Plane_getout";
	RUSTLER_ANIMATIONS [4]   = "Plane_open";
	// RYDER - 15
	RYDER_ANIMATIONS [0]   = "RYD_Beckon_01";
	RYDER_ANIMATIONS [1]   = "RYD_Beckon_02";
	RYDER_ANIMATIONS [2]   = "RYD_Beckon_03";
	RYDER_ANIMATIONS [3]   = "RYD_Die_PT1";
	RYDER_ANIMATIONS [4]   = "RYD_Die_PT2";
	RYDER_ANIMATIONS [5]   = "Van_Crate_L";
	RYDER_ANIMATIONS [6]   = "Van_Crate_R";
	RYDER_ANIMATIONS [7]   = "Van_Fall_L";
	RYDER_ANIMATIONS [8]   = "Van_Fall_R";
	RYDER_ANIMATIONS [9]   = "Van_Lean_L";
	RYDER_ANIMATIONS [10]   = "Van_Lean_R";
	RYDER_ANIMATIONS [11]   = "VAN_PickUp_E";
	RYDER_ANIMATIONS [12]   = "VAN_PickUp_S";
	RYDER_ANIMATIONS [13]   = "Van_Stand";
	RYDER_ANIMATIONS [14]   = "Van_Stand_Crate";
	RYDER_ANIMATIONS [15]   = "Van_Throw";
	// SCRAT - 11
	SCRAT_ANIMATIONS [0]   = "scdldlp";
	SCRAT_ANIMATIONS [1]   = "scdlulp";
	SCRAT_ANIMATIONS [2]   = "scdrdlp";
	SCRAT_ANIMATIONS [3]   = "scdrulp";
	SCRAT_ANIMATIONS [4]   = "sclng_l";
	SCRAT_ANIMATIONS [5]   = "sclng_r";
	SCRAT_ANIMATIONS [6]   = "scmid_l";
	SCRAT_ANIMATIONS [7]   = "scmid_r";
	SCRAT_ANIMATIONS [8]   = "scshrtl";
	SCRAT_ANIMATIONS [9]   = "scshrtr";
	SCRAT_ANIMATIONS [10]   = "sc_ltor";
	SCRAT_ANIMATIONS [11]   = "sc_rtol";
	// SHAMAL - 4
	SHAMAL_ANIMATIONS [0]   = "SHAMAL_align";
	SHAMAL_ANIMATIONS [1]   = "SHAMAL_getin_LHS";
	SHAMAL_ANIMATIONS [2]   = "SHAMAL_getout_LHS";
	SHAMAL_ANIMATIONS [3]   = "SHAMAL_open";
	// SHOP - 24
	SHOP_ANIMATIONS [0]   = "ROB_2Idle";
	SHOP_ANIMATIONS [1]   = "ROB_Loop";
	SHOP_ANIMATIONS [2]   = "ROB_Loop_Threat";
	SHOP_ANIMATIONS [3]   = "ROB_Shifty";
	SHOP_ANIMATIONS [4]   = "ROB_StickUp_In";
	SHOP_ANIMATIONS [5]   = "SHP_Duck";
	SHOP_ANIMATIONS [6]   = "SHP_Duck_Aim";
	SHOP_ANIMATIONS [7]   = "SHP_Duck_Fire";
	SHOP_ANIMATIONS [8]   = "SHP_Gun_Aim";
	SHOP_ANIMATIONS [9]   = "SHP_Gun_Duck";
	SHOP_ANIMATIONS [10]   = "SHP_Gun_Fire";
	SHOP_ANIMATIONS [11]   = "SHP_Gun_Grab";
	SHOP_ANIMATIONS [12]   = "SHP_Gun_Threat";
	SHOP_ANIMATIONS [13]   = "SHP_HandsUp_Scr";
	SHOP_ANIMATIONS [14]   = "SHP_Jump_Glide";
	SHOP_ANIMATIONS [15]   = "SHP_Jump_Land";
	SHOP_ANIMATIONS [16]   = "SHP_Jump_Launch";
	SHOP_ANIMATIONS [17]   = "SHP_Rob_GiveCash";
	SHOP_ANIMATIONS [18]   = "SHP_Rob_HandsUp";
	SHOP_ANIMATIONS [19]   = "SHP_Rob_React";
	SHOP_ANIMATIONS [20]   = "SHP_Serve_End";
	SHOP_ANIMATIONS [21]   = "SHP_Serve_Idle";
	SHOP_ANIMATIONS [22]   = "SHP_Serve_Loop";
	SHOP_ANIMATIONS [23]   = "SHP_Serve_Start";
	SHOP_ANIMATIONS [24]   = "Smoke_RYD";
	// SHOTGUN - 2
	SHOTGUN_ANIMATIONS [0]   = "shotgun_crouchfire";
	SHOTGUN_ANIMATIONS [1]   = "shotgun_fire";
	SHOTGUN_ANIMATIONS [2]   = "shotgun_fire_poor";
	// SILENCED - 3
	SILENCED_ANIMATIONS [0]   = "CrouchReload";
	SILENCED_ANIMATIONS [1]   = "SilenceCrouchfire";
	SILENCED_ANIMATIONS [2]   = "Silence_fire";
	SILENCED_ANIMATIONS [3]   = "Silence_reload";
	// SKATE - 2
	SKATE_ANIMATIONS [0]   = "skate_idle";
	SKATE_ANIMATIONS [1]   = "skate_run";
	SKATE_ANIMATIONS [2]   = "skate_sprint";
	// SMOK - 7
	SMOK_ANIMATIONS [0]   = "F_smklean_loop";
	SMOK_ANIMATIONS [1]   = "M_smklean_loop";
	SMOK_ANIMATIONS [2]   = "M_smkstnd_loop";
	SMOK_ANIMATIONS [3]   = "M_smk_drag";
	SMOK_ANIMATIONS [4]   = "M_smk_in";
	SMOK_ANIMATIONS [5]   = "M_smk_loop";
	SMOK_ANIMATIONS [6]   = "M_smk_out";
	SMOK_ANIMATIONS [7]   = "M_smk_tap";
	// SNIPER - 0
	SNIPER_ANIMATIONS [0]   = "WEAPON_sniper";
	// SPRAY - 1
	SPRAY_ANIMATIONS [0]   = "spraycan_fire";
	SPRAY_ANIMATIONS [1]   = "spraycan_full";
	// STRIP - 19
	STRIP_ANIMATIONS [0]   = "PLY_CASH";
	STRIP_ANIMATIONS [1]   = "PUN_CASH";
	STRIP_ANIMATIONS [2]   = "PUN_HOLLER";
	STRIP_ANIMATIONS [3]   = "PUN_LOOP";
	STRIP_ANIMATIONS [4]   = "strip_A";
	STRIP_ANIMATIONS [5]   = "strip_B";
	STRIP_ANIMATIONS [6]   = "strip_C";
	STRIP_ANIMATIONS [7]   = "strip_D";
	STRIP_ANIMATIONS [8]   = "strip_E";
	STRIP_ANIMATIONS [9]   = "strip_F";
	STRIP_ANIMATIONS [10]   = "strip_G";
	STRIP_ANIMATIONS [11]   = "STR_A2B";
	STRIP_ANIMATIONS [12]   = "STR_B2A";
	STRIP_ANIMATIONS [13]   = "STR_B2C";
	STRIP_ANIMATIONS [14]   = "STR_C1";
	STRIP_ANIMATIONS [15]   = "STR_C2";
	STRIP_ANIMATIONS [16]   = "STR_C2B";
	STRIP_ANIMATIONS [17]   = "STR_Loop_A";
	STRIP_ANIMATIONS [18]   = "STR_Loop_B";
	STRIP_ANIMATIONS [19]   = "STR_Loop_C";
	// SUNBA - 17
	SUNBA_ANIMATIONS [0]   = "batherdown";
	SUNBA_ANIMATIONS [1]   = "batherup";
	SUNBA_ANIMATIONS [2]   = "Lay_Bac_in";
	SUNBA_ANIMATIONS [3]   = "Lay_Bac_out";
	SUNBA_ANIMATIONS [4]   = "ParkSit_M_IdleA";
	SUNBA_ANIMATIONS [5]   = "ParkSit_M_IdleB";
	SUNBA_ANIMATIONS [6]   = "ParkSit_M_IdleC";
	SUNBA_ANIMATIONS [7]   = "ParkSit_M_in";
	SUNBA_ANIMATIONS [8]   = "ParkSit_M_out";
	SUNBA_ANIMATIONS [9]   = "ParkSit_W_idleA";
	SUNBA_ANIMATIONS [10]   = "ParkSit_W_idleB";
	SUNBA_ANIMATIONS [11]   = "ParkSit_W_idleC";
	SUNBA_ANIMATIONS [12]   = "ParkSit_W_in";
	SUNBA_ANIMATIONS [13]   = "ParkSit_W_out";
	SUNBA_ANIMATIONS [14]   = "SBATHE_F_LieB2Sit";
	SUNBA_ANIMATIONS [15]   = "SBATHE_F_Out";
	SUNBA_ANIMATIONS [16]   = "SitnWait_in_W";
	SUNBA_ANIMATIONS [17]   = "SitnWait_out_W";
	// SWAT - 22
	SWAT_ANIMATIONS [0]   = "gnstwall_injurd";
	SWAT_ANIMATIONS [1]   = "JMP_Wall1m_180";
	SWAT_ANIMATIONS [2]   = "Rail_fall";
	SWAT_ANIMATIONS [3]   = "Rail_fall_crawl";
	SWAT_ANIMATIONS [4]   = "swt_breach_01";
	SWAT_ANIMATIONS [5]   = "swt_breach_02";
	SWAT_ANIMATIONS [6]   = "swt_breach_03";
	SWAT_ANIMATIONS [7]   = "swt_go";
	SWAT_ANIMATIONS [8]   = "swt_lkt";
	SWAT_ANIMATIONS [9]   = "swt_sty";
	SWAT_ANIMATIONS [10]   = "swt_vent_01";
	SWAT_ANIMATIONS [11]   = "swt_vent_02";
	SWAT_ANIMATIONS [12]   = "swt_vnt_sht_die";
	SWAT_ANIMATIONS [13]   = "swt_vnt_sht_in";
	SWAT_ANIMATIONS [14]   = "swt_vnt_sht_loop";
	SWAT_ANIMATIONS [15]   = "swt_wllpk_L";
	SWAT_ANIMATIONS [16]   = "swt_wllpk_L_back";
	SWAT_ANIMATIONS [17]   = "swt_wllpk_R";
	SWAT_ANIMATIONS [18]   = "swt_wllpk_R_back";
	SWAT_ANIMATIONS [19]   = "swt_wllshoot_in_L";
	SWAT_ANIMATIONS [20]   = "swt_wllshoot_in_R";
	SWAT_ANIMATIONS [21]   = "swt_wllshoot_out_L";
	SWAT_ANIMATIONS [22]   = "swt_wllshoot_out_R";
	// SWEET - 6
	SWEET_ANIMATIONS [0]   = "ho_ass_slapped";
	SWEET_ANIMATIONS [1]   = "LaFin_Player";
	SWEET_ANIMATIONS [2]   = "LaFin_Sweet";
	SWEET_ANIMATIONS [3]   = "plyr_hndshldr_01";
	SWEET_ANIMATIONS [4]   = "sweet_ass_slap";
	SWEET_ANIMATIONS [5]   = "sweet_hndshldr_01";
	SWEET_ANIMATIONS [6]   = "Sweet_injuredloop";
	// SWIM - 6
	SWIM_ANIMATIONS [0]   = "Swim_Breast";
	SWIM_ANIMATIONS [1]   = "SWIM_crawl";
	SWIM_ANIMATIONS [2]   = "Swim_Dive_Under";
	SWIM_ANIMATIONS [3]   = "Swim_Glide";
	SWIM_ANIMATIONS [4]   = "Swim_jumpout";
	SWIM_ANIMATIONS [5]   = "Swim_Tread";
	SWIM_ANIMATIONS [6]   = "Swim_Under";
	// SWORD - 9
	SWORD_ANIMATIONS [0]   = "sword_1";
	SWORD_ANIMATIONS [1]   = "sword_2";
	SWORD_ANIMATIONS [2]   = "sword_3";
	SWORD_ANIMATIONS [3]   = "sword_4";
	SWORD_ANIMATIONS [4]   = "sword_block";
	SWORD_ANIMATIONS [5]   = "Sword_Hit_1";
	SWORD_ANIMATIONS [6]   = "Sword_Hit_2";
	SWORD_ANIMATIONS [7]   = "Sword_Hit_3";
	SWORD_ANIMATIONS [8]   = "sword_IDLE";
	SWORD_ANIMATIONS [9]   = "sword_part";
	// TANK - 5
	TANK_ANIMATIONS [0]   = "TANK_align_LHS";
	TANK_ANIMATIONS [1]   = "TANK_close_LHS";
	TANK_ANIMATIONS [2]   = "TANK_doorlocked";
	TANK_ANIMATIONS [3]   = "TANK_getin_LHS";
	TANK_ANIMATIONS [4]   = "TANK_getout_LHS";
	TANK_ANIMATIONS [5]   = "TANK_open_LHS";
	// TATTOO - 56
	TATTOO_ANIMATIONS [0]   = "TAT_ArmL_In_O";
	TATTOO_ANIMATIONS [1]   = "TAT_ArmL_In_P";
	TATTOO_ANIMATIONS [2]   = "TAT_ArmL_In_T";
	TATTOO_ANIMATIONS [3]   = "TAT_ArmL_Out_O";
	TATTOO_ANIMATIONS [4]   = "TAT_ArmL_Out_P";
	TATTOO_ANIMATIONS [5]   = "TAT_ArmL_Out_T";
	TATTOO_ANIMATIONS [6]   = "TAT_ArmL_Pose_O";
	TATTOO_ANIMATIONS [7]   = "TAT_ArmL_Pose_P";
	TATTOO_ANIMATIONS [8]   = "TAT_ArmL_Pose_T";
	TATTOO_ANIMATIONS [9]   = "TAT_ArmR_In_O";
	TATTOO_ANIMATIONS [10]   = "TAT_ArmR_In_P";
	TATTOO_ANIMATIONS [11]   = "TAT_ArmR_In_T";
	TATTOO_ANIMATIONS [12]   = "TAT_ArmR_Out_O";
	TATTOO_ANIMATIONS [13]   = "TAT_ArmR_Out_P";
	TATTOO_ANIMATIONS [14]   = "TAT_ArmR_Out_T";
	TATTOO_ANIMATIONS [15]   = "TAT_ArmR_Pose_O";
	TATTOO_ANIMATIONS [16]   = "TAT_ArmR_Pose_P";
	TATTOO_ANIMATIONS [17]   = "TAT_ArmR_Pose_T";
	TATTOO_ANIMATIONS [18]   = "TAT_Back_In_O";
	TATTOO_ANIMATIONS [19]   = "TAT_Back_In_P";
	TATTOO_ANIMATIONS [20]   = "TAT_Back_In_T";
	TATTOO_ANIMATIONS [21]   = "TAT_Back_Out_O";
	TATTOO_ANIMATIONS [22]   = "TAT_Back_Out_P";
	TATTOO_ANIMATIONS [23]   = "TAT_Back_Out_T";
	TATTOO_ANIMATIONS [24]   = "TAT_Back_Pose_O";
	TATTOO_ANIMATIONS [25]   = "TAT_Back_Pose_P";
	TATTOO_ANIMATIONS [26]   = "TAT_Back_Pose_T";
	TATTOO_ANIMATIONS [27]   = "TAT_Back_Sit_In_P";
	TATTOO_ANIMATIONS [28]   = "TAT_Back_Sit_Loop_P";
	TATTOO_ANIMATIONS [29]   = "TAT_Back_Sit_Out_P";
	TATTOO_ANIMATIONS [30]   = "TAT_Bel_In_O";
	TATTOO_ANIMATIONS [31]   = "TAT_Bel_In_T";
	TATTOO_ANIMATIONS [32]   = "TAT_Bel_Out_O";
	TATTOO_ANIMATIONS [33]   = "TAT_Bel_Out_T";
	TATTOO_ANIMATIONS [34]   = "TAT_Bel_Pose_O";
	TATTOO_ANIMATIONS [35]   = "TAT_Bel_Pose_T";
	TATTOO_ANIMATIONS [36]   = "TAT_Che_In_O";
	TATTOO_ANIMATIONS [37]   = "TAT_Che_In_P";
	TATTOO_ANIMATIONS [38]   = "TAT_Che_In_T";
	TATTOO_ANIMATIONS [39]   = "TAT_Che_Out_O";
	TATTOO_ANIMATIONS [40]   = "TAT_Che_Out_P";
	TATTOO_ANIMATIONS [41]   = "TAT_Che_Out_T";
	TATTOO_ANIMATIONS [42]   = "TAT_Che_Pose_O";
	TATTOO_ANIMATIONS [43]   = "TAT_Che_Pose_P";
	TATTOO_ANIMATIONS [44]   = "TAT_Che_Pose_T";
	TATTOO_ANIMATIONS [45]   = "TAT_Drop_O";
	TATTOO_ANIMATIONS [46]   = "TAT_Idle_Loop_O";
	TATTOO_ANIMATIONS [47]   = "TAT_Idle_Loop_T";
	TATTOO_ANIMATIONS [48]   = "TAT_Sit_In_O";
	TATTOO_ANIMATIONS [49]   = "TAT_Sit_In_P";
	TATTOO_ANIMATIONS [50]   = "TAT_Sit_In_T";
	TATTOO_ANIMATIONS [51]   = "TAT_Sit_Loop_O";
	TATTOO_ANIMATIONS [52]   = "TAT_Sit_Loop_P";
	TATTOO_ANIMATIONS [53]   = "TAT_Sit_Loop_T";
	TATTOO_ANIMATIONS [54]   = "TAT_Sit_Out_O";
	TATTOO_ANIMATIONS [55]   = "TAT_Sit_Out_P";
	TATTOO_ANIMATIONS [56]   = "TAT_Sit_Out_T";
	// TEC - 3
	TEC_ANIMATIONS [0]   = "TEC_crouchfire";
	TEC_ANIMATIONS [1]   = "TEC_crouchreload";
	TEC_ANIMATIONS [2]   = "TEC_fire";
	TEC_ANIMATIONS [3]   = "TEC_reload";
	// TRAIN - 3
	TRAIN_ANIMATIONS [0]   = "tran_gtup";
	TRAIN_ANIMATIONS [1]   = "tran_hng";
	TRAIN_ANIMATIONS [2]   = "tran_ouch";
	TRAIN_ANIMATIONS [3]   = "tran_stmb";
	// TRUCK - 16
	TRUCK_ANIMATIONS [0]   = "TRUCK_ALIGN_LHS";
	TRUCK_ANIMATIONS [1]   = "TRUCK_ALIGN_RHS";
	TRUCK_ANIMATIONS [2]   = "TRUCK_closedoor_LHS";
	TRUCK_ANIMATIONS [3]   = "TRUCK_closedoor_RHS";
	TRUCK_ANIMATIONS [4]   = "TRUCK_close_LHS";
	TRUCK_ANIMATIONS [5]   = "TRUCK_close_RHS";
	TRUCK_ANIMATIONS [6]   = "TRUCK_getin_LHS";
	TRUCK_ANIMATIONS [7]   = "TRUCK_getin_RHS";
	TRUCK_ANIMATIONS [8]   = "TRUCK_getout_LHS";
	TRUCK_ANIMATIONS [9]   = "TRUCK_getout_RHS";
	TRUCK_ANIMATIONS [10]   = "TRUCK_jackedLHS";
	TRUCK_ANIMATIONS [11]   = "TRUCK_jackedRHS";
	TRUCK_ANIMATIONS [12]   = "TRUCK_open_LHS";
	TRUCK_ANIMATIONS [13]   = "TRUCK_open_RHS";
	TRUCK_ANIMATIONS [14]   = "TRUCK_pullout_LHS";
	TRUCK_ANIMATIONS [15]   = "TRUCK_pullout_RHS";
	TRUCK_ANIMATIONS [16]   = "TRUCK_Shuffle";
	// UZI - 4
	UZI_ANIMATIONS [0]   = "UZI_crouchfire";
	UZI_ANIMATIONS [1]   = "UZI_crouchreload";
	UZI_ANIMATIONS [2]   = "UZI_fire";
	UZI_ANIMATIONS [3]   = "UZI_fire_poor";
	UZI_ANIMATIONS [4]   = "UZI_reload";
	// VAN - 7
	VAN_ANIMATIONS [0]   = "VAN_close_back_LHS";
	VAN_ANIMATIONS [1]   = "VAN_close_back_RHS";
	VAN_ANIMATIONS [2]   = "VAN_getin_Back_LHS";
	VAN_ANIMATIONS [3]   = "VAN_getin_Back_RHS";
	VAN_ANIMATIONS [4]   = "VAN_getout_back_LHS";
	VAN_ANIMATIONS [5]   = "VAN_getout_back_RHS";
	VAN_ANIMATIONS [6]   = "VAN_open_back_LHS";
	VAN_ANIMATIONS [7]   = "VAN_open_back_RHS";
	// VENDING - 5
	VENDING_ANIMATIONS      [0] = "VEND_Drink2_P";
	VENDING_ANIMATIONS      [1] = "VEND_Drink_P";
	VENDING_ANIMATIONS      [2] = "vend_eat1_P";
	VENDING_ANIMATIONS      [3] = "VEND_Eat_P";
	VENDING_ANIMATIONS      [4] = "VEND_Use";
	VENDING_ANIMATIONS      [5] = "VEND_Use_pt2";
	// VORTEX - 3
	VORTEX_ANIMATIONS [0]   = "CAR_jumpin_LHS";
	VORTEX_ANIMATIONS [1]   = "CAR_jumpin_RHS";
	VORTEX_ANIMATIONS [2]   = "vortex_getout_LHS";
	VORTEX_ANIMATIONS [3]   = "vortex_getout_RHS";
	// WAYFA - 17
	WAYFA_ANIMATIONS [0]   = "WF_Back";
	WAYFA_ANIMATIONS [1]   = "WF_drivebyFT";
	WAYFA_ANIMATIONS [2]   = "WF_drivebyLHS";
	WAYFA_ANIMATIONS [3]   = "WF_drivebyRHS";
	WAYFA_ANIMATIONS [4]   = "WF_Fwd";
	WAYFA_ANIMATIONS [5]   = "WF_getoffBACK";
	WAYFA_ANIMATIONS [6]   = "WF_getoffLHS";
	WAYFA_ANIMATIONS [7]   = "WF_getoffRHS";
	WAYFA_ANIMATIONS [8]   = "WF_hit";
	WAYFA_ANIMATIONS [9]   = "WF_jumponL";
	WAYFA_ANIMATIONS [10]   = "WF_jumponR";
	WAYFA_ANIMATIONS [11]   = "WF_kick";
	WAYFA_ANIMATIONS [12]   = "WF_Left";
	WAYFA_ANIMATIONS [13]   = "WF_passenger";
	WAYFA_ANIMATIONS [14]   = "WF_pushes";
	WAYFA_ANIMATIONS [15]   = "WF_Ride";
	WAYFA_ANIMATIONS [16]   = "WF_Right";
	WAYFA_ANIMATIONS [17]   = "WF_Still";
	// ARMA - 16
	ARMA_ANIMATIONS [0]   = "SHP_1H_Lift";
	ARMA_ANIMATIONS [1]   = "SHP_1H_Lift_End";
	ARMA_ANIMATIONS [2]   = "SHP_1H_Ret";
	ARMA_ANIMATIONS [3]   = "SHP_1H_Ret_S";
	ARMA_ANIMATIONS [4]   = "SHP_2H_Lift";
	ARMA_ANIMATIONS [5]   = "SHP_2H_Lift_End";
	ARMA_ANIMATIONS [6]   = "SHP_2H_Ret";
	ARMA_ANIMATIONS [7]   = "SHP_2H_Ret_S";
	ARMA_ANIMATIONS [8]   = "SHP_Ar_Lift";
	ARMA_ANIMATIONS [9]   = "SHP_Ar_Lift_End";
	ARMA_ANIMATIONS [10]   = "SHP_Ar_Ret";
	ARMA_ANIMATIONS [11]   = "SHP_Ar_Ret_S";
	ARMA_ANIMATIONS [12]   = "SHP_G_Lift_In";
	ARMA_ANIMATIONS [13]   = "SHP_G_Lift_Out";
	ARMA_ANIMATIONS [14]   = "SHP_Tray_In";
	ARMA_ANIMATIONS [15]   = "SHP_Tray_Out";
	ARMA_ANIMATIONS [16]   = "SHP_Tray_Pose";
	// WUZI - 11
	WUZI_ANIMATIONS [0]   = "CS_Dead_Guy";
	WUZI_ANIMATIONS [1]   = "CS_Plyr_pt1";
	WUZI_ANIMATIONS [2]   = "CS_Plyr_pt2";
	WUZI_ANIMATIONS [3]   = "CS_Wuzi_pt1";
	WUZI_ANIMATIONS [4]   = "CS_Wuzi_pt2";
	WUZI_ANIMATIONS [5]   = "Walkstart_Idle_01";
	WUZI_ANIMATIONS [6]   = "Wuzi_follow";
	WUZI_ANIMATIONS [7]   = "Wuzi_Greet_Plyr";
	WUZI_ANIMATIONS [8]   = "Wuzi_Greet_Wuzi";
	WUZI_ANIMATIONS [9]   = "Wuzi_grnd_chk";
	WUZI_ANIMATIONS [10]   = "Wuzi_stand_loop";
	WUZI_ANIMATIONS [11]   = "Wuzi_Walk";
	// PED - 285
	PED_ANIMATIONS[0]   = "abseil";
	PED_ANIMATIONS[1]   = "ARRESTgun";
	PED_ANIMATIONS[2]   = "ATM";
	PED_ANIMATIONS[3]   = "BIKE_elbowL";
	PED_ANIMATIONS[4]   = "BIKE_elbowR";
	PED_ANIMATIONS[5]   = "BIKE_fallR";
	PED_ANIMATIONS[6]   = "BIKE_fall_off";
	PED_ANIMATIONS[7]   = "BIKE_pickupL";
	PED_ANIMATIONS[8]   = "BIKE_pickupR";
	PED_ANIMATIONS[9]   = "BIKE_pullupL";
	PED_ANIMATIONS[10]   = "BIKE_pullupR";
	PED_ANIMATIONS[11]   = "bomber";
	PED_ANIMATIONS[12]   = "CAR_alignHI_LHS";
	PED_ANIMATIONS[13]   = "CAR_alignHI_RHS";
	PED_ANIMATIONS[14]   = "CAR_align_LHS";
	PED_ANIMATIONS[15]   = "CAR_align_RHS";
	PED_ANIMATIONS[16]   = "CAR_closedoorL_LHS";
	PED_ANIMATIONS[17]   = "CAR_closedoorL_RHS";
	PED_ANIMATIONS[18]   = "CAR_closedoor_LHS";
	PED_ANIMATIONS[19]   = "CAR_close_LHS";
	PED_ANIMATIONS[20]   = "CAR_close_RHS";
	PED_ANIMATIONS[21]   = "CAR_crawloutRHS";
	PED_ANIMATIONS[22]   = "CAR_dead_LHS";
	PED_ANIMATIONS[23]   = "CAR_dead_RHS";
	PED_ANIMATIONS[24]   = "CAR_doorlocked_LHS";
	PED_ANIMATIONS[25]   = "CAR_doorlocked_RHS";
	PED_ANIMATIONS[26]   = "CAR_fallout_RHS";
	PED_ANIMATIONS[27]   = "CAR_getinL_LHS";
	PED_ANIMATIONS[28]   = "CAR_getinL_RHS";
	PED_ANIMATIONS[29]   = "CAR_getin_LHS";
	PED_ANIMATIONS[30]   = "CAR_getin_RHS";
	PED_ANIMATIONS[31]   = "CAR_getoutL_LHS";
	PED_ANIMATIONS[32]   = "CAR_getoutL_RHS";
	PED_ANIMATIONS[33]   = "CAR_getout_LHS";
	PED_ANIMATIONS[34]   = "CAR_getout_RHS";
	PED_ANIMATIONS[35]   = "car_hookertalk";
	PED_ANIMATIONS[36]   = "CAR_jackedLHS";
	PED_ANIMATIONS[37]   = "CAR_jackedRHS";
	PED_ANIMATIONS[38]   = "CAR_jumpin_LHS";
	PED_ANIMATIONS[39]   = "CAR_LB";
	PED_ANIMATIONS[40]   = "CAR_LB_pro";
	PED_ANIMATIONS[41]   = "CAR_LB_weak";
	PED_ANIMATIONS[42]   = "CAR_LjackedLHS";
	PED_ANIMATIONS[43]   = "CAR_LjackedRHS";
	PED_ANIMATIONS[44]   = "CAR_Lshuffle_RHS";
	PED_ANIMATIONS[45]   = "CAR_Lsit";
	PED_ANIMATIONS[46]   = "CAR_open_LHS";
	PED_ANIMATIONS[47]   = "CAR_open_RHS";
	PED_ANIMATIONS[48]   = "CAR_pulloutL_LHS";
	PED_ANIMATIONS[49]   = "CAR_pulloutL_RHS";
	PED_ANIMATIONS[50]   = "CAR_pullout_LHS";
	PED_ANIMATIONS[51]   = "CAR_pullout_RHS";
	PED_ANIMATIONS[52]   = "CAR_Qjacked";
	PED_ANIMATIONS[53]   = "CAR_rolldoor";
	PED_ANIMATIONS[54]   = "CAR_rolldoorLO";
	PED_ANIMATIONS[55]   = "CAR_rollout_LHS";
	PED_ANIMATIONS[56]   = "CAR_rollout_RHS";
	PED_ANIMATIONS[57]   = "CAR_shuffle_RHS";
	PED_ANIMATIONS[58]   = "CAR_sit";
	PED_ANIMATIONS[59]   = "CAR_sitp";
	PED_ANIMATIONS[60]   = "CAR_sitpLO";
	PED_ANIMATIONS[61]   = "CAR_sit_pro";
	PED_ANIMATIONS[62]   = "CAR_sit_weak";
	PED_ANIMATIONS[63]   = "CAR_tune_radio";
	PED_ANIMATIONS[64]   = "CLIMB_idle";
	PED_ANIMATIONS[65]   = "CLIMB_jump";
	PED_ANIMATIONS[66]   = "CLIMB_jump2fall";
	PED_ANIMATIONS[67]   = "CLIMB_jump_B";
	PED_ANIMATIONS[68]   = "CLIMB_Pull";
	PED_ANIMATIONS[69]   = "CLIMB_Stand";
	PED_ANIMATIONS[70]   = "CLIMB_Stand_finish";
	PED_ANIMATIONS[71]   = "cower";
	PED_ANIMATIONS[72]   = "Crouch_Roll_L";
	PED_ANIMATIONS[73]   = "Crouch_Roll_R";
	PED_ANIMATIONS[74]   = "DAM_armL_frmBK";
	PED_ANIMATIONS[75]   = "DAM_armL_frmFT";
	PED_ANIMATIONS[76]   = "DAM_armL_frmLT";
	PED_ANIMATIONS[77]   = "DAM_armR_frmBK";
	PED_ANIMATIONS[78]   = "DAM_armR_frmFT";
	PED_ANIMATIONS[79]   = "DAM_armR_frmRT";
	PED_ANIMATIONS[80]   = "DAM_LegL_frmBK";
	PED_ANIMATIONS[81]   = "DAM_LegL_frmFT";
	PED_ANIMATIONS[82]   = "DAM_LegL_frmLT";
	PED_ANIMATIONS[83]   = "DAM_LegR_frmBK";
	PED_ANIMATIONS[84]   = "DAM_LegR_frmFT";
	PED_ANIMATIONS[85]   = "DAM_LegR_frmRT";
	PED_ANIMATIONS[86]   = "DAM_stomach_frmBK";
	PED_ANIMATIONS[87]   = "DAM_stomach_frmFT";
	PED_ANIMATIONS[88]   = "DAM_stomach_frmLT";
	PED_ANIMATIONS[89]   = "DAM_stomach_frmRT";
	PED_ANIMATIONS[90]   = "DOOR_LHinge_O";
	PED_ANIMATIONS[91]   = "DOOR_RHinge_O";
	PED_ANIMATIONS[92]   = "DrivebyL_L";
	PED_ANIMATIONS[93]   = "DrivebyL_R";
	PED_ANIMATIONS[94]   = "Driveby_L";
	PED_ANIMATIONS[95]   = "Driveby_R";
	PED_ANIMATIONS[96]   = "DRIVE_BOAT";
	PED_ANIMATIONS[97]   = "DRIVE_BOAT_back";
	PED_ANIMATIONS[98]   = "DRIVE_BOAT_L";
	PED_ANIMATIONS[99]   = "DRIVE_BOAT_R";
	PED_ANIMATIONS[100]   = "Drive_L";
	PED_ANIMATIONS[101]   = "Drive_LO_l";
	PED_ANIMATIONS[102]   = "Drive_LO_R";
	PED_ANIMATIONS[103]   = "Drive_L_pro";
	PED_ANIMATIONS[104]   = "Drive_L_pro_slow";
	PED_ANIMATIONS[105]   = "Drive_L_slow";
	PED_ANIMATIONS[106]   = "Drive_L_weak";
	PED_ANIMATIONS[107]   = "Drive_L_weak_slow";
	PED_ANIMATIONS[108]   = "Drive_truck";
	PED_ANIMATIONS[109]   = "DRIVE_truck_back";
	PED_ANIMATIONS[110]   = "DRIVE_truck_L";
	PED_ANIMATIONS[111]   = "DRIVE_truck_R";
	PED_ANIMATIONS[112]   = "Drown";
	PED_ANIMATIONS[113]   = "DUCK_cower";
	PED_ANIMATIONS[114]   = "endchat_01";
	PED_ANIMATIONS[115]   = "endchat_02";
	PED_ANIMATIONS[116]   = "endchat_03";
	PED_ANIMATIONS[117]   = "EV_dive";
	PED_ANIMATIONS[118]   = "EV_step";
	PED_ANIMATIONS[119]   = "facanger";
	PED_ANIMATIONS[120]   = "facgum";
	PED_ANIMATIONS[121]   = "facsurp";
	PED_ANIMATIONS[122]   = "facsurpm";
	PED_ANIMATIONS[123]   = "factalk";
	PED_ANIMATIONS[124]   = "facurios";
	PED_ANIMATIONS[125]   = "FALL_back";
	PED_ANIMATIONS[126]   = "FALL_collapse";
	PED_ANIMATIONS[127]   = "FALL_fall";
	PED_ANIMATIONS[128]   = "FALL_front";
	PED_ANIMATIONS[129]   = "FALL_glide";
	PED_ANIMATIONS[130]   = "FALL_land";
	PED_ANIMATIONS[131]   = "FALL_skyDive";
	PED_ANIMATIONS[132]   = "Fight2Idle";
	PED_ANIMATIONS[133]   = "FightA_1";
	PED_ANIMATIONS[134]   = "FightA_2";
	PED_ANIMATIONS[135]   = "FightA_3";
	PED_ANIMATIONS[136]   = "FightA_block";
	PED_ANIMATIONS[137]   = "FightA_G";
	PED_ANIMATIONS[138]   = "FightA_M";
	PED_ANIMATIONS[139]   = "FIGHTIDLE";
	PED_ANIMATIONS[140]   = "FightShB";
	PED_ANIMATIONS[141]   = "FightShF";
	PED_ANIMATIONS[142]   = "FightSh_BWD";
	PED_ANIMATIONS[143]   = "FightSh_FWD";
	PED_ANIMATIONS[144]   = "FightSh_Left";
	PED_ANIMATIONS[145]   = "FightSh_Right";
	PED_ANIMATIONS[146]   = "flee_lkaround_01";
	PED_ANIMATIONS[147]   = "FLOOR_hit";
	PED_ANIMATIONS[148]   = "FLOOR_hit_f";
	PED_ANIMATIONS[149]   = "fucku";
	PED_ANIMATIONS[150]   = "gang_gunstand";
	PED_ANIMATIONS[151]   = "gas_cwr";
	PED_ANIMATIONS[152]   = "getup";
	PED_ANIMATIONS[153]   = "getup_front";
	PED_ANIMATIONS[154]   = "gum_eat";
	PED_ANIMATIONS[155]   = "GunCrouchBwd";
	PED_ANIMATIONS[156]   = "GunCrouchFwd";
	PED_ANIMATIONS[157]   = "GunMove_BWD";
	PED_ANIMATIONS[158]   = "GunMove_FWD";
	PED_ANIMATIONS[159]   = "GunMove_L";
	PED_ANIMATIONS[160]   = "GunMove_R";
	PED_ANIMATIONS[161]   = "Gun_2_IDLE";
	PED_ANIMATIONS[162]   = "GUN_BUTT";
	PED_ANIMATIONS[163]   = "GUN_BUTT_crouch";
	PED_ANIMATIONS[164]   = "Gun_stand";
	PED_ANIMATIONS[165]   = "handscower";
	PED_ANIMATIONS[166]   = "handsup";          //////////// LEVANTAR MANOS
	PED_ANIMATIONS[167]   = "HitA_1";
	PED_ANIMATIONS[168]   = "HitA_2";
	PED_ANIMATIONS[169]   = "HitA_3";
	PED_ANIMATIONS[170]   = "HIT_back";
	PED_ANIMATIONS[171]   = "HIT_behind";
	PED_ANIMATIONS[172]   = "HIT_front";
	PED_ANIMATIONS[173]   = "HIT_GUN_BUTT";
	PED_ANIMATIONS[174]   = "HIT_L";
	PED_ANIMATIONS[175]   = "HIT_R";
	PED_ANIMATIONS[176]   = "HIT_walk";
	PED_ANIMATIONS[177]   = "HIT_wall";
	PED_ANIMATIONS[178]   = "Idlestance_fat";
	PED_ANIMATIONS[179]   = "idlestance_old";
	PED_ANIMATIONS[180]   = "IDLE_armed";
	PED_ANIMATIONS[181]   = "IDLE_chat";
	PED_ANIMATIONS[182]   = "IDLE_csaw";
	PED_ANIMATIONS[183]   = "Idle_Gang1";
	PED_ANIMATIONS[184]   = "IDLE_HBHB";
	PED_ANIMATIONS[185]   = "IDLE_ROCKET";
	PED_ANIMATIONS[186]   = "IDLE_stance";
	PED_ANIMATIONS[187]   = "IDLE_taxi";
	PED_ANIMATIONS[188]   = "IDLE_tired";
	PED_ANIMATIONS[189]   = "Jetpack_Idle";
	PED_ANIMATIONS[190]   = "JOG_femaleA";
	PED_ANIMATIONS[191]   = "JOG_maleA";
	PED_ANIMATIONS[192]   = "JUMP_glide";
	PED_ANIMATIONS[193]   = "JUMP_land";
	PED_ANIMATIONS[194]   = "JUMP_launch";
	PED_ANIMATIONS[195]   = "JUMP_launch_R";
	PED_ANIMATIONS[196]   = "KART_drive";
	PED_ANIMATIONS[197]   = "KART_L";
	PED_ANIMATIONS[198]   = "KART_LB";
	PED_ANIMATIONS[199]   = "KART_R";
	PED_ANIMATIONS[200]   = "KD_left";
	PED_ANIMATIONS[201]   = "KD_right";
	PED_ANIMATIONS[202]   = "KO_shot_face";
	PED_ANIMATIONS[203]   = "KO_shot_front";
	PED_ANIMATIONS[204]   = "KO_shot_stom";
	PED_ANIMATIONS[205]   = "KO_skid_back";
	PED_ANIMATIONS[206]   = "KO_skid_front";
	PED_ANIMATIONS[207]   = "KO_spin_L";
	PED_ANIMATIONS[208]   = "KO_spin_R";
	PED_ANIMATIONS[209]   = "pass_Smoke_in_car";
	PED_ANIMATIONS[210]   = "phone_in";
	PED_ANIMATIONS[211]   = "phone_out";
	PED_ANIMATIONS[212]   = "phone_talk";
	PED_ANIMATIONS[213]   = "Player_Sneak";
	PED_ANIMATIONS[214]   = "Player_Sneak_walkstart";
	PED_ANIMATIONS[215]   = "roadcross";                    //////////////// CRUZAR LAS MANOS?
	PED_ANIMATIONS[216]   = "roadcross_female";
	PED_ANIMATIONS[217]   = "roadcross_gang";
	PED_ANIMATIONS[218]   = "roadcross_old";
	PED_ANIMATIONS[219]   = "run_1armed";
	PED_ANIMATIONS[220]   = "run_armed";
	PED_ANIMATIONS[221]   = "run_civi";
	PED_ANIMATIONS[222]   = "run_csaw";
	PED_ANIMATIONS[223]   = "run_fat";
	PED_ANIMATIONS[224]   = "run_fatold";
	PED_ANIMATIONS[225]   = "run_gang1";
	PED_ANIMATIONS[226]   = "run_left";
	PED_ANIMATIONS[227]   = "run_old";
	PED_ANIMATIONS[228]   = "run_player";
	PED_ANIMATIONS[229]   = "run_right";
	PED_ANIMATIONS[230]   = "run_rocket";
	PED_ANIMATIONS[231]   = "Run_stop";
	PED_ANIMATIONS[232]   = "Run_stopR";
	PED_ANIMATIONS[233]   = "Run_Wuzi";
	PED_ANIMATIONS[234]   = "SEAT_down";
	PED_ANIMATIONS[235]   = "SEAT_idle";
	PED_ANIMATIONS[236]   = "SEAT_up";
	PED_ANIMATIONS[237]   = "SHOT_leftP";
	PED_ANIMATIONS[238]   = "SHOT_partial";
	PED_ANIMATIONS[239]   = "SHOT_partial_B";
	PED_ANIMATIONS[240]   = "SHOT_rightP";
	PED_ANIMATIONS[241]   = "Shove_Partial";
	PED_ANIMATIONS[242]   = "Smoke_in_car";
	PED_ANIMATIONS[243]   = "sprint_civi";
	PED_ANIMATIONS[244]   = "sprint_panic";
	PED_ANIMATIONS[245]   = "Sprint_Wuzi";
	PED_ANIMATIONS[246]   = "swat_run";
	PED_ANIMATIONS[247]   = "Swim_Tread";
	PED_ANIMATIONS[248]   = "Tap_hand";
	PED_ANIMATIONS[249]   = "Tap_handP";
	PED_ANIMATIONS[250]   = "turn_180";
	PED_ANIMATIONS[251]   = "Turn_L";
	PED_ANIMATIONS[252]   = "Turn_R";
	PED_ANIMATIONS[253]   = "WALK_armed";
	PED_ANIMATIONS[254]   = "WALK_civi";
	PED_ANIMATIONS[255]   = "WALK_csaw";
	PED_ANIMATIONS[256]   = "Walk_DoorPartial";
	PED_ANIMATIONS[257]   = "WALK_drunk";
	PED_ANIMATIONS[258]   = "WALK_fat";
	PED_ANIMATIONS[259]   = "WALK_fatold";
	PED_ANIMATIONS[260]   = "WALK_gang1";
	PED_ANIMATIONS[261]   = "WALK_gang2";
	PED_ANIMATIONS[262]   = "WALK_old";
	PED_ANIMATIONS[263]   = "WALK_player";
	PED_ANIMATIONS[264]   = "WALK_rocket";
	PED_ANIMATIONS[265]   = "WALK_shuffle";
	PED_ANIMATIONS[266]   = "WALK_start";
	PED_ANIMATIONS[267]   = "WALK_start_armed";
	PED_ANIMATIONS[268]   = "WALK_start_csaw";
	PED_ANIMATIONS[269]   = "WALK_start_rocket";
	PED_ANIMATIONS[270]   = "Walk_Wuzi";
	PED_ANIMATIONS[271]   = "WEAPON_crouch";
	PED_ANIMATIONS[272]   = "woman_idlestance";
	PED_ANIMATIONS[273]   = "woman_run";
	PED_ANIMATIONS[274]   = "WOMAN_runbusy";
	PED_ANIMATIONS[275]   = "WOMAN_runfatold";
	PED_ANIMATIONS[276]   = "woman_runpanic";
	PED_ANIMATIONS[277]   = "WOMAN_runsexy";
	PED_ANIMATIONS[278]   = "WOMAN_walkbusy";
	PED_ANIMATIONS[279]   = "WOMAN_walkfatold";
	PED_ANIMATIONS[280]   = "WOMAN_walknorm";
	PED_ANIMATIONS[281]   = "WOMAN_walkold";
	PED_ANIMATIONS[282]   = "WOMAN_walkpro";
	PED_ANIMATIONS[283]   = "WOMAN_walksexy";
	PED_ANIMATIONS[284]   = "WOMAN_walkshop";
	PED_ANIMATIONS[285]   = "XPRESSscratch";
}
public ApplyPlayerAnimCustom(playerid, animlib[], animid[], loop)
{
	if ( loop )
	{
		ApplyAnimation(playerid,animlib,animid, 4.0, 1, 1, 1, 1, 1, 1);
		ApplyAnimation(playerid,animlib,animid, 4.0, 1, 1, 1, 1, 1, 1);
		ApplyAnimation(playerid,animlib,animid, 4.0, 1, 1, 1, 1, 1, 1);
		ApplyAnimation(playerid,animlib,animid, 4.0, 1, 1, 1, 1, 1, 1);
	}
	else
	{
		ApplyAnimation(playerid,animlib,animid, 4.0, 0, 1, 1, 1, 1, 1);
		ApplyAnimation(playerid,animlib,animid, 4.0, 0, 1, 1, 1, 1, 1);
		ApplyAnimation(playerid,animlib,animid, 4.0, 0, 1, 1, 1, 1, 1);
		ApplyAnimation(playerid,animlib,animid, 4.0, 0, 1, 1, 1, 1, 1);
	}
	PlayersDataOnline[playerid][InAnim] = true;
}
public LoadTypeObjectsBolsillos()
{
	ObjetosBolsillosNombres[0] = "Vacío";
	ObjetosBolsillosNombres[1] = "Patines";
	ObjetosBolsillosNombres[2] = "Dados";
	ObjetosBolsillosNombres[3] = "Móvil";
	ObjetosBolsillosNombres[4] = "Agenda";
}
public IsNotFullBolsillo(playeridError, playerid, error[])
{
	for(new i = 0; i<=4; i++)
	{
	    if (PlayersData[playerid][Bolsillos][i] == 0)
	    {
			return true;
		}
	}
	SendInfoMessage(playeridError, 0, "1020", error);
	return false;
}
public IsObjectInBolsillo(playerid, objectid)
{
	for(new i = 0; i<=4; i++)
	{
	    if (PlayersData[playerid][Bolsillos][i] == objectid)
	    {
	        return true;
		}
	}
	return false;
}
public RemoveObjectBolsillo(playerid, objectid)
{
	for(new i = 0; i<=4; i++)
	{
	    if (PlayersData[playerid][Bolsillos][i] == objectid)
	    {
	        PlayersData[playerid][Bolsillos][i] = 0;
			return true;
		}
	}
	return false;
}
public AddObjectBolsillo(playerid, objectid)
{
	for(new i = 0; i<=4; i++)
	{
	    if (PlayersData[playerid][Bolsillos][i] == 0)
	    {
	        PlayersData[playerid][Bolsillos][i] = objectid;
			return true;
		}
	}
	return false;
}
public IntentarAccion(playerid, text[], rndNum)
{
	if ( gettime() - PlayersDataOnline[playerid][Intentar]  >= 7 )
	{
	    PlayersDataOnline[playerid][Intentar] = gettime();
	    if ( rndNum )
	    {
            Acciones(playerid, 2, text);
            return true;
        }
        else
        {
            Acciones(playerid, 3, text);
		}
	}
	else
	{
		SendInfoMessage(playerid, 0, "130", "Tiene que esperar 7 segundos entre cada uso de /Intentar [Acción].");
	}
    return false;
}
public GetNearFaccion(playerid)
{
	if ( PlayersDataOnline[playerid][InPickup] != -1 )
	{
	    for(new i=GOBIERNO;i<=MAX_FACCION;i++)
	    {
	        if ( FaccionData[i][PickupidOutF] == PlayersDataOnline[playerid][InPickup] || FaccionData[i][PickupidInF] == PlayersDataOnline[playerid][InPickup] )
	        {
				return i;
			}
	    }
	}
	SendInfoMessage(playerid, 0, "382", "Aquí no esta su facción");
    return -1;
}
public SetPlayerDescolgar(playerid)
{
	PlayPlayerStreamSound(playerid, 3600);
	SetPlayerSpecialAction(playerid, 11);
	if ( MovilesObjects[PlayersData[playerid][TypePhone]] == 330 )
	{
		SetPlayerAttachedObject(playerid, 9, MovilesObjects[PlayersData[playerid][TypePhone]], 6);
	}
	else
	{
		SetPlayerAttachedObject(playerid, 9, MovilesObjects[PlayersData[playerid][TypePhone]], 6, 0.079999, -0.004999, -0.009999, 270.000000, 0.000000, 180.000000, 1.000000, 1.000000, 1.000000);
	 //   0.079999, -0.004999, -0.009999, 270.000000, 0.000000, 180.000000, 1.000000, 1.000000, 1.000000
	}
}
public SetPlayerColgar(playerid)
{
	SetPlayerSpecialAction(playerid, 13);
	RemovePlayerAttachedObject(playerid, 9);
}
public ShowBolsillosToPlayer(playerid, playeridshow)
{
    new MsgBolsillos[MAX_TEXT_CHAT];
	SendClientMessage(playeridshow, COLOR_MALETERO_ARMARIO_CAJA_FUERTE,
	 ">>>>>>>>>> .:Bolsillos:. <<<<<<<<<");
	for (new i = 0; i<=4;i++)
	{
		format(MsgBolsillos, sizeof(MsgBolsillos), "Bolsillo %i: %s", i + 1, ObjetosBolsillosNombres[PlayersData[playerid][Bolsillos][i]]);
		SendClientMessage(playeridshow, COLOR_MALETERO_ARMARIO_CAJA_FUERTE, MsgBolsillos);
	}
}
public ShowBolsaToPlayer(playerid, playeridshow)
{
    new MsgBolsa[MAX_TEXT_CHAT];
	SendClientMessage(playeridshow, COLOR_MALETERO_ARMARIO_CAJA_FUERTE,
	 ">>>>>>>>>> .:Bolsa:. <<<<<<<<<");
	for (new i = 0; i<4;i++)
	{
		format(MsgBolsa, sizeof(MsgBolsa), "Bolsa %i: %s (%i)", i + 1, Articulos[PlayersData[playerid][Bolsa][i]][NameA], PlayersData[playerid][BolsaC][i]);
		SendClientMessage(playeridshow, COLOR_MALETERO_ARMARIO_CAJA_FUERTE, MsgBolsa);
	}
}
public ShowPasaporteToPlayer(playerid, playeridshow)
{
	new MsgPasaporteShow[MAX_TEXT_CHAT];
	SendClientMessage(playeridshow, COLOR_MESSAGES[3], "............:::::PASAPORTE:::::............");
	format(MsgPasaporteShow, MAX_TEXT_CHAT, "Nombre: %s", PlayersDataOnline[playerid][NameOnlineFix]);
	SendClientMessage(playeridshow, COLOR_MESSAGES[3], MsgPasaporteShow);
	format(MsgPasaporteShow, MAX_TEXT_CHAT, "Edad: %i", PlayersData[playerid][Edad]);
	SendClientMessage(playeridshow, COLOR_MESSAGES[3], MsgPasaporteShow);
	format(MsgPasaporteShow, MAX_TEXT_CHAT, "Ciudad: %s", Ciudades[PlayersData[playerid][Ciudad]]);
	SendClientMessage(playeridshow, COLOR_MESSAGES[3], MsgPasaporteShow);
	if ( PlayersData[playerid][Faccion] != YKZ &&
		 PlayersData[playerid][Faccion] != LCN &&
		 PlayersData[playerid][Faccion] != SICARIOS &&
		 PlayersData[playerid][Faccion] != CONTRABANDISTAS &&
		 PlayersData[playerid][Faccion] != TRAFICANTES &&
		 PlayersData[playerid][Faccion] != COLTS &&
		 PlayersData[playerid][Faccion] != AK &&
		 PlayersData[playerid][Faccion] != VELTRAN &&
		 PlayersData[playerid][Faccion] != HEORS &&
		 PlayersData[playerid][Faccion] != CIVIL)
	{
		format(MsgPasaporteShow, MAX_TEXT_CHAT, "Trabajo: %s", FaccionData[PlayersData[playerid][Faccion]][NameFaccion]);
		SendClientMessage(playeridshow, COLOR_MESSAGES[3], MsgPasaporteShow);
		format(MsgPasaporteShow, MAX_TEXT_CHAT, "Cargo: %s", FaccionesRangos[PlayersData[playerid][Faccion]][PlayersData[playerid][Rango]]);
		SendClientMessage(playeridshow, COLOR_MESSAGES[3], MsgPasaporteShow);
	}
	else if ( PlayersData[playerid][Faccion] != CIVIL )
	{
		SendClientMessage(playeridshow, COLOR_MESSAGES[3], "Trabajo: Desconocido");
		SendClientMessage(playeridshow, COLOR_MESSAGES[3], "Cargo: Desconocido");
	}
	else
	{
		SendClientMessage(playeridshow, COLOR_MESSAGES[3], "Trabajo: Ninguno");
		SendClientMessage(playeridshow, COLOR_MESSAGES[3], "Cargo: Ninguno");
	}

	format(MsgPasaporteShow, MAX_TEXT_CHAT, "Sexo: %s", Sexos[PlayersData[playerid][Sexo]]);
	SendClientMessage(playeridshow, COLOR_MESSAGES[3], MsgPasaporteShow);
	format(MsgPasaporteShow, MAX_TEXT_CHAT, "Casado: %s", PlayersData[playerid][GirlFreind]);
	SendClientMessage(playeridshow, COLOR_MESSAGES[3], MsgPasaporteShow);

}
public ShowPapelesToPlayer(playerid, playeridshow)
{
	new MsgPapeles[MAX_TEXT_CHAT];
	SendClientMessage(playeridshow, COLOR_MESSAGES[2], "|___________ PAPELES DEL VEHÍCULO ___________|");
	format(MsgPapeles, sizeof(MsgPapeles), "Propietario: %s", PlayersDataOnline[playerid][NameOnlineFix]);
	SendClientMessage(playeridshow, COLOR_MESSAGES[2], MsgPapeles);
	format(MsgPapeles, sizeof(MsgPapeles), "Modelo: %s", coches_Todos_Nombres[GetVehicleModel(PlayersData[playerid][Car]) - 400]);
	SendClientMessage(playeridshow, COLOR_MESSAGES[2], MsgPapeles);
	format(MsgPapeles, sizeof(MsgPapeles), "Caduca: En %i días y %i horas", DataCars[PlayersData[playerid][Car]][Time] / 24, DataCars[PlayersData[playerid][Car]][Time] % 24);
	SendClientMessage(playeridshow, COLOR_MESSAGES[2], MsgPapeles);
	format(MsgPapeles, sizeof(MsgPapeles), "Matrícula: %i",DataCars[PlayersData[playerid][Car]][Matricula]);
	SendClientMessage(playeridshow, COLOR_MESSAGES[2], MsgPapeles);
}
public ShowTextDrawFijosVelocimentros(playerid)
{
	TextDrawShowForPlayer(playerid, VelocimetroFijos[0]);
	TextDrawShowForPlayer(playerid, VelocimetroFijos[1]);
	TextDrawShowForPlayer(playerid, VelocimetroFijos[2]);
	TextDrawShowForPlayer(playerid, VelocimetroFijos[3]);
	TextDrawShowForPlayer(playerid, VelocimetroFijos[4]);
	TextDrawShowForPlayer(playerid, VelocimetroFijos[5]);
	TextDrawShowForPlayer(playerid, VelocimetroFijos[6]);
	ShowLockTextDraws(PlayersDataOnline[playerid][InCarId], -1);
}
public HideTextDrawFijosVelocimentros(playerid)
{
	TextDrawHideForPlayer(playerid, VelocimetroFijos[0]);
	TextDrawHideForPlayer(playerid, VelocimetroFijos[1]);
	TextDrawHideForPlayer(playerid, VelocimetroFijos[2]);
	TextDrawHideForPlayer(playerid, VelocimetroFijos[3]);
	TextDrawHideForPlayer(playerid, VelocimetroFijos[4]);
	TextDrawHideForPlayer(playerid, VelocimetroFijos[5]);
	TextDrawHideForPlayer(playerid, VelocimetroFijos[6]);
    if ( !DataCars[PlayersDataOnline[playerid][InCarId]][Lock] )
    {
	    TextDrawHideForPlayer(playerid, VelocimetroFijos[7]);
    }
    else
    {
	    TextDrawHideForPlayer(playerid, VelocimetroFijos[8]);
    }
}
public CreateTextDrawFijosVelocimetros()
{
	new COLOR_BORDES = 0xFFFFFFFF;
	VelocimetroFijos[0] = TextDrawCreateEx(455.0, 398.0,"~B~Ace\xa2te:~N~~G~Gas:~N~~R~Estado:~N~~P~Temp:~N~~W~Velocidad:                 ~Y~KM/H");
	TextDrawUseBox(VelocimetroFijos[0], 1);
	TextDrawBackgroundColor(VelocimetroFijos[0] ,0x000000A3);
	TextDrawColor(VelocimetroFijos[0], 0x2DFF00FF);
	TextDrawBoxColor(VelocimetroFijos[0], 0x000000A1);
	TextDrawTextSize(VelocimetroFijos[0], 624, 400.0);
	TextDrawSetShadow(VelocimetroFijos[0], 1);
	TextDrawLetterSize(VelocimetroFijos[0], 0.3 , 1.0);
	TextDrawFont(VelocimetroFijos[0], 2);

	// Barra 1 FONDO GAS;
	VelocimetroFijos[1] = TextDrawCreateEx(487.0, 411.0,"_");
	TextDrawUseBox(VelocimetroFijos[1], 1);
	TextDrawBackgroundColor(VelocimetroFijos[1] ,0x00000000);
	TextDrawColor(VelocimetroFijos[1], 0x00000000);
	TextDrawBoxColor(VelocimetroFijos[1], COLOR_BORDES);
	TextDrawTextSize(VelocimetroFijos[1], 620.0, 411.0);
	TextDrawSetShadow(VelocimetroFijos[1], 1);
	TextDrawLetterSize(VelocimetroFijos[1], 0.5 , 0.3);

	// Barra 2 FONDO GAS
	VelocimetroFijos[2] = TextDrawCreateEx(488.0, 412.0,"_");
	TextDrawUseBox(VelocimetroFijos[2], 1);
	TextDrawBackgroundColor(VelocimetroFijos[2] ,0x00000000);
	TextDrawColor(VelocimetroFijos[2], 0x00000000);
	TextDrawBoxColor(VelocimetroFijos[2], 0x2D9800FC);
	TextDrawTextSize(VelocimetroFijos[2], 619.0, 412.0);
	TextDrawSetShadow(VelocimetroFijos[2], 1);
	TextDrawLetterSize(VelocimetroFijos[2], 0.1 , 0.1);

	// Barra 1 FONDO ESTADO;
	VelocimetroFijos[3] = TextDrawCreateEx(511.0, 420.0,"_");
	TextDrawUseBox(VelocimetroFijos[3], 1);
	TextDrawBackgroundColor(VelocimetroFijos[3] ,0x00000000);
	TextDrawColor(VelocimetroFijos[3], 0x00000000);
	TextDrawBoxColor(VelocimetroFijos[3], COLOR_BORDES);
	TextDrawTextSize(VelocimetroFijos[3], 620.0, 420.0);
	TextDrawSetShadow(VelocimetroFijos[3], 1);
	TextDrawLetterSize(VelocimetroFijos[3], 0.5 , 0.3);

	// Barra 2 FONDO ESTADO
	VelocimetroFijos[4] = TextDrawCreateEx(512.0, 421.0,"_");
	TextDrawUseBox(VelocimetroFijos[4], 1);
	TextDrawBackgroundColor(VelocimetroFijos[4] ,0x00000000);
	TextDrawColor(VelocimetroFijos[4], 0x00000000);
	TextDrawBoxColor(VelocimetroFijos[4], 0x620000FF);
	TextDrawTextSize(VelocimetroFijos[4], 619.0, 421.0);
	TextDrawSetShadow(VelocimetroFijos[4], 1);
	TextDrawLetterSize(VelocimetroFijos[4], 0.1 , 0.1);

	// Barra 1 FONDO ACEITE;
	VelocimetroFijos[5] = TextDrawCreateEx(505.0, 401.8,"_");
	TextDrawUseBox(VelocimetroFijos[5], 1);
	TextDrawBackgroundColor(VelocimetroFijos[5] ,0x00000000);
	TextDrawColor(VelocimetroFijos[1], 0x00000000);
	TextDrawBoxColor(VelocimetroFijos[5], COLOR_BORDES);
	TextDrawTextSize(VelocimetroFijos[5], 620.0, 401.8);
	TextDrawSetShadow(VelocimetroFijos[5], 1);
	TextDrawLetterSize(VelocimetroFijos[5], 0.5 , 0.3);

	// Barra 2 FONDO ACEITE
	VelocimetroFijos[6] = TextDrawCreateEx(506.0, 402.8,"_");
	TextDrawUseBox(VelocimetroFijos[6], 1);
	TextDrawBackgroundColor(VelocimetroFijos[6] ,0x00000000);
	TextDrawColor(VelocimetroFijos[6], 0x00000000);
	TextDrawBoxColor(VelocimetroFijos[6], 0x0041FFFF);
	TextDrawTextSize(VelocimetroFijos[6], 619.0, 402.8);
	TextDrawSetShadow(VelocimetroFijos[6], 1);
	TextDrawLetterSize(VelocimetroFijos[6], 0.1 , 0.1);
	
	//Barra del seguro Abierta
	VelocimetroFijos[7] = TextDrawCreateEx(592.8, 430.0, "_");
	TextDrawUseBox(VelocimetroFijos[7], 1);
	TextDrawColor(VelocimetroFijos[7], 0x00CC00FF);
	TextDrawBoxColor(VelocimetroFijos[7], 0x00CC00FF);
	TextDrawSetShadow(VelocimetroFijos[7], 1);
	TextDrawTextSize(VelocimetroFijos[7], 616.2, 403.8);
	TextDrawLetterSize(VelocimetroFijos[7], 0.2, 0.3);
	
	//Barra del seguro Cerada
	VelocimetroFijos[8] = TextDrawCreateEx(592.8, 430.0, "_");
	TextDrawUseBox(VelocimetroFijos[8], 1);
	TextDrawColor(VelocimetroFijos[8], 0xFF3200FF);
	TextDrawBoxColor(VelocimetroFijos[8], 0xFF3200FF);
	TextDrawSetShadow(VelocimetroFijos[8], 1);
	TextDrawTextSize(VelocimetroFijos[8], 616.2, 403.8);
	TextDrawLetterSize(VelocimetroFijos[8], 0.2, 0.3);
}
public SetMenuTraficante(playerid)
{
	new ListDialog[700];
	format(ListDialog, sizeof(ListDialog),
	"{E6E6E6}01- %s {00F50A}(%i)\r\n{E6E6E6}02- %s {00F50A}(%i)\r\n{E6E6E6}03- %s {00F50A}(%i)\r\n{E6E6E6}04- %s {00F50A}(%i)\r\n{E6E6E6}05- %s {00F50A}(%i)\r\n{E6E6E6}06- %s {00F50A}(%i)\r\n{E6E6E6}07- %s {00F50A}(%i)\r\n{E6E6E6}08- %s {00F50A}(%i)\r\n{E6E6E6}09- %s {00F50A}(%i)\r\n{E6E6E6}10- %s {00F50A}(%i)\r\n{E6E6E6}11- %s {00F50A}(%i)\r\n{E6E6E6}12- %s {00F50A}(%i)\r\n{E6E6E6}13- %s {00F50A}(%i)\r\n{E6E6E6}14- %s {00F50A}(%i){E6E6E6}\r\n15- Bomba {00F50A}(1000)",
	SlotNameWeapon[IdArmasTraficantes[0]],
	MaterialesArmasTraficantes[0],
	SlotNameWeapon[IdArmasTraficantes[1]],
	MaterialesArmasTraficantes[1],
	SlotNameWeapon[IdArmasTraficantes[2]],
	MaterialesArmasTraficantes[2],
	SlotNameWeapon[IdArmasTraficantes[3]],
	MaterialesArmasTraficantes[3],
	SlotNameWeapon[IdArmasTraficantes[4]],
	MaterialesArmasTraficantes[4],
	SlotNameWeapon[IdArmasTraficantes[5]],
	MaterialesArmasTraficantes[5],
	SlotNameWeapon[IdArmasTraficantes[6]],
	MaterialesArmasTraficantes[6],
	SlotNameWeapon[IdArmasTraficantes[7]],
	MaterialesArmasTraficantes[7],
	SlotNameWeapon[IdArmasTraficantes[8]],
	MaterialesArmasTraficantes[8],
	SlotNameWeapon[IdArmasTraficantes[9]],
	MaterialesArmasTraficantes[9],
	SlotNameWeapon[IdArmasTraficantes[10]],
	MaterialesArmasTraficantes[10],
	SlotNameWeapon[IdArmasTraficantes[11]],
	MaterialesArmasTraficantes[11],
	SlotNameWeapon[IdArmasTraficantes[12]],
	MaterialesArmasTraficantes[12],
	SlotNameWeapon[IdArmasTraficantes[13]],
	MaterialesArmasTraficantes[13]
	);
	ShowPlayerDialogEx(playerid,10,DIALOG_STYLE_LIST,"{00A5FF}Crear Arma", ListDialog, "Crear", "Cancelar");
}
public GetMySecondNearVehicle(playerid)
{
    new MyVehicle = GetPlayerVehicleID(playerid);
    new Float:X, Float:Y, Float:Z;
	for (new i = 1; i <= MAX_CAR; i++)
	{
	    GetVehiclePos(i, X, Y, Z);
		if (IsPlayerInRangeOfPoint(playerid, 9.0,
			X,
			Y,
			Z) && i != MyVehicle)
		{
		    return i;
		}
	}
	return false;
}
public ShowLicenciasToPlayer(playerid, playeridshow)
{
	new MsgLicenciasShow[MAX_TEXT_CHAT];
	SendClientMessage(playeridshow, COLOR_MESSAGES[3], "............:::::Licencias:::::............");
	for (new i = 0; i <= 6; i++)
	{
	    format(MsgLicenciasShow, sizeof(MsgLicenciasShow), "%s: %s", LicenciasNames[i], SiOrNo[PlayersData[playerid][Licencias][i]]);
	    SendClientMessage(playeridshow, COLOR_MESSAGES[3], MsgLicenciasShow);
	}
    format(MsgLicenciasShow, sizeof(MsgLicenciasShow), "%s: %s", LicenciasNames[7], SiOrNo[PlayersData[playerid][LicenciaPesca]]);
    SendClientMessage(playeridshow, COLOR_MESSAGES[3], MsgLicenciasShow);
}
public ShowIdiomasToPlayer(playerid, playeridshow)
{
	new MsgIdiomasShow[MAX_TEXT_CHAT];
	SendClientMessage(playeridshow, COLOR_MESSAGES[3], "............:::::Idiomas:::::............");
	for (new i = 0; i <= 5; i++)
	{
	    format(MsgIdiomasShow, sizeof(MsgIdiomasShow), "%s: %s", IdiomasNames[i], SiOrNo[PlayersData[playerid][Idiomas][i]]);
	    SendClientMessage(playeridshow, COLOR_MESSAGES[3], MsgIdiomasShow);
	}
}
public SendChatStreamIdioma(playerid, text[], idiomaid)
{
	new Float:X, Float:Y, Float:Z;
	new MsgSendChat[MAX_TEXT_CHAT];
	new MsgSendChatDesconocido[MAX_TEXT_CHAT];
	GetPlayerPos(playerid,X,Y,Z);
	format(MsgSendChat, sizeof(MsgSendChat), "*%s [%s]: %s", PlayersDataOnline[playerid][NameOnlineFix], IdiomasNames[idiomaid], text);
	format(MsgSendChatDesconocido, sizeof(MsgSendChatDesconocido), "*%s [%s]: [No entendiste ninguna palabra]", PlayersDataOnline[playerid][NameOnlineFix], IdiomasNames[idiomaid]);
	for(new i=0;i<MAX_PLAYERS;i++)
	{
	    if(IsPlayerConnected(i) && IsPlayerInRangeOfPoint(i,30.0,X,Y,Z))
	    {
		    if(IsPlayerInRangeOfPoint(i,5.0,X,Y,Z))
		    {
		        if ( PlayersData[i][Idiomas][idiomaid] )
		        {
		    		SendClientMessage(i, SendChatStreamColors[0],MsgSendChat);
	    		}
	    		else
	    		{
		    		SendClientMessage(i, SendChatStreamColors[0],MsgSendChatDesconocido);
				}
			}
		    else if(IsPlayerInRangeOfPoint(i,10.0,X,Y,Z))
		    {
		        if ( PlayersData[i][Idiomas][idiomaid] )
		        {
		    		SendClientMessage(i, SendChatStreamColors[1],MsgSendChat);
	    		}
	    		else
	    		{
		    		SendClientMessage(i, SendChatStreamColors[1],MsgSendChatDesconocido);
				}
			}
		    else if(IsPlayerInRangeOfPoint(i,15.0,X,Y,Z))
		    {
		        if ( PlayersData[i][Idiomas][idiomaid] )
		        {
		    		SendClientMessage(i, SendChatStreamColors[2],MsgSendChat);
	    		}
	    		else
	    		{
		    		SendClientMessage(i, SendChatStreamColors[2],MsgSendChatDesconocido);
				}
			}
		    else if(IsPlayerInRangeOfPoint(i,20.0,X,Y,Z))
		    {
		        if ( PlayersData[i][Idiomas][idiomaid] )
		        {
		    		SendClientMessage(i, SendChatStreamColors[3],MsgSendChat);
	    		}
	    		else
	    		{
		    		SendClientMessage(i, SendChatStreamColors[3],MsgSendChatDesconocido);
				}
			}
		    else if(IsPlayerInRangeOfPoint(i,25.0,X,Y,Z))
		    {
		        if ( PlayersData[i][Idiomas][idiomaid] )
		        {
		    		SendClientMessage(i, SendChatStreamColors[4],MsgSendChat);
	    		}
	    		else
	    		{
		    		SendClientMessage(i, SendChatStreamColors[4],MsgSendChatDesconocido);
				}
			}
		    else if(IsPlayerInRangeOfPoint(i,30.0,X,Y,Z))
		    {
		        if ( PlayersData[i][Idiomas][idiomaid] )
		        {
		    		SendClientMessage(i, SendChatStreamColors[5],MsgSendChat);
	    		}
	    		else
	    		{
		    		SendClientMessage(i, SendChatStreamColors[5],MsgSendChatDesconocido);
				}
			}
		}
	}
}
public LoadGasolineras()
{
	Gasolineras[MAX_GASOLINERAS][PosX]       = 1941.8757;
	Gasolineras[MAX_GASOLINERAS][PosY]       = -1772.9500;
	Gasolineras[MAX_GASOLINERAS][PosZ]       = 13.3906;

	MAX_GASOLINERAS++;
	Gasolineras[MAX_GASOLINERAS][PosX]       = 1003.6893;
	Gasolineras[MAX_GASOLINERAS][PosY]       = -936.8884;
	Gasolineras[MAX_GASOLINERAS][PosZ]       = 42.3281;

	MAX_GASOLINERAS++;
	Gasolineras[MAX_GASOLINERAS][PosX]       = 1382.0477;
	Gasolineras[MAX_GASOLINERAS][PosY]       = 459.5733;
	Gasolineras[MAX_GASOLINERAS][PosZ]       = 19.9506;

	MAX_GASOLINERAS++;
	Gasolineras[MAX_GASOLINERAS][PosX]       = 655.9045;
	Gasolineras[MAX_GASOLINERAS][PosY]       = -564.9619;
	Gasolineras[MAX_GASOLINERAS][PosZ]       = 16.3359;

	MAX_GASOLINERAS++;
	Gasolineras[MAX_GASOLINERAS][PosX]       = -94.3134;
	Gasolineras[MAX_GASOLINERAS][PosY]       = -1167.7059;
	Gasolineras[MAX_GASOLINERAS][PosZ]       = 2.5095;

	MAX_GASOLINERAS++;
	Gasolineras[MAX_GASOLINERAS][PosX]       = -1605.8174;
	Gasolineras[MAX_GASOLINERAS][PosY]       = -2714.1812;
	Gasolineras[MAX_GASOLINERAS][PosZ]       = 48.5335;

	MAX_GASOLINERAS++;
	Gasolineras[MAX_GASOLINERAS][PosX]       = -2244.1245;
	Gasolineras[MAX_GASOLINERAS][PosY]       = -2560.6711;
	Gasolineras[MAX_GASOLINERAS][PosZ]       = 31.9219;

	MAX_GASOLINERAS++;
	Gasolineras[MAX_GASOLINERAS][PosX]       = -2026.7905;
	Gasolineras[MAX_GASOLINERAS][PosY]       = 156.6203;
	Gasolineras[MAX_GASOLINERAS][PosZ]       = 29.0391;

	MAX_GASOLINERAS++;
	Gasolineras[MAX_GASOLINERAS][PosX]       = -2410.9126;
	Gasolineras[MAX_GASOLINERAS][PosY]       = 976.2447;
	Gasolineras[MAX_GASOLINERAS][PosZ]       = 45.2969;

	MAX_GASOLINERAS++;
	Gasolineras[MAX_GASOLINERAS][PosX]       = -2968.8276;
	Gasolineras[MAX_GASOLINERAS][PosY]       = 462.4414;
	Gasolineras[MAX_GASOLINERAS][PosZ]       = 4.9141;

	MAX_GASOLINERAS++; // LSPD
	Gasolineras[MAX_GASOLINERAS][PosX]       = 1601.4536;
	Gasolineras[MAX_GASOLINERAS][PosY]       = -1710.0747;
	Gasolineras[MAX_GASOLINERAS][PosZ]       = 5.8906;

	MAX_GASOLINERAS++; // SFPD
	Gasolineras[MAX_GASOLINERAS][PosX]       = -1638.7878;
	Gasolineras[MAX_GASOLINERAS][PosY]       = 692.7825;
	Gasolineras[MAX_GASOLINERAS][PosZ]       = -5.2422;

	MAX_GASOLINERAS++; // SFPD CERCA DE LA POLICIA 1
	Gasolineras[MAX_GASOLINERAS][PosX]       = -1672.1112;
	Gasolineras[MAX_GASOLINERAS][PosY]       = 410.0213;
	Gasolineras[MAX_GASOLINERAS][PosZ]       = 7.3984;

	MAX_GASOLINERAS++; //SFPD CERCA DE LA POLICIA 2
	Gasolineras[MAX_GASOLINERAS][PosX]       = -1678.8711;
	Gasolineras[MAX_GASOLINERAS][PosY]       = 416.1111;
	Gasolineras[MAX_GASOLINERAS][PosZ]       = 7.6771;

	MAX_GASOLINERAS++; // Taller LS 2
	Gasolineras[MAX_GASOLINERAS][PosX]       = 1788.7537;
	Gasolineras[MAX_GASOLINERAS][PosY]       = -2043.5769;
	Gasolineras[MAX_GASOLINERAS][PosZ]       = 13.5417;

	MAX_GASOLINERAS++; // LS Botes 1
	Gasolineras[MAX_GASOLINERAS][PosX]       = 851.4378;
	Gasolineras[MAX_GASOLINERAS][PosY]       = -2086.6902;
	Gasolineras[MAX_GASOLINERAS][PosZ]       = 1.3205;
	
	MAX_GASOLINERAS++; // LS Botes 2
	Gasolineras[MAX_GASOLINERAS][PosX]       = 851.3387;
	Gasolineras[MAX_GASOLINERAS][PosY]       = -2079.0093;
	Gasolineras[MAX_GASOLINERAS][PosZ]       = 1.3205;

	MAX_GASOLINERAS++; // LS Botes 3
	Gasolineras[MAX_GASOLINERAS][PosX]       = 820.9417;
	Gasolineras[MAX_GASOLINERAS][PosY]       = -2070.0710;
	Gasolineras[MAX_GASOLINERAS][PosZ]       = 1.3205;
	
	MAX_GASOLINERAS++; // LS Botes 4
	Gasolineras[MAX_GASOLINERAS][PosX]       = 820.9888;
	Gasolineras[MAX_GASOLINERAS][PosY]       = -2079.0459;
	Gasolineras[MAX_GASOLINERAS][PosZ]       = 1.3205;

	MAX_GASOLINERAS++; // SF Botes 1
	Gasolineras[MAX_GASOLINERAS][PosX]       = -1451.9092;
	Gasolineras[MAX_GASOLINERAS][PosY]       = 806.9544;
	Gasolineras[MAX_GASOLINERAS][PosZ]       = 1.3205;
	
	MAX_GASOLINERAS++; // SF Botes 2
	Gasolineras[MAX_GASOLINERAS][PosX]       = -1451.7827;
	Gasolineras[MAX_GASOLINERAS][PosY]       = 817.9048;
	Gasolineras[MAX_GASOLINERAS][PosZ]       = 1.3205;


	new DirBD[50];
	format(DirBD, sizeof(DirBD), "%sGasolineras.ulp", DIR_MISC);

	if ( fexist(DirBD) )
	{
	    new GasData[MAX_PLAYER_DATA];
	    new GasDataSlots[MAX_GASOLINERAS_COUNT][30];
		new File:LoadGas = fopen(DirBD, io_read);
		fread(LoadGas, GasData);
		fclose(LoadGas);

		new PosSplitAfter = 0;
		for ( new i = 0; i <= MAX_GASOLINERAS; i++ )
		{
			PosSplitAfter = strfind(GasData, ",", false);
			strmid(GasDataSlots[i], GasData, 0, PosSplitAfter, sizeof(GasData));
			strdel(GasData, 0, PosSplitAfter + 1);
			Gasolineras[i][Fuel]	= strval(GasDataSlots[i]);
			// printf("%i", Gasolineras[i][Fuel]);
			CreateDynamicMapIconULP(Gasolineras[i][PosX], Gasolineras[i][PosY], Gasolineras[i][PosZ], 56);
		}
	}
	else
	{
	    print(" ERROR AL CARGAR LAS GASOLINERAS !!!!!!");
	}
}
public SaveGasolineras()
{
	new DirBD[50];
	format(DirBD, sizeof(DirBD), "%sGasolineras.ulp", DIR_MISC);

	new GasData[MAX_PLAYER_DATA];
	new TempConvert[MAX_PLAYER_DATA];
	for (new i = 0; i <= MAX_GASOLINERAS; i++)
	{
	    format(TempConvert, sizeof(TempConvert), "%i,", Gasolineras[i][Fuel]);
        strcat(GasData, TempConvert, sizeof(GasData));
	}

	new File:SaveGas = fopen(DirBD, io_write);
	fwrite(SaveGas, GasData);
	fclose(SaveGas);
}
public GetMyNearGas(playerid)
{
	for (new i = 0; i <= MAX_GASOLINERAS; i++)
	{
		if (IsPlayerInRangeOfPoint(playerid, 8.0,
			Gasolineras[i][PosX],
			Gasolineras[i][PosY],
			Gasolineras[i][PosZ]) )
		{
		    return i;
		}
	}
	SendInfoMessage(playerid, 0, "519", "No hay ninguna gasolinera a su alrededor");
	return -1;
}
public LoadIconsPlayers()
{
	// CAJEROS
	CreateDynamicMapIconULP(1918.806763, -1765.879883, 13.189775,  52);
	CreateDynamicMapIconULP(1367.271484, -1307.826904, 13.189775,  52);
	CreateDynamicMapIconULP(1346.532349, -1759.225220, 13.158481,  52);
	CreateDynamicMapIconULP(-79.300514, -1171.916016, 1.777080,  52);
	CreateDynamicMapIconULP(-2095.375732, -95.220436, 34.806961,  52);
	CreateDynamicMapIconULP(-1990.503174, 1345.649414, 6.827043,  52);

	// Iglesia SF
	CreateDynamicMapIconULP(-1989.6453, 1117.8682, 54.4688,  25);
	// Iglesia LS
	CreateDynamicMapIconULP(2233.8840, -1333.2333, 23.9815,  25);

	// Museo SF
	CreateDynamicMapIconULP(-2458.8830566406, 127.17351531982, 35.175952911377,  26);
	CreateDynamicMapIconULP(1219.2227783203, -1811.7043457031, 16.59375,  26);
	
	// Supermercado SF
	CreateDynamicMapIconULP(-2442.7781,754.3596,35.1719,  38);
	
	// Supermercado LS
	CreateDynamicMapIconULP(1433.2834,-997.1200,57.5156,  38);
	
	// TALLER SF
	CreateDynamicMapIconULP(-2974.1428,467.2453,4.9141, 27);

	// Motel
	CreateDynamicMapIconULP(-328.1154,-879.5229,52.5222,  25);

	// PUERTOS
	CreateDynamicMapIconULP(-1461.0663,	742.7130,	1.5133,  9); // PUERTO SF
	CreateDynamicMapIconULP(951.7868,	-2005.9248,	1.6664,  9); // PUERTO LS

	// PETROLERA
	CreateDynamicMapIconULP(-3634.8325,	1884.3127,	2.1854,  56);

	// BANCO
	CreateDynamicMapIconULP(-2766.0508,	375.5933,	6.3347,  52);

	// ISLA
	CreateDynamicMapIconULP(552.0045,	-2982.3110, 10.9435,  9);

	// LSPD y SFPD
	CreateDynamicMapIconULP(1554.5630,-1675.3883,16.1953,  20);
	CreateDynamicMapIconULP(-1604.6736,712.1967,13.8672,  30);

	// SFMD
	CreateDynamicMapIconULP(-2655.0632,638.5620,14.4531,  22);
	// LSMD
	CreateDynamicMapIconULP(1172.0780,-1324.5406,15.4056,  22);

	// Teatro
	CreateDynamicMapIconULP(-2227.0073,253.8429,35.6081,  42); // SF
	CreateDynamicMapIconULP(1287.7460,-1165.7391,41.0554,  42); // LS

	// Concesionaríos
	CreateDynamicMapIconULP(546.3749,-1293.4868,17.2482,  55);
	CreateDynamicMapIconULP(-1661.5085,1212.9225,21.1563,  55);
	CreateDynamicMapIconULP(-1951.7966,279.0199,40.4895,  55);

	// TALLER LS
	CreateDynamicMapIconULP(1803.5313,-2035.7900,13.5206, 27);

	// Recreations Park
	CreateDynamicMapIconULP(2850.9480,-1532.3707,11.0991,  61);

}
public VerificarCochesVencidos()
{
	for (new i = 1; i <= MAX_CAR_DUENO; i++ )
	{
		if ( strlen(DataCars[i][Dueno]) != 1 )
		{
		    if ( DataCars[i][Time] <= 1 )
		    {
				RemoveDuenoOfVehicle(i, 3);
			}
			else
			{
				DataCars[i][Time]--;
			}
		}
	}
}
public LoadTypeJails()
{
	JailsType[0][PosX_Preso] = 226.8328;
	JailsType[0][PosY_Preso] = 108.7341;
	JailsType[0][PosZ_Preso] = 999.0156;
	JailsType[0][PosZZ_Preso] = 356.5217;

	JailsType[0][PosX_Liberado] = 250.6270;
	JailsType[0][PosY_Liberado] = 113.2188;
	JailsType[0][PosZ_Liberado] = 1003.2188;
	JailsType[0][PosZZ_Liberado] = 91.9038;

	JailsType[0][Interior_Preso] = 10;
	JailsType[0][Interior_Liberado] = 10;

	JailsType[0][WorldLiberado] 	= WORLD_DEFAULT_INTERIOR;
	///////////////////////////////

	JailsType[1][PosX_Preso] = 263.6870;
	JailsType[1][PosY_Preso] = 77.9530;
	JailsType[1][PosZ_Preso] = 1001.0391;
	JailsType[1][PosZZ_Preso] = 275.9217;

	JailsType[1][PosX_Liberado] = 243.7247;
	JailsType[1][PosY_Liberado] = 70.2739;
	JailsType[1][PosZ_Liberado] = 1003.6406;
	JailsType[1][PosZZ_Liberado] = 270.1367;

	JailsType[1][Interior_Preso] = 6;
	JailsType[1][Interior_Liberado] = 6;

	JailsType[1][WorldLiberado] 	= WORLD_DEFAULT_INTERIOR;
	///////////////////////////////

	JailsType[2][PosX_Preso] = 317.9501;
	JailsType[2][PosY_Preso] = 313.0646;
	JailsType[2][PosZ_Preso] = 1001.0391;
	JailsType[2][PosZZ_Preso] = 999.1484;

	JailsType[2][PosX_Liberado] = 1457.5309;
	JailsType[2][PosY_Liberado] = -1662.5865;
	JailsType[2][PosZ_Liberado] = 14.0469;
	JailsType[2][PosZZ_Liberado] = 270.5110;

	JailsType[2][Interior_Preso] = 5;
	JailsType[2][Interior_Liberado] = 0;

	JailsType[2][WorldLiberado] 	= 0;


	///////////////////////////////
}
public GetPosSpace(text[], option)
{
	new SavePos = -1;
	for (new i = 1; i <= option; i++)
	{
		SavePos = strfind(text, " ", false, SavePos + 1);
	}
	return SavePos;
}
public LoadTypeHouse()
{
	// 0 ///////////////////////////////////////////////////////////////////////// Typo: Cuatro Cuartos
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Cuatro Cuartos");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = 2365.3381;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = -1135.3933;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 1050.8750;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 1.2460;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 8;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreatePickup   (1239,    1,    TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);

	// 1 ///////////////////////////////////////////////////////////////////////// Typo: Un Cuarto
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Un Cuarto");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = 2308.7741699219;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = -1212.9265136719;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 1049.0234375;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 2.8829;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 6;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreatePickup   (1239,    1,    TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);

	// 2 ///////////////////////////////////////////////////////////////////////// Typo: Bungalows Clase I
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Bungalows Clase I");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = 2468.6477;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = -1698.2053;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 1013.5078;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 91.2169;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 2;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreatePickup   (1239,    1,    TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);

	// 3 ///////////////////////////////////////////////////////////////////////// Typo: Bungalows Clase I
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Bungalows Clase I");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = 2524.0813;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = -1679.4822;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 1015.4986;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 268.9842;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 1;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreatePickup   (1239,    1,    TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);

	// 4 ///////////////////////////////////////////////////////////////////////// Typo: Estudio
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Estudio");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = 266.7592;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = 305.0596;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 999.1484;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 270.5936;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 2;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreatePickup   (1239,    1,    TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);

	// 5 ///////////////////////////////////////////////////////////////////////// Typo: Trailer
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Trailer");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = 2.0276;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = -3.0860;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 999.4284;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 83.7629;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 2;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreatePickup   (1239,    1,    TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);

	// 6 ///////////////////////////////////////////////////////////////////////// Typo: Tres Cuartos
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Tres Cuartos");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = 2233.7747;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = -1115.0977;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 1050.8828;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 355.3266;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 5;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreatePickup   (1239,    1,    TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);

	// 7 ///////////////////////////////////////////////////////////////////////// Typo: Dos Cuartos
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Dos Cuartos");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = 2259.5925;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = -1136.0444;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 1050.6328;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 271.6231;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 10;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreatePickup   (1239,    1,    TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);

	// 8 ///////////////////////////////////////////////////////////////////////// Typo: Chalet
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Chalet");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = 235.3826;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = 1186.8677;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 1080.2578;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 358.2490;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 3;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreatePickup   (1239,    1,    TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);

	// 9 ///////////////////////////////////////////////////////////////////////// Typo: Bungalows Clase II
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Bungalows Clase II");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = 226.1616;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = 1239.9657;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 1082.1406;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 87.6160;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 2;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreatePickup   (1239,    1,    TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);

	// 10 ///////////////////////////////////////////////////////////////////////// Typo: Un Cuarto
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Un Cuarto");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = 223.2299;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = 1287.2865;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 1082.1406;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 2.1973;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 1;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreatePickup   (1239,    1,    TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);

	// 11 ///////////////////////////////////////////////////////////////////////// Typo: Finca
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Finca");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = 226.6335;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = 1114.3988;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 1080.9946;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 270.7229;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 5;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreatePickup   (1239,    1,    TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);

	// 12 ///////////////////////////////////////////////////////////////////////// Typo: Cuatro Cuartos
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Cuatro Cuartos");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = 295.1449;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = 1472.2834;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 1080.2578;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 1.6496;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 15;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreatePickup   (1239,    1,    TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);


	// 13 ///////////////////////////////////////////////////////////////////////// Typo: Bungalows Clase III
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Bungalows Clase III");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = 446.9776;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = 1397.3701;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 1084.3047;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 359.0408;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 2;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreatePickup   (1239,    1,    TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);

	// 14 ///////////////////////////////////////////////////////////////////////// Typo: Bungalows Clase II
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Bungalows Clase II");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = 261.1623;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = 1284.5057;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 1080.2578;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 359.4435;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 4;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreatePickup   (1239,    1,    TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);

	// 15 ///////////////////////////////////////////////////////////////////////// Typo: Bungalows Clase III
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Bungalows Clase III");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = 24.1222;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = 1340.2295;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 1084.3750;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 4.1435;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 10;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreatePickup   (1239,    1,    TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);

	// 16 ///////////////////////////////////////////////////////////////////////// Typo: Bungalows Clase I
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Bungalows Clase I");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = 221.8144;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = 1140.5055;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 1082.6094;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 5.8735;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 4;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreatePickup   (1239,    1,    TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);


	// 17 ///////////////////////////////////////////////////////////////////////// Typo: Un Cuarto
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Un Cuarto");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = 446.71649169922;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = 506.32403564453;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 1001.4194946289;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 271.9994;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 12;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreatePickup   (1239,    1,    TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);

	// 18 ///////////////////////////////////////////////////////////////////////// Typo: Chalet
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Chalet");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = -260.6692;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = 1456.6316;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 1084.3672;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 91.0199;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 4;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreatePickup   (1239,    1,    TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);

	// 19 ///////////////////////////////////////////////////////////////////////// Typo: Bungalows Clase III
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Bungalows Clase III");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = 22.8068;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = 1403.4597;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 1084.4370;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 355.7854;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 5;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreatePickup   (1239,    1,    TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);

	// 20 ///////////////////////////////////////////////////////////////////////// Typo: Mansión
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Mansi\xa6n");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = 140.5783;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = 1366.0577;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 1083.8594;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 0.5053;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 5;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreatePickup   (1239,    1,    TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);

	// 21 ///////////////////////////////////////////////////////////////////////// Typo: Mansión
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Mansi\xa6n");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = 234.1057;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = 1063.8470;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 1084.2120;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 355.3038;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 6;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreatePickup   (1239,    1,    TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);

	// 22 ///////////////////////////////////////////////////////////////////////// Typo: Bungalows Clase II
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Bungalows Clase II");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = -68.7345;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = 1351.7261;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 1080.2109;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 356.4911;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 6;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreatePickup   (1239,    1,    TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);

	// 23 ///////////////////////////////////////////////////////////////////////// Typo: Finca
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Finca");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = -283.5833;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = 1471.1552;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 1084.3750;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 89.1725;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 15;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreatePickup   (1239,    1,    TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);

	// 24 ///////////////////////////////////////////////////////////////////////// Typo: Tres Cuartos
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Tres Cuartos");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = 2218.2312;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = -1076.3168;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 1050.4844;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 90.4850;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 1;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreatePickup   (1239,    1,    TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);

	// 25 ///////////////////////////////////////////////////////////////////////// Typo: Bungalows Clase II
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Bungalows Clase II");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = 2237.5933;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = -1081.4789;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 1049.0234;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 1.4616;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 2;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreatePickup   (1239,    1,    TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);

	// 26 ///////////////////////////////////////////////////////////////////////// Typo: Cuatro Cuartos
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Cuatro Cuartos");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = -42.6557;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = 1412.5956;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 1084.4297;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 178.7076;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 8;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreatePickup   (1239,    1,    TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);

	// 27 ///////////////////////////////////////////////////////////////////////// Typo: Finca
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Finca");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = 83.1146;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = 1322.4788;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 1083.8662;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 1.0887;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 9;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreatePickup   (1239,    1,    TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);

	// 28 ///////////////////////////////////////////////////////////////////////// Typo: Bungalows Clase II
	MAX_HOUSE_TYPE++;
	format(TypeHouse[MAX_HOUSE_TYPE][TypeName], MAX_PLAYER_NAME, "Bungalows Clase II");
	TypeHouse[MAX_HOUSE_TYPE][PosX]    = 260.8197;
	TypeHouse[MAX_HOUSE_TYPE][PosY]    = 1237.4691;
	TypeHouse[MAX_HOUSE_TYPE][PosZ]    = 1084.2578;
	TypeHouse[MAX_HOUSE_TYPE][PosZZ]    = 3.2391;
	TypeHouse[MAX_HOUSE_TYPE][Interior] = 9;
	TypeHouse[MAX_HOUSE_TYPE][PickupId] = CreatePickup   (1239,    1,    TypeHouse[MAX_HOUSE_TYPE][PosX], TypeHouse[MAX_HOUSE_TYPE][PosY], TypeHouse[MAX_HOUSE_TYPE][PosZ], -1);

}

public LoadHouse(houseid)
{
	new query[100], Cache:cacheid, casaExiste;
	format(query, 100, "SELECT * FROM `%s` WHERE ID=%i;", DIR_HOUSES, houseid);
	cacheid = mysql_query(dataBase, query);
	cache_get_row_count(casaExiste);

	if (casaExiste)
	{
		new SplitPos[2] = 0;

		HouseData[houseid][StationID]        = -1;
		HouseData[houseid][VolumenHouse]     = DEFAULT_AUDIO_VOLUMEN;

		cache_get_value_name(0, "Dueno", HouseData[houseid][Dueno], MAX_PLAYER_NAME);
		cache_get_value_name(0, "Armario", HouseData[houseid][ArmarioData], 500);
		for(new a=0; a !=7; a++)
		{
		    new ArmarioDataPart[2][10];
			SplitPos[0] = strfind(HouseData[houseid][ArmarioData], "|", false);
			SplitPos[1] = strfind(HouseData[houseid][ArmarioData], ",", false);
			strmid(ArmarioDataPart[0], HouseData[houseid][ArmarioData], 0, SplitPos[0]);
			strmid(ArmarioDataPart[1], HouseData[houseid][ArmarioData], SplitPos[0]+1, SplitPos[1]);
			strdel(HouseData[houseid][ArmarioData], 0, SplitPos[1]+1);

			HouseData[houseid][ArmarioWeapon][a] = strval(ArmarioDataPart[0]);
			HouseData[houseid][ArmarioAmmo][a]   = strval(ArmarioDataPart[1]);
		}
		cache_get_value_name_float(0, "Chaleco", HouseData[houseid][Chaleco]);
		cache_get_value_name_int(0, "Drogas", HouseData[houseid][Drogas]);
		cache_get_value_name_int(0, "Ganzuas", HouseData[houseid][Ganzuas]);
		cache_get_value_name_float(0, "PosX", HouseData[houseid][PosX]);
		cache_get_value_name_float(0, "PosY", HouseData[houseid][PosY]);
		cache_get_value_name_float(0, "PosZ", HouseData[houseid][PosZ]);
		cache_get_value_name_float(0, "PosZZ", HouseData[houseid][PosZZ]);
		cache_get_value_name_int(0, "Interior", HouseData[houseid][Interior]);
		cache_get_value_name_int(0, "TypeHouseId", HouseData[houseid][TypeHouseId]);
		HouseData[houseid][PickupId] = CreatePickup	(1273, 	1, 	HouseData[houseid][PosX], HouseData[houseid][PosY], HouseData[houseid][PosZ],	 	-1);
		cache_get_value_name_int(0, "PriceRent", HouseData[houseid][PriceRent]);
		cache_get_value_name_int(0, "Level", HouseData[houseid][Level]);
		HouseData[houseid][World] = houseid;
		cache_get_value_name_int(0, "Seguro", HouseData[houseid][Lock]);
		cache_get_value_name_int(0, "Price", HouseData[houseid][Price]);
		cache_get_value_name_int(0, "Bombas", HouseData[houseid][Bombas]);
		cache_get_value_name_int(0, "Deposito", HouseData[houseid][Deposito]);
		cache_get_value_name_int(0, "Materiales", HouseData[houseid][Materiales]);
		cache_get_value_name_int(0, "ArmarioLock", HouseData[houseid][ArmarioLock]);

		for(new garageid=0; garageid != MAX_GARAGE_FOR_HOUSE; garageid++)
		{
		    new
		    GarageDIR[10],
			GarageData[500],
		    GarageDataPart[16][40];

		    format(GarageDIR, 20, "Garage%i", garageid);
		    cache_get_value_name(0, GarageDIR, GarageData, 500);
            for(new g=0;  g!=16; g++)
			{
				SplitPos[0] = strfind(GarageData, "|", false);
				strmid(GarageDataPart[g], GarageData, 0, SplitPos[0]);
				strdel(GarageData, 0, SplitPos[0]+1);
			}
			Garages[houseid][garageid][Xg]          = floatstr(GarageDataPart[0]);
			Garages[houseid][garageid][Yg]          = floatstr(GarageDataPart[1]);
			Garages[houseid][garageid][Zg]          = floatstr(GarageDataPart[2]);
			Garages[houseid][garageid][ZZg]         = floatstr(GarageDataPart[3]);
			Garages[houseid][garageid][XgIn]        = floatstr(GarageDataPart[4]);
			Garages[houseid][garageid][YgIn]        = floatstr(GarageDataPart[5]);
			Garages[houseid][garageid][ZgIn]        = floatstr(GarageDataPart[6]);
			Garages[houseid][garageid][ZZgIn]       = floatstr(GarageDataPart[7]);
			Garages[houseid][garageid][XgOut]       = floatstr(GarageDataPart[8]);
			Garages[houseid][garageid][YgOut]       = floatstr(GarageDataPart[9]);
			Garages[houseid][garageid][ZgOut]       = floatstr(GarageDataPart[10]);
			Garages[houseid][garageid][ZZgOut]      = floatstr(GarageDataPart[11]);
			Garages[houseid][garageid][LockIn]      = strval(GarageDataPart[12]);
			Garages[houseid][garageid][LockOut]     = strval(GarageDataPart[13]);
			Garages[houseid][garageid][TypeGarageE] = strval(GarageDataPart[14]);
			Garages[houseid][garageid][WorldG]      = strval(GarageDataPart[15]);
		}
		cache_get_value_name(0, "HouseFriend0", HouseFriends[houseid][0][Name], MAX_PLAYER_NAME);
		cache_get_value_name(0, "HouseFriend1", HouseFriends[houseid][1][Name], MAX_PLAYER_NAME);
		cache_get_value_name(0, "HouseFriend2", HouseFriends[houseid][2][Name], MAX_PLAYER_NAME);
		cache_get_value_name(0, "HouseFriend3", HouseFriends[houseid][3][Name], MAX_PLAYER_NAME);
		cache_get_value_name(0, "HouseFriend4", HouseFriends[houseid][4][Name], MAX_PLAYER_NAME);
		cache_get_value_name(0, "Refrigerador", HouseData[houseid][RefrigeradorData], MAX_PLAYER_NAME);
		for(new r=0; r !=MAX_REFRIGERADOR_SLOTS_COUNT; r++)
		{
		    new RefrigeradorDataSlot[2][10];
			SplitPos[0] = strfind(HouseData[houseid][RefrigeradorData], "|", false);
			SplitPos[1] = strfind(HouseData[houseid][RefrigeradorData], ",", false);
			strmid(RefrigeradorDataSlot[0], HouseData[houseid][RefrigeradorData], 0, SplitPos[0]);
			strmid(RefrigeradorDataSlot[1], HouseData[houseid][RefrigeradorData], SplitPos[0]+1, SplitPos[1]);
			strdel(HouseData[houseid][RefrigeradorData], 0, SplitPos[1]+1);

			Refrigerador[houseid][Articulo][r] 	= strval(RefrigeradorDataSlot[0]);
			Refrigerador[houseid][Cantidad][r] 	= strval(RefrigeradorDataSlot[1]);
		}
		cache_get_value_name_int(0, "RefrigeradorLock", HouseData[houseid][RefrigeradorLock]);
		cache_get_value_name_int(0, "StationID", HouseData[houseid][StationID]);
		cache_get_value_name_int(0, "VolumenHouse", HouseData[houseid][VolumenHouse]);
		cache_get_value_name(0, "EcualizadorHouse", HouseData[houseid][EcualizadorData], MAX_PLAYER_NAME);
		for(new e=0; e !=9; e++)
		{
		    new EcualizadorDataIndex[2];
			SplitPos[0] = strfind(HouseData[houseid][EcualizadorData], "|", false);
			strmid(EcualizadorDataIndex, HouseData[houseid][EcualizadorData], 0, SplitPos[0]);
			strdel(HouseData[houseid][EcualizadorData], 0, SplitPos[0]+1);

			HouseData[houseid][EcualizadorHouse][e] = strval(EcualizadorDataIndex);
		}
		cache_get_value_name_int(0, "GavetaLock", HouseData[houseid][GavetaLock]);
		cache_get_value_name_int(0, "GavetaObjects0", HouseData[houseid][GavetaObjects][0]);
		cache_get_value_name_int(0, "GavetaObjects1", HouseData[houseid][GavetaObjects][1]);
		cache_get_value_name_int(0, "GavetaObjects2", HouseData[houseid][GavetaObjects][2]);
		cache_get_value_name_int(0, "GavetaObjects3", HouseData[houseid][GavetaObjects][3]);
		cache_get_value_name_int(0, "GavetaObjects4", HouseData[houseid][GavetaObjects][4]);
		cache_get_value_name_int(0, "GavetaObjects5", HouseData[houseid][GavetaObjects][5]);
		cache_get_value_name_int(0, "GavetaObjects6", HouseData[houseid][GavetaObjects][6]);
		cache_get_value_name_int(0, "GavetaObjects7", HouseData[houseid][GavetaObjects][7]);

		CasasTextDraws[houseid] = TextDrawCreateEx(180.0, 300.0, "Empty");
		TextDrawUseBox(CasasTextDraws[houseid], 1);
		TextDrawBackgroundColor(CasasTextDraws[houseid], 0x000000FF);
		TextDrawBoxColor(CasasTextDraws[houseid], 0x00000066);
		TextDrawTextSize(CasasTextDraws[houseid], 360.0, 380.0);
		TextDrawSetShadow(CasasTextDraws[houseid], 1);
		TextDrawLetterSize(CasasTextDraws[houseid], 0.4 , 1.1);

		ActTextDrawHouse(houseid);
	}
	cache_delete(cacheid);
	return casaExiste;
}

public SaveHouse(houseid, bool:update)
{
	new query[1000], Cache:cacheid, casaExiste;
	mysql_format(dataBase, query, 100, "SELECT `ID` FROM `%s` WHERE `ID`='%i';", DIR_HOUSES, houseid);
	cacheid = mysql_query(dataBase, query);
	cache_get_row_count(casaExiste);
	cache_delete(cacheid);

	if (!casaExiste)
	{
		format(query, 100, "INSERT INTO `%s` (`ID`) VALUES ('%i');", DIR_HOUSES, houseid);
		mysql_query(dataBase, query, false);
	}

	new tempString[500];

	format(query, 100, "UPDATE `%s` SET ", DIR_HOUSES);
	strcat(query, "`Dueno`='%e',`Armario`='");
	for(new i=0; i != 7; i++)
	{
		format(tempString, 500, "%i|%i,", HouseData[houseid][ArmarioWeapon][i], HouseData[houseid][ArmarioAmmo][i]);
		strcat(query, tempString, 1000);
	}
	strcat(query, "',`Chaleco`='%f',`Drogas`='%i',`Ganzuas`='%i',`PosX`='%f',`PosY`='%f',`PosZ`='%f',`PosZZ`='%f',`Interior`='%i',`TypeHouseId`='%i',");
	strcat(query, "`PriceRent`='%i',`Level`='%i',`Seguro`='%i',`Price`='%i',`Bombas`='%i',`Deposito`='%i',`Materiales`='%i',`ArmarioLock`='%i',`HouseFriend0`='%e',`HouseFriend1`='%e'");
	strcat(query, " WHERE `ID`='%i';");
	mysql_format(dataBase, query, 1000, query,
		HouseData[houseid][Dueno],
		HouseData[houseid][Chaleco],
		HouseData[houseid][Drogas],
		HouseData[houseid][Ganzuas],
		HouseData[houseid][PosX],
		HouseData[houseid][PosY],
		HouseData[houseid][PosZ],
		HouseData[houseid][PosZZ],
		HouseData[houseid][Interior],
		HouseData[houseid][TypeHouseId],

		HouseData[houseid][PriceRent],
		HouseData[houseid][Level],
		HouseData[houseid][Lock],
		HouseData[houseid][Price],
		HouseData[houseid][Bombas],
		HouseData[houseid][Deposito],
		HouseData[houseid][Materiales],
		HouseData[houseid][ArmarioLock],
		HouseFriends[houseid][0][Name],
		HouseFriends[houseid][1][Name],

		houseid);
	mysql_query(dataBase, query, false);

	format(query, 100, "UPDATE `%s` SET ", DIR_HOUSES);
	strcat(query, "`HouseFriend2`='%e',`HouseFriend3`='%e',`HouseFriend4`='%e',`Refrigerador`='");
	for(new i=0; i != 10; i++)
	{
		format(tempString, 100, "%i|%i,", Refrigerador[houseid][Articulo][i], Refrigerador[houseid][Cantidad][i]);
		strcat(query, tempString, 1000);
	}
	strcat(query, "',`RefrigeradorLock`='%i',`StationID`='%i',`VolumenHouse`='%i',`EcualizadorHouse`='");
	for(new i=0; i != 9; i++)
	{
		format(tempString, 100, "%i|", HouseData[houseid][EcualizadorHouse][i]);
		strcat(query, tempString, 1000);
	}
	strcat(query, "',`GavetaLock`='%i',`GavetaObjects0`='%i',`GavetaObjects1`='%i',`GavetaObjects2`='%i',`GavetaObjects3`='%i',");
	strcat(query, "`GavetaObjects4`='%i',`GavetaObjects5`='%i',`GavetaObjects6`='%i',`GavetaObjects7`='%i'");
	strcat(query, " WHERE `ID`='%i';");
	mysql_format(dataBase, query, 1000, query,

		HouseFriends[houseid][2][Name],
		HouseFriends[houseid][3][Name],
		HouseFriends[houseid][4][Name],

		HouseData[houseid][RefrigeradorLock],
		HouseData[houseid][StationID],
		HouseData[houseid][VolumenHouse],

		HouseData[houseid][GavetaLock],
		HouseData[houseid][GavetaObjects][0],
		HouseData[houseid][GavetaObjects][1],
		HouseData[houseid][GavetaObjects][2],
		HouseData[houseid][GavetaObjects][3],

		HouseData[houseid][GavetaObjects][4],
		HouseData[houseid][GavetaObjects][5],
		HouseData[houseid][GavetaObjects][6],
		HouseData[houseid][GavetaObjects][7],

		houseid);
	mysql_query(dataBase, query, false);
	
	for(new i=0; i != MAX_GARAGE_FOR_HOUSE; i++)
	{
		format(query, 100, "UPDATE `%s` SET `Garage%i`='", DIR_HOUSES, i);
		format(tempString, 500, "%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%i|%i|%i|%i|",
			Garages[houseid][i][Xg],
			Garages[houseid][i][Yg],
			Garages[houseid][i][Zg],
			Garages[houseid][i][ZZg],
			Garages[houseid][i][XgIn],
			Garages[houseid][i][YgIn],
			Garages[houseid][i][ZgIn],
			Garages[houseid][i][ZZgIn],
			Garages[houseid][i][XgOut],
			Garages[houseid][i][YgOut],
			Garages[houseid][i][ZgOut],
			Garages[houseid][i][ZZgOut],
			Garages[houseid][i][LockIn],
			Garages[houseid][i][LockOut],
			Garages[houseid][i][TypeGarageE],
			Garages[houseid][i][WorldG]);
		strcat(query, tempString, 1000);
		format(tempString, 100, "' WHERE `ID`='%i';", houseid);
		strcat(query, tempString, 1000);
		mysql_query(dataBase, query, false);
	}

	if ( update )
	{
		ActTextDrawHouse(houseid);
	}
}

public ActTextDrawHouse(houseid)
{
	new TextDrawHouseText[300];
	if ( strlen(HouseData[houseid][Dueno]) != 2 )
	{
		new PriceRentText[50];
		if ( HouseData[houseid][PriceRent] != 0 )
		{
		    format(PriceRentText, sizeof(PriceRentText), "$%i", HouseData[houseid][PriceRent]);
		}
		else
		{
			PriceRentText = "No se renta";
		}
		format(TextDrawHouseText, sizeof(TextDrawHouseText),
		"~B~Lugar: ~W~Casa~N~~G~Tipo: ~W~%s~N~~G~Garage: ~W~%s~N~~G~Propietario: ~W~%s~N~~G~Renta: ~W~%s~N~~G~Nivel: ~W~%i",
	        TypeHouse[HouseData[houseid][TypeHouseId]][TypeName],
	        SiOrNo[ExistGarageInHouse(houseid)],
			HouseData[houseid][Dueno],
			PriceRentText,
			HouseData[houseid][Level] );
	}
	else
	{
		format(TextDrawHouseText, sizeof(TextDrawHouseText),
		"~B~Lugar: ~W~Casa~N~~G~Tipo: ~W~%s~N~~G~Garage: ~W~%s~N~~G~Estado: ~W~¡En Venta!~N~~G~Precio: ~W~$%i~N~~G~Nivel: ~W~%i~N~~G~Use: ~R~/Comprar Casa",
	        TypeHouse[HouseData[houseid][TypeHouseId]][TypeName],
	        SiOrNo[ExistGarageInHouse(houseid)],
			HouseData[houseid][Price],
			HouseData[houseid][Level] );
	}
	TextDrawSetString(CasasTextDraws[houseid], TextDrawHouseText);
}
public CheckIsPlayerRentAndRemove(playerid, houseid)
{
	if ( IsPlayerConnected(playerid) )
	{
		if ( PlayersData[playerid][Alquiler] == houseid && strlen(HouseData[houseid][Dueno]) == 2 || PlayersData[playerid][Alquiler] == houseid && !HouseData[houseid][PriceRent])
		{
			PlayersData[playerid][Alquiler] = -1;
			PlayersData[playerid][House] 	= -1;
			SendInfoMessage(playerid, 3, "0", "Has sido desalojado de su alquiler");
		}
	}
}
public RemoveDuenoOfVehicle(vehicleid, option)
{
	new playerid = 499;
	format(PlayersDataOnline[playerid][NameOnline], MAX_PLAYER_NAME, "%s", DataCars[vehicleid][Dueno]);
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && IsVehicleMyVehicle(i, vehicleid) )
		{
			playerid = i;
			break;
		}
	}
	if ( playerid == 499 )
	{
		PlayersDataOnline[playerid][Spawn] = false;
		DataUserLoad(playerid);
	}
	new lastLock = DataCars[vehicleid][Lock];
	DataCars[vehicleid][Lock] = false;
	if ( lastLock )
	{
		ShowLockTextDraws(vehicleid, lastLock);
	}
	format(DataCars[vehicleid][Dueno], MAX_PLAYER_NAME, "0");
	PlayersData[playerid][Car] = -1;
	DataUserSave(playerid);
	SaveDataVehicle(vehicleid, DIR_VEHICLES);
	printf("Vehículo con ID[%i] vencido. Opción: %i", vehicleid, option);
	return playerid;
}
public RemoveDuenoOfHouse(houseid)
{
	new playerid = 499;
	format(PlayersDataOnline[playerid][NameOnline], MAX_PLAYER_NAME, "%s", HouseData[houseid][Dueno]);
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersData[i][House] == houseid )
		{
			playerid = i;
			break;
		}
	}

	if ( playerid == 499 )
	{
		PlayersDataOnline[playerid][Spawn] = false;
		DataUserLoad(playerid);
	}

    for ( new i = 0; i < MAX_PLAYERS; i++)
    {
		if ( i != playerid && IsPlayerConnected(i) &&  PlayersDataOnline[i][State] == 3 && PlayersData[i][Alquiler] == houseid )
		{
			PlayersData[i][Alquiler] = -1;
			PlayersData[i][House] 	= -1;
			SendInfoMessage(i, 3, "0", "Has sido desalojado de su alquiler!");
		}
	}
    format(HouseData[houseid][Dueno], MAX_PLAYER_NAME, "No");
    HouseData[houseid][Lock] = true;
    SaveHouse(houseid, true);

	for ( new i = 0;i < MAX_HOUSE_FRIENDS; i++)
	{
		format(HouseFriends[houseid][i][Name], MAX_PLAYER_NAME, "No");
	}

    PlayersData[playerid][House] = -1;
    PlayersData[playerid][Alquiler] = -1;

	DataUserSave(playerid);
	return playerid;
}
public RemoveDuenoOfBizz(bizzid)
{
	NegociosData[bizzid][Lock] = true;
    format(NegociosData[bizzid][Dueno], MAX_PLAYER_NAME, "0");
    format(NegociosData[bizzid][Extorsion], MAX_PLAYER_NAME, "No");
    DataSaveBizz(bizzid, true);
}
public ChangePasswordUser(playerid_admin, playeridname[], newpassword[])
{
	new playerid = 499;
	format(PlayersDataOnline[playerid][NameOnline], MAX_PLAYER_NAME, "%s", playeridname);

	if ( !IsValidName(PlayersDataOnline[playerid][NameOnline]) )
	{
		SendInfoMessage(playerid_admin, 0, "1463", "El nick que introdujo está deshabilitado por cuestiones de seguridad.");
	}
	else if ( DataUserLoad(playerid) )
	{
	    if ( PlayersData[playerid][Admin] == 9 )
	    {
			SendInfoMessage(playerid_admin, 0, "1464", "No existe ese jugador en la base de datos!");
			return false;
		}
	    new MsgChangePassword[MAX_TEXT_CHAT];
	    format(PlayersData[playerid][Password], 25, "%s", newpassword);
		PlayersDataOnline[playerid][Spawn] = false;
		format(MsgChangePassword, sizeof(MsgChangePassword), "Has cambiado la password de %s por: %s", playeridname, newpassword);
		SendInfoMessage(playerid_admin, 3, "0", MsgChangePassword);
		DataUserSave(playerid);
	}
	else
	{
		SendInfoMessage(playerid_admin, 0, "1465", "No existe ese jugador en la base de datos!");
	}
	return true;
}
public UnBanUser(playerid_admin, playeridname[], option)
{
	new playerid = 499;
	format(PlayersDataOnline[playerid][NameOnline], MAX_PLAYER_NAME, "%s", playeridname);

	if ( !IsValidName(PlayersDataOnline[playerid][NameOnline]) )
	{
		SendInfoMessage(playerid_admin, 0, "676", "El nick que introdujo está deshabilitado por cuestiones de seguridad.");
	}
	else if ( DataUserLoad(playerid) )
	{
	    new MsgDesban[MAX_TEXT_CHAT];
	    if ( PlayersData[playerid][Admin] == 9 )
	    {
			SendInfoMessage(playerid_admin, 0, "1451", "No existe ese jugador en la base de datos!");
			return false;
		}
	    if ( !option )
	    {
			if ( PlayersData[playerid][AccountState] == 3 )
			{
			    PlayersData[playerid][AccountState] = 0;
				PlayersDataOnline[playerid][Spawn] = false;
				format(MsgDesban, sizeof(MsgDesban), "Has desbaneado a %s", playeridname);
				new UnBanIpCommand[MAX_TEXT_CHAT];
				format(UnBanIpCommand, sizeof(UnBanIpCommand), "unbanip %s", PlayersData[playerid][MyIP]);
				SendRconCommand(UnBanIpCommand);
				SendInfoMessage(playerid_admin, 3, "0", MsgDesban);
				DataUserSave(playerid);
			}
			else
			{
				format(MsgDesban, sizeof(MsgDesban), "El jugador %s no se encuentra baneado", playeridname);
				SendInfoMessage(playerid_admin, 0, "673", MsgDesban);
			}
		}
		else
		{
			if ( PlayersData[playerid][AccountState] != 3 )
			{
			    PlayersData[playerid][AccountState] = 3;
				PlayersDataOnline[playerid][Spawn] = false;
				format(MsgDesban, sizeof(MsgDesban), "Has baneado a %s", playeridname);
				new BanIpCommand[MAX_TEXT_CHAT];
				format(BanIpCommand, sizeof(BanIpCommand), "banip %s", PlayersData[playerid][MyIP]);
				SendRconCommand(BanIpCommand);
				SendInfoMessage(playerid_admin, 3, "0", MsgDesban);
				DataUserSave(playerid);
			}
			else
			{
				format(MsgDesban, sizeof(MsgDesban), "El jugador %s ya se encuentra baneado", playeridname);
				SendInfoMessage(playerid_admin, 0, "972", MsgDesban);
			}
		}
	}
	else
	{
		SendInfoMessage(playerid_admin, 0, "212", "No existe ese jugador en la base de datos!");
	}
	return true;
}
public IsTunnigContinue(playerid)
{
	if ( PlayersDataOnline[playerid][MyIDVehicleTunning] == IsPlayerInNearVehicle(playerid) )
	{
	    return true;
	}
	else
	{
		TogglePlayerControllableEx(playerid, true);
		SendInfoMessage(playerid, 0, "677", "Acérquese o suba al vehículo que estaba tunenado!");
	    return false;
	}
}
public IsPlayerInTaller(playerid)
{
	if ( IsPlayerInRangeOfPoint(playerid, 30.0, -2973.7065,470.3227,4.9141) &&
         PlayersData[playerid][Faccion] == TALLER_SF ||
		 IsPlayerInRangeOfPoint(playerid, 30.0, 615.3417,-10.6391,1000.9219) &&
         PlayersData[playerid][Faccion] == TALLER_SF ||
		 IsPlayerInRangeOfPoint(playerid, 30.0, 1794.7306,-2037.6821,13.5245) &&
         PlayersData[playerid][Faccion] == TALLER_LS ||
		 IsPlayerInRangeOfPoint(playerid, 30.0, 1751.9133,-2021.4797,20.6677) &&
         PlayersData[playerid][Faccion] == TALLER_LS  )
	{
	    return true;
	}
	else
	{
		SendInfoMessage(playerid, 0, "682", "No se encuentra en el taller!");
	    return false;
	}
}
public IsPlayerInTallerEx(playerid)
{
	if ( IsPlayerInRangeOfPoint(playerid, 30.0, -2973.7065,470.3227,4.9141) ||
		 IsPlayerInRangeOfPoint(playerid, 30.0, 615.3417,-10.6391,1000.9219) ||
		 IsPlayerInRangeOfPoint(playerid, 30.0, 1794.7306,-2037.6821,13.5245) ||
		 IsPlayerInRangeOfPoint(playerid, 30.0, 1751.9133,-2021.4797,20.6677) )
	{
	    return true;
	}
	else
	{
		SendInfoMessage(playerid, 0, "682", "No se encuentra en el taller!");
	    return false;
	}
}
public IsPlayerInConcencionario(playerid)
{
	new RANGE_POINT = 50;
	if ( IsPlayerInRangeOfPoint(playerid, RANGE_POINT, 546.3749,-1293.4868,17.2482) ||
		 IsPlayerInRangeOfPoint(playerid, RANGE_POINT, -1661.5085,1212.9225,21.1563) ||
		 IsPlayerInRangeOfPoint(playerid, RANGE_POINT, -1951.7966,279.0199,40.4895) ||
		 GetPlayerVirtualWorld(playerid) == WORLD_DEFAULT_INTERIOR && (
		 IsPlayerInRangeOfPoint(playerid, RANGE_POINT, -509.2497,2561.0613,53.8653)  ||
		 IsPlayerInRangeOfPoint(playerid, RANGE_POINT, 1644.9438,-2495.1252,13.6146) ||
		 IsPlayerInRangeOfPoint(playerid, RANGE_POINT, 1577.2163,1262.2421,10.8268)
		 )  )
	{
	    return true;
	}
	else
	{
	    return false;
	}
}
public IsPlayerInAlmacen(playerid, option)
{
	if ( FaccionData[PlayersData[playerid][Faccion]][AlmacenX] != 0.0 )
	{
	    for ( new i = 0; i < MAX_ALMACENES; i++ )
	    {
			if ( IsPlayerInRangeOfPoint(playerid, 3.0,
			FaccionData[PlayersData[playerid][Faccion]][AlmacenX][i],
			FaccionData[PlayersData[playerid][Faccion]][AlmacenY][i],
			FaccionData[PlayersData[playerid][Faccion]][AlmacenZ][i]) &&
			FaccionData[PlayersData[playerid][Faccion]][AlmacenWorld][i] == GetPlayerVirtualWorld(playerid) )
			{
				return i;
			}
		}
		if ( option )
		{
			SendInfoMessage(playerid, 0, "732", "No se encuentra cerca del almacén");
		}
	}
	else
	{
	    if ( option )
	    {
			SendInfoMessage(playerid, 0, "733", "Su facción no tiene almacén");
		}
	}
	return -1;

}
public LoadPickupsAlmacenes()
{

	for ( new i = GOBIERNO; i <= MAX_FACCION; i++ )
	{
	    for ( new a = 0; a < MAX_ALMACENES; a++)
	    {
			if ( FaccionData[i][AlmacenX][a] != 0 )
			{
				MAX_PICKUP = CreatePickup	(1575, 	1, 	FaccionData[i][AlmacenX][a], FaccionData[i][AlmacenY][a], FaccionData[i][AlmacenZ][a],	 	FaccionData[i][AlmacenWorld][a]);
			}
		}
	}
}
public LoadDoors()
{
	Doors[MAX_DOORS][objectmodel]    = 971;
	Doors[MAX_DOORS][PosXTrue]       = 1548.05371100;
	Doors[MAX_DOORS][PosYTrue]       = -1628.41015600;
	Doors[MAX_DOORS][PosZTrue]       = 15.95274500;
	Doors[MAX_DOORS][PosRotXTrue]    = 0;
	Doors[MAX_DOORS][PosRotYTrue]    = 0;
	Doors[MAX_DOORS][PosRotZTrue]    = -89.99998128;
	Doors[MAX_DOORS][PosXFalse]    = 1548.05981400;
	Doors[MAX_DOORS][PosYFalse]    = -1635.40698200;
	Doors[MAX_DOORS][PosZFalse]    = 15.95274500;
	Doors[MAX_DOORS][PosRotXFalse]    = 0;
	Doors[MAX_DOORS][PosRotYFalse]    = 0;
	Doors[MAX_DOORS][PosRotZFalse]    = -89.99998128;
	Doors[MAX_DOORS][typeanim]       = 0;
	Doors[MAX_DOORS][speedmove]    = STANDARD_SPEED_DOORS;
	Doors[MAX_DOORS][Dueno]       = LSPD;

	MAX_DOORS++;
	Doors[MAX_DOORS][objectmodel]    = 10558;
	Doors[MAX_DOORS][PosXTrue]       = 1588.6960449219;
	Doors[MAX_DOORS][PosYTrue]       = -1638.4265136719;
	Doors[MAX_DOORS][PosZTrue]       = 14.494512557983;
	Doors[MAX_DOORS][PosRotXTrue]    = 0;
	Doors[MAX_DOORS][PosRotYTrue]    = 0;
	Doors[MAX_DOORS][PosRotZTrue]    = 270;
	Doors[MAX_DOORS][PosXFalse]    = 1588.6960449219;
	Doors[MAX_DOORS][PosYFalse]    = -1638.4265136719;
	Doors[MAX_DOORS][PosZFalse]    = 10.300000190735;
	Doors[MAX_DOORS][PosRotXFalse]    = 0;
	Doors[MAX_DOORS][PosRotYFalse]    = 0;
	Doors[MAX_DOORS][PosRotZFalse]    = 270;
	Doors[MAX_DOORS][typeanim]       = 0;
	Doors[MAX_DOORS][speedmove]    = STANDARD_SPEED_DOORS;
	Doors[MAX_DOORS][Dueno]       = LSPD;

	MAX_DOORS++;
	Doors[MAX_DOORS][objectmodel]    = 3567;
	Doors[MAX_DOORS][PosXTrue]       = 1571.212890625;
	Doors[MAX_DOORS][PosYTrue]       = -1642.8984375;
	Doors[MAX_DOORS][PosZTrue]       = 11.699999809265;
	Doors[MAX_DOORS][PosRotXTrue]    = 0;
	Doors[MAX_DOORS][PosRotYTrue]    = 0;
	Doors[MAX_DOORS][PosRotZTrue]    = 0;
	Doors[MAX_DOORS][PosXFalse]    = 1571.212890625;
	Doors[MAX_DOORS][PosYFalse]    = -1642.8984375;
	Doors[MAX_DOORS][PosZFalse]    = 26.5;
	Doors[MAX_DOORS][PosRotXFalse]    = 0;
	Doors[MAX_DOORS][PosRotYFalse]    = 0;
	Doors[MAX_DOORS][PosRotZFalse]    = 0;
	Doors[MAX_DOORS][typeanim]       = 0;
	Doors[MAX_DOORS][speedmove]    = STANDARD_SPEED_DOORS;
	Doors[MAX_DOORS][Dueno]       = LSPD;

	MAX_DOORS++;
	Doors[MAX_DOORS][objectmodel]    = 17951;
	Doors[MAX_DOORS][PosXTrue]       = 1549.9720458984;
	Doors[MAX_DOORS][PosYTrue]       = 17.601322174072;
	Doors[MAX_DOORS][PosZTrue]       = 25;
	Doors[MAX_DOORS][PosRotXTrue]    = 0;
	Doors[MAX_DOORS][PosRotYTrue]    = 0;
	Doors[MAX_DOORS][PosRotZTrue]    = 9;
	Doors[MAX_DOORS][PosXFalse]    	 = 1549.9720458984;
	Doors[MAX_DOORS][PosYFalse]      = 17.601322174072;
	Doors[MAX_DOORS][PosZFalse]      = 21.5;
	Doors[MAX_DOORS][PosRotXFalse]   = 0;
	Doors[MAX_DOORS][PosRotYFalse]   = 0;
	Doors[MAX_DOORS][PosRotZFalse]   = 9;
	Doors[MAX_DOORS][typeanim]       = 0;
	Doors[MAX_DOORS][speedmove]    = STANDARD_SPEED_DOORS;
	Doors[MAX_DOORS][Dueno]       = SICARIOS;

	MAX_DOORS++;
	Doors[MAX_DOORS][objectmodel]    = 968;
	Doors[MAX_DOORS][PosXTrue]       = 764.77752700;
	Doors[MAX_DOORS][PosYTrue]       = -1422.80786100;
	Doors[MAX_DOORS][PosZTrue]       = 13.31906100;
	Doors[MAX_DOORS][PosRotXTrue]    = 0;
	Doors[MAX_DOORS][PosRotYTrue]    = 90.24079544;
	Doors[MAX_DOORS][PosRotZTrue]    = -0.85943669;
	Doors[MAX_DOORS][PosXFalse]    = 764.83917200;
	Doors[MAX_DOORS][PosYFalse]    = -1422.81286600;
	Doors[MAX_DOORS][PosZFalse]    = 13.20376600;
	Doors[MAX_DOORS][PosRotXFalse]    = 0;
	Doors[MAX_DOORS][PosRotYFalse]    = 0;
	Doors[MAX_DOORS][PosRotZFalse]    = 0;
	Doors[MAX_DOORS][typeanim]       = 1;
	Doors[MAX_DOORS][speedmove]    = STANDARD_SPEED_BARRAS;
	Doors[MAX_DOORS][Dueno]       = CONTRABANDISTAS;

	MAX_DOORS++;
	Doors[MAX_DOORS][objectmodel]    = 968;
	Doors[MAX_DOORS][PosXTrue]       = 711.36908000;
	Doors[MAX_DOORS][PosYTrue]       = -1422.32885700;
	Doors[MAX_DOORS][PosZTrue]       = 13.31281300;
	Doors[MAX_DOORS][PosRotXTrue]    = 0;
	Doors[MAX_DOORS][PosRotYTrue]    = -90.24079544;
	Doors[MAX_DOORS][PosRotZTrue]    = -0.85943669;
	Doors[MAX_DOORS][PosXFalse]    = 711.26141400;
	Doors[MAX_DOORS][PosYFalse]    = -1422.32312000;
	Doors[MAX_DOORS][PosZFalse]    = 13.26281400;
	Doors[MAX_DOORS][PosRotXFalse]    = 0;
	Doors[MAX_DOORS][PosRotYFalse]    = 0;
	Doors[MAX_DOORS][PosRotZFalse]    = 0;
	Doors[MAX_DOORS][typeanim]       = 1;
	Doors[MAX_DOORS][speedmove]    = STANDARD_SPEED_BARRAS;
	Doors[MAX_DOORS][Dueno]       = CONTRABANDISTAS;

	MAX_DOORS++;
	Doors[MAX_DOORS][objectmodel]    = 968;
	Doors[MAX_DOORS][PosXTrue]       = -2599.382568;
	Doors[MAX_DOORS][PosYTrue]       = 688.296081;
	Doors[MAX_DOORS][PosZTrue]       = 27.612501;
	Doors[MAX_DOORS][PosRotXTrue]    = 0;
	Doors[MAX_DOORS][PosRotYTrue]    = 90;
	Doors[MAX_DOORS][PosRotZTrue]    = 273;
	Doors[MAX_DOORS][PosXFalse]    = -2599.363281;
	Doors[MAX_DOORS][PosYFalse]    = 688.147033;
	Doors[MAX_DOORS][PosZFalse]    = 27.606203;
	Doors[MAX_DOORS][PosRotXFalse]    = 0;
	Doors[MAX_DOORS][PosRotYFalse]    = 0;
	Doors[MAX_DOORS][PosRotZFalse]    = 273;
	Doors[MAX_DOORS][typeanim]       = 1;
	Doors[MAX_DOORS][speedmove]    = STANDARD_SPEED_BARRAS;
	Doors[MAX_DOORS][Dueno]       = SFMD;

	MAX_DOORS++; // CAMIONEROS
	Doors[MAX_DOORS][objectmodel]    = 980;
	Doors[MAX_DOORS][PosXTrue]       = -491.66204800;
	Doors[MAX_DOORS][PosYTrue]       = -562.61877400;
	Doors[MAX_DOORS][PosZTrue]       = 27.29682900;
	Doors[MAX_DOORS][PosRotXTrue]    = 0;
	Doors[MAX_DOORS][PosRotYTrue]    = 0;
	Doors[MAX_DOORS][PosRotZTrue]    = 0;
	Doors[MAX_DOORS][PosXFalse]    = -481.11346400;
	Doors[MAX_DOORS][PosYFalse]    = -562.62060500;
	Doors[MAX_DOORS][PosZFalse]    = 27.29929200;
	Doors[MAX_DOORS][PosRotXFalse]    = 0;
	Doors[MAX_DOORS][PosRotYFalse]    = 0;
	Doors[MAX_DOORS][PosRotZFalse]    = 0;
	Doors[MAX_DOORS][typeanim]       = 0;
	Doors[MAX_DOORS][speedmove]    = STANDARD_SPEED_DOORS;
	Doors[MAX_DOORS][Dueno]       = CAMIONEROS;

	MAX_DOORS++; // DETECTIVES
	Doors[MAX_DOORS][objectmodel]    = 968;
	Doors[MAX_DOORS][PosXTrue]       = -2081.65356400;
	Doors[MAX_DOORS][PosYTrue]       = 1368.02685500;
	Doors[MAX_DOORS][PosZTrue]       = 6.87718600;
	Doors[MAX_DOORS][PosRotXTrue]    = 0;
	Doors[MAX_DOORS][PosRotYTrue]    = 89.38135874;
	Doors[MAX_DOORS][PosRotZTrue]    = 0;
	Doors[MAX_DOORS][PosXFalse]    = -2081.55151400;
	Doors[MAX_DOORS][PosYFalse]    = 1368.05188000;
	Doors[MAX_DOORS][PosZFalse]    = 6.84989000;
	Doors[MAX_DOORS][PosRotXFalse]    = 0;
	Doors[MAX_DOORS][PosRotYFalse]    = 0;
	Doors[MAX_DOORS][PosRotZFalse]    = 0;
	Doors[MAX_DOORS][typeanim]       = 1;
	Doors[MAX_DOORS][speedmove]    = STANDARD_SPEED_BARRAS;
	Doors[MAX_DOORS][Dueno]       = ADP;

	MAX_DOORS++; // Puerta 1 CNN
	Doors[MAX_DOORS][objectmodel]    = 975;
	Doors[MAX_DOORS][PosXTrue]       = 777.48919700;
	Doors[MAX_DOORS][PosYTrue]       = -1384.51147500;
	Doors[MAX_DOORS][PosZTrue]       = 14.39153300;
	Doors[MAX_DOORS][PosRotXTrue]    = 0;
	Doors[MAX_DOORS][PosRotYTrue]    = 0;
	Doors[MAX_DOORS][PosRotZTrue]    = 180.00001985;
	Doors[MAX_DOORS][PosXFalse]    = 770.48236100;
	Doors[MAX_DOORS][PosYFalse]    = -1384.51147500;
	Doors[MAX_DOORS][PosZFalse]    = 14.39153300;
	Doors[MAX_DOORS][PosRotXFalse]    = 0;
	Doors[MAX_DOORS][PosRotYFalse]    = 0;
	Doors[MAX_DOORS][PosRotZFalse]    = 180.00001985;
	Doors[MAX_DOORS][typeanim]       = 0;
	Doors[MAX_DOORS][speedmove]    = STANDARD_SPEED_DOORS;
	Doors[MAX_DOORS][Dueno]       = CNN;

	MAX_DOORS++; // Puerta 2 CNN
	Doors[MAX_DOORS][objectmodel]    = 975;
	Doors[MAX_DOORS][PosXTrue]       = 777.42907700;
	Doors[MAX_DOORS][PosYTrue]       = -1330.43664600;
	Doors[MAX_DOORS][PosZTrue]       = 14.22926100;
	Doors[MAX_DOORS][PosRotXTrue]    = 0;
	Doors[MAX_DOORS][PosRotYTrue]    = 0;
	Doors[MAX_DOORS][PosRotZTrue]    = 180.00001985;
	Doors[MAX_DOORS][PosXFalse]    = 770.42224100;
	Doors[MAX_DOORS][PosYFalse]    = -1330.43664600;
	Doors[MAX_DOORS][PosZFalse]    = 14.22926100;
	Doors[MAX_DOORS][PosRotXFalse]    = 0;
	Doors[MAX_DOORS][PosRotYFalse]    = 0;
	Doors[MAX_DOORS][PosRotZFalse]    = 180.00001985;
	Doors[MAX_DOORS][typeanim]       = 0;
	Doors[MAX_DOORS][speedmove]    = STANDARD_SPEED_DOORS;
	Doors[MAX_DOORS][Dueno]       = CNN;

	MAX_DOORS++;
	Doors[MAX_DOORS][objectmodel]    = 16501;
	Doors[MAX_DOORS][PosXTrue]       = 1045.3469238281;
	Doors[MAX_DOORS][PosYTrue]       = -315.49578857422;
	Doors[MAX_DOORS][PosZTrue]       = 73.599998474121;
	Doors[MAX_DOORS][PosRotXTrue]    = 0;
	Doors[MAX_DOORS][PosRotYTrue]    = 0;
	Doors[MAX_DOORS][PosRotZTrue]    = 90;
	Doors[MAX_DOORS][PosXFalse]    = 1045.3469238281;
	Doors[MAX_DOORS][PosYFalse]    = -315.49578857422;
	Doors[MAX_DOORS][PosZFalse]    = 70.8;
	Doors[MAX_DOORS][PosRotXFalse]    = 0;
	Doors[MAX_DOORS][PosRotYFalse]    = 0;
	Doors[MAX_DOORS][PosRotZFalse]    = 90;
	Doors[MAX_DOORS][typeanim]       = 0;
	Doors[MAX_DOORS][speedmove]    = STANDARD_SPEED_DOORS;
	Doors[MAX_DOORS][Dueno]       = TRAFICANTES;

	MAX_DOORS++; // Puerta LCN
	Doors[MAX_DOORS][objectmodel]    = 980;
	Doors[MAX_DOORS][PosXTrue]       = 1426.89221200;
	Doors[MAX_DOORS][PosYTrue]       = -1883.11084000;
	Doors[MAX_DOORS][PosZTrue]       = 15.17355300;
	Doors[MAX_DOORS][PosRotXTrue]    = 0;
	Doors[MAX_DOORS][PosRotYTrue]    = 0;
	Doors[MAX_DOORS][PosRotZTrue]    = 0;
	Doors[MAX_DOORS][PosXFalse]    = 1436.31323200;
	Doors[MAX_DOORS][PosYFalse]    = -1883.09411600;
	Doors[MAX_DOORS][PosZFalse]    = 15.15620400;
	Doors[MAX_DOORS][PosRotXFalse]    = 0;
	Doors[MAX_DOORS][PosRotYFalse]    = 0;
	Doors[MAX_DOORS][PosRotZFalse]    = 0;
	Doors[MAX_DOORS][typeanim]       = 0;
	Doors[MAX_DOORS][speedmove]    = STANDARD_SPEED_DOORS;
	Doors[MAX_DOORS][Dueno]       = LCN;

	MAX_DOORS++; // Puerta TAXIS
	Doors[MAX_DOORS][objectmodel]    = 968;
	Doors[MAX_DOORS][PosXTrue]       = 1811.60119600;
	Doors[MAX_DOORS][PosYTrue]       = -1893.20629900;
	Doors[MAX_DOORS][PosZTrue]       = 13.05351100;
	Doors[MAX_DOORS][PosRotXTrue]    = 0;
	Doors[MAX_DOORS][PosRotYTrue]    = 88.52192205;
	Doors[MAX_DOORS][PosRotZTrue]    = 90.07733058;
	Doors[MAX_DOORS][PosXFalse]    = 1811.62182600;
	Doors[MAX_DOORS][PosYFalse]    = -1893.17382800;
	Doors[MAX_DOORS][PosZFalse]    = 13.13908600;
	Doors[MAX_DOORS][PosRotXFalse]    = 0;
	Doors[MAX_DOORS][PosRotYFalse]    = 0;
	Doors[MAX_DOORS][PosRotZFalse]    = 89.99998128;
	Doors[MAX_DOORS][typeanim]       = 1;
	Doors[MAX_DOORS][speedmove]    = STANDARD_SPEED_BARRAS;
	Doors[MAX_DOORS][Dueno]       = TAXI;

	MAX_DOORS++; // Puerta LICENCIEROS
	Doors[MAX_DOORS][objectmodel]    = 968; // LICENCIEROS 968
	Doors[MAX_DOORS][PosXTrue]       = -2050.61669900;
	Doors[MAX_DOORS][PosYTrue]       = -80.58327500;
	Doors[MAX_DOORS][PosZTrue]       = 34.89353900;
	Doors[MAX_DOORS][PosRotXTrue]    = 0;
	Doors[MAX_DOORS][PosRotYTrue]    = 89.38135874;
	Doors[MAX_DOORS][PosRotZTrue]    = 0;
	Doors[MAX_DOORS][PosXFalse]    = -2050.58203100;
	Doors[MAX_DOORS][PosYFalse]    = -80.54467800;
	Doors[MAX_DOORS][PosZFalse]    = 34.83792900;
	Doors[MAX_DOORS][PosRotXFalse]    = 0;
	Doors[MAX_DOORS][PosRotYFalse]    = 0;
	Doors[MAX_DOORS][PosRotZFalse]    = 0;
	Doors[MAX_DOORS][typeanim]       = 1;
	Doors[MAX_DOORS][speedmove]    = STANDARD_SPEED_BARRAS;
	Doors[MAX_DOORS][Dueno]       = LICENCIEROS;

	MAX_DOORS++; // YAKUZA
	Doors[MAX_DOORS][objectmodel]    = 980;
	Doors[MAX_DOORS][PosXTrue]       = -2273.18286100;
	Doors[MAX_DOORS][PosYTrue]       = 2352.12988300;
	Doors[MAX_DOORS][PosZTrue]       = 6.59360400;
	Doors[MAX_DOORS][PosRotXTrue]    = 0;
	Doors[MAX_DOORS][PosRotYTrue]    = 0;
	Doors[MAX_DOORS][PosRotZTrue]    = -124.60943960;
	Doors[MAX_DOORS][PosXFalse]    = -2279.14233400;
	Doors[MAX_DOORS][PosYFalse]    = 2343.25048800;
	Doors[MAX_DOORS][PosZFalse]    = 6.59360500;
	Doors[MAX_DOORS][PosRotXFalse]    = 0;
	Doors[MAX_DOORS][PosRotYFalse]    = 0;
	Doors[MAX_DOORS][PosRotZFalse]    = -123.74994561;
	Doors[MAX_DOORS][typeanim]       = 0;
	Doors[MAX_DOORS][speedmove]    = STANDARD_SPEED_DOORS;
	Doors[MAX_DOORS][Dueno]       = YKZ;

	MAX_DOORS++; // LSPD
	Doors[MAX_DOORS][objectmodel]    = 2952;
	Doors[MAX_DOORS][PosXTrue]       = 245.26473999023;
	Doors[MAX_DOORS][PosYTrue]       = 72.445518493652;
	Doors[MAX_DOORS][PosZTrue]       = 1002.640625;
	Doors[MAX_DOORS][PosRotXTrue]    = 0;
	Doors[MAX_DOORS][PosRotYTrue]    = 0;
	Doors[MAX_DOORS][PosRotZTrue]    = 89.25;
	Doors[MAX_DOORS][PosXFalse]    = 245.26473999023;
	Doors[MAX_DOORS][PosYFalse]    = 72.445518493652;
	Doors[MAX_DOORS][PosZFalse]    = 999.9;
	Doors[MAX_DOORS][PosRotXFalse]    = 0;
	Doors[MAX_DOORS][PosRotYFalse]    = 0;
	Doors[MAX_DOORS][PosRotZFalse]    = 89.25;
	Doors[MAX_DOORS][typeanim]       = 0;
	Doors[MAX_DOORS][speedmove]    = STANDARD_SPEED_DOORS;
	Doors[MAX_DOORS][Dueno]       = LSPD;

	MAX_DOORS++; // SFPD Interior
	Doors[MAX_DOORS][objectmodel]    = 2952;
	Doors[MAX_DOORS][PosXTrue]       = 239.74206542969;
	Doors[MAX_DOORS][PosYTrue]       = 118.60485839844;
	Doors[MAX_DOORS][PosZTrue]       = 1002.21875;
	Doors[MAX_DOORS][PosRotXTrue]    = 0;
	Doors[MAX_DOORS][PosRotYTrue]    = 0;
	Doors[MAX_DOORS][PosRotZTrue]    = 359.24487304688;
	Doors[MAX_DOORS][PosXFalse]    = 239.74206542969;
	Doors[MAX_DOORS][PosYFalse]    = 116.58999633789;
	Doors[MAX_DOORS][PosZFalse]    = 1002.21875;
	Doors[MAX_DOORS][PosRotXFalse]    = 0;
	Doors[MAX_DOORS][PosRotYFalse]    = 0;
	Doors[MAX_DOORS][PosRotZFalse]    = 359.24487304688;
	Doors[MAX_DOORS][typeanim]       = 0;
	Doors[MAX_DOORS][speedmove]    = STANDARD_SPEED_DOORS;
	Doors[MAX_DOORS][Dueno]       = SFPD;

	MAX_DOORS++; // SFPD Interior
	Doors[MAX_DOORS][objectmodel]    = 2952;
	Doors[MAX_DOORS][PosXTrue]       = 253.10383605957;
	Doors[MAX_DOORS][PosYTrue]       = 110.14280700684;
	Doors[MAX_DOORS][PosZTrue]       = 1002.21875;
	Doors[MAX_DOORS][PosRotXTrue]    = 0;
	Doors[MAX_DOORS][PosRotYTrue]    = 0;
	Doors[MAX_DOORS][PosRotZTrue]    = 358.5;
	Doors[MAX_DOORS][PosXFalse]    = 253.10383605957;
	Doors[MAX_DOORS][PosYFalse]    = 108.099;
	Doors[MAX_DOORS][PosZFalse]    = 1002.21875;
	Doors[MAX_DOORS][PosRotXFalse]    = 0;
	Doors[MAX_DOORS][PosRotYFalse]    = 0;
	Doors[MAX_DOORS][PosRotZFalse]    = 358.5;
	Doors[MAX_DOORS][typeanim]       = 0;
	Doors[MAX_DOORS][speedmove]    = STANDARD_SPEED_DOORS;
	Doors[MAX_DOORS][Dueno]       = SFPD;

	MAX_DOORS++;
	Doors[MAX_DOORS][objectmodel]    = 980;
	Doors[MAX_DOORS][PosXTrue]       = -1571.82824700;
	Doors[MAX_DOORS][PosYTrue]       = 662.45459000;
	Doors[MAX_DOORS][PosZTrue]       = 8.96089200;
	Doors[MAX_DOORS][PosRotXTrue]    = 0;
	Doors[MAX_DOORS][PosRotYTrue]    = 0;
	Doors[MAX_DOORS][PosRotZTrue]    = 89.99998128;
	Doors[MAX_DOORS][PosXFalse]    = -1571.82824700;
	Doors[MAX_DOORS][PosYFalse]    = 670.81274400;
	Doors[MAX_DOORS][PosZFalse]    = 8.96089200;
	Doors[MAX_DOORS][PosRotXFalse]    = 0;
	Doors[MAX_DOORS][PosRotYFalse]    = 0;
	Doors[MAX_DOORS][PosRotZFalse]    = 89.99998128;
	Doors[MAX_DOORS][typeanim]       = 0;
	Doors[MAX_DOORS][speedmove]    = STANDARD_SPEED_DOORS;
	Doors[MAX_DOORS][Dueno]       = SFPD;

	MAX_DOORS++;
	Doors[MAX_DOORS][objectmodel]    = 971;
	Doors[MAX_DOORS][PosXTrue]       = -1699.12365700;
	Doors[MAX_DOORS][PosYTrue]       = 684.68402100;
	Doors[MAX_DOORS][PosZTrue]       = 27.03052900;
	Doors[MAX_DOORS][PosRotXTrue]    = 0;
	Doors[MAX_DOORS][PosRotYTrue]    = 0;
	Doors[MAX_DOORS][PosRotZTrue]    = 89.99998128;
	Doors[MAX_DOORS][PosXFalse]    = -1699.12365700;
	Doors[MAX_DOORS][PosYFalse]    = 691.41558800;
	Doors[MAX_DOORS][PosZFalse]    = 27.03052900;
	Doors[MAX_DOORS][PosRotXFalse]    = 0;
	Doors[MAX_DOORS][PosRotYFalse]    = 0;
	Doors[MAX_DOORS][PosRotZFalse]    = 89.99998128;
	Doors[MAX_DOORS][typeanim]       = 0;
	Doors[MAX_DOORS][speedmove]    = STANDARD_SPEED_DOORS;
	Doors[MAX_DOORS][Dueno]       = SFPD;

	MAX_DOORS++;
	Doors[MAX_DOORS][objectmodel]    =980;
	Doors[MAX_DOORS][PosXTrue]       = -2867.02661100;
	Doors[MAX_DOORS][PosYTrue]       = 466.17459100;
	Doors[MAX_DOORS][PosZTrue]       = 6.61044300;
	Doors[MAX_DOORS][PosRotXTrue]    = 0;
	Doors[MAX_DOORS][PosRotYTrue]    = 0;
	Doors[MAX_DOORS][PosRotZTrue]    = 89.99998128;
	Doors[MAX_DOORS][PosXFalse]    = -2866.99829100;
	Doors[MAX_DOORS][PosYFalse]    = 476.60159300;
	Doors[MAX_DOORS][PosZFalse]    = 6.62365700;
	Doors[MAX_DOORS][PosRotXFalse]    = 0;
	Doors[MAX_DOORS][PosRotYFalse]    = 0;
	Doors[MAX_DOORS][PosRotZFalse]    = 89.99998128;
	Doors[MAX_DOORS][typeanim]       = 0;
	Doors[MAX_DOORS][speedmove]    = STANDARD_SPEED_DOORS;
	Doors[MAX_DOORS][Dueno]       = TALLER_SF;

	MAX_DOORS++;
	Doors[MAX_DOORS][objectmodel]    = 10184;
	Doors[MAX_DOORS][PosXTrue]       = -1631.7845458984;
	Doors[MAX_DOORS][PosYTrue]       = 688.45935058594;
	Doors[MAX_DOORS][PosZTrue]       = 8.7092628479004;
	Doors[MAX_DOORS][PosRotXTrue]    = 0;
	Doors[MAX_DOORS][PosRotYTrue]    = 0;
	Doors[MAX_DOORS][PosRotZTrue]    = 269.62139892578;
	Doors[MAX_DOORS][PosXFalse]    = -1631.7845458984;
	Doors[MAX_DOORS][PosYFalse]    = 688.45935058594;
	Doors[MAX_DOORS][PosZFalse]    = 3.69;
	Doors[MAX_DOORS][PosRotXFalse]    = 0;
	Doors[MAX_DOORS][PosRotYFalse]    = 0;
	Doors[MAX_DOORS][PosRotZFalse]    = 269.62139892578;
	Doors[MAX_DOORS][typeanim]       = 0;
	Doors[MAX_DOORS][speedmove]    = STANDARD_SPEED_DOORS;
	Doors[MAX_DOORS][Dueno]       = SFPD;

	MAX_DOORS++;
	Doors[MAX_DOORS][objectmodel]    = 968;
	Doors[MAX_DOORS][PosXTrue]       = 560.72650100;
	Doors[MAX_DOORS][PosYTrue]       = -1254.12805200;
	Doors[MAX_DOORS][PosZTrue]       = 16.76095800;
	Doors[MAX_DOORS][PosRotXTrue]    = 0;
	Doors[MAX_DOORS][PosRotYTrue]    = -90.24079544;
	Doors[MAX_DOORS][PosRotZTrue]    = 28.59340147;
	Doors[MAX_DOORS][PosXFalse]    = 560.70147700;
	Doors[MAX_DOORS][PosYFalse]    = -1254.15307600;
	Doors[MAX_DOORS][PosZFalse]    = 16.66095900;
	Doors[MAX_DOORS][PosRotXFalse]    = 0;
	Doors[MAX_DOORS][PosRotYFalse]    = -1.71887339;
	Doors[MAX_DOORS][PosRotZFalse]    = 28.59340147;
	Doors[MAX_DOORS][typeanim]       = 1;
	Doors[MAX_DOORS][speedmove]    = STANDARD_SPEED_BARRAS;
	Doors[MAX_DOORS][Dueno]       = NFS;

	MAX_DOORS++;
	Doors[MAX_DOORS][objectmodel]    = 968;
	Doors[MAX_DOORS][PosXTrue]       = -1980.6829833984;
	Doors[MAX_DOORS][PosYTrue]       = 291.67001342773;
	Doors[MAX_DOORS][PosZTrue]       = 34.913047790527;
	Doors[MAX_DOORS][PosRotXTrue]    = 0;
	Doors[MAX_DOORS][PosRotYTrue]    = 90;
	Doors[MAX_DOORS][PosRotZTrue]    = 270;
	Doors[MAX_DOORS][PosXFalse]    = -1980.6829833984;
	Doors[MAX_DOORS][PosYFalse]    = 291.67001342773;
	Doors[MAX_DOORS][PosZFalse]    = 34.913047790527;
	Doors[MAX_DOORS][PosRotXFalse]    = 0;
	Doors[MAX_DOORS][PosRotYFalse]    = 0;
	Doors[MAX_DOORS][PosRotZFalse]    = 270;
	Doors[MAX_DOORS][typeanim]       = 1;
	Doors[MAX_DOORS][speedmove]    = STANDARD_SPEED_BARRAS;
	Doors[MAX_DOORS][Dueno]       = NFS;

	MAX_DOORS++;
	Doors[MAX_DOORS][objectmodel]    = 968;
	Doors[MAX_DOORS][PosXTrue]       = -1911.4000244141;
	Doors[MAX_DOORS][PosYTrue]       = 238.33041381836;
	Doors[MAX_DOORS][PosZTrue]       = 35.033477783203;
	Doors[MAX_DOORS][PosRotXTrue]    = 0;
	Doors[MAX_DOORS][PosRotYTrue]    = 90;
	Doors[MAX_DOORS][PosRotZTrue]    = 0;
	Doors[MAX_DOORS][PosXFalse]    = -1911.4000244141;
	Doors[MAX_DOORS][PosYFalse]    = 238.33041381836;
	Doors[MAX_DOORS][PosZFalse]    = 35.033477783203;
	Doors[MAX_DOORS][PosRotXFalse]    = 0;
	Doors[MAX_DOORS][PosRotYFalse]    = 0;
	Doors[MAX_DOORS][PosRotZFalse]    = 0;
	Doors[MAX_DOORS][typeanim]       = 1;
	Doors[MAX_DOORS][speedmove]    = STANDARD_SPEED_BARRAS;
	Doors[MAX_DOORS][Dueno]       = NFS;

	MAX_DOORS++;
	Doors[MAX_DOORS][objectmodel]    = 9093;
	Doors[MAX_DOORS][PosXTrue]       = -2185.625;
	Doors[MAX_DOORS][PosYTrue]       = 711.7080078125;
	Doors[MAX_DOORS][PosZTrue]       = 54.661598205566;
	Doors[MAX_DOORS][PosRotXTrue]    = 0;
	Doors[MAX_DOORS][PosRotYTrue]    = 0;
	Doors[MAX_DOORS][PosRotZTrue]    = 270;
	Doors[MAX_DOORS][PosXFalse]    = -2185.625;
	Doors[MAX_DOORS][PosYFalse]    = 711.7080078125;
	Doors[MAX_DOORS][PosZFalse]    = 51.2;
	Doors[MAX_DOORS][PosRotXFalse]    = 0;
	Doors[MAX_DOORS][PosRotYFalse]    = 0;
	Doors[MAX_DOORS][PosRotZFalse]    = 90;
	Doors[MAX_DOORS][typeanim]       = 0;
	Doors[MAX_DOORS][speedmove]    = STANDARD_SPEED_DOORS;
	Doors[MAX_DOORS][Dueno]       = YKZ;

	MAX_DOORS++;
	Doors[MAX_DOORS][objectmodel]    = 14809;
	Doors[MAX_DOORS][PosXTrue]       = -2184.2958984375;
	Doors[MAX_DOORS][PosYTrue]       = 693.31774902344;
	Doors[MAX_DOORS][PosZTrue]       = 51.5;
	Doors[MAX_DOORS][PosRotXTrue]    = 0;
	Doors[MAX_DOORS][PosRotYTrue]    = 180;
	Doors[MAX_DOORS][PosRotZTrue]    = 270;
	Doors[MAX_DOORS][PosXFalse]    = -2184.2958984375;
	Doors[MAX_DOORS][PosYFalse]    = 693.31774902344;
	Doors[MAX_DOORS][PosZFalse]    = 70.879997253418;
	Doors[MAX_DOORS][PosRotXFalse]    = 0;
	Doors[MAX_DOORS][PosRotYFalse]    = 180;
	Doors[MAX_DOORS][PosRotZFalse]    = 270;
	Doors[MAX_DOORS][typeanim]       = 0;
	Doors[MAX_DOORS][speedmove]    = STANDARD_SPEED_DOORS;
	Doors[MAX_DOORS][Dueno]       = YKZ;

	MAX_DOORS++;
	Doors[MAX_DOORS][objectmodel]    = 5779;
	Doors[MAX_DOORS][PosXTrue]       = 1524.2001953125;
	Doors[MAX_DOORS][PosYTrue]       = 13.541015625;
	Doors[MAX_DOORS][PosZTrue]       = 24.710306167603;
	Doors[MAX_DOORS][PosRotXTrue]    = 0;
	Doors[MAX_DOORS][PosRotYTrue]    = 0;
	Doors[MAX_DOORS][PosRotZTrue]    = 10.497436523438;
	Doors[MAX_DOORS][PosXFalse]    = 1524.2001953125;
	Doors[MAX_DOORS][PosYFalse]    = 13.541015625;
	Doors[MAX_DOORS][PosZFalse]    = 21.510306167603;
	Doors[MAX_DOORS][PosRotXFalse]    = 0;
	Doors[MAX_DOORS][PosRotYFalse]    = 0;
	Doors[MAX_DOORS][PosRotZFalse]    = 10.497436523438;
	Doors[MAX_DOORS][typeanim]       = 0;
	Doors[MAX_DOORS][speedmove]    = STANDARD_SPEED_DOORS;
	Doors[MAX_DOORS][Dueno]       = SICARIOS;

	MAX_DOORS++;
	Doors[MAX_DOORS][objectmodel]    = 5779;
	Doors[MAX_DOORS][PosXTrue]       = 1522.3798828125;
	Doors[MAX_DOORS][PosYTrue]       = 24.546850204468;
	Doors[MAX_DOORS][PosZTrue]       = 24.710306167603;
	Doors[MAX_DOORS][PosRotXTrue]    = 0;
	Doors[MAX_DOORS][PosRotYTrue]    = 0;
	Doors[MAX_DOORS][PosRotZTrue]    = 10.497436523438;
	Doors[MAX_DOORS][PosXFalse]    = 1522.3798828125;
	Doors[MAX_DOORS][PosYFalse]    = 24.546850204468;
	Doors[MAX_DOORS][PosZFalse]    = 21.510306167603;
	Doors[MAX_DOORS][PosRotXFalse]    = 0;
	Doors[MAX_DOORS][PosRotYFalse]    = 0;
	Doors[MAX_DOORS][PosRotZFalse]    = 10.497436523438;
	Doors[MAX_DOORS][typeanim]       = 0;
	Doors[MAX_DOORS][speedmove]    = STANDARD_SPEED_DOORS;
	Doors[MAX_DOORS][Dueno]       = SICARIOS;

	MAX_DOORS++;
	Doors[MAX_DOORS][objectmodel]    = 968;
	Doors[MAX_DOORS][PosXTrue]       = 660.81268310547;
	Doors[MAX_DOORS][PosYTrue]       = -1448.5954589844;
	Doors[MAX_DOORS][PosZTrue]       = 14.639177322388;
	Doors[MAX_DOORS][PosRotXTrue]    = 0;
	Doors[MAX_DOORS][PosRotYTrue]    = 90;
	Doors[MAX_DOORS][PosRotZTrue]    = 270;
	Doors[MAX_DOORS][PosXFalse]    = 660.81268310547;
	Doors[MAX_DOORS][PosYFalse]    = -1448.5954589844;
	Doors[MAX_DOORS][PosZFalse]    = 14.639177322388;
	Doors[MAX_DOORS][PosRotXFalse]    = 0;
	Doors[MAX_DOORS][PosRotYFalse]    = 0;
	Doors[MAX_DOORS][PosRotZFalse]    = 270;
	Doors[MAX_DOORS][typeanim]       = 1;
	Doors[MAX_DOORS][speedmove]    = STANDARD_SPEED_BARRAS;
	Doors[MAX_DOORS][Dueno]       = CONTRABANDISTAS;

	MAX_DOORS++;
	Doors[MAX_DOORS][objectmodel]    = 8378;
	Doors[MAX_DOORS][PosXTrue]       = 725.28582763672;
	Doors[MAX_DOORS][PosYTrue]       = -1582.4216308594;
	Doors[MAX_DOORS][PosZTrue]       = -6;
	Doors[MAX_DOORS][PosRotXTrue]    = 0;
	Doors[MAX_DOORS][PosRotYTrue]    = 180;
	Doors[MAX_DOORS][PosRotZTrue]    = 0;
	Doors[MAX_DOORS][PosXFalse]    = 725.28582763672;
	Doors[MAX_DOORS][PosYFalse]    = -1582.4216308594;
	Doors[MAX_DOORS][PosZFalse]    = -13;
	Doors[MAX_DOORS][PosRotXFalse]    = 0;
	Doors[MAX_DOORS][PosRotYFalse]    = 180;
	Doors[MAX_DOORS][PosRotZFalse]    = 0;
	Doors[MAX_DOORS][typeanim]       = 0;
	Doors[MAX_DOORS][speedmove]    = STANDARD_SPEED_DOORS;
	Doors[MAX_DOORS][Dueno]       = CONTRABANDISTAS;

	MAX_DOORS++;
	Doors[MAX_DOORS][objectmodel]    = 980;
	Doors[MAX_DOORS][PosXTrue]       = 1812.53637700;
	Doors[MAX_DOORS][PosYTrue]       = -2071.71752900;
	Doors[MAX_DOORS][PosZTrue]       = 15.30094700;
	Doors[MAX_DOORS][PosRotXTrue]    = 0;
	Doors[MAX_DOORS][PosRotYTrue]    = 0;
	Doors[MAX_DOORS][PosRotZTrue]    = 89.99998128;
	Doors[MAX_DOORS][PosXFalse]    = 1812.52856400;
	Doors[MAX_DOORS][PosYFalse]    = -2062.86425800;
	Doors[MAX_DOORS][PosZFalse]    = 15.30271700;
	Doors[MAX_DOORS][PosRotXFalse]    = 0;
	Doors[MAX_DOORS][PosRotYFalse]    = 0;
	Doors[MAX_DOORS][PosRotZFalse]    = 89.99998128;
	Doors[MAX_DOORS][typeanim]       = 0;
	Doors[MAX_DOORS][speedmove]    = STANDARD_SPEED_DOORS;
	Doors[MAX_DOORS][Dueno]       = TALLER_LS;

	MAX_DOORS++; // GRUA 1
	Doors[MAX_DOORS][objectmodel]    = 931;
	Doors[MAX_DOORS][PosXTrue]       = 1801.35327100;
	Doors[MAX_DOORS][PosYTrue]       = -2032.92175300;
	Doors[MAX_DOORS][PosZTrue]       = 11.45743400;
	Doors[MAX_DOORS][PosRotXTrue]    = 0;
	Doors[MAX_DOORS][PosRotYTrue]    = 0;
	Doors[MAX_DOORS][PosRotZTrue]    = 0;
	Doors[MAX_DOORS][PosXFalse]    = 1801.35327100;
	Doors[MAX_DOORS][PosYFalse]    = -2032.92175300;
	Doors[MAX_DOORS][PosZFalse]    = 13.45740300;
	Doors[MAX_DOORS][PosRotXFalse]    = 0;
	Doors[MAX_DOORS][PosRotYFalse]    = 0;
	Doors[MAX_DOORS][PosRotZFalse]    = 0;
	Doors[MAX_DOORS][typeanim]       = 0;
	Doors[MAX_DOORS][speedmove]    = STANDARD_SPEED_DOORS_GRUAS;
	Doors[MAX_DOORS][Dueno]       = TALLER_LS;

	MAX_DOORS++; // GRUA 2
	Doors[MAX_DOORS][objectmodel]    = 931;
	Doors[MAX_DOORS][PosXTrue]       = 1801.34387200;
	Doors[MAX_DOORS][PosYTrue]       = -2041.02465800;
	Doors[MAX_DOORS][PosZTrue]       = 11.47949800;
	Doors[MAX_DOORS][PosRotXTrue]    = 0;
	Doors[MAX_DOORS][PosRotYTrue]    = 0;
	Doors[MAX_DOORS][PosRotZTrue]    = 89.99998128;
	Doors[MAX_DOORS][PosXFalse]    = 1801.34387200;
	Doors[MAX_DOORS][PosYFalse]    = -2041.02465800;
	Doors[MAX_DOORS][PosZFalse]    = 13.50446700;
	Doors[MAX_DOORS][PosRotXFalse]    = 0;
	Doors[MAX_DOORS][PosRotYFalse]    = 0;
	Doors[MAX_DOORS][PosRotZFalse]    = 0;
	Doors[MAX_DOORS][typeanim]       = 0;
	Doors[MAX_DOORS][speedmove]    = STANDARD_SPEED_DOORS_GRUAS;
	Doors[MAX_DOORS][Dueno]       = TALLER_LS;

	MAX_DOORS++; // SFMD Dentro 1
	Doors[MAX_DOORS][objectmodel]    = 968;
	Doors[MAX_DOORS][PosXTrue]       = -2614.290039;
	Doors[MAX_DOORS][PosYTrue]       = 589.133789;
	Doors[MAX_DOORS][PosZTrue]       = 14.226739;
	Doors[MAX_DOORS][PosRotXTrue]    = 0;
	Doors[MAX_DOORS][PosRotYTrue]    = 90.0;
	Doors[MAX_DOORS][PosRotZTrue]    = 89.500000;
	Doors[MAX_DOORS][PosXFalse]    = -2614.290039;
	Doors[MAX_DOORS][PosYFalse]    = 589.134460;
	Doors[MAX_DOORS][PosZFalse]    = 14.137140;
	Doors[MAX_DOORS][PosRotXFalse]    = 0;
	Doors[MAX_DOORS][PosRotYFalse]    = 0;
	Doors[MAX_DOORS][PosRotZFalse]    = 90.0;
	Doors[MAX_DOORS][typeanim]       = 1;
	Doors[MAX_DOORS][speedmove]    = STANDARD_SPEED_BARRAS;
	Doors[MAX_DOORS][Dueno]       = SFMD;

	MAX_DOORS++; // SFMD Dentro 2
	Doors[MAX_DOORS][objectmodel]    = 968;
	Doors[MAX_DOORS][PosXTrue]       = -2614.091064;
	Doors[MAX_DOORS][PosYTrue]       = 620.895751;
	Doors[MAX_DOORS][PosZTrue]       = 14.226739;
	Doors[MAX_DOORS][PosRotXTrue]    = 0;
	Doors[MAX_DOORS][PosRotYTrue]    = 90;
	Doors[MAX_DOORS][PosRotZTrue]    = 89.494628;
	Doors[MAX_DOORS][PosXFalse]    = -2614.077880;
	Doors[MAX_DOORS][PosYFalse]    = 620.949218;
	Doors[MAX_DOORS][PosZFalse]    = 14.137140;
	Doors[MAX_DOORS][PosRotXFalse]    = 0;
	Doors[MAX_DOORS][PosRotYFalse]    = 0;
	Doors[MAX_DOORS][PosRotZFalse]    = 90.0;
	Doors[MAX_DOORS][typeanim]       = 1;
	Doors[MAX_DOORS][speedmove]    = STANDARD_SPEED_BARRAS;
	Doors[MAX_DOORS][Dueno]       = SFMD;

	MAX_DOORS++; // SFMD Afuera 1
	Doors[MAX_DOORS][objectmodel]    = 968;
	Doors[MAX_DOORS][PosXTrue]       = -2603.310302;
	Doors[MAX_DOORS][PosYTrue]       = 579.041625;
	Doors[MAX_DOORS][PosZTrue]       = 14.226739;
	Doors[MAX_DOORS][PosRotXTrue]    = 0;
	Doors[MAX_DOORS][PosRotYTrue]    = 90.0;
	Doors[MAX_DOORS][PosRotZTrue]    = 179.974548;
	Doors[MAX_DOORS][PosXFalse]    = -2603.381347;
	Doors[MAX_DOORS][PosYFalse]    = 579.048706;
	Doors[MAX_DOORS][PosZFalse]    = 14.125940;
	Doors[MAX_DOORS][PosRotXFalse]    = 0;
	Doors[MAX_DOORS][PosRotYFalse]    = 0;
	Doors[MAX_DOORS][PosRotZFalse]    = 180.000000;
	Doors[MAX_DOORS][typeanim]       = 1;
	Doors[MAX_DOORS][speedmove]    = STANDARD_SPEED_BARRAS;
	Doors[MAX_DOORS][Dueno]       = SFMD;

	MAX_DOORS++; // SFMD Afuera 2
	Doors[MAX_DOORS][objectmodel]    = 968;
	Doors[MAX_DOORS][PosXTrue]       = -2602.214355;
	Doors[MAX_DOORS][PosYTrue]       = 695.707031;
	Doors[MAX_DOORS][PosZTrue]       = 27.606340;
	Doors[MAX_DOORS][PosRotXTrue]    = 0;
	Doors[MAX_DOORS][PosRotYTrue]    = 90.000000;
	Doors[MAX_DOORS][PosRotZTrue]    = 179.132568;
	Doors[MAX_DOORS][PosXFalse]    = -2602.296875;
	Doors[MAX_DOORS][PosYFalse]    = 695.707580;
	Doors[MAX_DOORS][PosZFalse]    = 27.565538;
	Doors[MAX_DOORS][PosRotXFalse]    = 0;
	Doors[MAX_DOORS][PosRotYFalse]    = 0;
	Doors[MAX_DOORS][PosRotZFalse]    = 179.994506;
	Doors[MAX_DOORS][typeanim]       = 1;
	Doors[MAX_DOORS][speedmove]    = STANDARD_SPEED_BARRAS;
	Doors[MAX_DOORS][Dueno]       = SFMD;

	MAX_DOORS++; // AK Puerta Principal
	Doors[MAX_DOORS][objectmodel]    = 968;
	Doors[MAX_DOORS][PosXTrue]       = -2479.8527832031;
	Doors[MAX_DOORS][PosYTrue]       = -132.69999694824;
	Doors[MAX_DOORS][PosZTrue]       = 25.378147125244;
	Doors[MAX_DOORS][PosRotXTrue]    = 0;
	Doors[MAX_DOORS][PosRotYTrue]    = 89;
	Doors[MAX_DOORS][PosRotZTrue]    = 90;
	Doors[MAX_DOORS][PosXFalse]    = -2479.8527832031;
	Doors[MAX_DOORS][PosYFalse]    = -132.69999694824;
	Doors[MAX_DOORS][PosZFalse]    = 25.378147125244;
	Doors[MAX_DOORS][PosRotXFalse]    = 0;
	Doors[MAX_DOORS][PosRotYFalse]    = 0;
	Doors[MAX_DOORS][PosRotZFalse]    = 90;
	Doors[MAX_DOORS][typeanim]       = 1;
	Doors[MAX_DOORS][speedmove]    = STANDARD_SPEED_BARRAS;
	Doors[MAX_DOORS][Dueno]       = AK;

	MAX_DOORS++; // HEORS Almacén Garages
	Doors[MAX_DOORS][objectmodel]    = 968;
	Doors[MAX_DOORS][PosXTrue]       = 2799.9714355469;
	Doors[MAX_DOORS][PosYTrue]       = -1601.1790771484;
	Doors[MAX_DOORS][PosZTrue]       = 10.720741271973;
	Doors[MAX_DOORS][PosRotXTrue]    = 0;
	Doors[MAX_DOORS][PosRotYTrue]    = 90;
	Doors[MAX_DOORS][PosRotZTrue]    = 165;
	Doors[MAX_DOORS][PosXFalse]    = 2799.9714355469;
	Doors[MAX_DOORS][PosYFalse]    = -1601.1790771484;
	Doors[MAX_DOORS][PosZFalse]    = 10.720741271973;
	Doors[MAX_DOORS][PosRotXFalse]    = 0;
	Doors[MAX_DOORS][PosRotYFalse]    = 0;
	Doors[MAX_DOORS][PosRotZFalse]    = 165;
	Doors[MAX_DOORS][typeanim]       = 1;
	Doors[MAX_DOORS][speedmove]    = STANDARD_SPEED_BARRAS;
	Doors[MAX_DOORS][Dueno]       = HEORS;
	
	MAX_DOORS++; // Puerta 2 Traficantes HQ 1 ENTRADA
	Doors[MAX_DOORS][objectmodel]    = 988;
	Doors[MAX_DOORS][PosXTrue]       = 1021.7734375;
	Doors[MAX_DOORS][PosYTrue]       = -370.3291015625;
	Doors[MAX_DOORS][PosZTrue]       = 73.70686340332;
	Doors[MAX_DOORS][PosRotXTrue]    = 0;
	Doors[MAX_DOORS][PosRotYTrue]    = 0;
	Doors[MAX_DOORS][PosRotZTrue]    = 0;
	Doors[MAX_DOORS][PosXFalse]    = 1016.4899902344;
	Doors[MAX_DOORS][PosYFalse]    = -370.3291015625;
	Doors[MAX_DOORS][PosZFalse]    = 73.70686340332;
	Doors[MAX_DOORS][PosRotXFalse]    = 0;
	Doors[MAX_DOORS][PosRotYFalse]    = 0;
	Doors[MAX_DOORS][PosRotZFalse]    = 0;
	Doors[MAX_DOORS][typeanim]       = 0;
	Doors[MAX_DOORS][speedmove]    = STANDARD_SPEED_DOORS;
	Doors[MAX_DOORS][Dueno]       = TRAFICANTES;

	MAX_DOORS++; // Puerta 2 Traficantes HQ 2 ENTRADA
	Doors[MAX_DOORS][objectmodel]    = 988;
	Doors[MAX_DOORS][PosXTrue]       = 1027.2705078125;
	Doors[MAX_DOORS][PosYTrue]       = -370.3212890625;
	Doors[MAX_DOORS][PosZTrue]       = 73.70686340332;
	Doors[MAX_DOORS][PosRotXTrue]    = 0;
	Doors[MAX_DOORS][PosRotYTrue]    = 0;
	Doors[MAX_DOORS][PosRotZTrue]    = 0;
	Doors[MAX_DOORS][PosXFalse]    = 1032.7099609375;
	Doors[MAX_DOORS][PosYFalse]    = -370.3212890625;
	Doors[MAX_DOORS][PosZFalse]    = 73.70686340332;
	Doors[MAX_DOORS][PosRotXFalse]    = 0;
	Doors[MAX_DOORS][PosRotYFalse]    = 0;
	Doors[MAX_DOORS][PosRotZFalse]    = 0;
	Doors[MAX_DOORS][typeanim]       = 0;
	Doors[MAX_DOORS][speedmove]    = STANDARD_SPEED_DOORS;
	Doors[MAX_DOORS][Dueno]       = TRAFICANTES;

	MAX_DOORS++; // LSMD Bomberos 1
	Doors[MAX_DOORS][objectmodel]    = 968;
	Doors[MAX_DOORS][PosXTrue]    = 1996.9759521484;
	Doors[MAX_DOORS][PosYTrue]    = -1441.5166015625;
	Doors[MAX_DOORS][PosZTrue]    = 13.359999656677;
	Doors[MAX_DOORS][PosRotXTrue]    = 0;
	Doors[MAX_DOORS][PosRotYTrue]    = 90;
	Doors[MAX_DOORS][PosRotZTrue]    = 270;
	Doors[MAX_DOORS][PosXFalse]       = 1996.9759521484;
	Doors[MAX_DOORS][PosYFalse]       = -1441.5166015625;
	Doors[MAX_DOORS][PosZFalse]       = 13.359999656677;
	Doors[MAX_DOORS][PosRotXFalse]    = 0;
	Doors[MAX_DOORS][PosRotYFalse]    = 0;
	Doors[MAX_DOORS][PosRotZFalse]    = 270;
	Doors[MAX_DOORS][typeanim]       = 1;
	Doors[MAX_DOORS][speedmove]    = STANDARD_SPEED_BARRAS;
	Doors[MAX_DOORS][Dueno]       = LSMD;
	
	MAX_DOORS++; // LSMD Bomberos 2
	Doors[MAX_DOORS][objectmodel]    = 968;
	Doors[MAX_DOORS][PosXTrue]    = 2006.6142578125;
	Doors[MAX_DOORS][PosYTrue]    = -1450.9599609375;
	Doors[MAX_DOORS][PosZTrue]    = 13.369999885559;
	Doors[MAX_DOORS][PosRotXTrue]    = 0;
	Doors[MAX_DOORS][PosRotYTrue]    = 90;
	Doors[MAX_DOORS][PosRotZTrue]    = 180;
	Doors[MAX_DOORS][PosXFalse]       = 2006.6142578125;
	Doors[MAX_DOORS][PosYFalse]       = -1450.9599609375;
	Doors[MAX_DOORS][PosZFalse]       = 13.369999885559;
	Doors[MAX_DOORS][PosRotXFalse]    = 0;
	Doors[MAX_DOORS][PosRotYFalse]    = 0;
	Doors[MAX_DOORS][PosRotZFalse]    = 180;
	Doors[MAX_DOORS][typeanim]       = 1;
	Doors[MAX_DOORS][speedmove]    = STANDARD_SPEED_BARRAS;
	Doors[MAX_DOORS][Dueno]       = LSMD;

	MAX_DOORS++;
	Doors[MAX_DOORS][objectmodel] = 968;
	Doors[MAX_DOORS][PosXTrue] = -2172.2902832031;
	Doors[MAX_DOORS][PosYTrue] = 661.25555419922;
	Doors[MAX_DOORS][PosZTrue] = 49.233001708984;
	Doors[MAX_DOORS][PosRotXTrue] = 0;
	Doors[MAX_DOORS][PosRotYTrue] = 90;
	Doors[MAX_DOORS][PosRotZTrue] = 180;
	Doors[MAX_DOORS][PosXFalse] = -2172.2902832031;
	Doors[MAX_DOORS][PosYFalse] = 661.25555419922;
	Doors[MAX_DOORS][PosZFalse] = 49.233001708984;
	Doors[MAX_DOORS][PosRotXFalse] = 0;
	Doors[MAX_DOORS][PosRotYFalse] = 0;
	Doors[MAX_DOORS][PosRotZFalse] = 180;
	Doors[MAX_DOORS][typeanim] = 1;
	Doors[MAX_DOORS][speedmove] = STANDARD_SPEED_BARRAS;
	Doors[MAX_DOORS][Dueno] = YKZ;

	MAX_DOORS++;
	Doors[MAX_DOORS][objectmodel] = 968;
	Doors[MAX_DOORS][PosXTrue] = -2037.2270507813;
	Doors[MAX_DOORS][PosYTrue] = -102.7379989624;
	Doors[MAX_DOORS][PosZTrue] = 34.959999084473;
	Doors[MAX_DOORS][PosRotXTrue] = 0;
	Doors[MAX_DOORS][PosRotYTrue] = 90;
	Doors[MAX_DOORS][PosRotZTrue] = 180;
	Doors[MAX_DOORS][PosXFalse] = -2037.2270507813;
	Doors[MAX_DOORS][PosYFalse] = -102.7379989624;
	Doors[MAX_DOORS][PosZFalse] = 34.959999084473;
	Doors[MAX_DOORS][PosRotXFalse] = 0;
	Doors[MAX_DOORS][PosRotYFalse] = 0;
	Doors[MAX_DOORS][PosRotZFalse] = 180;
	Doors[MAX_DOORS][typeanim] = 1;
	Doors[MAX_DOORS][speedmove] = STANDARD_SPEED_BARRAS;
	Doors[MAX_DOORS][Dueno] = LICENCIEROS;

	for ( new i = 0; i <= MAX_DOORS; i++ )
	{
	    if ( Doors[i][PosXTrue] == Doors[i][PosXFalse] &&
             Doors[i][PosYTrue] == Doors[i][PosYFalse] &&
             Doors[i][PosZTrue] == Doors[i][PosZFalse] )
		{
/*		    Doors[i][PosXTrue] += 0.000001;
		    Doors[i][PosYTrue] += 0.000001;
		    Doors[i][PosZTrue] += 0.000001;*/
		}
		Doors[i][objectanimid]   = CreateDynamicObject(Doors[i][objectmodel], Doors[i][PosXTrue], Doors[i][PosYTrue], Doors[i][PosZTrue], Doors[i][PosRotXTrue], Doors[i][PosRotYTrue], Doors[i][PosRotZTrue], -1, -1, -1, MAX_RADIO_STREAM);
	}
	// END DOORS
}
public GetMyNearDoor(playerid, key, option)
{
	new iBucle;
	new i = -1;
	new Float:RangoC;
    do
    {
	    RangoC++;
	    iBucle = 0;
		for (; iBucle <= MAX_DOORS; iBucle++)
		{
		    if ( (Doors[iBucle][speedmove] == STANDARD_SPEED_DOORS || Doors[iBucle][speedmove] == STANDARD_SPEED_BARRAS) && !option  || Doors[iBucle][speedmove] == STANDARD_SPEED_DOORS_GRUAS && option)
		    {
				if (IsPlayerInRangeOfPoint(playerid, RangoC, Doors[iBucle][PosXTrue], Doors[iBucle][PosYTrue], Doors[iBucle][PosZTrue]) ||
				     IsPlayerInRangeOfPoint(playerid, RangoC, Doors[iBucle][PosXFalse], Doors[iBucle][PosYFalse], Doors[iBucle][PosZFalse]) )
				{
				    i = iBucle;
				    RangoC = 15.0;
			       	break;
				}
			}
		}
	}
	while ( RangoC != 15.0 );

	if ( i != -1 )
	{
	    if ( Doors[i][Dueno] == CIVIL || Doors[i][Dueno] == PlayersData[playerid][Faccion] )
	    {
		    new Float:TempPosObject[3]; GetDynamicObjectPos(Doors[i][objectanimid], TempPosObject[0], TempPosObject[1], TempPosObject[2]);
			new Float:TempRotObject[3]; GetDynamicObjectRot(Doors[i][objectanimid], TempRotObject[0], TempRotObject[1], TempRotObject[2]);

		    if ( TempPosObject[0] == Doors[i][PosXTrue] 	&& TempPosObject[1] == Doors[i][PosYTrue] 		&& TempPosObject[2] == Doors[i][PosZTrue] &&
			     TempRotObject[0] == Doors[i][PosRotXTrue] 	&& TempRotObject[1] == Doors[i][PosRotYTrue] 	&& TempRotObject[2] == Doors[i][PosRotZTrue]
				||
				 TempPosObject[0] == Doors[i][PosXFalse] 		&& TempPosObject[1] == Doors[i][PosYFalse] 		&& TempPosObject[2] == Doors[i][PosZFalse] &&
			     TempRotObject[0] == Doors[i][PosRotXFalse] 	&& TempRotObject[1] == Doors[i][PosRotYFalse] 	&& TempRotObject[2] == Doors[i][PosRotZFalse] )
			{
				if ( Doors[i][typeanim] == 0)
				{
				    if ( TempPosObject[0] == Doors[i][PosXFalse] 	&& TempPosObject[1] == Doors[i][PosYFalse]		&& TempPosObject[2] == Doors[i][PosZFalse] &&
			     		 TempRotObject[0] == Doors[i][PosRotXFalse] && TempRotObject[1] == Doors[i][PosRotYFalse] 	&& TempRotObject[2] == Doors[i][PosRotZFalse] )
				    {
						MoveDynamicObject(Doors[i][objectanimid], Doors[i][PosXTrue], Doors[i][PosYTrue], Doors[i][PosZTrue], Doors[i][speedmove], Doors[i][PosRotXTrue], Doors[i][PosRotYTrue], Doors[i][PosRotZTrue]);
//						SetDynamicObjectRot(Doors[i][objectanimid], Doors[i][PosRotXTrue], Doors[i][PosRotYTrue], Doors[i][PosRotZTrue]);
					}
					else
					{
						MoveDynamicObject(Doors[i][objectanimid], Doors[i][PosXFalse], Doors[i][PosYFalse], Doors[i][PosZFalse], Doors[i][speedmove], Doors[i][PosRotXFalse], Doors[i][PosRotYFalse], Doors[i][PosRotZFalse]);
//						SetDynamicObjectRot(Doors[i][objectanimid], Doors[i][PosRotXFalse], Doors[i][PosRotYFalse], Doors[i][PosRotZFalse]);
					}
				}
				else if ( Doors[i][typeanim] == 1 )
				{
				    if ( TempPosObject[0] == Doors[i][PosXFalse] 		&& TempPosObject[1] == Doors[i][PosYFalse] 		&& TempPosObject[2] == Doors[i][PosZFalse] &&
			     		 TempRotObject[0] == Doors[i][PosRotXFalse] 	&& TempRotObject[1] == Doors[i][PosRotYFalse] 	&& TempRotObject[2] == Doors[i][PosRotZFalse] )
				    {
						MoveDoorDynamicTwo(i, 0.0);
//						MoveDynamicObject(Doors[i][objectanimid], Doors[i][PosXTrue], Doors[i][PosYTrue], Doors[i][PosZTrue], Doors[i][speedmove], Doors[i][PosRotXTrue], Doors[i][PosRotYTrue], Doors[i][PosRotZTrue]);
				    }
					else
					{
						MoveDoorDynamicOne(i, 0.0);
//						MoveDynamicObject(Doors[i][objectanimid], Doors[i][PosXFalse], Doors[i][PosYFalse], Doors[i][PosZFalse], Doors[i][speedmove], Doors[i][PosRotXFalse], Doors[i][PosRotYFalse], Doors[i][PosRotZFalse]);
					}
				}
				else if ( Doors[i][typeanim] == 2 )
				{
				    if ( TempPosObject[0] == Doors[i][PosXFalse] 		&& TempPosObject[1] == Doors[i][PosYFalse] 		&& TempPosObject[2] == Doors[i][PosZFalse] &&
			     		 TempRotObject[0] == Doors[i][PosRotXFalse] 	&& TempRotObject[1] == Doors[i][PosRotYFalse] 	&& TempRotObject[2] == Doors[i][PosRotZFalse] )
				    {
				        SetDynamicObjectPos(Doors[i][objectanimid], Doors[i][PosXTrue], Doors[i][PosYTrue], Doors[i][PosZTrue]);
						SetDynamicObjectRot(Doors[i][objectanimid], Doors[i][PosRotXTrue], Doors[i][PosRotYTrue], Doors[i][PosRotZTrue]);
				    }
					else
					{
						SetDynamicObjectPos(Doors[i][objectanimid], Doors[i][PosXFalse], Doors[i][PosYFalse], Doors[i][PosZFalse]);
						SetDynamicObjectRot(Doors[i][objectanimid], Doors[i][PosRotXFalse], Doors[i][PosRotYFalse], Doors[i][PosRotZFalse]);
					}
				}
				return i;
			}
			else
			{
			    if ( !option )
			    {
					SendInfoMessage(playerid, 0, "779", "La puerta que desea abrir o cerrar, todavía se esta abriendo o cerrando");
				}
				else
				{
					SendInfoMessage(playerid, 0, "1502", "La grúa que desea levantar o bajar, todavía esta bajando o subiendo");
				}
				return -1;
			}
		}
		else
		{
		    if ( !option )
		    {
				SendInfoMessage(playerid, 0, "778", "No tienes las llaves de esta puerta");
			}
			else
			{
				SendInfoMessage(playerid, 0, "1408", "No tienes el control de esta grúa");
			}
			return -1;
		}
	}

	if ( !key )
	{
	    if ( !option )
	    {
			SendInfoMessage(playerid, 0, "777", "No hay ninguna puerta a su alrededor");
		}
		else
		{
			SendInfoMessage(playerid, 0, "1395", "No hay ninguna grúa a su alrededor");
		}
	}
	return -1;
}
public LoadPointsExtraction()
{
	FaccionesMercancias[CAMIONEROS][PosX] = -3634.9949;
	FaccionesMercancias[CAMIONEROS][PosY] = 1884.2264;
	FaccionesMercancias[CAMIONEROS][PosZ] = 2.1854;
	CreatePickup	(1210, 	1, 	FaccionesMercancias[CAMIONEROS][PosX], FaccionesMercancias[CAMIONEROS][PosY], FaccionesMercancias[CAMIONEROS][PosZ],	 	-1);

	FaccionesMercancias[CONTRABANDISTAS][PosX] = 417.6441;
	FaccionesMercancias[CONTRABANDISTAS][PosY] = 2541.6646;
	FaccionesMercancias[CONTRABANDISTAS][PosZ] = 10.0000;
	CreatePickup	(1210, 	1, 	FaccionesMercancias[CONTRABANDISTAS][PosX], FaccionesMercancias[CONTRABANDISTAS][PosY], FaccionesMercancias[CONTRABANDISTAS][PosZ],	 	-1);

	FaccionesMercancias[TRAFICANTES][PosX] = -1421.7528;
	FaccionesMercancias[TRAFICANTES][PosY] = -964.7759;
	FaccionesMercancias[TRAFICANTES][PosZ] = 200.7651;
	CreatePickup	(1210, 	1, 	FaccionesMercancias[TRAFICANTES][PosX], FaccionesMercancias[TRAFICANTES][PosY], FaccionesMercancias[TRAFICANTES][PosZ],	 	-1);
}
public LoadPickupsMisc()
{

}
public CleanVCP()
{
	for (new i=0; i < MAX_OBJECTS_VALLAS_CONOS_PINCHOS; i++)
	{
	    VCP[i][objectid_vcp] = -1;
	    VCP[i][objectmodel] = -1;
	    VCP[i][pickupidVCP] = -1;
	}
}
public AddVCP(playerid, objectid, Float:Xv, Float:Yv, Float:Zv, Float:ZZv)
{
	for (new i=0; i < MAX_OBJECTS_VALLAS_CONOS_PINCHOS; i++)
	{
	    if ( VCP[i][objectid_vcp] == -1 )
	    {
	        if ( playerid != -1 )
	        {
				GetPlayerPos(playerid, VCP[i][ObjX], VCP[i][ObjY], VCP[i][ObjZ]); GetPlayerFacingAngle(playerid, VCP[i][ObjZRot]);
			}
			else
			{
			    VCP[i][ObjX] 	= Xv;
			    VCP[i][ObjY] 	= Yv;
			    VCP[i][ObjZ] 	= Zv;
			    VCP[i][ObjZRot] = ZZv;

			}
		    VCP[i][objectmodel] = objectid;
		    if ( playerid != -1 )
			{
				if ( objectid == PINCHO)
				{
					VCP[i][ObjZ] = VCP[i][ObjZ] - 0.9;
		    	}
		    	else if ( objectid == CONO )
		    	{
					VCP[i][ObjZ] = VCP[i][ObjZ] - 0.7;
				}
		    	else if ( objectid == VALLA )
		    	{
			    	VCP[i][ObjZ] = VCP[i][ObjZ] - 0.4;
				}
			}
			if ( objectid == PINCHO)
			{
				VCP[i][pickupidVCP] = CreatePickup (1247, 	1, 	VCP[i][ObjX], VCP[i][ObjY], VCP[i][ObjZ] - 1,	 	-1);
			}
	    	VCP[i][objectid_vcp] = CreateDynamicObjectExULP(objectid, VCP[i][ObjX], VCP[i][ObjY], VCP[i][ObjZ], 0, 0, VCP[i][ObjZRot], -1, -1, -1, MAX_RADIO_STREAM);
			if ( playerid != -1 )
	        {
		    	SetPlayerPos(playerid, VCP[i][ObjX], VCP[i][ObjY], VCP[i][ObjZ] + 0.5);
	    	}
	        return true;
		}
	}
	if ( playerid != -1 )
	{
		SendInfoMessage(playerid, 0, "840", "Han llegado al límite de 100 objetos que pueden usar entre: Vallas, Conos y Pinchos");
	}
	return false;
}
public RemoveVCP(objectid)
{
    if ( VCP[objectid][pickupidVCP] != -1 )
	{
		DestroyPickup(VCP[objectid][pickupidVCP]);
	}
	DestroyDynamicObject(VCP[objectid][objectid_vcp]);
   	VCP[objectid][objectid_vcp] = -1;
    VCP[objectid][objectmodel] = -1;
    VCP[objectid][pickupidVCP] = -1;
}
public IsNearVCP(playerid)
{
	for (new i=0; i < MAX_OBJECTS_VALLAS_CONOS_PINCHOS; i++)
	{
	    if ( VCP[i][objectid_vcp] != -1 && IsPlayerInRangeOfPoint(playerid, 2.0, VCP[i][ObjX], VCP[i][ObjY], VCP[i][ObjZ])  )
	    {
			return i;
	    }
    }
	return -1;
}
public SetPlayerTutorial(playerid, tutorialid)
{
	if ( IsPlayerConnected(playerid) && PlayersData[playerid][InTutorial] )
	{
	    new TimeTutorial;
		switch( tutorialid )
		{
		    case 0: // Ayuntamiento
		    {
		        SetPlayerVirtualWorldEx(playerid, 0);
				SetPlayerPos(playerid, 1499.5968,-1663.2734,7.0682);

				SetCameraPresent(playerid, 15, 0, CamerasPresent[15][0], CamerasPresent[15][1], CamerasPresent[15][2], 15, 18);
                TimeTutorial = 15000;
			}
		    case 1: // Camioneros
		    {
   				KillTimer(PlayersDataOnline[playerid][TimerCamaraId]);
				SetCameraPresent(playerid, 19, 0, CamerasPresent[19][0], CamerasPresent[19][1], CamerasPresent[19][2], 19, 23);
				SetPlayerPos(playerid, -513.8900,-518.0787,25.5234);

                TimeTutorial = 15000;
				TextDrawHideForPlayer(playerid, TexdrawsTutorial[tutorialid - 1]);
			}
		    case 2: // Taxis
		    {
   				KillTimer(PlayersDataOnline[playerid][TimerCamaraId]);
				SetCameraPresent(playerid, 24, 0, CamerasPresent[24][0], CamerasPresent[24][1], CamerasPresent[24][2], 24, 28);
				SetPlayerPos(playerid, 1772.3389,-1924.6448,3.4906);

                TimeTutorial = 15000;
				TextDrawHideForPlayer(playerid, TexdrawsTutorial[tutorialid - 1]);
			}
		    case 3: // Taller
		    {
   				KillTimer(PlayersDataOnline[playerid][TimerCamaraId]);
				SetCameraPresent(playerid, 34, 0, CamerasPresent[34][0], CamerasPresent[34][1], CamerasPresent[34][2], 34, 38);
				SetPlayerPos(playerid, -2860.8513,468.8911,-20.2054);

                TimeTutorial = 15000;
				TextDrawHideForPlayer(playerid, TexdrawsTutorial[tutorialid - 1]);
			}
		    case 4: // CNN
		    {
   				KillTimer(PlayersDataOnline[playerid][TimerCamaraId]);
				SetCameraPresent(playerid, 45, 0, CamerasPresent[45][0], CamerasPresent[45][1], CamerasPresent[45][2], 45, 51);
				SetPlayerPos(playerid, 757.7950,-1357.0710,7.3166);

                TimeTutorial = 15000;
				TextDrawHideForPlayer(playerid, TexdrawsTutorial[tutorialid - 1]);
			}
		    case 5: // Detectives
		    {
   				KillTimer(PlayersDataOnline[playerid][TimerCamaraId]);
				SetCameraPresent(playerid, 39, 0, CamerasPresent[29][0], CamerasPresent[39][1], CamerasPresent[39][2], 39, 44);
				SetPlayerPos(playerid, -2039.1923,1271.1046,23.3799);

                TimeTutorial = 15000;
				TextDrawHideForPlayer(playerid, TexdrawsTutorial[tutorialid - 1]);
			}
		    case 6: // Licencieros
		    {
   				KillTimer(PlayersDataOnline[playerid][TimerCamaraId]);
				SetCameraPresent(playerid, 29, 0, CamerasPresent[29][0], CamerasPresent[29][1], CamerasPresent[29][2], 29, 33);
				SetPlayerPos(playerid, -2028.0050,-114.0599,29.5306);

                TimeTutorial = 25000;
				TextDrawHideForPlayer(playerid, TexdrawsTutorial[tutorialid - 1]);
			}
		    case 7: // ¿Qué es un server de Rol? ///////////////
		    {
		        SetPlayerVirtualWorldEx(playerid, playerid + 5);
				for (new AE = 0; AE <= 20; AE++)
				{
				    SendClientMessage(playerid, 0xFFF, " ");
				}
				TextDrawShowForPlayer(playerid, WideScreen);
				TextDrawShowForPlayer(playerid, WideScreen2);

			    SetPlayerPos(playerid, 154.1154,-1952.1362,51.3438);
			    SetPlayerFacingAngle(playerid, 350.7448);

   				KillTimer(PlayersDataOnline[playerid][TimerCamaraId]);
				SetCameraPresent(playerid, 0, 0, CamerasPresent[0][0], CamerasPresent[0][1], CamerasPresent[0][2], 0, 14);
                TimeTutorial = 20000;
				TextDrawHideForPlayer(playerid, TexdrawsTutorial[tutorialid - 1]);
			}
		    case 8:
		    {
                TimeTutorial = 20000;
				TextDrawHideForPlayer(playerid, TexdrawsTutorial[tutorialid - 1]);
			}
		    case 9:
		    {
                TimeTutorial = 20000;
				TextDrawHideForPlayer(playerid, TexdrawsTutorial[tutorialid - 1]);
			}
		    case 10:
		    {
                TimeTutorial = 20000;
				TextDrawHideForPlayer(playerid, TexdrawsTutorial[tutorialid - 1]);
			}
		    case 11:
		    {
                TimeTutorial = 20000;
				TextDrawHideForPlayer(playerid, TexdrawsTutorial[tutorialid - 1]);
			}
		    case 12:
		    {
                TimeTutorial = 20000;
				TextDrawHideForPlayer(playerid, TexdrawsTutorial[tutorialid - 1]);
			}
		    case 13:
		    {
                TimeTutorial = 20000;
				TextDrawHideForPlayer(playerid, TexdrawsTutorial[tutorialid - 1]);
			}
		    case 14:
		    {
                TimeTutorial = 20000;
				TextDrawHideForPlayer(playerid, TexdrawsTutorial[tutorialid - 1]);
			}
		    case 15:
		    {
                TimeTutorial = 20000;
				TextDrawHideForPlayer(playerid, TexdrawsTutorial[tutorialid - 1]);
			}
		    case 16:
		    {
                TimeTutorial = 20000;
				TextDrawHideForPlayer(playerid, TexdrawsTutorial[tutorialid - 1]);
			}
		    case 17:
		    {
                TimeTutorial = 20000;
				TextDrawHideForPlayer(playerid, TexdrawsTutorial[tutorialid - 1]);
			}
			default:
			{
				PlayersDataOnline[playerid][StateDeath] = true;
				PlayersData[playerid][InTutorial] = false;
				PlayersDataOnline[playerid][IsNotSilenciado] = true;
				SetPlayerVirtualWorldEx(playerid, 0);
				UpdateSpawnPlayer(playerid);
				SpawnPlayerEx(playerid);
				TextDrawHideForPlayer(playerid, TexdrawsTutorial[tutorialid - 1]);

				TextDrawHideForPlayer(playerid, WideScreen);
				TextDrawHideForPlayer(playerid, WideScreen2);

				KillTimer(PlayersDataOnline[playerid][TimerCamaraId]);

				SendInfoMessage(playerid, 2, "0", "Ha finalizado el tutorial.");
				return false;
			}
		}
		TextDrawShowForPlayer(playerid, TexdrawsTutorial[tutorialid]);
		tutorialid++;
		PlayersDataOnline[playerid][TimerTutorialId] = SetTimerEx("SetPlayerTutorial", TimeTutorial, false, "dd", playerid, tutorialid);
		return false;
	}
	return true;
}
public LoadTexDrawsTutorial()
{
//      \x98 = A Con tílde
// 		\x9e = E con tílde
//      \xa2 = I Con tílde
//		\xa6 = O Con tílde

	// Ayuntamiento
	SetTextDrawTutorial(0, "~B~Buenas! Te queremos presentar todo ~N~lo que es y somos ~B~UN ~G~Player~N~~W~Para eso, hemos preparado este corto tutorial y~N~darte una calurosa bienvenida!");
	// Camioneros
	SetTextDrawTutorial(1, "En el servidor encontrar\x98s lo t\xa2pico y lo no t\xa2pico ~N~de servidores ~G~RolePlay~W~ como por ejemplo:~N~~B~-Interiores para cada Facci\xa6n~N~-Sub-Interiores dentro de los mismos~N~-Todos los sistemas desde 0~N~~W~Entre muchisimas otras cosas que usted mismo ~N~podr\x98 descubrir!");
	// Taxis
	SetTextDrawTutorial(2, "S\xa6lo pedimos que se respeten todas las reglas~N~del servidor, para eso le aconsejamos~N~que lea las reglas ~R~\"/Reglas\"~W~~N~y a la vez nos ayuda a ser un mejor servidor!");
	// Taller
	SetTextDrawTutorial(3, "Recuerde visitar el foro en: ~G~"WEBPAGE" ~W~donde ~N~ encontrar\x98 diversa informaci\xa6n ~N~para debatir");
	// CNN
	SetTextDrawTutorial(4, "Al igual el foro es un medio muy t\xa2pico ~N~de encontrar un empleo, as\xa2 ~N~que no pierda el tiempo!");
	// Detectives
	SetTextDrawTutorial(5, "Tambi\x9en si consta con un micro y usa el TeamSpeak 3~N~Puede conectarse a nuestro servidor~N~en la siguiente IP:~N~~G~----~N~~W~All\xa2 podr\x98s encontrar varias salas privadas ~N~para cada facci\xa6n entre otros");
	// Licencieros
	SetTextDrawTutorial(6, "Esperamos que con este corto tutorial vaya ~N~teniendo una idea de cu\x98l es nuestro objetivo que ~N~no es m\x98s ~B~Que divertirnos!~N~~N~~N~~N~~N~~R~Ahora lo dejamos con una breve~N~explicaci\xa6n de las reglas principales");
	SetTextDrawTutorial(7, "~R~Qu\x9e es un server de Rol~B~?~N~~N~~W~-Un servidor de Rol es una simulaci\xa6n de la vida~N~real, donde se debe tratar de  actuar y hacer las ~N~cosas lo m\x98s aproximado a la vida real.");
	SetTextDrawTutorial(8, "~R~Qu\x9e son los canales IC y OOC~B~?~N~~N~~B~IC(In Character)~W~ Es cuando hablas dentro del personaje~N~que representas el juego.~N~~N~~B~OOC(Out Of Character)~W~ Es cuando hablas fuera de~N~ tu personaje (La persona en la vida real)");
	SetTextDrawTutorial(9, "~R~Qu\x9e es confusi\xa6n de canales~B~?~N~~N~~W~Es cuando se dicen cosas OOC en IC.~N~Es mezclar informaci\xa6n de la vida real, con la otra~N~realidad dentro del servidor.~N~~N~~B~Ejemplo: ~W~Te acercas a una persona y le preguntas IC: ~N~¿Qui\x9en es admin aqu\xa2? ¿De que facci\xa6n eres?");
	SetTextDrawTutorial(10, "~R~Qu\x9e es MG(MetaGaming)~B~?~N~~N~~W~Es cuando llamas a una persona por su nombre, sin~N~que \x9el te lo hubiera  dicho IC, Simplemente lo~N~llamaste por su nombre porque lo viste  encima de~N~su cabeza.~N~~G~Continua...");
	SetTextDrawTutorial(11, "~B~Ejemplo: ~N~~W~Vez el nombre del jefe de una~N~mafia del server,~N~en alguna otra parte, y te diriges directamente a~N~hacia donde \x9el, sin conocerlo IC, vas y le pides~N~que te meta a su facci\xa6n.");
	SetTextDrawTutorial(12, "~R~Qu\x9e es PG (PowerGaming)~B~?~N~~N~~W~Es forzar a tu personaje, para hacer cosas irrealistas.~N~~N~~B~Ejemplo: ~W~Si estas en la c\x98rcel, no puede poner~N~~P~/me rompe las rejas con sus poderes~N~~G~/Intentar derrumbar el ayuntamiento con una patada voladora.~N~~G~Continua...");
	SetTextDrawTutorial(13, "Tampoco se puede  manipular o forzar el personaje~N~de otro jugador para hacer una~N~acci\xa6n imposible~N~y fuera de la realidad. ~N~~N~~B~Ejemplos: ~N~~P~/me mata a Javier_Peralta con su visi\xa6n laser~N~~G~/Intentar enviar a Javier_Peralta a la luna de un golpe.");
	SetTextDrawTutorial(14, "~R~Qu\x9e es CJ(CarJaked)~B~?~N~~N~~W~-Es cuando se acerca una persona en un auto y pulsas~N~ \"Enter\" y lo sacas del auto solo porque si, sin raz\xa6n alguna.");
	SetTextDrawTutorial(15, "~R~Qu\x9e es CK(CarKill)~B~?~N~~N~~W~Es cuando se mata a una persona atropellando o a-~N~plast\x98ndolo con un auto.");
	SetTextDrawTutorial(16, "~R~Qu\x9e es DB(Drive-By)~B~?~N~~N~~W~Es disparar desde el asiento del conductor de una~N~moto o de un auto (Generalmente tambi\x9en esta Prohi-~N~bido, debido a cuando se dispara desde el asiento~N~del conductor, el GTA SA utiliza el AUTO-AIM \"Mi-~N~ra Autom\x98tica\")");
	SetTextDrawTutorial(17, "~R~Qu\x9e es BJ (BunnyJump)~B~?~N~~N~~W~Es ir corriendo y saltando a al mismo tiempo para~N~avanzar mas r\x98pido y no cansarse.~N~Esto es considerado como Anti-Rol.~N~~N~~N~~N~~N~~R~FIN DEL TUTORIAL DE REGLAS");
//				             Es ir corriendo y saltando a al mismo tiempo para   Es ir corriendo y saltando a al mismo tiempo para        Es ir corriendo y saltando a al mismo tiempo para   Es ir corriendo y saltando a al mismo tiempo para

}
public SetTextDrawTutorial(textdrawid, text[])
{
	TexdrawsTutorial[textdrawid] = TextDrawCreateEx(300.0, 200.0, text);
	TextDrawColor(TexdrawsTutorial[textdrawid], 0xFFFEFFFF);
	TextDrawSetShadow(TexdrawsTutorial[textdrawid] ,1);
	TextDrawFont(TexdrawsTutorial[textdrawid], 1);
	TextDrawAlignment(TexdrawsTutorial[textdrawid], 2);
	TextDrawLetterSize(TexdrawsTutorial[textdrawid], 0.5, 1.3);
}
public EncenderVehicle(playerid)
{
	if ( IsPlayerInAnyVehicle(playerid) && (PlayersDataOnline[playerid][InCarId] || PlayersDataOnline[playerid][InVehicle]) )
	{
	    new MyVehicleID = GetPlayerVehicleID(playerid);
	    if ( IsVehicleNotBici(playerid, MyVehicleID) )
	    {
			if ( !DataCars[MyVehicleID][StateEncendido] )
			{
			    if ( MyVehicleID <= MAX_CAR_DUENO && !DataCars[MyVehicleID][Puente] && strlen(DataCars[MyVehicleID][Dueno]) == 1 ||
					 MyVehicleID > MAX_CAR_DUENO ||
					 MyVehicleID <= MAX_CAR_DUENO && strlen(DataCars[MyVehicleID][Dueno]) != 1)
			    {
			        if ( !DataCars[MyVehicleID][LlenandoGas] )
			        {
				  	    new MsgEncenderDinamico[MAX_TEXT_CHAT];
				  	    if ( GetPlayerVehicleSeat(playerid) == 0 )
				  	    {
				  	    	format(MsgEncenderDinamico, sizeof(MsgEncenderDinamico), "encender el vehículo");
				  	    	if ( coches_Todos_Type[GetVehicleModel(MyVehicleID) - 400] != MOTO )
				  	    	{
								ApplyPlayerAnimCustom(playerid,
								"PED",
								PED_ANIMATIONS[63], false);
							}
						}
						else
						{
				  	    	format(MsgEncenderDinamico, sizeof(MsgEncenderDinamico), "ayudar a encender el vehículo");
						}
						new Float:VidaVehiculo; GetVehicleHealth(MyVehicleID,VidaVehiculo);
						new RandNum;
						if ( VidaVehiculo > 500.0 )
						{
							RandNum = 5;
						}
						else
						{
	     					RandNum = 2;
						}
						if (IntentarAccion(playerid, MsgEncenderDinamico, random(RandNum)))
						{
		   					DataCars[MyVehicleID][StateEncendido] = true;
						    Acciones(playerid, 7, "Vehículo: Encendido...");
	    					DataCars[MyVehicleID][TimeGas] = gettime();
							IsVehicleOff(MyVehicleID);
							new IsBomb = IsVehicleHaveBomba(MyVehicleID);
							if ( IsBomb != -1 )
							{
							    ActivarBomba(IsBomb, 20);
								SetVehicleHealthEx(MyVehicleID, 0.0);
							}
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "1057", "Éste vehículo está llenando el deposito, espere que termine para encenderlo!");
					}
			     }
			}
			else
			{
				SendInfoMessage(playerid, 0, "833", "Éste vehículo ya se encuentra encendido!");
			}
		}
	}
	else
	{
		SendInfoMessage(playerid, 0, "834", "Suba al vehículo que desea encender y use (/Encender o Click Izquierdo)");
	}
}
public ApagarVehicle(playerid)
{
	if ( IsPlayerInAnyVehicle(playerid) )
	{
	    new MyVehicleID = GetPlayerVehicleID(playerid);
	    if ( IsVehicleNotBici(playerid, MyVehicleID) )
	    {
			if ( DataCars[MyVehicleID][StateEncendido] )
			{
			    if ( GetPlayerVehicleSeat(playerid) == 0 )
			    {
					if ( coches_Todos_Type[GetVehicleModel(MyVehicleID) - 400] != MOTO )
				  	{
						ApplyPlayerAnimCustom(playerid,
							"PED",
							PED_ANIMATIONS[63], false);
					}
					Acciones(playerid, 8, "apaga el motor del vehículo");
				    Acciones(playerid, 7, "Vehículo: Apagado...");
					DataCars[MyVehicleID][StateEncendido] = false;
					IsVehicleOff(MyVehicleID);

				}
				else
				{
					SendInfoMessage(playerid, 0, "829", "Solo puede apagar el vehículo desde el asiento del conductor!");
				}
			}
			else
			{
				SendInfoMessage(playerid, 0, "860", "Éste vehículo ya se encuentra apagado!");
			}
		}
	}
	else
	{
		SendInfoMessage(playerid, 0, "861", "Suba al vehículo que desea apagar y use (/Apagar)");
	}
}
public LoadPeajes()
{
	// Peaje Los Santos Izquierda
	Peajes[MAX_PEAJE][objectmodel]	= 968;
	Peajes[MAX_PEAJE][PosXTrue] 	= 53.86662300;
	Peajes[MAX_PEAJE][PosYTrue] 	= -1526.9995120;
	Peajes[MAX_PEAJE][PosZTrue] 	= 4.77926100;
	Peajes[MAX_PEAJE][PosRotXTrue] = 0;
	Peajes[MAX_PEAJE][PosRotYTrue] = -89.38135874;
	Peajes[MAX_PEAJE][PosRotZTrue] = -97.81226081;
	Peajes[MAX_PEAJE][objectid_peaje] = CreateDynamicObject(Peajes[MAX_PEAJE][objectmodel], Peajes[MAX_PEAJE][PosXTrue], Peajes[MAX_PEAJE][PosYTrue], Peajes[MAX_PEAJE][PosZTrue], Peajes[MAX_PEAJE][PosRotXTrue], Peajes[MAX_PEAJE][PosRotYTrue], Peajes[MAX_PEAJE][PosRotZTrue], -1, -1, -1, MAX_RADIO_STREAM);
	Peajes[MAX_PEAJE][PosXFalse] 	= 53.86662300;
	Peajes[MAX_PEAJE][PosYFalse] 	= -1526.99951200;
	Peajes[MAX_PEAJE][PosZFalse]		= 4.77926100;
	Peajes[MAX_PEAJE][PosRotXFalse] 	= 0;
	Peajes[MAX_PEAJE][PosRotYFalse] 	= 0;
	Peajes[MAX_PEAJE][PosRotZFalse] 	= -97.81226081;
	Peajes[MAX_PEAJE][typePeajeOrParqueo]	= 0;
	Peajes[MAX_PEAJE][PosCommandX] 		= 60.8335;
	Peajes[MAX_PEAJE][PosCommandY] 		= -1524.7312;
	Peajes[MAX_PEAJE][PosCommandZ] 		= 4.9415;

	// Peaje Los Santos 1 Derecha
	MAX_PEAJE++;
	Peajes[MAX_PEAJE][objectmodel]	= 968;
	Peajes[MAX_PEAJE][PosXTrue] 	= 52.44144100;
	Peajes[MAX_PEAJE][PosYTrue] 	= -1536.91735800;
	Peajes[MAX_PEAJE][PosZTrue] 	= 4.86119400;
	Peajes[MAX_PEAJE][PosRotXTrue] = 0;
	Peajes[MAX_PEAJE][PosRotYTrue] = -90.24079544;
	Peajes[MAX_PEAJE][PosRotZTrue] = 82.18770174;
	Peajes[MAX_PEAJE][objectid_peaje] = CreateDynamicObject(Peajes[MAX_PEAJE][objectmodel], Peajes[MAX_PEAJE][PosXTrue], Peajes[MAX_PEAJE][PosYTrue], Peajes[MAX_PEAJE][PosZTrue], Peajes[MAX_PEAJE][PosRotXTrue], Peajes[MAX_PEAJE][PosRotYTrue], Peajes[MAX_PEAJE][PosRotZTrue], -1, -1, -1, MAX_RADIO_STREAM);
	Peajes[MAX_PEAJE][PosXFalse] 	= 52.44144100;
	Peajes[MAX_PEAJE][PosYFalse] 	= -1536.91735800;
	Peajes[MAX_PEAJE][PosZFalse]		= 4.86119400;
	Peajes[MAX_PEAJE][PosRotXFalse] 	= 0;
	Peajes[MAX_PEAJE][PosRotYFalse] 	= 0;
	Peajes[MAX_PEAJE][PosRotZFalse] 	= 82.18770174;
	Peajes[MAX_PEAJE][typePeajeOrParqueo]	= 0;
	Peajes[MAX_PEAJE][PosCommandX] 		= 45.1170;
	Peajes[MAX_PEAJE][PosCommandY] 		= -1538.8495;
	Peajes[MAX_PEAJE][PosCommandZ] 		= 5.1872;

	// TUNEL SF Derecha
	MAX_PEAJE++;
	Peajes[MAX_PEAJE][objectmodel]	= 968;
	Peajes[MAX_PEAJE][PosXTrue] 	= -1759.976928;
	Peajes[MAX_PEAJE][PosYTrue] 	= -658.441650;
	Peajes[MAX_PEAJE][PosZTrue] 	= 20.727149;
	Peajes[MAX_PEAJE][PosRotXTrue] = 4.380000;
	Peajes[MAX_PEAJE][PosRotYTrue] = -90.020019;
	Peajes[MAX_PEAJE][PosRotZTrue] = -182.119384;
	Peajes[MAX_PEAJE][objectid_peaje] = CreateDynamicObject(Peajes[MAX_PEAJE][objectmodel], Peajes[MAX_PEAJE][PosXTrue], Peajes[MAX_PEAJE][PosYTrue], Peajes[MAX_PEAJE][PosZTrue], Peajes[MAX_PEAJE][PosRotXTrue], Peajes[MAX_PEAJE][PosRotYTrue], Peajes[MAX_PEAJE][PosRotZTrue], -1, -1, -1, MAX_RADIO_STREAM);
	Peajes[MAX_PEAJE][PosXFalse] 	= -1759.752441;
	Peajes[MAX_PEAJE][PosYFalse] 	= -658.699645;
	Peajes[MAX_PEAJE][PosZFalse]		= 17.657993;
	Peajes[MAX_PEAJE][PosRotXFalse] 	= 4.000000;
	Peajes[MAX_PEAJE][PosRotYFalse] 	= -0.399999;
	Peajes[MAX_PEAJE][PosRotZFalse] 	= -179.700042;
	Peajes[MAX_PEAJE][typePeajeOrParqueo]	= 0;
	Peajes[MAX_PEAJE][AnimObject]	= 1;
	Peajes[MAX_PEAJE][PosCommandX] 		= -1756.5504;
	Peajes[MAX_PEAJE][PosCommandY] 		= -664.8318;
	Peajes[MAX_PEAJE][PosCommandZ] 		= 21.5154;

	// TUNEL SF Izquierda
	MAX_PEAJE++;
	Peajes[MAX_PEAJE][objectmodel]	= 968;
	Peajes[MAX_PEAJE][PosXTrue] 	= -1761.377075;
	Peajes[MAX_PEAJE][PosYTrue] 	= -658.441650;
	Peajes[MAX_PEAJE][PosZTrue] 	= 20.727149;
	Peajes[MAX_PEAJE][PosRotXTrue] = -5.619999;
	Peajes[MAX_PEAJE][PosRotYTrue] = -91.120018;
	Peajes[MAX_PEAJE][PosRotZTrue] = -360.819366;
	Peajes[MAX_PEAJE][objectid_peaje] = CreateDynamicObject(Peajes[MAX_PEAJE][objectmodel], Peajes[MAX_PEAJE][PosXTrue], Peajes[MAX_PEAJE][PosYTrue], Peajes[MAX_PEAJE][PosZTrue], Peajes[MAX_PEAJE][PosRotXTrue], Peajes[MAX_PEAJE][PosRotYTrue], Peajes[MAX_PEAJE][PosRotZTrue], -1, -1, -1, MAX_RADIO_STREAM);
	Peajes[MAX_PEAJE][PosXFalse] 	= -1761.982055;
	Peajes[MAX_PEAJE][PosYFalse] 	= -658.628234;
	Peajes[MAX_PEAJE][PosZFalse]		= 17.653646;
	Peajes[MAX_PEAJE][PosRotXFalse] 	= 4.000000;
	Peajes[MAX_PEAJE][PosRotYFalse] 	= 2.299999;
	Peajes[MAX_PEAJE][PosRotZFalse] 	= -179.700042;
	Peajes[MAX_PEAJE][typePeajeOrParqueo]	= 0;
	Peajes[MAX_PEAJE][AnimObject]	= 1;
	Peajes[MAX_PEAJE][PosCommandX] 		= -1765.4451;
	Peajes[MAX_PEAJE][PosCommandY] 		= -652.9922;
	Peajes[MAX_PEAJE][PosCommandZ] 		= 19.9730;

	// TUNEL SF-LS Izquierda
	MAX_PEAJE++;
	Peajes[MAX_PEAJE][objectmodel]	= 968;
	Peajes[MAX_PEAJE][PosXTrue] 	= 5.8720703125;
	Peajes[MAX_PEAJE][PosYTrue] 	= -1318.119140625;
	Peajes[MAX_PEAJE][PosZTrue] 	= 11.241556167603;
	Peajes[MAX_PEAJE][PosRotXTrue] = 0;
	Peajes[MAX_PEAJE][PosRotYTrue] = 270;
	Peajes[MAX_PEAJE][PosRotZTrue] = 307.99633789063;
	Peajes[MAX_PEAJE][objectid_peaje] = CreateDynamicObject(Peajes[MAX_PEAJE][objectmodel], Peajes[MAX_PEAJE][PosXTrue], Peajes[MAX_PEAJE][PosYTrue], Peajes[MAX_PEAJE][PosZTrue], Peajes[MAX_PEAJE][PosRotXTrue], Peajes[MAX_PEAJE][PosRotYTrue], Peajes[MAX_PEAJE][PosRotZTrue], -1, -1, -1, MAX_RADIO_STREAM);
	Peajes[MAX_PEAJE][PosXFalse] 	= 5.8720703125;
	Peajes[MAX_PEAJE][PosYFalse] 	= -1318.119140625;
	Peajes[MAX_PEAJE][PosZFalse]		= 11.241556167603;
	Peajes[MAX_PEAJE][PosRotXFalse] 	= 0;
	Peajes[MAX_PEAJE][PosRotYFalse] 	= 358;
	Peajes[MAX_PEAJE][PosRotZFalse] 	= 307.99914550781;
	Peajes[MAX_PEAJE][typePeajeOrParqueo]	= 0;
	Peajes[MAX_PEAJE][PosCommandX] 		= 9.0634;
	Peajes[MAX_PEAJE][PosCommandY] 		= -1311.3982;
	Peajes[MAX_PEAJE][PosCommandZ] 		= 11.8607;

	// TUNEL SF-LS Derecha
	MAX_PEAJE++;
	Peajes[MAX_PEAJE][objectmodel]	= 968;
	Peajes[MAX_PEAJE][PosXTrue] 	= 23.958234;
	Peajes[MAX_PEAJE][PosYTrue] 	= -1339.254516;
	Peajes[MAX_PEAJE][PosZTrue] 	= 9.898574;
	Peajes[MAX_PEAJE][PosRotXTrue] = 0;
	Peajes[MAX_PEAJE][PosRotYTrue] = 90;
	Peajes[MAX_PEAJE][PosRotZTrue] = 307;
	Peajes[MAX_PEAJE][objectid_peaje] = CreateDynamicObject(Peajes[MAX_PEAJE][objectmodel], Peajes[MAX_PEAJE][PosXTrue], Peajes[MAX_PEAJE][PosYTrue], Peajes[MAX_PEAJE][PosZTrue], Peajes[MAX_PEAJE][PosRotXTrue], Peajes[MAX_PEAJE][PosRotYTrue], Peajes[MAX_PEAJE][PosRotZTrue], -1, -1, -1, MAX_RADIO_STREAM);
	Peajes[MAX_PEAJE][PosXFalse] 	= 23.974609375;
	Peajes[MAX_PEAJE][PosYFalse] 	= -1339.2861328125;
	Peajes[MAX_PEAJE][PosZFalse]		= 9.8272972106934;
	Peajes[MAX_PEAJE][PosRotXFalse] 	= 0;
	Peajes[MAX_PEAJE][PosRotYFalse] 	= 0;
	Peajes[MAX_PEAJE][PosRotZFalse] 	= 307;
	Peajes[MAX_PEAJE][typePeajeOrParqueo]	= 0;
	Peajes[MAX_PEAJE][PosCommandX] 		= 19.7701;
	Peajes[MAX_PEAJE][PosCommandY] 		= -1347.0822;
	Peajes[MAX_PEAJE][PosCommandZ] 		= 10.0829;

	// Teatro (Parqueo)
	MAX_PEAJE++;
	Peajes[MAX_PEAJE][objectmodel]	= 968;
	Peajes[MAX_PEAJE][PosXTrue] 	= -2208.0036621094;
	Peajes[MAX_PEAJE][PosYTrue] 	= 309.81323242188;
	Peajes[MAX_PEAJE][PosZTrue] 	= 35.054977416992;
	Peajes[MAX_PEAJE][PosRotXTrue] = 0;
	Peajes[MAX_PEAJE][PosRotYTrue] = 90;
	Peajes[MAX_PEAJE][PosRotZTrue] = 0;
	Peajes[MAX_PEAJE][objectid_peaje] = CreateDynamicObject(Peajes[MAX_PEAJE][objectmodel], Peajes[MAX_PEAJE][PosXTrue], Peajes[MAX_PEAJE][PosYTrue], Peajes[MAX_PEAJE][PosZTrue], Peajes[MAX_PEAJE][PosRotXTrue], Peajes[MAX_PEAJE][PosRotYTrue], Peajes[MAX_PEAJE][PosRotZTrue], -1, -1, -1, MAX_RADIO_STREAM);
	Peajes[MAX_PEAJE][PosXFalse] 	= -2208.0029296875;
	Peajes[MAX_PEAJE][PosYFalse] 	= 309.8125;
	Peajes[MAX_PEAJE][PosZFalse]		= 35.054977416992;
	Peajes[MAX_PEAJE][PosRotXFalse] 	= 0;
	Peajes[MAX_PEAJE][PosRotYFalse] 	= 9.99755859375;
	Peajes[MAX_PEAJE][PosRotZFalse] 	= 0;
	Peajes[MAX_PEAJE][typePeajeOrParqueo]	= 1;

  	// SFMD(Parqueo)
	MAX_PEAJE++;
	Peajes[MAX_PEAJE][objectmodel]	= 968;
	Peajes[MAX_PEAJE][PosXTrue] 	= -2558.08984375;
	Peajes[MAX_PEAJE][PosYTrue] 	= 578.4189453125;
	Peajes[MAX_PEAJE][PosZTrue] 	= 14.354976654053;
	Peajes[MAX_PEAJE][PosRotXTrue] = 0;
	Peajes[MAX_PEAJE][PosRotYTrue] = 270;
	Peajes[MAX_PEAJE][PosRotZTrue] = 0;
	Peajes[MAX_PEAJE][objectid_peaje] = CreateDynamicObject(Peajes[MAX_PEAJE][objectmodel], Peajes[MAX_PEAJE][PosXTrue], Peajes[MAX_PEAJE][PosYTrue], Peajes[MAX_PEAJE][PosZTrue], Peajes[MAX_PEAJE][PosRotXTrue], Peajes[MAX_PEAJE][PosRotYTrue], Peajes[MAX_PEAJE][PosRotZTrue], -1, -1, -1, MAX_RADIO_STREAM);
	Peajes[MAX_PEAJE][PosXFalse] 	= -2558.08984375;
	Peajes[MAX_PEAJE][PosYFalse] 	= 578.41973876953;
	Peajes[MAX_PEAJE][PosZFalse]		= 14.354976654053;
	Peajes[MAX_PEAJE][PosRotXFalse] 	= 0;
	Peajes[MAX_PEAJE][PosRotYFalse] 	= 345;
	Peajes[MAX_PEAJE][PosRotZFalse] 	= 0;
	Peajes[MAX_PEAJE][typePeajeOrParqueo]	= 1;

  	// Peaje San Fierro 2 - 1
	MAX_PEAJE++;
	Peajes[MAX_PEAJE][objectmodel]	= 968;
	Peajes[MAX_PEAJE][PosXTrue] 	= -982.780883;
	Peajes[MAX_PEAJE][PosYTrue] 	= -408.270507;
	Peajes[MAX_PEAJE][PosZTrue] 	= 35.916259;
	Peajes[MAX_PEAJE][PosRotXTrue] = 0;
	Peajes[MAX_PEAJE][PosRotYTrue] = 88.000000;
	Peajes[MAX_PEAJE][PosRotZTrue] = 338.719726;
	Peajes[MAX_PEAJE][objectid_peaje] = CreateDynamicObject(Peajes[MAX_PEAJE][objectmodel], Peajes[MAX_PEAJE][PosXTrue], Peajes[MAX_PEAJE][PosYTrue], Peajes[MAX_PEAJE][PosZTrue], Peajes[MAX_PEAJE][PosRotXTrue], Peajes[MAX_PEAJE][PosRotYTrue], Peajes[MAX_PEAJE][PosRotZTrue], -1, -1, -1, MAX_RADIO_STREAM);
	Peajes[MAX_PEAJE][PosXFalse] 	= -982.717102;
	Peajes[MAX_PEAJE][PosYFalse] 	= -408.291046;
	Peajes[MAX_PEAJE][PosZFalse]		= 35.916259;
	Peajes[MAX_PEAJE][PosRotXFalse] 	= 0;
	Peajes[MAX_PEAJE][PosRotYFalse] 	= 0;
	Peajes[MAX_PEAJE][PosRotZFalse] 	= 339.280029;
	Peajes[MAX_PEAJE][typePeajeOrParqueo]	= 0;
	Peajes[MAX_PEAJE][PosCommandX] 		= -982.2113;
	Peajes[MAX_PEAJE][PosCommandY] 		= -414.0052;
	Peajes[MAX_PEAJE][PosCommandZ] 		= 35.9799;

  	// Peaje San Fierro 2 - 1
	MAX_PEAJE++;
	Peajes[MAX_PEAJE][objectmodel]	= 968;
	Peajes[MAX_PEAJE][PosXTrue] 	= -983.131164;
	Peajes[MAX_PEAJE][PosYTrue] 	= -408.080413;
	Peajes[MAX_PEAJE][PosZTrue] 	= 35.950702;
	Peajes[MAX_PEAJE][PosRotXTrue] = 0;
	Peajes[MAX_PEAJE][PosRotYTrue] = 88.899993;
	Peajes[MAX_PEAJE][PosRotZTrue] = 159.000000;
	Peajes[MAX_PEAJE][objectid_peaje] = CreateDynamicObject(Peajes[MAX_PEAJE][objectmodel], Peajes[MAX_PEAJE][PosXTrue], Peajes[MAX_PEAJE][PosYTrue], Peajes[MAX_PEAJE][PosZTrue], Peajes[MAX_PEAJE][PosRotXTrue], Peajes[MAX_PEAJE][PosRotYTrue], Peajes[MAX_PEAJE][PosRotZTrue], -1, -1, -1, MAX_RADIO_STREAM);
	Peajes[MAX_PEAJE][PosXFalse] 	= -983.262695;
	Peajes[MAX_PEAJE][PosYFalse] 	= -408.084716;
	Peajes[MAX_PEAJE][PosZFalse]		= 35.916259;
	Peajes[MAX_PEAJE][PosRotXFalse] 	= 0;
	Peajes[MAX_PEAJE][PosRotYFalse] 	= 0;
	Peajes[MAX_PEAJE][PosRotZFalse] 	= 160;
	Peajes[MAX_PEAJE][typePeajeOrParqueo]= 0;
	Peajes[MAX_PEAJE][PosCommandX] 		= -984.2950;
	Peajes[MAX_PEAJE][PosCommandY] 		= -401.3462;
	Peajes[MAX_PEAJE][PosCommandZ] 		= 35.9929;

  	// Parqueo Teatro LS
	MAX_PEAJE++;
	Peajes[MAX_PEAJE][objectmodel]	= 968;
	Peajes[MAX_PEAJE][PosXTrue] 	= 1324.8583984375;
	Peajes[MAX_PEAJE][PosYTrue] 	= -1171.7626953125;
	Peajes[MAX_PEAJE][PosZTrue] 	=  23.6;
	Peajes[MAX_PEAJE][PosRotXTrue] = 0;
	Peajes[MAX_PEAJE][PosRotYTrue] = 90;
	Peajes[MAX_PEAJE][PosRotZTrue] = 180;
	Peajes[MAX_PEAJE][objectid_peaje] = CreateDynamicObject(Peajes[MAX_PEAJE][objectmodel], Peajes[MAX_PEAJE][PosXTrue], Peajes[MAX_PEAJE][PosYTrue], Peajes[MAX_PEAJE][PosZTrue], Peajes[MAX_PEAJE][PosRotXTrue], Peajes[MAX_PEAJE][PosRotYTrue], Peajes[MAX_PEAJE][PosRotZTrue], -1, -1, -1, MAX_RADIO_STREAM);
	Peajes[MAX_PEAJE][PosXFalse] 	= 1324.8583984375;
	Peajes[MAX_PEAJE][PosYFalse] 	= -1171.7626953125;
	Peajes[MAX_PEAJE][PosZFalse]		= 23.6;
	Peajes[MAX_PEAJE][PosRotXFalse] 	= 0;
	Peajes[MAX_PEAJE][PosRotYFalse] 	= 0;
	Peajes[MAX_PEAJE][PosRotZFalse] 	= 180;
	Peajes[MAX_PEAJE][typePeajeOrParqueo]= 1;

  	// Parqueo Ayuntamiento
	MAX_PEAJE++;
	Peajes[MAX_PEAJE][objectmodel]	= 968;
	Peajes[MAX_PEAJE][PosXTrue] 	= 1106.5576171875;
	Peajes[MAX_PEAJE][PosYTrue] 	= -1745.056640625;
	Peajes[MAX_PEAJE][PosZTrue] 	=  13.204897880554;
	Peajes[MAX_PEAJE][PosRotXTrue] = 0;
	Peajes[MAX_PEAJE][PosRotYTrue] = 90;
	Peajes[MAX_PEAJE][PosRotZTrue] = 90;
	Peajes[MAX_PEAJE][objectid_peaje] = CreateDynamicObject(Peajes[MAX_PEAJE][objectmodel], Peajes[MAX_PEAJE][PosXTrue], Peajes[MAX_PEAJE][PosYTrue], Peajes[MAX_PEAJE][PosZTrue], Peajes[MAX_PEAJE][PosRotXTrue], Peajes[MAX_PEAJE][PosRotYTrue], Peajes[MAX_PEAJE][PosRotZTrue], -1, -1, -1, MAX_RADIO_STREAM);
	Peajes[MAX_PEAJE][PosXFalse] 	= 1106.5576171875;
	Peajes[MAX_PEAJE][PosYFalse] 	= -1745.056640625;
	Peajes[MAX_PEAJE][PosZFalse]		= 13.204897880554;
	Peajes[MAX_PEAJE][PosRotXFalse] 	= 0;
	Peajes[MAX_PEAJE][PosRotYFalse] 	= 0;
	Peajes[MAX_PEAJE][PosRotZFalse] 	= 90;
	Peajes[MAX_PEAJE][typePeajeOrParqueo]= 1;

  	// Parqueo Ayuntamiento Museo
	MAX_PEAJE++;
	Peajes[MAX_PEAJE][objectmodel]	= 968;
	Peajes[MAX_PEAJE][PosXTrue] 	= 1210.1999511719;
	Peajes[MAX_PEAJE][PosYTrue] 	= -1841.908203125;
	Peajes[MAX_PEAJE][PosZTrue] 	=  13.199999809265;
	Peajes[MAX_PEAJE][PosRotXTrue] = 0;
	Peajes[MAX_PEAJE][PosRotYTrue] = 90;
	Peajes[MAX_PEAJE][PosRotZTrue] = 0;
	Peajes[MAX_PEAJE][objectid_peaje] = CreateDynamicObject(Peajes[MAX_PEAJE][objectmodel], Peajes[MAX_PEAJE][PosXTrue], Peajes[MAX_PEAJE][PosYTrue], Peajes[MAX_PEAJE][PosZTrue], Peajes[MAX_PEAJE][PosRotXTrue], Peajes[MAX_PEAJE][PosRotYTrue], Peajes[MAX_PEAJE][PosRotZTrue], -1, -1, -1, MAX_RADIO_STREAM);
	Peajes[MAX_PEAJE][PosXFalse] 	= 1210.1999511719;
	Peajes[MAX_PEAJE][PosYFalse] 	= -1841.908203125;
	Peajes[MAX_PEAJE][PosZFalse]		= 13.199999809265;
	Peajes[MAX_PEAJE][PosRotXFalse] 	= 0;
	Peajes[MAX_PEAJE][PosRotYFalse] 	= 0;
	Peajes[MAX_PEAJE][PosRotZFalse] 	= 0;
	Peajes[MAX_PEAJE][typePeajeOrParqueo]= 1;
	
  	// Parqueo Ayuntamiento Museo
	MAX_PEAJE++;
	Peajes[MAX_PEAJE][objectmodel]	= 968;
	Peajes[MAX_PEAJE][PosXTrue] 	= 1273.5;
	Peajes[MAX_PEAJE][PosYTrue] 	= -1841.9609375;
	Peajes[MAX_PEAJE][PosZTrue] 	=  13.170000076294;
	Peajes[MAX_PEAJE][PosRotXTrue] = 0;
	Peajes[MAX_PEAJE][PosRotYTrue] = 90;
	Peajes[MAX_PEAJE][PosRotZTrue] = 180;
	Peajes[MAX_PEAJE][objectid_peaje] = CreateDynamicObject(Peajes[MAX_PEAJE][objectmodel], Peajes[MAX_PEAJE][PosXTrue], Peajes[MAX_PEAJE][PosYTrue], Peajes[MAX_PEAJE][PosZTrue], Peajes[MAX_PEAJE][PosRotXTrue], Peajes[MAX_PEAJE][PosRotYTrue], Peajes[MAX_PEAJE][PosRotZTrue], -1, -1, -1, MAX_RADIO_STREAM);
	Peajes[MAX_PEAJE][PosXFalse] 	= 1273.5;
	Peajes[MAX_PEAJE][PosYFalse] 	= -1841.9609375;
	Peajes[MAX_PEAJE][PosZFalse]		= 13.170000076294;
	Peajes[MAX_PEAJE][PosRotXFalse] 	= 0;
	Peajes[MAX_PEAJE][PosRotYFalse] 	= 0;
	Peajes[MAX_PEAJE][PosRotZFalse] 	= 180;
	Peajes[MAX_PEAJE][typePeajeOrParqueo]= 1;
	
  	// Parqueo SML
	MAX_PEAJE++;
	Peajes[MAX_PEAJE][objectmodel]	= 968;
	Peajes[MAX_PEAJE][PosXTrue] 	= -2123.774169;
	Peajes[MAX_PEAJE][PosYTrue] 	= -80.860343;
	Peajes[MAX_PEAJE][PosZTrue]		= 35.030315;
	Peajes[MAX_PEAJE][PosRotXTrue] = 180;
	Peajes[MAX_PEAJE][PosRotYTrue] = 268.999938;
	Peajes[MAX_PEAJE][PosRotZTrue] = 0;
	Peajes[MAX_PEAJE][objectid_peaje] = CreateDynamicObject(Peajes[MAX_PEAJE][objectmodel], Peajes[MAX_PEAJE][PosXTrue], Peajes[MAX_PEAJE][PosYTrue], Peajes[MAX_PEAJE][PosZTrue], Peajes[MAX_PEAJE][PosRotXTrue], Peajes[MAX_PEAJE][PosRotYTrue], Peajes[MAX_PEAJE][PosRotZTrue], -1, -1, -1, MAX_RADIO_STREAM);
	Peajes[MAX_PEAJE][PosXFalse] 	= -2123.774169;
	Peajes[MAX_PEAJE][PosYFalse] 	= -80.860343;
	Peajes[MAX_PEAJE][PosZFalse]		= 35.030315;
	Peajes[MAX_PEAJE][PosRotXFalse] 	= 180;
	Peajes[MAX_PEAJE][PosRotYFalse] 	= 180;
	Peajes[MAX_PEAJE][PosRotZFalse] 	= 0;
	Peajes[MAX_PEAJE][typePeajeOrParqueo]= 1;

  	// Ayuntamiento Parking 1
	MAX_PEAJE++;
	Peajes[MAX_PEAJE][objectmodel]	= 968;
	Peajes[MAX_PEAJE][PosXTrue] 	= 1760.4208984375;
	Peajes[MAX_PEAJE][PosYTrue] 	= -1694.7099609375;
	Peajes[MAX_PEAJE][PosZTrue]		= 13.199999809265;
	Peajes[MAX_PEAJE][PosRotXTrue] = 0;
	Peajes[MAX_PEAJE][PosRotYTrue] = 90;
	Peajes[MAX_PEAJE][PosRotZTrue] = 89.999938964844;
	Peajes[MAX_PEAJE][objectid_peaje] = CreateDynamicObject(Peajes[MAX_PEAJE][objectmodel], Peajes[MAX_PEAJE][PosXTrue], Peajes[MAX_PEAJE][PosYTrue], Peajes[MAX_PEAJE][PosZTrue], Peajes[MAX_PEAJE][PosRotXTrue], Peajes[MAX_PEAJE][PosRotYTrue], Peajes[MAX_PEAJE][PosRotZTrue], -1, -1, -1, MAX_RADIO_STREAM);
	Peajes[MAX_PEAJE][PosXFalse] 	= 1760.4208984375;
	Peajes[MAX_PEAJE][PosYFalse] 	= -1694.7099609375;
	Peajes[MAX_PEAJE][PosZFalse]		= 13.199999809265;
	Peajes[MAX_PEAJE][PosRotXFalse] 	= 0;
	Peajes[MAX_PEAJE][PosRotYFalse] 	= 0;
	Peajes[MAX_PEAJE][PosRotZFalse] 	= 90;
	Peajes[MAX_PEAJE][typePeajeOrParqueo]= 1;

  	// Ayuntamiento Parking 2
	MAX_PEAJE++;
	Peajes[MAX_PEAJE][objectmodel]	= 968;
	Peajes[MAX_PEAJE][PosXTrue] 	= 1760.4208984375;
	Peajes[MAX_PEAJE][PosYTrue] 	= -1697.419921875;
	Peajes[MAX_PEAJE][PosZTrue]		= 13.199999809265;
	Peajes[MAX_PEAJE][PosRotXTrue] = 0;
	Peajes[MAX_PEAJE][PosRotYTrue] = 90;
	Peajes[MAX_PEAJE][PosRotZTrue] = 270.00006103516;
	Peajes[MAX_PEAJE][objectid_peaje] = CreateDynamicObject(Peajes[MAX_PEAJE][objectmodel], Peajes[MAX_PEAJE][PosXTrue], Peajes[MAX_PEAJE][PosYTrue], Peajes[MAX_PEAJE][PosZTrue], Peajes[MAX_PEAJE][PosRotXTrue], Peajes[MAX_PEAJE][PosRotYTrue], Peajes[MAX_PEAJE][PosRotZTrue], -1, -1, -1, MAX_RADIO_STREAM);
	Peajes[MAX_PEAJE][PosXFalse] 	= 1760.4208984375;
	Peajes[MAX_PEAJE][PosYFalse] 	= -1697.419921875;
	Peajes[MAX_PEAJE][PosZFalse]		= 13.199999809265;
	Peajes[MAX_PEAJE][PosRotXFalse] 	= 0;
	Peajes[MAX_PEAJE][PosRotYFalse] 	= 0;
	Peajes[MAX_PEAJE][PosRotZFalse] 	= 270;
	Peajes[MAX_PEAJE][typePeajeOrParqueo]= 1;

	// END PEAJES
}
public IsPlayerNearPeaje(playerid, option, price)
{
	new MsgPeaje[MAX_TEXT_CHAT];
	new PeajeOrParking[20];
	if ( !option )
	{
	    PeajeOrParking = "Peaje";
	}
	else
	{
	    PeajeOrParking = "Parqueo";
	}
	new Float:Conteo;
	do
	{
	    Conteo++;
		for (new i = 0; i <= MAX_PEAJE; i++)
		{
		    if ( Peajes[i][typePeajeOrParqueo] == option )
		    {

				if( Peajes[i][PosCommandX] == 0 && IsPlayerInRangeOfPoint(playerid, Conteo, Peajes[i][PosXTrue], Peajes[i][PosYTrue], Peajes[i][PosZTrue]) ||
					Peajes[i][PosCommandX] != 0 && IsPlayerInRangeOfPoint(playerid, 5.0, Peajes[i][PosCommandX], Peajes[i][PosCommandY], Peajes[i][PosCommandZ]) )
				{
					new Float:ObjectPosRot[3]; GetDynamicObjectRot(Peajes[i][objectid_peaje], ObjectPosRot[0], ObjectPosRot[1], ObjectPosRot[2]);
					new Float:ObjectPos[3]; GetDynamicObjectPos(Peajes[i][objectid_peaje], ObjectPos[0], ObjectPos[1], ObjectPos[2]);
					if ( Peajes[i][PosRotXTrue] == ObjectPosRot[0] && 	Peajes[i][PosRotYTrue]  == ObjectPosRot[1] && 	Peajes[i][PosRotZTrue] == ObjectPosRot[2] &&
					     Peajes[i][PosXTrue] 	== ObjectPos[0]    && 	Peajes[i][PosYTrue] 	== ObjectPos[1]    &&	Peajes[i][PosZTrue] == ObjectPos[2] )
					{
						if (PlayersData[playerid][Dinero] >= price )
				        {
							FaccionData[GOBIERNO][Deposito] = FaccionData[GOBIERNO][Deposito] + price;
							if ( Peajes[i][AnimObject] )
							{
								SetDynamicObjectPos(Peajes[i][objectid_peaje], Peajes[i][PosXFalse], Peajes[i][PosYFalse], Peajes[i][PosZFalse]);
								SetDynamicObjectRot(Peajes[i][objectid_peaje], Peajes[i][PosRotXFalse], Peajes[i][PosRotYFalse], Peajes[i][PosRotZFalse]);
								SetTimerEx("ClosedPeaje", 3000, false, "d", i);
							}
							else
							{
								MovePeajeDynamicOne(i, 0.0);
							}
							format(MsgPeaje, sizeof(MsgPeaje), "Has pagado el %s, te costo $%i", PeajeOrParking, price);
							SendInfoMessage(playerid, 2, "0", MsgPeaje);
							GivePlayerMoneyEx(playerid, -price);
				        }
				        else
				        {
							format(MsgPeaje, sizeof(MsgPeaje), "No tienes dinero para pagar el %s! Cuesta $%i", PeajeOrParking, price);
							SendInfoMessage(playerid, 0, "864", MsgPeaje);
						}
					}
					else
					{
						format(MsgPeaje, sizeof(MsgPeaje), "El %s todavía se encuentra abierto, no necesita pagarlo!", PeajeOrParking);
						SendInfoMessage(playerid, 0, "862", MsgPeaje);
					}
					return true;
				}
			}
		}
	}
	while( Conteo != 10 );
	format(MsgPeaje, sizeof(MsgPeaje), "No te encuentras en ningún %s!", PeajeOrParking);
	SendInfoMessage(playerid, 0, "863", MsgPeaje);
	return false;
}
public ClosedPeaje(peajeid)
{
	SetDynamicObjectPos(Peajes[peajeid][objectid_peaje], Peajes[peajeid][PosXTrue], Peajes[peajeid][PosYTrue], Peajes[peajeid][PosZTrue]);
	SetDynamicObjectRot(Peajes[peajeid][objectid_peaje], Peajes[peajeid][PosRotXTrue], Peajes[peajeid][PosRotYTrue], Peajes[peajeid][PosRotZTrue]);
}
public SetPlayerCall(playerid, numberphone)
{
	if ( PlayersData[playerid][Phone] != 0)
	{
	    if ( !IsPlayerInCall(playerid) )
	    {
	        if ( PlayersData[playerid][Phone] != numberphone )
	        {
	            if ( numberphone > 0 )
	            {
	                if ( PlayersDataOnline[playerid][PhoneOnline] )
	                {
			            for (new i = 0; i < MAX_PLAYERS; i++)
			            {
							if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersData[i][Phone] == numberphone && PlayersDataOnline[i][PhoneOnline] && IsNotPhoneInBlackList(i, PlayersData[playerid][Phone]) )
							{
								if ( PlayersDataOnline[i][InCall] == -1 )
								{
								    if ( PlayersData[playerid][Saldo] >= 1 )
								    {
								    	if ( PlayersDataOnline[playerid][CallTime] < gettime() )
								    	{
									        PlayersDataOnline[playerid][CallTime] = gettime() + 5;
										    PlayersDataOnline[playerid][Altavoz] = false;
									        PlayersDataOnline[playerid][ICall] = true;
										    PlayersDataOnline[playerid][InCall] = i;
										    PlayersDataOnline[i][InCall] = playerid;

										    new MsgToMe[MAX_TEXT_CHAT];
										    new MsgToPlayer[MAX_TEXT_CHAT];
										    new IsAgenda = IsInAgendaNumber(playerid, numberphone);
										    new IsAgendaYou = IsInAgendaNumber(i, PlayersData[playerid][Phone]);

											if ( IsAgenda != -1)
											{
												format(MsgToMe, sizeof(MsgToMe), " Está llamando a %s al número %i, use \"/C\" (Colgar).",  AgendaData[playerid][IsAgenda][NameC], PlayersData[i][Phone]);
											}
											else
											{
									            format(MsgToMe, sizeof(MsgToMe), " Está dando timbre el número %i use \"/C\" (Colgar).", PlayersData[i][Phone]);
								            }

										    if (PlayersData[i][Admin] >= 1)
										    {
												if ( IsAgendaYou != -1)
												{
		           								    format(MsgToPlayer, sizeof(MsgToPlayer), " Está recibiendo una llamada de %s número %i use \"/D\" (Descolgar) o \"/C\" (Colgar) (([%i]))", AgendaData[i][IsAgendaYou][NameC], PlayersData[playerid][Phone], playerid);
		       								    }
		       								    else
		       								    {
		           								    format(MsgToPlayer, sizeof(MsgToPlayer), " Está recibiendo una llamada del número %i use \"/D\" (Descolgar) o \"/C\" (Colgar) (([%i]))", PlayersData[playerid][Phone], playerid);
												}
										    }
										    else
										    {
												if ( IsAgendaYou != -1)
												{
		           								    format(MsgToPlayer, sizeof(MsgToPlayer), " Está recibiendo una llamada de %s número %i use \"/D\" (Descolgar) o \"/C\" (Colgar)", AgendaData[i][IsAgendaYou][NameC], PlayersData[playerid][Phone]);
		       								    }
		       								    else
		       								    {
		           								    format(MsgToPlayer, sizeof(MsgToPlayer), " Está recibiendo una llamada del número %i use \"/D\" (Descolgar) o \"/C\" (Colgar)", PlayersData[playerid][Phone]);
												}
											}
											Acciones(playerid, 8, "saca su móvil y marca unos números");
											Acciones(i, 8, "le suena el móvil");

											SendClientMessage(playerid, COLOR_INFO_MOVIL, MsgToMe);
											SendClientMessage(i, COLOR_INFO_MOVIL, MsgToPlayer);
											PlayersDataOnline[playerid][IsDescolgado] 	= true;
											PlayersDataOnline[i][IsDescolgado] 			= false;

											SetPlayerDescolgar(playerid);
											return true;
									    }
									    else
									    {
											SendInfoMessage(playerid, 0, "1219", "Tienes que esperar 5 segundos entre cada llamada!");
										}
								    }
								    else
								    {
										SendInfoMessage(playerid, 0, "1021", "No tienes saldo para realizar una llamada!");
									}
								}
								else
								{
									SendInfoMessage(playerid, 0, "393", "El móvil que llama se encuentra ocupado!");
								}
							    return false;
							}
						}
						SendInfoMessage(playerid, 0, "394", "El móvil que llama se encuentra apagado o no existe!");
					}
					else
					{
						SendInfoMessage(playerid, 0, "894", "Tiene el móvil apagado, enciendelo si desea realizar una llamada!");
					}
				}
				else
				{
					SendInfoMessage(playerid, 0, "395", "El número que introdujo no existe");
				}
			}
	        else
	        {
				SendInfoMessage(playerid, 0, "396", "Ha introducído su mismo número de móvil");
			}
		}
	}
	else
	{
		SendInfoMessage(playerid, 0, "398", "Tú no tienes móvil");
	}
	return false;
}
public IsNotZero(playerid, number)
{
	if ( number > 0 && number <= 999999)
	{
	    return true;
	}
	else
	{
		SendInfoMessage(playerid, 0, "882", "Debe depositar o retirar más de $0 y menos de $999999");
		return false;
	}
}
public SetVehicleHidden(vehicleid)
{
	if ( GetVehicleVirtualWorld(vehicleid) != 999 )
	{
		SetVehicleVirtualWorld(vehicleid, 999);
		DataCars[vehicleid][RespawnTimerId] = SetTimerEx("SetVehicleShow", MAX_TIME_VEHICLE_HIDDEN, false, "d", vehicleid);
		DataCars[vehicleid][WorldLast] 		= DataCars[vehicleid][World];
		DataCars[vehicleid][InteriorLast]	= DataCars[vehicleid][Interior];
	}
}
public SetVehicleShow(vehicleid)
{
	SetVehicleVirtualWorldEx(vehicleid, DataCars[vehicleid][World]);
	LinkVehicleToInteriorEx(vehicleid, DataCars[vehicleid][Interior]);
}
public RemoveVehicleHidden(vehicleid)
{
	if (GetVehicleVirtualWorld(vehicleid) == 999 )
	{
		KillTimer(DataCars[vehicleid][RespawnTimerId]);
		SetVehicleShow(vehicleid);
	}
}
public GetPlayerScoreEx(playerid)
{
	new LevelRp;
	new MyHoursPlaying = PlayersData[playerid][HoursPlaying];
	new Count=4;
	while (MyHoursPlaying >= Count)
	{
	    MyHoursPlaying = MyHoursPlaying - Count;
	    Count = Count + 4;
	    LevelRp++;
	}
	return LevelRp;
}
public GetPlayerScoreMax(playerid)
{
	new MyHoursPlaying = PlayersData[playerid][HoursPlaying];
	new Count=4;
	while (MyHoursPlaying >= Count)
	{
	    MyHoursPlaying = MyHoursPlaying - Count;
	    Count = Count + 4;
	}
    return Count;
}
public GetPlayerScoreMin(playerid)
{
	new MyHoursPlaying = PlayersData[playerid][HoursPlaying];
	new Count=4;
	while (MyHoursPlaying >= Count)
	{
	    MyHoursPlaying = MyHoursPlaying - Count;
	    Count = Count + 4;
	}
    return MyHoursPlaying;
}
public CheckPlayersAFK()
{
	new Float:PosAFK[4];
	for ( new i = 0; i < MAX_PLAYERS; i++ )
	{
		if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3)
		{
		    GetPlayerPos(i, PosAFK[0], PosAFK[1], PosAFK[2]);
			GetPlayerFacingAngle(i, PosAFK[3]);
		    if ( PlayersDataOnline[i][IsAFK] && PlayersDataOnline[i][CoordenadasAFK][0] == PosAFK[0] && PlayersDataOnline[i][CoordenadasAFK][1] == PosAFK[1] && PlayersDataOnline[i][CoordenadasAFK][2] == PosAFK[2] && PlayersDataOnline[i][CoordenadasAFK][3] == PosAFK[3] )
		    {
				SendInfoMessage(i, 0, "1162", "Has sido kickeado automáticamente por inactividad (AFK)");
				KickEx(i, 7);
			}
			else
			{
			    GetPlayerPos(i, PlayersDataOnline[i][CoordenadasAFK][0], PlayersDataOnline[i][CoordenadasAFK][1], PlayersDataOnline[i][CoordenadasAFK][2]);
			    GetPlayerFacingAngle(i, PlayersDataOnline[i][CoordenadasAFK][3]);
			    PlayersDataOnline[i][IsAFK] = true;
			}
		}
	}
	SetTimer("CheckPlayersAFK", 900000, false);
}
public LoadAgenda(playerid)
{
	CleanAgenda(playerid);
	new DirBD[50];
	format(DirBD, sizeof(DirBD), "%s%s.ulp", DIR_CONTACTS, PlayersDataOnline[playerid][NameOnline]);
	if ( fexist(DirBD) )
	{
	    new AgendaDataLoad[MAX_AGENDA_DATA];
	    new TempNumber[10];
		new File:LoadAgendaF = fopen(DirBD, io_read);
		fread(LoadAgendaF, AgendaDataLoad);
		fclose(LoadAgendaF);

		new PosSplitAfter;
		new NameOrNumber;
		new AgendaCount;
		new PassAgenda;
		for ( new i = 0; i < MAX_PLAYER_CONTACT*3; i++ )
		{
			PosSplitAfter = strfind(AgendaDataLoad, "³", false);
			if (!NameOrNumber)
			{
				strmid(AgendaData[playerid][AgendaCount][NameC], AgendaDataLoad, 0, PosSplitAfter, sizeof(AgendaDataLoad));
				NameOrNumber = true;
			}
			else if ( NameOrNumber == 1 )
			{
				strmid(TempNumber, AgendaDataLoad, 0, PosSplitAfter, sizeof(AgendaDataLoad));
				AgendaData[playerid][AgendaCount][NumberC] = strval(TempNumber);
				NameOrNumber = 2;

			}
			else
			{
				strmid(TempNumber, AgendaDataLoad, 0, PosSplitAfter, sizeof(AgendaDataLoad));
				if ( strval(TempNumber) )
				{
					AgendaData[playerid][AgendaCount][IsBlackList] = true;
				}
				else
				{
					AgendaData[playerid][AgendaCount][IsBlackList] = false;
				}
				NameOrNumber = false;
				PassAgenda = true;
			}
			strdel(AgendaDataLoad, 0, PosSplitAfter + 1);
			
		    //printf("%s - %i - %i", AgendaData[playerid][AgendaCount][NameC], AgendaData[playerid][AgendaCount][NumberC], AgendaData[playerid][AgendaCount][IsBlackList]);
		    if ( PassAgenda )
		    {
                AgendaCount++;
                PassAgenda = false;
			}

		}
	}
}
public SaveAgenda(playerid)
{
	new DirBD[50];
	format(DirBD, sizeof(DirBD), "%s%s.ulp", DIR_CONTACTS, PlayersDataOnline[playerid][NameOnline]);

	new AgendaDataSave[MAX_AGENDA_DATA];
	new TempConvert[50];
	for (new i = 0; i < MAX_PLAYER_CONTACT; i++)
	{
	    format(TempConvert, sizeof(TempConvert), "%s³%i³%i³", AgendaData[playerid][i][NameC], AgendaData[playerid][i][NumberC], AgendaData[playerid][i][IsBlackList]);
        strcat(AgendaDataSave, TempConvert, sizeof(AgendaDataSave));
	}
	new File:SaveAgenda1 = fopen(DirBD, io_write);
	fwrite(SaveAgenda1, AgendaDataSave);
	fclose(SaveAgenda1);
}
public CleanAgenda(playerid)
{
	for (new i = 0; i < MAX_PLAYER_CONTACT; i++)
	{
	    format(AgendaData[playerid][i][NameC], MAX_AGENDA_NAME, "");
	    AgendaData[playerid][i][NumberC] 		= 0;
	    AgendaData[playerid][i][IsBlackList] 	= false;
    }
}
public ShowHomeAgenda(playerid)
{
	ShowPlayerDialogEx(playerid,19,DIALOG_STYLE_LIST,"{00A5FF}Agenda - Inicio", "{00F50A}1- {E6E6E6}Contactos \r\n{00F50A}2- {E6E6E6}Agregar \r\n{00F50A}3- {E6E6E6}Eliminar\r\n{00A5FF}4- {E6E6E6}Contactos Bloqueados\r\n{00A5FF}5- {E6E6E6}Bloquear\r\n{00A5FF}6- {E6E6E6}Desbloquear\r\n{F5FF00}7- {E6E6E6}SMS\r\n{F5FF00}8- {E6E6E6}SMS Borrar Todos\r\n{0037FF}9- {E6E6E6}Buscar", "Ir", "Salir");
}
public ShowHomeAgendaOptions(playerid, agendaid)
{
	PlayersDataOnline[playerid][SaveAfterAgenda][0] = agendaid;
	new TempFormat[35];
	format(TempFormat, sizeof(TempFormat), "{00A5FF}Agenda - %s", AgendaData[playerid][agendaid][NameC]);
	if ( AgendaData[playerid][agendaid][IsBlackList] )
	{
		ShowPlayerDialogEx(playerid,127,DIALOG_STYLE_LIST, TempFormat,"{00F50A}1- {E6E6E6}Llamar\r\n{00F50A}2- {E6E6E6}Enviar SMS\r\n{00F50A}3- {00F50A}Desbloquear\r\n{00F50A}4- {E6E6E6}Eliminar", "Seleccionar", "Atrás");
	}
	else
	{
		ShowPlayerDialogEx(playerid,127,DIALOG_STYLE_LIST, TempFormat,"{00F50A}1- {E6E6E6}Llamar\r\n{00F50A}2- {E6E6E6}Enviar SMS\r\n{00F50A}3- {F50000}Bloquear\r\n{00F50A}4- {E6E6E6}Eliminar", "Seleccionar", "Atrás");
	}
}
public ShowContactosAgenda(playerid)
{
	new AgendaDialog[2150];
	new TempConvert[50];
	new ConteoAgenda = -1;
	for (new i = 0; i < MAX_PLAYER_CONTACT; i++)
	{
	    if ( strlen(AgendaData[playerid][i][NameC]) >= 2 )
	    {
			if ( ConteoAgenda != -1 )
			{
		    	format(TempConvert, sizeof(TempConvert), "\r\n{E6E6E6}%i - %s", AgendaData[playerid][i][NumberC], AgendaData[playerid][i][NameC]);
	    	}
			else
			{
			    format(TempConvert, sizeof(TempConvert), "{E6E6E6}%i - %s", AgendaData[playerid][i][NumberC], AgendaData[playerid][i][NameC]);
			}
	        strcat(AgendaDialog, TempConvert, sizeof(AgendaDialog));
	        ConteoAgenda++;
	        PlayersDataOnline[playerid][SaveAfterAgenda][ConteoAgenda] = i;
        }
	}
	if (ConteoAgenda != -1)
	{
		ShowPlayerDialogEx(playerid,20,DIALOG_STYLE_LIST,"{00A5FF}Agenda - Contactos", AgendaDialog, "Opciones", "Volver");
	}
	else
	{
		ShowPlayerDialogEx(playerid,21,DIALOG_STYLE_MSGBOX,"{00A5FF}Agenda - Información", "{F0F0F0}No se encontrarón contactos en la agenda.", "Aceptar", "Volver");
	}
}
public ShowAgregarAgenda(playerid, option)
{
	switch(option)
	{
		// Agregar Nombre
		case 0:
		{
			ShowPlayerDialogEx(playerid,22,DIALOG_STYLE_INPUT,"{00A5FF}Agenda - Agregar Nombre", "{F0F0F0}Introduzca un nombre para su contacto", "Siguiente", "Inicio");
		}
		// Agregar Número
		case 1:
		{
			ShowPlayerDialogEx(playerid,23,DIALOG_STYLE_INPUT,"{00A5FF}Agenda - Agregar Número", "{F0F0F0}Introduzca el número para su contacto", "Agregar", "Inicio");
		}
	}
}
public ShowEliminarAgenda(playerid)
{
	new AgendaDialog[2150];
	new TempConvert[50];
	new ConteoAgenda = -1;
	for (new i = 0; i < MAX_PLAYER_CONTACT; i++)
	{
	    if ( strlen(AgendaData[playerid][i][NameC]) >= 2 )
	    {
			if ( ConteoAgenda != -1 )
			{
		    	format(TempConvert, sizeof(TempConvert), "\r\n{E6E6E6}%i - %s", AgendaData[playerid][i][NumberC], AgendaData[playerid][i][NameC]);
	    	}
			else
			{
			    format(TempConvert, sizeof(TempConvert), "{E6E6E6}%i - %s", AgendaData[playerid][i][NumberC], AgendaData[playerid][i][NameC]);
			}
	        strcat(AgendaDialog, TempConvert, sizeof(AgendaDialog));
	        ConteoAgenda++;
	        PlayersDataOnline[playerid][SaveAfterAgenda][ConteoAgenda] = i;
        }
	}
	if (ConteoAgenda != -1)
	{
		ShowPlayerDialogEx(playerid,26,DIALOG_STYLE_LIST,"{00A5FF}Agenda - Eliminar Contacto", AgendaDialog, "Eliminar", "Volver");
	}
	else
	{
		ShowPlayerDialogEx(playerid,21,DIALOG_STYLE_MSGBOX,"{00A5FF}Agenda - Información", "{F0F0F0}No se encontrarón contactos en la agenda.", "Aceptar", "Volver");
	}
}
public AddNumberToAgenda(playerid, name[], number)
{
	new found;
	for (new i = 0; i < MAX_PLAYER_CONTACT; i++)
	{
	    if ( strlen(AgendaData[playerid][i][NameC]) <= 1 )
	    {
	        format(AgendaData[playerid][i][NameC], MAX_AGENDA_NAME, "%s", name);
	        AgendaData[playerid][i][NumberC] = number;
	        AgendaData[playerid][i][IsBlackList] = false;
	        found = true;
	        break;
	    }
    }
    if ( !found )
    {
		ShowPlayerDialogEx(playerid,21,DIALOG_STYLE_MSGBOX,"{00A5FF}Agenda - Información", "{F0F0F0}Agenda llena.", "Aceptar", "Volver");
		return false;
	}
	else
	{
	    return true;
	}
}
public RemoveNumberToAgenda(playerid, agendaid)
{
    format(AgendaData[playerid][agendaid][NameC], MAX_AGENDA_NAME, "");
    AgendaData[playerid][agendaid][NumberC] = 0;
    AgendaData[playerid][playerid][IsBlackList]    = false;
}
public ShowContactosBloqueados(playerid)
{
	new AgendaDialog[2150];
	new TempConvert[50];
	new ConteoAgenda = -1;
	for (new i = 0; i < MAX_PLAYER_CONTACT; i++)
	{
	    if ( strlen(AgendaData[playerid][i][NameC]) >= 2 && AgendaData[playerid][i][IsBlackList])
	    {
			if ( ConteoAgenda != -1 )
			{
		    	format(TempConvert, sizeof(TempConvert), "\r\n{E6E6E6}%i - %s", AgendaData[playerid][i][NumberC], AgendaData[playerid][i][NameC]);
	    	}
			else
			{
			    format(TempConvert, sizeof(TempConvert), "{E6E6E6}%i - %s", AgendaData[playerid][i][NumberC], AgendaData[playerid][i][NameC]);
			}
	        strcat(AgendaDialog, TempConvert, sizeof(AgendaDialog));
	        ConteoAgenda++;
	        PlayersDataOnline[playerid][SaveAfterAgenda][ConteoAgenda] = i;
        }
	}
	if (ConteoAgenda != -1)
	{
		ShowPlayerDialogEx(playerid,21,DIALOG_STYLE_LIST,"{00A5FF}Agenda - Lista de loqueados", AgendaDialog, "Aceptar", "Volver");
	}
	else
	{
		ShowPlayerDialogEx(playerid,21,DIALOG_STYLE_MSGBOX,"{00A5FF}Agenda - Información", "{F0F0F0}No se encontrarón contactos bloqueados en la agenda.", "Aceptar", "Volver");
	}
}
public ShowAgregarBloqueado(playerid)
{
	new AgendaDialog[2150];
	new TempConvert[50];
	new ConteoAgenda = -1;
	for (new i = 0; i < MAX_PLAYER_CONTACT; i++)
	{
	    if ( strlen(AgendaData[playerid][i][NameC]) >= 2 && !AgendaData[playerid][i][IsBlackList])
	    {
			if ( ConteoAgenda != -1 )
			{
		    	format(TempConvert, sizeof(TempConvert), "\r\n{F50000}%i - %s", AgendaData[playerid][i][NumberC], AgendaData[playerid][i][NameC]);
	    	}
			else
			{
			    format(TempConvert, sizeof(TempConvert), "{F50000}%i - %s", AgendaData[playerid][i][NumberC], AgendaData[playerid][i][NameC]);
			}
	        strcat(AgendaDialog, TempConvert, sizeof(AgendaDialog));
	        ConteoAgenda++;
	        PlayersDataOnline[playerid][SaveAfterAgenda][ConteoAgenda] = i;
        }
	}
	if (ConteoAgenda != -1)
	{
		ShowPlayerDialogEx(playerid,51,DIALOG_STYLE_LIST,"{00A5FF}Agenda - Bloquear", AgendaDialog, "Bloquear", "Volver");
	}
	else
	{
		ShowPlayerDialogEx(playerid,21,DIALOG_STYLE_MSGBOX,"{00A5FF}Agenda - Información", "{F0F0F0}No se encontrarón contactos desbloqueados en la agenda.", "Aceptar", "Volver");
	}
}
public ShowEliminarBloqueado(playerid)
{
	new AgendaDialog[2150];
	new TempConvert[50];
	new ConteoAgenda = -1;
	for (new i = 0; i < MAX_PLAYER_CONTACT; i++)
	{
	    if ( strlen(AgendaData[playerid][i][NameC]) >= 2 && AgendaData[playerid][i][IsBlackList])
	    {
			if ( ConteoAgenda != -1 )
			{
		    	format(TempConvert, sizeof(TempConvert), "\r\n{F50000}%i - %s", AgendaData[playerid][i][NumberC], AgendaData[playerid][i][NameC]);
	    	}
			else
			{
			    format(TempConvert, sizeof(TempConvert), "{F50000}%i - %s", AgendaData[playerid][i][NumberC], AgendaData[playerid][i][NameC]);
			}
	        strcat(AgendaDialog, TempConvert, sizeof(AgendaDialog));
	        ConteoAgenda++;
	        PlayersDataOnline[playerid][SaveAfterAgenda][ConteoAgenda] = i;
        }
	}
	if (ConteoAgenda != -1)
	{
		ShowPlayerDialogEx(playerid,52,DIALOG_STYLE_LIST,"{00A5FF}Agenda - Desbloquear", AgendaDialog, "Desbloquear", "Volver");
	}
	else
	{
		ShowPlayerDialogEx(playerid,21,DIALOG_STYLE_MSGBOX,"{00A5FF}Agenda - Información", "{F0F0F0}No se encontrarón contactos bloqueados en la agenda.", "Aceptar", "Volver");
	}
}
public AddContactToBlock(playerid, agendaid)
{
    AgendaData[playerid][agendaid][IsBlackList] = true;
	new MsgDialog[MAX_TEXT_CHAT];
	format(MsgDialog, sizeof(MsgDialog), "{F0F0F0}El contacto:\n\n{00F50A}Nombre: {F5FF00}%s\n{00F50A}Número: {F5FF00}%i\n\n{F0F0F0}Fue {F50000}BLOQUEADO {F0F0F0}con éxito!", AgendaData[playerid][agendaid][NameC], AgendaData[playerid][agendaid][NumberC]);
	ShowPlayerDialogEx(playerid,21,DIALOG_STYLE_MSGBOX,"{00A5FF}Agenda - Información", MsgDialog, "Aceptar", "Volver");
}
public RemoveContactToBlock(playerid, agendaid)
{
    AgendaData[playerid][agendaid][IsBlackList] = false;
	new MsgDialog[MAX_TEXT_CHAT];
	format(MsgDialog, sizeof(MsgDialog), "{F0F0F0}El contacto:\n\n{00F50A}Nombre: {F5FF00}%s\n{00F50A}Número: {F5FF00}%i\n\n{F0F0F0}Fue {00F50A}DESBLOQUEADO {F0F0F0}con éxito!", AgendaData[playerid][agendaid][NameC], AgendaData[playerid][agendaid][NumberC]);
	ShowPlayerDialogEx(playerid,21,DIALOG_STYLE_MSGBOX,"{00A5FF}Agenda - Información", MsgDialog, "Aceptar", "Volver");
}
public IsPlayerInCall(playerid)
{
    if ( PlayersDataOnline[playerid][InCall] == -1 )
    {
        return false;
	}
	else
	{
		SendInfoMessage(playerid, 0, "397", "Finalize su llamada telefónica actual, antes de realizar otra");
	    return true;
	}
}
public IsInAgendaNumber(playerid, number)
{
	if ( IsObjectInBolsillo(playerid, 4) )
	{
		for (new i = 0; i < MAX_PLAYER_CONTACT; i++)
		{
		    if ( AgendaData[playerid][i][NumberC] == number)
		    {
				return i;
		    }
	    }
	}
    return -1;
}
public IsNotMax100(Float:number, option)
{
	if (number <= 100)
	{
	    return true;
	}
	else
	{
	    return false;
	}
}
public IsVehicleWithInterior(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if (  vehicleid > MAX_CAR_DUENO && vehicleid <= MAX_CAR_FACCION && GetPlayerVehicleSeat(playerid) >= 2)
	{
	    if ( DataCars[vehicleid][Time] == CNN && GetVehicleModel(vehicleid) == 582 )
	    {
		    SetPlayerVirtualWorldEx(playerid, vehicleid);
		    SetPlayerPos(playerid, TextDrawInfo[PickupidFurgoCNN][PosInfoX], TextDrawInfo[PickupidFurgoCNN][PosInfoY], TextDrawInfo[PickupidFurgoCNN][PosInfoZ]);
		    SetPlayerInteriorEx(playerid, 3);
			SetPlayerFacingAngle(playerid, 359.5986);
			SetCameraBehindPlayer(playerid);
			return true;
		}
		else if ( (DataCars[vehicleid][Time] == SFPD || DataCars[vehicleid][Time] == LSPD) && GetVehicleModel(vehicleid) == 427 )
		{
		    SetPlayerVirtualWorldEx(playerid, vehicleid);
		    SetPlayerPos(playerid, TextDrawInfo[PickupidPoliceFurgo][PosInfoX], TextDrawInfo[PickupidPoliceFurgo][PosInfoY], TextDrawInfo[PickupidPoliceFurgo][PosInfoZ]);
		    SetPlayerInteriorEx(playerid, 3);
			SetPlayerFacingAngle(playerid, 0);
			SetCameraBehindPlayer(playerid);
			return true;
		}
		else if ( (DataCars[vehicleid][Time] == SFMD || DataCars[vehicleid][Time] == LSMD ) && GetVehicleModel(vehicleid) == 416 )
		{
		    SetPlayerVirtualWorldEx(playerid, vehicleid);
		    SetPlayerPos(playerid, TextDrawInfo[PickupidAmbulance][PosInfoX], TextDrawInfo[PickupidAmbulance][PosInfoY], TextDrawInfo[PickupidAmbulance][PosInfoZ]);
		    SetPlayerInteriorEx(playerid, 3);
			SetPlayerFacingAngle(playerid, 359.5986);
			SetCameraBehindPlayer(playerid);
		    return true;
		}
	}
	return false;
}
public IsPlayerInTrain(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if ( GetTrainByVehicleID(vehicleid) )
	{
	    new Vagonid = GetVagonByVehicleID(vehicleid);
	    if ( Vagonid )
	    {
		    SetPlayerVirtualWorldEx(playerid, vehicleid);
		    SetPlayerPos(playerid, TextDrawInfo[PickupExitVagones[Vagonid - 1]][PosInfoX], TextDrawInfo[PickupExitVagones[Vagonid - 1]][PosInfoY], TextDrawInfo[PickupExitVagones[Vagonid - 1]][PosInfoZ]);
		    SetPlayerInteriorEx(playerid, 3);
			SetPlayerFacingAngle(playerid, 180.0);
			SetCameraBehindPlayer(playerid);
			return true;
		}
	}
	return false;
}
public RemoveRallaName(playerid)
{
	new h = strlen(PlayersDataOnline[playerid][NameOnline]);
    for( new i = 0; i < h; i++)
    {
        if ( PlayersDataOnline[playerid][NameOnline][i] == '_')
        {
			format(PlayersDataOnline[playerid][NameOnlineFix], MAX_PLAYER_NAME, "%s", PlayersDataOnline[playerid][NameOnline]);
			PlayersDataOnline[playerid][NameOnlineFix][i] = ' ';
			return true;
		}
	}
	format(PlayersDataOnline[playerid][NameOnlineFix], MAX_PLAYER_NAME, "%s", PlayersDataOnline[playerid][NameOnline]);
	return false;
}
public SendMessageToCallCNN(playerid)
{
	new MsgLlamar[MAX_TEXT_CHAT];
	format(MsgLlamar, sizeof(MsgLlamar), "Ha entrado una llamada vía telefónica a CNN. Número: %i", PlayersData[playerid][Phone]);
	for (new i = 0; i < MAX_PLAYERS; i++)
	{
		if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersData[i][Faccion] == CNN)
		{
			SendInfoMessage(i, 3, "0", MsgLlamar);
		}
	}
}
public UpdateSpawnPlayer(playerid)
{
	if ( PlayersData[playerid][Nacer] == 1 && PlayersData[playerid][House] != -1 ||
		 PlayersData[playerid][Nacer] == 1 && PlayersData[playerid][Alquiler] != -1 ||
		 PlayersData[playerid][Nacer] == 2 && IsPlayerInHouseFriend(playerid, PlayersData[playerid][SpawnAmigo]) != -1
		 )
	{
	    new HouseId;
	    if ( PlayersData[playerid][Nacer] == 1 )
	    {
		    if ( PlayersData[playerid][Alquiler] != -1 )
		    {
		        HouseId = PlayersData[playerid][Alquiler];
			}
			else
			{
			    HouseId = PlayersData[playerid][House];
			}
		}
		else
		{
		    HouseId = PlayersData[playerid][SpawnAmigo];
		}
		SetSpawnInfo(playerid, -1, PlayersData[playerid][Skin],	HouseData[HouseId][PosX], HouseData[HouseId][PosY], HouseData[HouseId][PosZ], HouseData[HouseId][PosZZ], 0, 0, 0, 0, 0, 0);
	}
	else
	{
	    if ( !PlayersData[playerid][Ciudad] && PlayersData[playerid][Faccion] == CIVIL || PlayersData[playerid][Faccion] != CIVIL)
	    {
			SetSpawnInfo(playerid, -1, PlayersData[playerid][Skin],	FaccionData[PlayersData[playerid][Faccion]][Spawn_X][PlayersData[playerid][SpawnFac]], FaccionData[PlayersData[playerid][Faccion]][Spawn_Y][PlayersData[playerid][SpawnFac]], FaccionData[PlayersData[playerid][Faccion]][Spawn_Z][PlayersData[playerid][SpawnFac]], FaccionData[PlayersData[playerid][Faccion]][Spawn_ZZ][PlayersData[playerid][SpawnFac]], 0, 0, 0, 0, 0, 0);
		}
		else
		{
			SetSpawnInfo(playerid, -1, PlayersData[playerid][Skin],	-2049.9419,461.4292,35.1719,312.4388, 0, 0, 0, 0, 0, 0);
		}
	}
}
public IsPlayerInPincho(playerid, pickupid)
{
	for (new i=0; i < MAX_OBJECTS_VALLAS_CONOS_PINCHOS; i++)
	{
	    if ( VCP[i][objectid_vcp] != -1 && VCP[i][pickupidVCP] == pickupid && IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) == 0)
	    {
	        new MyVehicle = GetPlayerVehicleID(playerid);
			new Vpanel, Vdoors, Vlights, Vtires;
			GetVehicleDamageStatus(MyVehicle, Vpanel, Vdoors, Vlights, Vtires);
			UpdateVehicleDamageStatus(MyVehicle, Vpanel, Vdoors, Vlights, 15);
	        return true;
	    }
	}
	return false;
}
public IsVehicleNotBici(playerid, vehicleid)
{
    if ( coches_Todos_Type[GetVehicleModel(vehicleid) - 400] != BICI &&
		 GetVehicleModel(vehicleid) != 570 )
    {
        return true;
    }
    else
    {
		SendInfoMessage(playerid, 0, "951", "No puede utilizar ese comando con éste vehículo");
		return false;
	}
}
public IsValidName(name[])
{
	// Nombres no permitidos por windows, para archivos.
//CON, PRN, AUX, NUL, COM0, COM1, COM2, COM3, COM4, COM5, COM6, COM7, COM8, COM9,
// LPT0, LPT1, LPT2, LPT3, LPT4, LPT5, LPT6, LPT7, LPT8, and LPT9

	if ( strcmp(name, "CON", true, 3) == 0
	||  strcmp(name, "PRN", true, 3) == 0
	||  strcmp(name, "AUX", true, 3) == 0
	||  strcmp(name, "NUL", true, 3) == 0
	||  strcmp(name, "COM0", true, 4) == 0
	||  strcmp(name, "COM1", true, 4) == 0
	||  strcmp(name, "COM2", true, 4) == 0
	||  strcmp(name, "COM3", true, 4) == 0
	||  strcmp(name, "COM4", true, 4) == 0
	||  strcmp(name, "COM5", true, 4) == 0
	||  strcmp(name, "COM6", true, 4) == 0
	||  strcmp(name, "COM7", true, 4) == 0
	||  strcmp(name, "COM8", true, 4) == 0
	||  strcmp(name, "COM9", true, 4) == 0
	||  strcmp(name, "LPT0", true, 4) == 0
	||  strcmp(name, "LPT1", true, 4) == 0
	||  strcmp(name, "LPT2", true, 4) == 0
	||  strcmp(name, "LPT3", true, 4) == 0
	||  strcmp(name, "LPT4", true, 4) == 0
	||  strcmp(name, "LPT5", true, 4) == 0
	||  strcmp(name, "LPT6", true, 4) == 0
	||  strcmp(name, "LPT7", true, 4) == 0
	||  strcmp(name, "LPT8", true, 4) == 0
	||  strcmp(name, "LPT9", true, 4) == 0 )
	{
		return false;
	}
	else
	{
		return true;
	}
}
public SetPlayerFaccion(playerid, cmdfaccion[])
{
    if (PlayersData[playerid][Admin] >= 7)
    {
		if ( strlen(cmdfaccion) > 10)
		{

			new Datos_PicadosFaccion[3][10];
			            	// 00  	= 	"/Jail"
							// 01	= 	ID
							// 02   =   ID_FACCION
		       // DatosOriginales   =   RANGO

			new DatosOriginales[150];
			format(DatosOriginales, sizeof(DatosOriginales), "%s ", cmdfaccion);
			new wPos;
   			for (new i = 0; i < 3; i++)
    		{
				wPos = strfind(DatosOriginales, " ", false); // HOLA³QUE³PASA³
				strmid(Datos_PicadosFaccion[i], DatosOriginales, 0, wPos, sizeof(DatosOriginales));
				strdel(DatosOriginales, 0, wPos + 1);
			}

			if ( IsPlayerConnected(strval(Datos_PicadosFaccion[1])) )
			{
				if ( strval(Datos_PicadosFaccion[2]) >= CIVIL && strval(Datos_PicadosFaccion[2]) <= MAX_FACCION )
				{
					if ( strval(DatosOriginales) <= GetMaxFaccionRango(strval(Datos_PicadosFaccion[2])) || strval(Datos_PicadosFaccion[2]) == 0 )
					{
                        PlayersData[strval(Datos_PicadosFaccion[1])][Faccion] = strval(Datos_PicadosFaccion[2]);
                        PlayersData[strval(Datos_PicadosFaccion[1])][HorasWork] = 0;
                        PlayersData[strval(Datos_PicadosFaccion[1])][SpawnFac] = 0;
						if ( strval(Datos_PicadosFaccion[2]) != CIVIL )
						{
	                        PlayersData[strval(Datos_PicadosFaccion[1])][Rango]   = strval(DatosOriginales);
							PlayersData[strval(Datos_PicadosFaccion[1])][Skin] = RangosSkins[PlayersData[strval(Datos_PicadosFaccion[1])][Faccion]][PlayersData[strval(Datos_PicadosFaccion[1])][Rango]][0];
							SetPlayerSkinEx(strval(Datos_PicadosFaccion[1]), RangosSkins[PlayersData[strval(Datos_PicadosFaccion[1])][Faccion]][PlayersData[strval(Datos_PicadosFaccion[1])][Rango]][0]);

						}
						else
						{
		                    PlayersData[strval(Datos_PicadosFaccion[1])][Rango]   = 7;
						    PlayersData[strval(Datos_PicadosFaccion[1])][Skin] = 26;
						    SetPlayerSkinEx(strval(Datos_PicadosFaccion[1]), 26);
						}

						new MsgAcceptUser[MAX_TEXT_CHAT]; format(MsgAcceptUser, sizeof(MsgAcceptUser), "Metíste a %s a la Facción \"%s\" con rango \"%s\"", PlayersDataOnline[strval(Datos_PicadosFaccion[1])][NameOnline], FaccionData[strval(Datos_PicadosFaccion[2])][NameFaccion], FaccionesRangos[strval(Datos_PicadosFaccion[2])][PlayersData[strval(Datos_PicadosFaccion[1])][Rango]]);
						new MsgAcceptMe[MAX_TEXT_CHAT]; format(MsgAcceptMe, sizeof(MsgAcceptMe), "El administrador %s te ha metido ha la Facción \"%s\" con rango \"%s\"", PlayersDataOnline[playerid][NameOnline], FaccionData[strval(Datos_PicadosFaccion[2])][NameFaccion], FaccionesRangos[strval(Datos_PicadosFaccion[2])][PlayersData[strval(Datos_PicadosFaccion[1])][Rango]]);
                        SendInfoMessage(strval(Datos_PicadosFaccion[1]), 3, "0", MsgAcceptMe);
                        SendInfoMessage(playerid, 3, "0", MsgAcceptUser);

						CheckAsignados(strval(Datos_PicadosFaccion[1]));
						SetPlayerLockAllVehicles(strval(Datos_PicadosFaccion[1]));
						UpdateSpawnPlayer(strval(Datos_PicadosFaccion[1]));
					}
					else
					{
						SendInfoMessage(playerid, 0, "139", "La rango que introdujo no existe para esa facción");
					}
				}
				else
				{
					SendInfoMessage(playerid, 0, "140", "La Facción que introdujo no existe");
				}
			}
			else
			{
				SendInfoMessage(playerid, 0, "141", "El jugador que desea cambiar de Facción no se encuentra conectado");
			}
		}
		else
		{
			SendInfoMessage(playerid, 0, "142", "Ha introducído mal el sintaxis del comando /Facción. Ejemplo correcto: /Facción 2 8 2.");
		}
	}
	else
	{
		SendInfoMessage(playerid, 0, "143", "Tú no tienes acceso a el comando /Facción.");
	}
}
public SetPlayerFaccionEx(playerid, command[])
{
    if (PlayersData[playerid][Admin] >= 7)
    {
		if ( strlen(command) > 15)
		{

			new NameF[MAX_PLAYER_NAME];
			strmid(NameF, command, GetPosSpace(command, 1) + 1, GetPosSpace(command, 2));

			new FaccionID = strval(command[GetPosSpace(command, 2)]);
			new RangoID = strval(command[GetPosSpace(command, 3)]);

			if ( IsPlayerConnectedEx(NameF) == -1)
			{
				if ( FaccionID >= CIVIL && FaccionID <= MAX_FACCION )
				{
					if ( RangoID <= GetMaxFaccionRango(FaccionID) || FaccionID == 0 )
					{
					    new playeridF = 499;
					    format(PlayersDataOnline[playeridF][NameOnline], MAX_PLAYER_NAME, "%s", NameF);
						if (DataUserLoad(playeridF))
						{
						    new LastFaccion = PlayersData[playeridF][Faccion];
						    new LastRango = PlayersData[playeridF][Rango];
							PlayersData[playeridF][Faccion] = FaccionID;
						    PlayersData[playeridF][HorasWork] = 0;
                            PlayersData[playeridF][SpawnFac] = 0;
							if ( FaccionID != CIVIL )
							{
								PlayersData[playeridF][Rango]   = RangoID;
								PlayersData[playeridF][Skin] = RangosSkins[PlayersData[playeridF][Faccion]][PlayersData[playeridF][Rango]][0];

								if ( PlayersData[playeridF][Job] == VENDEDOR_MOVIL )
								{
								    PlayersData[playeridF][Job] = NINGUNO;
								}
							}
							else
							{
							    PlayersData[playeridF][Rango]   = 7;
							    PlayersData[playeridF][Skin] = 26;
							}
							CheckAsignados(playeridF);

							new MsgAcceptUser[256];
							format(MsgAcceptUser, sizeof(MsgAcceptUser), "Metíste a %s a la Facción \"%s\" con rango \"%s\" estaba en la facción \"%s\" con rango \"%s\"",
							PlayersDataOnline[playeridF][NameOnline],
							FaccionData[FaccionID][NameFaccion],
							FaccionesRangos[FaccionID][PlayersData[playeridF][Rango]],
							FaccionData[LastFaccion][NameFaccion],
							FaccionesRangos[LastFaccion][LastRango]);

	                        SendInfoMessage(playerid, 3, "0", MsgAcceptUser);

							PlayersDataOnline[playeridF][Spawn] = false;
							DataUserSave(playeridF);
						}
						else
						{
							SendInfoMessage(playerid, 0, "956", "No existe ese jugador en la base de datos!");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "957", "La rango que introdujo no existe para esa facción");
					}
				}
				else
				{
					SendInfoMessage(playerid, 0, "958", "La Facción que introdujo no existe");
				}
			}
			else
			{
				SendInfoMessage(playerid, 0, "959", "El jugador que desea cambiar de Facción se encuentra conectado, utilize /Facción");
			}
		}
		else
		{
			SendInfoMessage(playerid, 0, "960", "Ha introducído mal el sintaxis del comando /FacciónEx. Ejemplo correcto: /FacciónEx Ikki_Katsu 5 0.");
		}
	}
	else
	{
		SendInfoMessage(playerid, 0, "961", "Tú no tienes acceso a el comando /FacciónEx.");
	}
}
public IsPlayerConnectedEx(playername[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && strfind(playername, PlayersDataOnline[i][NameOnline], true) == 0 && strlen(playername) == strlen(PlayersDataOnline[i][NameOnline]) )
		{
		    return i;
		}
    }
	return -1;
}
public LoadJobs()
{
	format(Jobs[NINGUNO][NameJob], MAX_FACCION_NAME, "Ninguno");

	format(Jobs[PESCA][NameJob], MAX_FACCION_NAME, "Pescador");
	format(Jobs[VENDEDOR_MOVIL][NameJob], MAX_FACCION_NAME, "Vendedor de Móviles");
}
public LoadTextDrawInfo()
{
	// PESCA
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoX] = 612.8910;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoY] = -2995.3770;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoZ] = 7.2706;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PickupidTextInfo] = CreatePickup	(1239, 	1,  TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoX], TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoY], TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoZ],	 	WORLD_NORMAL);
    Jobs[PESCA][pickupidGet] = TextDrawInfo[MAX_TEXT_DRAW_INFO][PickupidTextInfo];
	SetStyleTextDrawTextDrawInfo(MAX_TEXT_DRAW_INFO, "Si desea ser pescador~N~Use ~R~/~G~Trabajar");

	////////////////////////////////////////////////
	MAX_TEXT_DRAW_INFO++;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoX] = -1503.5508;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoY] = 1380.0824;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoZ] = 3.4375;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PickupidTextInfo] = CreatePickup	(1239, 	1,  TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoX], TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoY], TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoZ],	 	WORLD_NORMAL);
    JobsData[PESCA_PickupidVender] = MAX_TEXT_DRAW_INFO;
	SetStyleTextDrawTextDrawInfo(MAX_TEXT_DRAW_INFO, "Use ~R~/~G~Vender Peces");

	////////////////////////////////////////////////
	MAX_TEXT_DRAW_INFO++;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoX] = 565.2724;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoY] = -3035.1536;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoZ] = 3.0419;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PickupidTextInfo] = CreatePickup	(1239, 	1,  TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoX], TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoY], TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoZ],	 	WORLD_NORMAL);
    JobsData[PESCA_PickupidPescar] = MAX_TEXT_DRAW_INFO;
	SetStyleTextDrawTextDrawInfo(MAX_TEXT_DRAW_INFO, "Zona de pesca~N~Use ~R~/~G~Pescar");

	////////////////////////////////////////////////
	MAX_TEXT_DRAW_INFO++;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoX] = 2452.4606933594;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoY] = 1845.6982421875;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoZ] = 16.32413482666;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PickupidTextInfo] = CreatePickup	(1239, 	1,  TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoX], TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoY], TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoZ],	 	-1);
    PickupidAmbulance = MAX_TEXT_DRAW_INFO;
	SetStyleTextDrawTextDrawInfo(MAX_TEXT_DRAW_INFO, "Salir de la ambulancia");

	////////////////////////////////////////////////
	MAX_TEXT_DRAW_INFO++;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoX] = 2643.2592773438;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoY] = 1887.0278320313;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoZ] = 18.815624237061;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PickupidTextInfo] = CreatePickup	(1239, 	1,  TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoX], TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoY], TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoZ],	 	-1);
    PickupidFurgoCNN = MAX_TEXT_DRAW_INFO;
	SetStyleTextDrawTextDrawInfo(MAX_TEXT_DRAW_INFO, "Salir de la furgona CNN");

	////////////////////////////////////////////////
	MAX_TEXT_DRAW_INFO++;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoX] = 2394.7495117188;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoY] = 1159.5728759766;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoZ] = 34.606250762939;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PickupidTextInfo] = CreatePickup	(1239, 	1,  TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoX], TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoY], TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoZ],	 	-1);
    PickupExitVagones[0] = MAX_TEXT_DRAW_INFO;
	SetStyleTextDrawTextDrawInfo(MAX_TEXT_DRAW_INFO, "Salida del Vag\xa6n 1");

	////////////////////////////////////////////////
	MAX_TEXT_DRAW_INFO++;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoX] = 2407.3837890625;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoY] = 1136.6993408203;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoZ] = 34.267810821533;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PickupidTextInfo] = CreatePickup	(1239, 	1,  TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoX], TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoY], TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoZ],	 	-1);
    PickupExitVagones[1] = MAX_TEXT_DRAW_INFO;
	SetStyleTextDrawTextDrawInfo(MAX_TEXT_DRAW_INFO, "Salida del Vag\xa6n 2");

	////////////////////////////////////////////////
	MAX_TEXT_DRAW_INFO++;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoX] = 2393.4990234375;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoY] = 1113.5131835938;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoZ] = 34.726249694824;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PickupidTextInfo] = CreatePickup	(1239, 	1,  TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoX], TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoY], TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoZ],	 	-1);
    PickupExitVagones[2] = MAX_TEXT_DRAW_INFO;
	SetStyleTextDrawTextDrawInfo(MAX_TEXT_DRAW_INFO, "Salida del Vag\xa6n 3");

	////////////////////////////////////////////////
	MAX_TEXT_DRAW_INFO++;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoX] = 1478.9347;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoY] = -1672.9708;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoZ] = 14.0469;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PickupidTextInfo] = CreatePickup	(1239, 	1,  TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoX], TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoY], TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoZ],	 	-1);
	SetStyleTextDrawTextDrawInfo(MAX_TEXT_DRAW_INFO, "~B~UN ~G~Player");

	////////////////////////////////////////////////
	MAX_TEXT_DRAW_INFO++;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoX] = 2365.8909;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoY] = 1559.6465;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoZ] = 27.9562;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PickupidTextInfo] = CreatePickup	(1239, 	1,  TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoX], TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoY], TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoZ],	 	WORLD_DEFAULT_INTERIOR);
	SetStyleTextDrawTextDrawInfo(MAX_TEXT_DRAW_INFO, "C\x98maras Los Santos~N~Use ~R~/~G~C\x98maras");

	////////////////////////////////////////////////
	MAX_TEXT_DRAW_INFO++;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoX] = 1961.4952;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoY] = 973.3851;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoZ] = 21.8714;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PickupidTextInfo] = CreatePickup	(1239, 	1,  TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoX], TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoY], TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoZ],	 	WORLD_DEFAULT_INTERIOR);
	SetStyleTextDrawTextDrawInfo(MAX_TEXT_DRAW_INFO, "C\x98maras San Fierro~N~Use ~R~/~G~C\x98maras");

	////////////////////////////////////////////////
	MAX_TEXT_DRAW_INFO++;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoX] = 1316.2865;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoY] = 1385.0859;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoZ] = 10.8797;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PickupidTextInfo] = CreatePickup	(1239, 	1,  TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoX], TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoY], TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoZ],	 	WORLD_DEFAULT_INTERIOR);
    SuperMercadosPickupid[0] = MAX_TEXT_DRAW_INFO;
	SetStyleTextDrawTextDrawInfo(MAX_TEXT_DRAW_INFO, "SuperMercados ~Y~San ~B~Fierro~N~~B~Use ~R~/~G~SuperMercado");

	////////////////////////////////////////////////
	MAX_TEXT_DRAW_INFO++;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoX] = 1555.6737;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoY] = -2558.0864;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoZ] = 13.5628;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PickupidTextInfo] = CreatePickup	(1239, 	1,  TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoX], TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoY], TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoZ],	 	WORLD_DEFAULT_INTERIOR);
    SuperMercadosPickupid[1] = MAX_TEXT_DRAW_INFO;
	SetStyleTextDrawTextDrawInfo(MAX_TEXT_DRAW_INFO, "SuperMercados ~Y~Los ~B~Santos~N~~B~Use ~R~/~G~SuperMercado");
	
	////////////////////////////////////////////////
	MAX_TEXT_DRAW_INFO++;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoX] = -1961.2986;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoY] = 438.8855;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoZ] = 35.1719;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PickupidTextInfo] = CreatePickup	(1239, 	1,  TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoX], TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoY], TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoZ],	 	WORLD_NORMAL);
    Jobs[VENDEDOR_MOVIL][pickupidGet] = TextDrawInfo[MAX_TEXT_DRAW_INFO][PickupidTextInfo];
	SetStyleTextDrawTextDrawInfo(MAX_TEXT_DRAW_INFO, "Convi\x9ertase en un vendedor de m\xa6viles!~N~Use ~R~/~G~Trabajar");
	
	////////////////////////////////////////////////
	MAX_TEXT_DRAW_INFO++;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoX] = 1755.9699707031;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoY] = -2670.3698730469;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoZ] = 13.637499809265;
    TextDrawInfo[MAX_TEXT_DRAW_INFO][PickupidTextInfo] = CreatePickup	(1239, 	1,  TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoX], TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoY], TextDrawInfo[MAX_TEXT_DRAW_INFO][PosInfoZ],	 	-1);
    PickupidPoliceFurgo = MAX_TEXT_DRAW_INFO;
	SetStyleTextDrawTextDrawInfo(MAX_TEXT_DRAW_INFO, "Salir del cami\xa6n Swat");

}
public SetStyleTextDrawTextDrawInfo(textdrawid, text[])
{
	new TextDrawTextDrawInfoText[MAX_TEXT_CHAT];
	format(TextDrawTextDrawInfoText, sizeof(TextDrawTextDrawInfoText), "~B~Info: ~W~%s", text);
	TextDrawInfoTextDraws[textdrawid] = TextDrawCreateEx(200.0, 380.0, TextDrawTextDrawInfoText);
	TextDrawUseBox(TextDrawInfoTextDraws[textdrawid], 1);
	TextDrawBackgroundColor(TextDrawInfoTextDraws[textdrawid] ,0x000000FF);
	TextDrawBoxColor(TextDrawInfoTextDraws[textdrawid], 0x00000066);
	TextDrawTextSize(TextDrawInfoTextDraws[textdrawid], 350.0, 380.0);
	TextDrawSetShadow(TextDrawInfoTextDraws[textdrawid], 1);
	TextDrawLetterSize(TextDrawInfoTextDraws[textdrawid], 0.5 , 1.2);
	return textdrawid;
}
public SetVehicleTaxi(vehicleid)
{
	TaxisTaximetro[MAX_TAXIS][TaxiVehicleid] = vehicleid;
	SetTaxiReadyTextDraw(MAX_TAXIS, 0);
	SetTaxiReadyTextDraw(MAX_TAXIS, 1);
	SetTaxiReadyTextDraw(MAX_TAXIS, 2);
	MAX_TAXIS++;
}
public SetTaxiReadyTextDraw(taxiid, textdrawid)
{
	TaxisTaximetro[taxiid][Seats][textdrawid] = TextDrawCreateEx(524.0, 395.0,"Empty");
	TextDrawUseBox(TaxisTaximetro[taxiid][Seats][textdrawid], 1);
	TextDrawBackgroundColor(TaxisTaximetro[taxiid][Seats][textdrawid], 0x000000A3);
	TextDrawColor(TaxisTaximetro[taxiid][Seats][textdrawid], 0x2DFF00FF);
	TextDrawBoxColor(TaxisTaximetro[taxiid][Seats][textdrawid], 0x000000A1);
	TextDrawTextSize(TaxisTaximetro[taxiid][Seats][textdrawid], 625, 400.0);
	TextDrawSetShadow(TaxisTaximetro[taxiid][Seats][textdrawid], 1);
	TextDrawLetterSize(TaxisTaximetro[taxiid][Seats][textdrawid], 0.3 , 1.0);
	TextDrawFont(TaxisTaximetro[taxiid][Seats][textdrawid], 2);
}
public IsVehicleTaxi(vehicleid)
{
	for ( new i = 0; i < MAX_TAXIS; i++)
	{
	    if ( TaxisTaximetro[i][TaxiVehicleid] == vehicleid )
	    {
	        return i;
		}
	}
	return -1;
}
public IsReadyCallPublic(playerid)
{
	if ( gettime() - PlayersDataOnline[playerid][TimeCallPublics] >= 30 )
	{
		PlayersDataOnline[playerid][TimeCallPublics] = gettime();
		return true;
	}
	else
	{
		new MsgDinamicCallP[MAX_TEXT_CHAT];
		format(MsgDinamicCallP, sizeof(MsgDinamicCallP), "No puedes volver a llamar a un teléfono de servicios públicos hasta dentro de %i segundos.", 30 - (gettime() - PlayersDataOnline[playerid][TimeCallPublics]));
		SendInfoMessage(playerid, 0, "979", MsgDinamicCallP);
		return false;
	}
}
public ShowPlayerMenuSelectWalk(playerid)
{
	new ListDialog[350];
	for (new i = 0; i < sizeof(ModeWalkID); i++)
	{
	    if ( i != 0 )
	    {
	    	strcat(ListDialog, "\r\n{E6E6E6}", sizeof(ListDialog));
		}
	    if ( PlayersData[playerid][MyStyleWalk] == i)
	    {
	    	strcat(ListDialog, "{00F50A}> ", sizeof(ListDialog));
	    	strcat(ListDialog, ModeWalkName[i], sizeof(ListDialog));
    	}
    	else
    	{
	    	strcat(ListDialog, ModeWalkName[i], sizeof(ListDialog));
		}
	}
	ShowPlayerDialogEx(playerid,27,DIALOG_STYLE_LIST,"{00A5FF}Seleccionar mi estilo de caminar", ListDialog, "Seleccionar", "Cancelar");
}
public ShowPlayerMenuSelectTalk(playerid)
{
	new ListDialog[350];
	for (new i = 0; i < sizeof(ModeTalkName); i++)
	{
	    if ( i != 0 )
	    {
	    	strcat(ListDialog, "\r\n{E6E6E6}", sizeof(ListDialog));
		}
	    if ( PlayersData[playerid][MyStyleTalk] == i)
	    {
	    	strcat(ListDialog, "{00F50A}> ", sizeof(ListDialog));
	    	strcat(ListDialog, ModeTalkName[i], sizeof(ListDialog));
    	}
    	else
    	{
	    	strcat(ListDialog, ModeTalkName[i], sizeof(ListDialog));
		}
	}
	ShowPlayerDialogEx(playerid,60,DIALOG_STYLE_LIST,"{00A5FF}Seleccionar mi estilo de hablar", ListDialog, "Seleccionar", "Cancelar");
}
/*public ShowPlayerMenuSelectSprint(playerid)
{
	new ListDialog[350];
	for (new i = 0; i < sizeof(ModeSprintName); i++)
	{
	    if ( i != 0 )
	    {
	    	strcat(ListDialog, "\r\n{E6E6E6}", sizeof(ListDialog));
		}
	    if ( PlayersData[playerid][MyStyleSprint] == i)
	    {
	    	strcat(ListDialog, "{00F50A}> ", sizeof(ListDialog));
	    	strcat(ListDialog, ModeSprintName[i], sizeof(ListDialog));
    	}
    	else
    	{
	    	strcat(ListDialog, ModeSprintName[i], sizeof(ListDialog));
		}
	}
	ShowPlayerDialogEx(playerid,61,DIALOG_STYLE_LIST,"{00A5FF}Seleccionar mi estilo de correr", ListDialog, "Seleccionar", "Cancelar");
}*/
public IsNotFullMaterialsPlayer(playerid, newamount)
{
	if ( (PlayersData[playerid][Materiales] + newamount) <= 2500 )
	{
	    return true;
	}
	else
	{
	    return false;
	}
}
public IsNotOneWeapon(weaponid)
{

	if ( SlotIDWeapon[weaponid] != 0   &&
		 SlotIDWeapon[weaponid] != 1   &&
		 SlotIDWeapon[weaponid] != 10  &&
		 SlotIDWeapon[weaponid] != 11  &&
		 SlotIDWeapon[weaponid] != 12   )
	{
	    return true;
	}
	else
	{
	    return false;
	}
}
public CreateVehicleEx(model, Float:Xc, Float:Yc, Float:Zc, Float:ZZc, color1, color2, vehicleid)
{
	if ( coches_Todos_Type[model - 400] != TREN )
	{
   		CreateVehicle(model, Xc, Yc, Zc, ZZc, color1, color2, -1);
   	}
   	else
   	{
   		if ( model == 538 || model == 449 )
   		{
	   		AddStaticVehicle(model, Xc, Yc, Zc, ZZc, color1, color2);

			DataCars[vehicleid][Gas] = MAX_GAS_VEHICLE;
			DataCars[vehicleid][Oil] = MAX_OIL_VEHICLE;

	   		if ( model == 538 )
	   		{
	   			MAX_TRAIN++;
		   		TrainGroups[MAX_TRAIN][0] = vehicleid;
		   		TrainGroups[MAX_TRAIN][1] = vehicleid + 1;
		   		TrainGroups[MAX_TRAIN][2] = vehicleid + 2;
		   		TrainGroups[MAX_TRAIN][3] = vehicleid + 3;
	   		}
   		}
	}

	SetVehicleNumberPlate(vehicleid, DataCars[vehicleid][MatriculaString]);

	if ( vehicleid <= MAX_CAR_DUENO && strlen(DataCars[vehicleid][Dueno]) == 1 )
	{
		DataCars[vehicleid][AlarmOn] = true;
	}
	else
	{
		DataCars[vehicleid][AlarmOn] = false;
	}
	if ( coches_Todos_Type[GetVehicleModel(vehicleid) - 400] != BICI )
	{
		DataCars[vehicleid][StateEncendido] = false;
	}
	else
	{
		DataCars[vehicleid][StateEncendido] = true;
		IsVehicleOff(vehicleid);
	}
	if ( vehicleid > MAX_CAR_DUENO && vehicleid <= MAX_CAR_FACCION && DataCars[vehicleid][Time] == TRAFICANTES && GetVehicleModel(vehicleid) == 483 )
	{
		ChangeVehiclePaintjob(vehicleid, 0);
	}

	SetVehicleParamsEx(vehicleid, DataCars[vehicleid][StateEncendido], DataCars[vehicleid][LightState], false, false, DataCars[vehicleid][CapoState], DataCars[vehicleid][MaleteroState], false);

	SetVehicleVirtualWorld(vehicleid, DataCars[vehicleid][World]);
	LinkVehicleToInterior(vehicleid, DataCars[vehicleid][Interior]);
}
public SetPlateToCarFaccion(vehicleid, faccionid)
{
	format(DataCars[vehicleid][MatriculaString], 32, "%i%i%i%i", faccionid, faccionid, faccionid, vehicleid);
	DataCars[vehicleid][Matricula]	= strval(DataCars[vehicleid][MatriculaString]);
}
public IsVehicleOff(vehicleid)
{
	new EngineC, LightsC, AlarmC, DoorsC, BonnetC, BootC, ObjectiveC;
	GetVehicleParamsEx(vehicleid, EngineC, LightsC, AlarmC, DoorsC, BonnetC, BootC, ObjectiveC);
	SetVehicleParamsEx(vehicleid, DataCars[vehicleid][StateEncendido], DataCars[vehicleid][LightState], DataCars[vehicleid][AlarmOn], DoorsC, DataCars[vehicleid][CapoState], DataCars[vehicleid][MaleteroState], ObjectiveC);
}
public IsAlarmaBug(vehicleid)
{
	new EngineC, LightsC, AlarmC, DoorsC, BonnetC, BootC, ObjectiveC;
	GetVehicleParamsEx(vehicleid, EngineC, LightsC, AlarmC, DoorsC, BonnetC, BootC, ObjectiveC);
	if ( AlarmC && DataCars[vehicleid][AlarmOn] )
	{
		SetVehicleParamsEx(vehicleid, DataCars[vehicleid][StateEncendido], DataCars[vehicleid][LightState], DataCars[vehicleid][AlarmOn], DoorsC, DataCars[vehicleid][CapoState], DataCars[vehicleid][MaleteroState], ObjectiveC);
	}
}
public IsPlayerFoundWeapon(playerid, weaponid)
{
	for (new i = 0; i < 13; i++)
	{
		if ( PlayersData[playerid][WeaponS][i] == weaponid)
		{
		    return i;
		}
	}
    return -1;
}
public CheckVehicleGas()
{
	new CheckTimeVehicle = gettime();
	for (new i = 1; i <= MAX_CAR; i++)
	{
	    if ( coches_Todos_Type[DataCars[i][Modelo] - 400] != TREN && coches_Todos_Type[DataCars[i][Modelo] - 400] != VUELO)
	    {
			IsVehicleBug(i, true);
			if ( DataCars[i][StateEncendido] && (CheckTimeVehicle - DataCars[i][TimeGas]) >= (TIME_CHECK_GAS_VEHICLES / 1000))
			{
			    if ( DataCars[i][Gas] >= 1 )
			    {
			        DataCars[i][Gas]--;
			 	}
			    if ( DataCars[i][ConteoOil] >= 8 && DataCars[i][Oil] >= 1 )
			    {
			        DataCars[i][Oil]--;
			        DataCars[i][ConteoOil] = false;
			 	}

			 	DataCars[i][ConteoOil]++;

		        DataCars[i][TimeGas] = CheckTimeVehicle;

				UpdateGasAndOil(i);
			}
			IsAlarmaBug(i);
		}
	}

    for(new i=0;i<MAX_PLAYERS;i++)
    {
        if (IsPlayerConnected(i)&&PlayersDataOnline[i][StateChannelOOC]&&PlayersDataOnline[i][State] == 3&&!PlayersData[i][Enfermedad])
        {
            if (PlayersDataOnline[i][VidaOn]<=VIDA_CRACK || PlayersData[i][Cansansio]<=1 )
            {
	            if ( random(30) == 15 )
	            {
					new RandomEnfermedad = random(4);
					switch ( RandomEnfermedad )
					{
					    case 0:
					    {
							ChangeEnfermedad(i, 1);
						}
					    case 1:
					    {
							ChangeEnfermedad(i, 2);
						}
					    case 2:
					    {
							ChangeEnfermedad(i, 4);
						}
						case 3:
						{
							ChangeEnfermedad(i, 5);
						}
					}
	       		}
       		}
        }
	}
	new RconCommand[50];
	new SaveTime[3];gettime(SaveTime[0], SaveTime[1], SaveTime[2]);
	format(RconCommand, sizeof(RconCommand), "worldtime Son las %i:%i", SaveTime[0], SaveTime[1], SaveTime[2]);
	SendRconCommand(RconCommand);
	SetTimer("CheckVehicleGas", TIME_CHECK_GAS_VEHICLES, false);
	if ( CheckByTwo )
	{
	    CheckByTwo = false;
		CheckFilesDDoS();
	}
	else
	{
	    CheckByTwo = true;
	}
}
public SetPlayerSelectedTypeHair(playerid)
{
	PlayersDataOnline[playerid][RowHair] = -1;
	GetSpawnInfo(playerid);
	PlayersDataOnline[playerid][Spawn]      = false;
	SetPlayerVirtualWorldEx(playerid, playerid);

	TogglePlayerControllableEx(playerid, 0);
	SetPlayerInteriorEx(playerid, 2);
	SetPlayerPos(playerid, 271.7302, 304.7271 ,999.1558);
	SetPlayerFacingAngle(playerid, 51.5407);

	switch ( PlayersDataOnline[playerid][TypeBuy] )
	{
	    case TYPE_PELO, TYPE_BOINA, TYPE_GORRAS, TYPE_GAFAS, TYPE_CASCO:
	    {
			SetPlayerCameraPos(playerid, 270.673370,305.207397,1000.148193);
			SetPlayerCameraLookAt(playerid, 272.111755,304.713104,1000.055541);
	    }
	    case TYPE_RELOJES:
	    {
			SetPlayerCameraPos(playerid, 270.643951,303.595184,999.548339);
			SetPlayerCameraLookAt(playerid, 271.883331,304.441558,999.555664);
	    }
	    default:
	    {
			SetPlayerCameraPos(playerid, 270.3158,305.6811,1000.0);
			SetPlayerCameraLookAt(playerid, 271.7302, 304.7271 ,999.1558);
	    }
	}

	NextHairSelect(playerid);
}
public NextHairSelect(playerid)
{
	for (new i = PlayersDataOnline[playerid][RowHair]; i <= sizeof(ObjectPlayersInt);)
	{
//	    printf("Here %i", i);
	    i++;
		if ( i >= sizeof(ObjectPlayersInt) )
		{
			i = 0;
		}
	    if ( PlayersDataOnline[playerid][TypeBuy] == ObjectPlayersInt[i][2] )
	    {
//		    printf("Here -> %i", i);
            PlayersDataOnline[playerid][RowHair] = i;
			new RemoveTemp = GetObjectByType(playerid, PlayersDataOnline[playerid][TypeBuy]);
            if ( RemoveTemp != -1 )
            {
                RemoveObjectHoldToPlayer(playerid, -1, RemoveTemp);
            }
            AddObjectHoldToPlayer(playerid, ObjectPlayersInt[i][0]);
            break;
	    }
	}
	if ( PlayersDataOnline[playerid][TypeBuy] == TYPE_PELO )
	{
		ShowPlayerDialogEx(playerid, 147, DIALOG_STYLE_MSGBOX, "{00A5FF}¿Qué tipo de peluca quiere?", "{F0F0F0}Escoga su peluca más a gusto y pulse en \"Escoger\".", "Siguiente", "Escoger!");
	}
	else if ( PlayersDataOnline[playerid][TypeBuy] == TYPE_BOINA )
	{
		ShowPlayerDialogEx(playerid, 147, DIALOG_STYLE_MSGBOX, "{00A5FF}¿Qué tipo de boina quiere?", "{F0F0F0}Escoga su boina más a gusto y pulse en \"Escoger\".", "Siguiente", "Escoger!");
	}
	else if ( PlayersDataOnline[playerid][TypeBuy] == TYPE_GORRAS )
	{
		ShowPlayerDialogEx(playerid, 147, DIALOG_STYLE_MSGBOX, "{00A5FF}¿Qué tipo de gorra quiere?", "{F0F0F0}Escoga su gorra más a gusto y pulse en \"Escoger\".", "Siguiente", "Escoger!");
	}
	else if ( PlayersDataOnline[playerid][TypeBuy] == TYPE_RELOJES )
	{
		ShowPlayerDialogEx(playerid, 147, DIALOG_STYLE_MSGBOX, "{00A5FF}¿Qué tipo de reloj quiere?", "{F0F0F0}Escoga su reloj más a gusto y pulse en \"Escoger\".", "Siguiente", "Escoger!");
	}
	else if ( PlayersDataOnline[playerid][TypeBuy] == TYPE_GAFAS )
	{
		ShowPlayerDialogEx(playerid, 147, DIALOG_STYLE_MSGBOX, "{00A5FF}¿Qué tipo de gafas quiere?", "{F0F0F0}Escoga sus gafas favoritas y pulse en \"Escoger\".", "Siguiente", "Escoger!");
	}
	else if ( PlayersDataOnline[playerid][TypeBuy] == TYPE_CASCO )
	{
		ShowPlayerDialogEx(playerid, 147, DIALOG_STYLE_MSGBOX, "{00A5FF}¿Qué tipo de casco quiere?", "{F0F0F0}Escoga su casco favorito y pulse en \"Escoger\".", "Siguiente", "Escoger!");
	}
}
public SetPlayerSelectedTypeSkin(playerid, option)
{
	if ( option )
	{
		PlayersDataOnline[playerid][TypeSkinList] = false;
	    SetPlayerSelectedSkin(playerid);
	}
	else
	{
	    if ( PlayersData[playerid][Faccion] != CIVIL )
	    {
			ShowPlayerDialogEx(playerid, 28, DIALOG_STYLE_MSGBOX, "{00A5FF}¿Qué ropa desea ponerse?", "{F0F0F0}Seleccione la ropa que desea seleccionar", "Civil", "Trabajo");
		}
		else
		{
			PlayersDataOnline[playerid][TypeSkinList] = true;
			SetPlayerSelectedSkin(playerid);
		}
	}

	GetSpawnInfo(playerid);
	PlayersDataOnline[playerid][Spawn]      = false;
	SetPlayerVirtualWorldEx(playerid, playerid);

	TogglePlayerControllableEx(playerid, 0);
	SetPlayerInteriorEx(playerid, 2);
	SetPlayerPos(playerid, 271.7302, 304.7271 ,999.1558);
	SetPlayerFacingAngle(playerid, 51.5407);
	SetPlayerCameraPos(playerid, 268.2326, 306.7652, 999.1509);
	SetPlayerCameraLookAt(playerid, 271.7302, 304.7271 ,999.1558);
}
public SetPlayerSelectedSkin(playerid)
{
	PlayersDataOnline[playerid][RowSkin] = 0;
	SetPlayerRowSkin(playerid, false);
}
public SetPlayerRowSkin(playerid, response)
{
    if ( response == 0 )
    {
	    if (!PlayersDataOnline[playerid][TypeSkinList] && PlayersData[playerid][Faccion] != CIVIL )
	    {
	        if ( RangosSkins[PlayersData[playerid][Faccion]][PlayersData[playerid][Rango]][PlayersDataOnline[playerid][RowSkin]] != 0 )
	        {
			    PlayersData[playerid][Skin] = RangosSkins[PlayersData[playerid][Faccion]][PlayersData[playerid][Rango]][PlayersDataOnline[playerid][RowSkin]];
	            SetPlayerSkinEx(playerid, RangosSkins[PlayersData[playerid][Faccion]][PlayersData[playerid][Rango]][PlayersDataOnline[playerid][RowSkin]]);
	            PlayersDataOnline[playerid][RowSkin]++;
			}
			else
			{
			    PlayersData[playerid][Skin] = RangosSkins[PlayersData[playerid][Faccion]][PlayersData[playerid][Rango]][0];
				SetPlayerSkinEx(playerid, RangosSkins[PlayersData[playerid][Faccion]][PlayersData[playerid][Rango]][0]);
				PlayersDataOnline[playerid][RowSkin] = 1;
			}
		}
		else if ( PlayersDataOnline[playerid][TypeSkinList] )
		{
	        if ( SKIN_CIVILES[PlayersDataOnline[playerid][RowSkin]] != 999 )
	        {
	            while ( SKIN_CIVILES[PlayersDataOnline[playerid][RowSkin]] == 0 )
	            {
	                PlayersDataOnline[playerid][RowSkin]++;
				}
			    PlayersData[playerid][Skin] = SKIN_CIVILES[PlayersDataOnline[playerid][RowSkin]];
	            SetPlayerSkinEx(playerid, SKIN_CIVILES[PlayersDataOnline[playerid][RowSkin]]);
	            PlayersDataOnline[playerid][RowSkin]++;
			}
			else
			{
			    PlayersData[playerid][Skin] = SKIN_CIVILES[0];
				SetPlayerSkinEx(playerid, SKIN_CIVILES[0]);
				PlayersDataOnline[playerid][RowSkin] = 1;
			}
		}
		PlayersData[playerid][Skin] = GetPlayerSkin(playerid);
		ShowPlayerDialogEx(playerid, 5, DIALOG_STYLE_MSGBOX, "{00A5FF}Seleccione la ropa", "{F0F0F0}Si desea esta ropa pulse en \"Escoger\"", "Escoger", "Siguiente");
	}
	else
	{
	    UpdateSpawnPlayer(playerid);
		PlayersDataOnline[playerid][StateDeath] = true;
	    SpawnPlayerEx(playerid);
		//Streamer_UpdateEx(playerid, FaccionData[PlayersData[playerid][Faccion]][Spawn_X], FaccionData[PlayersData[playerid][Faccion]][Spawn_Y], FaccionData[PlayersData[playerid][Faccion]][Spawn_Z]);
		PlayersDataOnline[playerid][Spawn]      = true;
		TogglePlayerControllableEx(playerid, 1);
		SetSpawnInfoEx(playerid);
	}
}
public SetBuyBares(playerid, option, IsBizz)
{
	new MoneySet;
	switch (option)
	{
	    // AGUA
	    case 0:
		{
			MoneySet = 10;
			Acciones(playerid, 8, "bebe agua");
		}
	    // REFRESCO
	    case 1:
		{
			MoneySet = 20;
			Acciones(playerid, 8, "compra un refresco");
			SetPlayerSpecialAction(playerid, 23); // SPUNK
		}
	    // CERVEZA
	    case 2:
		{
			MoneySet = 30;
			Acciones(playerid, 8, "compra una cerveza");
			SetPlayerSpecialAction(playerid, 22); // CERVEZA
		}
	    // VODKA
	    case 3:
		{
			MoneySet = 40;
			Acciones(playerid, 8, "compra una botella de Vodka");
			SetPlayerSpecialAction(playerid, 22); // WINE
		}
	}
	SetPlayerHealthEx(playerid, MoneySet);
    GivePlayerMoneyEx(playerid, -MoneySet);
	if ( IsBizz )
	{
		SetMoneyExtorsion(GetPlayerVirtualWorld(playerid), MoneySet);
	}
}
public IsBizzBar(playerid, bizzid)
{
	if (bizzid == 13 ||
		bizzid == 14 ||
		bizzid == 15 ||
		bizzid == 18 ||
		bizzid == 19 ||
		bizzid == 25 ||
		bizzid == 26
	  )
	{
	    return true;
	}
	else
	{
	    return false;
	}
}
public LockAlarma(playerid)
{
	new MyNearCar = IsPlayerInNearVehicle(playerid);
	if ( MyNearCar )
	{
		if (IsVehicleMyVehicle(playerid, MyNearCar) ||
			IsVehicleMyFaccion(playerid, MyNearCar) && PlayersData[playerid][Rango] <= 1 ||
			IsVehicleMyFaccion(playerid, MyNearCar) && IsMyCarAsignados(playerid, MyNearCar))
		{
		    new MsgAlarm[MAX_TEXT_CHAT];
		    if ( DataCars[MyNearCar][AlarmOn] )
		    {
		    	DataCars[MyNearCar][AlarmOn] = false;
				GameTextForPlayer(playerid, "~w~Alarma ~R~Desactivada", 1000, 3);
				IsVehicleOff(MyNearCar);
				Acciones(playerid, 8, "desactiva la alarma del vehículo");
	    	}
	    	else
	    	{
		    	DataCars[MyNearCar][AlarmOn] = true;
				GameTextForPlayer(playerid, "~w~Alarma ~G~Activada", 1000, 3);
				Acciones(playerid, 8, "activa la alarma del vehículo");
			}

			if ( MyNearCar <= MAX_CAR_DUENO )
			{
				format(MsgAlarm, sizeof(MsgAlarm), "%s la alarma de su vehículo.", NamesAlarma[DataCars[MyNearCar][AlarmOn]]);
			}
			else
			{
				format(MsgAlarm, sizeof(MsgAlarm), "%s la alarma a un vehículo de facción.", NamesAlarma[DataCars[MyNearCar][AlarmOn]]);
			}
		    SendInfoMessage(playerid, 2, "0", MsgAlarm);
			PlayPlayerStreamSound(playerid, 1147);
		    return true;
	    }
	    else
		{
			SendInfoMessage(playerid, 0, "1006", "Este no es su vehículo");
		    return false;
		}
	}
	else
	{
	    return false;
	}
}
public encode_lights(light1, light2, light3, light4)
{
	return light1 | (light2 << 1) | (light3 << 2) | (light4 << 3);
}
public TimerIntermitentes(vehicleid)
{
	if ( DataCars[vehicleid][IsIntermitente] )
	{
		new Panels, Doors1, Lights, Tires;
		GetVehicleDamageStatus(vehicleid, Panels, Doors1, Lights, Tires);
		if ( DataCars[vehicleid][ConteoIntermitente] )
		{
		    DataCars[vehicleid][ConteoIntermitente] = false;
			if ( DataCars[vehicleid][IsIntermitente] == 1)
			{
				UpdateVehicleDamageStatus(vehicleid, Panels, Doors1, encode_lights(1,1,0,0), Tires);
			}
			else if ( DataCars[vehicleid][IsIntermitente] == 2)
			{
				UpdateVehicleDamageStatus(vehicleid, Panels, Doors1, encode_lights(0,0,1,1), Tires);
			}
			else if ( DataCars[vehicleid][IsIntermitente] == 3)
			{
				DataCars[vehicleid][LightState] = false;
				IsVehicleOff(vehicleid);
				UpdateVehicleDamageStatus(vehicleid, Panels, Doors1, encode_lights(1,1,1,1), Tires);
			}
		}
		else
		{
		    DataCars[vehicleid][ConteoIntermitente] = true;
			DataCars[vehicleid][LightState] = true;
			IsVehicleOff(vehicleid);
			UpdateVehicleDamageStatus(vehicleid, Panels, Doors1, encode_lights(0,0,0,0), Tires);
		}
	    SetTimerEx("TimerIntermitentes", 500, false, "d", vehicleid);
	}
	else
	{
		DataCars[vehicleid][LightState] = true;
		IsVehicleOff(vehicleid);
		new Panels, Doors1, Lights, Tires;
		GetVehicleDamageStatus(vehicleid, Panels, Doors1, Lights, Tires);
		UpdateVehicleDamageStatus(vehicleid, Panels, Doors1, encode_lights(0,0,0,0), Tires);
	}
}
public LockGuantera(playerid)
{
	new MyLockVehicle = IsPlayerInsideVehicle(playerid);
	if ( MyLockVehicle )
	{
		if (IsVehicleMyVehicle(playerid, MyLockVehicle) ||
			IsVehicleMyFaccion(playerid, MyLockVehicle) && PlayersData[playerid][Rango] <= 1 ||
			IsVehicleMyFaccion(playerid, MyLockVehicle) && IsMyCarAsignados(playerid, MyLockVehicle))
		{
		    new MsgLock[MAX_TEXT_CHAT];
		    if ( DataCars[MyLockVehicle][GuanteraLock] )
		    {
		    	DataCars[MyLockVehicle][GuanteraLock] = false;
				GameTextForPlayer(playerid, "~w~Guantera ~R~Cerrada", 1000, 3);
	    	}
	    	else
	    	{
		    	DataCars[MyLockVehicle][GuanteraLock] = true;
				GameTextForPlayer(playerid, "~w~Guantera ~G~Abierta", 1000, 3);
			}

			if ( MyLockVehicle <= MAX_CAR_DUENO )
			{
				format(MsgLock, sizeof(MsgLock), "%s la guantera de su vehículo.", NamesLookReverse[DataCars[MyLockVehicle][GuanteraLock]]);
			}
			else
			{
				format(MsgLock, sizeof(MsgLock), "%s la guantera de un vehículo de facción.", NamesLookReverse[DataCars[MyLockVehicle][GuanteraLock]]);
			}
		    SendInfoMessage(playerid, 2, "0", MsgLock);
		    return true;
	    }
	    else
		{
			SendInfoMessage(playerid, 0, "747", "Este no es su vehículo");
		    return false;
		}
	}
	else
	{
		SendInfoMessage(playerid, 0, "748", "No se encuentra dentro del vehículo");
	    return false;
	}
}
public IsPlayerInsideVehicle(playerid)
{
	if ( PlayersDataOnline[playerid][InCarId] )
	{
	    return PlayersDataOnline[playerid][InCarId];
	}
	else if ( PlayersDataOnline[playerid][InVehicle] )
	{
	    return PlayersDataOnline[playerid][InVehicle];
	}
	return false;
}
public LockMaletero(playerid)
{
	new MyNearCar = IsPlayerInNearVehicle(playerid);
	if ( MyNearCar )
	{
		if (IsVehicleMyVehicle(playerid, MyNearCar) ||
			IsVehicleMyFaccion(playerid, MyNearCar) && PlayersData[playerid][Rango] <= 1 ||
			IsVehicleMyFaccion(playerid, MyNearCar) && IsMyCarAsignados(playerid, MyNearCar))
		{
		    new MsgLock[MAX_TEXT_CHAT];
		    if ( DataCars[MyNearCar][MaleteroState] )
		    {
		    	DataCars[MyNearCar][MaleteroState] = false;
				GameTextForPlayer(playerid, "~w~Maletero ~R~Cerrado", 1000, 3);
	    	}
	    	else
	    	{
		    	DataCars[MyNearCar][MaleteroState] = true;
				GameTextForPlayer(playerid, "~w~Maletero ~G~Abierto", 1000, 3);
			}

			if ( MyNearCar <= MAX_CAR_DUENO )
			{
				format(MsgLock, sizeof(MsgLock), "%s el maletero de su vehículo.", NamesLookReverse[DataCars[MyNearCar][MaleteroState]]);
			}
			else
			{
				format(MsgLock, sizeof(MsgLock), "%s el maletero a un vehículo de facción.", NamesLookReverse[DataCars[MyNearCar][MaleteroState]]);
			}
		    SendInfoMessage(playerid, 2, "0", MsgLock);
			IsVehicleOff(MyNearCar);
		    return true;
	    }
	    else
		{
			SendInfoMessage(playerid, 0, "1007", "Este no es su vehículo");
		    return false;
		}
	}
	else
	{
	    return false;
	}
}
public ShowDialogBar(playerid, listview)
{
    if ( NegociosData[GetPlayerVirtualWorld(playerid)][Materiales] >= 2 )
    {
		if (PlayersData[playerid][Dinero] >= 20 )
		{
		    SetBuyBares(playerid, listview, true);
		}
		else
		{
   		    SendInfoMessage(playerid, 0, "1000", "No tienes suficiente dinero para comprar está bebida");
		}
	}
	else
	{
	    SendInfoMessage(playerid, 0, "1001", "Este bar no tiene materiales");
	}
	ShowPlayerDialogEx(playerid,29,DIALOG_STYLE_LIST,"{00A5FF}Bar", "{E6E6E6}Agua          {00F50A}$10\r\n{E6E6E6}Refresco     {00F50A}$20\r\n{E6E6E6}Cerveza      {00F50A}$30\r\n{E6E6E6}Vodka        {00F50A}$40", "Comprar", "Salir");
}
public ShowDialogBarra(playerid, listview)
{
	if (PlayersData[playerid][Dinero] >= 20 )
	{
	    SetBuyBares(playerid, listview, false);
	}
	else
	{
	    SendInfoMessage(playerid, 0, "1289", "No tienes suficiente dinero para comprar está bebida");
	}
	ShowPlayerDialogEx(playerid,76,DIALOG_STYLE_LIST,"{00A5FF}Barra", "{E6E6E6}Agua          {00F50A}$10\r\n{E6E6E6}Refresco     {00F50A}$20\r\n{E6E6E6}Cerveza      {00F50A}$30\r\n{E6E6E6}Vodka        {00F50A}$40", "Comprar", "Salir");
}
public PayCall(playerid)
{
	if ( PlayersDataOnline[playerid][IsDescolgado] && CallCNN == playerid ||
		 IsPlayerConnected(playerid) && PlayersDataOnline[playerid][IsDescolgado] && PlayersDataOnline[playerid][InCall] != -1 && PlayersDataOnline[playerid][InCall] != 888 && PlayersDataOnline[PlayersDataOnline[playerid][InCall]][IsDescolgado] )
	{
	    if ( PlayersDataOnline[playerid][ICall] )
	    {
			new MenosSaldo = (gettime() - PlayersDataOnline[playerid][TimeCall]) / 5;
			/* Debug System */
			if ( MenosSaldo >= 1000 )
			{
				new MsgAvisoWeapon[256];
			    if ( PlayersDataOnline[playerid][InCall] != 888 )
			    {
				    format(MsgAvisoWeapon, sizeof(MsgAvisoWeapon), "%s Debug-System - Type: Móvil Saldo Múltiple. Usuario bugueado: %s[%i]. Usuario involucrado: %s[%i]. Saldo: %i", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline], playerid, PlayersDataOnline[PlayersDataOnline[playerid][InCall]][NameOnline], PlayersDataOnline[playerid][InCall], MenosSaldo);
			    }
			    else
			    {
				    format(MsgAvisoWeapon, sizeof(MsgAvisoWeapon), "%s Debug-System Type: Móvil Saldo Sólo. Usuario bugueado: %s[%i]. Usuario involucrado: %s[%i]. Saldo: %i", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline], playerid, PlayersDataOnline[PlayersDataOnline[playerid][InCall]][NameOnline], PlayersDataOnline[playerid][InCall], MenosSaldo);
			    }
				MsgCheatsReportsToAdmins(MsgAvisoWeapon);
			    printf("%s", MsgAvisoWeapon);
			}
			else
			{
			/* Debug System */
			
				if ( MenosSaldo == 0 )
				{
			    	PlayersData[playerid][Saldo]--;
			    	MenosSaldo = 1;
			   	}
			   	else
			   	{
					PlayersData[playerid][Saldo] = PlayersData[playerid][Saldo] - MenosSaldo;
				}
			}
		    PlayersDataOnline[playerid][ICall] = false;
			if (IsPlayerConnected(playerid))
			{
				SetGameTextMoneyMin(playerid, MenosSaldo);
			}
			FaccionData[GOBIERNO][Deposito] = FaccionData[GOBIERNO][Deposito] + MenosSaldo;
		}
	}
}
public SetGameTextMoneyMin(playerid, money)
{
	new MsgExToPlayer[MAX_TEXT_CHAT];
	format(MsgExToPlayer, sizeof(MsgExToPlayer), "~W~-~R~%i", money);
	GameTextForPlayer(playerid, MsgExToPlayer, 3000, 1);
}
public SaveDatosPlayerDisconnect(playerid)
{
	if ( IsPlayerConnected(playerid) )
	{
	    SaveIpUser(playerid, false);
	    if ( PlayersDataOnline[playerid][State] == 3 )
	    {
			RemovePlayerDescription(playerid, false, false);
		    new MyTime = gettime();
			if ( PlayersData[playerid][Jail] != 0 )
			{
				PlayersData[playerid][Jail] = PlayersData[playerid][Jail] - MyTime;
			}
			PlayersData[playerid][IsPaga] = (MyTime - PlayersDataOnline[playerid][IsPagaO]) + PlayersData[playerid][IsPaga];
			if ( PlayersData[playerid][IsPaga] < 0 )
			{
				PlayersData[playerid][IsPaga] = 0;
			}
			if ( PlayersDataOnline[playerid][IsTaxi] != -1 )
			{
				PayTaxi(playerid, false);
			}
		    if ( PlayersData[playerid][Phone] != 0 && PlayersDataOnline[playerid][InCall] != -1 )
		    {
				PayCall(playerid);
				if ( PlayersDataOnline[playerid][InCall] != 888 )
				{
					PayCall(PlayersDataOnline[playerid][InCall]);
			        PlayersDataOnline[PlayersDataOnline[playerid][InCall]][InCall] = -1;
					Acciones(PlayersDataOnline[playerid][InCall], 8, "guarda su móvil");
					SendClientMessage(PlayersDataOnline[playerid][InCall], COLOR_COLGAR_DESCOLGAR, " Han colgado!");
			        PlayersDataOnline[PlayersDataOnline[playerid][InCall]][IsDescolgado] = false;
					SetPlayerColgar(PlayersDataOnline[playerid][InCall]);
				}
				else
				{
					if ( CallCNN == playerid )
					{
						SendClientMessageToAll(0x0FFF00FF, "* CNN: Conexión telefónica finalizada.");
					    CallCNN = -1;
					}
				}
		        PlayersDataOnline[playerid][IsDescolgado] = false;
		        PlayersDataOnline[playerid][InCall] = -1;
			}
			if ( PlayersData[playerid][InTutorial] )
			{
				KillTimer(PlayersDataOnline[playerid][TimerTutorialId]);
				KillTimer(PlayersDataOnline[playerid][TimerCamaraId]);
			}
		    if ( PlayersDataOnline[playerid][PistaIDp] != -1 )
		    {
		        new PistasDialogText[MAX_TEXT_CHAT];
			    format(PistasDialogText, sizeof(PistasDialogText), "{F5FF00}%s{00F50A} ha salido de la carrera ((Se desconectó)).", PlayersDataOnline[playerid][NameOnlineFix]);
				SendMessageToRaceChat(playerid, PistasDialogText, true);
				RemovePlayerToRace(playerid, false, true, STATE_RACE_EXIT_DISCONNECT);
			}
			DataUserSave(playerid);
			SaveAgenda(playerid);
			SavePlayerSMS(playerid);
			SaveAccountBanking(playerid);
			ResetPlayerWeapons(playerid);
			printf("%s[%i] se desconectó.", PlayersDataOnline[playerid][NameOnline], playerid);
			PlayersDataOnline[playerid][MarcaZZ] = true;
		}
		else
		{
			PlayersDataOnline[playerid][MarcaZZ] = true;
			KillTimer(PlayersDataOnline[playerid][TimerLoginId]);
		}
	}
	else
	{
	    printf("Error! Jugador no conectado! %s[%i]", PlayersDataOnline[playerid][NameOnline], playerid);
	}
}
public CreateDynamicObjectExULP(modelid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, worldid, interior, playerid, Float:distance)
{
	return CreateDynamicObject(modelid, x, y, z, rx, ry, rz, worldid, interior, -1, distance);
}
public IsPlayerNotVehicleWeapondAction(playerid, playeridtwo)
{
	if ( !IsPlayerInAnyVehicle(playerid) && !IsPlayerInAnyVehicle(playeridtwo) )
	{
	    return true;
	}
	else
	{
		SendInfoMessage(playerid, 0, "1032", "No puede estár ninguno de los 2 en un vehículo para dar armas, municiones o quitar una misma");
	    return false;
	}
}
public SetPlayerOrginalTime(playerid)
{
	new HourA, MinutesA;
	gettime(HourA, MinutesA);
	SetPlayerTime(playerid, GetOriginalHours(HourA), GetOriginalMinute(MinutesA));
}
public GetOriginalHours(hour)
{
	if ( hour == 24 )
	{
	    return 0;
	}
	else if ( !hour )
	{
	    return 1;
	}
	else
	{
	    return hour;
	}
}
public GetOriginalMinute(minute)
{
	if ( minute == 60 )
	{
	    return 0;
	}
	else if ( !minute )
	{
	    return 1;
	}
	else
	{
	    return minute;
	}
}
public ShowHomeBanco(playerid)
{
    if ( PlayersData[playerid][IsPlayerInBank] || IsPlayerNearCajero(playerid) != -1 )
    {
		if ( PlayersData[playerid][IsPlayerInBank] )
		{
			ShowPlayerDialogEx(playerid,31,DIALOG_STYLE_LIST,"{00A5FF}Banco - Inicio", "{006CAA}1- {E6E6E6}Consultar\r\n{006CAA}2- {E6E6E6}Retirar\r\n{006CAA}3- {E6E6E6}Depositar\r\n{006CAA}4- {E6E6E6}Cobrar un Cheque\r\n{006CAA}5- {E6E6E6}Ver mis Cheques\r\n{006CAA}6- {E6E6E6}Hacer una transferencia\r\n{006CAA}{006CAA}7- {E6E6E6}Controlar mis Cuentas\r\n{006CAA}8- {E6E6E6}Configuración", "Ir", "Salir");
		}
		else
		{
			ShowPlayerDialogEx(playerid,31,DIALOG_STYLE_LIST,"{00A5FF}Banco - Inicio", "{006CAA}1 {E6E6E6}Consultar\r\n{006CAA}2 {E6E6E6}Retirar\r\n{006CAA}3 {E6E6E6}Depositar", "Ir", "Salir");
		}
	}
}
public ShowConsultarBanco(playerid)
{
    if ( PlayersData[playerid][IsPlayerInBank] || IsPlayerNearCajero(playerid) != -1 )
    {
        new MsgConsultarBanco[MAX_TEXT_CHAT];
        format(MsgConsultarBanco, sizeof(MsgConsultarBanco), "{E6E6E6}Tiene usted {00F50A}$%i {E6E6E6}en su cuenta bancaria", PlayersData[playerid][Banco]);
		ShowPlayerDialogEx(playerid,32,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Consultar",MsgConsultarBanco, "Aceptar", "Volver");
	}
}
public ShowRetirarBanco(playerid)
{
    if ( PlayersData[playerid][IsPlayerInBank] || IsPlayerNearCajero(playerid) != -1 )
    {
		ShowPlayerDialogEx(playerid,33,DIALOG_STYLE_INPUT,"{00A5FF}Banco - Retirar","{E6E6E6}Ingrese la cantidad que desea retirar", "Retirar", "Volver");
	}
}
public ShowDepositarBanco(playerid)
{
    if ( PlayersData[playerid][IsPlayerInBank] || IsPlayerNearCajero(playerid) != -1 )
    {
		ShowPlayerDialogEx(playerid,34,DIALOG_STYLE_INPUT,"{00A5FF}Banco - Depositar","{E6E6E6}Ingrese la cantidad que desea depositar", "Depositar", "Volver");
	}
}
public ShowRetirarBancoFunction(playerid, option, amount)
{
    if ( PlayersData[playerid][IsPlayerInBank] || IsPlayerNearCajero(playerid) != -1 )
    {
        if (PlayersData[playerid][Banco] >= amount )
        {
            if ( !PlayersData[playerid][IsPlayerInBank] && amount >= 50 && amount <= 250 ||
				 PlayersData[playerid][IsPlayerInBank] )
            {
                if ( !PlayersData[playerid][IsPlayerInBank] && PlayersData[playerid][TimeRequestBank] <= gettime() ||
					 PlayersData[playerid][IsPlayerInBank])
                {
				    if (IsNotZero(playerid, amount))
				    {
			            PlayersData[playerid][Banco] = PlayersData[playerid][Banco] - amount;
			            GivePlayerMoneyEx(playerid, amount);

				        new MsgConsultarBanco[MAX_TEXT_CHAT];
				        if ( option )
				        {
					        format(MsgConsultarBanco, sizeof(MsgConsultarBanco), "Ha retirado $%i del banco, su nuevo balance es: $%i", amount, PlayersData[playerid][Banco]);
			    			SendInfoMessage(playerid, 1, " ", "|___________________  Banco ___________________|");
			    			SendInfoMessage(playerid, 1, MsgConsultarBanco, "Banco: ");
			    			SendInfoMessage(playerid, 1, " ", "|_____________________ Fin ____________________|");
		    			}
		    			else
		    			{
					        format(MsgConsultarBanco, sizeof(MsgConsultarBanco), "{E6E6E6}Ha retirado  {F50000}$%i  {E6E6E6}del banco.\n\n{E6E6E6}Su nuevo balance es: {00F50A}$%i", amount, PlayersData[playerid][Banco]);
							ShowPlayerDialogEx(playerid,35,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Retiro Realizado",MsgConsultarBanco, "Aceptar", "Volver");
						}
						if ( !PlayersData[playerid][IsPlayerInBank] )
						{
                            PlayersData[playerid][TimeRequestBank] = gettime() + 900;
						}
						return true;
					}
    			}
    			else
    			{
    			    new MsgErrorDinamicBank[MAX_TEXT_CHAT];
    			    format(MsgErrorDinamicBank, sizeof(MsgErrorDinamicBank), "Debe esperar %i minutos para volver a retirar dinero de un cajero", (PlayersData[playerid][TimeRequestBank] - gettime()) / 60 );
					SendInfoMessage(playerid, 0, "717", MsgErrorDinamicBank);
				}
			}
			else
			{
				SendInfoMessage(playerid, 0, "716", "Solo puedes retirar $250 máximo y $50 mínimo de un cajero cada 15 minutos, vaya al banco si desea retirar más dinero");
			}
		}
		else
		{
			SendInfoMessage(playerid, 0, "303", "No tienes esa cantidad de dinero para retirar del banco");
		}
        if ( !option )
        {
			ShowPlayerDialogEx(playerid,33,DIALOG_STYLE_INPUT,"{00A5FF}Banco - Retirar","{E6E6E6}Ingrese la cantidad menor a retirar", "Retirar", "Volver");
        }
	}
	return false;
}
public ShowDepositarBancoFunction(playerid, option, amount)
{
    if ( PlayersData[playerid][IsPlayerInBank] || IsPlayerNearCajero(playerid) != -1 )
    {
        if (PlayersData[playerid][Dinero] >= amount )
        {
		    if (IsNotZero(playerid, amount))
		    {
	            PlayersData[playerid][Banco] = PlayersData[playerid][Banco] + amount;
	            GivePlayerMoneyEx(playerid, -amount);

		        new MsgDepositarBanco[MAX_TEXT_CHAT];
		        if ( option )
		        {
			        format(MsgDepositarBanco, sizeof(MsgDepositarBanco), "Ha depositado $%i en el banco, su nuevo balance es: $%i", amount, PlayersData[playerid][Banco]);
	    			SendInfoMessage(playerid, 1, " ", "|___________________  Banco ___________________|");
	    			SendInfoMessage(playerid, 1, MsgDepositarBanco, "Banco: ");
	    			SendInfoMessage(playerid, 1, " ", "|_____________________ Fin ____________________|");
    			}
    			else
    			{
			        format(MsgDepositarBanco, sizeof(MsgDepositarBanco), "{E6E6E6}Ha depositado  {00F50A}$%i  {E6E6E6}en el banco.\n\n{E6E6E6}Su nuevo balance es: {00F50A}$%i", amount, PlayersData[playerid][Banco]);
					ShowPlayerDialogEx(playerid,36,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Depósito Realizado",MsgDepositarBanco, "Aceptar", "Volver");
				}
				return true;
			}
		}
		else
		{
			SendInfoMessage(playerid, 0, "304", "No tienes esa cantidad de dinero para depositar en el banco");
		}
        if ( !option )
        {
			ShowPlayerDialogEx(playerid,34,DIALOG_STYLE_INPUT,"{00A5FF}Banco - Reintentar Deposito","{E6E6E6}Ingrese una cantidad menor a depositar", "Depositar", "Volver");
        }
	}
	return false;
}
public GetCountObjectMapping()
{
	new count;
	for ( new i = 0; i < MAX_OBJECT_MAPPING_COUNT;i++)
	{
		if ( ObjectMapping[i][Objectid] != -1 )
		{
			count++;
		}
	}
	return count;
}
public OnMoveObjectMapping(playerid, objectid, key, option, Float:mappoint)
{
	if ( ObjectMapping[objectid][Objectid] != -1 )
	{
		if ( option )
		{
			switch (key)
			{
			    // X
				case 8192:   // 4 NUM PAD
				{
			    	ObjectMapping[objectid][PosX] = ObjectMapping[objectid][PosX] + mappoint;
				}
			    // Y
				case 16384:  // 6 NUM PAD
				{
			    	ObjectMapping[objectid][PosY] = ObjectMapping[objectid][PosY] + mappoint;
				}
			    // Z
				case 8: // SHIFT DERECHO
				{
			    	ObjectMapping[objectid][PosZ] = ObjectMapping[objectid][PosZ] + mappoint;
				}
			}
		}
		else
		{
			switch (key)
			{
			    // XZ
				case 8192:   // 4 NUM PAD
				{
			    	ObjectMapping[objectid][PosRotX] = ObjectMapping[objectid][PosRotX] + mappoint;
				}
			    // YZ
				case 16384:  // 6 NUM PAD
				{
			    	ObjectMapping[objectid][PosRotY] = ObjectMapping[objectid][PosRotY] + mappoint;
				}
			    // ZZ
				case 8: // SHIFT DERECHO
				{
			    	ObjectMapping[objectid][PosRotZ] = ObjectMapping[objectid][PosRotZ] + mappoint;
				}
			}
		}
		SetObjectPos(ObjectMapping[objectid][Objectid], ObjectMapping[objectid][PosX], ObjectMapping[objectid][PosY], ObjectMapping[objectid][PosZ]);
		SetObjectRot(ObjectMapping[objectid][Objectid], ObjectMapping[objectid][PosRotX], ObjectMapping[objectid][PosRotY], ObjectMapping[objectid][PosRotZ]);
		UpdateText3DMapping(objectid);
	}
}
public ShowHomeMapping(playerid)
{
	ShowPlayerDialogEx(playerid,37,DIALOG_STYLE_LIST, "{00A5FF}Inicio {E6E6E6} - {F50000}Mapping Editor", "{00A5FF}1 - {E6E6E6}Lista de Objetos\r\n{00A5FF}2 - {E6E6E6}Crear Objeto\r\n{00A5FF}3 - {E6E6E6}Eliminar Todos\r\n{00A5FF}4 - {E6E6E6}Mostrar Tag´s\r\n{00A5FF}5 - {E6E6E6}Ocultar Tag´s\r\n{00A5FF}6 - {E6E6E6}Abrir Proyecto\r\n{00A5FF}7 - {E6E6E6}Guardar Proyecto\r\n{00A5FF}8 - {E6E6E6}Estadísticas", "Seleccionar", "Salir");
}
public ShowCreateObjectMapping(playerid, model)
{
	for (new i = 0; i < MAX_OBJECT_MAPPING_COUNT; i++)
	{
		if ( ObjectMapping[i][Objectid] == -1 )
		{
		    new Float:PlayerPos[3]; GetPlayerPos(playerid, PlayerPos[0], PlayerPos[1], PlayerPos[2]);
		    ObjectMapping[i][objectmodel] = model;
   		    ObjectMapping[i][TextTagS]    = -1;
		    ObjectMapping[i][Objectid] = CreateObjectEx(ObjectMapping[i][objectmodel], PlayerPos[0], PlayerPos[1], PlayerPos[2], 0.0, 0.0, 0.0, MAX_RADIO_STREAM);
		    GetObjectPos(ObjectMapping[i][Objectid], ObjectMapping[i][PosX], ObjectMapping[i][PosY], ObjectMapping[i][PosZ]);
			SetObjectRot(ObjectMapping[i][Objectid], ObjectMapping[i][PosRotX], ObjectMapping[i][PosRotY], ObjectMapping[i][PosRotZ]);
		    PlayersDataOnline[playerid][ObjectAction] 	= i;

		    new MsgCreateObject[MAX_TEXT_CHAT];
		    format(MsgCreateObject, sizeof(MsgCreateObject), "{00F50A}Nuevo objeto creado correctamente!\n\nID: %i\nobjetcid: %i\nobjectmodel: %i", i, ObjectMapping[i][Objectid], ObjectMapping[i][objectmodel]);
			ShowPlayerDialogEx(playerid,39,DIALOG_STYLE_MSGBOX, "{00A5FF}Crear Objeto {E6E6E6} - {F50000}Mapping Editor", MsgCreateObject, "Opciones", "Inicio");
		    return true;
		}
	}
	ShowPlayerDialogEx(playerid,38,DIALOG_STYLE_MSGBOX, "{00A5FF}Crear Objeto {E6E6E6} - {F50000}Mapping Editor", "Ha alcanzado el límite de objetos!", "Aceptar", "Inicio");
	return false;
}
public ShowListObjectMapping(playerid)
{
	new Count = -1;
	new MsgListObject[550];
	new TempString[15];
	for (new i = 0; i < MAX_OBJECT_MAPPING_COUNT; i++)
	{
		if ( ObjectMapping[i][Objectid] != -1 )
		{
		    if ( Count != -1 )
		    {
		        format(TempString, sizeof(TempString), "\n\n%i:%i", i, ObjectMapping[i][objectmodel]);
			}
			else
			{
		        format(TempString, sizeof(TempString), "%i:%i", i, ObjectMapping[i][objectmodel]);
			}
			strcat(MsgListObject, TempString, sizeof(MsgListObject));
	        Count++;
			PlayersDataOnline[playerid][MappingRowSelected][Count] = i;
		}
	}
	if ( Count != -1 )
	{
		ShowPlayerDialogEx(playerid,40,DIALOG_STYLE_LIST, "{00A5FF}Lista de Objetos {E6E6E6} - {F50000}Mapping Editor", MsgListObject, "Seleccionar", "Inicio");
	}
	else
	{
		ShowPlayerDialogEx(playerid,38,DIALOG_STYLE_MSGBOX, "{00A5FF}Lista de Objetos {E6E6E6} - {F50000}Mapping Editor", "No se encontrarón objetos creados!", "Aceptar", "Inicio");
	}
}
public RemoveObjectMapping(playerid, objectid)
{
	if ( ObjectMapping[objectid][Objectid] != -1 )
	{
	    DestroyObject(ObjectMapping[objectid][Objectid]);
	    if ( ObjectMapping[objectid][TextTagS] != -1 )
	    {
		    Delete3DTextLabel(ObjectMapping[objectid][TextTag]);
		    ObjectMapping[objectid][TextTagS] = -1;
		}
	    ObjectMapping[objectid][Objectid] = -1;
	    return true;
	}
	return false;
}
public ShowRemoveAllMapping(playerid, IsMsg)
{
	new IsRemove;
	for (new i = 0; i < MAX_OBJECT_MAPPING_COUNT; i++)
	{
		if ( ObjectMapping[i][Objectid] != -1 )
		{
			RemoveObjectMapping(playerid, i);
		    IsRemove = true;
		}
	}
	if ( IsMsg )
	{
		if ( IsRemove )
		{
			ShowPlayerDialogEx(playerid,38,DIALOG_STYLE_MSGBOX, "{00A5FF}Eliminar Todos{E6E6E6} - {F50000}Mapping Editor", "Se han elimnado todos los objetos creados!", "Aceptar", "Inicio");
		}
		else
		{
			ShowPlayerDialogEx(playerid,38,DIALOG_STYLE_MSGBOX, "{00A5FF}Eliminar Todos{E6E6E6} - {F50000}Mapping Editor", "No hay ningún objeto creado, no se eliminó nada!", "Aceptar", "Inicio");
		}
	}
}
public ShowDescriptionObjectMapping(playerid, objectid)
{
    new MsgDesctiptionObject[400];
    format(MsgDesctiptionObject, sizeof(MsgDesctiptionObject), "{00F50A}Información del objeto:\n\nID: %i\nobjetcid: %i\nobjectmodel: %i\n\nPosX: %f\nPosY: %f\nPosZ: %f\nPosX-Z: %f\nPosY-Z: %f\nPosZ-Z: %f",
	objectid,
	ObjectMapping[objectid][Objectid],
	ObjectMapping[objectid][objectmodel],
	ObjectMapping[objectid][PosX],
	ObjectMapping[objectid][PosY],
	ObjectMapping[objectid][PosZ],
	ObjectMapping[objectid][PosRotX],
	ObjectMapping[objectid][PosRotY],
	ObjectMapping[objectid][PosRotZ]);
	PlayersDataOnline[playerid][ObjectAction] = objectid;
	ShowPlayerDialogEx(playerid,43,DIALOG_STYLE_MSGBOX, "{00A5FF}Descripción del Objeto {E6E6E6} - {F50000}Mapping Editor", MsgDesctiptionObject, "Opciones", "Inicio");
}
public ShowObjectOptionsMapping(playerid, objectid)
{
	if ( ObjectMapping[PlayersDataOnline[playerid][ObjectAction]][TextTagS] == -1 )
	{
		ShowPlayerDialogEx(playerid,42,DIALOG_STYLE_LIST, "{00A5FF}Opciones del Objeto {E6E6E6} - {F50000}Mapping Editor", "{00A5FF}1 - {E6E6E6}Seleccionar\r\n{00A5FF}2 - {E6E6E6}Mostrar Tag\r\n{00A5FF}3 - {E6E6E6}Ir\r\n{00A5FF}4 - {E6E6E6}Traer\r\n{00A5FF}5 - {E6E6E6}Eliminar", "Seleccionar", "Inicio");
	}
	else
	{
		ShowPlayerDialogEx(playerid,42,DIALOG_STYLE_LIST, "{00A5FF}Opciones del Objeto {E6E6E6} - {F50000}Mapping Editor", "{00A5FF}1 - {E6E6E6}Seleccionar\r\n{00A5FF}2 - {E6E6E6}Ocultar Tag\r\n{00A5FF}3 - {E6E6E6}Ir\r\n{00A5FF}4 - {E6E6E6}Traer\r\n{00A5FF}5 - {E6E6E6}Eliminar", "Seleccionar", "Inicio");
	}
}
public ShowAllMapping(playerid)
{
	for (new i = 0; i < MAX_OBJECT_MAPPING_COUNT; i++)
	{
		if ( ObjectMapping[i][Objectid] != -1 && ObjectMapping[i][TextTagS] == -1 )
		{
			ObjectMapping[i][TextTag] = Create3DTextLabel("New Text 3D Label", COLOR_FAMILY,ObjectMapping[i][PosX],ObjectMapping[i][PosY],ObjectMapping[i][PosZ],50.0,0);
			ObjectMapping[i][TextTagS] = true;
			UpdateText3DMapping(i);
		}
	}
}
public RemoveAllTagsMapping(playerid)
{
	for (new i = 0; i < MAX_OBJECT_MAPPING_COUNT; i++)
	{
		if ( ObjectMapping[i][Objectid] != -1 && ObjectMapping[i][TextTagS] != -1 )
		{
			Delete3DTextLabel(ObjectMapping[i][TextTag]);
			ObjectMapping[i][TextTagS] = -1;
		}
	}
}
public UpdateText3DMapping(objectid)
{
	if ( ObjectMapping[objectid][TextTagS] != -1 )
	{
		Delete3DTextLabel(ObjectMapping[objectid][TextTag]);
		new MsgObject3D[400];
		format(MsgObject3D, sizeof(MsgObject3D), "ID: %i\nobjetcid: %i\nobjectmodel: %i\n\nPosX: %f\nPosY: %f\nPosZ: %f\nPosX-Z: %f\nPosY-Z: %f\nPosZ-Z: %f",
		objectid,
		ObjectMapping[objectid][Objectid],
		ObjectMapping[objectid][objectmodel],
		ObjectMapping[objectid][PosX],
		ObjectMapping[objectid][PosY],
		ObjectMapping[objectid][PosZ],
		ObjectMapping[objectid][PosRotX],
		ObjectMapping[objectid][PosRotY],
		ObjectMapping[objectid][PosRotZ]);

		ObjectMapping[objectid][TextTag] = Create3DTextLabel(MsgObject3D,COLOR_FAMILY,ObjectMapping[objectid][PosX],ObjectMapping[objectid][PosY],ObjectMapping[objectid][PosZ],50.0,0);
	}
}
public ShowStatsMapping(playerid)
{
	new MsgStatsMapping[MAX_TEXT_CHAT];
	format(MsgStatsMapping, sizeof(MsgStatsMapping), "{00F50A}Estadísticas:\n\nObjetos utilizados: %i", GetCountObjectMapping());
	ShowPlayerDialogEx(playerid,38,DIALOG_STYLE_MSGBOX, "{00A5FF}Estadísticas del Proyecto{E6E6E6} - {F50000}Mapping Editor", MsgStatsMapping, "Aceptar", "Inicio");
}
public SaveTelesLock()
{
	new DirBD[50];
	new DataSave[20];
	new File:SaveTeles;
	for(new i=0;i<=MAX_TELE;i++)
	{
		format(DirBD, sizeof(DirBD), "%s%i.ulp", DIR_TELES, i);
		format(DataSave, sizeof(DataSave), "%i", Teles[i][Lock]);
		SaveTeles = fopen(DirBD, io_write);
		fwrite(SaveTeles, DataSave);
		fclose(SaveTeles);
	}
}
public LoadTelesLock()
{
	new DirBD[50];
    new DataRead[20];
	new File:ReadDataT;
	for(new i=0;i<=MAX_TELE;i++)
	{
		format(DirBD, sizeof(DirBD), "%s%i.ulp", DIR_TELES, i);
		if ( fexist(DirBD) )
		{
	        ReadDataT = fopen(DirBD, io_read);
	      	fread(ReadDataT, DataRead);
			fclose(ReadDataT);
			Teles[i][Lock] = strval(DataRead);
		}
	}
}
public SaveGaragesExLock()
{
	new DirBD[50];
	new DataSave[20];
	new File:SaveTeles;
	for(new i=0;i<=MAX_GARAGES_EX;i++)
	{
		format(DirBD, sizeof(DirBD), "%s%i.ulp", DIR_GARAGES_EX, i);
		format(DataSave, sizeof(DataSave), "%i", GaragesEx[i][Lock]);
		SaveTeles = fopen(DirBD, io_write);
		fwrite(SaveTeles, DataSave);
		fclose(SaveTeles);
	}
}
public LoadGaragesExLock()
{
	new DirBD[50];
    new DataRead[20];
	new File:ReadDataT;
	for(new i=0;i<=MAX_GARAGES_EX;i++)
	{
		format(DirBD, sizeof(DirBD), "%s%i.ulp", DIR_GARAGES_EX, i);
		if ( fexist(DirBD) )
		{
	        ReadDataT = fopen(DirBD, io_read);
	      	fread(ReadDataT, DataRead);
			fclose(ReadDataT);
			GaragesEx[i][Lock] = strval(DataRead);
		}
	}
}

public HideTextDrawsTelesAndInfo(playerid)
{
	if ( PlayersDataOnline[playerid][InPickupTele] || PlayersDataOnline[playerid][InPickupInfo] )
	{
	    if ( !IsPlayerInRangeOfPoint(playerid, 2.0, PlayersDataOnline[playerid][MyPickupX_Now], PlayersDataOnline[playerid][MyPickupY_Now], PlayersDataOnline[playerid][MyPickupZ_Now]) )
	    {
	        TextDrawHideForPlayer(playerid, PlayersDataOnline[playerid][MyTextDrawShow]);
			PlayersDataOnline[playerid][InPickup] 		= -1;
			PlayersDataOnline[playerid][InPickupTele] 	= false;
			PlayersDataOnline[playerid][InPickupInfo] 	= false;
	    }
	}
}
public OpenProject(playerid, name[])
{
	if ( IsValidName(name) )
	{
	    if ( strlen(name) <= 25 )
	    {
			new DirBD[50];
			new MsgOpenProject[MAX_TEXT_CHAT];
			format(DirBD, sizeof(DirBD), "%s%s.ulp", DIR_MAPS, name);
			if ( fexist(DirBD) )
			{
			    ShowRemoveAllMapping(playerid, false);
				new DataRead[256];
				new File:ReadDataF;
				new EndFile;
				new PosAndModel[7][15];
				new IsCreated;
                ReadDataF = fopen(DirBD, io_read);
                while ( !EndFile )
                {
                	fread(ReadDataF, DataRead);
                	new PosFind = strfind(DataRead, "CreateDynamicObject(", false);
                	if ( strlen(DataRead) >= 45 && PosFind != -1)
                	{
                	    IsCreated = false;
						for (new i = 0; i < MAX_OBJECT_MAPPING_COUNT; i++)
						{
							if ( ObjectMapping[i][Objectid] == -1 )
							{
							    IsCreated = true;
		 						new PosSplitAfter = 0;
		 						strdel(DataRead, 0, PosFind + 20);
								for ( new h = 0; h < 7; h++ )
								{
									PosSplitAfter = strfind(DataRead, ",", false);
									strmid(PosAndModel[h], DataRead, 0, PosSplitAfter, sizeof(DataRead));
									strdel(DataRead, 0, PosSplitAfter + 1);
								}

								ObjectMapping[i][objectmodel] = strval(PosAndModel[0]);
								ObjectMapping[i][PosX] = floatstr(PosAndModel[1]);
								ObjectMapping[i][PosY] = floatstr(PosAndModel[2]);
								ObjectMapping[i][PosZ] = floatstr(PosAndModel[3]);
								ObjectMapping[i][PosRotX] = floatstr(PosAndModel[4]);
								ObjectMapping[i][PosRotY] = floatstr(PosAndModel[5]);
								ObjectMapping[i][PosRotZ] = floatstr(PosAndModel[6]);
					   		    ObjectMapping[i][TextTagS]    = -1;
							    ObjectMapping[i][Objectid] = CreateObjectEx(ObjectMapping[i][objectmodel], ObjectMapping[i][PosX], ObjectMapping[i][PosY], ObjectMapping[i][PosZ], ObjectMapping[i][PosRotX], ObjectMapping[i][PosRotY], ObjectMapping[i][PosRotZ], MAX_RADIO_STREAM);
								break;
							}
						}
						if ( !IsCreated )
						{
							format(MsgOpenProject, sizeof(MsgOpenProject), "{00F50A}Al proyecto {F5FF00}\"%s\"{00F50A} le faltarón\nobjetos por cargar, exedió el límite de 50!", name);
							ShowPlayerDialogEx(playerid,38,DIALOG_STYLE_MSGBOX, "{00A5FF}Abrir Proyecto{E6E6E6} - {F50000}Mapping Editor", MsgOpenProject, "Aceptar", "Inicio");
						    IsCreated = false;
	                	    EndFile = true;
						}
						/*printf("%i\n%f\n%f\n%f\n%f\n%f\n%f",
						strval(PosAndModel[0]),
						floatstr(PosAndModel[1]),
						floatstr(PosAndModel[2]),
						floatstr(PosAndModel[3]),
						floatstr(PosAndModel[4]),
						floatstr(PosAndModel[5]),
						floatstr(PosAndModel[6])
						);*/
					}
					else
					{
                	    EndFile = true;
					}
                }
                if ( IsCreated )
                {
					format(MsgOpenProject, sizeof(MsgOpenProject), "{00F50A}El proyecto {00A5FF}\"%s\"{00F50A} fue cargado con éxito!", name);
					ShowPlayerDialogEx(playerid,38,DIALOG_STYLE_MSGBOX, "{00A5FF}Abrir Proyecto{E6E6E6} - {F50000}Mapping Editor", MsgOpenProject, "Aceptar", "Inicio");
				}
				fclose(ReadDataF);
			}
			else
			{
				format(MsgOpenProject, sizeof(MsgOpenProject), "El proyecto {F50000}\"%s\"{E6E6E6} no existe!", name);
				ShowPlayerDialogEx(playerid,38,DIALOG_STYLE_MSGBOX, "{00A5FF}Abrir Proyecto{E6E6E6} - {F50000}Mapping Editor", MsgOpenProject, "Aceptar", "Inicio");
			}
		}
		else
		{
			ShowPlayerDialogEx(playerid,38,DIALOG_STYLE_MSGBOX, "{00A5FF}Abrir Proyecto{E6E6E6} - {F50000}Mapping Editor", "El nombre del proyecto ha abrir no puede exeder los 25 caracteres!", "Aceptar", "Inicio");
		}
	}
	else
	{
		ShowPlayerDialogEx(playerid,38,DIALOG_STYLE_MSGBOX, "{00A5FF}Abrir Proyecto{E6E6E6} - {F50000}Mapping Editor", "El nombre introducido para abrir el proyecto es inválido!", "Aceptar", "Inicio");
	}
}
public SaveProject(playerid, name[], pass)
{
	if ( IsValidName(name) )
	{
	    if ( strlen(name) <= 25 )
	    {
			new DirBD[50];
			format(DirBD, sizeof(DirBD), "%s%s.ulp", DIR_MAPS, name);
			if ( !fexist(DirBD) || pass )
			{
			    if ( GetCountObjectMapping() )
			    {
				    new File:SaveFP;
				    new TempTextSave[250];
				    new Count;
				    SaveFP = fopen(DirBD, io_write);
					for (new i = 0; i < MAX_OBJECT_MAPPING_COUNT; i++)
					{
						if ( ObjectMapping[i][Objectid] != -1)
						{
						    if ( Count )
						    {
							    format(TempTextSave, sizeof(TempTextSave), "\r\nCreateDynamicObject(%i,%f,%f,%f,%f,%f,%f,-1,-1,-1,MAX_RADIO_STREAM);",
								ObjectMapping[i][objectmodel],
								ObjectMapping[i][PosX],
								ObjectMapping[i][PosY],
								ObjectMapping[i][PosZ],
								ObjectMapping[i][PosRotX],
								ObjectMapping[i][PosRotY],
								ObjectMapping[i][PosRotZ]
								);
						    }
						    else
						    {
						        Count = true;
							    format(TempTextSave, sizeof(TempTextSave), "CreateDynamicObject(%i,%f,%f,%f,%f,%f,%f,-1,-1,-1,MAX_RADIO_STREAM);",
								ObjectMapping[i][objectmodel],
								ObjectMapping[i][PosX],
								ObjectMapping[i][PosY],
								ObjectMapping[i][PosZ],
								ObjectMapping[i][PosRotX],
								ObjectMapping[i][PosRotY],
								ObjectMapping[i][PosRotZ]
								);
							}
						    fwrite(SaveFP, TempTextSave);
						}
					}
				    fclose(SaveFP);
					new MsgSaveProject[MAX_TEXT_CHAT];
					format(MsgSaveProject, sizeof(MsgSaveProject), "{00F50A}El proyecto fue guaradado con éxito!\n\nNombre del proyecto: \"%s\"\nDirección: %s", name, DirBD);
					ShowPlayerDialogEx(playerid,38,DIALOG_STYLE_MSGBOX, "{00A5FF}Guardar Proyecto{E6E6E6} - {F50000}Mapping Editor", MsgSaveProject, "Aceptar", "Inicio");
				}
				else
				{
					ShowPlayerDialogEx(playerid,38,DIALOG_STYLE_MSGBOX, "{00A5FF}Guardar Proyecto{E6E6E6} - {F50000}Mapping Editor", "Necesita mínimo un objeto para guardar el proyecto!", "Aceptar", "Inicio");
				}
			}
			else
			{
			    format(PlayersDataOnline[playerid][NameProject], MAX_PLAYER_NAME, "%s", name);
				ShowPlayerDialogEx(playerid,46,DIALOG_STYLE_MSGBOX, "{00A5FF}Guardar Proyecto{E6E6E6} - {F50000}Mapping Editor", "Este proyecto ya existe \n\n{F50000}¿Desea remplazarlo?", "Sí", "No");
			}
		}
		else
		{
			ShowPlayerDialogEx(playerid,38,DIALOG_STYLE_MSGBOX, "{00A5FF}Guardar Proyecto{E6E6E6} - {F50000}Mapping Editor", "El nombre del proyecto no puede exeder los 25 caracteres!", "Aceptar", "Inicio");
		}
	}
	else
	{
		ShowPlayerDialogEx(playerid,38,DIALOG_STYLE_MSGBOX, "{00A5FF}Guardar Proyecto{E6E6E6} - {F50000}Mapping Editor", "El nombre introducido para guardar el proyecto es inválido!", "Aceptar", "Inicio");
	}
}
public SetPlayerHealthEx(playerid, Float:Health)
{
	if ( PlayersDataOnline[playerid][VidaOn] + Health >= 100.0 )
	{
	    PlayersDataOnline[playerid][VidaOn] = 100.0;
	}
	else
	{
		PlayersDataOnline[playerid][VidaOn] = PlayersDataOnline[playerid][VidaOn] + Health;
	}
	PlayersDataOnline[playerid][ChangeVC] = 10;
}
public SetPlayerArmourEx(playerid, Float:Armour)
{
	if ( PlayersDataOnline[playerid][ChalecoOn] + Armour >= 85.0 )
	{
	    PlayersDataOnline[playerid][ChalecoOn] = 85.0;
	}
	else
	{
		PlayersDataOnline[playerid][ChalecoOn] = PlayersDataOnline[playerid][ChalecoOn] + Armour;
	}
	PlayersDataOnline[playerid][ChangeVC] = 10;
}
public UpdateArmourAndArmour(playerid, Float:Health, Float:Armour)
{
	if ( PlayersDataOnline[playerid][VidaOn] >= Health && PlayersDataOnline[playerid][ChalecoOn] >= Armour )
	{
	    PlayersDataOnline[playerid][VidaOn] = Health;
	    PlayersDataOnline[playerid][ChalecoOn] = Armour;
	    return true;
	}
	else
	{
        SetPlayerHealth(playerid, PlayersDataOnline[playerid][VidaOn]);
        SetPlayerArmour(playerid, PlayersDataOnline[playerid][ChalecoOn]);
	    return false;
	}
}
public CheckWeapondCheat(playerid)
{
	if ( PlayersDataOnline[playerid][StateWeaponPass] <= gettime() && !PlayersDataOnline[playerid][ModeDM] )
	{
		new WeapoindID, AmmoQl;
		for (new i = 0; i < 13; i++)
		{
			GetPlayerWeaponData(playerid, i, WeapoindID, AmmoQl);
			if ( PlayersData[playerid][WeaponS][i] == WeapoindID && PlayersData[playerid][AmmoS][i] >= AmmoQl || AmmoQl == 0)
			{
			 	//   printf("%i - %i || %i - %i", PlayersData[playerid][WeaponS][i], PlayersData[playerid][AmmoS][i], WeapoindID, AmmoQl);
			    PlayersData[playerid][WeaponS][i] = WeapoindID;
	            PlayersData[playerid][AmmoS][i] = AmmoQl;
			}
			else
			{
				GivePlayerWeaponReturn(playerid);
				PlayersDataOnline[playerid][CountCheat]++;
				if ( PlayersDataOnline[playerid][CountCheat] % 100 == 0 )
				{
					new MsgAvisoWeapon[MAX_TEXT_CHAT];
				    format(MsgAvisoWeapon, sizeof(MsgAvisoWeapon), "%s AntiCheat-Weapon - %s[%i] posible cheat de Weapon.", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline], playerid);
					MsgCheatsReportsToAdmins(MsgAvisoWeapon);
				    printf("%s", MsgAvisoWeapon);
			    }
				return false;
			}
		}
	}
	return true;
}
public GivePlayerWeaponReturn(playerid)
{
	ResetPlayerWeapons(playerid);
	for (new i = 0; i < 13; i++)
	{
	    if ( IsValidWeapon(playerid, PlayersData[playerid][WeaponS][i]) && PlayersData[playerid][WeaponS][i] != 0 && PlayersData[playerid][AmmoS][i] > 0 )
	    {
			GivePlayerWeapon(playerid, PlayersData[playerid][WeaponS][i], PlayersData[playerid][AmmoS][i]);
		}
		else
		{
			PlayersData[playerid][WeaponS][i] = 0;
			PlayersData[playerid][AmmoS][i] = 0;
		}
	}
}
public GivePlayerWeaponEx(playerid, weaponid, ammo)
{
	if ( IsValidWeapon(playerid, weaponid) )
	{
		PlayersDataOnline[playerid][StateWeaponPass] 	= gettime() + 5;
		PlayersData[playerid][WeaponS][SlotIDWeapon[weaponid]] = weaponid;
	    PlayersData[playerid][AmmoS][SlotIDWeapon[weaponid]] = PlayersData[playerid][AmmoS][SlotIDWeapon[weaponid]] + ammo;
		GivePlayerWeapon(playerid, weaponid, ammo);
	}
}
public RemovePlayerWeapond(playerid, weaponsid)
{
	ResetPlayerWeapons(playerid);
	PlayersData[playerid][WeaponS][SlotIDWeapon[weaponsid]] = 0;
	PlayersData[playerid][AmmoS][SlotIDWeapon[weaponsid]] = 0;
	for (new i = 0; i < 13; i++)
	{
	    if ( PlayersData[playerid][WeaponS][i] != 0 && PlayersData[playerid][AmmoS][i] > 0)
	    {
			GivePlayerWeapon(playerid, PlayersData[playerid][WeaponS][i], PlayersData[playerid][AmmoS][i]);
		}
		else
		{
			PlayersData[playerid][WeaponS][i] = 0;
			PlayersData[playerid][AmmoS][i] = 0;
		}
	}
}
public ResetPlayerWeaponsEx(playerid)
{
	for (new i = 0; i < 13; i++)
	{
		PlayersData[playerid][WeaponS][i]	= 0;
		PlayersData[playerid][AmmoS][i]		= 0;
	}
	ResetPlayerWeapons(playerid);
}
public FillVehicleGas(vehicleid)
{
	if ( DataCars[vehicleid][Gas] < DataCars[vehicleid][LlenandoGas] )
	{
		DataCars[vehicleid][Gas]++;
		SetTimerEx("FillVehicleGas", 1000, false, "d", vehicleid);
		UpdateGasAndOil(vehicleid);
	}
	else
	{
 	    DataCars[vehicleid][LlenandoGas] = false;
	}
}
public IsValidWeapon(playerid, weaponid)
{
	if ( weaponid >= 0 &&
	 	 weaponid <= 46 &&
	 	 weaponid != 19 &&
	 	 weaponid != 20 &&
	 	 weaponid != 21 )
	{
	    return true;
    }
    else
    {
		new MsgAvisoBug[MAX_TEXT_CHAT];
	    format(MsgAvisoBug, sizeof(MsgAvisoBug), "%s Bug´s Owned - El jugador %s[%i] se le bugueo un arma ID: %i.", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline], playerid, weaponid);
		MsgCheatsReportsToAdmins(MsgAvisoBug);
        return false;
	}
}
public LoadCameras()
{
    CamerasM[0]	 = CreateMenu("C\x98maras de seguridad", 2, 400.0, 200.0, 150.0, 20.0);
	SetMenuColumnHeader(CamerasM[0], 0, "Lugar"); 	SetMenuColumnHeader(CamerasM[0], 1, "Ciudad");

////////////////////////////
	AddMenuItem(CamerasM[0], 0, "Ayuntamiento");	  	AddMenuItem(CamerasM[0], 1, "LS");
	Cameras[MAX_CAMERAS][Page] = true;
	Cameras[MAX_CAMERAS][Interior] = 0;
	Cameras[MAX_CAMERAS][World]	   = 0;
	Cameras[MAX_CAMERAS][PosXLook] = 1500.253417;
	Cameras[MAX_CAMERAS][PosYLook] = -1749.436035;
	Cameras[MAX_CAMERAS][PosZLook] = 28.546878;
	Cameras[MAX_CAMERAS][PosXAt]   = 1481.0820;
	Cameras[MAX_CAMERAS][PosYAt]   = -1742.2435;
	Cameras[MAX_CAMERAS][PosZAt]   = 14.5965;

////////////////////////////
	MAX_CAMERAS++;
	AddMenuItem(CamerasM[0], 0, "Frente LSPD");	  	AddMenuItem(CamerasM[0], 1, "LS");
	Cameras[MAX_CAMERAS][Page] = true;
	Cameras[MAX_CAMERAS][Interior] = 0;
	Cameras[MAX_CAMERAS][World]	   = 0;
	Cameras[MAX_CAMERAS][PosXLook] = 1553.016357;
	Cameras[MAX_CAMERAS][PosYLook] = -1671.663452;
	Cameras[MAX_CAMERAS][PosZLook] = 24.560710;
	Cameras[MAX_CAMERAS][PosXAt]   = 1545.5803;
	Cameras[MAX_CAMERAS][PosYAt]   = -1675.6162;
	Cameras[MAX_CAMERAS][PosZAt]   = 13.5606;

////////////////////////////
	MAX_CAMERAS++;
	AddMenuItem(CamerasM[0], 0, "Frente SFPD");	  	AddMenuItem(CamerasM[0], 1, "SF");
	Cameras[MAX_CAMERAS][Page] = true;
	Cameras[MAX_CAMERAS][Interior] = 0;
	Cameras[MAX_CAMERAS][World]	   = 0;
	Cameras[MAX_CAMERAS][PosXLook] = -1614.280639;
	Cameras[MAX_CAMERAS][PosYLook] = 715.070068;
	Cameras[MAX_CAMERAS][PosZLook] = 18.846490;
	Cameras[MAX_CAMERAS][PosXAt]   = -1589.2537;
	Cameras[MAX_CAMERAS][PosYAt]   = 720.2092;
	Cameras[MAX_CAMERAS][PosZAt]   = 9.0221;

////////////////////////////
	MAX_CAMERAS++;
	AddMenuItem(CamerasM[0], 0, "Peaje LS 1");	  	AddMenuItem(CamerasM[0], 1, "LS");
	Cameras[MAX_CAMERAS][Page] = true;
	Cameras[MAX_CAMERAS][Interior] = 0;
	Cameras[MAX_CAMERAS][World]	   = 0;
	Cameras[MAX_CAMERAS][PosXLook] = 50.849651;
	Cameras[MAX_CAMERAS][PosYLook] = -1520.297729;
	Cameras[MAX_CAMERAS][PosZLook] = 9.930357;
	Cameras[MAX_CAMERAS][PosXAt]   = 61.7497;
	Cameras[MAX_CAMERAS][PosYAt]   = -1525.7979;
	Cameras[MAX_CAMERAS][PosZAt]   = 4.9304;

////////////////////////////
	MAX_CAMERAS++;
	AddMenuItem(CamerasM[0], 0, "Peaje LS 2");	  	AddMenuItem(CamerasM[0], 1, "LS");
	Cameras[MAX_CAMERAS][Page] = true;
	Cameras[MAX_CAMERAS][Interior] = 0;
	Cameras[MAX_CAMERAS][World]	   = 0;
	Cameras[MAX_CAMERAS][PosXLook] = 54.939651;
	Cameras[MAX_CAMERAS][PosYLook] = -1544.197509;
	Cameras[MAX_CAMERAS][PosZLook] = 10.030358;
	Cameras[MAX_CAMERAS][PosXAt]   = 45.2062;
	Cameras[MAX_CAMERAS][PosYAt]   = -1538.8624;
	Cameras[MAX_CAMERAS][PosZAt]   = 5.1866;

////////////////////////////
	MAX_CAMERAS++;
	AddMenuItem(CamerasM[0], 0, "Peaje SF 1 (1)");  	AddMenuItem(CamerasM[0], 1, "SF");
	Cameras[MAX_CAMERAS][Page] = true;
	Cameras[MAX_CAMERAS][Interior] = 0;
	Cameras[MAX_CAMERAS][World]	   = 0;
	Cameras[MAX_CAMERAS][PosXLook] = -1767.118164;
	Cameras[MAX_CAMERAS][PosYLook] = -654.620605;
	Cameras[MAX_CAMERAS][PosZLook] = 23.252027;
	Cameras[MAX_CAMERAS][PosXAt]   = -1765.0730;
	Cameras[MAX_CAMERAS][PosYAt]   = -652.3367;
	Cameras[MAX_CAMERAS][PosZAt]   = 19.8950;

////////////////////////////
	MAX_CAMERAS++;
	AddMenuItem(CamerasM[0], 0, "Peaje SF 1 (2)");	  	AddMenuItem(CamerasM[0], 1, "SF");
	Cameras[MAX_CAMERAS][Page] = true;
	Cameras[MAX_CAMERAS][Interior] = 0;
	Cameras[MAX_CAMERAS][World]	   = 0;
	Cameras[MAX_CAMERAS][PosXLook] = -1753.985229;
	Cameras[MAX_CAMERAS][PosYLook] = -662.802978;
	Cameras[MAX_CAMERAS][PosZLook] = 24.397844;
	Cameras[MAX_CAMERAS][PosXAt]   = -1756.4503;
	Cameras[MAX_CAMERAS][PosYAt]   = -665.7925;
	Cameras[MAX_CAMERAS][PosZAt]   = 21.6430;

////////////////////////////
	MAX_CAMERAS++;
	AddMenuItem(CamerasM[0], 0, "Peaje SF 2");	  	AddMenuItem(CamerasM[0], 1, "SF");
	Cameras[MAX_CAMERAS][Page] = true;
	Cameras[MAX_CAMERAS][Interior] = 0;
	Cameras[MAX_CAMERAS][World]	   = 0;
	Cameras[MAX_CAMERAS][PosXLook] = -997.220397;
	Cameras[MAX_CAMERAS][PosYLook] = -419.065368;
	Cameras[MAX_CAMERAS][PosZLook] = 39.445178;
	Cameras[MAX_CAMERAS][PosXAt]   = -987.2131;
	Cameras[MAX_CAMERAS][PosYAt]   = -439.5078;
	Cameras[MAX_CAMERAS][PosZAt]   = 35.8483;

	// END CAMERAS
}
/*enum CamerasEnum
{
	Page,
	PosXLook,
	PosYLook,
	PosZLook,
	PosXAt,
	PosYAt,
	PosZAt
}
MAX_CAMERAS
*/
public IsValidVehicle(playerid, vehiclemodel)
{
	if ( coches_Todos_Type[vehiclemodel - 400] != BICI &&
		 coches_Todos_Type[vehiclemodel - 400] != MOTO &&
		 coches_Todos_Type[vehiclemodel - 400] != CAMION &&
		 coches_Todos_Type[vehiclemodel - 400] != VUELO )
	{
	    return true;
	}
	else
	{
	    return false;
	}
}
public IsValidVehiclePaintJob(vehiclemodel)
{
	if ( vehiclemodel == 560 ||
		 vehiclemodel == 561 ||
		 vehiclemodel == 567 ||
		 vehiclemodel == 562 ||
		 vehiclemodel == 565 ||
		 vehiclemodel == 569 ||
		 vehiclemodel == 568 ||
		 vehiclemodel == 434 ||
		 vehiclemodel == 535 ||
		 vehiclemodel == 536 ||
 		 vehiclemodel == 558 ||
 		 vehiclemodel == 545 ||
 		 vehiclemodel == 559
	   )
	{
	    return true;
	}
	else
	{
	    return false;
	}
}
public IntermitenteIzquierdo(playerid)
{
	if ( IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) == 0 && DataCars[GetPlayerVehicleID(playerid)][IsIntermitente] != 1 )
	{
		new Panels, Doors1, Lights, Tires;
		GetVehicleDamageStatus(GetPlayerVehicleID(playerid), Panels, Doors1, Lights, Tires);
		UpdateVehicleDamageStatus(GetPlayerVehicleID(playerid), Panels, Doors1, encode_lights(1,0,0,0), Tires);
		if ( !DataCars[GetPlayerVehicleID(playerid)][IsIntermitente] )
		{
		    SetTimerEx("TimerIntermitentes", 500, false, "d", GetPlayerVehicleID(playerid));
	    }
	    DataCars[GetPlayerVehicleID(playerid)][IsIntermitente] = 1;
	    DataCars[GetPlayerVehicleID(playerid)][ConteoIntermitente] = false;
	}
}
public IntermitenteDerecho(playerid)
{
	if ( IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) == 0 && DataCars[GetPlayerVehicleID(playerid)][IsIntermitente] != 2 )
	{
		new Panels, Doors1, Lights, Tires;
		GetVehicleDamageStatus(GetPlayerVehicleID(playerid), Panels, Doors1, Lights, Tires);
		UpdateVehicleDamageStatus(GetPlayerVehicleID(playerid), Panels, Doors1, encode_lights(0,0,0,1), Tires);
		if ( !DataCars[GetPlayerVehicleID(playerid)][IsIntermitente] )
		{
		    SetTimerEx("TimerIntermitentes", 500, false, "d", GetPlayerVehicleID(playerid));
	    }
	    DataCars[GetPlayerVehicleID(playerid)][IsIntermitente] = 2;
	    DataCars[GetPlayerVehicleID(playerid)][ConteoIntermitente] = false;
	}
}
public IntermitenteEstacionamiento(playerid)
{
	if ( IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) == 0 && DataCars[GetPlayerVehicleID(playerid)][IsIntermitente] != 3 )
	{
		new Panels, Doors1, Lights, Tires;
		GetVehicleDamageStatus(GetPlayerVehicleID(playerid), Panels, Doors1, Lights, Tires);
		UpdateVehicleDamageStatus(GetPlayerVehicleID(playerid), Panels, Doors1, encode_lights(1,1,1,1), Tires);
		if ( !DataCars[GetPlayerVehicleID(playerid)][IsIntermitente] )
		{
		    SetTimerEx("TimerIntermitentes", 500, false, "d", GetPlayerVehicleID(playerid));
	    }
	    DataCars[GetPlayerVehicleID(playerid)][IsIntermitente] = 3;
	    DataCars[GetPlayerVehicleID(playerid)][ConteoIntermitente] = false;
	}
}
public IntermitenteEncendido(playerid)
{
	if (IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) == 0 && DataCars[GetPlayerVehicleID(playerid)][IsIntermitente] == 0 )
	{
	    if ( DataCars[GetPlayerVehicleID(playerid)][LightState] )
	    {
	        DataCars[GetPlayerVehicleID(playerid)][LightState] = false;
		}
		else
		{
			DataCars[GetPlayerVehicleID(playerid)][LightState] = true;
		}
	    IsVehicleOff(GetPlayerVehicleID(playerid));
	}
	else if ( IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) == 0 && DataCars[GetPlayerVehicleID(playerid)][StateEncendido] && DataCars[GetPlayerVehicleID(playerid)][IsIntermitente])
	{
	    DataCars[GetPlayerVehicleID(playerid)][IsIntermitente] = 0;
	}
}
public ShowDialogAccount(playerid)
{
	new ListDialog[350];
	format(ListDialog, sizeof(ListDialog),
	"{00F50A}1- {E6E6E6}Cambiar Contraseña\r\n{00F50A}2- {E6E6E6}Sexo\r\n{00F50A}3- {E6E6E6}Edad\r\n{00F50A}4- {E6E6E6}Email({F5FF00}%s{E6E6E6})\r\n{00F50A}5- {E6E6E6}Opciones",
		PlayersData[playerid][Email]
	);
	ShowPlayerDialogEx(playerid,18,DIALOG_STYLE_LIST,"{00A5FF}Configuración de mi Cuenta", ListDialog, "Seleccionar", "Salir");
}
public ShowDialogAccountOptions(playerid)
{
	new ListDialog[500];

	format(ListDialog, sizeof(ListDialog),
		"{00F50A}1- {E6E6E6}Intermitentes: %s{00F50A}\r\n{00F50A}2- {E6E6E6}Usar Plugin de Audio: %s",
		NameConfigutionUser[0][PlayersData[playerid][IntermitentState]],
  		SiOrNoBank[PlayersData[playerid][WantAudio]]
	);

	ShowPlayerDialogEx(playerid,49,DIALOG_STYLE_LIST,"{00A5FF}Opciones de mi Cuenta", ListDialog, "Seleccionar", "Volver");
}
public IsNotPhoneInBlackList(playerid, number)
{
	for (new i = 0; i < MAX_PLAYER_CONTACT; i++)
	{
	    if ( strlen(AgendaData[playerid][i][NameC]) >= 2 && AgendaData[playerid][i][NumberC] == number && AgendaData[playerid][i][IsBlackList] )
	    {
	        return false;
	    }
    }
    return true;
}
public SendAlertCallRequestSAMD(type, text[], faccionid)
{
	for ( new i = 0; i < MAX_PLAYERS; i++ )
	{
		if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersData[i][Faccion] == faccionid )
		{
		    if ( !type )
		    {
				if ( PlayersData[i][Rango] == 5 ||
			 	PlayersData[i][Rango] <= 2 )
			 	{
					SendInfoMessage(i, 3, "0", text);
				}
		    }
		    else
		    {
		        if ( PlayersData[i][Rango] != 5 )
		        {
					SendInfoMessage(i, 3, "0", text);
				}
			}
		}
	}
}
public SendAlertCallRequest(faccionid, text[])
{
	for ( new i = 0; i < MAX_PLAYERS; i++ )
	{
		if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersData[i][Faccion] == faccionid)
		{
			SendInfoMessage(i, 3, "0", text);
		}
	}
}
public RemoveCall(callid, departament)
{
	CallPolice[callid][departament][Number] 			= 0;
	format(CallPolice[callid][departament][NameC], MAX_PLAYER_NAME, "");
	format(CallPolice[callid][departament][ReasonC], MAX_TEXT_CHAT, "");
	CallPolice[callid][departament][TimeCall][0] = false;
	CallPolice[callid][departament][TimeCall][1] = false;
	CallPolice[callid][departament][TimeCall][2] = false;
}
public AddCall(number, name[], reason[], departament)
{
	new callid;
    for ( new i = 0; i < MAX_CALL_POLICE_COUNT; i++ )
    {
		if ( !CallPolice[i][departament][Number] )
		{
		    callid = i;
		    break;
		}
	}
	CallPolice[callid][departament][Number] 			= number;
	format(CallPolice[callid][departament][NameC], MAX_PLAYER_NAME, "%s", name);
	format(CallPolice[callid][departament][ReasonC], MAX_TEXT_CHAT, "%s", reason);
	gettime(CallPolice[callid][departament][TimeCall][0], CallPolice[callid][departament][TimeCall][1], CallPolice[callid][departament][TimeCall][2]);
}
public ShowConnectedPolice(playerid)
{
	if ( !PlayersDataOnline[playerid][NumberCallPublic] )
	{
		ShowPlayerDialogEx(playerid,53,DIALOG_STYLE_MSGBOX,"{00A5FF}LSPD - Reporte Policial", "{F0F0F0}Bienvenido a el departamento de denuncias de la {F5FF00}LSPD", "Comenzar", "Colgar");
	}
	else
	{
		ShowPlayerDialogEx(playerid,53,DIALOG_STYLE_MSGBOX,"{00A5FF}SFPD - Reporte Policial", "{F0F0F0}Bienvenido a el departamento de denuncias de la {F5FF00}SFPD", "Comenzar", "Colgar");
	}
}
public ShowNamePolice(playerid)
{
	if ( !PlayersDataOnline[playerid][NumberCallPublic] )
	{
		ShowPlayerDialogEx(playerid,54,DIALOG_STYLE_INPUT,"{00A5FF}LSPD - Reporte Policial", "{F0F0F0}Diganos su nombre para proceder.\n\n Sí no desea darnos su nombre diga que \"No\"", "Seguir", "No");
	}
	else
	{
		ShowPlayerDialogEx(playerid,54,DIALOG_STYLE_INPUT,"{00A5FF}SFPD - Reporte Policial", "{F0F0F0}Diganos su nombre para proceder.\n\n Sí no desea darnos su nombre diga que \"No\"", "Seguir", "No");
	}
}
public ShowReasonPolice(playerid)
{
	if ( !PlayersDataOnline[playerid][NumberCallPublic])
	{
		ShowPlayerDialogEx(playerid,55,DIALOG_STYLE_INPUT,"{00A5FF}LSPD - Reporte Policial", "{F0F0F0}Ingrese la razón de su denuncia\n\n{F0F0F0}Por favor, sea breve y claro en su reporte policial.", "Reportar", "Colgar");
	}
	else
	{
		ShowPlayerDialogEx(playerid,55,DIALOG_STYLE_INPUT,"{00A5FF}SFPD - Reporte Policial", "{F0F0F0}Ingrese la razón de su denuncia\n\n{F0F0F0}Por favor, sea breve y claro en su reporte policial.", "Reportar", "Colgar");
	}
}
public ShowDetailsCall(playerid, callid)
{
	new CallDialog[300];
	new NowTime[3]; gettime(NowTime[0], NowTime[1], NowTime[2]);
	format(CallDialog ,sizeof(CallDialog), "   {F50000}REPORTE POLICIAL\n   {E6E6E6}Hora actual: {00A5FF}%i:%i:%i\n\n {00F50A}Nombre: {F5FF00}%s\n\n {00F50A}Número: {F5FF00}%i\n\n {00F50A}Hora: {F5FF00}%i:%i:%i\n\n {00F50A}Razón: {F5FF00}%s",
	NowTime[0],
	NowTime[1],
	NowTime[2],
	CallPolice[callid][PlayersDataOnline[playerid][NumberCallPublic]][NameC],
	CallPolice[callid][PlayersDataOnline[playerid][NumberCallPublic]][Number],
	CallPolice[callid][PlayersDataOnline[playerid][NumberCallPublic]][TimeCall][0],
	CallPolice[callid][PlayersDataOnline[playerid][NumberCallPublic]][TimeCall][1],
	CallPolice[callid][PlayersDataOnline[playerid][NumberCallPublic]][TimeCall][2],
	CallPolice[callid][PlayersDataOnline[playerid][NumberCallPublic]][ReasonC]);

	ShowPlayerDialogEx(playerid,58,DIALOG_STYLE_MSGBOX,"{00A5FF}Detalles - Reporte Policial", CallDialog, "Atender", "Volver");
}
public ShowCallPolice(playerid)
{
	new CallDialog[700];
	new TempConvert[35];
	new ReasonShort[10];
	new ConteoCall = -1;
	for (new i = 0; i < MAX_CALL_POLICE_COUNT; i++)
	{
	    if ( CallPolice[i][PlayersDataOnline[playerid][NumberCallPublic]][Number] )
	    {
		    format(ReasonShort, sizeof(ReasonShort), "%s", CallPolice[i][PlayersDataOnline[playerid][NumberCallPublic]][ReasonC]);
			if ( ConteoCall != -1 )
			{
		    	format(TempConvert, sizeof(TempConvert), "\r\n{E6E6E6}%i - [%s...]",
				CallPolice[i][PlayersDataOnline[playerid][NumberCallPublic]][Number],
		    	ReasonShort
				);
	    	}
			else
			{
		    	format(TempConvert, sizeof(TempConvert), "{E6E6E6}%i - [%s...]",
				CallPolice[i][PlayersDataOnline[playerid][NumberCallPublic]][Number],
		    	ReasonShort
				);
			}
	        strcat(CallDialog, TempConvert, sizeof(CallDialog));
	        ConteoCall++;
	        PlayersDataOnline[playerid][SaveAfterAgenda][ConteoCall] = i;
        }
	}
	if (ConteoCall != -1)
	{
		if ( !PlayersDataOnline[playerid][NumberCallPublic] )
		{
			ShowPlayerDialogEx(playerid,57,DIALOG_STYLE_LIST,"{00A5FF}LSPD - Reportes policiales", CallDialog, "Ver", "Salir");
		}
		else
		{
			ShowPlayerDialogEx(playerid,57,DIALOG_STYLE_LIST,"{00A5FF}SFPD - Reportes policiales", CallDialog, "Ver", "Salir");
		}
	}
	else
	{
		ShowPlayerDialogEx(playerid,9999,DIALOG_STYLE_MSGBOX,"{00A5FF}Policía - Información", "{F0F0F0}No se encontrarón reportes policiales! Intente más tarde.", "Aceptar", "");
	}
}
public GetNumberID(number)
{
    for (new i = 0; i < MAX_PLAYERS; i++)
    {
		if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersData[i][Phone] == number && PlayersDataOnline[i][PhoneOnline] )
		{
		    return i;
		}
	}
	return -1;
}
public AddCallPublics(playerid, number, departament)
{
	new callid;
    for ( new i = 0; i < MAX_CALL_POLICE_COUNT; i++ )
    {
		if ( !CallPublics[i][departament][Number] )
		{
		    CallPublics[i][departament][City] = GetMyNearCity(playerid);
		    callid = i;
		    break;
		}
	}
	CallPublics[callid][departament][Number] 			= number;
}
public RemoveCallPublics(callid, departament)
{
	CallPublics[callid][departament][Number] 			= 0;
}
public ShowCallPublics(playerid)
{
	new CallDialog[750];
	new TempConvert[45];
	new ConteoCall = -1;
	for (new i = 0; i < MAX_CALL_POLICE_COUNT; i++)
	{
	    if ( CallPublics[i][PlayersDataOnline[playerid][NumberCallPublic]][Number] )
	    {
			if ( ConteoCall != -1 )
			{
		    	format(TempConvert, sizeof(TempConvert), "\r\n{E6E6E6}Número: {00F50A}%i (%s)",
				CallPublics[i][PlayersDataOnline[playerid][NumberCallPublic]][Number],
				Ciudades[CallPublics[i][PlayersDataOnline[playerid][NumberCallPublic]][City]]
				);
	    	}
			else
			{
		    	format(TempConvert, sizeof(TempConvert), "{E6E6E6}Número: {00F50A}%i (%s)",
				CallPublics[i][PlayersDataOnline[playerid][NumberCallPublic]][Number],
			    Ciudades[CallPublics[i][PlayersDataOnline[playerid][NumberCallPublic]][City]]
				);
			}
	        strcat(CallDialog, TempConvert, sizeof(CallDialog));
	        ConteoCall++;
	        PlayersDataOnline[playerid][SaveAfterAgenda][ConteoCall] = i;
        }
	}
	if (ConteoCall != -1)
	{
	    switch ( PlayersDataOnline[playerid][NumberCallPublic] )
	    {
			case 0:
			{
				ShowPlayerDialogEx(playerid,59,DIALOG_STYLE_LIST,"{00A5FF}Taxístas - Centro de Llamadas", CallDialog, "Atender", "Salir");
			}
			case 1:
			{
				ShowPlayerDialogEx(playerid,59,DIALOG_STYLE_LIST,"{00A5FF}Taller San Fierro - Centro de Llamadas", CallDialog, "Atender", "Salir");
			}
			case 2:
			{
				ShowPlayerDialogEx(playerid,59,DIALOG_STYLE_LIST,"{00A5FF}Taller Los Santos - Centro de Llamadas", CallDialog, "Atender", "Salir");
			}
		}
	}
	else
	{
		ShowPlayerDialogEx(playerid,9999,DIALOG_STYLE_MSGBOX,"{00A5FF}Centro de Llamadas - Información", "{F0F0F0}No se encontrarón llamadas! Intente más tarde.", "Aceptar", "");
	}
}

public IsFoundCallSAMD(number, type, samdid)
{
    for ( new i = 0; i < MAX_CALL_POLICE_COUNT; i++ )
    {
		if ( CallSAMD[samdid][i][Number] && CallSAMD[samdid][i][Number] == number && type == CallSAMD[samdid][i][Type])
		{
			return i;
		}
	}
	return -1;
}
public IsFoundCall(number, departament)
{
    for ( new i = 0; i < MAX_CALL_POLICE_COUNT; i++ )
    {
		if ( CallPublics[i][departament][Number] && CallPublics[i][departament][Number] == number)
		{
			return i;
		}
	}
	return -1;
}
public UpdatePlayerVehicleStatus(vehicleid , Float:Healt)
{
	for (new i = 0; i < MAX_PLAYERS; i++)
	{
		if ( IsPlayerConnected(i) && IsPlayerInAnyVehicle(i) && GetPlayerVehicleID(i) == vehicleid )
		{
			SetPlayerHealthEx(i, -Healt);
			if ( coches_Todos_Type[GetVehicleModel(GetPlayerVehicleID(i)) - 400] != MOTO )
			{
				ApplyPlayerAnimCustom(i,
				"PED",
				PED_ANIMATIONS[23], false);
				if ( GetPlayerVehicleSeat(i) == 0 )
				{
				    SetTimerEx("ApplyPlayerAnimAccidentD", 1000, false, "d",i);
				}
				else
				{
				    SetTimerEx("ApplyPlayerAnimAccident", 1000, false, "d",i);
				}
			}
		    if ( Healt >= 20 )
		    {
			    SetPlayerWeather(i, -15);
			    SetPlayerDrunkLevel(i, 50000);
				SetTimerEx("ReturnPlayerNormalState", 15000, false, "d", i);
		    }
		}
	}
}
public ApplyPlayerAnimAccident(playerid)
{
	if ( IsPlayerInAnyVehicle(playerid) )
	{
		ApplyPlayerAnimCustom(playerid,
		"PED",
		PED_ANIMATIONS[59], false);
	}
}
public ApplyPlayerAnimAccidentD(playerid)
{
	if ( IsPlayerInAnyVehicle(playerid) )
	{
		ApplyPlayerAnimCustom(playerid,
		"PED",
		PED_ANIMATIONS[63], false);
	}
}
public ReturnPlayerNormalState(playerid)
{
	if (IsPlayerConnected(playerid) && IsPlayerInAnyVehicle(playerid))
	{
	    SetPlayerDrunkLevel(playerid, 4000);
	    SetPlayerWeather(playerid, WeatherCurrent);
	}
}
public IsOpenCloset(playerid, houseid)
{
	if ( !HouseData[houseid][ArmarioLock] )
	{
	    return true;
	}
	else
	{
		SendInfoMessage(playerid, 0, "1111", "El armario se encuentra cerrado!");
	    return false;
	}
}
public IsOpenRefrigerador(playerid, houseid)
{
	if ( !HouseData[houseid][RefrigeradorLock] )
	{
	    return true;
	}
	else
	{
		SendInfoMessage(playerid, 0, "832", "El refrigerador se encuentra cerrado!");
	    return false;
	}
}
public IsOpenGaveta(playerid, houseid)
{
	if ( !HouseData[houseid][GavetaLock] )
	{
	    return true;
	}
	else
	{
		SendInfoMessage(playerid, 0, "1583", "La gaveta se encuentra cerrada!");
	    return false;
	}
}
public SendSMS(playerid, number, text[])
{
    if ( PlayersData[playerid][Phone] != 0)
    {
	    if ( PlayersDataOnline[playerid][PhoneOnline] )
	    {
	        if ( PlayersDataOnline[playerid][InCall] == -1 )
	        {
	            if ( PlayersData[playerid][Phone] != number )
	            {
	                if ( number > 0 )
	                {
						if (PlayersData[playerid][Saldo] >= strlen(text) )
						{
						    if ( strlen(text) >= 1 )
						    {
					            for (new i = 0; i < MAX_PLAYERS; i++)
					            {
									if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersData[i][Phone] == number && PlayersDataOnline[i][PhoneOnline] && IsNotPhoneInBlackList(i, PlayersData[playerid][Phone]) )
									{
									    new MsgToMe[MAX_TEXT_CHAT];
									    new MsgToPlayer[MAX_TEXT_CHAT];
									    new IsAgenda = IsInAgendaNumber(playerid, PlayersData[i][Phone]);
									    new IsAgendaYou = IsInAgendaNumber(i, PlayersData[playerid][Phone]);

										if ( IsAgenda != -1)
										{
									   		format(MsgToMe, sizeof(MsgToMe), "[SMS] Enviado a %s al número %i: %s", AgendaData[playerid][IsAgenda][NameC], PlayersData[i][Phone], text);
								   		}
								   		else
								   		{
									   		format(MsgToMe, sizeof(MsgToMe), "[SMS] Enviado al número %i: %s", PlayersData[i][Phone], text);
										}
									    if (IsAgendaYou != -1)
									    {
										    format(MsgToPlayer, sizeof(MsgToPlayer), " [SMS] Recibido de %s número %i: %s", AgendaData[i][IsAgendaYou][NameC], PlayersData[playerid][Phone], text, playerid);
									    }
									    else
									    {
										    format(MsgToPlayer, sizeof(MsgToPlayer), " [SMS] Recibido del número %i: %s", PlayersData[playerid][Phone], text);
										}

										if ( PlayersData[i][Admin] >= 1 )
										{
										    format(MsgToPlayer, sizeof(MsgToPlayer), "%s (([%i]))",MsgToPlayer, playerid);
										}

										Acciones(playerid, 8, "saca su móvil y envia un SMS");
										Acciones(i, 8, "recibe un SMS en el móvil");

										SendClientMessage(playerid, COLOR_INFO_MOVIL, MsgToMe);
										SendClientMessage(i, COLOR_INFO_MOVIL, MsgToPlayer);
										SetPlayerDescolgar(playerid);
										SetTimerEx("SetPlayerColgar", 3000, false, "d", playerid);

										AddSMS(i, PlayersData[playerid][Phone], text);

										PlayersData[playerid][Saldo] = PlayersData[playerid][Saldo]  -strlen(text);
									    FaccionData[GOBIERNO][Deposito] = FaccionData[GOBIERNO][Deposito] + strlen(text);
									    return true;
									}
								}
								SendInfoMessage(playerid, 0, "819", "El móvil que desea enviar un SMS se encuentra apagado o no existe!");
							}
							else
							{
								SendInfoMessage(playerid, 0, "826", "Mínimo utilza un caracter para el SMS");
							}
						}
						else
						{
							SendInfoMessage(playerid, 0, "824", "No tiene suficiente saldo para enviar un SMS");
						}
					}
					else
					{
						SendInfoMessage(playerid, 0, "820", "El número que introdujo no existe");
					}
				}
	            else
	            {
					SendInfoMessage(playerid, 0, "821", "Ha introducído su mismo número de móvil");
				}
			}
			else
			{
				SendInfoMessage(playerid, 0, "822", "Finalize su llamada telefónica actual antes de enviar un SMS");
			}
		}
		else
		{
			SendInfoMessage(playerid, 0, "1520", "Tiene el móvil apagado, enciendelo si desea realizar enviar un SMS!");
		}
	}
	else
	{
		SendInfoMessage(playerid, 0, "823", "Tú no tienes móvil");
	}
	return false;
}
public LoadPlayerSMS(playerid)
{
    CleanSMS(playerid);
	new DirBD[50];
	format(DirBD, sizeof(DirBD), "%s%s.ulp", DIR_SMS, PlayersDataOnline[playerid][NameOnline]);
	if ( fexist(DirBD) )
	{
		new DataRead[256];
		new File:ReadDataF;
		new NumberStr[8];
		new NumberInt;
		new EndFile;
        ReadDataF = fopen(DirBD, io_read);
        while ( !EndFile )
        {
        	fread(ReadDataF, DataRead);
        	new PosFind = strfind(DataRead, "³", false);
            if ( PosFind != -1 )
            {
				strmid(NumberStr, DataRead, 0, PosFind);
				NumberInt = strval(NumberStr);
		    	if ( NumberInt )
		    	{
		    	    strmid(DataRead, DataRead, PosFind + 1, strlen(DataRead) - 2);
		    	    if ( !AddSMS(playerid, NumberInt, DataRead) )
		    	    {
		    	        EndFile = true;
		    	    }
				}
				// printf("%i || %s", NumberInt, DataRead);
			}
			else
			{
	    	    EndFile = true;
			}
        }
		fclose(ReadDataF);
	}
}
public SavePlayerSMS(playerid)
{
	new DirBD[50];
	format(DirBD, sizeof(DirBD), "%s%s.ulp", DIR_SMS, PlayersDataOnline[playerid][NameOnline]);
    new File:SaveFP;
    new TempTextSave[250];
    new Count;
    SaveFP = fopen(DirBD, io_write);
	for (new i = 0; i < MAX_SMS_COUNT; i++)
	{
	    if ( Count )
	    {
		    format(TempTextSave, sizeof(TempTextSave), "\r\n%i³%s",
			SMS[playerid][i][Number],
			SMS[playerid][i][SMSText]
			);
	    }
	    else
	    {
	        Count = true;
		    format(TempTextSave, sizeof(TempTextSave), "%i³%s",
			SMS[playerid][i][Number],
			SMS[playerid][i][SMSText]
			);
		}
	    fwrite(SaveFP, TempTextSave);
	}
    fclose(SaveFP);
}
public AddSMS(playerid, number, text[])
{
	for (new i = 0; i < MAX_SMS_COUNT;i++)
	{
	    if ( !SMS[playerid][i][Number] )
	    {
	        SMS[playerid][i][Number] = number;
	        format(SMS[playerid][i][SMSText], MAX_TEXT_SMS, "%s", text);
	        return true;
        }
	}
    SendInfoMessage(playerid, 2, "0", "No se están almacenando los SMS en la Agenda, debido a que está llena!");
	return false;
}
public CleanSMS(playerid)
{
	for (new i = 0; i < MAX_SMS_COUNT;i++)
	{
		SMS[playerid][i][Number] = 0;
		format(SMS[playerid][i][SMSText], MAX_TEXT_SMS, "0");
	}
}
public RemoveSMS(playerid, smsid)
{
	SMS[playerid][smsid][Number] = 0;
	format(SMS[playerid][smsid][SMSText], MAX_TEXT_SMS, "0");
}
public ShowSMSToPlayer(playerid)
{
	new SMSDialog[750];
	new Msg10Char[10];
	new TempConvert[50];
	new ConteoSMS = -1;
	for (new i = 0; i < MAX_SMS_COUNT; i++)
	{
	    if ( SMS[playerid][i][Number] )
	    {
	    	new IsAgenda = IsInAgendaNumber(playerid, SMS[playerid][i][Number]);
		    format(Msg10Char, sizeof(Msg10Char), "%s", SMS[playerid][i][SMSText]);
			if ( ConteoSMS != -1 )
			{
    	    	if ( IsAgenda != -1 )
    	    	{
			    	format(TempConvert, sizeof(TempConvert), "\r\n%i (%s) - {F5FF00}[%s...]", SMS[playerid][i][Number], AgendaData[playerid][IsAgenda][NameC],  Msg10Char);
	    		}
	    		else
	    		{
			    	format(TempConvert, sizeof(TempConvert), "\r\n%i - {F5FF00}[%s...]", SMS[playerid][i][Number], Msg10Char);
				}
	    	}
			else
			{
    	    	if ( IsAgenda != -1 )
    	    	{
			    	format(TempConvert, sizeof(TempConvert), "%i (%s) - {F5FF00}[%s...]", SMS[playerid][i][Number], AgendaData[playerid][IsAgenda][NameC],  Msg10Char);
		    	}
		    	else
		    	{
			    	format(TempConvert, sizeof(TempConvert), "%i - {F5FF00}[%s...]", SMS[playerid][i][Number], Msg10Char);
				}
			}
	        strcat(SMSDialog, TempConvert, sizeof(SMSDialog));
	        ConteoSMS++;
	        PlayersDataOnline[playerid][SaveAfterAgenda][ConteoSMS] = i;
        }
	}
	if (ConteoSMS != -1)
	{
		ShowPlayerDialogEx(playerid,62,DIALOG_STYLE_LIST,"{00A5FF}Agenda - SMS", SMSDialog, "Opciones", "Volver");
	}
	else
	{
		ShowPlayerDialogEx(playerid,21,DIALOG_STYLE_MSGBOX,"{00A5FF}Agenda - Información", "{F0F0F0}No se encontrarón SMS.", "Aceptar", "Volver");
	}
}
public ShowSMSOptionsToPlayer(playerid, smsid)
{
	ShowPlayerDialogEx(playerid,61,DIALOG_STYLE_LIST, "{00A5FF}Agenda - SMS {F5FF00}Opciones", "{00A5FF}1 - {E6E6E6}Leer\r\n{00A5FF}2 - {E6E6E6}Responder\r\n{00A5FF}3 - {E6E6E6}Llamar\r\n{00A5FF}4 - {E6E6E6}Borrar", "Seleccionar", "Volver");
}
public ShowReadSMS(playerid, smsid)
{
	new MsgRead[350];
   	new IsAgenda = IsInAgendaNumber(playerid, SMS[playerid][smsid][Number]);
   	if ( IsAgenda != -1 )
   	{
		format(MsgRead, sizeof(MsgRead), "{00F50A}Número: {E6E6E6}%i (%s)\n\n{00F50A}Contenido:\n{E6E6E6}%s", SMS[playerid][smsid][Number], AgendaData[playerid][IsAgenda][NameC], SMS[playerid][smsid][SMSText]);
	}
	else
	{
		format(MsgRead, sizeof(MsgRead), "{00F50A}Número: {E6E6E6}%i\n\n{00F50A}Contenido:\n{E6E6E6}%s", SMS[playerid][smsid][Number], SMS[playerid][smsid][SMSText]);
	}

	ShowPlayerDialogEx(playerid,63,DIALOG_STYLE_MSGBOX,"{00A5FF}Agenda - SMS {F5FF00}Leer", MsgRead, "Aceptar", "Volver");
}
public ShowReplySMS(playerid, smsid)
{
	new MsgTitleDialog[150];
   	new IsAgenda = IsInAgendaNumber(playerid, SMS[playerid][smsid][Number]);
   	if ( IsAgenda != -1 )
   	{
		format(MsgTitleDialog, sizeof(MsgTitleDialog), "{F0F0F0}Escriba lo que desea responderle a {F5FF00}%s {F0F0F0}({00F50A}%i{F0F0F0})", AgendaData[playerid][IsAgenda][NameC], SMS[playerid][smsid][Number]);
	}
	else
	{
		format(MsgTitleDialog, sizeof(MsgTitleDialog), "{F0F0F0}Escriba lo que desea responder al número {00F50A}%i", SMS[playerid][smsid][Number]);
	}
	ShowPlayerDialogEx(playerid,64,DIALOG_STYLE_INPUT,"{00A5FF}Agenda - SMS {F5FF00}Responder", MsgTitleDialog, "Enviar", "Volver");
}
public ShowRemoveSMS(playerid, smsid)
{
	ShowPlayerDialogEx(playerid,21,DIALOG_STYLE_MSGBOX,"{00A5FF}Agenda - Información", "{F0F0F0}Ha eliminado con éxito este SMS.", "Aceptar", "Inicio");
	RemoveSMS(playerid, smsid);
}
public SendMessageDeathMatch(playerid)
{
	new MsgGameText[MAX_TEXT_CHAT];
	switch ( random(8) )
	{
	    case 0:
	    {
			format(MsgGameText, sizeof(MsgGameText), "~>~~>~ ~r~Asesino ~<~~<~");
		}
	    case 1:
	    {
			format(MsgGameText, sizeof(MsgGameText), "~>~~>~ ~r~Criminal ~<~~<~");
		}
	    case 2:
	    {
			format(MsgGameText, sizeof(MsgGameText), "~>~~>~ ~r~Homicida ~<~~<~");
		}
	    case 3:
	    {
			format(MsgGameText, sizeof(MsgGameText), "~>~~>~ ~r~Playa ~<~~<~");
		}
	    case 4:
	    {
			format(MsgGameText, sizeof(MsgGameText), "~>~~>~ ~r~Owned ~<~~<~");
		}
	    case 5:
	    {
			format(MsgGameText, sizeof(MsgGameText), "~>~~>~ ~r~POwned ~<~~<~");
		}
	    case 6:
	    {
			format(MsgGameText, sizeof(MsgGameText), "~>~~>~ ~r~LOL ~<~~<~");
		}
	    case 7:
	    {
			format(MsgGameText, sizeof(MsgGameText), "~>~~>~ ~r~Serial Kill ~<~~<~");
		}
	}
	GameTextForPlayer(playerid, MsgGameText, 500, 5);
}
public SendMessageToPlayerDeathMatch(playerid, killerid, weaponid)
{
    new MsgDMToAll[MAX_TEXT_CHAT];
    format(MsgDMToAll, sizeof(MsgDMToAll), "{00F50A}*** DeathMatch: {F50000}%s mató a %s.", PlayersDataOnline[killerid][NameOnlineFix], PlayersDataOnline[playerid][NameOnlineFix]);
	for (new i = 0; i < MAX_PLAYERS; i++)
	{
	    if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersDataOnline[i][ModeDM] )
	    {
			SendClientMessage(i, COLOR_MENSAJES_DE_AVISOS, MsgDMToAll);
	    }
    }
}
public IsVehicleOpen(playerid, vehicleid, ispassenger)
{
	if (vehicleid > MAX_CAR_FACCION ||
	    !DataCars[vehicleid][Lock] && vehicleid <= MAX_CAR_DUENO ||
		IsVehicleMyFaccion(playerid, vehicleid) && !DataCars[vehicleid][Lock] ||
		strlen(DataCars[vehicleid][Dueno]) == 1 && vehicleid <= MAX_CAR_DUENO
       )
	{
	    return true;
	}
	else
	{
	    if (vehicleid > MAX_CAR_DUENO && !DataCars[vehicleid][Lock] && ispassenger != 0)
	    {
	        return true;
	    }
	    else
	 	{
	    	return false;
    	}
	}
}
public ShowPlayerTextDrawCansansio(playerid)
{
	if (PlayersData[playerid][Cansansio] < 1 || PlayersData[playerid][Cansansio] > MAX_CANSANSIO)
	{
		PlayersData[playerid][Cansansio] = 2;
	}
	TextDrawShowForPlayer(playerid, BarsCansansio[PlayersData[playerid][Cansansio]]);
}
public SetPlayerSleep(playerid)
{
	if ( IsPlayerConnected(playerid) && PlayersDataOnline[playerid][InSleep] )
	{
		if ( PlayersDataOnline[playerid][InSleep] )
		{
		    if ( PlayersData[playerid][Cansansio] < MAX_CANSANSIO )
		    {
		    	TextDrawHideForPlayer(playerid, BarsCansansio[PlayersData[playerid][Cansansio]]);
		    	PlayersData[playerid][Cansansio]++;
				ShowPlayerTextDrawCansansio(playerid);
				SetTimerEx("SetPlayerSleep", 1000, false, "d", playerid);
			}
			else
			{
				SendInfoMessage(playerid, 2, "0", "Has descansado ya suficiente, puede levantarse!");
				TogglePlayerControllableEx(playerid, true);
				PlayersDataOnline[playerid][InSleep] = false;
			}
		}
	}
}
public UpdateTextDrawVehicle(playerid, vehicleid)
{
	new Float:Velocity[3], StringVelocity[3];
	GetVehicleVelocity(vehicleid, Velocity[0], Velocity[1], Velocity[2]);
//	new Float:VelocityInt = (floatabs(Velocity[0]) + floatabs(Velocity[1]) + floatabs(Velocity[2])) * 70;
	new VelocityInt = floatround(floatsqroot(floatpower(floatabs(Velocity[0]), 2.0) + floatpower(floatabs(Velocity[1]), 2.0) + floatpower(floatabs(Velocity[2]), 2.0)) * 120.0);
	format(StringVelocity, sizeof(StringVelocity), "%i", VelocityInt);

	TextDrawHideForPlayer(playerid, VelocimetroNumber1[PlayersDataOnline[playerid][LastVel][0]]);
	TextDrawHideForPlayer(playerid, VelocimetroNumber2[PlayersDataOnline[playerid][LastVel][1]]);
	TextDrawHideForPlayer(playerid, VelocimetroNumber3[PlayersDataOnline[playerid][LastVel][2]]);

	StringVelocity[0] = AbsVel(StringVelocity[0]);
	StringVelocity[1] = AbsVel(StringVelocity[1]);

	TextDrawShowForPlayer(playerid, VelocimetroNumber1[StringVelocity[0]]);
	if ( VelocityInt >= 10 )
	{
		TextDrawShowForPlayer(playerid, VelocimetroNumber2[StringVelocity[1]]);
		if ( VelocityInt >= 100 )
		{
			TextDrawShowForPlayer(playerid, VelocimetroNumber3[VelocityInt%10]);
		}
	}

	PlayersDataOnline[playerid][LastVel][0] = StringVelocity[0];
	PlayersDataOnline[playerid][LastVel][1] = StringVelocity[1];
	PlayersDataOnline[playerid][LastVel][2] = VelocityInt%10;

	new Float:Estado; GetVehicleHealth(vehicleid, Estado);
	if ( coches_Todos_Velocidad[DataCars[vehicleid][Modelo] - 400] )
	{
	    new TextTempId;
		TextTempId = floatround((40 * float(VelocityInt) / (float(coches_Todos_Velocidad[DataCars[vehicleid][Modelo] - 400]) / float(100)) / 100));
		if ( TextTempId <= coches_Todos_Velocidad[DataCars[vehicleid][Modelo] - 400] )
		{
		    if ( TextTempId <= 40 )
		    {
				TextDrawHideForPlayer(playerid, TemperaturaTextDraws[PlayersDataOnline[playerid][LastTextDrawTemperatura]]);
			    TextDrawShowForPlayer(playerid, TemperaturaTextDraws[TextTempId]);
			    PlayersDataOnline[playerid][LastTextDrawTemperatura] = TextTempId;
		    }

			if ( TextTempId >= 40 )
			{
			    if ( !DataCars[vehicleid][TemperaturaC] )
			    {
			        if ( gettime() > DataCars[vehicleid][TimeCalentamiento] && DataCars[vehicleid][TimeCalentamiento])
			        {
				        DataCars[vehicleid][TemperaturaC] = true;
			        	SetVehicleHealthEx(GetPlayerVehicleID(playerid), Estado - 50);
			        	DataCars[vehicleid][LastDamage] = DataCars[vehicleid][LastDamage] - 50;
			        	Estado -= 50;
		        	}
		        	else
		        	{
			        	PlayPlayerStreamSound(playerid, 1056);
						if ( !DataCars[vehicleid][TimeCalentamiento] )
						{
		        	    	DataCars[vehicleid][TimeCalentamiento] = gettime() + 5;
	        	    	}
					}
				}
        	}
        	else
        	{
        	    DataCars[vehicleid][TimeCalentamiento] = 0;
	        	DataCars[vehicleid][TemperaturaC] = false;
			}
	    }
	}
	if ( (DataCars[vehicleid][LastDamage] - Estado) != 0 )
	{
	    if ( (DataCars[vehicleid][LastDamage] - Estado) > 0.0 )
	    {
//	        printf("LastDamage: %f Estado: %f",DataCars[vehicleid][LastDamage], Estado);
			if ( PlayersDataOnline[playerid][PistaIDp] != -1 && Pistas[PlayersDataOnline[playerid][PistaIDp]][Repair] )
			{
				RepairVehicle(vehicleid);
				SetVehicleHealthEx(vehicleid, 1000.0);
				Estado = 1000.0;
			}
			else if ( !DataCars[vehicleid][TemperaturaC] )
			{
			    if ( !PlayersDataOnline[playerid][AdminOn] )
			    {
					UpdatePlayerVehicleStatus(vehicleid, (DataCars[vehicleid][LastDamage] - Estado) / 10);
			    }
			}
		}
		UpdateDamage(playerid, Estado);
	}
	DataCars[vehicleid][LastDamage] 		= Estado;
	/*else if ( PlayersDataOnline[playerid][PistaIDp] != -1 )
	{
		if ( VelocityInt - DataCars[vehicleid][LastVelocityInt] > 10 )
		{
		    new MsgCheatSpeed[256];
		    format(MsgCheatSpeed, sizeof(MsgCheatSpeed), "%s AntiCheat-Speed Hack - %s[%i] posible cheat de Speed Hack. Datos: Diferencia: %i | Actual: %i | Anterior: %i.", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline], playerid, VelocityInt - DataCars[vehicleid][LastVelocityInt], VelocityInt, DataCars[vehicleid][LastVelocityInt]);
		    MsgCheatsReportsToAdmins(MsgCheatSpeed);
		    return true;
	    }
	}*/
//	DataCars[vehicleid][LastVelocityInt] 	= VelocityInt;
	return true;
	//printf("%0.2f - %0.2f - %i", Estado / 9.34, Estado, floatround(Estado));
}
public UpdateDamage(playerid, &Float:newdamage)
{
	if ( newdamage > DataCars[PlayersDataOnline[playerid][InCarId]][LastDamage] && DataCars[PlayersDataOnline[playerid][InCarId]][VehicleAnticheat] <= gettime() )
	{
		SetVehicleHealth(PlayersDataOnline[playerid][InCarId], DataCars[PlayersDataOnline[playerid][InCarId]][LastDamage]);
		UpdateVehicleDamageStatus(PlayersDataOnline[playerid][InCarId], DataCars[PlayersDataOnline[playerid][InCarId]][PanelS], DataCars[PlayersDataOnline[playerid][InCarId]][DoorS], DataCars[PlayersDataOnline[playerid][InCarId]][LightS], DataCars[PlayersDataOnline[playerid][InCarId]][TiresS]);
		newdamage = DataCars[PlayersDataOnline[playerid][InCarId]][LastDamage];
		new MsgAviso[MAX_TEXT_CHAT];
		format(MsgAviso, sizeof(MsgAviso), "%s AntiCheat-Repair - %s[%i] posible cheat de repair vehicle. Datos: ID del vehículo %i", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline], playerid, PlayersDataOnline[playerid][InCarId]);
		MsgCheatsReportsToAdmins(MsgAviso);
	}
	else
	{
		new IntDamage = floatround(newdamage / 9.34);
		TextDrawHideForPlayer(playerid, BarsDamage[PlayersDataOnline[playerid][LastDamageInt]]);
		TextDrawShowForPlayer(playerid, BarsDamage[IntDamage]);
		PlayersDataOnline[playerid][LastDamageInt] = IntDamage;
		GetVehicleDamageStatus(PlayersDataOnline[playerid][InCarId], DataCars[PlayersDataOnline[playerid][InCarId]][PanelS], DataCars[PlayersDataOnline[playerid][InCarId]][DoorS], DataCars[PlayersDataOnline[playerid][InCarId]][LightS], DataCars[PlayersDataOnline[playerid][InCarId]][TiresS]);
	}
}
public UpdateGasAndOil(vehicleid)
{
	for (new i = 0; i < MAX_PLAYERS; i++)
	{
	    if ( IsPlayerConnected(i) && PlayersDataOnline[i][InCarId] == vehicleid)
	    {
			TextDrawHideForPlayer(i, BarsGas[PlayersDataOnline[i][LastGas]]);
			TextDrawShowForPlayer(i, BarsGas[DataCars[vehicleid][Gas]]);
			PlayersDataOnline[i][LastGas] = DataCars[vehicleid][Gas];

			TextDrawHideForPlayer(i, BarsOil[PlayersDataOnline[i][LastOil]]);
			TextDrawShowForPlayer(i, BarsOil[DataCars[vehicleid][Oil]]);
			PlayersDataOnline[i][LastOil] = DataCars[vehicleid][Oil];
		}
	}
}
public CreateTextDrawGas()
{
	for (new i = 0; i <= MAX_GAS_VEHICLE; i++)
	{
		BarsGas[i] = TextDrawCreateEx(488.0, 412.0,"_");
		TextDrawUseBox(BarsGas[i], 1);
		TextDrawBackgroundColor(BarsGas[i] ,0x00000000);
		TextDrawColor(BarsGas[i], 0x00000000);
		TextDrawBoxColor(BarsGas[i], 0x2EFF03FF);
		TextDrawTextSize(BarsGas[i], 488.0 + i, 421.0);
		TextDrawSetShadow(BarsGas[i], 1);
		TextDrawLetterSize(BarsGas[i], 0.1 , 0.1);
	}
}
public CreateTextDrawDamage()
{
	for (new i = 0; i <= MAX_DAMAGE_VEHICLE; i++)
	{
		BarsDamage[i] = TextDrawCreateEx(512.0, 421.0,"_");
		TextDrawUseBox(BarsDamage[i], 1);
		TextDrawBackgroundColor(BarsDamage[i] ,0x00000000);
		TextDrawColor(BarsDamage[i], 0x00000000);
		TextDrawBoxColor(BarsDamage[i], 0xFF0005FF);
		TextDrawTextSize(BarsDamage[i], 512.0 + i, 421.0);
		TextDrawSetShadow(BarsDamage[i], 1);
		TextDrawLetterSize(BarsDamage[i], 0.1 , 0.1);
	}
}
public CreateTextDrawOil()
{
	for (new i = 0; i <= MAX_OIL_VEHICLE; i++)
	{
		BarsOil[i] = TextDrawCreateEx(506.0, 402.8,"_");
		TextDrawUseBox(BarsOil[i], 1);
		TextDrawBackgroundColor(BarsOil[6] ,0x00000000);
		TextDrawColor(BarsOil[i], 0x00000000);
		TextDrawBoxColor(BarsOil[i], 0x00A5FFFF);
		TextDrawTextSize(BarsOil[i], 506 + i, 402.8); // + 506
		TextDrawSetShadow(BarsOil[i], 1);
		TextDrawLetterSize(BarsOil[i], 0.1 , 0.1);
	}
}
public CreateTextDrawNumbers()
{
    new TextChange[10];
	for ( new i = 0; i < 10; i++ )
	{
	    format(TextChange, sizeof(TextChange),"%i", i);
		VelocimetroNumber1[i] = TextDrawCreateEx(532.0, 428.0, TextChange);
		TextDrawColor(VelocimetroNumber1[i], 0xFFFEFFFF);
		TextDrawSetShadow(VelocimetroNumber1[i] ,1);
		TextDrawFont(VelocimetroNumber1[i], 2);
		TextDrawLetterSize(VelocimetroNumber1[i], 0.7 , 1.7);

	    format(TextChange, sizeof(TextChange),"__%i", i);
		VelocimetroNumber2[i] = TextDrawCreateEx(532.0, 428.0, TextChange);
		TextDrawColor(VelocimetroNumber2[i], 0xFFFEFFFF);
		TextDrawSetShadow(VelocimetroNumber2[i] ,1);
		TextDrawFont(VelocimetroNumber2[i], 2);
		TextDrawLetterSize(VelocimetroNumber2[i], 0.7 , 1.7);

	    format(TextChange, sizeof(TextChange),"____%i", i);
		VelocimetroNumber3[i] = TextDrawCreateEx(532.0, 428.0, TextChange);
		TextDrawColor(VelocimetroNumber3[i], 0xFFFEFFFF);
		TextDrawSetShadow(VelocimetroNumber3[i] ,1);
		TextDrawFont(VelocimetroNumber3[i], 2);
		TextDrawLetterSize(VelocimetroNumber3[i], 0.7 , 1.7);
	}
	new Colors[41] = {
	0x4A4AF1FF, //80
	0x5E5EF1FF,
	0x7171F1FF,
	0x7B7BF1FF,
	0x8E8EF1FF,
	0xA1A1F1FF,
	0xB5B5F1FF,
	0xCACAF1FF,
	0xDDDDF1FF,
	0xF1F1F1FF, // 90
	0xF1E8E7FF,
	0xF1DDDDFF,
	0xF1D3D3FF,
	0xF1CACAFF,
	0xF1C0C0FF,
	0xF1B5B5FF,
	0xF1ABABFF,
	0xF1A3A1FF,
	0xF19897FF,
	0xF18E8CFF, //100
	0xF18484FF,
	0xF17A7AFF,
	0xF1716FFF,
	0xF16867FF,
	0xF15C5CFF, //105
	0xF15252FF,
	0xF14A4AFF,
	0xF14141FF,
	0xF13838FF,
	0xF1302EFF, //110
	0xF1302EFF,
	0xF1302EFF,
	0xF1302EFF,
	0xF1302EFF,
	0xF1302EFF,
	0xF1302EFF,
	0xF1302EFF,
	0xF1302EFF,
	0xF1302EFF,
	0xF1302EFF,
	0xF1302EFF
	};
	for ( new i = 80; i <= 120; i++ )
	{
	    format(TextChange, sizeof(TextChange),"%iC", i);
		TemperaturaTextDraws[i - 80] = TextDrawCreateEx(492.0, 425.0, TextChange);
		TextDrawColor(TemperaturaTextDraws[i - 80], Colors[i - 80]);
		TextDrawSetShadow(TemperaturaTextDraws[i - 80] ,1);
		TextDrawFont(TemperaturaTextDraws[i - 80], 1);
		TextDrawLetterSize(TemperaturaTextDraws[i - 80], 0.5 , 1.0);
	}
	TemperaturaTextDraws[41] = TextDrawCreateEx(492.0, 425.0, "N/A");
	TextDrawColor(TemperaturaTextDraws[41], 0xFFFEFFFF);
	TextDrawSetShadow(TemperaturaTextDraws[41] ,1);
	TextDrawFont(TemperaturaTextDraws[41], 1);
	TextDrawLetterSize(TemperaturaTextDraws[41], 0.5 , 1.0);

	// TemperaturaTextDraws
}
public AbsVel(numberAscci)
{
	if ( numberAscci - 48 >= 0 )
	{
	    return (numberAscci - 48);
	}
	else
	{
    	return false;
	}
}
public OnGameModeExitEx()
{
	for (new i = 0; i < MAX_PLAYERS; i++)
	{
		if ( IsPlayerConnected(i) )
		{
	    	SaveDatosPlayerDisconnect(i);
    	}
	}
	for (new i = 0; i < MAX_FACCION_COUNT; i++ )
	{
	    new TempDirFaccion[25];
	    format(TempDirFaccion, sizeof(TempDirFaccion), "%s%i.ulp", DIR_FACCIONES, i);
		if ( fexist(TempDirFaccion) )
		{
			SaveDataFaccion(i);
		}
		else
		{
		    break;
		}
	}
	// Negocios
	for (new i = 1; i <= MAX_BIZZ; i++)
	{
		DataSaveBizz(i, true);
	}
	// Houses
	for (new i = 1; i <= MAX_HOUSE; i++)
	{
		CheckGarageRemove(i);
		SaveHouse(i, true);
	}
	// Otros
	SaveGasolineras();
	SaveIncendios();
	SaveBombas();
	SaveVCP();
	SaveDataPistas();
	// Save Car's
	for (new i = 1; i <= MAX_CAR; i++)
	{
	    GetVehiclePos(i, DataCars[i][LastX], DataCars[i][LastY], DataCars[i][LastZ]);
		GetVehicleZAngle(i, DataCars[i][LastZZ]);
		GetVehicleDamageStatus(i, DataCars[i][PanelS], DataCars[i][DoorS], DataCars[i][LightS], DataCars[i][TiresS]);
		if ( DataCars[i][LlenandoGas] )
		{
            DataCars[i][Gas] = DataCars[i][LlenandoGas];
		}
		DataCars[i][IsLastSpawn] = true;
	}
	for (new i = 1; i <= MAX_CAR_DUENO; i++ )
	{
		SaveDataVehicle(i, DIR_VEHICLES);
	}
	for (new i = MAX_CAR_DUENO + 1; i <= MAX_CAR_FACCION; i++)
	{
		SaveDataVehicle(i, DIR_VEHICLESF);
    }
	for ( new i = MAX_CAR_FACCION + 1; i <= MAX_CAR_PUBLIC; i++)
	{
		SaveDataVehicle(i, DIR_VEHICLESP);
    }
	// Save Teles
    SaveTelesLock();
	SaveGaragesExLock();

	DestroyAllDynamicObjects();
	mysql_close(dataBase);
	print("___________________ GAMEMODE DESCARGADO CORRECTAMENTE! ___________________");
	print("___________________ GAMEMODE DESCARGADO CORRECTAMENTE! ___________________");
	print("___________________ GAMEMODE DESCARGADO CORRECTAMENTE! ___________________");
}
public ResetServer()
{
	OnGameModeExitEx();
	ResetGM = true;
	SendRconCommand("gmx");
    for ( new i = 0; i < 10; i++)
    {
    	SendClientMessageToAll(0x000000FF, " ");
	}
	SendClientMessageToAll(COLOR_MESSAGES[2], "{F50000}ATENCIÓN: {00F50A}En estos momentos el servidor está reiniciando, {F50000}POR FAVOR NO SE DESCONECTE! {00F50A}Sólo demorará 5 segundos.");
	SendClientMessageToAll(COLOR_MESSAGES[2], ReasonReset);
   	SendClientMessageToAll(0x000000FF, " ");
	SendClientMessageToAll(COLOR_MESSAGES[2], "{E6E6E6}Saludos Cordiales,");
	SendClientMessageToAll(COLOR_MESSAGES[2], "{E6E6E6}Equipo de Un Player.");
	GameTextForAll( "~G~Servidor Reiniciando...~N~Por favor espere...", 6000, 0);
}
public ConfirmDeletedAllSMS(playerid)
{
	ShowPlayerDialogEx(playerid,66,DIALOG_STYLE_MSGBOX, "{00A5FF}Agenda - SMS {F5FF00}Borrar Todos","{E6E6E6}¿Está seguro que desea {F50000}BORRAR TODOS{00A5FF} los SMS?", "Borrarlos", "Volver");
}
public IsTunningForVehicle(modelid)
{
	for ( new i = 0; i < sizeof(ListTRANSFENDEREscape);i++)
	{
	    if ( ListTRANSFENDEREscape[i] == modelid )
	    {
	        return 1;
		}
	}
	for ( new i = 0; i < sizeof(ListTRANSFENDERSentinel);i++)
	{
	    if ( ListTRANSFENDERSentinel[i] == modelid )
	    {
	        return 2;
		}
	}
	for ( new i = 0; i < sizeof(ListTRANSFENDER);i++)
	{
	    if ( ListTRANSFENDER[i] == modelid )
	    {
	        return 3;
		}
	}
	return false;
}
public CleanTunningSlots(vehicleid)
{
	for (new t = 0; t < 14; t++ )
	{
		DataCars[vehicleid][SlotsTunning][t] = 0;
    }
    DataCars[vehicleid][Vinillo] = -1;
}
public SetLastSettingVehicle(vehicleid)
{
	CreateVehicleEx(DataCars[vehicleid][Modelo], DataCars[vehicleid][LastX], DataCars[vehicleid][LastY], DataCars[vehicleid][LastZ], DataCars[vehicleid][LastZZ], DataCars[vehicleid][Color1], DataCars[vehicleid][Color2], vehicleid);
	UpdateVehicleDamageStatus(vehicleid, DataCars[vehicleid][PanelS], DataCars[vehicleid][DoorS], DataCars[vehicleid][LightS], DataCars[vehicleid][TiresS]);
	if ( DataCars[vehicleid][Vinillo] != -1 && IsValidVehiclePaintJob(DataCars[vehicleid][Modelo]) )
	{
		ChangeVehiclePaintjob(vehicleid, DataCars[vehicleid][Vinillo]);
	}
	else
	{
		DataCars[vehicleid][Vinillo] = -1;
	}
	for (new t = 0; t < 14; t++ )
	{
	    if ( DataCars[vehicleid][SlotsTunning][t] )
	    {
			AddVehicleComponentEx(vehicleid, DataCars[vehicleid][SlotsTunning][t]);
		}
	}
	if ( DataCars[vehicleid][LastDamage] >= 250.0 )
	{
		SetVehicleHealthEx(vehicleid, DataCars[vehicleid][LastDamage]);
		GetVehicleHealth(vehicleid, DataCars[vehicleid][LastDamage]);
	}
	SetVehicleVirtualWorld(vehicleid, DataCars[vehicleid][WorldLast]);
	LinkVehicleToInterior(vehicleid, DataCars[vehicleid][InteriorLast]);
}
public AddVehicleComponentEx(vehicleid, componentid)
{
	AddVehicleComponent(vehicleid, componentid);
	DataCars[vehicleid][SlotsTunning][GetVehicleComponentType(componentid)] = componentid;
}
public GetMyNearCity(playerid)
{
    for ( new i = 10000; i >= 0;i=i-100)
    {
		if (IsPlayerInRangeOfPoint(playerid, i, -1720.5479,1018.1831,17.2422) &&
			IsPlayerInRangeOfPoint(playerid, i, 2804.9290,-1432.0378,39.7068) )
		{
		    continue;
		}
		else
		{
			if ( IsPlayerInRangeOfPoint(playerid, i, -1720.5479,1018.1831,17.2422) )
			{
				return true; // SF
			}
			else
			{
				return false; // LS
			}
		}
	}
	return false;
}
public SetVehicleToRespawnEx(vehicleid)
{
	if ( coches_Todos_Type[DataCars[vehicleid][Modelo] - 400] != TREN )
	{

		RemoveVehicleHidden(vehicleid);
		DestroyVehicle(vehicleid);
		CleanTunningSlots(vehicleid);
		CreateVehicleEx(DataCars[vehicleid][Modelo],
		DataCars[vehicleid][PosX],
		DataCars[vehicleid][PosY],
		DataCars[vehicleid][PosZ],
		DataCars[vehicleid][PosZZ],
		DataCars[vehicleid][Color1],
		DataCars[vehicleid][Color2],
		vehicleid
		);
	}
	else
	{
	    SetVehicleToRespawn(vehicleid);
	}
	if ( DataCars[vehicleid][VehicleDeath] )
	{
		DataCars[vehicleid][VehicleDeath] = false;
		KillTimer(DataCars[vehicleid][TimerIdBug]);
	}
	GetVehicleHealth(vehicleid, DataCars[vehicleid][LastDamage]);
    DataCars[vehicleid][WorldLast]    = DataCars[vehicleid][World];
    DataCars[vehicleid][InteriorLast] = DataCars[vehicleid][Interior];
}
public SetVehicleToRespawnExTwo(vehicleid)
{
	if ( coches_Todos_Type[DataCars[vehicleid][Modelo] - 400] != TREN )
	{

		RemoveVehicleHidden(vehicleid);
		DestroyVehicle(vehicleid);

		CreateVehicleEx(DataCars[vehicleid][Modelo],
		DataCars[vehicleid][PosX],
		DataCars[vehicleid][PosY],
		DataCars[vehicleid][PosZ],
		DataCars[vehicleid][PosZZ],
		DataCars[vehicleid][Color1],
		DataCars[vehicleid][Color2],
		vehicleid
		);

		if ( DataCars[vehicleid][Vinillo] != -1 && IsValidVehiclePaintJob(DataCars[vehicleid][Modelo]) )
		{
			ChangeVehiclePaintjob(vehicleid, DataCars[vehicleid][Vinillo]);
		}
		else
		{
			DataCars[vehicleid][Vinillo] = -1;
		}
		for (new t = 0; t < 14; t++ )
		{
		    if ( DataCars[vehicleid][SlotsTunning][t] )
		    {
				AddVehicleComponentEx(vehicleid, DataCars[vehicleid][SlotsTunning][t]);
			}
		}
	}
	else
	{
	    SetVehicleToRespawn(vehicleid);
	}
	if ( DataCars[vehicleid][VehicleDeath] )
	{
		DataCars[vehicleid][VehicleDeath] = false;
		KillTimer(DataCars[vehicleid][TimerIdBug]);
	}
	GetVehicleHealth(vehicleid, DataCars[vehicleid][LastDamage]);
    DataCars[vehicleid][WorldLast]    = DataCars[vehicleid][World];
    DataCars[vehicleid][InteriorLast] = DataCars[vehicleid][Interior];
}
public ShowMenuDMWeapon(playerid)
{
	new CallDialog[1200];
	new TempConvert[45];
	new ConteoCall = -1;
	for (new i = 0; i < 47; i++)
	{
	    if(i!=19&&i!=20&&i!=21)
	    {
	        if ( WeaponEnableDM[i] )
	        {
				if ( ConteoCall != -1 )
				{
			    	format(TempConvert, sizeof(TempConvert), "\r\n{00F50A}%s (%i)",
					SlotNameWeapon[i],
					SlotIDWeapon[i]
					);
		    	}
				else
				{
			    	format(TempConvert, sizeof(TempConvert), "{00F50A}%s (%i)",
				    SlotNameWeapon[i],
				    SlotIDWeapon[i]
					);
				}
			}
			else
			{
				if ( ConteoCall != -1 )
				{
			    	format(TempConvert, sizeof(TempConvert), "\r\n{F50000}%s (%i)",
					SlotNameWeapon[i],
					SlotIDWeapon[i]
					);
		    	}
				else
				{
			    	format(TempConvert, sizeof(TempConvert), "{F50000}%s (%i)",
				    SlotNameWeapon[i],
				    SlotIDWeapon[i]
					);
				}
			}
	        strcat(CallDialog, TempConvert, sizeof(CallDialog));
	        ConteoCall++;
        }
	}
	ShowPlayerDialogEx(playerid,67,DIALOG_STYLE_LIST,"{00A5FF}DeathMatch Mode - Armas permitidas", CallDialog, "Seleccionar", "Salir");
}
public ReverseEx(&number)
{
	if ( number )
	{
	    number = false;
	}
	else
	{
	    number = true;
	}
}
public Reverse(&bool:number)
{
	if ( number )
	{
	    number = false;
	}
	else
	{
	    number = true;
	}
}
public IsWeaponDmExist(weaponid)
{
	for (new i = 0; i < 47; i++)
	{
	    if ( weaponid != i && SlotIDWeapon[weaponid] == SlotIDWeapon[i] && WeaponEnableDM[i] )
	    {
	        WeaponEnableDM[i] = false;
		    return true;
		}
	}
    return false;
}
public UpdateTextDrawDM(teamid)
{
	new FreePoints[3]; FreePoints[0] = -1; FreePoints[1] = -1; FreePoints[2] = -1;
	new TotalPointsDM;
	for (new i = 0; i < MAX_PLAYERS; i++)
	{
		if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersDataOnline[i][ModeDM] && PlayersDataOnline[i][TeamDM] == teamid)
		{
		   	TotalPointsDM += PlayersDataOnline[i][PointDm];
		    for ( new s = 0; s < 3; s++ )
			{
				if ( FreePoints[s] != -1 )
				{
					if ( PlayersDataOnline[i][PointDm] > PlayersDataOnline[FreePoints[s]][PointDm] )
					{
					    if ( s == 0 )
					    {
                        	FreePoints[2] = FreePoints[1];
                        	FreePoints[1] = FreePoints[0];
                        	FreePoints[0] = i;
                       	}
					    else if ( s == 1 )
					    {
                        	FreePoints[2] = FreePoints[1];
                        	FreePoints[1] = i;
                       	}
					    else if ( s == 2 )
					    {
                        	FreePoints[2] = i;
                       	}
	    				break;
					}
				}
				else
				{
				    FreePoints[s] = i;
    				break;
				}
			}
		}
	}
	new FreePositions[3][MAX_PLAYER_NAME + 10];
	format(FreePositions[0], MAX_PLAYER_NAME, "]Nadie]");
	format(FreePositions[1], MAX_PLAYER_NAME, "]Nadie]");
	format(FreePositions[2], MAX_PLAYER_NAME, "]Nadie]");
    for ( new i = 0; i < 3; i++ )
	{
		if ( FreePoints[i] != -1 )
		{
			format(FreePositions[i], MAX_PLAYER_NAME + 10, "%s ~W~(%i)", PlayersDataOnline[FreePoints[i]][NameOnline], PlayersDataOnline[FreePoints[i]][PointDm]);
		}
	}
	new TextForDMTextDraw[300];
	if ( teamid )
	{
		format(TextForDMTextDraw, sizeof(TextForDMTextDraw), "              ~R~Equipo %i~N~~W~Jugador   ~G~Puntos~N~~R~%s~N~~Y~%s~N~~P~%s~N~~N~~G~Total: ~W~%i", teamid + 1, FreePositions[0], FreePositions[1], FreePositions[2], TotalPointsDM);
	}
	else
	{
		format(TextForDMTextDraw, sizeof(TextForDMTextDraw), "              ~B~Equipo %i~N~~W~Jugador   ~G~Puntos~N~~R~%s~N~~Y~%s~N~~P~%s~N~~N~~G~Total: ~W~%i", teamid + 1, FreePositions[0], FreePositions[1], FreePositions[2], TotalPointsDM);
	}
	TextDrawSetString(ModeDMTextDraw[teamid], TextForDMTextDraw);
}
public SetPlayerSpectateToPlayer(playerid, spectateplayerid)
{
	if (PlayersDataOnline[playerid][Espectando] == -1 )
    {
        PlayersDataOnline[playerid][Spawn]      = false;
        GetSpawnInfo(playerid);
		PlayersDataOnline[playerid][StateDeath] = true;
		TogglePlayerSpectating(playerid, 1);
	}
	else
	{
		new IdLast = PlayersDataOnline[playerid][Espectando];
		PlayersDataOnline[spectateplayerid][IsEspectando] = true;
		CheckSpectToPlayer(IdLast);
	}
    PlayersDataOnline[playerid][Espectando] = spectateplayerid;
    SetPlayerVirtualWorldEx(playerid, GetPlayerVirtualWorld(spectateplayerid));
    SetPlayerInteriorEx(playerid, GetPlayerInteriorEx(spectateplayerid));
    if ( IsPlayerInAnyVehicle(spectateplayerid) && PlayersDataOnline[playerid][EspectVehOrPlayer])
    {
        PlayersDataOnline[playerid][EspectVehOrPlayer] = false;
		PlayerSpectateVehicle(playerid, GetPlayerVehicleID(spectateplayerid));
	}
	else
	{
        PlayersDataOnline[playerid][EspectVehOrPlayer] = true;
		PlayerSpectatePlayer(playerid, spectateplayerid);
	}
	if ( PlayersData[spectateplayerid][Admin] == 9 )
	{
	    new MsgPerNivel9[MAX_TEXT_CHAT];
	    format(MsgPerNivel9, sizeof(MsgPerNivel9), "%s %s está espectado a %s!!!!!!!!!!!!", LOGO_STAFF, PlayersDataOnline[playerid][NameOnlineFix], PlayersDataOnline[spectateplayerid][NameOnlineFix]);
	    MsgCheatsReportsToAdminsEx(MsgPerNivel9, 9);
	}
}
public RemoveSpectatePlayer(playerid)
{
	if ( PlayersDataOnline[playerid][Espectando] != -1 )
	{
        PlayersDataOnline[playerid][Spawn]      = true;
		PlayersDataOnline[playerid][StateDeath] = true;
    	TogglePlayerSpectating(playerid, 0);
    	SetSpawnInfoEx(playerid);
    	CheckSpectToPlayer(PlayersDataOnline[playerid][Espectando]);
	    PlayersDataOnline[playerid][Espectando] = -1;
	    return true;
	}
	else
	{
	    return false;
	}
}
public CheckSpectToPlayer(playerid)
{
	for ( new i = 0; i < MAX_PLAYERS; i++)
	{
	    if ( PlayersDataOnline[i][Espectando] == playerid )
	    {
			PlayersDataOnline[playerid][IsEspectando] = true;
			return true;
		}
	}
	PlayersDataOnline[playerid][IsEspectando] = false;
	return true;
}
public UpdateSpectatedPlayers(playerid, death, interiorid, world)
{
	for ( new i = 0; i < MAX_PLAYERS; i++)
	{
	    if ( PlayersDataOnline[i][Espectando] == playerid )
	    {
	        if ( !death )
	        {
			    SetPlayerVirtualWorldEx(i, world);
			    SetPlayerInteriorEx(i, interiorid);
	    		PlayerSpectatePlayer(i, playerid);
			}
			else
			{
	        	RemoveSpectatePlayer(i);
			}
		}
	}
}
public NextPlayerSpect(playerid)
{
	if ( PlayersDataOnline[playerid][Espectando] != -1 )
	{
		new i = PlayersDataOnline[playerid][Espectando] + 1;
		if ( i > 499 )
		{
		    i = 0;
		}
		for (; i < MAX_PLAYERS; i++)
		{
			if ( i == PlayersDataOnline[playerid][Espectando] )
			{
			    return true;
			}
			if ( i != playerid && IsPlayerConnected(i) && PlayersDataOnline[i][StateDeath] != 2 )
			{
			    SetPlayerSpectateToPlayer(playerid, i);
			    return true;
			}
			if ( i == 499 )
			{
			    i = -1;
			}
		}
	}
	return false;
}
public LastPlayerSpect(playerid)
{
	if ( PlayersDataOnline[playerid][Espectando] != -1 )
	{
		new i = PlayersDataOnline[playerid][Espectando] - 1;
		if ( i < 0 )
		{
		    i = 499;
		}
		for (; i < MAX_PLAYERS; i--)
		{
			if ( i == PlayersDataOnline[playerid][Espectando] )
			{
			    return true;
			}
			if ( i != playerid && IsPlayerConnected(i) && PlayersDataOnline[i][StateDeath] != 2)
			{
			    SetPlayerSpectateToPlayer(playerid, i);
			    return true;
			}
			if ( i == 0 )
			{
			    i = 500;
			}
		}
	}
	return false;
}
public CreateDynamicMapIconULP(Float:x, Float:y, Float:z, type)
{
	CreateDynamicMapIcon(x, y, z, type, 0, 0, 0, -1, MAX_RADIO_STREAM_MAP_ICON);
}
public GetMyNextBizz()
{
	for (new i = 1; i < MAX_BIZZ_COUNT; i++)
	{
		new query[200], Cache:cacheid, negocioExiste;
		mysql_format(dataBase, query, 200, "SELECT `ID` FROM `%s` WHERE `ID`='%i';", DIR_NEGOCIOS, i);
		cacheid = mysql_query(dataBase, query);
		cache_get_row_count(negocioExiste);
		cache_delete(cacheid);
		if ( !negocioExiste )
		{
		    return i;
		}
	}
	return false;
}
public GetMyNextHouse()
{
	for (new i = 1; i < MAX_HOUSE_COUNT; i++)
	{
	    new query[200], Cache:cacheid, casaExiste;
		format(query, 200, "SELECT `ID` FROM `%s` WHERE `ID`=%i;", DIR_HOUSES, i);
		cacheid = mysql_query(dataBase, query);
		cache_get_row_count(casaExiste);
		cache_delete(cacheid);
		if ( !casaExiste )
		{
		    return i;
		}
	}
	return false;
}
public PlayerRestoreVarExitedVehicle(playerid)
{
	PlayersDataOnline[playerid][ExitedVehicle] = false;
}
public IsPlayerOff(playerid)
{
	SendInfoMessage(playerid, 0, "1163", "Has sido kickeado, has tardado mucho tiempo en identificarte o regístrarte");
	KickEx(playerid, 8);
}
public SetVehicleBugToRespawn(vehicleid)
{
    DataCars[vehicleid][VehicleDeath] = false;
    SetVehicleToRespawnEx(vehicleid);
	SetVehicleHidden(vehicleid);
}
public LockTrain(vehicleid, LockV)
{
	for ( new t = 0; t <= MAX_TRAIN; t++ )
	{
		for ( new i = 0; i < 4; i++ )
		{
	    	if ( TrainGroups[t][i] == vehicleid )
	    	{
				for ( new f = 0; f < 4; f++ )
				{
				    DataCars[TrainGroups[t][f]][Lock] = LockV;
				}
				break;
			}
	   	}
   	}
}
public GetTrainByVehicleID(vehicleid)
{
	for ( new t = 0; t <= MAX_TRAIN; t++ )
	{
		for ( new i = 0; i < 4; i++ )
		{
	    	if ( TrainGroups[t][i] == vehicleid )
	    	{
				return TrainGroups[t][0];
			}
	   	}
   	}
   	return false;
}
public GetVagonByVehicleID(vehicleid)
{
	for ( new t = 0; t <= MAX_TRAIN; t++ )
	{
		for ( new i = 0; i < 4; i++ )
		{
	    	if ( TrainGroups[t][i] == vehicleid )
	    	{
				return i;
			}
	   	}
   	}
   	return false;
}
public GetVagonByVagonID(vehicleid, vagonid)
{
	for ( new t = 0; t <= MAX_TRAIN; t++ )
	{
		for ( new i = 0; i < 4; i++ )
		{
	    	if ( TrainGroups[t][i] == vehicleid )
	    	{
				return TrainGroups[t][vagonid];
			}
	   	}
   	}
   	return false;
}
public IsPlayerNearTram(playerid)
{
	if ( PlayersData[playerid][Faccion] == TAXI )
	{
	    if ( IsVehicleOpen(playerid, TramSFID, 0) )
	    {
			new Float:PosTram[3];
			GetVehiclePos(TramSFID, PosTram[0], PosTram[1], PosTram[2]);
			if ( IsPlayerInRangeOfPoint(playerid, 3.0, PosTram[0], PosTram[1], PosTram[2]) )
			{
				for (new i = 0; i < MAX_PLAYERS; i++)
				{
				    if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && IsPlayerInVehicle(i, TramSFID) && GetPlayerVehicleSeat(i) == 0 )
				    {
				        return false;
				    }
			    }
			    PutPlayerInVehicle(playerid, TramSFID, 0);
				return true;
			}
			return false;
		}
	}
	return false;
}
public KickEx(playerid, option)
{
	printf("Playerid [%i] kiked OPTION: %i", playerid, option);
	Kick(playerid);
}
public ExistGarageInHouse(houseid)
{
	for ( new i = 0; i < MAX_GARAGE_FOR_HOUSE; i++ )
	{
	    if ( Garages[houseid][i][Xg] != 0)
	    {
	        return true;
		}
	}
	return false;
}
public GetMyNextGarage(houseid)
{
	for ( new i = 0; i < MAX_GARAGE_FOR_HOUSE; i++ )
	{
	    if (!Garages[houseid][i][WorldG])
	    {
	        return i;
		}
	}
	return -1;
}
public IsWorldOfGarage(world)
{
	for (new h = 1; h <= MAX_HOUSE; h++)
	{
		for ( new i = 0; i < MAX_GARAGE_FOR_HOUSE; i++ )
		{
		    if (Garages[h][i][WorldG] && Garages[h][i][WorldG] == world )
		    {
		        return true;
			}
		}
	}
	return false;
}
public CheckGarageRemove(houseid)
{
	for ( new i = 0; i < MAX_GARAGE_FOR_HOUSE; i++ )
	{
	    if ( Garages[houseid][i][DeletedG] && Garages[houseid][i][WorldG] )
	    {
	        RemoveGarage(houseid, i);
		}
	}
}
public RemoveAllGarage(houseid)
{
	for ( new i = 0; i < MAX_GARAGE_FOR_HOUSE; i++ )
	{
        RemoveGarage(houseid, i);
	}
}
public RemoveGarage(houseid, garageid)
{
    Garages[houseid][garageid][Xg]  = 0;
    Garages[houseid][garageid][Yg]  = 0;
    Garages[houseid][garageid][Zg]  = 0;
    Garages[houseid][garageid][ZZg] = 0;

    Garages[houseid][garageid][XgIn]  = 0;
    Garages[houseid][garageid][YgIn]  = 0;
    Garages[houseid][garageid][ZgIn]  = 0;
    Garages[houseid][garageid][ZZgIn] = 0;

    Garages[houseid][garageid][XgOut]  = 0;
    Garages[houseid][garageid][YgOut]  = 0;
    Garages[houseid][garageid][ZgOut]  = 0;
    Garages[houseid][garageid][ZZgOut] = 0;

    Garages[houseid][garageid][WorldG]        = 0;
    Garages[houseid][garageid][TypeGarageE]   = 0;
    Garages[houseid][garageid][DeletedG] = true;
}
public CreateGarage(playerid, houseid, desingid, TypeGarageEC)
{
	new NextGarage = GetMyNextGarage(houseid);
	if ( NextGarage != -1 )
	{
        Garages[houseid][NextGarage][Xg]  = GaragesDesing[desingid][Xg];
        Garages[houseid][NextGarage][Yg]  = GaragesDesing[desingid][Yg];
        Garages[houseid][NextGarage][Zg]  = GaragesDesing[desingid][Zg];
        Garages[houseid][NextGarage][ZZg] = GaragesDesing[desingid][ZZg];

        Garages[houseid][NextGarage][XgIn]  = GaragesDesing[desingid][XgIn];
        Garages[houseid][NextGarage][YgIn]  = GaragesDesing[desingid][YgIn];
        Garages[houseid][NextGarage][ZgIn]  = GaragesDesing[desingid][ZgIn];
        Garages[houseid][NextGarage][ZZgIn] = GaragesDesing[desingid][ZZgIn];

        Garages[houseid][NextGarage][XgOut]  = GaragesDesing[desingid][XgOut];
        Garages[houseid][NextGarage][YgOut]  = GaragesDesing[desingid][YgOut];
        Garages[houseid][NextGarage][ZgOut]  = GaragesDesing[desingid][ZgOut];
        Garages[houseid][NextGarage][ZZgOut] = GaragesDesing[desingid][ZZgOut];

        Garages[houseid][NextGarage][LockOut]   = true;
        Garages[houseid][NextGarage][LockIn] 	= true;

        Garages[houseid][NextGarage][TypeGarageE] = TypeGarageEC;
        Garages[houseid][NextGarage][WorldG] = random(999999 + 1000);

		Garages[houseid][NextGarage][DeletedG] = false;
        return true;
	}
	else
	{
		SendInfoMessage(playerid, 0, "1183", "Ha está casa no se le puede agregar más garages!");
		return false;
	}
}
public ShowGarages(playerid, houseid)
{
	new GarageDialog[700];
	new TempConvert[50];
	new ConteoGarages = -1;
	for (new i = 0; i < MAX_GARAGE_FOR_HOUSE; i++)
	{
	    if ( Garages[houseid][i][WorldG] )
	    {
			if ( ConteoGarages != -1 )
			{
			    if ( !Garages[houseid][i][DeletedG] )
			    {
		    		format(TempConvert, sizeof(TempConvert), "\r\n{00F50A}Garage ID[%i]", i);
	    		}
	    		else
	    		{
		    		format(TempConvert, sizeof(TempConvert), "\r\n{F50000}Garage ID[%i]", i);
				}
	    	}
			else
			{
			    if ( !Garages[houseid][i][DeletedG] )
			    {
		    		format(TempConvert, sizeof(TempConvert), "{00F50A}Garage ID[%i]", i);
	    		}
	    		else
	    		{
		    		format(TempConvert, sizeof(TempConvert), "{F50000}Garage ID[%i]", i);
				}
			}
	        strcat(GarageDialog, TempConvert, sizeof(GarageDialog));
	        ConteoGarages++;
	        PlayersDataOnline[playerid][SaveAfterAgenda][ConteoGarages] = i;
        }
	}
	if (ConteoGarages != -1)
	{
		ShowPlayerDialogEx(playerid,68,DIALOG_STYLE_LIST,"{00A5FF}Garages - Casa", GarageDialog, "Ver", "Salir");
        PlayersDataOnline[playerid][SaveAfterAgenda][10] = houseid;
	}
	else
	{
		ShowPlayerDialogEx(playerid,999,DIALOG_STYLE_MSGBOX,"{00A5FF}Garages - Información", "{F0F0F0}No se encontrarón garages para está casa.", "Aceptar", "");
	}
}
public ShowDetailsGarage(playerid, houseid, garageid)
{
	new GarageDialog[700];
	format(GarageDialog, sizeof(GarageDialog), "{F50000}Garage ID[%i]\n{F50000}World ID[%i]\n{F50000}X_Afuera: %f | Y_Afuera: %f  | Z_Afuera: %f | ZZ_Afuera: %f\n{F50000}X_Afuera_C: %f | Y_Afuera_C: %f  | Z_Afuera_C: %f | ZZ_Afuera_C: %f\n{F50000}X_Dentro: %f | Y_Dentro: %f  | Z_Dentro: %f | ZZ_Dentro: %f ",
	garageid,
	Garages[houseid][garageid][WorldG],
 	Garages[houseid][garageid][Xg],
	Garages[houseid][garageid][Yg],
	Garages[houseid][garageid][Zg],
	Garages[houseid][garageid][ZZg],
	Garages[houseid][garageid][XgOut],
	Garages[houseid][garageid][YgOut],
	Garages[houseid][garageid][ZgOut],
	Garages[houseid][garageid][ZZgOut],
	Garages[houseid][garageid][XgIn],
	Garages[houseid][garageid][YgIn],
	Garages[houseid][garageid][ZgIn],
	Garages[houseid][garageid][ZZgIn]);
	if ( Garages[houseid][garageid][DeletedG] )
	{
		ShowPlayerDialogEx(playerid,69,DIALOG_STYLE_MSGBOX,"{00A5FF}Garages - Detalles", GarageDialog, "No Borrar", "Salir");
	}
	else
	{
		ShowPlayerDialogEx(playerid,69,DIALOG_STYLE_MSGBOX,"{00A5FF}Garages - Detalles", GarageDialog, "Borrar", "Salir");
	}
}
/*enum GaragesDesingEnum
{
    Float:Xg,
    Float:Yg,
    Float:Zg,
    Float:ZZg,
    Float:XgIn,
    Float:YgIn,
    Float:ZgIn,
    Float:ZZgIn,
    Float:XgOut,
    Float:YgOut,
    Float:ZgOut,
    Float:ZZgOut,
	TypeGarageE
}
enum GaragesEnum
{
    Float:Xg,
    Float:Yg,
    Float:Zg,
    Float:ZZg,
    Float:XgIn,
    Float:YgIn,
    Float:ZgIn,
    Float:ZZgIn,
    Float:XgOut,
    Float:YgOut,
    Float:ZgOut,
    Float:ZZgOut,
    LockIn,
    LockOut,
	PickupidIn,
	PickupidOut,
	TypeGarageE,
	WorldG,
	DeletedG
}
*/
public IsPlayerInGarageFun(playerid, &housesave, &garagesave, &locksave)
{
    housesave 	= -1;
    garagesave 	= -1;
    locksave 	= false;
	if ( PlayersDataOnline[playerid][InPickup] >= MIN_GARAGE_PICKUP &&
    	 PlayersDataOnline[playerid][InPickup] <= MAX_GARAGE_PICKUP )
	{
		if ( PlayersData[playerid][IsPlayerInHouse] )
		{
	    	housesave = PlayersData[playerid][IsPlayerInHouse];
		}
		else
		{
		    housesave = PlayersDataOnline[playerid][InPickupTele];
		}
	    garagesave = (PlayersData[playerid][IsPlayerInGarage] + 50);
	    return true;
	}
    else if ( PlayersData[playerid][IsPlayerInGarage] >= 0 && PlayersData[playerid][IsPlayerInHouse] && PlayersDataOnline[playerid][InPickup] >= TypeGarage[0][PickupId] &&
         	  PlayersDataOnline[playerid][InPickup] <= TypeGarage[MAX_GARAGE_TYPE][PickupIdh] )
    {
	    housesave = PlayersData[playerid][IsPlayerInHouse];
        garagesave = PlayersData[playerid][IsPlayerInGarage];
        return true;
    }
    garagesave = IsPlayerNearGarageLC(playerid, housesave, locksave);
    if ( garagesave != -1 )
    {
        return true;
	}

	SendInfoMessage(playerid, 0, "1184", "No te encuentras en ningún garage");
    return -1;
}
public LoadGarageType()
{
	new PosZP;
	// 0
	TypeGarage[MAX_GARAGE_TYPE][PosX]    = 2903.1259765625;
	TypeGarage[MAX_GARAGE_TYPE][PosY]    = 2437.4750976563;
	TypeGarage[MAX_GARAGE_TYPE][PosZ]    = 10.85000038147;
	TypeGarage[MAX_GARAGE_TYPE][PosZZ]    = 180;

	TypeGarage[MAX_GARAGE_TYPE][PosXh]    = 2905.6140136719;
	TypeGarage[MAX_GARAGE_TYPE][PosYh]    = 2430.2329101563;
	TypeGarage[MAX_GARAGE_TYPE][PosZh]    = 10.85000038147;
	TypeGarage[MAX_GARAGE_TYPE][PosZZh]   = 90;

	TypeGarage[MAX_GARAGE_TYPE][PosXc]    = 2902.9169921875;
	TypeGarage[MAX_GARAGE_TYPE][PosYc]    = 2430.9912109375;
	TypeGarage[MAX_GARAGE_TYPE][PosZc]    = 10.857509613037;
	TypeGarage[MAX_GARAGE_TYPE][PosZZc]   = 0;

	TypeGarage[MAX_GARAGE_TYPE][Interior]   = 1;

	TypeGarage[MAX_GARAGE_TYPE][PickupId]	= CreatePickup	(1239, 	1, 	TypeGarage[MAX_GARAGE_TYPE][PosX], TypeGarage[MAX_GARAGE_TYPE][PosY], TypeGarage[MAX_GARAGE_TYPE][PosZ] - PosZP,	 	-1);
	TypeGarage[MAX_GARAGE_TYPE][PickupIdh]	= CreatePickup	(1239, 	1, 	TypeGarage[MAX_GARAGE_TYPE][PosXh], TypeGarage[MAX_GARAGE_TYPE][PosYh], TypeGarage[MAX_GARAGE_TYPE][PosZh],	 	-1);
	MAX_GARAGE_TYPE++;

	// 1
	TypeGarage[MAX_GARAGE_TYPE][PosX]    = 2784.8108;
	TypeGarage[MAX_GARAGE_TYPE][PosY]    = 2629.8093;
	TypeGarage[MAX_GARAGE_TYPE][PosZ]    = 10.8203;
	TypeGarage[MAX_GARAGE_TYPE][PosZZ]    = 90;

	TypeGarage[MAX_GARAGE_TYPE][PosXh]    = 2779.5432128906;
	TypeGarage[MAX_GARAGE_TYPE][PosYh]    = 2624.3771972656;
	TypeGarage[MAX_GARAGE_TYPE][PosZh]    = 10.8203125;
	TypeGarage[MAX_GARAGE_TYPE][PosZZh]   = 0;

	TypeGarage[MAX_GARAGE_TYPE][PosXc]    = 2779.5859375;
	TypeGarage[MAX_GARAGE_TYPE][PosYc]    = 2628.2490234375;
	TypeGarage[MAX_GARAGE_TYPE][PosZc]    = 10.62031269073;
	TypeGarage[MAX_GARAGE_TYPE][PosZZc]   = 270;

	TypeGarage[MAX_GARAGE_TYPE][Interior]   =  2;

	TypeGarage[MAX_GARAGE_TYPE][PickupId]	= CreatePickup	(1239, 	1, 	TypeGarage[MAX_GARAGE_TYPE][PosX], TypeGarage[MAX_GARAGE_TYPE][PosY], TypeGarage[MAX_GARAGE_TYPE][PosZ] - PosZP,	 	-1);
	TypeGarage[MAX_GARAGE_TYPE][PickupIdh]	= CreatePickup	(1239, 	1, 	TypeGarage[MAX_GARAGE_TYPE][PosXh], TypeGarage[MAX_GARAGE_TYPE][PosYh], TypeGarage[MAX_GARAGE_TYPE][PosZh],	 	-1);
	MAX_GARAGE_TYPE++;

	// 2
	TypeGarage[MAX_GARAGE_TYPE][PosX]    = 2783.6885;
	TypeGarage[MAX_GARAGE_TYPE][PosY]    = 2587.9719;
	TypeGarage[MAX_GARAGE_TYPE][PosZ]    = 10.8271;
	TypeGarage[MAX_GARAGE_TYPE][PosZZ]    = 0;

	TypeGarage[MAX_GARAGE_TYPE][PosXh]    = 2784.5083007813;
	TypeGarage[MAX_GARAGE_TYPE][PosYh]    = 2596.9426269531;
	TypeGarage[MAX_GARAGE_TYPE][PosZh]    = 10.8203125;
	TypeGarage[MAX_GARAGE_TYPE][PosZZh]   = 180;

	TypeGarage[MAX_GARAGE_TYPE][PosXc]    = 2783.9020996094;
	TypeGarage[MAX_GARAGE_TYPE][PosYc]    = 2592.9458007813;
	TypeGarage[MAX_GARAGE_TYPE][PosZc]    = 10.620312690735;
	TypeGarage[MAX_GARAGE_TYPE][PosZZc]   = 180;

	TypeGarage[MAX_GARAGE_TYPE][Interior]   = 3;

	TypeGarage[MAX_GARAGE_TYPE][PickupId]	= CreatePickup	(1239, 	1, 	TypeGarage[MAX_GARAGE_TYPE][PosX], TypeGarage[MAX_GARAGE_TYPE][PosY], TypeGarage[MAX_GARAGE_TYPE][PosZ] - PosZP,	 	-1);
	TypeGarage[MAX_GARAGE_TYPE][PickupIdh]	= CreatePickup	(1239, 	1, 	TypeGarage[MAX_GARAGE_TYPE][PosXh], TypeGarage[MAX_GARAGE_TYPE][PosYh], TypeGarage[MAX_GARAGE_TYPE][PosZh],	 	-1);
	MAX_GARAGE_TYPE++;

	// 3
	TypeGarage[MAX_GARAGE_TYPE][PosX]    = 2748.0764;
	TypeGarage[MAX_GARAGE_TYPE][PosY]    = 2636.8281;
	TypeGarage[MAX_GARAGE_TYPE][PosZ]    = 11.4423;
	TypeGarage[MAX_GARAGE_TYPE][PosZZ]    = 90;

	TypeGarage[MAX_GARAGE_TYPE][PosXh]    = 2742.8395996094;
	TypeGarage[MAX_GARAGE_TYPE][PosYh]    = 2631.3056640625;
	TypeGarage[MAX_GARAGE_TYPE][PosZh]    = 11.442255020142;
	TypeGarage[MAX_GARAGE_TYPE][PosZZh]   = 0;

	TypeGarage[MAX_GARAGE_TYPE][PosXc]    = 2742.7019042969;
	TypeGarage[MAX_GARAGE_TYPE][PosYc]    = 2635.9318847656;
	TypeGarage[MAX_GARAGE_TYPE][PosZc]    = 11.242255210876;
	TypeGarage[MAX_GARAGE_TYPE][PosZZc]   = 270;

	TypeGarage[MAX_GARAGE_TYPE][Interior]   = 4;

	TypeGarage[MAX_GARAGE_TYPE][PickupId]	= CreatePickup	(1239, 	1, 	TypeGarage[MAX_GARAGE_TYPE][PosX], TypeGarage[MAX_GARAGE_TYPE][PosY], TypeGarage[MAX_GARAGE_TYPE][PosZ] - PosZP,	 	-1);
	TypeGarage[MAX_GARAGE_TYPE][PickupIdh]	= CreatePickup	(1239, 	1, 	TypeGarage[MAX_GARAGE_TYPE][PosXh], TypeGarage[MAX_GARAGE_TYPE][PosYh], TypeGarage[MAX_GARAGE_TYPE][PosZh],	 	-1);
	MAX_GARAGE_TYPE++;

	// 4
	TypeGarage[MAX_GARAGE_TYPE][PosX]    = 2748.6401;
	TypeGarage[MAX_GARAGE_TYPE][PosY]    = 2612.3386;
	TypeGarage[MAX_GARAGE_TYPE][PosZ]    = 11.3118;
	TypeGarage[MAX_GARAGE_TYPE][PosZZ]    = 90;

	TypeGarage[MAX_GARAGE_TYPE][PosXh]    = 2743.3200683594;
	TypeGarage[MAX_GARAGE_TYPE][PosYh]    = 2617.4396972656;
	TypeGarage[MAX_GARAGE_TYPE][PosZh]    = 11.311784744263;
	TypeGarage[MAX_GARAGE_TYPE][PosZZh]   = 180;

	TypeGarage[MAX_GARAGE_TYPE][PosXc]    = 2742.7180175781;
	TypeGarage[MAX_GARAGE_TYPE][PosYc]    = 2613.1538085938;
	TypeGarage[MAX_GARAGE_TYPE][PosZc]    = 11.111784934998;
	TypeGarage[MAX_GARAGE_TYPE][PosZZc]   = 270;

	TypeGarage[MAX_GARAGE_TYPE][Interior]   = 5;

	TypeGarage[MAX_GARAGE_TYPE][PickupId]	= CreatePickup	(1239, 	1, 	TypeGarage[MAX_GARAGE_TYPE][PosX], TypeGarage[MAX_GARAGE_TYPE][PosY], TypeGarage[MAX_GARAGE_TYPE][PosZ] - PosZP,	 	-1);
	TypeGarage[MAX_GARAGE_TYPE][PickupIdh]	= CreatePickup	(1239, 	1, 	TypeGarage[MAX_GARAGE_TYPE][PosXh], TypeGarage[MAX_GARAGE_TYPE][PosYh], TypeGarage[MAX_GARAGE_TYPE][PosZh],	 	-1);
	MAX_GARAGE_TYPE++;

	// 5
	TypeGarage[MAX_GARAGE_TYPE][PosX]    = 2748.9348;
	TypeGarage[MAX_GARAGE_TYPE][PosY]    = 2604.1074;
	TypeGarage[MAX_GARAGE_TYPE][PosZ]    = 11.4423;
	TypeGarage[MAX_GARAGE_TYPE][PosZZ]    = 270;

	TypeGarage[MAX_GARAGE_TYPE][PosXh]    = 2754.2883300781;
	TypeGarage[MAX_GARAGE_TYPE][PosYh]    = 2599.0959472656;
	TypeGarage[MAX_GARAGE_TYPE][PosZh]    = 11.442255020142;
	TypeGarage[MAX_GARAGE_TYPE][PosZZh]   = 0;

	TypeGarage[MAX_GARAGE_TYPE][PosXc]    = 2753.4196777344;
	TypeGarage[MAX_GARAGE_TYPE][PosYc]    = 2603.6960449219;
	TypeGarage[MAX_GARAGE_TYPE][PosZc]    = 11.242255210876;
	TypeGarage[MAX_GARAGE_TYPE][PosZZc]   = 270;

	TypeGarage[MAX_GARAGE_TYPE][Interior]   = 6;

	TypeGarage[MAX_GARAGE_TYPE][PickupId]	= CreatePickup	(1239, 	1, 	TypeGarage[MAX_GARAGE_TYPE][PosX], TypeGarage[MAX_GARAGE_TYPE][PosY], TypeGarage[MAX_GARAGE_TYPE][PosZ] - PosZP,	 	-1);
	TypeGarage[MAX_GARAGE_TYPE][PickupIdh]	= CreatePickup	(1239, 	1, 	TypeGarage[MAX_GARAGE_TYPE][PosXh], TypeGarage[MAX_GARAGE_TYPE][PosYh], TypeGarage[MAX_GARAGE_TYPE][PosZh],	 	-1);
	MAX_GARAGE_TYPE++;

	// 6
	TypeGarage[MAX_GARAGE_TYPE][PosX]    = 2796.1863;
	TypeGarage[MAX_GARAGE_TYPE][PosY]    = 2636.2778;
	TypeGarage[MAX_GARAGE_TYPE][PosZ]    = 10.8206;
	TypeGarage[MAX_GARAGE_TYPE][PosZZ]    = 90;

	TypeGarage[MAX_GARAGE_TYPE][PosXh]    = 2788.9365234375;
	TypeGarage[MAX_GARAGE_TYPE][PosYh]    = 2640.2585449219;
	TypeGarage[MAX_GARAGE_TYPE][PosZh]    = 10.820586204529;
	TypeGarage[MAX_GARAGE_TYPE][PosZZh]   = 180;

	TypeGarage[MAX_GARAGE_TYPE][PosXc]    = 2790.9309082031;
	TypeGarage[MAX_GARAGE_TYPE][PosYc]    = 2637.2875976563;
	TypeGarage[MAX_GARAGE_TYPE][PosZc]    = 10.620586395264;
	TypeGarage[MAX_GARAGE_TYPE][PosZZc]   = 270;

	TypeGarage[MAX_GARAGE_TYPE][Interior]   =  7;

	TypeGarage[MAX_GARAGE_TYPE][PickupId]	= CreatePickup	(1239, 	1, 	TypeGarage[MAX_GARAGE_TYPE][PosX], TypeGarage[MAX_GARAGE_TYPE][PosY], TypeGarage[MAX_GARAGE_TYPE][PosZ] - PosZP,	 	-1);
	TypeGarage[MAX_GARAGE_TYPE][PickupIdh]	= CreatePickup	(1239, 	1, 	TypeGarage[MAX_GARAGE_TYPE][PosXh], TypeGarage[MAX_GARAGE_TYPE][PosYh], TypeGarage[MAX_GARAGE_TYPE][PosZh],	 	-1);
	MAX_GARAGE_TYPE++;

	// 7
	TypeGarage[MAX_GARAGE_TYPE][PosX]    = 2767.0764;
	TypeGarage[MAX_GARAGE_TYPE][PosY]    = 2637.9668;
	TypeGarage[MAX_GARAGE_TYPE][PosZ]    = 10.9840;
	TypeGarage[MAX_GARAGE_TYPE][PosZZ]    = 180;

	TypeGarage[MAX_GARAGE_TYPE][PosXh]    = 2763.6127929688;
	TypeGarage[MAX_GARAGE_TYPE][PosYh]    = 2635.6181640625;
	TypeGarage[MAX_GARAGE_TYPE][PosZh]    = 10.984013557434;
	TypeGarage[MAX_GARAGE_TYPE][PosZZh]   = 180;

	TypeGarage[MAX_GARAGE_TYPE][PosXc]    = 2767.2465820313;
	TypeGarage[MAX_GARAGE_TYPE][PosYc]    = 2632.2570800781;
	TypeGarage[MAX_GARAGE_TYPE][PosZc]    = 10.784013748169;
	TypeGarage[MAX_GARAGE_TYPE][PosZZc]   = 0;

	TypeGarage[MAX_GARAGE_TYPE][Interior]   = 8;

	TypeGarage[MAX_GARAGE_TYPE][PickupId]	= CreatePickup	(1239, 	1, 	TypeGarage[MAX_GARAGE_TYPE][PosX], TypeGarage[MAX_GARAGE_TYPE][PosY], TypeGarage[MAX_GARAGE_TYPE][PosZ] - PosZP,	 	-1);
	TypeGarage[MAX_GARAGE_TYPE][PickupIdh]	= CreatePickup	(1239, 	1, 	TypeGarage[MAX_GARAGE_TYPE][PosXh], TypeGarage[MAX_GARAGE_TYPE][PosYh], TypeGarage[MAX_GARAGE_TYPE][PosZh],	 	-1);
	MAX_GARAGE_TYPE++;

	// 8
	TypeGarage[MAX_GARAGE_TYPE][PosX]    = 2822.1416;
	TypeGarage[MAX_GARAGE_TYPE][PosY]    = 2629.0002;
	TypeGarage[MAX_GARAGE_TYPE][PosZ]    = 10.8764;
	TypeGarage[MAX_GARAGE_TYPE][PosZZ]    = 0;

	TypeGarage[MAX_GARAGE_TYPE][PosXh]    = 2820.4426269531;
	TypeGarage[MAX_GARAGE_TYPE][PosYh]    = 2638.3657226563;
	TypeGarage[MAX_GARAGE_TYPE][PosZh]    = 10.876442909241;
	TypeGarage[MAX_GARAGE_TYPE][PosZZh]   = 180;

	TypeGarage[MAX_GARAGE_TYPE][PosXc]    = 2823.1149902344;
	TypeGarage[MAX_GARAGE_TYPE][PosYc]    = 2634.6164550781;
	TypeGarage[MAX_GARAGE_TYPE][PosZc]    = 10.676443099976;
	TypeGarage[MAX_GARAGE_TYPE][PosZZc]   = 180;

	TypeGarage[MAX_GARAGE_TYPE][Interior]   =  9;

	TypeGarage[MAX_GARAGE_TYPE][PickupId]	= CreatePickup	(1239, 	1, 	TypeGarage[MAX_GARAGE_TYPE][PosX], TypeGarage[MAX_GARAGE_TYPE][PosY], TypeGarage[MAX_GARAGE_TYPE][PosZ] - PosZP,	 	-1);
	TypeGarage[MAX_GARAGE_TYPE][PickupIdh]	= CreatePickup	(1239, 	1, 	TypeGarage[MAX_GARAGE_TYPE][PosXh], TypeGarage[MAX_GARAGE_TYPE][PosYh], TypeGarage[MAX_GARAGE_TYPE][PosZh],	 	-1);
	MAX_GARAGE_TYPE++;

	// 9
	TypeGarage[MAX_GARAGE_TYPE][PosX]    = 2838.9561;
	TypeGarage[MAX_GARAGE_TYPE][PosY]    = 2630.1169,
	TypeGarage[MAX_GARAGE_TYPE][PosZ]    = 10.8291;
	TypeGarage[MAX_GARAGE_TYPE][PosZZ]    = 360;

	TypeGarage[MAX_GARAGE_TYPE][PosXh]    = 2837.3527832031;
	TypeGarage[MAX_GARAGE_TYPE][PosYh]    = 2638.9331054688;
	TypeGarage[MAX_GARAGE_TYPE][PosZh]    = 10.836480140686;
	TypeGarage[MAX_GARAGE_TYPE][PosZZh]   = 180;

	TypeGarage[MAX_GARAGE_TYPE][PosXc]    = 2839.4033203125;
	TypeGarage[MAX_GARAGE_TYPE][PosYc]    = 2635.3623046875;
	TypeGarage[MAX_GARAGE_TYPE][PosZc]    = 10.636480331421;
	TypeGarage[MAX_GARAGE_TYPE][PosZZc]   = 180;

	TypeGarage[MAX_GARAGE_TYPE][Interior]   =  10;

	TypeGarage[MAX_GARAGE_TYPE][PickupId]	= CreatePickup	(1239, 	1, 	TypeGarage[MAX_GARAGE_TYPE][PosX], TypeGarage[MAX_GARAGE_TYPE][PosY], TypeGarage[MAX_GARAGE_TYPE][PosZ] - PosZP,	 	-1);
	TypeGarage[MAX_GARAGE_TYPE][PickupIdh]	= CreatePickup	(1239, 	1, 	TypeGarage[MAX_GARAGE_TYPE][PosXh], TypeGarage[MAX_GARAGE_TYPE][PosYh], TypeGarage[MAX_GARAGE_TYPE][PosZh],	 	-1);
	MAX_GARAGE_TYPE++;

	// 10
	TypeGarage[MAX_GARAGE_TYPE][PosX]    = 2846.4050;
	TypeGarage[MAX_GARAGE_TYPE][PosY]    = 2618.3450;
	TypeGarage[MAX_GARAGE_TYPE][PosZ]    = 10.8322;
	TypeGarage[MAX_GARAGE_TYPE][PosZZ]    = 0;

	TypeGarage[MAX_GARAGE_TYPE][PosXh]    = 2843.1896972656;
	TypeGarage[MAX_GARAGE_TYPE][PosYh]    = 2625.0754394531;
	TypeGarage[MAX_GARAGE_TYPE][PosZh]    = 10.832187652588;
	TypeGarage[MAX_GARAGE_TYPE][PosZZh]   = 270;

	TypeGarage[MAX_GARAGE_TYPE][PosXc]    = 2846.3708496094;
	TypeGarage[MAX_GARAGE_TYPE][PosYc]    = 2624.4382324219;
	TypeGarage[MAX_GARAGE_TYPE][PosZc]    = 10.632187843323;
	TypeGarage[MAX_GARAGE_TYPE][PosZZc]   = 180;

	TypeGarage[MAX_GARAGE_TYPE][Interior]   =  11;

	TypeGarage[MAX_GARAGE_TYPE][PickupId]	= CreatePickup	(1239, 	1, 	TypeGarage[MAX_GARAGE_TYPE][PosX], TypeGarage[MAX_GARAGE_TYPE][PosY], TypeGarage[MAX_GARAGE_TYPE][PosZ] - PosZP,	 	-1);
	TypeGarage[MAX_GARAGE_TYPE][PickupIdh]	= CreatePickup	(1239, 	1, 	TypeGarage[MAX_GARAGE_TYPE][PosXh], TypeGarage[MAX_GARAGE_TYPE][PosYh], TypeGarage[MAX_GARAGE_TYPE][PosZh],	 	-1);
	MAX_GARAGE_TYPE++;

	// 11
	TypeGarage[MAX_GARAGE_TYPE][PosX]    = 2807.9485;
	TypeGarage[MAX_GARAGE_TYPE][PosY]    = 2599.8291;
	TypeGarage[MAX_GARAGE_TYPE][PosZ]    = 10.9433;
	TypeGarage[MAX_GARAGE_TYPE][PosZZ]    = 0;

	TypeGarage[MAX_GARAGE_TYPE][PosXh]    = 2806.212890625;
	TypeGarage[MAX_GARAGE_TYPE][PosYh]    = 2607.0744628906;
	TypeGarage[MAX_GARAGE_TYPE][PosZh]    = 13.935888290405;
	TypeGarage[MAX_GARAGE_TYPE][PosZZh]   = 90;

	TypeGarage[MAX_GARAGE_TYPE][PosXc]    = 2807.5671386719;
	TypeGarage[MAX_GARAGE_TYPE][PosYc]    = 2602.951171875;
	TypeGarage[MAX_GARAGE_TYPE][PosZc]    = 10.73588848114;
	TypeGarage[MAX_GARAGE_TYPE][PosZZc]   = 180;

	TypeGarage[MAX_GARAGE_TYPE][Interior]   =  12;

	TypeGarage[MAX_GARAGE_TYPE][PickupId]	= CreatePickup	(1239, 	1, 	TypeGarage[MAX_GARAGE_TYPE][PosX], TypeGarage[MAX_GARAGE_TYPE][PosY], TypeGarage[MAX_GARAGE_TYPE][PosZ] - PosZP,	 	-1);
	TypeGarage[MAX_GARAGE_TYPE][PickupIdh]	= CreatePickup	(1239, 	1, 	TypeGarage[MAX_GARAGE_TYPE][PosXh], TypeGarage[MAX_GARAGE_TYPE][PosYh], TypeGarage[MAX_GARAGE_TYPE][PosZh],	 	-1);
	MAX_GARAGE_TYPE++;

	// 12
	TypeGarage[MAX_GARAGE_TYPE][PosX]    = 2771.7998;
	TypeGarage[MAX_GARAGE_TYPE][PosY]    = 2523.4099;
	TypeGarage[MAX_GARAGE_TYPE][PosZ]    = 10.9007;
	TypeGarage[MAX_GARAGE_TYPE][PosZZ]    = 360;

	TypeGarage[MAX_GARAGE_TYPE][PosXh]    = 2767.9108886719;
	TypeGarage[MAX_GARAGE_TYPE][PosYh]    = 2532.8200683594;
	TypeGarage[MAX_GARAGE_TYPE][PosZh]    = 10.893434524536;
	TypeGarage[MAX_GARAGE_TYPE][PosZZh]   = 270;

	TypeGarage[MAX_GARAGE_TYPE][PosXc]    = 2771.2622070313;
	TypeGarage[MAX_GARAGE_TYPE][PosYc]    = 2530.3293457031;
	TypeGarage[MAX_GARAGE_TYPE][PosZc]    = 10.693676948547;
	TypeGarage[MAX_GARAGE_TYPE][PosZZc]   = 180;

	TypeGarage[MAX_GARAGE_TYPE][Interior]   =  13;

	TypeGarage[MAX_GARAGE_TYPE][PickupId]	= CreatePickup	(1239, 	1, 	TypeGarage[MAX_GARAGE_TYPE][PosX], TypeGarage[MAX_GARAGE_TYPE][PosY], TypeGarage[MAX_GARAGE_TYPE][PosZ] - PosZP,	 	-1);
	TypeGarage[MAX_GARAGE_TYPE][PickupIdh]	= CreatePickup	(1239, 	1, 	TypeGarage[MAX_GARAGE_TYPE][PosXh], TypeGarage[MAX_GARAGE_TYPE][PosYh], TypeGarage[MAX_GARAGE_TYPE][PosZh],	 	-1);
	MAX_GARAGE_TYPE++;

	// 13
	TypeGarage[MAX_GARAGE_TYPE][PosX]    = 2762.2847;
	TypeGarage[MAX_GARAGE_TYPE][PosY]    = 2582.6541;
	TypeGarage[MAX_GARAGE_TYPE][PosZ]    = 10.8351;
	TypeGarage[MAX_GARAGE_TYPE][PosZZ]    = 180;

	TypeGarage[MAX_GARAGE_TYPE][PosXh]    = 2758.4755859375;
	TypeGarage[MAX_GARAGE_TYPE][PosYh]    = 2576.1965332031;
	TypeGarage[MAX_GARAGE_TYPE][PosZh]    = 10.835094451904;
	TypeGarage[MAX_GARAGE_TYPE][PosZZh]   = 270;

	TypeGarage[MAX_GARAGE_TYPE][PosXc]    = 2762.6628417969;
	TypeGarage[MAX_GARAGE_TYPE][PosYc]    = 2576.6296386719;
	TypeGarage[MAX_GARAGE_TYPE][PosZc]    = 10.635094642639;
	TypeGarage[MAX_GARAGE_TYPE][PosZZc]   = 0;

	TypeGarage[MAX_GARAGE_TYPE][Interior]   =  14;

	TypeGarage[MAX_GARAGE_TYPE][PickupId]	= CreatePickup	(1239, 	1, 	TypeGarage[MAX_GARAGE_TYPE][PosX], TypeGarage[MAX_GARAGE_TYPE][PosY], TypeGarage[MAX_GARAGE_TYPE][PosZ] - PosZP,	 	-1);
	TypeGarage[MAX_GARAGE_TYPE][PickupIdh]	= CreatePickup	(1239, 	1, 	TypeGarage[MAX_GARAGE_TYPE][PosXh], TypeGarage[MAX_GARAGE_TYPE][PosYh], TypeGarage[MAX_GARAGE_TYPE][PosZh],	 	-1);
	MAX_GARAGE_TYPE++;

	// 14
	TypeGarage[MAX_GARAGE_TYPE][PosX]    = 2770.2546;
	TypeGarage[MAX_GARAGE_TYPE][PosY]    = 2567.5901;
	TypeGarage[MAX_GARAGE_TYPE][PosZ]    = 10.8380;
	TypeGarage[MAX_GARAGE_TYPE][PosZZ]    = 180;

	TypeGarage[MAX_GARAGE_TYPE][PosXh]    = 2777.4428710938;
	TypeGarage[MAX_GARAGE_TYPE][PosYh]    = 2566.0651855469;
	TypeGarage[MAX_GARAGE_TYPE][PosZh]    = 10.837955474854;
	TypeGarage[MAX_GARAGE_TYPE][PosZZh]   = 90;

	TypeGarage[MAX_GARAGE_TYPE][PosXc]    = 2770.2780761719;
	TypeGarage[MAX_GARAGE_TYPE][PosYc]    = 2563.0756835938;
	TypeGarage[MAX_GARAGE_TYPE][PosZc]    = 10.637955665588;
	TypeGarage[MAX_GARAGE_TYPE][PosZZc]   = 0;

	TypeGarage[MAX_GARAGE_TYPE][Interior]   =  15;

	TypeGarage[MAX_GARAGE_TYPE][PickupId]	= CreatePickup	(1239, 	1, 	TypeGarage[MAX_GARAGE_TYPE][PosX], TypeGarage[MAX_GARAGE_TYPE][PosY], TypeGarage[MAX_GARAGE_TYPE][PosZ] - PosZP,	 	-1);
	TypeGarage[MAX_GARAGE_TYPE][PickupIdh]	= CreatePickup	(1239, 	1, 	TypeGarage[MAX_GARAGE_TYPE][PosXh], TypeGarage[MAX_GARAGE_TYPE][PosYh], TypeGarage[MAX_GARAGE_TYPE][PosZh],	 	-1);
	MAX_GARAGE_TYPE++;

	// 15
	TypeGarage[MAX_GARAGE_TYPE][PosX]    = 2755.8137;
	TypeGarage[MAX_GARAGE_TYPE][PosY]    = 2562.5759;
	TypeGarage[MAX_GARAGE_TYPE][PosZ]    = 10.8329;
	TypeGarage[MAX_GARAGE_TYPE][PosZZ]    = 90;

	TypeGarage[MAX_GARAGE_TYPE][PosXh]    = 2750.3881835938;
	TypeGarage[MAX_GARAGE_TYPE][PosYh]    = 2557.6606445313;
	TypeGarage[MAX_GARAGE_TYPE][PosZh]    = 10.832948684692;
	TypeGarage[MAX_GARAGE_TYPE][PosZZh]   = 0;

	TypeGarage[MAX_GARAGE_TYPE][PosXc]    = 2750.2775878906;
	TypeGarage[MAX_GARAGE_TYPE][PosYc]    = 2562.1689453125;
	TypeGarage[MAX_GARAGE_TYPE][PosZc]    = 10.632948875427;
	TypeGarage[MAX_GARAGE_TYPE][PosZZc]   = 270;

	TypeGarage[MAX_GARAGE_TYPE][Interior]   =  16;

	TypeGarage[MAX_GARAGE_TYPE][PickupId]	= CreatePickup	(1239, 	1, 	TypeGarage[MAX_GARAGE_TYPE][PosX], TypeGarage[MAX_GARAGE_TYPE][PosY], TypeGarage[MAX_GARAGE_TYPE][PosZ] - PosZP,	 	-1);
	TypeGarage[MAX_GARAGE_TYPE][PickupIdh]	= CreatePickup	(1239, 	1, 	TypeGarage[MAX_GARAGE_TYPE][PosXh], TypeGarage[MAX_GARAGE_TYPE][PosYh], TypeGarage[MAX_GARAGE_TYPE][PosZh],	 	-1);
	MAX_GARAGE_TYPE++;

	// 16
	TypeGarage[MAX_GARAGE_TYPE][PosX]    = 2755.1431;
	TypeGarage[MAX_GARAGE_TYPE][PosY]    = 2512.7124;
	TypeGarage[MAX_GARAGE_TYPE][PosZ]    = 11.0956;
	TypeGarage[MAX_GARAGE_TYPE][PosZZ]    = 180;

	TypeGarage[MAX_GARAGE_TYPE][PosXh]    = 2753.5578613281;
	TypeGarage[MAX_GARAGE_TYPE][PosYh]    = 2503.6491699219;
	TypeGarage[MAX_GARAGE_TYPE][PosZh]    = 11.095604896545;
	TypeGarage[MAX_GARAGE_TYPE][PosZZh]   = 0;

	TypeGarage[MAX_GARAGE_TYPE][PosXc]    = 2755.2993164063;
	TypeGarage[MAX_GARAGE_TYPE][PosYc]    = 2507.4792480469;
	TypeGarage[MAX_GARAGE_TYPE][PosZc]    = 10.902544021606;
	TypeGarage[MAX_GARAGE_TYPE][PosZZc]   = 0;

	TypeGarage[MAX_GARAGE_TYPE][Interior]   = 17;

	TypeGarage[MAX_GARAGE_TYPE][PickupId]	= CreatePickup	(1239, 	1, 	TypeGarage[MAX_GARAGE_TYPE][PosX], TypeGarage[MAX_GARAGE_TYPE][PosY], TypeGarage[MAX_GARAGE_TYPE][PosZ] - PosZP,	 	-1);
	TypeGarage[MAX_GARAGE_TYPE][PickupIdh]	= CreatePickup	(1239, 	1, 	TypeGarage[MAX_GARAGE_TYPE][PosXh], TypeGarage[MAX_GARAGE_TYPE][PosYh], TypeGarage[MAX_GARAGE_TYPE][PosZh],	 	-1);
	MAX_GARAGE_TYPE++;

	// 17
	TypeGarage[MAX_GARAGE_TYPE][PosX]    = 2743.9014;
	TypeGarage[MAX_GARAGE_TYPE][PosY]    = 2529.9314;
	TypeGarage[MAX_GARAGE_TYPE][PosZ]    = 10.8694;
	TypeGarage[MAX_GARAGE_TYPE][PosZZ]    = 180;

	TypeGarage[MAX_GARAGE_TYPE][PosXh]    = 2740.2314453125;
	TypeGarage[MAX_GARAGE_TYPE][PosYh]    = 2524.5197753906;
	TypeGarage[MAX_GARAGE_TYPE][PosZh]    = 10.862500190735;
	TypeGarage[MAX_GARAGE_TYPE][PosZZh]   = 270;

	TypeGarage[MAX_GARAGE_TYPE][PosXc]    = 2744.126953125;
	TypeGarage[MAX_GARAGE_TYPE][PosYc]    = 2525.2817382813;
	TypeGarage[MAX_GARAGE_TYPE][PosZc]    = 10.66250038147;
	TypeGarage[MAX_GARAGE_TYPE][PosZZc]   = 0;

	TypeGarage[MAX_GARAGE_TYPE][Interior]   = 18;

	TypeGarage[MAX_GARAGE_TYPE][PickupId]	= CreatePickup	(1239, 	1, 	TypeGarage[MAX_GARAGE_TYPE][PosX], TypeGarage[MAX_GARAGE_TYPE][PosY], TypeGarage[MAX_GARAGE_TYPE][PosZ] - PosZP,	 	-1);
	TypeGarage[MAX_GARAGE_TYPE][PickupIdh]	= CreatePickup	(1239, 	1, 	TypeGarage[MAX_GARAGE_TYPE][PosXh], TypeGarage[MAX_GARAGE_TYPE][PosYh], TypeGarage[MAX_GARAGE_TYPE][PosZh],	 	-1);
	MAX_GARAGE_TYPE++;

	// 18
	TypeGarage[MAX_GARAGE_TYPE][PosX]    = 2768.0227;
	TypeGarage[MAX_GARAGE_TYPE][PosY]    = 2446.9446;
	TypeGarage[MAX_GARAGE_TYPE][PosZ]    = 10.9000;
	TypeGarage[MAX_GARAGE_TYPE][PosZZ]    = 270;

	TypeGarage[MAX_GARAGE_TYPE][PosXh]    = 2773.4025878906;
	TypeGarage[MAX_GARAGE_TYPE][PosYh]    = 2442.4389648438;
	TypeGarage[MAX_GARAGE_TYPE][PosZh]    = 10.89999961853;
	TypeGarage[MAX_GARAGE_TYPE][PosZZh]   = 0;

	TypeGarage[MAX_GARAGE_TYPE][PosXc]    = 2773.2446289063;
	TypeGarage[MAX_GARAGE_TYPE][PosYc]    = 2447.0495605469;
	TypeGarage[MAX_GARAGE_TYPE][PosZc]    = 10.699999809265;
	TypeGarage[MAX_GARAGE_TYPE][PosZZc]   = 90;

	TypeGarage[MAX_GARAGE_TYPE][Interior]   = 19;

	TypeGarage[MAX_GARAGE_TYPE][PickupId]	= CreatePickup	(1239, 	1, 	TypeGarage[MAX_GARAGE_TYPE][PosX], TypeGarage[MAX_GARAGE_TYPE][PosY], TypeGarage[MAX_GARAGE_TYPE][PosZ] - PosZP,	 	-1);
	TypeGarage[MAX_GARAGE_TYPE][PickupIdh]	= CreatePickup	(1239, 	1, 	TypeGarage[MAX_GARAGE_TYPE][PosXh], TypeGarage[MAX_GARAGE_TYPE][PosYh], TypeGarage[MAX_GARAGE_TYPE][PosZh],	 	-1);
	MAX_GARAGE_TYPE++;

	// 19
	TypeGarage[MAX_GARAGE_TYPE][PosX]    = 2788.6536;
	TypeGarage[MAX_GARAGE_TYPE][PosY]    = 2421.3318;
	TypeGarage[MAX_GARAGE_TYPE][PosZ]    = 10.8548;
	TypeGarage[MAX_GARAGE_TYPE][PosZZ]    = 0;

	TypeGarage[MAX_GARAGE_TYPE][PosXh]    = 2784.8806152344;
	TypeGarage[MAX_GARAGE_TYPE][PosYh]    = 2424.8825683594;
	TypeGarage[MAX_GARAGE_TYPE][PosZh]    = 10.862500190735;
	TypeGarage[MAX_GARAGE_TYPE][PosZZh]   = 270;

	TypeGarage[MAX_GARAGE_TYPE][PosXc]    = 2788.6831054688;
	TypeGarage[MAX_GARAGE_TYPE][PosYc]    = 2427.4235839844;
	TypeGarage[MAX_GARAGE_TYPE][PosZc]    = 10.66250038147;
	TypeGarage[MAX_GARAGE_TYPE][PosZZc]   = 180;

	TypeGarage[MAX_GARAGE_TYPE][Interior]   = 1;

	TypeGarage[MAX_GARAGE_TYPE][PickupId]	= CreatePickup	(1239, 	1, 	TypeGarage[MAX_GARAGE_TYPE][PosX], TypeGarage[MAX_GARAGE_TYPE][PosY], TypeGarage[MAX_GARAGE_TYPE][PosZ] - PosZP,	 	-1);
	TypeGarage[MAX_GARAGE_TYPE][PickupIdh]	= CreatePickup	(1239, 	1, 	TypeGarage[MAX_GARAGE_TYPE][PosXh], TypeGarage[MAX_GARAGE_TYPE][PosYh], TypeGarage[MAX_GARAGE_TYPE][PosZh],	 	-1);

}
public LinkVehicleToInteriorEx(vehicleid, interiorid)
{
    LinkVehicleToInterior(vehicleid, interiorid);
	DataCars[vehicleid][InteriorLast] = interiorid;
}
public SetVehicleVirtualWorldEx(vehicleid, worldid)
{
    SetVehicleVirtualWorld(vehicleid, worldid);
	DataCars[vehicleid][WorldLast] = worldid;
}
public IsPlayerNearGarage(vehicleid, playerid)
{
	new MyWorld = GetPlayerVirtualWorld(playerid);
	for (new h = 1; h <= MAX_HOUSE; h++)
	{
		for ( new i = 0; i < MAX_GARAGE_FOR_HOUSE; i++ )
		{
	        if ( Garages[h][i][PickupidIn] )
			{
				if ( IsPlayerInRangeOfPoint(playerid, 3.0,
								 Garages[h][i][XgOut],
								 Garages[h][i][YgOut],
								 Garages[h][i][ZgOut]) ||
				 IsPlayerInRangeOfPoint(playerid, 3.0,
								 TypeGarage[Garages[h][i][TypeGarageE]][PosXc],
								 TypeGarage[Garages[h][i][TypeGarageE]][PosYc],
								 TypeGarage[Garages[h][i][TypeGarageE]][PosZc])
								 &&
								 MyWorld == Garages[h][i][WorldG] &&
								 PlayersData[playerid][IsPlayerInHouse] &&
								 PlayersData[playerid][IsPlayerInGarage] >= 0 )
				 {
		            if ( !Garages[h][i][LockOut] || PlayersDataOnline[playerid][AdminOn] )
		            {
						if ( IsPlayerInRangeOfPoint(playerid, 3.0,
										 TypeGarage[Garages[h][i][TypeGarageE]][PosXc],
										 TypeGarage[Garages[h][i][TypeGarageE]][PosYc],
										 TypeGarage[Garages[h][i][TypeGarageE]][PosZc])
										 &&
										 MyWorld == Garages[h][i][WorldG] &&
										 PlayersData[playerid][IsPlayerInHouse] &&
										 PlayersData[playerid][IsPlayerInGarage] >= 0 )
						{
							for (new s = 0; s < MAX_PLAYERS;s++)
							{
							    if ( IsPlayerConnected(s) && IsPlayerInVehicle(s, vehicleid) )
							    {
						        	SetPlayerVirtualWorldEx(s, 0);
						        	SetPlayerInteriorEx(s, 0);
						            PlayersData[s][IsPlayerInHouse]  =  0;
				                    PlayersData[s][IsPlayerInGarage] =  -1;
				                    OnPlayerExitHouse(s);
							    }
							}
				        	SetVehicleVirtualWorldEx(vehicleid, 0);
				        	LinkVehicleToInteriorEx(vehicleid, 0);
							SetVehiclePos(vehicleid, Garages[h][i][XgOut], Garages[h][i][YgOut],Garages[h][i][ZgOut]);
							SetVehicleZAngle(vehicleid, Garages[h][i][ZZgOut]);
			        	}
			        	else if ( MyWorld == 0 )
			        	{
							for (new s = 0; s < MAX_PLAYERS;s++)
							{
							    if ( IsPlayerConnected(s) && IsPlayerInVehicle(s, vehicleid) )
							    {
						        	SetPlayerVirtualWorldEx(s, Garages[h][i][WorldG]);
						        	SetPlayerInteriorEx(s, TypeGarage[Garages[h][i][TypeGarageE]][Interior]);
				            		PlayersData[s][IsPlayerInHouse]  =  h;
		                    		PlayersData[s][IsPlayerInGarage] =  i;
									OnPlayerEnterInHouse(s);
							    }
							}
				        	SetVehicleVirtualWorldEx(vehicleid, Garages[h][i][WorldG]);
				        	LinkVehicleToInteriorEx(vehicleid, TypeGarage[Garages[h][i][TypeGarageE]][Interior]);
							SetVehiclePos(vehicleid, TypeGarage[Garages[h][i][TypeGarageE]][PosXc], TypeGarage[Garages[h][i][TypeGarageE]][PosYc], TypeGarage[Garages[h][i][TypeGarageE]][PosZc]);
							SetVehicleZAngle(vehicleid, TypeGarage[Garages[h][i][TypeGarageE]][PosZZc]);
			        	}
						return true;
		        	}
		        	else
		        	{
						GameTextForPlayer(playerid, "~W~Garage ~R~Cerrado!", 1000, 6);
						break;
					}
				}
			}
		}
	}
	return false;
}
public IsPlayerNearGarageLC(playerid, &housesave, &locksave)
{
	new MyWorld = GetPlayerVirtualWorld(playerid);
	for (new h = 1; h <= MAX_HOUSE; h++)
	{
		for ( new i = 0; i < MAX_GARAGE_FOR_HOUSE; i++ )
		{
	        if ( Garages[h][i][PickupidIn] )
			{
				if ( IsPlayerInRangeOfPoint(playerid, 3.0,
								 Garages[h][i][XgOut],
								 Garages[h][i][YgOut],
								 Garages[h][i][ZgOut]) ||
				 IsPlayerInRangeOfPoint(playerid, 3.0,
								 TypeGarage[Garages[h][i][TypeGarageE]][PosXc],
								 TypeGarage[Garages[h][i][TypeGarageE]][PosYc],
								 TypeGarage[Garages[h][i][TypeGarageE]][PosZc])
								 &&
								 MyWorld == Garages[h][i][WorldG] &&
								 PlayersData[playerid][IsPlayerInHouse] &&
								 PlayersData[playerid][IsPlayerInGarage] >= 0 )
				 {
					if ( IsPlayerInRangeOfPoint(playerid, 3.0,
									 TypeGarage[Garages[h][i][TypeGarageE]][PosXc],
									 TypeGarage[Garages[h][i][TypeGarageE]][PosYc],
									 TypeGarage[Garages[h][i][TypeGarageE]][PosZc])
									 &&
									 MyWorld == Garages[h][i][WorldG] &&
									 PlayersData[playerid][IsPlayerInHouse] &&
									 PlayersData[playerid][IsPlayerInGarage] >= 0 )
					{
					    locksave = true;
					    housesave = h;
						return i;
		        	}
		        	else if ( MyWorld == 0 )
		        	{
		        	    locksave = true;
  					    housesave = h;
						return i;
		        	}
		        	return -1;
				}
			}
		}
	}
	return -1;
}
public IsPlayerNearGarageEx(vehicleid, playerid)
{
	new MyWorld = GetPlayerVirtualWorld(playerid);
	for (new i = 0; i <= MAX_GARAGES_EX; i++)
	{
		if ( IsPlayerInRangeOfPoint(playerid, 3.0,
						 GaragesEx[i][PosXOne],
						 GaragesEx[i][PosYOne],
						 GaragesEx[i][PosZOne]) && MyWorld == WORLD_DEFAULT_INTERIOR ||
		 IsPlayerInRangeOfPoint(playerid, 3.0,
						 GaragesEx[i][PosXTwo],
						 GaragesEx[i][PosYTwo],
						 GaragesEx[i][PosZTwo]) )
		 {
            if ( !GaragesEx[i][Lock] || PlayersDataOnline[playerid][AdminOn] )
            {
				if ( IsPlayerInRangeOfPoint(playerid, 3.0,
						 GaragesEx[i][PosXOne],
						 GaragesEx[i][PosYOne],
						 GaragesEx[i][PosZOne])  )
				{
		        	SetVehicleVirtualWorldEx(vehicleid, 0);
		        	LinkVehicleToInteriorEx(vehicleid, 0);
					SetVehiclePos(vehicleid, GaragesEx[i][PosXTwo], GaragesEx[i][PosYTwo],GaragesEx[i][PosZTwo]);
					SetVehicleZAngle(vehicleid, GaragesEx[i][PosZZTwo]);
					for (new s = 0; s < MAX_PLAYERS;s++)
					{
					    if ( IsPlayerConnected(s) && IsPlayerInVehicle(s, vehicleid) )
					    {
				        	SetPlayerVirtualWorldEx(s, 0);
				        	SetPlayerInteriorEx(s, 0);
					    }
					}
	        	}
	        	else if ( MyWorld == 0 )
	        	{
		        	SetVehicleVirtualWorldEx(vehicleid, GaragesEx[i][World]);
		        	LinkVehicleToInteriorEx(vehicleid, GaragesEx[i][Interior]);
					SetVehiclePos(vehicleid, GaragesEx[i][PosXOne], GaragesEx[i][PosYOne], GaragesEx[i][PosZOne]);
					SetVehicleZAngle(vehicleid, GaragesEx[i][PosZZOne]);

					for (new s = 0; s < MAX_PLAYERS;s++)
					{
					    if ( IsPlayerConnected(s) && IsPlayerInVehicle(s, vehicleid) )
					    {
				        	SetPlayerVirtualWorldEx(s, GaragesEx[i][World]);
				        	SetPlayerInteriorEx(s, GaragesEx[i][Interior]);
					    }
					}
	        	}
				return true;
        	}
        	else
        	{
				GameTextForPlayer(playerid, "~W~Garage ~R~Cerrado!", 1000, 6);
				break;
			}
		}
	}
	return false;
}
public IsPlayerInGarageEx(playerid)
{
	new MyWorld = GetPlayerVirtualWorld(playerid);
	for (new i = 0; i <= MAX_GARAGES_EX; i++)
	{
		if (GaragesEx[i][PickupIDOneP] == PlayersDataOnline[playerid][InPickup] ||
			GaragesEx[i][PickupIDTwoP] == PlayersDataOnline[playerid][InPickup] ||

			IsPlayerInRangeOfPoint(playerid, 3.0,
						 GaragesEx[i][PosXOne],
						 GaragesEx[i][PosYOne],
						 GaragesEx[i][PosZOne]) && MyWorld == WORLD_DEFAULT_INTERIOR ||

		 IsPlayerInRangeOfPoint(playerid, 3.0,
						 GaragesEx[i][PosXTwo],
						 GaragesEx[i][PosYTwo],
						 GaragesEx[i][PosZTwo]) )
		 {
		    return i;
		}
	}
	return -1;
}
public LoadGarages()
{
//	printf("LoadGaragesExLock");
	for (new h = 1; h <= MAX_HOUSE; h++)
	{
		for ( new i = 0; i < MAX_GARAGE_FOR_HOUSE; i++ )
		{
	        if ( Garages[h][i][WorldG] )
	        {
		        Garages[h][i][PickupidOut] = CreatePickup	(1239, 	1, 	Garages[h][i][Xg], Garages[h][i][Yg], Garages[h][i][Zg],	 	-1);
		        if ( !MAX_GARAGE_PICKUP )
				{
					MIN_GARAGE_PICKUP = Garages[h][i][PickupidOut];
				}
	            Garages[h][i][PickupidIn]  = CreatePickup	(1239, 	1, 	Garages[h][i][XgIn], Garages[h][i][YgIn], Garages[h][i][ZgIn], h);
	            MAX_GARAGE_PICKUP = Garages[h][i][PickupidIn];
	            MAX_GARAGES++;
			}
		}
	}
}
public ExistGarageForHouse(houseid, garageid)
{
    if ( Garages[houseid][garageid][WorldG] )
	{
	    return true;
	}
	else
	{
	    return false;
	}
}
public CheckAsignados(playerid)
{
	if ( PlayersData[playerid][Faccion] != CIVIL )
	{
		for (new i = 0; i < 3;i++)
		{
			if ( PlayersData[playerid][Asignados][i] && !IsVehicleMyFaccion(playerid, PlayersData[playerid][Asignados][i])  )
			{
				PlayersData[playerid][Asignados][i] = false;
			}
		}
	}
	else
	{
		PlayersData[playerid][Asignados][0] = false;
		PlayersData[playerid][Asignados][1] = false;
		PlayersData[playerid][Asignados][2] = false;
	}
}
public IsMyCarAsignados(playerid, vehicleid)
{
	for (new i = 0; i < 3;i++)
	{
		if ( PlayersData[playerid][Asignados][i] == vehicleid  )
		{
			return true;
		}
	}
	return false;
}
public AddAsignados(playerid, vehicleid)
{
	for (new i = 0; i < 3;i++)
	{
	    if ( PlayersData[playerid][Asignados][i] == vehicleid )
	    {
	        return 2;
		}
		if ( !PlayersData[playerid][Asignados][i]  )
		{
		    PlayersData[playerid][Asignados][i] = vehicleid;
			return true;
		}
	}
	return false;
}
public RemoveAsignados(playerid, asignarid)
{
	if ( PlayersData[playerid][Asignados][asignarid] )
	{
		new TempvehicleidA = PlayersData[playerid][Asignados][asignarid];
	    PlayersData[playerid][Asignados][asignarid] = false;
		return TempvehicleidA;
	}
	return false;
}
public ShowAsignados(playerid, playeridshow)
{
	new MsgAsignadosShow[MAX_TEXT_CHAT];
	SendClientMessage(playeridshow, COLOR_MESSAGES[3], "............:::::Vehículos Autorizados:::::............");
	for (new i = 0; i < 3; i++)
	{
	    format(MsgAsignadosShow, sizeof(MsgAsignadosShow), "Vehículo %i: %s", i + 1, DataCars[PlayersData[playerid][Asignados][i]][MatriculaString]);
	    SendClientMessage(playeridshow, COLOR_MESSAGES[3], MsgAsignadosShow);
	}
}
public ShowHouseFriends(playerid, houseid)
{
	new ConteoAgenda = -1;
	new HouseFriendsDialog[700];
    new TempConvert[150];
	for (new i = 0; i < MAX_HOUSE_FRIENDS; i++)
	{
		if ( ConteoAgenda != -1 )
		{
		    if ( strlen(HouseFriends[houseid][i][Name]) > 2 )
		    {
		    	format(TempConvert, sizeof(TempConvert), "\r\n{00F50A}Llaves %i: {F5FF00}%s", i + 1, HouseFriends[houseid][i][Name]);
	    	}
	    	else
	    	{
		    	format(TempConvert, sizeof(TempConvert), "\r\n{00F50A}Llaves %i: {F50000}Nadie", i + 1);
			}
    	}
		else
		{
		    if ( strlen(HouseFriends[houseid][i][Name]) > 2 )
		    {
		    	format(TempConvert, sizeof(TempConvert), "{00F50A}Llaves %i: {F5FF00}%s", i + 1,  HouseFriends[houseid][i][Name]);
	    	}
	    	else
	    	{
		    	format(TempConvert, sizeof(TempConvert), "{00F50A}Llaves %i: {F50000}Nadie", i + 1);
			}
		}
        strcat(HouseFriendsDialog, TempConvert, sizeof(HouseFriendsDialog));
        ConteoAgenda++;
	}
	ShowPlayerDialogEx(playerid,70,DIALOG_STYLE_LIST,"{00A5FF}Casa - Llaves de los Amigos", HouseFriendsDialog, "Quitar", "Salir");
    PlayersDataOnline[playerid][SaveAfterAgenda][0] = houseid;
}
public IsPlayerInHouseFriend(playerid, houseid)
{
	for ( new i = 0;i < MAX_HOUSE_FRIENDS; i++)
	{
		if ( strfind(HouseFriends[houseid][i][Name], PlayersDataOnline[playerid][NameOnline], false) == 0 && strlen(HouseFriends[houseid][i][Name]) == strlen(PlayersDataOnline[playerid][NameOnline]) )
		{
		    return i;
		}
	}
	return -1;
}
public RemoveAllHouseFriend(houseid)
{
	for ( new i = 0;i < MAX_HOUSE_FRIENDS; i++)
	{
		RemovePlayerHouseFriend(houseid, i);
	}
}
public RemovePlayerHouseFriend(houseid, housefriendid)
{
	if ( strlen(HouseFriends[houseid][housefriendid][Name]) > 2 )
	{
	    new LastFriend[MAX_PLAYER_NAME];
		format(LastFriend, MAX_PLAYER_NAME, "%s", HouseFriends[houseid][housefriendid][Name]);
		format(HouseFriends[houseid][housefriendid][Name], MAX_PLAYER_NAME, "No");
		new FriendID = IsPlayerConnectedEx(LastFriend);
		if ( FriendID != -1 )
		{
		    UpdateSpawnPlayer(FriendID);
		}
		return true;
	}
	else
	{
	    return false;
	}
}
public AddPlayerHouseFriend(playerid, houseid)
{
	for ( new i = 0;i < MAX_HOUSE_FRIENDS; i++)
	{
	    if ( strlen(HouseFriends[houseid][i][Name]) <= 2 )
	    {
			format(HouseFriends[houseid][i][Name], MAX_PLAYER_NAME, "%s", PlayersDataOnline[playerid][NameOnline]);
	        return true;
	    }
	}
	return false;
}
public LoadTypeArticulosR()
{
	format(Articulos[A_NADA][NameA], MAX_PLAYER_NAME, "Nada");
	Articulos[A_NADA][Vida] = 0.0;

	format(Articulos[A_CERVEZA][NameA], MAX_PLAYER_NAME, "Cerveza");
	Articulos[A_CERVEZA][Vida] = 20.0;

	format(Articulos[A_VODKA][NameA], MAX_PLAYER_NAME, "Vodka");
	Articulos[A_VODKA][Vida] = 15.0;

	format(Articulos[A_REFRESCO][NameA], MAX_PLAYER_NAME, "Refresco");
	Articulos[A_REFRESCO][Vida] = 10.0;

	format(Articulos[A_POLLO][NameA], MAX_PLAYER_NAME, "Pollo crudo");
	Articulos[A_POLLO][Vida] = 0.0;

	format(Articulos[A_POLLO_C][NameA], MAX_PLAYER_NAME, "Pollo cocinado");
	Articulos[A_POLLO_C][Vida] = 30.0;

	format(Articulos[A_PAPAS][NameA], MAX_PLAYER_NAME, "Papas");
	Articulos[A_PAPAS][Vida] = 0.0;

	format(Articulos[A_PAPAS_C][NameA], MAX_PLAYER_NAME, "Papas cocinadas");
	Articulos[A_PAPAS_C][Vida] = 15.0;

	format(Articulos[A_ARROZ][NameA], MAX_PLAYER_NAME, "Arroz");
	Articulos[A_ARROZ][Vida] = 0.0;

	format(Articulos[A_ARROZ_C][NameA], MAX_PLAYER_NAME, "Arroz Cocinado");
	Articulos[A_ARROZ_C][Vida] = 35.0;
}
public AddArticuloBolsa(playerid, articuloid, cantidad)
{
	new AritcleEmpty = IsArticuloInBolsa(playerid, articuloid);
	if ( AritcleEmpty == -1 )
	{
		for(new i = 0; i<4; i++)
		{
		    if (!PlayersData[playerid][Bolsa][i])
		    {
	 			PlayersData[playerid][Bolsa][i] = articuloid;
			    PlayersData[playerid][BolsaC][i] += cantidad;
				return true;
			}
		}
	}
	else
	{
        if ( IsNotFullBolsa(playerid, AritcleEmpty) )
        {
		    PlayersData[playerid][Bolsa][AritcleEmpty] = articuloid;
		    PlayersData[playerid][BolsaC][AritcleEmpty] += cantidad;
		    return true;
	    }
	    else
	    {
	        return 2;
		}
	}
	return false;
}
public RemoveArticuloBolsa(playerid, bolsaid)
{
	PlayersData[playerid][Bolsa][bolsaid] = false;
	PlayersData[playerid][BolsaC][bolsaid] = 0;
}
public IsArticuloInBolsa(playerid, articuloid)
{
	for(new i = 0; i<4; i++)
	{
	    if (PlayersData[playerid][Bolsa][i] == articuloid)
	    {
			return i;
		}
	}
	return -1;
}
public CleanArticulosBolsa(playerid)
{
	for(new i = 0; i<4; i++)
	{
		RemoveArticuloBolsa(playerid, i);
	}
	return false;
}
public IsNotFullBolsa(playerid, bolsaid)
{
	if ( PlayersData[playerid][BolsaC][bolsaid] < 16 )
	{
		return true;
	}
	else
	{
	    return false;
	}
}
public GiveArticlePlayerToPlayer(playerid, playeridtogive, bolsaid)
{
	if ( PlayersData[playerid][HaveBolsa] )
	{
		if ( PlayersData[playeridtogive][HaveBolsa] )
		{
			if ( bolsaid > 0 && bolsaid  < 5 )
   			{
			    bolsaid--;
			    if ( PlayersData[playerid][Bolsa][bolsaid] )
			    {
				    switch (AddArticuloBolsa(playeridtogive, PlayersData[playerid][Bolsa][bolsaid], PlayersData[playerid][BolsaC][bolsaid]))
				    {
				        case 0:
				        {
							SendInfoMessage(playerid, 0, "1236", "Al jugador que desea darle un artículo, tiene la bolsa llena!");
						}
						case 1:
						{
							new MsgGiveArticle[MAX_TEXT_CHAT];
							new MsgGiveArticleME[MAX_TEXT_CHAT];
							new MsgGiveArticleYOU[MAX_TEXT_CHAT];
					        format(MsgGiveArticle, sizeof(MsgGiveArticle), "le da %s a %s", Articulos[PlayersData[playerid][Bolsa][bolsaid]][NameA], PlayersDataOnline[playeridtogive][NameOnlineFix]);
					        format(MsgGiveArticleME, sizeof(MsgGiveArticleME), "Le has dado %i %s a %s.", PlayersData[playerid][BolsaC][bolsaid], Articulos[PlayersData[playerid][Bolsa][bolsaid]][NameA], PlayersDataOnline[playeridtogive][NameOnlineFix]);
					        format(MsgGiveArticleYOU, sizeof(MsgGiveArticleYOU), "%s te ha dado %i %s", PlayersDataOnline[playerid][NameOnlineFix], PlayersData[playerid][BolsaC][bolsaid], Articulos[PlayersData[playerid][Bolsa][bolsaid]][NameA]);
					        Acciones(playerid, 8, MsgGiveArticle);
					        SendInfoMessage(playerid, 2, "0", MsgGiveArticleME);
					        SendInfoMessage(playeridtogive, 2, "0", MsgGiveArticleYOU);
					        RemoveArticuloBolsa(playerid, bolsaid);
						}
						case 2:
						{
		       				SendInfoMessage(playerid, 0, "1245", "Al jugador que le deseas dar este artículo ya no puede llevar más de esos en su bolsa");
						}
					}
				}
				else
				{
					SendInfoMessage(playerid, 0, "1237", "No tienes nada en esa parte de la bolsa!");
				}
			}
			else
			{
				SendInfoMessage(playerid, 0, "1242", "El número de Slot de bolsa debe estar comprendido entre 1 y 4");
			}
		}
		else
		{
			SendInfoMessage(playerid, 0, "1238", "Al jugador que desea darle un artículo no tiene bolsa");
		}
	}
	else
	{
		SendInfoMessage(playerid, 0, "1239", "Usted no tiene bolsa!");
	}
}
public DropArticlePlayerToPlayer(playerid, bolsaid)
{
	if ( PlayersData[playerid][HaveBolsa] )
	{
		if ( bolsaid > 0 && bolsaid  < 5 )
		{
		    bolsaid--;
		    if ( PlayersData[playerid][Bolsa][bolsaid] )
		    {
				new MsgGiveArticle[MAX_TEXT_CHAT];
				new MsgGiveArticleME[MAX_TEXT_CHAT];
		        format(MsgGiveArticle, sizeof(MsgGiveArticle), "ha tirado %s al suelo", Articulos[PlayersData[playerid][Bolsa][bolsaid]][NameA]);
		        format(MsgGiveArticleME, sizeof(MsgGiveArticleME), "Tiraste %i %s al suelo.", PlayersData[playerid][BolsaC][bolsaid], Articulos[PlayersData[playerid][Bolsa][bolsaid]][NameA]);
		        Acciones(playerid, 8, MsgGiveArticle);
		        SendInfoMessage(playerid, 2, "0", MsgGiveArticleME);
		        RemoveArticuloBolsa(playerid, bolsaid);
			}
			else
			{
				SendInfoMessage(playerid, 0, "1240", "No tienes nada en esa parte de la bolsa!");
			}
		}
		else
		{
			SendInfoMessage(playerid, 0, "1243", "El número de Slot de bolsa debe estar comprendido entre 1 y 4");
		}
	}
	else
	{
		SendInfoMessage(playerid, 0, "1241", "Usted no tiene bolsa!");
	}
}
public AddArticleRefrigeradorCocinar(playerid, houseid, lastrefrigeradorid, articleid)
{
	for(new i = 0; i<MAX_REFRIGERADOR_SLOTS_COUNT; i++)
	{
	    if (!Refrigerador[houseid][Articulo][i])
	    {
	        Refrigerador[houseid][Articulo][i] = articleid;
	        Refrigerador[houseid][Cantidad][i] += 1;
	        Refrigerador[houseid][Cantidad][lastrefrigeradorid]--;
	        if ( !Refrigerador[houseid][Cantidad][lastrefrigeradorid] )
	        {
	            Refrigerador[houseid][Articulo][lastrefrigeradorid] = false;
			}
			return true;
		}
	}
	return false;
}
public AddArticleRefrigeradorFun(playerid, houseid, bolsaid)
{
	if ( PlayersData[playerid][HaveBolsa] )
	{
		if ( bolsaid > 0 && bolsaid  < 5 )
		{
		    bolsaid--;
			if ( PlayersData[playerid][Bolsa][bolsaid] )
			{
				for(new i = 0; i<MAX_REFRIGERADOR_SLOTS_COUNT; i++)
				{
				    if (!Refrigerador[houseid][Articulo][i])
				    {
						new MsgGiveArticle[MAX_TEXT_CHAT];
						new MsgGiveArticleME[MAX_TEXT_CHAT];
				        format(MsgGiveArticle, sizeof(MsgGiveArticle), "deja %s en el refrigerador", Articulos[PlayersData[playerid][Bolsa][bolsaid]][NameA]);
				        format(MsgGiveArticleME, sizeof(MsgGiveArticleME), "has dejado %i %s del refrigerador.", PlayersData[playerid][BolsaC][bolsaid], Articulos[PlayersData[playerid][Bolsa][bolsaid]][NameA]);
				        Acciones(playerid, 8, MsgGiveArticle);
				        SendInfoMessage(playerid, 2, "0", MsgGiveArticleME);

				        Refrigerador[houseid][Articulo][i] = PlayersData[playerid][Bolsa][bolsaid];
				        Refrigerador[houseid][Cantidad][i] += PlayersData[playerid][BolsaC][bolsaid];
				        RemoveArticuloBolsa(playerid, bolsaid);
						return true;
					}
				}
				return -1;
			}
			else
			{
				SendInfoMessage(playerid, 0, "1249", "No tienes nada en esa parte de la bolsa!");
			}
		}
		else
		{
			SendInfoMessage(playerid, 0, "1253", "El número de Slot de bolsa debe estar comprendido entre 1 y 4");
		}
	}
	else
	{
		SendInfoMessage(playerid, 0, "1248", "Usted no tiene bolsa!");
	}
	return false;
}
public RemoveArticleRefrigeradorFun(playerid, houseid, refrigeradorid)
{
	if ( PlayersData[playerid][HaveBolsa] )
	{
		if ( refrigeradorid > 0 && refrigeradorid  < 11 )
		{
		    refrigeradorid--;
		    if ( Refrigerador[houseid][Articulo][refrigeradorid] )
		    {
			    switch (AddArticuloBolsa(playerid, Refrigerador[houseid][Articulo][refrigeradorid], Refrigerador[houseid][Cantidad][refrigeradorid]))
			    {
			        case 0:
			        {
						SendInfoMessage(playerid, 0, "1246", "La bolsa se encuentra llena!");
					}
					case 1:
					{
						new MsgGiveArticle[MAX_TEXT_CHAT];
						new MsgGiveArticleME[MAX_TEXT_CHAT];
				        format(MsgGiveArticle, sizeof(MsgGiveArticle), "coge %s del refrigerador", Articulos[Refrigerador[houseid][Articulo][refrigeradorid]][NameA]);
				        format(MsgGiveArticleME, sizeof(MsgGiveArticleME), "has cogido %i %s del refrigerador.", Refrigerador[houseid][Cantidad][refrigeradorid], Articulos[Refrigerador[houseid][Articulo][refrigeradorid]][NameA]);
				        Acciones(playerid, 8, MsgGiveArticle);
				        SendInfoMessage(playerid, 2, "0", MsgGiveArticleME);

					    Refrigerador[houseid][Articulo][refrigeradorid] = false;
						Refrigerador[houseid][Cantidad][refrigeradorid] = 0;
					}
					case 2:
					{
		   				SendInfoMessage(playerid, 0, "1245", "No te caben más de esos artículos en la bolsa!");
					}
				}
			}
			else
			{
				SendInfoMessage(playerid, 0, "1254", "No hay nada en esa parte del refrigerador!");
			}
		}
		else
		{
			SendInfoMessage(playerid, 0, "1258", "El número de Slot del refrigerador debe estar comprendido entre 1 y 10");
		}
	}
	else
	{
		SendInfoMessage(playerid, 0, "1247", "Usted no tiene bolsa!");
	}
}
public EatArticle(playerid, bolsaid)
{
	if ( PlayersData[playerid][HaveBolsa] )
	{
	    if ( GetPlayerInteriorEx(playerid) !=  WORLD_NORMAL )
	    {
			if ( bolsaid > 0 && bolsaid  < 5 )
			{
			    bolsaid--;
			    if ( PlayersData[playerid][Bolsa][bolsaid] )
			    {
			        if ( UseAritcle(playerid, PlayersData[playerid][Bolsa][bolsaid]) )
			        {
		                PlayersData[playerid][BolsaC][bolsaid]--;
		                if ( !PlayersData[playerid][BolsaC][bolsaid] )
		                {
		                    RemoveArticuloBolsa(playerid, bolsaid);
		                    return true;
						}
					}
				}
				else
				{
					SendInfoMessage(playerid, 0, "1257", "No hay nada en esa parte de la bolsa!");
				}
			}
			else
			{
				SendInfoMessage(playerid, 0, "1256", "El número de Slot de bolsa debe estar comprendido entre 1 y 4");
			}
		}
		else
		{
			SendInfoMessage(playerid, 0, "1369", "Sólo puedes usar artículos de la bolsa en interiores.");
		}

	}
	else
	{
		SendInfoMessage(playerid, 0, "1255", "Usted no tiene bolsa!");
	}
	return false;
}
public EatArticleRefrigerador(playerid, houseid, refrigeradorid)
{
	if ( refrigeradorid > 0 && refrigeradorid  < 11 )
	{
	    refrigeradorid--;
	    if ( Refrigerador[houseid][Articulo][refrigeradorid] )
	    {
	        if ( UseAritcle(playerid, Refrigerador[houseid][Articulo][refrigeradorid]) )
	        {
	            Refrigerador[houseid][Cantidad][refrigeradorid]--;
	            if ( !Refrigerador[houseid][Cantidad][refrigeradorid] )
	            {
	                Refrigerador[houseid][Articulo][refrigeradorid] = false;
	                return true;
				}
			}
		}
		else
		{
			SendInfoMessage(playerid, 0, "1268", "No hay nada en esa parte del refrigerador!");
		}
	}
	else
	{
		SendInfoMessage(playerid, 0, "1269", "El número de Slot del refrigerador debe estar comprendido entre 1 y 10");
	}
	return false;
}
public UseAritcle(playerid, articleid)
{
	new ErrorID;
	switch(articleid)
	{
	    case A_CERVEZA:
	    {
	        Acciones(playerid, 8, "abre una cerveza");
			SetPlayerSpecialAction(playerid, 22); // CERVEZA
		}
	    case A_VODKA:
	    {
	        Acciones(playerid, 8, "abre una botella vodka");
	        SetPlayerSpecialAction(playerid, 22); // WINE
		}
	    case A_REFRESCO:
	    {
	        Acciones(playerid, 8, "abre un refresco");
			SetPlayerSpecialAction(playerid, 23); // SPUNK
		}
	    case A_POLLO_C:
	    {
	        if ( PlayersData[playerid][IsPlayerInHouse] )
			{
		        Acciones(playerid, 8, "come pollo");
        	}
        	else
        	{
        	    ErrorID = true;
			}
		}
	    case A_PAPAS_C:
	    {
	        if ( PlayersData[playerid][IsPlayerInHouse] )
			{
		        Acciones(playerid, 8, "come papas");
        	}
        	else
        	{
        	    ErrorID = true;
			}
		}
	    case A_ARROZ_C:
	    {
	        if ( PlayersData[playerid][IsPlayerInHouse] )
			{
	        	Acciones(playerid, 8, "come arroz");
        	}
        	else
        	{
        	    ErrorID = true;
			}
		}
		default:
		{
			SendInfoMessage(playerid, 0, "1260", "Este artículo no se puede usar!");
			return false;
		}
	}
	if ( ErrorID )
	{
		SendInfoMessage(playerid, 0, "1261", "Este artículo sólo puedes consumirlo dentro de una casa!");
	}
    SetPlayerHealthEx(playerid, Articulos[A_POLLO_C][Vida]);
	return true;
}
public Cocinar(playerid, houseid, refrigeradorid)
{
	if ( refrigeradorid > 0 && refrigeradorid  < 11 )
	{
	    refrigeradorid--;
	    if ( Refrigerador[houseid][Articulo][refrigeradorid] )
	    {
	        if ( Refrigerador[houseid][Articulo][refrigeradorid] == A_POLLO ||
	             Refrigerador[houseid][Articulo][refrigeradorid] == A_PAPAS ||
	             Refrigerador[houseid][Articulo][refrigeradorid] == A_ARROZ )
            {
                new ArticuloN = Refrigerador[houseid][Articulo][refrigeradorid];
				if (AddArticleRefrigeradorCocinar(playerid, houseid, refrigeradorid, Refrigerador[houseid][Articulo][refrigeradorid] + 1) )
				{
					new MsgGiveArticle[MAX_TEXT_CHAT];
			        format(MsgGiveArticle, sizeof(MsgGiveArticle), "cocina %s", Articulos[ArticuloN][NameA]);
			        Acciones(playerid, 8, MsgGiveArticle);

					if ( !Refrigerador[houseid][Cantidad][refrigeradorid] )
					{
					    Refrigerador[houseid][Articulo][refrigeradorid] = false;
					}
				}
				else
				{
					SendInfoMessage(playerid, 0, "1262", "No hay más espacio para guardar la comida cocinada en el refrigerador!");
				}
			}
			else
			{
				SendInfoMessage(playerid, 0, "1263", "Este artículo no se puede cocinar!");
			}
		}
		else
		{
			SendInfoMessage(playerid, 0, "1264", "No hay nada en esa parte del refrigerador!");
		}
	}
	else
	{
		SendInfoMessage(playerid, 0, "1265", "El número de Slot de bolsa debe estar comprendido entre 1 y 4");
	}
}
public LoadIncendios()
{
	new DirBD[50];
	format(DirBD, sizeof(DirBD), "%sIncendios.ulp", DIR_MISC);
	if ( fexist(DirBD) )
	{
	    new FireData[MAX_PLAYER_DATA];
	    new FireDataSlots[MAX_GASOLINERAS_COUNT][30];
		new File:LoadFire = fopen(DirBD, io_read);
		fread(LoadFire, FireData);
		fclose(LoadFire);

		new PosSplitAfter = 0;
		for ( new i = 0; i < MAX_INCENDIOS; i++ )
		{
			PosSplitAfter = strfind(FireData, ",", false);
			strmid(FireDataSlots[i], FireData, 0, PosSplitAfter, sizeof(FireData));
			strdel(FireData, 0, PosSplitAfter + 1);
			Incendios[i][HouseidI]	= strval(FireDataSlots[i]);
			if (Incendios[i][HouseidI])
			{
				CreateFire(Incendios[i][HouseidI], i);
			}
		}
	}
	else
	{
	    print(" ERROR AL CARGAR LOS INCENDIOS !!!!!!");
	}
}
public SaveIncendios()
{
	new DirBD[50];
	format(DirBD, sizeof(DirBD), "%sIncendios.ulp", DIR_MISC);

	new FireData[MAX_PLAYER_DATA];
	new TempConvert[MAX_PLAYER_DATA];
	for (new i = 0; i < MAX_INCENDIOS; i++)
	{
	    format(TempConvert, sizeof(TempConvert), "%i,", Incendios[i][HouseidI]);
        strcat(FireData, TempConvert, sizeof(TempConvert));
	}

	new File:SaveFire = fopen(DirBD, io_write);
	fwrite(SaveFire, FireData);
	fclose(SaveFire);
}
public GetFireNext()
{
	for (new i; i < MAX_INCENDIOS; i++)
	{
		if ( !Incendios[i][HouseidI] )
		{
		    return i;
		}
	}
	return -1;
}
public CreateFire(houseid, fireid)
{
	if ( fireid != -1 )
	{
	    Incendios[fireid][HouseidI] = houseid;

		Incendios[fireid][ObjectsIDIn][14] = CreateDynamicObjectExULP(FIRE_OBJECT, HouseData[houseid][PosX], HouseData[houseid][PosY], HouseData[houseid][PosZ], 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDIn][13] = CreateDynamicObjectExULP(FIRE_OBJECT, HouseData[houseid][PosX], HouseData[houseid][PosY], HouseData[houseid][PosZ] + LINE_FIRE, 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDIn][12] = CreateDynamicObjectExULP(FIRE_OBJECT, HouseData[houseid][PosX], HouseData[houseid][PosY] + LINE_FIRE, HouseData[houseid][PosZ], 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDIn][11] = CreateDynamicObjectExULP(FIRE_OBJECT, HouseData[houseid][PosX] + LINE_FIRE, HouseData[houseid][PosY], HouseData[houseid][PosZ], 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDIn][10] = CreateDynamicObjectExULP(FIRE_OBJECT, HouseData[houseid][PosX] + LINE_FIRE, HouseData[houseid][PosY] + LINE_FIRE, HouseData[houseid][PosZ], 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDIn][9] = CreateDynamicObjectExULP(FIRE_OBJECT, HouseData[houseid][PosX], HouseData[houseid][PosY] + LINE_FIRE, HouseData[houseid][PosZ] + LINE_FIRE, 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDIn][8] = CreateDynamicObjectExULP(FIRE_OBJECT, HouseData[houseid][PosX] + LINE_FIRE, HouseData[houseid][PosY], HouseData[houseid][PosZ] + LINE_FIRE, 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDIn][7] = CreateDynamicObjectExULP(FIRE_OBJECT, HouseData[houseid][PosX], HouseData[houseid][PosY], HouseData[houseid][PosZ] - LINE_FIRE, 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDIn][6] = CreateDynamicObjectExULP(FIRE_OBJECT, HouseData[houseid][PosX], HouseData[houseid][PosY] - LINE_FIRE, HouseData[houseid][PosZ], 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDIn][5] = CreateDynamicObjectExULP(FIRE_OBJECT, HouseData[houseid][PosX] - LINE_FIRE, HouseData[houseid][PosY], HouseData[houseid][PosZ], 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDIn][4] = CreateDynamicObjectExULP(FIRE_OBJECT, HouseData[houseid][PosX] - LINE_FIRE, HouseData[houseid][PosY] - LINE_FIRE, HouseData[houseid][PosZ], 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDIn][3] = CreateDynamicObjectExULP(FIRE_OBJECT, HouseData[houseid][PosX], HouseData[houseid][PosY] - LINE_FIRE, HouseData[houseid][PosZ] - LINE_FIRE, 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDIn][2] = CreateDynamicObjectExULP(FIRE_OBJECT, HouseData[houseid][PosX] - LINE_FIRE, HouseData[houseid][PosY], HouseData[houseid][PosZ] - LINE_FIRE, 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDIn][1] = CreateDynamicObjectExULP(FIRE_OBJECT, HouseData[houseid][PosX] + LINE_FIRE, HouseData[houseid][PosY] + LINE_FIRE, HouseData[houseid][PosZ] + LINE_FIRE, 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDIn][0] = CreateDynamicObjectExULP(FIRE_OBJECT, HouseData[houseid][PosX] - LINE_FIRE, HouseData[houseid][PosY] - LINE_FIRE, HouseData[houseid][PosZ] - LINE_FIRE, 0.0, 0.0, 0.0, -1, -1, -1, MAX_RADIO_STREAM);

		Incendios[fireid][ObjectsIDOut][14] = CreateDynamicObject(FIRE_OBJECT, TypeHouse[HouseData[houseid][TypeHouseId]][PosX], TypeHouse[HouseData[houseid][TypeHouseId]][PosY], TypeHouse[HouseData[houseid][TypeHouseId]][PosZ], 0.0, 0.0, 0.0, houseid, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDOut][13] = CreateDynamicObject(FIRE_OBJECT, TypeHouse[HouseData[houseid][TypeHouseId]][PosX], TypeHouse[HouseData[houseid][TypeHouseId]][PosY], TypeHouse[HouseData[houseid][TypeHouseId]][PosZ] + LINE_FIRE, 0.0, 0.0, 0.0, houseid, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDOut][12] = CreateDynamicObject(FIRE_OBJECT, TypeHouse[HouseData[houseid][TypeHouseId]][PosX], TypeHouse[HouseData[houseid][TypeHouseId]][PosY] + LINE_FIRE, TypeHouse[HouseData[houseid][TypeHouseId]][PosZ], 0.0, 0.0, 0.0, houseid, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDOut][11] = CreateDynamicObject(FIRE_OBJECT, TypeHouse[HouseData[houseid][TypeHouseId]][PosX] + LINE_FIRE, TypeHouse[HouseData[houseid][TypeHouseId]][PosY], TypeHouse[HouseData[houseid][TypeHouseId]][PosZ], 0.0, 0.0, 0.0, houseid, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDOut][10] = CreateDynamicObject(FIRE_OBJECT, TypeHouse[HouseData[houseid][TypeHouseId]][PosX] + LINE_FIRE, TypeHouse[HouseData[houseid][TypeHouseId]][PosY] + LINE_FIRE, TypeHouse[HouseData[houseid][TypeHouseId]][PosZ], 0.0, 0.0, 0.0, houseid, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDOut][9] = CreateDynamicObject(FIRE_OBJECT, TypeHouse[HouseData[houseid][TypeHouseId]][PosX], TypeHouse[HouseData[houseid][TypeHouseId]][PosY] + LINE_FIRE, TypeHouse[HouseData[houseid][TypeHouseId]][PosZ] + LINE_FIRE, 0.0, 0.0, 0.0, houseid, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDOut][8] = CreateDynamicObject(FIRE_OBJECT, TypeHouse[HouseData[houseid][TypeHouseId]][PosX] + LINE_FIRE, TypeHouse[HouseData[houseid][TypeHouseId]][PosY], TypeHouse[HouseData[houseid][TypeHouseId]][PosZ] + LINE_FIRE, 0.0, 0.0, 0.0, houseid, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDOut][7] = CreateDynamicObject(FIRE_OBJECT, TypeHouse[HouseData[houseid][TypeHouseId]][PosX], TypeHouse[HouseData[houseid][TypeHouseId]][PosY], TypeHouse[HouseData[houseid][TypeHouseId]][PosZ] - LINE_FIRE, 0.0, 0.0, 0.0, houseid, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDOut][6] = CreateDynamicObject(FIRE_OBJECT, TypeHouse[HouseData[houseid][TypeHouseId]][PosX], TypeHouse[HouseData[houseid][TypeHouseId]][PosY] - LINE_FIRE, TypeHouse[HouseData[houseid][TypeHouseId]][PosZ], 0.0, 0.0, 0.0, houseid, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDOut][5] = CreateDynamicObject(FIRE_OBJECT, TypeHouse[HouseData[houseid][TypeHouseId]][PosX] - LINE_FIRE, TypeHouse[HouseData[houseid][TypeHouseId]][PosY], TypeHouse[HouseData[houseid][TypeHouseId]][PosZ], 0.0, 0.0, 0.0, houseid, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDOut][4] = CreateDynamicObject(FIRE_OBJECT, TypeHouse[HouseData[houseid][TypeHouseId]][PosX] - LINE_FIRE, TypeHouse[HouseData[houseid][TypeHouseId]][PosY] - LINE_FIRE, TypeHouse[HouseData[houseid][TypeHouseId]][PosZ], 0.0, 0.0, 0.0, houseid, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDOut][3] = CreateDynamicObject(FIRE_OBJECT, TypeHouse[HouseData[houseid][TypeHouseId]][PosX], TypeHouse[HouseData[houseid][TypeHouseId]][PosY] - LINE_FIRE, TypeHouse[HouseData[houseid][TypeHouseId]][PosZ] - LINE_FIRE, 0.0, 0.0, 0.0, houseid, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDOut][2] = CreateDynamicObject(FIRE_OBJECT, TypeHouse[HouseData[houseid][TypeHouseId]][PosX] - LINE_FIRE, TypeHouse[HouseData[houseid][TypeHouseId]][PosY], TypeHouse[HouseData[houseid][TypeHouseId]][PosZ] - LINE_FIRE, 0.0, 0.0, 0.0, houseid, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDOut][1] = CreateDynamicObject(FIRE_OBJECT, TypeHouse[HouseData[houseid][TypeHouseId]][PosX] + LINE_FIRE, TypeHouse[HouseData[houseid][TypeHouseId]][PosY] + LINE_FIRE, TypeHouse[HouseData[houseid][TypeHouseId]][PosZ] + 2, 0.0, 0.0, 0.0, houseid, -1, -1, MAX_RADIO_STREAM);
		Incendios[fireid][ObjectsIDOut][0] = CreateDynamicObject(FIRE_OBJECT, TypeHouse[HouseData[houseid][TypeHouseId]][PosX] - LINE_FIRE, TypeHouse[HouseData[houseid][TypeHouseId]][PosY] - LINE_FIRE, TypeHouse[HouseData[houseid][TypeHouseId]][PosZ] -2, 0.0, 0.0, 0.0, houseid, -1, -1, MAX_RADIO_STREAM);
		return true;
	}
	else
	{
	    return false;
	}
}
public DestroyFire(fireid)
{
	if ( Incendios[fireid][HouseidI] )
	{
		Incendios[fireid][HouseidI] = false;
		for (new i = 0; i < 15; i++)
		{
		    if ( Incendios[fireid][ObjectsIDIn][i] )
		    {
			    DestroyDynamicObject(Incendios[fireid][ObjectsIDIn][i]);
			    Incendios[fireid][ObjectsIDIn][i] = false;
			}
			if ( Incendios[fireid][ObjectsIDOut][i] )
			{
			    DestroyDynamicObject(Incendios[fireid][ObjectsIDOut][i]);
			    Incendios[fireid][ObjectsIDOut][i] = false;
			}
		}
		return true;
	}
	{
		return false;
	}
}
public IsPlayerNearFire(playerid)
{
	for (new i = 0; i < MAX_INCENDIOS; i++)
	{
		if ( Incendios[i][HouseidI] )
		{
		    new Float:PosFire[3];
		    if ( PlayersData[playerid][IsPlayerInHouse] == Incendios[i][HouseidI])
		    {
		        PosFire[0] = TypeHouse[HouseData[Incendios[i][HouseidI]][TypeHouseId]][PosX];
				PosFire[1] = TypeHouse[HouseData[Incendios[i][HouseidI]][TypeHouseId]][PosY];
				PosFire[2] = TypeHouse[HouseData[Incendios[i][HouseidI]][TypeHouseId]][PosZ];
			}
			else
			{
		        PosFire[0] = HouseData[Incendios[i][HouseidI]][PosX];
				PosFire[1] = HouseData[Incendios[i][HouseidI]][PosY];
				PosFire[2] = HouseData[Incendios[i][HouseidI]][PosZ];
			}
			if ( IsPlayerInRangeOfPoint(playerid, 20.0, PosFire[0], PosFire[1], PosFire[2]) )
			{
			    return i;
			}
		}
	}
	SendInfoMessage(playerid, 0, "1273", "Usted no se encuentra cerca de un incendio");
	return -1;
}
public DestroyParticleFire(fireid)
{
	for (new i = 0; i < 15; i++)
	{
	    if ( Incendios[fireid][ObjectsIDIn][i] )
	    {
		    if ( Incendios[fireid][ObjectsIDIn][i] )
		    {
			    DestroyDynamicObject(Incendios[fireid][ObjectsIDIn][i]);
			    Incendios[fireid][ObjectsIDIn][i] = false;
			}
			if ( Incendios[fireid][ObjectsIDOut][i] )
			{
			    DestroyDynamicObject(Incendios[fireid][ObjectsIDOut][i]);
			    Incendios[fireid][ObjectsIDOut][i] = false;
			}
			break;
		}

	}
	if ( !Incendios[fireid][ObjectsIDOut][14] )
	{
		DestroyFire(fireid);
	}
}
public ShowIncendios(playerid)
{
	new IncendiosDialog[700];
	new TempConvert[60];
	new ConteoFire = -1;
	for (new i = 0; i < MAX_INCENDIOS; i++)
	{
	    if ( Incendios[i][HouseidI] )
	    {
			if ( ConteoFire != -1 )
			{
			    format(TempConvert, sizeof(TempConvert), "\r\n{E6E6E6}Incendio ID[%i] - Casa ID[%i]", i, Incendios[i][HouseidI]);
	    	}
			else
			{
			    format(TempConvert, sizeof(TempConvert), "{E6E6E6}Incendio ID[%i] - Casa ID[%i]", i, Incendios[i][HouseidI]);
			}
	        strcat(IncendiosDialog, TempConvert, sizeof(IncendiosDialog));
	        ConteoFire++;
	        PlayersDataOnline[playerid][SaveAfterAgenda][ConteoFire] = i;
        }
	}
	if (ConteoFire != -1)
	{
		ShowPlayerDialogEx(playerid,71,DIALOG_STYLE_LIST,"{00A5FF}Incendios - Lista", IncendiosDialog, "Destruir", "Salir");
	}
	else
	{
		ShowPlayerDialogEx(playerid,999,DIALOG_STYLE_MSGBOX,"{00A5FF}Incendios - Información", "{F0F0F0}No se encontrarón incendios.", "Aceptar", "");
	}
}
public CheckFire(playerid)
{
	for (new i = 0; i < MAX_INCENDIOS; i++)
	{
	    if ( Incendios[i][HouseidI] )
	    {
			if ( GetPlayerVirtualWorld(playerid) == Incendios[i][HouseidI] && IsPlayerInRangeOfPoint(playerid, 3.0, TypeHouse[HouseData[Incendios[i][HouseidI]][TypeHouseId]][PosX], TypeHouse[HouseData[Incendios[i][HouseidI]][TypeHouseId]][PosY], TypeHouse[HouseData[Incendios[i][HouseidI]][TypeHouseId]][PosZ]) ||
			     IsPlayerInRangeOfPoint(playerid, 3.0, HouseData[Incendios[i][HouseidI]][PosX], HouseData[Incendios[i][HouseidI]][PosY], HouseData[Incendios[i][HouseidI]][PosZ]) )
			{
			    SetPlayerHealthEx(playerid, -5);
			}
	    }
    }
}
public RandomFire()
{
	new HouseID = random(MAX_HOUSE) + 1;
    if ( strlen(HouseData[HouseID][Dueno]) != 2 )
    {
		if ( CreateFire(HouseID, GetFireNext()) )
		{
			printf("[Incendios]: La casa ID[%i] se incendió!", HouseID);
		}
    }
}
public RemoveCallSAMD(callid, samdid)
{
	CallSAMD[samdid][callid][Number] 			= 0;
}
public AddCallSAMD(departament, city, number, type)
{
	new callid;
    for ( new i = 0; i < MAX_CALL_POLICE_COUNT; i++ )
    {
		if ( !CallSAMD[departament][i][Number] )
		{
		    CallSAMD[departament][i][City] = city;
		    CallSAMD[departament][i][Type] = type;
		    callid = i;
		    break;
		}
	}
	CallSAMD[departament][callid][Number] = number;
}
public ShowConnectedRequest(playerid)
{
	if ( PlayersDataOnline[playerid][SaveAfterAgenda][50] )
	{
		ShowPlayerDialogEx(playerid,73,DIALOG_STYLE_MSGBOX,"{00A5FF}LSMD - Emergencias", "{F0F0F0}¿Qué solicita?\n\n{F5FF00}LSMD {F0F0F0}presta los siguientes servicios:", "Médico", "Bombero");
	}
	else
	{
		ShowPlayerDialogEx(playerid,73,DIALOG_STYLE_MSGBOX,"{00A5FF}SFMD - Emergencias", "{F0F0F0}¿Qué solicita?\n\n{F5FF00}SFMD {F0F0F0}presta los siguientes servicios:", "Médico", "Bombero");
	}
}
public ShowConnectedSAMD(playerid)
{
	if ( PlayersDataOnline[playerid][SaveAfterAgenda][50] )
	{
		ShowPlayerDialogEx(playerid,72,DIALOG_STYLE_MSGBOX,"{00A5FF}LSMD - Emergencias", "{F0F0F0}Bienvenido a el departamento de emergencias {F5FF00}LSMD", "Comenzar", "Colgar");
	}
	else
	{
		ShowPlayerDialogEx(playerid,72,DIALOG_STYLE_MSGBOX,"{00A5FF}SFMD - Emergencias", "{F0F0F0}Bienvenido a el departamento de emergencias {F5FF00}SFMD", "Comenzar", "Colgar");
	}
}
public ShowCallSAMD(playerid)
{
	new CallDialog[750];
	new TempConvert[45];
	new ConteoCall = -1;
	for (new i = 0; i < MAX_CALL_POLICE_COUNT; i++)
	{
	    if ( CallSAMD[PlayersDataOnline[playerid][SaveAfterAgenda][50]][i][Number] && PlayersDataOnline[playerid][NumberCallPublic] == CallSAMD[PlayersDataOnline[playerid][SaveAfterAgenda][50]][i][Type] )
	    {
			if ( ConteoCall != -1 )
			{
		    	format(TempConvert, sizeof(TempConvert), "\r\n{E6E6E6}Número: {00F50A}%i (%s)",
				CallSAMD[PlayersDataOnline[playerid][SaveAfterAgenda][50]][i][Number],
				Ciudades[CallPublics[i][PlayersDataOnline[playerid][NumberCallPublic]][City]]
				);
	    	}
			else
			{
		    	format(TempConvert, sizeof(TempConvert), "{E6E6E6}Número: {00F50A}%i (%s)",
				CallSAMD[PlayersDataOnline[playerid][SaveAfterAgenda][50]][i][Number],
			    Ciudades[CallPublics[i][PlayersDataOnline[playerid][NumberCallPublic]][City]]
				);
			}
	        strcat(CallDialog, TempConvert, sizeof(CallDialog));
	        ConteoCall++;
	        PlayersDataOnline[playerid][SaveAfterAgenda][ConteoCall] = i;
        }
	}
	if (ConteoCall != -1)
	{
	    if ( PlayersDataOnline[playerid][NumberCallPublic] )
	    {
			ShowPlayerDialogEx(playerid,139,DIALOG_STYLE_LIST,"{00A5FF}Médicos - Centro de Llamadas", CallDialog, "Opciones", "Salir");
		}
		else
		{
			ShowPlayerDialogEx(playerid,139,DIALOG_STYLE_LIST,"{00A5FF}Bomberos - Centro de Llamadas", CallDialog, "Opciones", "Salir");
		}
	}
	else
	{
	    if  ( PlayersDataOnline[playerid][SaveAfterAgenda][50] )
	    {
			ShowPlayerDialogEx(playerid,9999,DIALOG_STYLE_MSGBOX,"{00A5FF}Centro de Llamadas - LSMD", "{F0F0F0}No se encontrarón llamadas! Intente más tarde.", "Aceptar", "");
		}
		else
		{
			ShowPlayerDialogEx(playerid,9999,DIALOG_STYLE_MSGBOX,"{00A5FF}Centro de Llamadas - SFMD", "{F0F0F0}No se encontrarón llamadas! Intente más tarde.", "Aceptar", "");
		}
	}
}
public LoadGaragesEx()
{
/*
    GaragesEx[MAX_GARAGES_EX][PosXOne] 		= 0.0;
    GaragesEx[MAX_GARAGES_EX][PosYOne] 		= 0.0;
    GaragesEx[MAX_GARAGES_EX][PosZOne] 		= 0.0;
    GaragesEx[MAX_GARAGES_EX][PosZZOne] 	= 0.0;
    GaragesEx[MAX_GARAGES_EX][PosXOneP] 	= 0.0;
    GaragesEx[MAX_GARAGES_EX][PosYOneP] 	= 0.0;
    GaragesEx[MAX_GARAGES_EX][PosZOneP] 	= 0.0;
    GaragesEx[MAX_GARAGES_EX][PosZZOneP] 	= 0.0;
    GaragesEx[MAX_GARAGES_EX][PosXTwo] 		= 0.0;
    GaragesEx[MAX_GARAGES_EX][PosYTwo] 		= 0.0;
    GaragesEx[MAX_GARAGES_EX][PosZTwo] 		= 0.0;
    GaragesEx[MAX_GARAGES_EX][PosZZTwo] 	= 0.0;
    GaragesEx[MAX_GARAGES_EX][PosXTwoP]		= 0.0;
    GaragesEx[MAX_GARAGES_EX][PosYTwoP]		= 0.0;
    GaragesEx[MAX_GARAGES_EX][PosZTwoP]		= 0.0;
    GaragesEx[MAX_GARAGES_EX][PosZZTwoP] 	= 0.0;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP]	= CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], -1);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP]	= CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], -1);
	GaragesEx[MAX_GARAGES_EX][Interior] 	= 14;
	GaragesEx[MAX_GARAGES_EX][World] 		= WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][Lock] 		= false;
	GaragesEx[MAX_GARAGES_EX][Dueno] 		= SFMD;*/

	// 1/////////////////////////////////////////////////////////////////////
	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne]       = 1296.7440185547;
	GaragesEx[MAX_GARAGES_EX][PosYOne]       = 2648.61328125;
	GaragesEx[MAX_GARAGES_EX][PosZOne]       = 11.219346046448;
	GaragesEx[MAX_GARAGES_EX][PosZZOne]    = 90;
	GaragesEx[MAX_GARAGES_EX][PosXOneP]    = 1291.6853027344;
	GaragesEx[MAX_GARAGES_EX][PosYOneP]    = 2648.7053222656;
	GaragesEx[MAX_GARAGES_EX][PosZOneP]    = 10.846117019653;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP]    = 270;
	GaragesEx[MAX_GARAGES_EX][PosXTwo]       = -2022.5163574219;
	GaragesEx[MAX_GARAGES_EX][PosYTwo]       = 92.811820983887;
	GaragesEx[MAX_GARAGES_EX][PosZTwo]       = 28.448444366455;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo]    = 270;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP]      = -2026.7365722656;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP]      = 92.712478637695;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP]      = 28.457437515259;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP]    = 270;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP]   = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], WORLD_DEFAULT_INTERIOR);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP]   = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL);
	GaragesEx[MAX_GARAGES_EX][Interior]    = 14;
	GaragesEx[MAX_GARAGES_EX][World]       = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][Lock]       = false;
	GaragesEx[MAX_GARAGES_EX][Dueno]       = SFMD;

	// 2/////////////////////////////////////////////////////////////////////
	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne]       = 1296.7440185547;
	GaragesEx[MAX_GARAGES_EX][PosYOne]       = 2655.94921875;
	GaragesEx[MAX_GARAGES_EX][PosZOne]       = 11.219346046448;
	GaragesEx[MAX_GARAGES_EX][PosZZOne]    = 90;
	GaragesEx[MAX_GARAGES_EX][PosXOneP]    = 1291.6857910156;
	GaragesEx[MAX_GARAGES_EX][PosYOneP]    = 2656.0095214844;
	GaragesEx[MAX_GARAGES_EX][PosZOneP]    = 10.86038684845;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP]    = 270;
	GaragesEx[MAX_GARAGES_EX][PosXTwo]       = -2022.5163574219;
	GaragesEx[MAX_GARAGES_EX][PosYTwo]       = 84.187217712402;
	GaragesEx[MAX_GARAGES_EX][PosZTwo]       = 28.448444366455;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo]    = 270;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP]      = -2026.7346191406;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP]      = 84.050964355469;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP]      = 28.341444015503;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP]    = 270;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP]   = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], WORLD_DEFAULT_INTERIOR);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP]   = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL);
	GaragesEx[MAX_GARAGES_EX][Interior]    = 14;
	GaragesEx[MAX_GARAGES_EX][World]       = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][Lock]       = false;
	GaragesEx[MAX_GARAGES_EX][Dueno]       = SFMD;

	// 3/////////////////////////////////////////////////////////////////////
	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne]       = 1296.7440185547;
	GaragesEx[MAX_GARAGES_EX][PosYOne]       = 2663.3015136719;
	GaragesEx[MAX_GARAGES_EX][PosZOne]       = 11.219346046448;
	GaragesEx[MAX_GARAGES_EX][PosZZOne]    = 90;
	GaragesEx[MAX_GARAGES_EX][PosXOneP]    = 1291.6750488281;
	GaragesEx[MAX_GARAGES_EX][PosYOneP]    = 2663.2922363281;
	GaragesEx[MAX_GARAGES_EX][PosZOneP]    = 10.864186286926;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP]    = 270;
	GaragesEx[MAX_GARAGES_EX][PosXTwo]       = -2022.5163574219;
	GaragesEx[MAX_GARAGES_EX][PosYTwo]       = 75.530609130859;
	GaragesEx[MAX_GARAGES_EX][PosZTwo]       = 28.448444366455;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo]    = 270;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP]      = -2026.7357177734;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP]      = 75.499862670898;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP]      = 28.341310501099;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP]    = 270;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP]   = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], WORLD_DEFAULT_INTERIOR);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP]   = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL);
	GaragesEx[MAX_GARAGES_EX][Interior]    = 14;
	GaragesEx[MAX_GARAGES_EX][World]       = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][Lock]       = false;
	GaragesEx[MAX_GARAGES_EX][Dueno]       = SFMD;

	// 4/////////////////////////////////////////////////////////////////////
	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne]       = 1336.7229003906;
	GaragesEx[MAX_GARAGES_EX][PosYOne]       = 2663.2060546875;
	GaragesEx[MAX_GARAGES_EX][PosZOne]       = 11.219346046448;
	GaragesEx[MAX_GARAGES_EX][PosZZOne]    = 90;
	GaragesEx[MAX_GARAGES_EX][PosXOneP]    = 1331.6806640625;
	GaragesEx[MAX_GARAGES_EX][PosYOneP]    = 2663.2189941406;
	GaragesEx[MAX_GARAGES_EX][PosZOneP]    = 10.864210128784;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP]    = 270;
	GaragesEx[MAX_GARAGES_EX][PosXTwo]       = -2053.5014648438;
	GaragesEx[MAX_GARAGES_EX][PosYTwo]       = 92.807563781738;
	GaragesEx[MAX_GARAGES_EX][PosZTwo]       = 28.760625839233;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo]    = 90;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP]      = -2047.8316650391;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP]      = 92.613609313965;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP]      = 28.407892227173;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP]    = 90;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP]   = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], WORLD_DEFAULT_INTERIOR);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP]   = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL);
	GaragesEx[MAX_GARAGES_EX][Interior]    = 14;
	GaragesEx[MAX_GARAGES_EX][World]       = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][Lock]       = false;
	GaragesEx[MAX_GARAGES_EX][Dueno]       = SFMD;

	// 5/////////////////////////////////////////////////////////////////////
	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne]       = 1336.7229003906;
	GaragesEx[MAX_GARAGES_EX][PosYOne]       = 2655.9899902344;
	GaragesEx[MAX_GARAGES_EX][PosZOne]       = 11.219346046448;
	GaragesEx[MAX_GARAGES_EX][PosZZOne]    = 90;
	GaragesEx[MAX_GARAGES_EX][PosXOneP]    = 1331.689453125;
	GaragesEx[MAX_GARAGES_EX][PosYOneP]    = 2656.0004882813;
	GaragesEx[MAX_GARAGES_EX][PosZOneP]    = 10.860371589661;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP]    = 270;
	GaragesEx[MAX_GARAGES_EX][PosXTwo]       = -2053.5014648438;
	GaragesEx[MAX_GARAGES_EX][PosYTwo]       = 84.094604492188;
	GaragesEx[MAX_GARAGES_EX][PosZTwo]       = 28.760625839233;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo]    = 90;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP]      = -2047.8311767578;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP]      = 83.947914123535;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP]      = 28.390625;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP]    = 90;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP]   = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], WORLD_DEFAULT_INTERIOR);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP]   = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL);
	GaragesEx[MAX_GARAGES_EX][Interior]    = 14;
	GaragesEx[MAX_GARAGES_EX][World]       = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][Lock]       = false;
	GaragesEx[MAX_GARAGES_EX][Dueno]       = SFMD;

	// 6/////////////////////////////////////////////////////////////////////
	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne]       = 1336.7229003906;
	GaragesEx[MAX_GARAGES_EX][PosYOne]       = 2648.7255859375;
	GaragesEx[MAX_GARAGES_EX][PosZOne]       = 11.219346046448;
	GaragesEx[MAX_GARAGES_EX][PosZZOne]    = 90;
	GaragesEx[MAX_GARAGES_EX][PosXOneP]    = 1331.6868896484;
	GaragesEx[MAX_GARAGES_EX][PosYOneP]    = 2648.6918945313;
	GaragesEx[MAX_GARAGES_EX][PosZOneP]    = 10.846092224121;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP]    = 270;
	GaragesEx[MAX_GARAGES_EX][PosXTwo]       = -2053.2954;
	GaragesEx[MAX_GARAGES_EX][PosYTwo]       = 75.3610;
	GaragesEx[MAX_GARAGES_EX][PosZTwo]       = 28.6271;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo]    = 90;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP]      = -2047.8316650391;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP]      = 75.347999572754;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP]      = 28.397680282593;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP]    = 90;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP]   = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], WORLD_DEFAULT_INTERIOR);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP]   = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL);
	GaragesEx[MAX_GARAGES_EX][Interior]    = 14;
	GaragesEx[MAX_GARAGES_EX][World]       = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][Lock]       = false;
	GaragesEx[MAX_GARAGES_EX][Dueno]       = SFMD;

	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne]       = 617.2243;
	GaragesEx[MAX_GARAGES_EX][PosYOne]       = -1.2861;
	GaragesEx[MAX_GARAGES_EX][PosZOne]       = 1000.9219;
	GaragesEx[MAX_GARAGES_EX][PosZZOne]    = 90;
	GaragesEx[MAX_GARAGES_EX][PosXOneP]    = 622.1999;
	GaragesEx[MAX_GARAGES_EX][PosYOneP]    = -1.3114;
	GaragesEx[MAX_GARAGES_EX][PosZOneP]    = 1000.9219;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP]    = 84.8417;
	GaragesEx[MAX_GARAGES_EX][PosXTwo]       = -2874.0088;
	GaragesEx[MAX_GARAGES_EX][PosYTwo]       = 488.8052;
	GaragesEx[MAX_GARAGES_EX][PosZTwo]       = 4.7891;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo]    = 180;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP]      = -2874.1960;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP]      = 493.4135;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP]      = 4.9141;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP]    = 180.7589;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP]   = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], WORLD_DEFAULT_INTERIOR);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL);
	GaragesEx[MAX_GARAGES_EX][Interior]    = 1;
	GaragesEx[MAX_GARAGES_EX][World]       = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][Lock]       = false;
	GaragesEx[MAX_GARAGES_EX][Dueno]       = TALLER_SF;

	// LS
	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne]       = 2450.3898925781;
	GaragesEx[MAX_GARAGES_EX][PosYOne]       = 2374.7368164063;
	GaragesEx[MAX_GARAGES_EX][PosZOne]       = 74.422454833984;
	GaragesEx[MAX_GARAGES_EX][PosZZOne]    = 270;
	GaragesEx[MAX_GARAGES_EX][PosXOneP]      = 2445.6242675781;
	GaragesEx[MAX_GARAGES_EX][PosYOneP]      = 2374.4838867188;
	GaragesEx[MAX_GARAGES_EX][PosZOneP]      = 74.541236877441;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP]    = 270;
	GaragesEx[MAX_GARAGES_EX][PosXTwo]       = 1637.7884521484;
	GaragesEx[MAX_GARAGES_EX][PosYTwo]       = -1681.7750244141;
	GaragesEx[MAX_GARAGES_EX][PosZTwo]       = 13.535420417786;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo]    = 90;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP]    = 1642.2092285156;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP]    = -1681.6961669922;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP]    = 13.529174804688;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP]    = 90;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP]   = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], WORLD_DEFAULT_INTERIOR);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL);
	GaragesEx[MAX_GARAGES_EX][Interior]    = 4;
	GaragesEx[MAX_GARAGES_EX][World]       = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][Lock]       = false;
	GaragesEx[MAX_GARAGES_EX][Dueno]       = GOBIERNO;

	// SF
	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne]       = 2395.1430664063;
	GaragesEx[MAX_GARAGES_EX][PosYOne]       = 2450.8840332031;
	GaragesEx[MAX_GARAGES_EX][PosZOne]       = 69.795692443848;
	GaragesEx[MAX_GARAGES_EX][PosZZOne]    = 270;
	GaragesEx[MAX_GARAGES_EX][PosXOneP]      = 2390.4787597656;
	GaragesEx[MAX_GARAGES_EX][PosYOneP]      = 2450.8610839844;
	GaragesEx[MAX_GARAGES_EX][PosZOneP]      = 70.314086914063;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP]    = 270;
	GaragesEx[MAX_GARAGES_EX][PosXTwo]       = -1979.2249755859;
	GaragesEx[MAX_GARAGES_EX][PosYTwo]       = 433.14822387695;
	GaragesEx[MAX_GARAGES_EX][PosZTwo]       = 25.684232711792;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo]    = 0;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP]    = -1979.4809570313;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP]    = 426.94644165039;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP]    = 24.621158599854;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP]    = 0;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP]   = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], WORLD_DEFAULT_INTERIOR);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL);
	GaragesEx[MAX_GARAGES_EX][Interior]    = 4;
	GaragesEx[MAX_GARAGES_EX][World]       = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][Lock]       = false;
	GaragesEx[MAX_GARAGES_EX][Dueno]       = GOBIERNO;

	/// ENTRADA YKZ
	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne]       = 926.10797119141;
	GaragesEx[MAX_GARAGES_EX][PosYOne]       = 1889.2600097656;
	GaragesEx[MAX_GARAGES_EX][PosZOne]       = 10.953544616699;
	GaragesEx[MAX_GARAGES_EX][PosZZOne]    = 0;
	GaragesEx[MAX_GARAGES_EX][PosXOneP]    = 926.12554931641;
	GaragesEx[MAX_GARAGES_EX][PosYOneP]    = 1884.6147460938;
	GaragesEx[MAX_GARAGES_EX][PosZOneP]    = 10.953544616699;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP]    = 0;
	GaragesEx[MAX_GARAGES_EX][PosXTwo]       = -2157.1401367188;
	GaragesEx[MAX_GARAGES_EX][PosYTwo]       = 654.69183349609;
	GaragesEx[MAX_GARAGES_EX][PosZTwo]       = 52.3671875;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo]    = 270;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP]      = -2161.625;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP]      = 654.63641357422;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP]      = 52.3671875;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP]    = 270;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP]   = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], WORLD_DEFAULT_INTERIOR);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL);
	GaragesEx[MAX_GARAGES_EX][Interior]    = 6;
	GaragesEx[MAX_GARAGES_EX][World]       = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][Lock]       = false;
	GaragesEx[MAX_GARAGES_EX][Dueno]       = YKZ;

	/// SALIDA YKZ
	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne]       = 938.30682373047;
	GaragesEx[MAX_GARAGES_EX][PosYOne]       = 1906.4091796875;
	GaragesEx[MAX_GARAGES_EX][PosZOne]       = 10.953544616699;
	GaragesEx[MAX_GARAGES_EX][PosZZOne]    = 180;
	GaragesEx[MAX_GARAGES_EX][PosXOneP]    = 938.23901367188;
	GaragesEx[MAX_GARAGES_EX][PosYOneP]    = 1910.8675537109;
	GaragesEx[MAX_GARAGES_EX][PosZOneP]    = 10.953544616699;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP]    = 180;
	GaragesEx[MAX_GARAGES_EX][PosXTwo]       = -2176.0026855469;
	GaragesEx[MAX_GARAGES_EX][PosYTwo]       = 693.22210693359;
	GaragesEx[MAX_GARAGES_EX][PosZTwo]       = 53.890625;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo]    = 90;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP]      = -2172.4536132813;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP]      = 692.95495605469;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP]      = 53.890625;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP]    = 90;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP]   = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], WORLD_DEFAULT_INTERIOR);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL);
	GaragesEx[MAX_GARAGES_EX][Interior]    = 6;
	GaragesEx[MAX_GARAGES_EX][World]       = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][Lock]       = false;
	GaragesEx[MAX_GARAGES_EX][Dueno]       = YKZ;

	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne]       = 1034.2763671875;
	GaragesEx[MAX_GARAGES_EX][PosYOne]       = 1272.2180175781;
	GaragesEx[MAX_GARAGES_EX][PosZOne]       = 20.464794158936;
	GaragesEx[MAX_GARAGES_EX][PosZZOne]    = 270;
	GaragesEx[MAX_GARAGES_EX][PosXOneP]    = 1030.4272460938;
	GaragesEx[MAX_GARAGES_EX][PosYOneP]    = 1272.2495117188;
	GaragesEx[MAX_GARAGES_EX][PosZOneP]    = 20.464794158936;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP]    = 270;
	GaragesEx[MAX_GARAGES_EX][PosXTwo]       = -2093.2861328125;
	GaragesEx[MAX_GARAGES_EX][PosYTwo]       = 95.113067626953;
	GaragesEx[MAX_GARAGES_EX][PosZTwo]       = 35.3203125;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo]    = 90;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP]      = -2089.1135253906;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP]      = 95.054679870605;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP]      = 35.3203125;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP]    = 90;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP]   = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], WORLD_DEFAULT_INTERIOR);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL);
	GaragesEx[MAX_GARAGES_EX][Interior]    = 7;
	GaragesEx[MAX_GARAGES_EX][World]       = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][Lock]       = false;
	GaragesEx[MAX_GARAGES_EX][Dueno]       = SICARIOS;


	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne]       = 2096.7895507813;
	GaragesEx[MAX_GARAGES_EX][PosYOne]       = 2373.5671386719;
	GaragesEx[MAX_GARAGES_EX][PosZOne]       = 14.096832275391;
	GaragesEx[MAX_GARAGES_EX][PosZZOne]    = 90;
	GaragesEx[MAX_GARAGES_EX][PosXOneP]    = 2101.3508300781;
	GaragesEx[MAX_GARAGES_EX][PosYOneP]    = 2373.4926757813;
	GaragesEx[MAX_GARAGES_EX][PosZOneP]    = 14.790173530579;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP]    = 90;
	GaragesEx[MAX_GARAGES_EX][PosXTwo]       = -2647.4343261719;
	GaragesEx[MAX_GARAGES_EX][PosYTwo]       = 700.46228027344;
	GaragesEx[MAX_GARAGES_EX][PosZTwo]       = 27.924654006958;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo]    = 0;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP]      = -2647.4978027344;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP]      = 694.88836669922;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP]      = 27.934589385986;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP]    = 0;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP]   = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], WORLD_DEFAULT_INTERIOR);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL);
	GaragesEx[MAX_GARAGES_EX][Interior]    = 0;
	GaragesEx[MAX_GARAGES_EX][World]       = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][Lock]       = false;
	GaragesEx[MAX_GARAGES_EX][Dueno]       = SFMD;

	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne]       = 1933.8507;
	GaragesEx[MAX_GARAGES_EX][PosYOne]       = 658.4608;
	GaragesEx[MAX_GARAGES_EX][PosZOne]       = 19.2471;
	GaragesEx[MAX_GARAGES_EX][PosZZOne]    = 270;
	GaragesEx[MAX_GARAGES_EX][PosXOneP]    = 1928.0100;
	GaragesEx[MAX_GARAGES_EX][PosYOneP]    = 658.3610;
	GaragesEx[MAX_GARAGES_EX][PosZOneP]    = 19.3469;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP]    = 270;
	GaragesEx[MAX_GARAGES_EX][PosXTwo]       = -2004.3203;
	GaragesEx[MAX_GARAGES_EX][PosYTwo]       = -142.8797;
	GaragesEx[MAX_GARAGES_EX][PosZTwo]       = 35.5859;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo]    = 270;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP]      = -2010.1976;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP]      = -142.9584;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP]      = 35.7109;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP]    = 270;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP]   = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], WORLD_DEFAULT_INTERIOR);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL);
	GaragesEx[MAX_GARAGES_EX][Interior]    = 12;
	GaragesEx[MAX_GARAGES_EX][World]       = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][Lock]       = false;
	GaragesEx[MAX_GARAGES_EX][Dueno]       = LICENCIEROS;

	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne]       = 1933.5496;
	GaragesEx[MAX_GARAGES_EX][PosYOne]       = 649.3836;
	GaragesEx[MAX_GARAGES_EX][PosZOne]       = 19.2213;
	GaragesEx[MAX_GARAGES_EX][PosZZOne]    = 270;
	GaragesEx[MAX_GARAGES_EX][PosXOneP]    = 1928.0114;
	GaragesEx[MAX_GARAGES_EX][PosYOneP]    = 649.5203;
	GaragesEx[MAX_GARAGES_EX][PosZOneP]    = 19.3580;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP]    = 270;
	GaragesEx[MAX_GARAGES_EX][PosXTwo]       = -2005.0909;
	GaragesEx[MAX_GARAGES_EX][PosYTwo]       = -133.3742;
	GaragesEx[MAX_GARAGES_EX][PosZTwo]       = 35.5859;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo]    = 270;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP]      = -2010.1976;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP]      = -133.5117;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP]      = 35.7109;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP]    = 270;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP]   = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], WORLD_DEFAULT_INTERIOR);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL);
	GaragesEx[MAX_GARAGES_EX][Interior]    = 12;
	GaragesEx[MAX_GARAGES_EX][World]       = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][Lock]       = false;
	GaragesEx[MAX_GARAGES_EX][Dueno]       = LICENCIEROS;

	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne]       = 1946.6403;
	GaragesEx[MAX_GARAGES_EX][PosYOne]       = 649.4222;
	GaragesEx[MAX_GARAGES_EX][PosZOne]       = 19.2431;
	GaragesEx[MAX_GARAGES_EX][PosZZOne]    = 90;
	GaragesEx[MAX_GARAGES_EX][PosXOneP]    = 1952.5027;
	GaragesEx[MAX_GARAGES_EX][PosYOneP]    = 649.4376;
	GaragesEx[MAX_GARAGES_EX][PosZOneP]    = 19.3695;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP]    = 90;
	GaragesEx[MAX_GARAGES_EX][PosXTwo]       = -2027.8466;
	GaragesEx[MAX_GARAGES_EX][PosYTwo]       = -133.6878;
	GaragesEx[MAX_GARAGES_EX][PosZTwo]       = 35.1508;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo]    = 90;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP]      = -2022.2086;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP]      = -133.5925;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP]      = 35.2803;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP]    = 90;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP]   = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], WORLD_DEFAULT_INTERIOR);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL);
	GaragesEx[MAX_GARAGES_EX][Interior]    = 12;
	GaragesEx[MAX_GARAGES_EX][World]       = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][Lock]       = false;
	GaragesEx[MAX_GARAGES_EX][Dueno]       = LICENCIEROS;

	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne]       = 1947.4674;
	GaragesEx[MAX_GARAGES_EX][PosYOne]       = 658.5381;
	GaragesEx[MAX_GARAGES_EX][PosZOne]       = 19.2275;
	GaragesEx[MAX_GARAGES_EX][PosZZOne]    = 90;
	GaragesEx[MAX_GARAGES_EX][PosXOneP]    = 1952.5027;
	GaragesEx[MAX_GARAGES_EX][PosYOneP]    = 658.7502;
	GaragesEx[MAX_GARAGES_EX][PosZOneP]    = 19.3469;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP]    = 90;
	GaragesEx[MAX_GARAGES_EX][PosXTwo]       = -2027.6161;
	GaragesEx[MAX_GARAGES_EX][PosYTwo]       = -143.2141;
	GaragesEx[MAX_GARAGES_EX][PosZTwo]       = 35.1960;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo]    = 90;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP]      = -2022.2041;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP]      = -143.0264;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP]      = 35.3163;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP]    = 90;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP]   = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], WORLD_DEFAULT_INTERIOR);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL);
	GaragesEx[MAX_GARAGES_EX][Interior]    = 12;
	GaragesEx[MAX_GARAGES_EX][World]       = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][Lock]       = false;
	GaragesEx[MAX_GARAGES_EX][Dueno]       = LICENCIEROS;

	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne]       = -514.93041992188;
	GaragesEx[MAX_GARAGES_EX][PosYOne]       = 2548.6140136719;
	GaragesEx[MAX_GARAGES_EX][PosZOne]       = 53.559684753418;
	GaragesEx[MAX_GARAGES_EX][PosZZOne]    = 0;
	GaragesEx[MAX_GARAGES_EX][PosXOneP]    = -515.00164794922;
	GaragesEx[MAX_GARAGES_EX][PosYOneP]    = 2544.1303710938;
	GaragesEx[MAX_GARAGES_EX][PosZOneP]    = 53.795310974121;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP]    = 0;
	GaragesEx[MAX_GARAGES_EX][PosXTwo]       = -1935.802734375;
	GaragesEx[MAX_GARAGES_EX][PosYTwo]       = 273.49237060547;
	GaragesEx[MAX_GARAGES_EX][PosZTwo]       = 40.811248779297;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo]    = 180;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP]      = -1936.1304931641;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP]      = 277.72778320313;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP]      = 41.046875;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP]    = 180;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP]   = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], WORLD_DEFAULT_INTERIOR);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL);
	GaragesEx[MAX_GARAGES_EX][Interior]    = 16;
	GaragesEx[MAX_GARAGES_EX][World]       = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][Lock]       = false;
	GaragesEx[MAX_GARAGES_EX][Dueno]       = NFS;

	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne]       = -502.87152099609;
	GaragesEx[MAX_GARAGES_EX][PosYOne]       = 2548.5646972656;
	GaragesEx[MAX_GARAGES_EX][PosZOne]       = 53.559684753418;
	GaragesEx[MAX_GARAGES_EX][PosZZOne]    = 0;
	GaragesEx[MAX_GARAGES_EX][PosXOneP]    = -502.81423950195;
	GaragesEx[MAX_GARAGES_EX][PosYOneP]    = 2544.1293945313;
	GaragesEx[MAX_GARAGES_EX][PosZOneP]    = 53.800487518311;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP]    = 0;
	GaragesEx[MAX_GARAGES_EX][PosXTwo]       = -1928.5319824219;
	GaragesEx[MAX_GARAGES_EX][PosYTwo]       = 273.85021972656;
	GaragesEx[MAX_GARAGES_EX][PosZTwo]       = 40.811248779297;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo]    = 180;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP]      = -1928.6348876953;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP]      = 277.72720336914;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP]      = 41.046875;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP]    = 180;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP]   = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], WORLD_DEFAULT_INTERIOR);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL);
	GaragesEx[MAX_GARAGES_EX][Interior]    = 16;
	GaragesEx[MAX_GARAGES_EX][World]       = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][Lock]       = false;
	GaragesEx[MAX_GARAGES_EX][Dueno]       = NFS;

	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne]       = -500.93087768555;
	GaragesEx[MAX_GARAGES_EX][PosYOne]       = 2572.7307128906;
	GaragesEx[MAX_GARAGES_EX][PosZOne]       = 53.559684753418;
	GaragesEx[MAX_GARAGES_EX][PosZZOne]    = 90;
	GaragesEx[MAX_GARAGES_EX][PosXOneP]    = -496.75540161133;
	GaragesEx[MAX_GARAGES_EX][PosYOneP]    = 2572.8754882813;
	GaragesEx[MAX_GARAGES_EX][PosZOneP]    = 53.865310668945;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP]    = 90;
	GaragesEx[MAX_GARAGES_EX][PosXTwo]       = -1920.5523681641;
	GaragesEx[MAX_GARAGES_EX][PosYTwo]       = 303.55364990234;
	GaragesEx[MAX_GARAGES_EX][PosZTwo]       = 40.811248779297;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo]    = 270;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP]      = -1925.1882324219;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP]      = 303.41903686523;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP]      = 41.046875;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP]    = 270;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP]   = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], WORLD_DEFAULT_INTERIOR);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL);
	GaragesEx[MAX_GARAGES_EX][Interior]    = 16;
	GaragesEx[MAX_GARAGES_EX][World]       = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][Lock]       = false;
	GaragesEx[MAX_GARAGES_EX][Dueno]       = NFS;

	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne]       = 687.81872558594;
	GaragesEx[MAX_GARAGES_EX][PosYOne]       = 1839.5895996094;
	GaragesEx[MAX_GARAGES_EX][PosZOne]       = 5.3098797798157;
	GaragesEx[MAX_GARAGES_EX][PosZZOne]    = 90;
	GaragesEx[MAX_GARAGES_EX][PosXOneP]    = 692.43817138672;
	GaragesEx[MAX_GARAGES_EX][PosYOneP]    = 1839.4022216797;
	GaragesEx[MAX_GARAGES_EX][PosZOneP]    = 5.6091208457947;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP]    = 90;
	GaragesEx[MAX_GARAGES_EX][PosXTwo]       = 2366.7507;
	GaragesEx[MAX_GARAGES_EX][PosYTwo]       = -657.4847;
	GaragesEx[MAX_GARAGES_EX][PosZTwo]       = 128.2232;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo]    = 270;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP]      = 2361.9941;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP]      = -657.5042;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP]      = 128.0922;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP]    = 270;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP]   = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], WORLD_DEFAULT_INTERIOR);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL);
	GaragesEx[MAX_GARAGES_EX][Interior]    = 12;
	GaragesEx[MAX_GARAGES_EX][World]       = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][Lock]       = false;
	GaragesEx[MAX_GARAGES_EX][Dueno]       = LCN;

	MAX_GARAGES_EX++; // Talelr LS Puerta 1
	GaragesEx[MAX_GARAGES_EX][PosXOne]       = 1769.3964;
	GaragesEx[MAX_GARAGES_EX][PosYOne]       = -2014.1255;
	GaragesEx[MAX_GARAGES_EX][PosZOne]       = 20.6677;
	GaragesEx[MAX_GARAGES_EX][PosZZOne]    = 87.5977;
	GaragesEx[MAX_GARAGES_EX][PosXOneP]    = 1768.5817;
	GaragesEx[MAX_GARAGES_EX][PosYOneP]    = -2017.8060;
	GaragesEx[MAX_GARAGES_EX][PosZOneP]    = 20.6677;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP]    = 4.2969;
	GaragesEx[MAX_GARAGES_EX][PosXTwo]       = 1769.2628;
	GaragesEx[MAX_GARAGES_EX][PosYTwo]       = -2022.9585;
	GaragesEx[MAX_GARAGES_EX][PosZTwo]       = 14.1458;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo]    = 268.4160;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP]      = 1768.6616;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP]      = -2019.9989;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP]      = 14.1372;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP]    = 182.8985;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP]   = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], WORLD_DEFAULT_INTERIOR);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL);
	GaragesEx[MAX_GARAGES_EX][Interior]    = 15;
	GaragesEx[MAX_GARAGES_EX][World]       = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][Lock]       = false;
	GaragesEx[MAX_GARAGES_EX][Dueno]       = TALLER_LS;

	MAX_GARAGES_EX++; // Talelr LS Puerta 2
	GaragesEx[MAX_GARAGES_EX][PosXOne]       = 1758.8389;
	GaragesEx[MAX_GARAGES_EX][PosYOne]       = -2032.1647;
	GaragesEx[MAX_GARAGES_EX][PosZOne]       = 20.6677;
	GaragesEx[MAX_GARAGES_EX][PosZZOne]    = 91.2127;
	GaragesEx[MAX_GARAGES_EX][PosXOneP]    = 1763.1155;
	GaragesEx[MAX_GARAGES_EX][PosYOneP]    = -2032.0144;
	GaragesEx[MAX_GARAGES_EX][PosZOneP]    = 20.6677;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP]    = 92.6578;
	GaragesEx[MAX_GARAGES_EX][PosXTwo]       = 1768.6405;
	GaragesEx[MAX_GARAGES_EX][PosYTwo]       = -2032.0582;
	GaragesEx[MAX_GARAGES_EX][PosZTwo]       = 13.6160;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo]    = 271.8627;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP]      = 1764.7140;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP]      = -2031.9274;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP]      = 14.0901;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP]    = 275.3095;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP]   = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], WORLD_DEFAULT_INTERIOR);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL);
	GaragesEx[MAX_GARAGES_EX][Interior]    = 15;
	GaragesEx[MAX_GARAGES_EX][World]       = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][Lock]       = false;
	GaragesEx[MAX_GARAGES_EX][Dueno]       = TALLER_LS;

	MAX_GARAGES_EX++; // Talelr LS Puerta 3
	GaragesEx[MAX_GARAGES_EX][PosXOne]       = 1757.9944;
	GaragesEx[MAX_GARAGES_EX][PosYOne]       = -2049.0181;
	GaragesEx[MAX_GARAGES_EX][PosZOne]       = 20.6755;
	GaragesEx[MAX_GARAGES_EX][PosZZOne]    = 91.8393;
	GaragesEx[MAX_GARAGES_EX][PosXOneP]    = 1763.0488;
	GaragesEx[MAX_GARAGES_EX][PosYOneP]    = -2048.9666;
	GaragesEx[MAX_GARAGES_EX][PosZOneP]    = 20.6755;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP]    = 95.1645;
	GaragesEx[MAX_GARAGES_EX][PosXTwo]       = 1768.0338;
	GaragesEx[MAX_GARAGES_EX][PosYTwo]       = -2049.0374;
	GaragesEx[MAX_GARAGES_EX][PosZTwo]       = 13.7018;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo]    = 270.9227;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP]      = 1764.8514;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP]      = -2049.1133;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP]      = 14.0862;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP]    = 267.1626;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP]   = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], WORLD_DEFAULT_INTERIOR);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL);
	GaragesEx[MAX_GARAGES_EX][Interior]    = 15;
	GaragesEx[MAX_GARAGES_EX][World]       = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][Lock]       = false;
	GaragesEx[MAX_GARAGES_EX][Dueno]       = TALLER_LS;

	MAX_GARAGES_EX++; // Talelr LS Puerta 4
	GaragesEx[MAX_GARAGES_EX][PosXOne]       = 1751.2491;
	GaragesEx[MAX_GARAGES_EX][PosYOne]       = -2048.4993;
	GaragesEx[MAX_GARAGES_EX][PosZOne]       = 20.6677;
	GaragesEx[MAX_GARAGES_EX][PosZZOne]    = 0.5135;
	GaragesEx[MAX_GARAGES_EX][PosXOneP]    = 1751.1980;
	GaragesEx[MAX_GARAGES_EX][PosYOneP]    = -2052.7969;
	GaragesEx[MAX_GARAGES_EX][PosZOneP]    = 20.6677;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP]    = 1.1636;
	GaragesEx[MAX_GARAGES_EX][PosXTwo]       = 1751.6617;
	GaragesEx[MAX_GARAGES_EX][PosYTwo]       = -2057.7124;
	GaragesEx[MAX_GARAGES_EX][PosZTwo]       = 13.6694;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo]    = 186.9486;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP]      = 1751.4055;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP]      = -2053.9897;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP]      = 14.1226;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP]    = 181.6218;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP]   = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], WORLD_DEFAULT_INTERIOR);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL);
	GaragesEx[MAX_GARAGES_EX][Interior]    = 15;
	GaragesEx[MAX_GARAGES_EX][World]       = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][Lock]       = false;
	GaragesEx[MAX_GARAGES_EX][Dueno]       = TALLER_LS;

	MAX_GARAGES_EX++; // NFS Concesionario Grotti 1
	GaragesEx[MAX_GARAGES_EX][PosXOne]       = 1640.4020;
	GaragesEx[MAX_GARAGES_EX][PosYOne]       = -2490.1943;
	GaragesEx[MAX_GARAGES_EX][PosZOne]       = 13.6146;
	GaragesEx[MAX_GARAGES_EX][PosZZOne]    = 180.6592;
	GaragesEx[MAX_GARAGES_EX][PosXOneP]    = 1640.4576;
	GaragesEx[MAX_GARAGES_EX][PosYOneP]    = -2485.8657;
	GaragesEx[MAX_GARAGES_EX][PosZOneP]    = 13.6146;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP]    = 182.2259;
	GaragesEx[MAX_GARAGES_EX][PosXTwo]       = 542.1654;
	GaragesEx[MAX_GARAGES_EX][PosYTwo]       = -1290.0685;
	GaragesEx[MAX_GARAGES_EX][PosZTwo]       = 17.2422;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo]    = 3.7638;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP]      = 542.4535;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP]      = -1293.7919;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP]      = 17.2422;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP]    = 356.8705;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP]   = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], WORLD_DEFAULT_INTERIOR);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL);
	GaragesEx[MAX_GARAGES_EX][Interior]    = 3;
	GaragesEx[MAX_GARAGES_EX][World]       = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][Lock]       = false;
	GaragesEx[MAX_GARAGES_EX][Dueno]       = NFS;

	MAX_GARAGES_EX++; // NFS Concesionario Grotti 2
	GaragesEx[MAX_GARAGES_EX][PosXOne]       = 1639.9980;
	GaragesEx[MAX_GARAGES_EX][PosYOne]       = -2499.0281;
	GaragesEx[MAX_GARAGES_EX][PosZOne]       = 13.6146;
	GaragesEx[MAX_GARAGES_EX][PosZZOne]    = 358.3210;
	GaragesEx[MAX_GARAGES_EX][PosXOneP]    = 1640.0181;
	GaragesEx[MAX_GARAGES_EX][PosYOneP]    = -2502.4836;
	GaragesEx[MAX_GARAGES_EX][PosZOneP]    = 13.6146;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP]    = 356.1276;
	GaragesEx[MAX_GARAGES_EX][PosXTwo]       = 540.4600;
	GaragesEx[MAX_GARAGES_EX][PosYTwo]       = -1317.9385;
	GaragesEx[MAX_GARAGES_EX][PosZTwo]       = 17.2422;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo]    = 90.2445;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP]      = 540.2427;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP]      = -1314.4807;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP]      = 17.2422;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP]    = 178.6053;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP]   = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], WORLD_DEFAULT_INTERIOR);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL);
	GaragesEx[MAX_GARAGES_EX][Interior]    = 3;
	GaragesEx[MAX_GARAGES_EX][World]       = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][Lock]       = false;
	GaragesEx[MAX_GARAGES_EX][Dueno]       = NFS;

	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne]       = 1067.6529541016;
	GaragesEx[MAX_GARAGES_EX][PosYOne]       = 1740.3441162109;
	GaragesEx[MAX_GARAGES_EX][PosZOne]       = 10.862812042236;
	GaragesEx[MAX_GARAGES_EX][PosZZOne]    = 0;
	GaragesEx[MAX_GARAGES_EX][PosXOneP]    = 1067.6064453125;
	GaragesEx[MAX_GARAGES_EX][PosYOneP]    = 1736.5032958984;
	GaragesEx[MAX_GARAGES_EX][PosZOneP]    = 10.872812271118;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP]    = 0;
	GaragesEx[MAX_GARAGES_EX][PosXTwo]       = 2644.8520507813;
	GaragesEx[MAX_GARAGES_EX][PosYTwo]       = -2035.0266113281;
	GaragesEx[MAX_GARAGES_EX][PosZTwo]       = 13.489999771118;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo]    = 0;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP]      = 2644.7341308594;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP]      = -2038.8057861328;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP]      = 13.550000190735;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP]    = 0;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP]   = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], WORLD_DEFAULT_INTERIOR);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL);
	GaragesEx[MAX_GARAGES_EX][Interior]    = 5;
	GaragesEx[MAX_GARAGES_EX][World]       = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][Lock]       = false;
	GaragesEx[MAX_GARAGES_EX][Dueno]       = COLTS;

	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne]       = 2650.5327148438;
	GaragesEx[MAX_GARAGES_EX][PosYOne]       = 789.53802490234;
	GaragesEx[MAX_GARAGES_EX][PosZOne]       = 11.072454452515;
	GaragesEx[MAX_GARAGES_EX][PosZZOne]    = 90;
	GaragesEx[MAX_GARAGES_EX][PosXOneP]    = 2655.0598144531;
	GaragesEx[MAX_GARAGES_EX][PosYOneP]    = 789.42309570313;
	GaragesEx[MAX_GARAGES_EX][PosZOneP]    = 11.072454452515;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP]    = 90;
	GaragesEx[MAX_GARAGES_EX][PosXTwo]       = -2458.67578125;
	GaragesEx[MAX_GARAGES_EX][PosYTwo]       = -123.25654602051;
	GaragesEx[MAX_GARAGES_EX][PosZTwo]       = 25.6171875;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo]    = 90;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP]      = -2454.6081542969;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP]      = -123.04374694824;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP]      = 26.130441665649;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP]    = 90;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP]   = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], WORLD_DEFAULT_INTERIOR);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL);
	GaragesEx[MAX_GARAGES_EX][Interior]    = 6;
	GaragesEx[MAX_GARAGES_EX][World]       = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][Lock]       = false;
	GaragesEx[MAX_GARAGES_EX][Dueno]       = AK;

	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne]       = 1957.6334228516;
	GaragesEx[MAX_GARAGES_EX][PosYOne]       = 1860.0373535156;
	GaragesEx[MAX_GARAGES_EX][PosZOne]       = 27.5;
	GaragesEx[MAX_GARAGES_EX][PosZZOne]    = 0;
	GaragesEx[MAX_GARAGES_EX][PosXOneP]    = 1957.6224365234;
	GaragesEx[MAX_GARAGES_EX][PosYOneP]    = 1856.0446777344;
	GaragesEx[MAX_GARAGES_EX][PosZOneP]    = 27.63437461853;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP]    = 0;
	GaragesEx[MAX_GARAGES_EX][PosXTwo]       = 1251.4061279297;
	GaragesEx[MAX_GARAGES_EX][PosYTwo]       = -1181.3676757813;
	GaragesEx[MAX_GARAGES_EX][PosZTwo]       = 23.440000534058;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo]    = 270;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP]      = 1247.2415771484;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP]      = -1181.4162597656;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP]      = 23.578125;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP]    = 270;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP]   = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], WORLD_DEFAULT_INTERIOR);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL);
	GaragesEx[MAX_GARAGES_EX][Interior]    = 8;
	GaragesEx[MAX_GARAGES_EX][World]       = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][Lock]       = false;
	GaragesEx[MAX_GARAGES_EX][Dueno]       = CNN;

	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne]       = 2813.6831054688;
	GaragesEx[MAX_GARAGES_EX][PosYOne]       = 2002.4719238281;
	GaragesEx[MAX_GARAGES_EX][PosZOne]       = 16.83437538147;
	GaragesEx[MAX_GARAGES_EX][PosZZOne]    = 90;
	GaragesEx[MAX_GARAGES_EX][PosXOneP]    = 2817.0947265625;
	GaragesEx[MAX_GARAGES_EX][PosYOneP]    = 2002.4854736328;
	GaragesEx[MAX_GARAGES_EX][PosZOneP]    = 16.83437538147;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP]    = 90;
	GaragesEx[MAX_GARAGES_EX][PosXTwo]       = 1059.4097900391;
	GaragesEx[MAX_GARAGES_EX][PosYTwo]       = -342.16445922852;
	GaragesEx[MAX_GARAGES_EX][PosZTwo]       = 73.9921875;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo]    = 0;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP]      = 1059.6774902344;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP]      = -345.89593505859;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP]      = 73.9921875;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP]    = 0;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP]   = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], WORLD_DEFAULT_INTERIOR);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL);
	GaragesEx[MAX_GARAGES_EX][Interior]    = 10;
	GaragesEx[MAX_GARAGES_EX][World]       = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][Lock]       = false;
	GaragesEx[MAX_GARAGES_EX][Dueno]       = TRAFICANTES;

	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne]       = 2324.89453125;
	GaragesEx[MAX_GARAGES_EX][PosYOne]       = 1415.8875732422;
	GaragesEx[MAX_GARAGES_EX][PosZOne]       = 42.887783050537;
	GaragesEx[MAX_GARAGES_EX][PosZZOne]    = 270;
	GaragesEx[MAX_GARAGES_EX][PosXOneP]    = 2320.1916503906;
	GaragesEx[MAX_GARAGES_EX][PosYOneP]    = 1415.8560791016;
	GaragesEx[MAX_GARAGES_EX][PosZOneP]    = 42.888137817383;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP]    = 270;
	GaragesEx[MAX_GARAGES_EX][PosXTwo]       = 751.17236328125;
	GaragesEx[MAX_GARAGES_EX][PosYTwo]       = -1355.1157226563;
	GaragesEx[MAX_GARAGES_EX][PosZTwo]       = 13.5;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo]    = 0;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP]      = 751.25445556641;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP]      = -1359.1877441406;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP]      = 13.5;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP]    = 0;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP]   = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], WORLD_DEFAULT_INTERIOR);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL);
	GaragesEx[MAX_GARAGES_EX][Interior]    = 11;
	GaragesEx[MAX_GARAGES_EX][World]       = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][Lock]       = false;
	GaragesEx[MAX_GARAGES_EX][Dueno]       = CNN;
	
	///////////////////////////////////////////////////////////////////// NFS Parking Blueberry
	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne]       = 1561.1107;
	GaragesEx[MAX_GARAGES_EX][PosYOne]       = 1261.5313;
	GaragesEx[MAX_GARAGES_EX][PosZOne]       = 10.5590;
	GaragesEx[MAX_GARAGES_EX][PosZZOne]    = 270.9731;
	GaragesEx[MAX_GARAGES_EX][PosXOneP]    = 1555.8536;
	GaragesEx[MAX_GARAGES_EX][PosYOneP]    = 1261.6836;
	GaragesEx[MAX_GARAGES_EX][PosZOneP]    = 10.8337;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP]    = 271.7847;
	GaragesEx[MAX_GARAGES_EX][PosXTwo]       = -56.3266;
	GaragesEx[MAX_GARAGES_EX][PosYTwo]       = -224.0616;
	GaragesEx[MAX_GARAGES_EX][PosZTwo]       = 5.4297;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo]    = 273.2132;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP]      = -60.5768;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP]      = -224.0244;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP]      = 5.4297;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP]    = 268.8474;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP]   = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], WORLD_DEFAULT_INTERIOR);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL);
	GaragesEx[MAX_GARAGES_EX][Interior]    = 10;
	GaragesEx[MAX_GARAGES_EX][World]       = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][Lock]       = false;
	GaragesEx[MAX_GARAGES_EX][Dueno]       = NFS;

	///////////////////////////////////////////////////////////////////// HEORS Garage HQ
	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne]       = 2448.59765625;
	GaragesEx[MAX_GARAGES_EX][PosYOne]       = 2277.84375;
	GaragesEx[MAX_GARAGES_EX][PosZOne]       = 91.909378051758;
	GaragesEx[MAX_GARAGES_EX][PosZZOne]    = 0;
	GaragesEx[MAX_GARAGES_EX][PosXOneP]    = 2448.52734375;
	GaragesEx[MAX_GARAGES_EX][PosYOneP]    = 2272.7429199219;
	GaragesEx[MAX_GARAGES_EX][PosZOneP]    = 91.759376525879;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP]    = 0;
	GaragesEx[MAX_GARAGES_EX][PosXTwo]       = 2787.6667480469;
	GaragesEx[MAX_GARAGES_EX][PosYTwo]       = -1624.4322509766;
	GaragesEx[MAX_GARAGES_EX][PosZTwo]       = 10.759050369263;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo]    = 0;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP]      = 2787.5769042969;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP]      = -1628.7841796875;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP]      = 10.92715549469;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP]    = 0;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP]   = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], WORLD_DEFAULT_INTERIOR);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL);
	GaragesEx[MAX_GARAGES_EX][Interior]    = 4;
	GaragesEx[MAX_GARAGES_EX][World]       = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][Lock]       = false;
	GaragesEx[MAX_GARAGES_EX][Dueno]       = HEORS;

	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne]       = -27.256742477417;
	GaragesEx[MAX_GARAGES_EX][PosYOne]       = 2520.5998535156;
	GaragesEx[MAX_GARAGES_EX][PosZOne]       = 16.343023300171;
	GaragesEx[MAX_GARAGES_EX][PosZZOne]    = 180;
	GaragesEx[MAX_GARAGES_EX][PosXOneP]    = -27.153844833374;
	GaragesEx[MAX_GARAGES_EX][PosYOneP]    = 2525.5729980469;
	GaragesEx[MAX_GARAGES_EX][PosZOneP]    = 16.518749237061;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP]    = 180;
	GaragesEx[MAX_GARAGES_EX][PosXTwo]       = -2105.2783203125;
	GaragesEx[MAX_GARAGES_EX][PosYTwo]       = 901.8046875;
	GaragesEx[MAX_GARAGES_EX][PosZTwo]       = 76.7109375;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo]    = 0;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP]      = -2105.2778320313;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP]      = 897.35693359375;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP]      = 76.7109375;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP]    = 0;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP]   = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], WORLD_DEFAULT_INTERIOR);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL);
	GaragesEx[MAX_GARAGES_EX][Interior]    = 5;
	GaragesEx[MAX_GARAGES_EX][World]       = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][Lock]       = false;
	GaragesEx[MAX_GARAGES_EX][Dueno]       = VELTRAN;

	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne]       = -49.709205627441;
	GaragesEx[MAX_GARAGES_EX][PosYOne]       = 2521.1147460938;
	GaragesEx[MAX_GARAGES_EX][PosZOne]       = 16.343023300171;
	GaragesEx[MAX_GARAGES_EX][PosZZOne]    = 270;
	GaragesEx[MAX_GARAGES_EX][PosXOneP]    = -53.899585723877;
	GaragesEx[MAX_GARAGES_EX][PosYOneP]    = 2521.0920410156;
	GaragesEx[MAX_GARAGES_EX][PosZOneP]    = 16.518749237061;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP]    = 270;
	GaragesEx[MAX_GARAGES_EX][PosXTwo]       = -2133.775390625;
	GaragesEx[MAX_GARAGES_EX][PosYTwo]       = 899.67431640625;
	GaragesEx[MAX_GARAGES_EX][PosZTwo]       = 80;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo]    = 90;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP]      = -2129.2312011719;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP]      = 899.56573486328;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP]      = 80;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP]    = 90;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP]   = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], WORLD_DEFAULT_INTERIOR);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL);
	GaragesEx[MAX_GARAGES_EX][Interior]    = 5;
	GaragesEx[MAX_GARAGES_EX][World]       = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][Lock]       = false;
	GaragesEx[MAX_GARAGES_EX][Dueno]       = VELTRAN;

	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne]       = -49.725120544434;
	GaragesEx[MAX_GARAGES_EX][PosYOne]       = 2510.0656738281;
	GaragesEx[MAX_GARAGES_EX][PosZOne]       = 16.343023300171;
	GaragesEx[MAX_GARAGES_EX][PosZZOne]    = 270;
	GaragesEx[MAX_GARAGES_EX][PosXOneP]    = -53.899185180664;
	GaragesEx[MAX_GARAGES_EX][PosYOneP]    = 2510.0354003906;
	GaragesEx[MAX_GARAGES_EX][PosZOneP]    = 16.518749237061;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP]    = 270;
	GaragesEx[MAX_GARAGES_EX][PosXTwo]       = -2133.763671875;
	GaragesEx[MAX_GARAGES_EX][PosYTwo]       = 890.0751953125;
	GaragesEx[MAX_GARAGES_EX][PosZTwo]       = 80;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo]    = 90;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP]      = -2129.2338867188;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP]      = 890.00640869141;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP]      = 80;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP]    = 90;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP]   = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], WORLD_DEFAULT_INTERIOR);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL);
	GaragesEx[MAX_GARAGES_EX][Interior]    = 5;
	GaragesEx[MAX_GARAGES_EX][World]       = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][Lock]       = false;
	GaragesEx[MAX_GARAGES_EX][Dueno]       = VELTRAN;

	// LSMD Izquierda
	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne]       = -24.332330703735;
	GaragesEx[MAX_GARAGES_EX][PosYOne]       = 1520.1669921875;
	GaragesEx[MAX_GARAGES_EX][PosZOne]       = 13.094888305664;
	GaragesEx[MAX_GARAGES_EX][PosZZOne]    = 0;
	GaragesEx[MAX_GARAGES_EX][PosXOneP]    = -24.343612670898;
	GaragesEx[MAX_GARAGES_EX][PosYOneP]    = 1515.1636962891;
	GaragesEx[MAX_GARAGES_EX][PosZOneP]    = 12.7953125;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP]    = 0;
	GaragesEx[MAX_GARAGES_EX][PosXTwo]       = 1179.4501953125;
	GaragesEx[MAX_GARAGES_EX][PosYTwo]       = -1338.9814453125;
	GaragesEx[MAX_GARAGES_EX][PosZTwo]       = 14.145274162292;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo]    = 270;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP]      = 1173.2486572266;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP]      = -1339.0900878906;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP]      = 13.990941047668;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP]    = 270;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP]   = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], WORLD_DEFAULT_INTERIOR);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL);
	GaragesEx[MAX_GARAGES_EX][Interior]    = 18;
	GaragesEx[MAX_GARAGES_EX][World]       = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][Lock]       = false;
	GaragesEx[MAX_GARAGES_EX][Dueno]       = LSMD;

	// LSMD Derecha
	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne]       = 39.006175994873;
	GaragesEx[MAX_GARAGES_EX][PosYOne]       = 1520.7033691406;
	GaragesEx[MAX_GARAGES_EX][PosZOne]       = 13.094888305664;
	GaragesEx[MAX_GARAGES_EX][PosZZOne]    = 0;
	GaragesEx[MAX_GARAGES_EX][PosXOneP]    = 39.112873077393;
	GaragesEx[MAX_GARAGES_EX][PosYOneP]    = 1515.1691894531;
	GaragesEx[MAX_GARAGES_EX][PosZOneP]    = 12.7953125;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP]    = 0;
	GaragesEx[MAX_GARAGES_EX][PosXTwo]       = 1178.9580078125;
	GaragesEx[MAX_GARAGES_EX][PosYTwo]       = -1308.328125;
	GaragesEx[MAX_GARAGES_EX][PosZTwo]       = 14.065633773804;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo]    = 270;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP]      = 1173.2722167969;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP]      = -1308.2825927734;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP]      = 13.993656158447;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP]    = 270;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP]   = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], WORLD_DEFAULT_INTERIOR);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL);
	GaragesEx[MAX_GARAGES_EX][Interior]    = 18;
	GaragesEx[MAX_GARAGES_EX][World]       = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][Lock]       = false;
	GaragesEx[MAX_GARAGES_EX][Dueno]       = LSMD;
   
	MAX_GARAGES_EX++;
	GaragesEx[MAX_GARAGES_EX][PosXOne]       = 1906.8438720703;
	GaragesEx[MAX_GARAGES_EX][PosYOne]       = 1177.7894287109;
	GaragesEx[MAX_GARAGES_EX][PosZOne]       = 18.724687576294;
	GaragesEx[MAX_GARAGES_EX][PosZZOne]    = 0;
	GaragesEx[MAX_GARAGES_EX][PosXOneP]    = 1906.9635009766;
	GaragesEx[MAX_GARAGES_EX][PosYOneP]    = 1171.5113525391;
	GaragesEx[MAX_GARAGES_EX][PosZOneP]    = 18.354686737061;
	GaragesEx[MAX_GARAGES_EX][PosZZOneP]    = 0;
	GaragesEx[MAX_GARAGES_EX][PosXTwo]       = 2012.5134277344;
	GaragesEx[MAX_GARAGES_EX][PosYTwo]       = -1413.5830078125;
	GaragesEx[MAX_GARAGES_EX][PosZTwo]       = 17.275236129761;
	GaragesEx[MAX_GARAGES_EX][PosZZTwo]    = 180;
	GaragesEx[MAX_GARAGES_EX][PosXTwoP]      = 2012.5570068359;
	GaragesEx[MAX_GARAGES_EX][PosYTwoP]      = -1408.4260253906;
	GaragesEx[MAX_GARAGES_EX][PosZTwoP]      = 16.9921875;
	GaragesEx[MAX_GARAGES_EX][PosZZTwoP]    = 180;
	GaragesEx[MAX_GARAGES_EX][PickupIDOneP]   = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXOneP], GaragesEx[MAX_GARAGES_EX][PosYOneP], GaragesEx[MAX_GARAGES_EX][PosZOneP], WORLD_DEFAULT_INTERIOR);
	GaragesEx[MAX_GARAGES_EX][PickupIDTwoP] = CreatePickup(1239, 1, GaragesEx[MAX_GARAGES_EX][PosXTwoP], GaragesEx[MAX_GARAGES_EX][PosYTwoP], GaragesEx[MAX_GARAGES_EX][PosZTwoP], WORLD_NORMAL);
	GaragesEx[MAX_GARAGES_EX][Interior]    = 18;
	GaragesEx[MAX_GARAGES_EX][World]       = WORLD_DEFAULT_INTERIOR;
	GaragesEx[MAX_GARAGES_EX][Lock]       = false;
	GaragesEx[MAX_GARAGES_EX][Dueno]       = LSMD;

	// END GARAGESEX
	/////////////////////////////////////////////////////////////////////
}
public UpdateLockDoorForPlayer(pickupid, lock, pickup2)
{
	for (new i = 0; i < MAX_PLAYERS; i++)
	{
	    if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 )
	    {
	        if ( PlayersDataOnline[i][InPickup] == pickupid )
	        {
				PlayersDataOnline[i][MyPickupLock] = lock;
			}
			else if ( PlayersDataOnline[i][InPickup] == pickup2 )
			{
				PlayersDataOnline[i][MyPickupLock] = lock;
			}

		}
	}
}
public IsBizzBarra(playerid)
{
	if ( GetPlayerVirtualWorld(playerid) == 4 || PlayersData[playerid][IsPlayerInVehInt])
	{
		if ( IsPlayerInRangeOfPoint(playerid, 	3.0,
												-927.9366,2224.1982,43.2305) ||
			IsPlayerInRangeOfPoint(playerid, 	3.0,
												-909.5477,2224.5791,43.2305) ||
			IsPlayerInRangeOfPoint(playerid, 	3.0,
												-908.4485,2224.5012,51.3453) ||
			IsPlayerInRangeOfPoint(playerid, 	3.0,
												-927.8519,2224.3909,51.34535)||
			IsPlayerInRangeOfPoint(playerid, 	3.0,
												-917.7833,2206.2751,51.3453) ||
			IsPlayerInRangeOfPoint(playerid, 	3.0,
												2398.5273,1107.9354,34.6063) ||
			IsPlayerInRangeOfPoint(playerid, 	3.0,
												970.8110,-47.7546,1001.1172) ||
			IsPlayerInRangeOfPoint(playerid, 	3.0,
												-786.2424,498.2604,1371.7422)	)
		{
		    return true;
		}
	}
	return false;
}
public ConvertMap(map[], option)
{
	new DirBD[50];
	new DirBDS[50];
	format(DirBD, sizeof(DirBD), "\\Convert\\%s.map", map);
	format(DirBDS, sizeof(DirBDS), "\\Convert\\%s.ulp", map);
	if ( fexist(DirBD) )
	{
	    new ArrayPass[11] =  {false, false, 8, false, false, 1, 2, 3, 4 , 5, 6};
		new DataRead[600];
		new File:ReadDataC;
		new File:SaveDataC;
		new Model;
       	new TempData[50];
       	new EndB;
       	new ConteoAA;
		new Float:FloatPos[6];
        ReadDataC = fopen(DirBD, io_read);
	    SaveDataC = fopen(DirBDS, io_write);
        while ( !EndB  )
        {
        	fread(ReadDataC, DataRead);
        	new PosFindC;
        	new NextComillas;
        	printf("%s", DataRead);
        	for ( new i = 0; i < sizeof(ArrayPass); i++ )
        	{
        		PosFindC = strfind(DataRead, "=\"", false, PosFindC + 1);
        		NextComillas = strfind(DataRead, "\"", false, PosFindC + 2);
        		strmid(TempData, DataRead, PosFindC + 2, NextComillas, sizeof(TempData) );
        		if ( ArrayPass[i] )
        		{
	   				printf("%s", TempData);
        		    if ( ArrayPass[i] == 8 )
        		    {
        		        Model = strval(TempData);
//        		        printf("Model: %i", Model);
					}
					else
					{
       				 	FloatPos[ArrayPass[i] - 1] = floatstr(TempData);
//        		        printf("Pos %i: %i", ArrayPass[i] - 1, FloatPos[ArrayPass[i] - 1]);
					}
				}
			}
			if ( strfind(DataRead, "</map>", false) == 0 )
			{
			    EndB = true;
		    }
		    if ( option && !EndB)
		    {
			    format(DataRead, sizeof(DataRead), "\r\nCreateDynamicObjectExULP(%i,%f,%f,%f,%f,%f,%f,-1,3,-1,MAX_RADIO_STREAM);",
						Model,
						FloatPos[0],
						FloatPos[1],
						FloatPos[2],
						FloatPos[3],
						FloatPos[4],
						FloatPos[5]
						);
			}
			else
			{
			    if ( !option )
			    {
				    new ModelPos = strfind(DataRead, "model=", false);
				    new TempString[400];
					strmid(TempString, DataRead, 0,ModelPos,sizeof(TempString) );
					if ( !ConteoAA )
					{
						format(DataRead, sizeof(DataRead), "<map edf:definitions=\"editor_main\">");
					}
					else if ( EndB )
					{
						format(DataRead, sizeof(DataRead), "\r\n</map>");
				    }
				    else
				    {
						format(DataRead, sizeof(DataRead), "\r\n%smodel=\"%i\" interior=\"0\" dimension=\"0\" posX=\"%f\" posY=\"%f\" posZ=\"%f\" rotX=\"%f\" rotY=\"%f\" rotZ=\"%f\" />",
											    TempString,
												Model,
												FloatPos[0],
												FloatPos[1],
												FloatPos[2],
												FloatPos[3],
												FloatPos[4],
												FloatPos[5]
												);
	/*
	                    posX="3600.5625" posY="-476.9482421875"
						-1196.502197    1641.945679  		31.45000076

						*/
					}
				}
				ConteoAA++;
			}
			fwrite(SaveDataC, DataRead);
       	}
	    fclose(SaveDataC);
        fclose(ReadDataC);
		printf("Conversión finalizada!!");
	}
	else
	{
		printf("ERROR!! El map %s no existe!", DirBD);
	}
}
public GetGarageIdByWorld(houseid, world)
{
	for ( new i = 0; i < MAX_GARAGE_FOR_HOUSE; i++ )
	{
        if ( Garages[houseid][i][WorldG] == world )
		{
		    return i;
        }
    }
	return -1;
}
public GetHouseidIdByWorld(world)
{
    for(new h=1;h<=MAX_HOUSE;h++)
    {
		for ( new i = 0; i < MAX_GARAGE_FOR_HOUSE; i++ )
		{
	        if ( Garages[h][i][PickupidIn] && Garages[h][i][WorldG] == world )
			{
			    return h;
	        }
        }
	}
	return false;
}
public Float:GetPointFromPoint(Float:XpointOne, Float:YpointOne, Float:ZpointOne, Float:XpointTwo, Float:YpointTwo, Float:ZpointTwo)
{
	return (floatabs(XpointOne - XpointTwo) +
		 floatabs(YpointOne - YpointTwo) +
		 floatabs(ZpointOne - ZpointTwo));
}
public IsPointFromPoint(Float:RadioE, Float:XpointOne, Float:YpointOne, Float:ZpointOne, Float:XpointTwo, Float:YpointTwo, Float:ZpointTwo)
{
	if ( floatabs(XpointOne - XpointTwo) <= RadioE &&
		 floatabs(YpointOne - YpointTwo) <= RadioE &&
		 floatabs(ZpointOne - ZpointTwo) <= RadioE
	   )
	{
	    return true;
    }
    else
    {
        return false;
	}
}
public IsVehicleInGarageEx(vehicleid)
{
	new Float:PosVehicleE[3]; GetVehiclePos(vehicleid, PosVehicleE[0], PosVehicleE[1], PosVehicleE[2]);
	for(new i=0;i<=MAX_GARAGES_EX;i++)
	{
		if ( GetVehicleVirtualWorld(vehicleid) == 4 && IsPointFromPoint(100.0, PosVehicleE[0], PosVehicleE[1], PosVehicleE[2], GaragesEx[i][PosXOneP], GaragesEx[i][PosYOneP], GaragesEx[i][PosZOneP]) )
		{
		    return i;
	    }
	}
	return -1;
}

public RemoveVehicleComponentEx(vehicleid, componentid)
{
	RemoveVehicleComponent(vehicleid, componentid);
	DataCars[vehicleid][SlotsTunning][GetVehicleComponentType(componentid)] = 0;
}
public GetVehicleComponentInSlotEx(vehicleid, slotid)
{
	if ( DataCars[vehicleid][SlotsTunning][slotid]  )
	{
		return true;
	}
	else
	{
	    return false;
	}
}
public AddVehicleCommponentTaller(vehicleid, componentid)
{
	if ( GetVehicleComponentInSlotEx(vehicleid, GetVehicleComponentType(componentid)) )
	{
	    RemoveVehicleComponentEx(vehicleid, componentid);
	}
	else
	{
	    AddVehicleComponentEx(vehicleid, componentid);
	}
}
public AddBomba(playerid, type, vehicleid, Float:Xbom, Float:Ybom, Float:Zbom, objectid)
{
	for (new i = 0; i < MAX_BOMBAS_COUNT; i++ )
	{
	    if ( BombasO[i][TypeBomba] == BOMBA_TYPE_NONE )
	    {
   		    new MsgPonerBomba[MAX_TEXT_CHAT];
			if ( type == BOMBA_TYPE_FOOT )
			{
			    format(MsgPonerBomba, sizeof(MsgPonerBomba), "Has puesto una bomba en el piso! El número de contro de la bomba es #%i.", i);
			    new Float:ZZ[3];
				if ( playerid != -1 )
				{
				    switch ( objectid )
				    {
				        case 1654: // Dinámita
				        {
	                        Zbom 	= Zbom - 0.9;
	                        ZZ[0] 	= -90.0;
						}
				        case 1265: // Bolsa
				        {
	                        Zbom 	= Zbom - 0.6;
						}
				        case 1580:
				        {
	                        Zbom 	= Zbom - 1.0;
						}
				        case 1210: // Maletín
				        {
	                        Zbom 	= Zbom - 0.9;
	                        ZZ[0] 	= -90.0;
						}
				        case 1576:
				        {
	                        Zbom 	= Zbom - 1.0;
						}
				        case 1577:
				        {
	                        Zbom 	= Zbom - 1.0;
						}
				        case 1578:
				        {
	                        Zbom 	= Zbom - 1.0;
						}
				        case 1579:
				        {
	                        Zbom 	= Zbom - 1.0;
						}
					}
				}
				else
				{
				    if ( objectid == 1654 || objectid == 1210 )
				    {
				        ZZ[0] = -90.0;
					}
				}
				BombasO[i][ObjectIDO] = objectid;
				BombasO[i][ObjectID]  = CreateDynamicObject(objectid, Xbom, Ybom, Zbom, ZZ[0], ZZ[1], ZZ[2], -1, -1, -1, MAX_RADIO_STREAM); //
				BombasO[i][PosX]      = Xbom;
				BombasO[i][PosY] 	  = Ybom;
				BombasO[i][PosZ]  	  = Zbom;
				BombasO[i][TypeBomba] = BOMBA_TYPE_FOOT;
			}
			else
			{
			    format(MsgPonerBomba, sizeof(MsgPonerBomba), "Has puesto una bomba en éste vehículo! El número de contro de la bomba es #%i.", i);
				BombasO[i][ObjectID]  = vehicleid;
				BombasO[i][TypeBomba] = BOMBA_TYPE_CAR;
			}
			if ( playerid != -1 )
			{
				SendInfoMessage(playerid, 2, "0", MsgPonerBomba);
			}
//			BombasO[i][TimerID] = SetTimerEx("ActivarBomba", MAX_BOMBA_TIME_INACTIVE, false, "d", i);
			return true;
		}
	}
	if ( playerid != -1 )
	{
		SendInfoMessage(playerid, 0, "1294", "Han alcanzado el número de bombas plantadas!");
	}
	return false;
}
public RemoveBomba(bombaid)
{
	if ( BombasO[bombaid][TypeBomba] != BOMBA_TYPE_NONE )
	{
	    if ( BombasO[bombaid][TypeBomba] == BOMBA_TYPE_FOOT )
	    {
		    DestroyDynamicObject(BombasO[bombaid][ObjectID]);
		}
		BombasO[bombaid][TypeBomba] = BOMBA_TYPE_NONE;
//		KillTimer(BombasO[bombaid][TimerID]);
	    return true;
	}
	return false;
}
public IsPlayerNearBomba(playerid, Float:Range, option)
{
	if ( option == -1 )
	{
		for (new i = 0; i < MAX_BOMBAS_COUNT; i++ )
		{
	        if ( IsPlayerNearBombaEx(playerid, i, Range) )
	        {
	            return i;
			}
		}
	}
	else
	{
        if ( IsPlayerNearBombaEx(playerid, option, Range) )
        {
            return option;
		}
	}
	return -1;
}
public IsPlayerNearBombaEx(playerid, bombaid, Float:Range)
{
    new Float:VehPos[3];
    if ( BombasO[bombaid][TypeBomba] != BOMBA_TYPE_NONE )
    {
	    if ( BombasO[bombaid][TypeBomba] == BOMBA_TYPE_FOOT )
		{
			if ( IsPlayerInRangeOfPoint(playerid, Range,
												 BombasO[bombaid][PosX], BombasO[bombaid][PosY], BombasO[bombaid][PosZ] ) )
			{
				return true;
			}
		}
		else
		{
			GetVehiclePos(BombasO[bombaid][ObjectID], VehPos[0], VehPos[1], VehPos[2]);
			if ( IsPlayerInRangeOfPoint(playerid, Range,
												 VehPos[0], VehPos[1], VehPos[2] ) )
			{
				return true;
			}
		}
	}
	return false;
}
public ActivarBomba(bombaid, count)
{
	if ( BombasO[bombaid][TypeBomba] != BOMBA_TYPE_NONE )
	{
	    if ( BombasO[bombaid][TypeBomba] == BOMBA_TYPE_CAR )
		{
		    GetVehiclePos(BombasO[bombaid][ObjectID], BombasO[bombaid][PosX], BombasO[bombaid][PosY], BombasO[bombaid][PosZ]);
		}
		for (new i = 0; i < count; i++)
		{
			CreateExplosion(BombasO[bombaid][PosX], BombasO[bombaid][PosY], BombasO[bombaid][PosZ], 2, 10.0);
		}
		RemoveBomba(bombaid);
		return true;
	}
	return false;
}
public DesactivarBomba(playerid, bombaid)
{
	if ( BombasO[bombaid][TypeBomba] != BOMBA_TYPE_NONE )
	{
    	PlayersData[playerid][Bombas]++;
		RemoveBomba(bombaid);
		return true;
	}
	return false;
}
public IsVehicleHaveBomba(vehicleid)
{
	for (new i = 0; i < MAX_BOMBAS_COUNT; i++ )
	{
	    if ( BombasO[i][TypeBomba] == BOMBA_TYPE_CAR && BombasO[i][ObjectID] == vehicleid)
	    {
			return i;
		}
	}
	return -1;
}
public ShowBombas(playerid)
{
	new BombasDialog[1750];
	new TempConvert[60];
	new ConteoBombas = -1;
	new TiposBomb[2][9] = {"Piso", "Vehículo"};
	for (new i = 0; i < MAX_BOMBAS_COUNT; i++ )
	{
	    if ( BombasO[i][TypeBomba] != BOMBA_TYPE_NONE )
	    {
			if ( ConteoBombas != -1 )
			{
			    format(TempConvert, sizeof(TempConvert), "\r\n{E6E6E6}Bomba {F5FF00}#%i {00A5FF}[%s]", i, TiposBomb[BombasO[i][TypeBomba] - 1]);
	    	}
			else
			{
			    format(TempConvert, sizeof(TempConvert), "{E6E6E6}Bomba {F5FF00}#%i {00A5FF}[%s]", i, TiposBomb[BombasO[i][TypeBomba] - 1]);
			}
	        strcat(BombasDialog, TempConvert, sizeof(BombasDialog));
	        ConteoBombas++;
	        PlayersDataOnline[playerid][SaveAfterAgenda][ConteoBombas] = i;
        }
	}
	if (ConteoBombas != -1)
	{
		ShowPlayerDialogEx(playerid,77,DIALOG_STYLE_LIST,"{00A5FF}Bombas - Control", BombasDialog, "Detonar", "Salir");
	}
	else
	{
		ShowPlayerDialogEx(playerid,999,DIALOG_STYLE_MSGBOX,"{00A5FF}Bombas - Control", "{F0F0F0}No se encontrarón bombas.", "Aceptar", "");
	}
}
public LoadBombas()
{
	new TempDirBombas[25];
    new BombasDataALL[MAX_PLAYER_DATA];
    new BombasDataSlots[6][MAX_PLAYER_NAME];
    new BombaType;
	for (new i = 0; i < MAX_BOMBAS_COUNT; i++ )
	{
	    format(TempDirBombas, sizeof(TempDirBombas), "%s%i.ulp", DIR_BOMBAS, i);
		if ( fexist(TempDirBombas) )
		{
			new File:LoadBombasF = fopen(TempDirBombas, io_read);
			fread(LoadBombasF, BombasDataALL);
			fclose(LoadBombasF);

			new PosSplitAfter = 0;
			for ( new s = 0; s < 6; s++ )
			{
				PosSplitAfter = strfind(BombasDataALL, "|", false);
				strmid(BombasDataSlots[s], BombasDataALL, 0, PosSplitAfter, sizeof(BombasDataALL));
				strdel(BombasDataALL, 0, PosSplitAfter + 1);
			}
			BombaType 		= strval(BombasDataSlots[0]);
			if ( BombaType != BOMBA_TYPE_NONE )
			{
				AddBomba(-1, BombaType, strval(BombasDataSlots[1]), floatstr(BombasDataSlots[2]), floatstr(BombasDataSlots[3]), floatstr(BombasDataSlots[4]), strval(BombasDataSlots[5]));
			}
		}
	}
}
public SaveBombas()
{
	new TempDirBombas[25];
    new BombasDataALL[MAX_PLAYER_DATA];
	for (new i = 0; i < MAX_BOMBAS_COUNT; i++ )
	{
	    format(TempDirBombas, sizeof(TempDirBombas), "%s%i.ulp", DIR_BOMBAS, i);

	 	format(BombasDataALL, MAX_PLAYER_DATA, "%i|%i|%f|%f|%f|%i|",
	 	BombasO[i][TypeBomba],
		BombasO[i][ObjectID],
		BombasO[i][PosX],
		BombasO[i][PosY],
		BombasO[i][PosZ],
		BombasO[i][ObjectIDO]);

		new File:LoadBombasF = fopen(TempDirBombas, io_write);
		fwrite(LoadBombasF, BombasDataALL);
		fclose(LoadBombasF);
	}
}
public LoadVCP()
{
	new TempDirSVCP[25];
    new VCPDataALL[MAX_PLAYER_DATA];
    new VPCDataSlots[5][MAX_PLAYER_NAME];
    new ObjectIDT;
	for (new i=0; i < MAX_OBJECTS_VALLAS_CONOS_PINCHOS; i++)
	{
	    format(TempDirSVCP, sizeof(TempDirSVCP), "%s%i.ulp", DIR_VCP, i);
		if ( fexist(TempDirSVCP) )
		{
			new File:LoadVCPF = fopen(TempDirSVCP, io_read);
			fread(LoadVCPF, VCPDataALL);
			fclose(LoadVCPF);

			new PosSplitAfter = 0;
			for ( new s = 0; s < 5; s++ )
			{
				PosSplitAfter = strfind(VCPDataALL, "|", false);
				strmid(VPCDataSlots[s], VCPDataALL, 0, PosSplitAfter, sizeof(VCPDataALL));
				strdel(VCPDataALL, 0, PosSplitAfter + 1);
			}
			ObjectIDT 		= strval(VPCDataSlots[0]);
			if ( ObjectIDT != -1 )
			{
				AddVCP(-1, strval(VPCDataSlots[0]), floatstr(VPCDataSlots[1]), floatstr(VPCDataSlots[2]), floatstr(VPCDataSlots[3]), floatstr(VPCDataSlots[4]));
			}
		}
	}
}
public SaveVCP()
{
	new TempDirSVCP[25];
    new PCVDataALL[MAX_PLAYER_DATA];
	for (new i=0; i < MAX_OBJECTS_VALLAS_CONOS_PINCHOS; i++)
	{
	    format(TempDirSVCP, sizeof(TempDirSVCP), "%s%i.ulp", DIR_VCP, i);

	 	format(PCVDataALL, MAX_PLAYER_DATA, "%i|%f|%f|%f|%f|",
		VCP[i][objectmodel],
		VCP[i][ObjX],
		VCP[i][ObjY],
		VCP[i][ObjZ],
		VCP[i][ObjZRot]);

		new File:SaveVCPF = fopen(TempDirSVCP, io_write);
		fwrite(SaveVCPF, PCVDataALL);
		fclose(SaveVCPF);
	}
}
public GivePlayerMoneyEx(playerid, money)
{
	PlayersDataOnline[playerid][StateMoneyPass] = gettime() + 5;
    PlayersData[playerid][Dinero] += money;
}
public MsgAdminUseCommands(level, playerid, commands[])
{
	if ( PlayersData[playerid][Admin] != 9 )
	{
	    new MsgPerNivel9[256];
	    if ( PlayersData[playerid][Admin] )
	    {
	    	format(MsgPerNivel9, sizeof(MsgPerNivel9), "{A49C00}%s %s[%i] ha usado el comando: %s", LOGO_STAFF, PlayersDataOnline[playerid][NameOnlineFix], playerid, commands);
	   	}
	   	else
	   	{
	    	format(MsgPerNivel9, sizeof(MsgPerNivel9), "{A49C00}%s %s[%i] {B90000}(NO ES ADMIN) {A49C00}ha usado el comando: %s", LOGO_STAFF, PlayersDataOnline[playerid][NameOnlineFix], playerid, commands);
	   	}
		for (new e = 0; e < MAX_PLAYERS; e++)
		{
		    if ( IsPlayerConnected(e) && PlayersData[e][Admin] == level && PlayersDataOnline[e][State] == 3 && PlayersDataOnline[e][SendCommands] )
		    {
		        SendClientMessage(e, COLOR_CHEATS_REPORTES, MsgPerNivel9);
		    }
	    }
		printf("%s", MsgPerNivel9);
	}
}
public MsgCheatsReportsToAdminsEx(text[], level)
{
	for (new e = 0; e < MAX_PLAYERS; e++)
	{
	    if ( IsPlayerConnected(e) && PlayersData[e][Admin] == level && PlayersDataOnline[e][State] == 3 )
	    {
	        SendClientMessage(e, COLOR_CHEATS_REPORTES, text);
	    }
    }
	printf("%s", text);
}
public MsgCheatsReportsToAdmins(text[])
{
	for (new e = 0; e < MAX_PLAYERS; e++)
	{
	    if ( IsPlayerConnected(e) && PlayersData[e][Admin] >= 1 && PlayersDataOnline[e][State] == 3)
	    {
	        SendClientMessage(e, COLOR_CHEATS_REPORTES, text);
	    }
    }
	printf("%s", text);
}
public MsgKBJWReportsToAdmins(playerid, text[])
{
	for (new e = 0; e < MAX_PLAYERS; e++)
	{
	    if ( IsPlayerConnected(e) && PlayersDataOnline[e][State] == 3 &&( PlayersData[e][Admin] >= 1 || playerid == e ) )
	    {
	        SendClientMessage(e, COLOR_KICK_JAIL_BAN, text);
	    }
    }
	printf("%s", text);
}
public ShowServerStats(playerid)
{
	new ListDialog[1000];
	new TempConvert[150];

	if ( playerid != -1 )
	{
		format(TempConvert, sizeof(TempConvert),
		"{E6E6E6}01- MAX_PLAYERS {00F50A}(%i)", MAX_PLAYERS);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n{E6E6E6}02- MAX_OBJECTS {00F50A}(%i)", CountDynamicObjects());
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n{E6E6E6}03- MAX_TELE {00F50A}(%i)", MAX_TELE);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n{E6E6E6}04- MAX_CAMERAS {00F50A}(%i)", MAX_CAMERAS);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n{E6E6E6}05- MAX_PEAJE {00F50A}(%i)", MAX_PEAJE);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n{E6E6E6}06- MAX_BIZZ_TYPE {00F50A}(%i)", MAX_BIZZ_TYPE);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n{E6E6E6}07- MAX_HOUSE_TYPE {00F50A}(%i)", MAX_HOUSE_TYPE);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n{E6E6E6}08- MAX_GARAGE_TYPE {00F50A}(%i)", MAX_GARAGE_TYPE);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n{E6E6E6}09- MAX_BIZZ {00F50A}(%i)", MAX_BIZZ);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n{E6E6E6}10- MAX_HOUSE {00F50A}(%i)", MAX_HOUSE);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n{E6E6E6}11- MAX_GARAGES {00F50A}(%i)", MAX_GARAGES);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n{E6E6E6}12- MAX_CAJEROS {00F50A}(%i)", MAX_CAJEROS);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n{E6E6E6}13- MAX_DOORS {00F50A}(%i)", MAX_DOORS);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n{E6E6E6}14- MAX_CAR {00F50A}(%i)", MAX_CAR);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n{E6E6E6}15- MAX_CAR_DUENO {00F50A}(%i)", MAX_CAR_DUENO);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n{E6E6E6}16- MAX_CAR_FACCION {00F50A}(%i)", MAX_CAR_FACCION - MAX_CAR_DUENO);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n{E6E6E6}17- MAX_CAR_PUBLIC {00F50A}(%i)", MAX_CAR_PUBLIC - MAX_CAR_FACCION);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n{E6E6E6}18- MAX_GARAGES_EX {00F50A}(%i)", MAX_GARAGES_EX);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n{E6E6E6}19- MAX_GASOLINERAS {00F50A}(%i)", MAX_GASOLINERAS);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n{E6E6E6}20- MAX_PICKUP {00F50A}(%i)", MAX_PICKUP);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n{E6E6E6}21- MAX_TEXT_DRAW {00F50A}(%i)", MAX_TEXT_DRAW);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n{E6E6E6}22- MAX_OBJECT_FIJOS {00F50A}(%i)", MAX_OBJECT_FIJOS);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		ShowPlayerDialogEx(playerid,999,DIALOG_STYLE_LIST,"{00A5FF}Estadísticas del servidor - "WEBPAGE" || RolePlay", ListDialog, "Ok", "");
	}
	else
	{
		format(TempConvert, sizeof(TempConvert),
		"01- MAX_PLAYERS\t\t\t%i", MAX_PLAYERS);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n02- MAX_OBJECTS\t\t\t%i", CountDynamicObjects());
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n03- MAX_TELE\t\t\t%i", MAX_TELE);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n04- MAX_CAMERAS\t\t\t%i", MAX_CAMERAS);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n05- MAX_PEAJE\t\t\t%i", MAX_PEAJE);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n06- MAX_BIZZ_TYPE\t\t%i", MAX_BIZZ_TYPE);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n07- MAX_HOUSE_TYPE\t\t%i", MAX_HOUSE_TYPE);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n08- MAX_GARAGE_TYPE\t\t%i", MAX_GARAGE_TYPE);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n09- MAX_BIZZ\t\t\t%i", MAX_BIZZ);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n10- MAX_HOUSE\t\t\t%i", MAX_HOUSE);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n11- MAX_GARAGES\t\t\t%i", MAX_GARAGES);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n12- MAX_CAJEROS\t\t\t%i", MAX_CAJEROS);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n13- MAX_DOORS\t\t\t%i", MAX_DOORS);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n14- MAX_CAR\t\t\t%i", MAX_CAR);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n15- MAX_CAR_DUENO\t\t%i", MAX_CAR_DUENO);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n16- MAX_CAR_FACCION\t\t%i", MAX_CAR_FACCION - MAX_CAR_DUENO);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n17- MAX_CAR_PUBLIC\t\t%i", MAX_CAR_PUBLIC - MAX_CAR_FACCION);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n18- MAX_GARAGES_EX\t\t%i", MAX_GARAGES_EX);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n19- MAX_GASOLINERAS\t\t%i", MAX_GASOLINERAS);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n20- MAX_PICKUP\t\t\t%i", MAX_PICKUP);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n21- MAX_TEXT_DRAW\t\t%i", MAX_TEXT_DRAW);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		format(TempConvert, sizeof(TempConvert),
		"\r\n22- MAX_OBJECT_FIJOS\t\t%i", MAX_OBJECT_FIJOS);
		strcat(ListDialog, TempConvert, sizeof(ListDialog));

		printf("%s", ListDialog);
	}
}
public Text:TextDrawCreateEx(Float:Xt, Float:Yt, text[])
{
    MAX_TEXT_DRAW++;
    return TextDrawCreate(Xt, Yt, text);
}
public ExistPlate(plate)
{
	for (new i = 1; i <= MAX_CAR_FACCION; i++ )
	{
		if ( DataCars[i][Matricula] == plate )
		{
		    return true;
	    }
	}
	return false;
}
public ChangeVehicle(playerid, vehicleid, modelid, worldid, interiorid)
{

	new Float:VelocityVehicle[3], Float:PosVehicle[4];
	new PosSeat[4]; PosSeat[0] = -1; PosSeat[1] = -1; PosSeat[2] = -1; PosSeat[3] = -1;
	new PanelesV, PuertasV, LucesV, GomasV;
	new LastAlarma = DataCars[vehicleid][AlarmOn];
	new LastEncendido = DataCars[vehicleid][StateEncendido];
	new LastPuente = DataCars[vehicleid][Puente];

	GetVehicleDamageStatus(vehicleid,PanelesV, PuertasV, LucesV, GomasV);

	GetVehicleVelocity(vehicleid, VelocityVehicle[0], VelocityVehicle[1], VelocityVehicle[2]);
	GetVehiclePos(vehicleid, PosVehicle[0], PosVehicle[1], PosVehicle[2]);
	GetVehicleZAngle(vehicleid, PosVehicle[3]);

	for (new i = 0; i < MAX_PLAYERS; i++)
	{
		if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && IsPlayerInAnyVehicle(i) && GetPlayerVehicleID(i) == vehicleid )
		{
            if ( GetPlayerVehicleSeat(i) != 127 )
            {
            	PosSeat[GetPlayerVehicleSeat(i)] = i;
        	}
        	else
        	{
				for (new p = 1; p < sizeof(PosSeat); p++)
				{
				    if ( PosSeat[p] == -1 )
				    {
	            		PosSeat[p] = i;
	            		break;
            		}
				}
			}
		}
	}
	if ( playerid != -1 )
	{
        new MsgChangeVehicle[MAX_TEXT_CHAT];
		format(MsgChangeVehicle, sizeof(MsgChangeVehicle), "%s Has cambiado el vehículo con ID[%i] del modelo \"%s\" por el \"%s\"", LOGO_STAFF, vehicleid, coches_Todos_Nombres[DataCars[vehicleid][Modelo] - 400], coches_Todos_Nombres[modelid - 400]);
        SendClientMessage(playerid, COLOR_MENSAJES_DE_AVISOS, MsgChangeVehicle);
    	CleanTunningSlots(vehicleid);
    }

	if ( vehicleid <= MAX_CAR_DUENO )
    {
        DataCars[vehicleid][Modelo] = modelid;
    }
	DestroyVehicle(vehicleid);
	CreateVehicleEx(modelid,
	PosVehicle[0],
	PosVehicle[1],
	PosVehicle[2],
	PosVehicle[3],
	DataCars[vehicleid][Color1],
	DataCars[vehicleid][Color2],
	vehicleid);

	SetVehicleVirtualWorldEx(vehicleid, worldid);
	LinkVehicleToInteriorEx(vehicleid, interiorid);

	if ( playerid != -1 )
	{
		DataCars[vehicleid][AlarmOn] = false;
		DataCars[vehicleid][StateEncendido] = true;
		DataCars[vehicleid][Puente] = false;
	}
	else
	{
		DataCars[vehicleid][AlarmOn] = LastAlarma;
		DataCars[vehicleid][StateEncendido] = LastEncendido;
		DataCars[vehicleid][Puente] = LastPuente;
	}
	IsVehicleOff(vehicleid);
	for (new i = 0; i < sizeof(PosSeat); i++)
	{
	    if ( PosSeat[i] != -1 )
	    {
    		PutPlayerInVehicle(PosSeat[i], vehicleid, i);
		}
	}
	SetVehicleVelocity(vehicleid, VelocityVehicle[0], VelocityVehicle[1], VelocityVehicle[2]);

	if ( playerid != -1 )
	{
		RepairVehicle(vehicleid);
		DataCars[vehicleid][Gas] = MAX_GAS_VEHICLE;
		DataCars[vehicleid][Oil] = MAX_OIL_VEHICLE;
		DataCars[vehicleid][LastDamage] = 1000.0;
	    SetVehicleHealthEx(vehicleid, DataCars[vehicleid][LastDamage]);
	}
	else
	{
	    SetVehicleHealthEx(vehicleid, DataCars[vehicleid][LastDamage]);
		UpdateVehicleDamageStatus(vehicleid, PanelesV, PuertasV, LucesV, GomasV);
		for (new t = 0; t < 14; t++ )
		{
		    if ( DataCars[vehicleid][SlotsTunning][t] )
		    {
				AddVehicleComponentEx(vehicleid, DataCars[vehicleid][SlotsTunning][t]);
			}
		}

		if ( DataCars[vehicleid][Vinillo] != -1 && IsValidVehiclePaintJob(DataCars[vehicleid][Modelo]) )
		{
			ChangeVehiclePaintjob(vehicleid, DataCars[vehicleid][Vinillo]);
		}
		else
		{
			DataCars[vehicleid][Vinillo] = -1;
		}
	}
	if ( playerid != -1 && PlayersDataOnline[playerid][InCarId] )
	{
    	UpdateDamage(playerid, DataCars[vehicleid][LastDamage]);
		UpdateGasAndOil(vehicleid);
	}
}
public ShowChangePlate(playerid)
{
	ShowPlayerDialogEx(playerid, 79, DIALOG_STYLE_INPUT, "{00A5FF}Taller - Cambio de matrícula", "{F0F0F0}Ingrese el número de matrícula que\ndesea para éste vehículo.", "A gusto", "Aleatoria");
}
public ChangeVehiclePlate(vehicleid, newplate)
{
	if (!newplate)
	{
		do
		{
			DataCars[vehicleid][Matricula] = random(999999) + 100000;
		} while ( !ExistPlate(DataCars[vehicleid][Matricula]) );
	}
	else
	{
		DataCars[vehicleid][Matricula] = newplate;
	}
	format(DataCars[vehicleid][MatriculaString], 32, "%i", DataCars[vehicleid][Matricula]);

	ChangeVehicle(-1, vehicleid, DataCars[vehicleid][Modelo], DataCars[vehicleid][WorldLast], DataCars[vehicleid][InteriorLast]);
}
/*
	PlayersData[playerid][TimeEquipo] = gettime() + 300;

	new MsgMatriculaChanged[MAX_TEXT_CHAT];
	format(MsgMatriculaChanged, sizeof(MsgMatriculaChanged), "Cambiaste la matrícula de éste vehículo por una nueva! Su nueva matrícula es: %i", DataCars[PlayersDataOnline[playerid][MyIDVehicleTunning]][Matricula]);
  	SendInfoMessage(playerid, 3, "0", MsgMatriculaChanged);

	PlayPlayerStreamSound(playerid, SOUND_TUNNING);

*/
public TogglePlayerControllableEx(playerid, toogle)
{
	if ( toogle )
	{
		if ( !PlayersDataOnline[playerid][IsAtado] &&
		!PlayersDataOnline[playerid][IsEsposas] )
		{
			TogglePlayerControllable(playerid, toogle);
		}
	}
	else
	{
		TogglePlayerControllable(playerid, toogle);
	}
}
public ShowCarteraToPlayer(playerid, playeridshow)
{
    new MsgCartera[MAX_TEXT_CHAT];
	SendClientMessage(playeridshow, COLOR_MALETERO_ARMARIO_CAJA_FUERTE,
	 ">>>>>>>>>> .:Cartera:. <<<<<<<<<");
	for (new i = 0; i<=5;i++)
	{
	    if ( PlayersData[playerid][Cartera][i] != CARTERA_TYPE_NADA )
	    {
	        //if
	        switch ( PlayersData[playerid][Cartera][i] )
	        {
	            case CARTERA_TYPE_CHEQUE:
	            {
					format(MsgCartera, sizeof(MsgCartera), "%Cartera %i: %s [Cantidad: $%i] (Número del cheque #%i) [Cuenta a cobrar: %i]", i + 1, CarteraNames[PlayersData[playerid][Cartera][i]], PlayersData[playerid][CarteraC][i], PlayersData[playerid][CarteraT][i], PlayersData[playerid][CarteraI][i]);
				}
				case CARTERA_TYPE_CONDONES:
				{
					format(MsgCartera, sizeof(MsgCartera), "Cartera %i: %s %i", i + 1, CarteraNames[PlayersData[playerid][Cartera][i]], PlayersData[playerid][CarteraC][i]);
				}
				default:
				{
					format(MsgCartera, sizeof(MsgCartera), "Cartera %i: %s", i + 1, CarteraNames[PlayersData[playerid][Cartera][i]]);
				}
			}
		}
		else
		{
			format(MsgCartera, sizeof(MsgCartera), "%Cartera %i: %s", i + 1, CarteraNames[PlayersData[playerid][Cartera][i]]);
		}
		SendClientMessage(playeridshow, COLOR_MALETERO_ARMARIO_CAJA_FUERTE, MsgCartera);
	}
}
public IsNotFullCartera(playeridError, playerid, error[])
{
	for(new i = 0; i< MAX_COUNT_CARTERA; i++)
	{
	    if (PlayersData[playerid][Cartera][i] == CARTERA_TYPE_NADA)
	    {
			return true;
		}
	}
	SendInfoMessage(playeridError, 0, "1321", error);
	return false;
}
public AddObjectToCartera(playerid, objectid, carteraC, carteraT, carteraI)
{
	for(new i = 0; i < MAX_COUNT_CARTERA; i++)
	{
		if (PlayersData[playerid][Cartera][i] == CARTERA_TYPE_NADA)
		{
		    PlayersData[playerid][Cartera][i] = objectid;
		    PlayersData[playerid][CarteraC][i] = carteraC;
		    PlayersData[playerid][CarteraT][i] = carteraT;
		    PlayersData[playerid][CarteraI][i] = carteraI;

			return i;
		}
	}
	return -1;
}
public RemoveObjectToCartera(playerid, carteraid)
{
	if ( PlayersData[playerid][Cartera][carteraid] != CARTERA_TYPE_NADA )
	{
	    new ObjectCartera = PlayersData[playerid][Cartera][carteraid];
		PlayersData[playerid][Cartera][carteraid]  = CARTERA_TYPE_NADA;
	    PlayersData[playerid][CarteraC][carteraid] = 0;
		PlayersData[playerid][CarteraT][carteraid] = 0;
		return ObjectCartera;
	}
	else
	{
	    return -1;
	}
}
public strvalEx(string[])
{
	new stringConvert[20];
	format(stringConvert, sizeof(stringConvert), "%s", string);
    return strval(stringConvert);
}
public ShowManejarCuentas(playerid)
{
	ShowPlayerDialogEx(playerid,80,DIALOG_STYLE_LIST, "{00A5FF}Banco - Controlar mis cuentas","{006CAA}1- {E6E6E6}Ver estadísticas\r\n{006CAA}2- {E6E6E6}Transferir de {00F50A}CUENTA DE AHORROS {00A5FF}-->> {00F50A}CUENTA DE CHEQUES\r\n{006CAA}3- {E6E6E6}Transferir de {00F50A}CUENTA DE CHEQUES {00A5FF}-->> {00F50A}CUENTA DE AHORROS", "Seleccionar", "Volver");
}
public CreateAccountBank(playerid)
{
	new query[200], Cache:cacheid, bankAccountExist, Go = true;
	new AccountNumber;
	do
	{
	    AccountNumber = random(8999999) + 1000000;
		format(query, 200, "SELECT * FROM `%s` WHERE `AccountNumber`=%i;", DIR_ACCOUNT_BANK, AccountNumber);
		cacheid = mysql_query(dataBase, query);
		cache_get_row_count(bankAccountExist);
		cache_delete(cacheid);
		if (!bankAccountExist) Go = false;
	}
	while( Go );
	PlayersData[playerid][AccountBankingOpen] = AccountNumber;

	CleanPlayerAccountBank(playerid);
	SaveAccountBanking(playerid);
}
public IsNotChequesFull(playerid)
	{
	for ( new c = 0; c < MAX_COUNT_CHEQUES; c++ )
	{
	    if ( !Cheques[playerid][c][UniqueID] )
	    {
	        return c;
		}
	}
	return -1;
}
public RemoveCheque(playerid, chequeid)
{
	if ( Cheques[playerid][chequeid][UniqueID] )
	{
		Cheques[playerid][chequeid][UniqueID] = 0;
		Cheques[playerid][chequeid][Type] = 0;
		format(Cheques[playerid][chequeid][NombreCh], MAX_PLAYER_NAME, "No");
		Cheques[playerid][chequeid][Ammount] = 0;
		return true;
	}
	else
	{
	    return false;
	}
}
public CleanPlayerAccountBank(playerid)
{
	for ( new c = 0; c < MAX_COUNT_CHEQUES; c++ )
	{
		Cheques[playerid][c][UniqueID] = 0;
		Cheques[playerid][c][Type] = 0;
		format(Cheques[playerid][c][NombreCh], MAX_PLAYER_NAME, "No");
		Cheques[playerid][c][Ammount] = 0;
	}
}
public LoadAccountBanking(playerid)
{
    if ( PlayersData[playerid][AccountBankingOpen] )
    {
		new query[200], Cache:cacheid, bankAccountExist;
		format(query, 200, "SELECT * FROM `%s` WHERE `AccountNumber`=%i", DIR_ACCOUNT_BANK, PlayersData[playerid][AccountBankingOpen]);
		cacheid = mysql_query(dataBase, query);
		cache_get_row_count(bankAccountExist);

		if (bankAccountExist )
		{
			new ChequesData[700];
			cache_get_value_name(0, "Client", Banking[playerid][Owner], MAX_PLAYER_NAME);
			cache_get_value_name_int(0, "Balance", Banking[playerid][Balance]);
			cache_get_value_name_int(0, "LockIn", Banking[playerid][LockIn]);
			cache_get_value_name_int(0, "LockOut", Banking[playerid][LockOut]);
			cache_get_value_name(0, "Cheques", ChequesData, 700);
		    for ( new c = 0; c < MAX_COUNT_CHEQUES; c++ )
		    {
				new ChequeDataSlot[4][50], SplitPos[2];
				SplitPos[1] = strfind(ChequesData, ",", false);
				for ( new i = 0; i != 4; i++ )
				{
					SplitPos[0] = strfind(ChequesData, "|", false);
					strmid(ChequeDataSlot[i], ChequesData, 0, SplitPos[0]);
					strdel(ChequesData, 0, SplitPos[0]+1);
				}
				strdel(ChequesData, 0, SplitPos[1]+1);

				Cheques[playerid][c][UniqueID] = strval(ChequeDataSlot[0]);
				Cheques[playerid][c][Type]     = strval(ChequeDataSlot[1]);
				format(Cheques[playerid][c][NombreCh], MAX_PLAYER_NAME, "%s", ChequeDataSlot[2]);
				Cheques[playerid][c][Ammount]  = strval(ChequeDataSlot[3]);
			}
		}
		cache_delete(cacheid);
	}
	else
	{
		CreateAccountBank(playerid);
	}
}
public SaveAccountBanking(playerid)
{
	new query[1000], Cache:cacheid, bankAccountExist;
	format(query, 500, "SELECT `AccountNumber` FROM `%s` WHERE `AccountNumber`=%i;", DIR_ACCOUNT_BANK, PlayersData[playerid][AccountBankingOpen]);
	cacheid = mysql_query(dataBase, query);
	cache_get_row_count(bankAccountExist);
	cache_delete(cacheid);

	if (!bankAccountExist)
	{
		format(query, 500, "INSERT INTO `%s` (`AccountNumber`) VALUES ('%i');", DIR_ACCOUNT_BANK, PlayersData[playerid][AccountBankingOpen]);
		mysql_query(dataBase, query, false);
	}

	format(query, 500, "UPDATE `%s` SET ", DIR_ACCOUNT_BANK);
	strcat(query, "`Client`='%e',`Balance`='%i',`LockIn`='%i',`LockOut`='%i'");
	strcat(query, " WHERE `AccountNumber`=%i;");
	mysql_format(dataBase, query, 500, query,
		PlayersDataOnline[playerid][NameOnline],
		Banking[playerid][Balance],
		Banking[playerid][LockIn],
		Banking[playerid][LockOut],
		PlayersData[playerid][AccountBankingOpen]);
	mysql_query(dataBase, query, false);

	format(query, 100, "UPDATE `%s` SET `Cheques`='", DIR_ACCOUNT_BANK);
    for ( new c = 0; c < MAX_COUNT_CHEQUES; c++ )
    {
		new chequesData[60];
		format(chequesData, sizeof(chequesData), "%i|%i|%s|%i|,",
		Cheques[playerid][c][UniqueID],
		Cheques[playerid][c][Type],
		Cheques[playerid][c][NombreCh],
		Cheques[playerid][c][Ammount]);
		
		strcat(query, chequesData, 1000);
	}
	strcat(query, "' WHERE `AccountNumber`=%i;");
	mysql_format(dataBase, query, 1000, query, PlayersData[playerid][AccountBankingOpen]);
	mysql_query(dataBase, query, false);
}
public IsPlayerAccountBankConnected(accountcheck)
{
    for (new i = 0; i < MAX_PLAYERS; i++)
    {
		if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersData[i][AccountBankingOpen] == accountcheck )
		{
		    return i;
		}
	}
	return -1;
}
public ShowVerCheques(playerid)
{
	new ChequesDialog[1200];
	new TempConvert[100];
	new ConteoCheques = -1;
	for (new i = 0; i < MAX_COUNT_CHEQUES; i++)
	{
	    if ( Cheques[playerid][i][UniqueID])
	    {
			if ( ConteoCheques != -1 )
			{
		    	format(TempConvert, sizeof(TempConvert), "\r\n{E6E6E6}Cheques #[%i] {F5FF00}Tipo: %s",
				Cheques[playerid][i][UniqueID],
				Cheques[playerid][i][NombreCh]);
	    	}
			else
			{
		    	format(TempConvert, sizeof(TempConvert), "{E6E6E6}Cheques #[%i] {F5FF00}Tipo: %s",
				Cheques[playerid][i][UniqueID],
				Cheques[playerid][i][NombreCh]);
			}
	        strcat(ChequesDialog, TempConvert, sizeof(ChequesDialog));
	        ConteoCheques++;
	        PlayersDataOnline[playerid][SaveAfterAgenda][ConteoCheques] = i;
        }
	}
	if (ConteoCheques != -1)
	{
		ShowPlayerDialogEx(playerid,84,DIALOG_STYLE_LIST,"{00A5FF}Banco - Cheques", ChequesDialog, "Cancelar", "Volver");
	}
	else
	{
		ShowPlayerDialogEx(playerid,32,DIALOG_STYLE_MSGBOX,"{00A5FF}Banco - Información", "{F0F0F0}No se encontrarón cheques repartidos.", "Aceptar", "Volver");
	}
}
public CrearCheque(playerid, giveplayerid, type, amount, chequeid)
{
	new IDCheque[3]; gettime(IDCheque[0], IDCheque[1], IDCheque[2]);
	new ChequeIDStr[10];
	format(ChequeIDStr, sizeof(ChequeIDStr), "%i%i%i%i", random(100) + 1, IDCheque[0], IDCheque[1], IDCheque[2]);
	printf("%s", ChequeIDStr);
	IDCheque[0] = strvalEx(ChequeIDStr);

	Cheques[playerid][chequeid][UniqueID] 	= IDCheque[0];
	Cheques[playerid][chequeid][Type]		= type;
	if ( type )
	{
		format(Cheques[playerid][chequeid][NombreCh], MAX_PLAYER_NAME, "%s", PlayersDataOnline[giveplayerid][NameOnlineFix]);
	}
	else
	{
		format(Cheques[playerid][chequeid][NombreCh], MAX_PLAYER_NAME, "Nadie");
	}
	Cheques[playerid][chequeid][Ammount]    = amount;

	AddObjectToCartera(giveplayerid, CARTERA_TYPE_CHEQUE, amount, IDCheque[0], PlayersData[playerid][AccountBankingOpen]);
}
public ShowPayCheque(playerid)
{
	new ChequesDialog[1000];
	new TempConvert[100];
	new ConteoCheques = -1;

	for (new i = 0; i<=5;i++)
	{
	    if ( PlayersData[playerid][Cartera][i] == CARTERA_TYPE_CHEQUE )
	    {
			if ( ConteoCheques != -1 )
			{
		    	format(TempConvert, sizeof(TempConvert), "\r\n{E6E6E6}Cantidad $%i (Cheque #[%i]) {F5FF00}Cuenta: %i",
				PlayersData[playerid][CarteraC][i],
				PlayersData[playerid][CarteraT][i],
				PlayersData[playerid][CarteraI][i]);
	    	}
			else
			{
		    	format(TempConvert, sizeof(TempConvert), "{E6E6E6}Cantidad $%i (Cheque #[%i]) {F5FF00}Cuenta: %i",
				PlayersData[playerid][CarteraC][i],
				PlayersData[playerid][CarteraT][i],
				PlayersData[playerid][CarteraI][i]);
			}
	        strcat(ChequesDialog, TempConvert, sizeof(ChequesDialog));
	        ConteoCheques++;
	        PlayersDataOnline[playerid][SaveAfterAgenda][ConteoCheques] = i;
        }
	}
	if (ConteoCheques != -1)
	{
		ShowPlayerDialogEx(playerid,85,DIALOG_STYLE_LIST,"{00A5FF}Banco - Cobrar un Cheque", ChequesDialog, "Cobrar", "Volver");
	}
	else
	{
		ShowPlayerDialogEx(playerid,32,DIALOG_STYLE_MSGBOX,"{00A5FF}Banco - Información", "{F0F0F0}No llevas cheques en la cartera para cobrar.", "Aceptar", "Volver");
	}
}
public PayCheckToPlayer(playerid, carteraid)
{
	new playeridConnected = IsPlayerAccountBankConnected(PlayersData[playerid][CarteraI][carteraid]);
	if ( playeridConnected != -1 )
	{
	    ////////////////////////////
	    new Cobrado = -1;
	    for ( new c = 0; c < MAX_COUNT_CHEQUES; c++ )
	    {
	        if ( Cheques[playeridConnected][c][UniqueID] == PlayersData[playerid][CarteraT][carteraid] )
	        {
	            Cobrado = c;
				break;
			}
		}
		if ( Cobrado != -1 )
		{
		    if ( Banking[playeridConnected][LockOut] )
		    {
				if ( !Cheques[playeridConnected][Cobrado][Type] || Cheques[playeridConnected][Cobrado][Type] && strfind(Cheques[playeridConnected][Cobrado][NombreCh], PlayersDataOnline[playerid][NameOnlineFix], false) == 0 && strlen(Cheques[playeridConnected][Cobrado][NombreCh]) == strlen(PlayersDataOnline[playerid][NameOnlineFix]) )
				{
				    if ( Banking[playeridConnected][Balance] >= PlayersData[playerid][CarteraC][carteraid] )
				    {
						new StatsBank[400];
						format(StatsBank, sizeof(StatsBank), "{E6E6E6}Has cobrado éste cheque con éxito!\n\n     {F5FF00}..::Resumen::..\n{E6E6E6}Propietario: {00A5FF}%s\n{E6E6E6}# Cuenta: {F5FF00}%i\n{E6E6E6}# Cheque: {F5FF00}%i\n{E6E6E6}Cantidad: {00F50A}$%i",
						Banking[playeridConnected][Owner],
						PlayersData[playerid][CarteraI][carteraid],
						PlayersData[playerid][CarteraT][carteraid],
						PlayersData[playerid][CarteraC][carteraid]);

					    PlayersData[playerid][Banco] 		+= PlayersData[playerid][CarteraC][carteraid];
					    Banking[playeridConnected][Balance] -= PlayersData[playerid][CarteraC][carteraid];
					    if ( PlayersData[playeridConnected][AlertSMSBank] && PlayersDataOnline[playeridConnected][PhoneOnline])
					    {
					        new MsgBankSMS[MAX_TEXT_CHAT];
					        new MsgBankSMSReason[MAX_TEXT_CHAT];
					        format(MsgBankSMSReason, sizeof(MsgBankSMSReason), "Han cobrado un cheque tipo [%s] con #%i por la suma de $%i en su cuenta de cheques.",
							CarteraChequeType[Cheques[playeridConnected][Cobrado][Type]],
							PlayersData[playerid][CarteraT][carteraid],
							PlayersData[playerid][CarteraC][carteraid]
							);
					        format(MsgBankSMS, sizeof(MsgBankSMS), "[SMS] Recibido del BCSA 333: %s", MsgBankSMSReason);
					        AddSMS(playeridConnected, 333, MsgBankSMSReason);
					        printf("%s Cheque Cuenta: %i || %s", PlayersDataOnline[playerid][NameOnline], MsgBankSMSReason);

							Acciones(playeridConnected, 8, "recibe un SMS en el móvil");
						    SendClientMessage(playeridConnected, COLOR_INFO_MOVIL, MsgBankSMS);

						    Banking[playeridConnected][Balance] -= 10;
						}
						RemoveCheque(playeridConnected, Cobrado);
						RemoveObjectToCartera(playerid, carteraid);
						ShowPlayerDialogEx(playerid,32,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Cheque Cobrado",StatsBank, "Aceptar", "Volver");
				    }
				    else
				    {
						ShowPlayerDialogEx(playerid,32,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Error","{F50000}El cheque no pudó ser cobrado por fondos\ninsuficientes en la cuenta de destino", "Aceptar", "Volver");
					}
				}
				else
				{
					ShowPlayerDialogEx(playerid,32,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Error","{F50000}El cheque que intenta cobrar es personal, sólo puede ser cobrado por la persona al que fue dado.", "Aceptar", "Volver");
				}
			}
			else
			{
				ShowPlayerDialogEx(playerid,32,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Error","{F50000}La cuenta donde intenta cobrar el cheque\ntiene deshabilitado el cobro de cheques", "Aceptar", "Volver");
			}
		}
		else
		{
			ShowPlayerDialogEx(playerid,32,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Error","{F50000}Este cheque fue cancelado por el dueño de la cuenta", "Aceptar", "Volver");
		}
	    ////////////////////////////
	}
	else
	{
		new query[200], Cache:cacheid, bankAccountExist;
		format(query, 200, "SELECT * FROM `%s` WHERE `AccountNumber`=%i", DIR_ACCOUNT_BANK, PlayersData[playerid][CarteraI][carteraid]);
		cacheid = mysql_query(dataBase, query);
		cache_get_row_count(bankAccountExist);
		if ( bankAccountExist )
		{
			new BankingPay[AccountBankEnum];
			new ChequesPay[MAX_COUNT_CHEQUES][ChequesEnum];
			new ChequesPayData[700];
			cache_get_value_name(0, "Client", BankingPay[Owner], MAX_PLAYER_NAME);
			cache_get_value_name_int(0, "Balance", BankingPay[Balance]);
			cache_get_value_name_int(0, "LockIn", BankingPay[LockIn]);
			cache_get_value_name_int(0, "LockOut", BankingPay[LockOut]);
			cache_get_value_name(0, "Cheques", ChequesPayData, 700);
		    for ( new chequeid = 0; chequeid < MAX_COUNT_CHEQUES; chequeid++ )
		    {
				new ChequePayDataSlot[4][50], SplitPos[2];
				SplitPos[1] = strfind(ChequesPayData, ",", false);
				for ( new i = 0; i != 4; i++ )
				{
					SplitPos[0] = strfind(ChequesPayData, "|", false);
					strmid(ChequePayDataSlot[i], ChequesPayData, 0, SplitPos[0]);
					strdel(ChequesPayData, 0, SplitPos[0]+1);
				}
				strdel(ChequesPayData, 0, SplitPos[1]+1);

				ChequesPay[chequeid][UniqueID] = strval(ChequePayDataSlot[0]);
				ChequesPay[chequeid][Type]     = strval(ChequePayDataSlot[1]);
				format(ChequesPay[chequeid][NombreCh], MAX_PLAYER_NAME, "%s", ChequePayDataSlot[2]);
				ChequesPay[chequeid][Ammount]  = strval(ChequePayDataSlot[3]);
			}

		    new Cobrado = -1;
		    for ( new c = 0; c < MAX_COUNT_CHEQUES; c++ )
		    {
		        if ( ChequesPay[c][UniqueID] == PlayersData[playerid][CarteraT][carteraid] )
		        {
		            Cobrado = c;
					break;
				}
			}
			if ( Cobrado != -1 )
			{
			    if ( BankingPay[LockOut] )
			    {
					if ( !ChequesPay[Cobrado][Type] || ChequesPay[Cobrado][Type] && strfind(ChequesPay[Cobrado][NombreCh], PlayersDataOnline[playerid][NameOnlineFix], false) == 0 && strlen(ChequesPay[Cobrado][NombreCh]) == strlen(PlayersDataOnline[playerid][NameOnlineFix]) )
					{
					    if ( BankingPay[Balance] >= PlayersData[playerid][CarteraC][carteraid] )
					    {
							new StatsBank[400];
							format(StatsBank, sizeof(StatsBank), "{E6E6E6}Has cobrado éste cheque con éxito!\n\n     {F5FF00}..::Resumen::..\n{E6E6E6}Propietario: {00A5FF}%s\n{E6E6E6}# Cuenta: {F5FF00}%i\n{E6E6E6}# Cheque: {F5FF00}%i\n{E6E6E6}Cantidad: {00F50A}$%i",
							BankingPay[Owner],
							PlayersData[playerid][CarteraI][carteraid],
							PlayersData[playerid][CarteraT][carteraid],
							PlayersData[playerid][CarteraC][carteraid]);

						    PlayersData[playerid][Banco] 		+= PlayersData[playerid][CarteraC][carteraid];
						    BankingPay[Balance] 				-= PlayersData[playerid][CarteraC][carteraid];
						    //
							ChequesPay[Cobrado][UniqueID] = 0;
							ChequesPay[Cobrado][Type] = 0;
							format(ChequesPay[Cobrado][NombreCh], MAX_PLAYER_NAME, "No");
							ChequesPay[Cobrado][Ammount] = 0;
								//RemoveCheque(playeridConnected, Cobrado);
							//
							RemoveObjectToCartera(playerid, carteraid);

							/////////////////////////
							format(query, 500, "UPDATE `%s` SET ", DIR_ACCOUNT_BANK);
							strcat(query, "`Client`='%e',`Balance`='%i',`LockIn`='%i',`LockOut`='%i'");
							strcat(query, " WHERE `AccountNumber`=%i;");
							mysql_format(dataBase, query, 500, query,
								BankingPay[Owner],
								BankingPay[Balance],
								BankingPay[LockIn],
								BankingPay[LockOut],
								PlayersData[playerid][CarteraI][carteraid]);
							mysql_query(dataBase, query, false);

							format(query, 100, "UPDATE `%s` SET `Cheques`='", DIR_ACCOUNT_BANK);
						    for ( new c = 0; c < MAX_COUNT_CHEQUES; c++ )
						    {
								new chequesData[60];
								format(chequesData, sizeof(chequesData), "%i|%i|%s|%i|,",
								ChequesPay[c][UniqueID],
								ChequesPay[c][Type],
								ChequesPay[c][NombreCh],
								ChequesPay[c][Ammount]);

								strcat(query, chequesData, 1000);
							}
							strcat(query, "' WHERE `AccountNumber`=%i;");
							mysql_format(dataBase, query, 1000, query, PlayersData[playerid][CarteraI][carteraid]);
							mysql_query(dataBase, query, false);
							/////////////////////////

							ShowPlayerDialogEx(playerid,32,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Cheque Cobrado",StatsBank, "Aceptar", "Volver");
					    }
					    else
					    {
							ShowPlayerDialogEx(playerid,32,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Error","{F50000}El cheque no pudó ser cobrado por fondos\ninsuficientes en la cuenta de destino", "Aceptar", "Volver");
						}
					}
					else
					{
						ShowPlayerDialogEx(playerid,32,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Error","{F50000}El cheque que intenta cobrar es personal, sólo puede ser cobrado por la persona al que fue dado.", "Aceptar", "Volver");
					}
				}
				else
				{
					ShowPlayerDialogEx(playerid,32,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Error","{F50000}La cuenta donde intenta cobrar el cheque\ntiene deshabilitado el cobro de cheques", "Aceptar", "Volver");
				}
			}
			else
			{
				ShowPlayerDialogEx(playerid,32,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Error","{F50000}Este cheque fue cancelado por el dueño de la cuenta", "Aceptar", "Volver");
			}
		    ////////////////////////////
		}
		else
		{
			ShowPlayerDialogEx(playerid,32,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Error","{F50000}El número de cuenta donde desea cobrar el cheque no existe!", "Aceptar", "Volver");
		}
		cache_delete(cacheid);
	}
}
public TransferirMoney(playerid, account, amount)
{
	new playeridConnected = IsPlayerAccountBankConnected(account);
	if ( playeridConnected != -1 )
	{
	    ////////////////////////////
		if ( Banking[playeridConnected][LockIn] )
		{
		    if ( Banking[playerid][Balance] >= amount )
		    {
				new StatsBank[400];
				format(StatsBank, sizeof(StatsBank), "{E6E6E6}Tranferencia realizada con con éxito!\n\n     {F5FF00}..::Resumen::..\n{E6E6E6}# Cuenta origen: {F5FF00}%i\n{E6E6E6}# Cuenta destino: {F5FF00}%i\n{E6E6E6}Cantidad: {00F50A}$%i",
				PlayersData[playerid][AccountBankingOpen],
				account,
				amount);

			    Banking[playerid][Balance] 			-= amount;
			    Banking[playeridConnected][Balance] += amount;

			    if ( PlayersData[playeridConnected][AlertSMSBank] && PlayersDataOnline[playeridConnected][PhoneOnline] )
			    {
			        new MsgBankSMS[MAX_TEXT_CHAT];
			        new MsgBankSMSReason[MAX_TEXT_CHAT];
			        format(MsgBankSMSReason, sizeof(MsgBankSMSReason), "Has recibido una transferencia de la cuenta #%i por la suma de $%i.",
					PlayersData[playerid][AccountBankingOpen],
					amount
					);
			        format(MsgBankSMS, sizeof(MsgBankSMS), "[SMS] Recibido del BCSA 333: %s", MsgBankSMSReason);

			        AddSMS(playeridConnected, 333, MsgBankSMSReason);

					Acciones(playeridConnected, 8, "recibe un SMS en el móvil");
				    SendClientMessage(playeridConnected, COLOR_INFO_MOVIL, MsgBankSMS);

				    Banking[playeridConnected][Balance] -= 10;
				}

				ShowPlayerDialogEx(playerid,32,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Transferencia Realizada",StatsBank, "Aceptar", "Volver");
		    }
		    else
		    {
				ShowPlayerDialogEx(playerid,32,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Error","{F50000}Su cuenta de cheques no tiene suficientes fondos\npara realizar está transferencia", "Aceptar", "Volver");
			}
		}
		else
		{
			ShowPlayerDialogEx(playerid,32,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Error","{F50000}La cuenta a la que desea realizar una transferencia\ntiene prohibidas las transferencias entrantes.", "Aceptar", "Volver");
		}
	    ////////////////////////////
	}
	else
	{
	    new query[1000], Cache:cacheid, bankAccountExist;
		format(query, 200, "SELECT * FROM `%s` WHERE `AccountNumber`=%i", DIR_ACCOUNT_BANK, account);
		cacheid = mysql_query(dataBase, query);
		cache_get_row_count(bankAccountExist);
		if ( bankAccountExist )
		{
			new BankingPay[AccountBankEnum];
			new ChequesPay[MAX_COUNT_CHEQUES][ChequesEnum];
			new ChequesPayData[700];
			cache_get_value_name(0, "Client", BankingPay[Owner], MAX_PLAYER_NAME);
			cache_get_value_name_int(0, "Balance", BankingPay[Balance]);
			cache_get_value_name_int(0, "LockIn", BankingPay[LockIn]);
			cache_get_value_name_int(0, "LockOut", BankingPay[LockOut]);
			cache_get_value_name(0, "Cheques", ChequesPayData, 700);
		    for ( new c = 0; c < MAX_COUNT_CHEQUES; c++ )
		    {
				new ChequePayDataSlot[4][50], SplitPos[2];
				SplitPos[1] = strfind(ChequesPayData, ",", false);
				for ( new i = 0; i != 4; i++ )
				{
					SplitPos[0] = strfind(ChequesPayData, "|", false);
					strmid(ChequePayDataSlot[i], ChequesPayData, 0, SplitPos[0]);
					strdel(ChequesPayData, 0, SplitPos[0]+1);
				}
				strdel(ChequesPayData, 0, SplitPos[1]+1);

				ChequesPay[c][UniqueID] = strval(ChequePayDataSlot[0]);
				ChequesPay[c][Type]     = strval(ChequePayDataSlot[1]);
				format(ChequesPay[c][NombreCh], MAX_PLAYER_NAME, "%s", ChequePayDataSlot[2]);
				ChequesPay[c][Ammount]  = strval(ChequePayDataSlot[3]);
			}
		    ////////////////////////////
			if ( BankingPay[LockIn] )
			{
			    if ( Banking[playerid][Balance] >= amount )
			    {
   					new StatsBank[400];
					format(StatsBank, sizeof(StatsBank), "{E6E6E6}Tranferencia realizada con con éxito!\n\n     {F5FF00}..::Resumen::..\n{E6E6E6}# Cuenta origen: {F5FF00}%i\n{E6E6E6}# Cuenta destino: {F5FF00}%i\n{E6E6E6}Cantidad: {00F50A}$%i",
					PlayersData[playerid][AccountBankingOpen],
					account,
					amount);

				    Banking[playerid][Balance] 			-= amount;
				    BankingPay[Balance] 				+= amount;
					ShowPlayerDialogEx(playerid,32,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Transferencia Realizada",StatsBank, "Aceptar", "Volver");
					/////////////////////////
					format(query, 500, "UPDATE `%s` SET ", DIR_ACCOUNT_BANK);
					strcat(query, "`Client`='%e',`Balance`='%i',`LockIn`='%i',`LockOut`='%i'");
					strcat(query, " WHERE `AccountNumber`=%i;");
					mysql_format(dataBase, query, 500, query,
						BankingPay[Owner],
						BankingPay[Balance],
						BankingPay[LockIn],
						BankingPay[LockOut],
						account);
					mysql_query(dataBase, query, false);

					format(query, 100, "UPDATE `%s` SET `Cheques`='", DIR_ACCOUNT_BANK);
				    for ( new chequeid = 0; chequeid < MAX_COUNT_CHEQUES; chequeid++ )
				    {
						new chequesData[60];
						format(chequesData, sizeof(chequesData), "%i|%i|%s|%i|,",
						ChequesPay[chequeid][UniqueID],
						ChequesPay[chequeid][Type],
						ChequesPay[chequeid][NombreCh],
						ChequesPay[chequeid][Ammount]);

						strcat(query, chequesData, 1000);
					}
					strcat(query, "' WHERE `AccountNumber`=%i;");
					mysql_format(dataBase, query, 1000, query, account);
					mysql_query(dataBase, query, false);
					/////////////////////////
			    }
			    else
			    {
					ShowPlayerDialogEx(playerid,32,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Error","{F50000}Su cuenta de cheques no tiene suficientes fondos\npara realizar está transferencia", "Aceptar", "Volver");
				}
			}
			else
			{
				ShowPlayerDialogEx(playerid,32,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Error","{F50000}La cuenta a la que desea realizar una transferencia\ntiene prohibidas las transferencias entrantes.", "Aceptar", "Volver");
			}
		}
		else
		{
			ShowPlayerDialogEx(playerid,32,DIALOG_STYLE_MSGBOX, "{00A5FF}Banco - Error","{F50000}El número de cuenta a donde desea transferir dinero no existe!", "Aceptar", "Volver");
		}
		cache_delete(cacheid);
	}
}
public ShowBankConfiguration(playerid)
{
	new ConfigBankDialog[500];
	new TempConvert[100];

	format(TempConvert, sizeof(TempConvert), "{F0F0F0}Alertas por SMS: %s {F5FF00}(Recargo de $10 por aviso)",
	SiOrNoBank[PlayersData[playerid][AlertSMSBank]]);
    strcat(ConfigBankDialog, TempConvert, sizeof(ConfigBankDialog));

	format(TempConvert, sizeof(TempConvert), "\r\n{F0F0F0}Aceptar Transferencias Entrantes: %s",
	SiOrNoBank[Banking[playerid][LockIn]]);
    strcat(ConfigBankDialog, TempConvert, sizeof(ConfigBankDialog));

	format(TempConvert, sizeof(TempConvert), "\r\n{F0F0F0}Aceptar Cobro de Cheques: %s {F0F0F0}",
	SiOrNoBank[Banking[playerid][LockOut]]);
    strcat(ConfigBankDialog, TempConvert, sizeof(ConfigBankDialog));


	ShowPlayerDialogEx(playerid,86,DIALOG_STYLE_LIST,"{00A5FF}Banco - Configuración", ConfigBankDialog, "Seleccionar", "Volver");
}
public ShowBankTransferencia(playerid)
{
	ShowPlayerDialogEx(playerid,87,DIALOG_STYLE_INPUT,"{00A5FF}Banco - Hacer una Transferencia", "{F0F0F0}Ingrese el número de cuenta a la que desea transferir dinero", "Siguiente", "Volver");
}
public ShowBankTransferenciaCantidad(playerid)
{
	ShowPlayerDialogEx(playerid,88,DIALOG_STYLE_INPUT,"{00A5FF}Banco - Elegir Cantidad", "{F0F0F0}Ingrese la cantidad de dinero que desea transferir", "Siguiente", "Atrás");
}
public ShowBankTransferenciaResumen(playerid)
{
	new StatsTrans[400];
	format(StatsTrans, sizeof(StatsTrans), "{E6E6E6}Está a punto de realizar una transferencia!\n\n{E6E6E6}Porfavor revise que todos los datos a continuación están correctamente:\n{E6E6E6}# Cuenta origen: {F5FF00}%i\n{E6E6E6}# Cuenta destino: {F5FF00}%i\n{E6E6E6}Cantidad: {00F50A}$%i\n\n{E6E6E6}Sí la información proporcionada está correcta pulse en \"Realizar\"",
	PlayersData[playerid][AccountBankingOpen],
	PlayersDataOnline[playerid][SaveAfterAgenda][0],
	PlayersDataOnline[playerid][SaveAfterAgenda][1]);

	ShowPlayerDialogEx(playerid,89,DIALOG_STYLE_MSGBOX,"{00A5FF}Banco - Verificar Datos", StatsTrans, "Realizar", "Atrás");
}
public AddPlayerToDM(playerid, teamid)
{
	if ( SkinDM[PlayersDataOnline[playerid][TeamDM]] )
	{
		SetPlayerSkin(playerid, SkinDM[PlayersDataOnline[playerid][TeamDM]]);
	}
	ResetPlayerWeaponsEx(playerid);
	TextDrawShowForPlayer(playerid, ModeDMTextDraw[0]);
	TextDrawShowForPlayer(playerid, ModeDMTextDraw[1]);
	PlayersDataOnline[playerid][ModeDM] = true;
	PlayersDataOnline[playerid][TeamDM] = teamid;

	UpdateTextDrawDM(0);
	UpdateTextDrawDM(1);
}
public RemovePlayerToDM(playerid)
{
	if ( SkinDM[PlayersDataOnline[playerid][TeamDM]] )
	{
		SetPlayerSkin(playerid, PlayersData[playerid][Skin]);
	}
	ResetPlayerWeaponsEx(playerid);
	TextDrawHideForPlayer(playerid, ModeDMTextDraw[0]);
	TextDrawHideForPlayer(playerid, ModeDMTextDraw[1]);
	PlayersDataOnline[playerid][ModeDM] = false;
	PlayersDataOnline[playerid][PointDm] = false;
	UpdateSpawnPlayer(playerid);

	UpdateTextDrawDM(0);
	UpdateTextDrawDM(1);
}
public IsVehicleExplotion(playerid, vehicleid, Float:damage, seat)
{
	new Salte;
	if ( damage < 250.0 )
	{
		if ( !PlayersDataOnline[playerid][CountIntentarVehicle] )
		{
		    if ( IntentarAccion(playerid, "salir del vehículo", random(2)) )
		    {
				PlayersDataOnline[playerid][CountIntentarVehicle] = 1;
			}
			else
			{
				Salte = true;
				PlayersDataOnline[playerid][CountIntentarVehicle] = 2;
			}
		}
		else if ( PlayersDataOnline[playerid][CountIntentarVehicle] == 2 )
		{
	    	Salte = true;
	    }

		if ( Salte )
		{
			ForcePutPlayerInVehicle(playerid, vehicleid, seat);
		}
	}
}
public OnPlayerEnterVehicleEx(playerid, vehicleid, ispassenger)
{
	PlayersDataOnline[playerid][CountIntentarVehicle] = false;
}
public OnPlayerExitVehicleEx(playerid, vehicleid, ispassenger)
{

}
public IsVehicleBug(vehicleid, SpawnBug)
{
	if ( GetVehicleVirtualWorld(vehicleid) != 999 )
	{
		if ( DataCars[vehicleid][WorldLast] > 999 )
		{
			new HouseID = GetHouseidIdByWorld(DataCars[vehicleid][WorldLast]);
			if ( HouseID )
			{
				new GarageID = GetGarageIdByWorld(HouseID, DataCars[vehicleid][WorldLast]);
				if ( GarageID != -1 )
				{
				    new Float:VehiclePosBug[3]; GetVehiclePos(vehicleid, VehiclePosBug[0], VehiclePosBug[1], VehiclePosBug[2]);
					if ( GetVehicleVirtualWorld(vehicleid) != DataCars[vehicleid][WorldLast] || !IsPointFromPoint(30.0, VehiclePosBug[0], VehiclePosBug[1], VehiclePosBug[2], TypeGarage[Garages[HouseID][GarageID][TypeGarageE]][PosXc], TypeGarage[Garages[HouseID][GarageID][TypeGarageE]][PosYc], TypeGarage[Garages[HouseID][GarageID][TypeGarageE]][PosZc]) )
					{
					    if ( SpawnBug )
					    {
							new MsgAviso[MAX_TEXT_CHAT];
						    format(MsgAviso, sizeof(MsgAviso), "%s Bug Report - El vehículo con ID[%i] se ha desbugueado automáticamente (Tipo de debug: Pos)", LOGO_STAFF, vehicleid);
							MsgCheatsReportsToAdmins(MsgAviso);

							SetVehicleVirtualWorldEx(vehicleid, Garages[HouseID][GarageID][WorldG]);
							LinkVehicleToInteriorEx(vehicleid, TypeGarage[Garages[HouseID][GarageID][TypeGarageE]][Interior]);
							SetVehiclePos(vehicleid, TypeGarage[Garages[HouseID][GarageID][TypeGarageE]][PosXc], TypeGarage[Garages[HouseID][GarageID][TypeGarageE]][PosYc], TypeGarage[Garages[HouseID][GarageID][TypeGarageE]][PosZc]);
							SetVehicleZAngle(vehicleid, TypeGarage[Garages[HouseID][GarageID][TypeGarageE]][PosZZc]);
						}
						return true;
					}
	   			}
			}
		}
		else if ( DataCars[vehicleid][WorldLast] != GetVehicleVirtualWorld(vehicleid) )
		{
		    if ( SpawnBug )
		    {
				new MsgAviso[MAX_TEXT_CHAT];
			    format(MsgAviso, sizeof(MsgAviso), "%s Bug Report - El vehículo con ID[%i] se ha desbugueado automáticamente (Tipo de debug: Spawn)", LOGO_STAFF, vehicleid);
				MsgCheatsReportsToAdmins(MsgAviso);
	        	SetVehicleToRespawnExTwo(vehicleid);
        	}
	        return true;
		}
   }
	return false;
}
public LoadCamerasLogin()
{
	CamerasLogin[MAX_CAMERAS_LOGIN][PlayerPosLogin][0] = 2097.7078;
	CamerasLogin[MAX_CAMERAS_LOGIN][PlayerPosLogin][1] = 1825.1970;
	CamerasLogin[MAX_CAMERAS_LOGIN][PlayerPosLogin][2] = 0.0;

	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasPosLogin][0] = 2097.7078;
	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasPosLogin][1] = 1825.1970;
	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasPosLogin][2] = 10.8203;

	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasLookLogin][0] = 2057.4226;
	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasLookLogin][1] = 1497.5380;
	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasLookLogin][2] = 103.0167;

	MAX_CAMERAS_LOGIN++;
	CamerasLogin[MAX_CAMERAS_LOGIN][PlayerPosLogin][0] = 1624.5200;
	CamerasLogin[MAX_CAMERAS_LOGIN][PlayerPosLogin][1] = -1179.5583;
	CamerasLogin[MAX_CAMERAS_LOGIN][PlayerPosLogin][2] = 75.5165;

	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasPosLogin][0] = 1656.6953;
	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasPosLogin][1] = -1270.7322;
	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasPosLogin][2] = 82.6283;

	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasLookLogin][0] = 1602.2152;
	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasLookLogin][1] = -1788.6689;
	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasLookLogin][2] = 37.0291;

	MAX_CAMERAS_LOGIN++;
	CamerasLogin[MAX_CAMERAS_LOGIN][PlayerPosLogin][0] = 1452.0786;
	CamerasLogin[MAX_CAMERAS_LOGIN][PlayerPosLogin][1] = -912.4713;
	CamerasLogin[MAX_CAMERAS_LOGIN][PlayerPosLogin][2] = 20.5950;

	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasPosLogin][0] = 1454.3749;
	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasPosLogin][1] = -992.5303;
	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasPosLogin][2] = 101.6335;

	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasLookLogin][0] = 1411.0945;
	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasLookLogin][1] = -804.6624;
	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasLookLogin][2] = 84.0893;

	MAX_CAMERAS_LOGIN++;
	CamerasLogin[MAX_CAMERAS_LOGIN][PlayerPosLogin][0] = 1406.3000;
	CamerasLogin[MAX_CAMERAS_LOGIN][PlayerPosLogin][1] = -1620.8445;
	CamerasLogin[MAX_CAMERAS_LOGIN][PlayerPosLogin][2] = -48.2888;

	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasPosLogin][0] = 1406.5889;
	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasPosLogin][1] = -1627.7599;
	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasPosLogin][2] = 62.9646;

	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasLookLogin][0] = 1532.3053;
	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasLookLogin][1] = -1755.0554;
	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasLookLogin][2] = 11.4160;

	MAX_CAMERAS_LOGIN++;
	CamerasLogin[MAX_CAMERAS_LOGIN][PlayerPosLogin][0] = 1751.0354;
	CamerasLogin[MAX_CAMERAS_LOGIN][PlayerPosLogin][1] = -1247.8403;
	CamerasLogin[MAX_CAMERAS_LOGIN][PlayerPosLogin][2] = 69.6952;

	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasPosLogin][0] = 1776.3820;
	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasPosLogin][1] = -1302.4565;
	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasPosLogin][2] = 114.8198;

	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasLookLogin][0] = 1621.5737;
	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasLookLogin][1] = -1317.7003;
	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasLookLogin][2] = 114.8198;

	MAX_CAMERAS_LOGIN++;
	CamerasLogin[MAX_CAMERAS_LOGIN][PlayerPosLogin][0] = -1465.0914;
	CamerasLogin[MAX_CAMERAS_LOGIN][PlayerPosLogin][1] = 718.6000;
	CamerasLogin[MAX_CAMERAS_LOGIN][PlayerPosLogin][2] = -120.9556;

	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasPosLogin][0] = -1450.2291;
	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasPosLogin][1] = 662.2463;
	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasPosLogin][2] = 1.5133;

	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasLookLogin][0] = -1297.3114;
	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasLookLogin][1] = 731.4880;
	CamerasLogin[MAX_CAMERAS_LOGIN][CamerasLookLogin][2] = 39.9422;
}
public SetCameraLogin(playerid, nextcamera, avanze)
{
	if ( avanze )
	{
		nextcamera++;
	}
	else
	{
	    nextcamera--;
	}

	if ( nextcamera > MAX_CAMERAS_LOGIN )
	{
	    nextcamera = 0;
	}
	else if ( nextcamera < 0 )
	{
	    nextcamera = MAX_CAMERAS_LOGIN;
	}
	PlayersData[playerid][CameraLogin] = nextcamera;

	SetPlayerPos(playerid, CamerasLogin[nextcamera][PlayerPosLogin][0], CamerasLogin[nextcamera][PlayerPosLogin][1], CamerasLogin[nextcamera][PlayerPosLogin][2]);
	SetPlayerCameraPos(playerid, 	CamerasLogin[nextcamera][CamerasPosLogin][0], CamerasLogin[nextcamera][CamerasPosLogin][1], CamerasLogin[nextcamera][CamerasPosLogin][2]);
	SetPlayerCameraLookAt(playerid, CamerasLogin[nextcamera][CamerasLookLogin][0], CamerasLogin[nextcamera][CamerasLookLogin][1], CamerasLogin[nextcamera][CamerasLookLogin][2]);
}
public SetCameraPresent(playerid, point, Float:Porcent, Float:CameraX, Float:CameraY, Float:CameraZ, min, max)
{
	SetPlayerCameraLookAt(playerid, CamerasPresent[point][4], CamerasPresent[point][5], CamerasPresent[point][6]);
	new NextPoint;
	new PassPoint;
	Porcent += CamerasPresent[point][3];
	if ( point == max )
	{
		NextPoint = min;
	}
	else
	{
		NextPoint = point + 1;
	}
	/////////////////////////////// X POS
	if ( CamerasPresent[point][0] > CamerasPresent[NextPoint][0] )
	{
        CameraX -= ((CamerasPresent[point][0] - CamerasPresent[NextPoint][0]) * Porcent) / 100;
        if ( CameraX < CamerasPresent[NextPoint][0] )
        {
            PassPoint++;
        }
	}
	else
	{
        CameraX += ((CamerasPresent[NextPoint][0] - CamerasPresent[point][0]) * Porcent) / 100;
        if ( CameraX > CamerasPresent[NextPoint][0] )
        {
            PassPoint++;
        }
	}
	/////////////////////////////// Y POS
	if ( CamerasPresent[point][1] > CamerasPresent[NextPoint][1] )
	{
        CameraY -= ((CamerasPresent[point][1] - CamerasPresent[NextPoint][1]) * Porcent) / 100;
        if ( CameraY < CamerasPresent[NextPoint][1] )
        {
            PassPoint++;
        }
	}
	else
	{
        CameraY += ((CamerasPresent[NextPoint][1] - CamerasPresent[point][1]) * Porcent) / 100;
        if ( CameraY > CamerasPresent[NextPoint][1] )
        {
            PassPoint++;
        }
	}
	/////////////////////////////// Z POS
	if ( CamerasPresent[point][2] > CamerasPresent[NextPoint][2] )
	{
        CameraZ -= ((CamerasPresent[point][2] - CamerasPresent[NextPoint][2]) * Porcent) / 100;
        /*if ( CameraZ < CamerasPresent[NextPoint][2] )
        {
            PassPoint++;
        }*/
        PassPoint++;
	}
	else
	{
        CameraZ += ((CamerasPresent[NextPoint][2] - CamerasPresent[point][2]) * Porcent) / 100;
        /*if ( CameraZ > CamerasPresent[NextPoint][2] )
        {
            PassPoint++;
        }*/
        PassPoint++;
	}

	if ( PassPoint == 3 )
	{
	    point = NextPoint;
		CameraX = CamerasPresent[NextPoint][0];
		CameraY = CamerasPresent[NextPoint][1];
		CameraZ = CamerasPresent[NextPoint][2];
	    Porcent = 0.0;
	}
	SetPlayerCameraPos(playerid,CameraX,CameraY,CameraZ);
	PlayersDataOnline[playerid][TimerCamaraId] = SetTimerEx("SetCameraPresent", 20, false, "ddffffdd", playerid, point, Porcent, CameraX, CameraY, CameraZ, min, max);
}
public SetCameraPresentRace(playerid, raceid, point, Float:Porcent, Float:CameraX, Float:CameraY, Float:CameraZ)
{
//	printf("%d %d %d %f %f %f %f", playerid, raceid, point, Porcent, CameraX, CameraY, CameraZ);
	SetPlayerCameraLookAt(playerid,
	PistasPosPlayers[raceid][PlayersDataOnline[playerid][PosIDp]][Xpos],
	PistasPosPlayers[raceid][PlayersDataOnline[playerid][PosIDp]][Ypos],
	PistasPosPlayers[raceid][PlayersDataOnline[playerid][PosIDp]][Zpos]);

	new NextPoint;
	new PassPoint;
	Porcent += PistasCameras[raceid][point][Vel];
	if ( point == Pistas[raceid][MaxCameras] )
	{
		NextPoint = 0;
	}
	else
	{
		NextPoint = point + 1;
	}
	/////////////////////////////// X POS
	if ( PistasCameras[raceid][point][Xpos] > PistasCameras[raceid][NextPoint][Xpos] )
	{
        CameraX -= ((PistasCameras[raceid][point][Xpos] - PistasCameras[raceid][NextPoint][Xpos]) * Porcent) / 100;
        if ( CameraX < PistasCameras[raceid][NextPoint][Xpos] )
        {
            PassPoint++;
        }
	}
	else
	{
        CameraX += ((PistasCameras[raceid][NextPoint][Xpos] - PistasCameras[raceid][point][Xpos]) * Porcent) / 100;
        if ( CameraX > PistasCameras[raceid][NextPoint][Xpos] )
        {
            PassPoint++;
        }
	}
	/////////////////////////////// Y POS
	if ( PistasCameras[raceid][point][Ypos] > PistasCameras[raceid][NextPoint][Ypos] )
	{
        CameraY -= ((PistasCameras[raceid][point][Ypos] - PistasCameras[raceid][NextPoint][Ypos]) * Porcent) / 100;
        if ( CameraY < PistasCameras[raceid][NextPoint][Ypos] )
        {
            PassPoint++;
        }
	}
	else
	{
        CameraY += ((PistasCameras[raceid][NextPoint][Ypos] - PistasCameras[raceid][point][Ypos]) * Porcent) / 100;
        if ( CameraY > PistasCameras[raceid][NextPoint][Ypos] )
        {
            PassPoint++;
        }
	}
	/////////////////////////////// Z POS
	if ( PistasCameras[raceid][point][Zpos] > PistasCameras[raceid][NextPoint][Zpos] )
	{
        CameraZ -= ((PistasCameras[raceid][point][Zpos] - PistasCameras[raceid][NextPoint][Zpos]) * Porcent) / 100;

        PassPoint++;
	}
	else
	{
        CameraZ += ((PistasCameras[raceid][NextPoint][Zpos] - PistasCameras[raceid][point][Zpos]) * Porcent) / 100;

        PassPoint++;
	}

	if ( PassPoint == 3 )
	{
	    point = NextPoint;
		CameraX = PistasCameras[raceid][NextPoint][Xpos];
		CameraY = PistasCameras[raceid][NextPoint][Ypos];
		CameraZ = PistasCameras[raceid][NextPoint][Zpos];
	    Porcent = 0.0;
	}
	SetPlayerCameraPos(playerid,CameraX,CameraY,CameraZ);
	PlayersDataOnline[playerid][TimerCamaraIdRace] = SetTimerEx("SetCameraPresentRace", 20, false, "dddffff", playerid, raceid, point, Porcent, CameraX, CameraY, CameraZ);
}
public LoadLastOptionsServer()
{
	// DDoS Protection.
    SERVER_PORT_ = GetServerVarAsInt("port");
    
	SetTimer("CheckVehicleGas", TIME_CHECK_GAS_VEHICLES, false);

	for ( new i = 0; i < MAX_OBJECT_MAPPING_COUNT;i++)
	{
		ObjectMapping[i][Objectid] = -1;
		ObjectMapping[i][TextTagS] = -1;
	}

	// TextDraw DeathMatch TEAM 1
	ModeDMTextDraw[0] = TextDrawCreateEx(498.0, 105.0,"~W~Jugador   ~G~Puntos~N~~R~Jugador~N~~Y~Jugador~N~~P~Jugador~N~~N~~G~Total: ~W~0");
	TextDrawUseBox(ModeDMTextDraw[0], 1);
	TextDrawBackgroundColor(ModeDMTextDraw[0] ,0x000000A3);
	TextDrawColor(ModeDMTextDraw[0], 0x2DFF00FF);
	TextDrawBoxColor(ModeDMTextDraw[0], 0x000000A1);
	TextDrawTextSize(ModeDMTextDraw[0], 637, 107.0);
	TextDrawSetShadow(ModeDMTextDraw[0], 1);
	TextDrawLetterSize(ModeDMTextDraw[0], 0.2 , 0.9);
	TextDrawFont(ModeDMTextDraw[0], 2);

	// TextDraw DeathMatch TEAM 2
	ModeDMTextDraw[1] = TextDrawCreateEx(498.0, 175.0,"~W~Jugador   ~G~Puntos~N~~R~Jugador~N~~Y~Jugador~N~~P~Jugador~N~~N~~G~Total: ~W~0");
	TextDrawUseBox(ModeDMTextDraw[1], 1);
	TextDrawBackgroundColor(ModeDMTextDraw[1] ,0x000000A3);
	TextDrawColor(ModeDMTextDraw[1], 0x2DFF00FF);
	TextDrawBoxColor(ModeDMTextDraw[1], 0x000000A1);
	TextDrawTextSize(ModeDMTextDraw[1], 637, 177.0);
	TextDrawSetShadow(ModeDMTextDraw[1], 1);
	TextDrawLetterSize(ModeDMTextDraw[1], 0.2 , 0.9);
	TextDrawFont(ModeDMTextDraw[1], 2);

	// TextDraw Garages
	GarageTextDraw = TextDrawCreateEx(200.0, 380.0, "~B~Lugar: ~W~Garage");
	TextDrawUseBox(GarageTextDraw, 1);
	TextDrawBackgroundColor(GarageTextDraw ,0x000000FF);
	TextDrawBoxColor(GarageTextDraw, 0x00000066);
	TextDrawTextSize(GarageTextDraw, 350.0, 380.0);
	TextDrawSetShadow(GarageTextDraw, 1);
	TextDrawLetterSize(GarageTextDraw, 0.5 , 1.2);

	format(DataCars[0][MatriculaString], 32, "Ninguno");

	// WideScreen Tutorial
	WideScreen = TextDrawCreate(0, 0, "~N~~N~~N~~N~~N~~N~~N~~N~~N~~N~~N~");
	TextDrawUseBox(WideScreen, 1);
	TextDrawTextSize(WideScreen, 650.0, 200.0);
	TextDrawBoxColor(WideScreen, 0x000000FF);

	WideScreen2 = TextDrawCreate(0, 340.0, "~N~~N~~N~~N~~N~~N~~N~~N~~N~~N~~N~");
	TextDrawUseBox(WideScreen2, 1);
	TextDrawTextSize(WideScreen2, 650.0, 500.0);
	TextDrawBoxColor(WideScreen2, 0x000000FF);

	// Race TextDraw
	ScoreRaceBox = TextDrawCreate(493.9, 140.0, "______~P~Posiciones~N~~N~~N~~N~~N~~N~~N~~N~~N~~N~");
	TextDrawUseBox(ScoreRaceBox, 1);
	TextDrawSetShadow(ScoreRaceBox, 1);
	TextDrawTextSize(ScoreRaceBox, 615.8, 500.0);
	TextDrawBoxColor(ScoreRaceBox, 0x0000008A);
	TextDrawFont(ScoreRaceBox, 2);
	TextDrawLetterSize(ScoreRaceBox, 0.3, 1 );

	// Lock Off
/*	LockVehicleText[0] = TextDrawCreate(520.9, 450.0, "__");
	TextDrawUseBox(LockVehicleText[0], 1);
	TextDrawSetShadow(LockVehicleText[0], 1);
	TextDrawTextSize(LockVehicleText[0], 526.8, 500.0);
	TextDrawBoxColor(LockVehicleText[0], 0xE10000FF);
	TextDrawFont(LockVehicleText[0], 2);
	TextDrawLetterSize(LockVehicleText[0], 0.3, 1 );*/
	
	// LockVehicleText

	for (new p = 0;p < MAX_COUNT_PISTAS;p++)
	{
		ScorePosRace[p] = TextDrawCreate(498.2, 155.0, "~W~1-~N~~N~~W~2-~N~~N~~W~3-");
		TextDrawSetShadow(ScorePosRace[p], 1);
		TextDrawFont(ScorePosRace[p], 2);
		TextDrawLetterSize(ScorePosRace[p], 0.2, 1);
	}

	// TIMER GLOBAL
	SetTimerGlobal();
	CheckPlayersAFK();
}
public ShowPlayerVerifiquedEmail(playerid, option)
{
    if ( option )
    {
		ShowPlayerDialogEx(playerid, 91, DIALOG_STYLE_INPUT, "{00A5FF}Confirmar E-mail", "{F0F0F0}Introduzca el E-mail que figura en\n{F0F0F0}su configuración, luego pulse en \"Verificar\"", "Verificar", "Volver");
		PlayersDataOnline[playerid][SaveAfterAgenda][0] = false;
   	}
   	else
   	{
		PlayersDataOnline[playerid][SaveAfterAgenda][0] = true;
		ShowPlayerDialogEx(playerid, 91, DIALOG_STYLE_INPUT, "{00A5FF}Confirmar E-mail", "{F0F0F0}Intente nuevamente introducir su\n{F0F0F0}E-mail y pulse en ingresar \"Verificar\"", "Verificar", "Volver");
	}
}
public ShowPlayerLogin(playerid, option)
{
	new MsgWelcome[50];
	format(MsgWelcome, sizeof(MsgWelcome), "{00A5FF}Identifíquese %s!", PlayersDataOnline[playerid][NameOnlineFix]);

    if ( option )
    {
		ShowPlayerDialogEx(playerid, 1, DIALOG_STYLE_PASSWORD, MsgWelcome, "{F0F0F0}Escriba su contraseña y pulse en \"Ingresar\"", "Ingresar", "Cancelar");
		PlayersDataOnline[playerid][SaveAfterAgenda][0] = false;
   	}
   	else
   	{
		PlayersDataOnline[playerid][SaveAfterAgenda][0] = true;
        ShowPlayerDialogEx(playerid, 1, DIALOG_STYLE_PASSWORD, MsgWelcome, "{F0F0F0}Intente nuevamente ingresar su contraseña y pulse en \"Ingresar\"\n\n{F50000}NOTA: {F0F0F0}Si ha olvidado su contraseña puede solicitarla mediante un E-mail pulsando en \"Recuperar\"\n{F0F0F0}o tratando directamente en el centro de soporte ("WEBPAGE"/Soporte)", "Ingresar", "Recuperar");
	}
}
public ShowPlayerRegister(playerid, option)
{
	new MsgWelcome[50];
    format(MsgWelcome, sizeof(MsgWelcome), "{00A5FF}Regístrese %s!", PlayersDataOnline[playerid][NameOnlineFix]);

    if ( option )
    {
    	ShowPlayerDialogEx(playerid, 2, DIALOG_STYLE_PASSWORD, MsgWelcome, "{F0F0F0}Ingresar una contraseña para regístrarse!", "Registrar", "Cancelar");
   	}
   	else
   	{
		ShowPlayerDialogEx(playerid, 2, DIALOG_STYLE_PASSWORD, MsgWelcome, "{F0F0F0}Escribe una contraseña mayor de 4 caracteres y menor de 25!", "Registrar", "Cancelar");
	}
}
public SendRequestPasswordRecovery(playerid)
{
	/*
	new StrRequestHTTP[400];
	format(StrRequestHTTP, sizeof(StrRequestHTTP), ""WEBPAGE"/recuperar_password_samp.php?passwordPass=%s&passwordUser=%s&EmailSend=%s&UserName=%s",
			PASSWORD_EMAIL,
			PlayersData[playerid][Password],
			PlayersData[playerid][Email],
			PlayersDataOnline[playerid][NameOnline]);

	printf("%s", StrRequestHTTP);

	HTTP(playerid, HTTP_POST, StrRequestHTTP, "", "RecoveryEmailPlayer");
	*/
}
public RecoveryEmailPlayer(playerid, response_code, data[])
{
	if ( IsPlayerConnected(playerid) )
	{
	    printf("RecoveryEmailPlayer || %s[%i] || Error HTTP: %i || Data: %s", PlayersDataOnline[playerid][NameOnline], playerid, response_code, data);
		if ( response_code == 200 && strval(data) || response_code == HTTP_ERROR_MALFORMED_RESPONSE && strval(data) )
		{
		    new MsgEmailSend[400];
		    format(MsgEmailSend, sizeof(MsgEmailSend), "{F0F0F0}El proceso se ha realizado con éxito!\n\nSe ha enviado un E-mail con su contraseña actual a la siguiente dirección:\n{F5FF00}%s\n\n{F0F0F0}Revise la bandeja de Spam si no encuentra el E-mail.", PlayersData[playerid][Email]);
		    strcat(MsgEmailSend, "\n\n{F0F0F0}Cualquier duda no olvide dirígirse al centro de soporte en:\n{F5FF00}"WEBPAGE"/Soporte\n\n\n\n{00A5FF}Saludos Cordiales\n{00A5FF}Equipo de Un Player.", sizeof(MsgEmailSend));
	        ShowPlayerDialogEx(playerid, 999, DIALOG_STYLE_MSGBOX, "{00A5FF}Información - Recuperación de contraseña", MsgEmailSend, "Ok", "");

	        PlayersData[playerid][EmailTime] = gettime() + 7200;
		}
		else
		{
	        ShowPlayerDialogEx(playerid, 999, DIALOG_STYLE_MSGBOX, "{00A5FF}Información - Error! (Recuperación de contraseña)", "{F50000}Oops, un error ha ocurrído!\n\n{F0F0F0}Porfavor intenté luego realizar está operación\n{F0F0F0}Si el problema llega a persistir, nos puede contar el inconveniente en: {F5FF00}"WEBPAGE"/Soporte\n\n\n{F0F0F0}Disculpar las molestías.", "Ok", "");
		}
        KickEx(playerid, 9);
	}
}
public ShowPlayerDialogEx(playerid, dialogid, style, caption[], info[], button1[], button2[])
{
    PlayersDataOnline[playerid][CurrentDialog] = dialogid;
	ShowPlayerDialog(playerid, dialogid, style, caption, info, button1, button2);
}
public IsValidEmail(playerid, email[])
{
   /*
	new StrRequestHTTP[400];
	format(StrRequestHTTP, sizeof(StrRequestHTTP), ""WEBPAGE"/IsValidEmail.php?email=%s",
			email);

	printf("%s", StrRequestHTTP);

	HTTP(playerid, HTTP_POST, StrRequestHTTP, "", "ValidingEmail");
	*/
	printf("IsValidEmail: %s", email);
	if (strfind(email, "@", true) != -1 && strlen(email) >= 14 )
	{
	    CallLocalFunction("ValidingEmail", "iis", playerid, 200, email);
	}
	else CallLocalFunction("ValidingEmail", "iis", playerid, HTTP_ERROR_MALFORMED_RESPONSE, " ");
	return 1;
}
public ValidingEmail(playerid, response_code, data[])
{
	if ( IsPlayerConnected(playerid) )
	{
	    printf("ValidingEmail || %s[%i] || Error HTTP: %i || Data: %s", PlayersDataOnline[playerid][NameOnline], playerid, response_code, data);
		if ( response_code == 200 || response_code == HTTP_ERROR_MALFORMED_RESPONSE  )
		{
		    if ( strlen(data) > 1 )
		    {
				format(PlayersData[playerid][Email], 60, "%s", data);

			    new MsgNewEmail[MAX_TEXT_CHAT];
			    format(MsgNewEmail, sizeof(MsgNewEmail), "Ha cambiado su E-mail satisfactoriamente. Su nuevo E-mail es: %s", data);

				SendInfoMessage(playerid, 3, "0", MsgNewEmail);
		    	ShowDialogAccount(playerid);
			}
			else
			{
				ShowPlayerEmailChange(playerid, false);
			}
		}
		else
		{
			ShowPlayerEmailChange(playerid, false);
		}
	}
}
public ShowPlayerEmailChange(playerid, option)
{
    if ( option )
    {
		ShowPlayerDialogEx(playerid, 90, DIALOG_STYLE_INPUT, "{00A5FF}Nuevo E-mail", "{F0F0F0}Ingrese un nuevo Email para su cuenta", "Cambiar", "Volver");
   	}
   	else
   	{
		ShowPlayerDialogEx(playerid, 90, DIALOG_STYLE_INPUT, "{00A5FF}Nuevo E-mail", "{F0F0F0}El E-mail introducido ni es válido, porfavor, revise el mismo.", "Cambiar", "Volver");
	}

}
public IsValidStringServer(playerid, string[])
{
	 for ( new i = 0; i < strlen(string); i++ )
	 {
	    if ( string[i] == ',' ||
	     	 string[i] == '³' ||
	     	 string[i] == '\n' ||
	     	 string[i] == '\r' )
		{
			SendInfoMessage(playerid, 0, "1379", "Ha introducido un carácter inválido.");
		    return false;
		}
	 }
	 return true;
}
public IsValidStringServerOther(playerid, string[])
{
	 for ( new i = 0; i < strlen(string); i++ )
	 {
	    if ( string[i] == '³' ||
	     	 string[i] == '\n' ||
			 string[i] == '\r' )
		{
			SendInfoMessage(playerid, 0, "1380", "Ha introducido un carácter inválido.");
		    return false;
		}
	 }
	 return true;
}
public CreateObjectEx(modelid, Float:X, Float:Y, Float:Z, Float:rX, Float:rY, Float:rZ, Float:DrawDistance)
{
	MAX_OBJECT_FIJOS++;
	return CreateObject(modelid, X, Y, Z, rX, rY, rZ, DrawDistance);
}
public MoveDoorDynamicOne(doorid, Float:Progress)
{
	new Float:NextPos[6];
	NextPos[0] = Doors[doorid][PosXTrue];
	NextPos[1] = Doors[doorid][PosYTrue];
	NextPos[2] = Doors[doorid][PosZTrue];
	NextPos[3] = Doors[doorid][PosRotXTrue];
	NextPos[4] = Doors[doorid][PosRotYTrue];
	NextPos[5] = Doors[doorid][PosRotZTrue];

	Progress += VELOCITY_DOORS_PORCENT;
	/////////////////////////////// X POS
	if ( Doors[doorid][PosXTrue] > Doors[doorid][PosXFalse] )
	{
        NextPos[0] -= ((Doors[doorid][PosXTrue] - Doors[doorid][PosXFalse]) * Progress) / 100;
	}
	else
	{
        NextPos[0] += ((Doors[doorid][PosXFalse] - Doors[doorid][PosXTrue]) * Progress) / 100;
	}
	/////////////////////////////// Y POS
	if ( Doors[doorid][PosYTrue] > Doors[doorid][PosYFalse] )
	{
        NextPos[1] -= ((Doors[doorid][PosYTrue] - Doors[doorid][PosYFalse]) * Progress) / 100;
	}
	else
	{
        NextPos[1] += ((Doors[doorid][PosYFalse] - Doors[doorid][PosYTrue]) * Progress) / 100;
	}
	/////////////////////////////// Z POS
	if ( Doors[doorid][PosZTrue] > Doors[doorid][PosZFalse] )
	{
        NextPos[2] -= ((Doors[doorid][PosZTrue] - Doors[doorid][PosZFalse]) * Progress) / 100;
	}
	else
	{
        NextPos[2] += ((Doors[doorid][PosZFalse] - Doors[doorid][PosZTrue]) * Progress) / 100;
	}
	/////////////////////////////// X ROT
	if ( Doors[doorid][PosRotXTrue] > Doors[doorid][PosRotXFalse] )
	{
        NextPos[3] -= ((Doors[doorid][PosRotXTrue] - Doors[doorid][PosRotXFalse]) * Progress) / 100;
	}
	else
	{
        NextPos[3] += ((Doors[doorid][PosRotXFalse] - Doors[doorid][PosRotXTrue]) * Progress) / 100;
	}
	/////////////////////////////// Y ROT
	if ( Doors[doorid][PosRotYTrue] > Doors[doorid][PosRotYFalse] )
	{
        NextPos[4] -= ((Doors[doorid][PosRotYTrue] - Doors[doorid][PosRotYFalse]) * Progress) / 100;
	}
	else
	{
        NextPos[4] += ((Doors[doorid][PosRotYFalse] - Doors[doorid][PosRotYTrue]) * Progress) / 100;
	}
	/////////////////////////////// Z ROT
	if ( Doors[doorid][PosRotZTrue] > Doors[doorid][PosRotZFalse] )
	{
        NextPos[5] -= ((Doors[doorid][PosRotZTrue] - Doors[doorid][PosRotZFalse]) * Progress) / 100;
	}
	else
	{
        NextPos[5] += ((Doors[doorid][PosRotZFalse] - Doors[doorid][PosRotZTrue]) * Progress) / 100;
	}

	if ( Progress < 100.0 )
	{
        SetDynamicObjectPos(Doors[doorid][objectanimid], NextPos[0], NextPos[1], NextPos[2]);
		SetDynamicObjectRot(Doors[doorid][objectanimid], NextPos[3], NextPos[4], NextPos[5]);
		SetTimerEx("MoveDoorDynamicOne", VELOCITY_DOORS_TIME, false, "df", doorid, Progress);
	}
	else
	{
        SetDynamicObjectPos(Doors[doorid][objectanimid], Doors[doorid][PosXFalse], Doors[doorid][PosYFalse], Doors[doorid][PosZFalse]);
		SetDynamicObjectRot(Doors[doorid][objectanimid], Doors[doorid][PosRotXFalse], Doors[doorid][PosRotYFalse], Doors[doorid][PosRotZFalse]);
	}
}
public MoveDoorDynamicTwo(doorid, Float:Progress)
{
	new Float:NextPos[6];
	NextPos[0] = Doors[doorid][PosXFalse];
	NextPos[1] = Doors[doorid][PosYFalse];
	NextPos[2] = Doors[doorid][PosZFalse];
	NextPos[3] = Doors[doorid][PosRotXFalse];
	NextPos[4] = Doors[doorid][PosRotYFalse];
	NextPos[5] = Doors[doorid][PosRotZFalse];

	Progress += VELOCITY_DOORS_PORCENT;
	/////////////////////////////// X POS
	if ( Doors[doorid][PosXFalse] > Doors[doorid][PosXTrue] )
	{
        NextPos[0] -= ((Doors[doorid][PosXFalse] - Doors[doorid][PosXTrue]) * Progress) / 100;
	}
	else
	{
        NextPos[0] += ((Doors[doorid][PosXTrue] - Doors[doorid][PosXFalse]) * Progress) / 100;
	}
	/////////////////////////////// Y POS
	if ( Doors[doorid][PosYFalse] > Doors[doorid][PosYTrue] )
	{
        NextPos[1] -= ((Doors[doorid][PosYFalse] - Doors[doorid][PosYTrue]) * Progress) / 100;
	}
	else
	{
        NextPos[1] += ((Doors[doorid][PosYTrue] - Doors[doorid][PosYFalse]) * Progress) / 100;
	}
	/////////////////////////////// Z POS
	if ( Doors[doorid][PosZFalse] > Doors[doorid][PosZTrue] )
	{
        NextPos[2] -= ((Doors[doorid][PosZFalse] - Doors[doorid][PosZTrue]) * Progress) / 100;
	}
	else
	{
        NextPos[2] += ((Doors[doorid][PosZTrue] - Doors[doorid][PosZFalse]) * Progress) / 100;
	}
	/////////////////////////////// X ROT
	if ( Doors[doorid][PosRotXFalse] > Doors[doorid][PosRotXTrue] )
	{
        NextPos[3] -= ((Doors[doorid][PosRotXFalse] - Doors[doorid][PosRotXTrue]) * Progress) / 100;
	}
	else
	{
        NextPos[3] += ((Doors[doorid][PosRotXTrue] - Doors[doorid][PosRotXFalse]) * Progress) / 100;
	}
	/////////////////////////////// Y ROT
	if ( Doors[doorid][PosRotYFalse] > Doors[doorid][PosRotYTrue] )
	{
        NextPos[4] -= ((Doors[doorid][PosRotYFalse] - Doors[doorid][PosRotYTrue]) * Progress) / 100;
	}
	else
	{
        NextPos[4] += ((Doors[doorid][PosRotYTrue] - Doors[doorid][PosRotYFalse]) * Progress) / 100;
	}
	/////////////////////////////// Z ROT
	if ( Doors[doorid][PosRotZFalse] > Doors[doorid][PosRotZTrue] )
	{
        NextPos[5] -= ((Doors[doorid][PosRotZFalse] - Doors[doorid][PosRotZTrue]) * Progress) / 100;
	}
	else
	{
        NextPos[5] += ((Doors[doorid][PosRotZTrue] - Doors[doorid][PosRotZFalse]) * Progress) / 100;
	}

	if ( Progress < 100.0 )
	{
        SetDynamicObjectPos(Doors[doorid][objectanimid], NextPos[0], NextPos[1], NextPos[2]);
		SetDynamicObjectRot(Doors[doorid][objectanimid], NextPos[3], NextPos[4], NextPos[5]);
		SetTimerEx("MoveDoorDynamicTwo", VELOCITY_DOORS_TIME, false, "df", doorid, Progress);
	}
	else
	{
        SetDynamicObjectPos(Doors[doorid][objectanimid], Doors[doorid][PosXTrue], Doors[doorid][PosYTrue], Doors[doorid][PosZTrue]);
		SetDynamicObjectRot(Doors[doorid][objectanimid], Doors[doorid][PosRotXTrue], Doors[doorid][PosRotYTrue], Doors[doorid][PosRotZTrue]);
	}
}
public MovePeajeDynamicOne(peajeid, Float:Progress)
{
	new Float:NextPos[6];
	NextPos[0] = Peajes[peajeid][PosXTrue];
	NextPos[1] = Peajes[peajeid][PosYTrue];
	NextPos[2] = Peajes[peajeid][PosZTrue];
	NextPos[3] = Peajes[peajeid][PosRotXTrue];
	NextPos[4] = Peajes[peajeid][PosRotYTrue];
	NextPos[5] = Peajes[peajeid][PosRotZTrue];

	Progress += VELOCITY_PEAJE_PORCENT;
	/////////////////////////////// X POS
	if ( Peajes[peajeid][PosXTrue] > Peajes[peajeid][PosXFalse] )
	{
        NextPos[0] -= ((Peajes[peajeid][PosXTrue] - Peajes[peajeid][PosXFalse]) * Progress) / 100;
	}
	else
	{
        NextPos[0] += ((Peajes[peajeid][PosXFalse] - Peajes[peajeid][PosXTrue]) * Progress) / 100;
	}
	/////////////////////////////// Y POS
	if ( Peajes[peajeid][PosYTrue] > Peajes[peajeid][PosYFalse] )
	{
        NextPos[1] -= ((Peajes[peajeid][PosYTrue] - Peajes[peajeid][PosYFalse]) * Progress) / 100;
	}
	else
	{
        NextPos[1] += ((Peajes[peajeid][PosYFalse] - Peajes[peajeid][PosYTrue]) * Progress) / 100;
	}
	/////////////////////////////// Z POS
	if ( Peajes[peajeid][PosZTrue] > Peajes[peajeid][PosZFalse] )
	{
        NextPos[2] -= ((Peajes[peajeid][PosZTrue] - Peajes[peajeid][PosZFalse]) * Progress) / 100;
	}
	else
	{
        NextPos[2] += ((Peajes[peajeid][PosZFalse] - Peajes[peajeid][PosZTrue]) * Progress) / 100;
	}
	/////////////////////////////// X ROT
	if ( Peajes[peajeid][PosRotXTrue] > Peajes[peajeid][PosRotXFalse] )
	{
        NextPos[3] -= ((Peajes[peajeid][PosRotXTrue] - Peajes[peajeid][PosRotXFalse]) * Progress) / 100;
	}
	else
	{
        NextPos[3] += ((Peajes[peajeid][PosRotXFalse] - Peajes[peajeid][PosRotXTrue]) * Progress) / 100;
	}
	/////////////////////////////// Y ROT
	if ( Peajes[peajeid][PosRotYTrue] > Peajes[peajeid][PosRotYFalse] )
	{
        NextPos[4] -= ((Peajes[peajeid][PosRotYTrue] - Peajes[peajeid][PosRotYFalse]) * Progress) / 100;
	}
	else
	{
        NextPos[4] += ((Peajes[peajeid][PosRotYFalse] - Peajes[peajeid][PosRotYTrue]) * Progress) / 100;
	}
	/////////////////////////////// Z ROT
	if ( Peajes[peajeid][PosRotZTrue] > Peajes[peajeid][PosRotZFalse] )
	{
        NextPos[5] -= ((Peajes[peajeid][PosRotZTrue] - Peajes[peajeid][PosRotZFalse]) * Progress) / 100;
	}
	else
	{
        NextPos[5] += ((Peajes[peajeid][PosRotZFalse] - Peajes[peajeid][PosRotZTrue]) * Progress) / 100;
	}

	if ( Progress < 100.0 )
	{
        SetDynamicObjectPos(Peajes[peajeid][objectid_peaje], NextPos[0], NextPos[1], NextPos[2]);
		SetDynamicObjectRot(Peajes[peajeid][objectid_peaje], NextPos[3], NextPos[4], NextPos[5]);
		SetTimerEx("MovePeajeDynamicOne", VELOCITY_PEAJE_TIME, false, "df", peajeid, Progress);
	}
	else
	{
        SetDynamicObjectPos(Peajes[peajeid][objectid_peaje], Peajes[peajeid][PosXFalse], Peajes[peajeid][PosYFalse], Peajes[peajeid][PosZFalse]);
		SetDynamicObjectRot(Peajes[peajeid][objectid_peaje], Peajes[peajeid][PosRotXFalse], Peajes[peajeid][PosRotYFalse], Peajes[peajeid][PosRotZFalse]);
		SetTimerEx("MovePeajeDynamicTwo", 3000, false, "df", peajeid, 0.0);
	}
}
public MovePeajeDynamicTwo(peajeid, Float:Progress)
{
	new Float:NextPos[6];
	NextPos[0] = Peajes[peajeid][PosXFalse];
	NextPos[1] = Peajes[peajeid][PosYFalse];
	NextPos[2] = Peajes[peajeid][PosZFalse];
	NextPos[3] = Peajes[peajeid][PosRotXFalse];
	NextPos[4] = Peajes[peajeid][PosRotYFalse];
	NextPos[5] = Peajes[peajeid][PosRotZFalse];

	Progress += VELOCITY_PEAJE_PORCENT;
	/////////////////////////////// X POS
	if ( Peajes[peajeid][PosXFalse] > Peajes[peajeid][PosXTrue] )
	{
        NextPos[0] -= ((Peajes[peajeid][PosXFalse] - Peajes[peajeid][PosXTrue]) * Progress) / 100;
	}
	else
	{
        NextPos[0] += ((Peajes[peajeid][PosXTrue] - Peajes[peajeid][PosXFalse]) * Progress) / 100;
	}
	/////////////////////////////// Y POS
	if ( Peajes[peajeid][PosYFalse] > Peajes[peajeid][PosYTrue] )
	{
        NextPos[1] -= ((Peajes[peajeid][PosYFalse] - Peajes[peajeid][PosYTrue]) * Progress) / 100;
	}
	else
	{
        NextPos[1] += ((Peajes[peajeid][PosYTrue] - Peajes[peajeid][PosYFalse]) * Progress) / 100;
	}
	/////////////////////////////// Z POS
	if ( Peajes[peajeid][PosZFalse] > Peajes[peajeid][PosZTrue] )
	{
        NextPos[2] -= ((Peajes[peajeid][PosZFalse] - Peajes[peajeid][PosZTrue]) * Progress) / 100;
	}
	else
	{
        NextPos[2] += ((Peajes[peajeid][PosZTrue] - Peajes[peajeid][PosZFalse]) * Progress) / 100;
	}
	/////////////////////////////// X ROT
	if ( Peajes[peajeid][PosRotXFalse] > Peajes[peajeid][PosRotXTrue] )
	{
        NextPos[3] -= ((Peajes[peajeid][PosRotXFalse] - Peajes[peajeid][PosRotXTrue]) * Progress) / 100;
	}
	else
	{
        NextPos[3] += ((Peajes[peajeid][PosRotXTrue] - Peajes[peajeid][PosRotXFalse]) * Progress) / 100;
	}
	/////////////////////////////// Y ROT
	if ( Peajes[peajeid][PosRotYFalse] > Peajes[peajeid][PosRotYTrue] )
	{
        NextPos[4] -= ((Peajes[peajeid][PosRotYFalse] - Peajes[peajeid][PosRotYTrue]) * Progress) / 100;
	}
	else
	{
        NextPos[4] += ((Peajes[peajeid][PosRotYTrue] - Peajes[peajeid][PosRotYFalse]) * Progress) / 100;
	}
	/////////////////////////////// Z ROT
	if ( Peajes[peajeid][PosRotZFalse] > Peajes[peajeid][PosRotZTrue] )
	{
        NextPos[5] -= ((Peajes[peajeid][PosRotZFalse] - Peajes[peajeid][PosRotZTrue]) * Progress) / 100;
	}
	else
	{
        NextPos[5] += ((Peajes[peajeid][PosRotZTrue] - Peajes[peajeid][PosRotZFalse]) * Progress) / 100;
	}

	if ( Progress < 100.0 )
	{
        SetDynamicObjectPos(Peajes[peajeid][objectid_peaje], NextPos[0], NextPos[1], NextPos[2]);
		SetDynamicObjectRot(Peajes[peajeid][objectid_peaje], NextPos[3], NextPos[4], NextPos[5]);
		SetTimerEx("MovePeajeDynamicTwo", VELOCITY_PEAJE_TIME, false, "df", peajeid, Progress);
	}
	else
	{
        SetDynamicObjectPos(Peajes[peajeid][objectid_peaje], Peajes[peajeid][PosXTrue], Peajes[peajeid][PosYTrue], Peajes[peajeid][PosZTrue]);
		SetDynamicObjectRot(Peajes[peajeid][objectid_peaje], Peajes[peajeid][PosRotXTrue], Peajes[peajeid][PosRotYTrue], Peajes[peajeid][PosRotZTrue]);
	}
}
public GetVehicleVelocityEx(vehicleid)
{
	new Float:Velocity[3];
	GetVehicleVelocity(vehicleid, Velocity[0], Velocity[1], Velocity[2]);
	return floatround(floatsqroot(floatpower(floatabs(Velocity[0]), 2.0) + floatpower(floatabs(Velocity[1]), 2.0) + floatpower(floatabs(Velocity[2]), 2.0)) * 120.0);
}
public DetectSpam(playerid, text[])
{
	if ( strfind(text, " server ", false, 0) 					!= -1 ||
		 strfind(text, "server ", false, 0) 					== 0 ||
	     strfind(text, " servidor ", false, 0) 					!= -1 ||
		 strfind(text, "servidor ", false, 0) 					== 0 ||
		 strfind(text, " rol ", false, 0) 						!= -1 ||
		 strfind(text, "rol ", false, 0)						== 0 ||
		 strfind(text, "87.98.229.188:7232", false, 0)			!= -1 ||
		 strfind(text, "213.5.176.155:8888", false, 0) 			!= -1 ||
		 strfind(text, "217.18.70.93:8800", false, 0) 			!= -1 ||
		 strfind(text, "66.7.194.75:5555", false, 0) 			!= -1 ||
		 strfind(text, "173.192.22.150:7777", false, 0) 		!= -1 ||
		 strfind(text, "78.129.221.58:7787", false, 0)			!= -1 ||
 		 strfind(text, "184.82.169.84:7781", false, 0) 			!= -1 ||
 		 strfind(text, "188.138.106.41:7777", false, 0) 		!= -1 ||
 		 strfind(text, "Rol Iberico", false, 0) 				!= -1 ||
		 strfind(text, "Gamerol.net", false, 0) 				!= -1 ||
		 strfind(text, "Gamerol", false, 0) 					!= -1 ||
		 strfind(text, "CiudadMetropolis.com", false, 0) 		!= -1 ||
		 strfind(text, "Ciudad Metropolis", false, 0) 			!= -1 ||
		 strfind(text, "Spacerol.net", false, 0) 				!= -1 ||
		 strfind(text, "Spacerol", false, 0) 					!= -1
	  )
	{
		format(text, 256, "Anuncio: %s. Móvil: %i", text, PlayersData[playerid][Phone]);
		SendClientMessage(playerid, 0x0FFF00FF, text);
		new MsgAviso[MAX_TEXT_CHAT];
	    format(MsgAviso, sizeof(MsgAviso), "%s AntiSpam - %s[%i] posible spammer. Texto del anuncio: %s", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline], playerid, text);
	    MsgCheatsReportsToAdmins(MsgAviso);
		return true;
	}
	else
	{
	    return false;
	}
}
public CreateTextDrawCansansio()
{
	// CANSANSIO
	CansansioDefault = TextDrawCreateEx(548.0, 58.0,"_");
	TextDrawUseBox(CansansioDefault, 1);
	TextDrawBackgroundColor(CansansioDefault ,0xBDE6FD00);
	TextDrawBoxColor(CansansioDefault, 0x000000FF);
	TextDrawColor(CansansioDefault, 0xBDE6FD00);
	TextDrawTextSize(CansansioDefault, 606.0, 71.0);
	TextDrawSetShadow(CansansioDefault, 1);
	TextDrawLetterSize(CansansioDefault, 0.5 , 0.65);

	CansansioDefaultBackground = TextDrawCreateEx(549.8, 60.0,"_");
	TextDrawUseBox(CansansioDefaultBackground, 1);
	TextDrawBackgroundColor(CansansioDefaultBackground ,0xBDE6FD00);
	TextDrawColor(CansansioDefaultBackground, 0xBDE6FD00);
	TextDrawBoxColor(CansansioDefaultBackground, 0x00DE5491);
	TextDrawTextSize(CansansioDefaultBackground, 604.0, 68.0);
	TextDrawSetShadow(CansansioDefaultBackground, 1);
	TextDrawLetterSize(CansansioDefaultBackground, 0.1 , 0.2);

	for (new i = 0; i <= MAX_CANSANSIO; i++)
	{
		BarsCansansio[i] = TextDrawCreateEx(549.8, 60.0,"_");
		TextDrawUseBox(BarsCansansio[i], 1);
		TextDrawBackgroundColor(BarsCansansio[i] ,0xBDE6FD00);
		TextDrawColor(BarsCansansio[i], 0xBDE6FD00);
		TextDrawBoxColor(BarsCansansio[i], 0x00E546FF);
		TextDrawTextSize(BarsCansansio[i], i + 550.0, 68.0);
		TextDrawSetShadow(BarsCansansio[i], 1);
		TextDrawLetterSize(BarsCansansio[i], 0.1 , 0.2);
	}
}
public LoadTextDrawEnfermedad()
{
	TextBackgroundEnfermedad = TextDrawCreateEx(548.2, 69.1, "_");
	TextDrawUseBox(TextBackgroundEnfermedad, 1);
	TextDrawBackgroundColor(TextBackgroundEnfermedad, EnfermedadColoresFijos[0]);
	TextDrawBoxColor(TextBackgroundEnfermedad, 0x000000EE);
	TextDrawColor(TextBackgroundEnfermedad, 0x000000EE);
	TextDrawTextSize(TextBackgroundEnfermedad, 605.8, 72);
    TextDrawLetterSize(TextBackgroundEnfermedad, 0.1 , 0.47);

	for (new i = 0; i < 7; i++)
	{
		TextEnfermedadFijos[i] = TextDrawCreateEx(549.5, 70.4, "_");
		TextDrawUseBox(TextEnfermedadFijos[i], 1);
		TextDrawBackgroundColor(TextEnfermedadFijos[i], EnfermedadColoresFijos[i]);
		TextDrawBoxColor(TextEnfermedadFijos[i], EnfermedadColoresFijos[i]);
		TextDrawColor(TextEnfermedadFijos[i], EnfermedadColoresFijos[i]);
		TextDrawTextSize(TextEnfermedadFijos[i], 604.6, 72.7);
		TextDrawLetterSize(TextEnfermedadFijos[i], 0.1 , 0.2);
	}

	for (new i = 0; i < MAX_PLAYERS; i++)
	{
		PlayersDataOnline[i][TextEnfermedad] = TextDrawCreateEx(549.5, 70.4, "_");
		TextDrawUseBox(PlayersDataOnline[i][TextEnfermedad], 1);
		TextDrawBackgroundColor(PlayersDataOnline[i][TextEnfermedad], EnfermedadColores[0]);
		TextDrawBoxColor(PlayersDataOnline[i][TextEnfermedad], EnfermedadColores[0]);
		TextDrawColor(PlayersDataOnline[i][TextEnfermedad], EnfermedadColores[0]);
		TextDrawTextSize(PlayersDataOnline[i][TextEnfermedad], 604.6, 72.7);
		TextDrawLetterSize(PlayersDataOnline[i][TextEnfermedad], 0.1 , 0.2);
	}
}
public UpdateTextEnfermedad(playerid)
{
	TextDrawBackgroundColor(PlayersDataOnline[playerid][TextEnfermedad], EnfermedadColores[PlayersData[playerid][Enfermedad]]);
	TextDrawBoxColor(PlayersDataOnline[playerid][TextEnfermedad], EnfermedadColores[PlayersData[playerid][Enfermedad]]);
	TextDrawColor(PlayersDataOnline[playerid][TextEnfermedad], EnfermedadColores[PlayersData[playerid][Enfermedad]]);
	if ( !PlayersDataOnline[playerid][StateDeath] )
	{
		TextDrawTextSize(PlayersDataOnline[playerid][TextEnfermedad], 549.5 + ((PlayersDataOnline[playerid][VidaOn] / 100) * 55.1), 72.7);//  55.1
		TextDrawHideForPlayer(playerid, PlayersDataOnline[playerid][TextEnfermedad]);
		TextDrawShowForPlayer(playerid, PlayersDataOnline[playerid][TextEnfermedad]);
	}
}
public ChangeEnfermedad(playerid, newenfermedad)
{
	TextDrawHideForPlayer(playerid, TextEnfermedadFijos[PlayersData[playerid][Enfermedad]]);
	TextDrawShowForPlayer(playerid, TextEnfermedadFijos[newenfermedad]);
	PlayersData[playerid][Enfermedad] = newenfermedad;
	if ( newenfermedad )
	{
		new MsgEnfermado[50];
		format(MsgEnfermado, sizeof(MsgEnfermado), " Te has enfermado con %s!", EnfermedadName[newenfermedad]);
		SendClientMessage(playerid, COLOR_MESSAGES[0], MsgEnfermado);
	}
}
public IsPlayerHaveCondones(playerid)
{
	for (new i = 0; i<=5;i++)
	{
	    if ( PlayersData[playerid][Cartera][i] == CARTERA_TYPE_CONDONES )
		{
            PlayersData[playerid][CarteraC][i]--;
            if ( PlayersData[playerid][CarteraC][i] <= 0)
            {
				RemoveObjectToCartera(playerid, i);
			}
			return true;
	    }
    }
	return false;
}
public RemovePlayerFromVehicleEx(playerid, seat, time)
{
	if (!seat)
	{
	    if ( !PlayersDataOnline[playerid][StateDeath] && PlayersData[playerid][IsInJail] == -1 )
	    {
			if ( PlayersDataOnline[playerid][StateMoneyPass] <= time )
			{
			    if ( !DataCars[PlayersDataOnline[playerid][InCarId]][VehicleDeath] )
			    {
					new Float:PlayerPos[3]; GetPlayerPos(playerid, PlayerPos[0], PlayerPos[1], PlayerPos[2]);
					new Float:VehiclePos[3]; GetVehiclePos(PlayersDataOnline[playerid][InCarId], VehiclePos[0], VehiclePos[1], VehiclePos[2]);
					if ( !IsPointFromPoint(50.0, PlayerPos[0], PlayerPos[1], PlayerPos[2], VehiclePos[0], VehiclePos[1], VehiclePos[2]) )
					{
				    	SetVehiclePos(PlayersDataOnline[playerid][InCarId], PlayerPos[0], PlayerPos[1] + 1, PlayerPos[2]);
			    	}
		    	}
			}
		}

	    if ( PlayersDataOnline[playerid][InCarId] == TramSFID )
		{
			SetCameraBehindPlayer(playerid);
		}

		HideTextDrawFijosVelocimentros(playerid);
		TextDrawHideForPlayer(playerid, BarsDamage[PlayersDataOnline[playerid][LastDamageInt]]);
		TextDrawHideForPlayer(playerid, BarsGas[PlayersDataOnline[playerid][LastGas]]);
		TextDrawHideForPlayer(playerid, BarsOil[PlayersDataOnline[playerid][LastOil]]);
		TextDrawHideForPlayer(playerid, VelocimetroNumber1[PlayersDataOnline[playerid][LastVel][0]]);
		TextDrawHideForPlayer(playerid, VelocimetroNumber2[PlayersDataOnline[playerid][LastVel][1]]);
		TextDrawHideForPlayer(playerid, VelocimetroNumber3[PlayersDataOnline[playerid][LastVel][2]]);
		TextDrawHideForPlayer(playerid, TemperaturaTextDraws[PlayersDataOnline[playerid][LastTextDrawTemperatura]]);

		PlayersDataOnline[playerid][InCarId] = false;
		TogglePlayerControllableEx(playerid, true);

	}
	else
	{
		if ( PlayersDataOnline[playerid][IsTaxi] != -1 )
		{
			PayTaxi(playerid, true);
		}
    	PlayersDataOnline[playerid][InVehicle] = false;
	}
}
public LoadDataPistas()
{
	new LoadDataTemp[50];
	new DirPista[50];
	new File:FilePistas;
	new Conteo;
	new CurrentPos;

	for (new p = 0;p < MAX_COUNT_PISTAS;p++)
	{
		format(DirPista, sizeof(DirPista), "%sPista[%i].ulp", DIR_PISTAS, p);
		if (fexist(DirPista))
		{
		    FilePistas = fopen(DirPista, io_read);
		    fread(FilePistas, LoadDataTemp);
		    if ( strval(LoadDataTemp)  )
		    {
			    Pistas[p][Valid]		= strval(LoadDataTemp);
			    fread(FilePistas, LoadDataTemp);
			    Pistas[p][Lock]			= strval(LoadDataTemp);
  			    fread(FilePistas, LoadDataTemp);
		    	format(Pistas[p][NamePista], strlen(LoadDataTemp)-1, "%s", LoadDataTemp);
			    fread(FilePistas, LoadDataTemp);
			    Pistas[p][Interior]		= strval(LoadDataTemp);
			    fread(FilePistas, LoadDataTemp);
			    Pistas[p][World]    	= strval(LoadDataTemp);
			    fread(FilePistas, LoadDataTemp);
			    Pistas[p][IsCameras]    	= strval(LoadDataTemp);

			    Conteo = 0;
			    CurrentPos = 0;
				for (new i = 0; i < MAX_COUNT_PISTAS_POS*4;i++)
				{
				    fread(FilePistas, LoadDataTemp);
					/*if ( p == 1 )
					{
					    printf("%i || %s", i, LoadDataTemp);
				    }*/
			        switch ( Conteo )
			        {
			            case 0:
			            {
		  				    PistasPos[p][CurrentPos][Valid] = strval(LoadDataTemp);
						}
			            case 1:
			            {
		   				    PistasPos[p][CurrentPos][Xpos] = floatstr(LoadDataTemp);
						}
			            case 2:
			            {
		   				    PistasPos[p][CurrentPos][Ypos] = floatstr(LoadDataTemp);
						}
						case 3:
						{
		   				    PistasPos[p][CurrentPos][Zpos] = floatstr(LoadDataTemp);
						}
					}
			        Conteo++;
			        if ( Conteo == 4 )
			        {
						/*if ( p == 1 )
						{
							printf("%i || %f- %f - %f", i, PistasPos[p][CurrentPos][Xpos], PistasPos[p][CurrentPos][Ypos], PistasPos[p][CurrentPos][Zpos]);
						}*/
			            Conteo = 0;
			            CurrentPos++;
					}
				}
			    Conteo = 0;
			    CurrentPos = 0;
				for (new i = 0; i < MAX_COUNT_PISTAS_POS_PLAYERS*5;i++)
				{
				    fread(FilePistas, LoadDataTemp);
			        switch ( Conteo )
			        {
			            case 0:
			            {
		  				    PistasPosPlayers[p][CurrentPos][Valid] = strval(LoadDataTemp);
						}
			            case 1:
			            {
		   				    PistasPosPlayers[p][CurrentPos][Xpos] = floatstr(LoadDataTemp);
						}
			            case 2:
			            {
		   				    PistasPosPlayers[p][CurrentPos][Ypos] = floatstr(LoadDataTemp);
						}
						case 3:
						{
		   				    PistasPosPlayers[p][CurrentPos][Zpos] = floatstr(LoadDataTemp);
						}
						case 4:
						{
		   				    PistasPosPlayers[p][CurrentPos][ZZpos] = floatstr(LoadDataTemp);
						}
					}
			        Conteo++;
			        if ( Conteo == 5 )
			        {
			            Conteo = 0;
			            CurrentPos++;
					}

				}
			    Conteo = 0;
			    CurrentPos = 0;
				for (new i = 0; i < MAX_COUNT_PISTAS_POS_PLAYERS*5;i++)
				{
				    fread(FilePistas, LoadDataTemp);
					/*if ( p == 1 )
					{
					    printf("%i || %s", i, LoadDataTemp);
				    }*/
			        switch ( Conteo )
			        {
			            case 0:
			            {
		  				    PistasCarPointsExit[p][CurrentPos][Valid] = strval(LoadDataTemp);
						}
			            case 1:
			            {
		   				    PistasCarPointsExit[p][CurrentPos][Xpos] = floatstr(LoadDataTemp);
						}
			            case 2:
			            {
		   				    PistasCarPointsExit[p][CurrentPos][Ypos] = floatstr(LoadDataTemp);
						}
						case 3:
						{
		   				    PistasCarPointsExit[p][CurrentPos][Zpos] = floatstr(LoadDataTemp);
						}
						case 4:
						{
		   				    PistasCarPointsExit[p][CurrentPos][ZZpos] = floatstr(LoadDataTemp);
						}
					}
			        Conteo++;
			        if ( Conteo == 5 )
			        {
			            Conteo = 0;
			            CurrentPos++;
					}
				}
			    Conteo = 0;
			    CurrentPos = 0;
				for (new i = 0; i < MAX_COUNT_PISTAS_CAMERAS*5;i++)
				{
				    fread(FilePistas, LoadDataTemp);
					/*if ( p == 1 )
					{
					    printf("%i || %s", i, LoadDataTemp);
				    }*/
			        switch ( Conteo )
			        {
			            case 0:
			            {
		  				    PistasCameras[p][CurrentPos][Valid] = strval(LoadDataTemp);
						}
			            case 1:
			            {
		   				    PistasCameras[p][CurrentPos][Xpos] = floatstr(LoadDataTemp);
						}
			            case 2:
			            {
		   				    PistasCameras[p][CurrentPos][Ypos] = floatstr(LoadDataTemp);
						}
						case 3:
						{
		   				    PistasCameras[p][CurrentPos][Zpos] = floatstr(LoadDataTemp);
						}
						case 4:
						{
		   				    PistasCameras[p][CurrentPos][Vel] = floatstr(LoadDataTemp);
						}
					}
			        Conteo++;
			        if ( Conteo == 5 )
			        {
			            Conteo = 0;
			            CurrentPos++;
					}
				}
			    Conteo = 0;
			    CurrentPos = 0;
				for (new i = 0; i < MAX_COUNT_PISTAS_TOP*12;i++)
				{

				    fread(FilePistas, LoadDataTemp);
			        switch ( Conteo )
			        {
			            case 0:
			            {
			                if ( strlen(LoadDataTemp) > 3 )
			                {
		    		    		format(PistasTop[p][CurrentPos][PlayerName], strlen(LoadDataTemp)-1, "%s", LoadDataTemp);
     		    			}
	    		    		else
	    		    		{
		    		    		format(PistasTop[p][CurrentPos][PlayerName], MAX_PLAYER_NAME, "No", LoadDataTemp);
							}
						}
			            case 1:
			            {
		   				    PistasTop[p][CurrentPos][Time] = strval(LoadDataTemp);
						}
			            case 2:
			            {
		   				    PistasTop[p][CurrentPos][Empty_1] = strval(LoadDataTemp);
						}
						case 3:
						{
		   				    PistasTop[p][CurrentPos][Empty_2] = strval(LoadDataTemp);
						}
						case 4:
						{
		   				    PistasTop[p][CurrentPos][Vueltas] = strval(LoadDataTemp);
						}
						case 5:
						{
		   				    PistasTop[p][CurrentPos][DateHour] = strval(LoadDataTemp);
						}
						case 6:
						{
		   				    PistasTop[p][CurrentPos][DateMinute] = strval(LoadDataTemp);
						}
						case 7:
						{
		   				    PistasTop[p][CurrentPos][DateSecond] = strval(LoadDataTemp);
						}
						case 8:
						{
		   				    PistasTop[p][CurrentPos][DateMonth] = strval(LoadDataTemp);
						}
						case 9:
						{
		   				    PistasTop[p][CurrentPos][DateDay] = strval(LoadDataTemp);
						}
						case 10:
						{
		   				    PistasTop[p][CurrentPos][DateYear] = strval(LoadDataTemp);
						}
						case 11:
						{
		   				    PistasTop[p][CurrentPos][CarModel] = strval(LoadDataTemp);
						}
					}
			        Conteo++;
			        if ( Conteo == 12 )
			        {
			            Conteo = 0;
			            CurrentPos++;
					}
				}
	    	}
	    	else
	    	{
				CleanPista(p);
			}
			Pistas[p][TiempoAntes] = 10;
			Pistas[p][ConteoR] 	= 3;
			Pistas[p][Radio] 	= 10;

			Pistas[p][Vueltas] = 1;

			ValidingPista(p, true);
			fclose(FilePistas);
		}
	}
}
public SaveDataPistas()
{
	new SaveDataTemp[150];
	new DirPista[50];
	new File:FilePistas;

	for (new p = 0;p < MAX_COUNT_PISTAS;p++)
	{
		format(DirPista, sizeof(DirPista), "%sPista[%i].ulp", DIR_PISTAS, p);
	    FilePistas = fopen(DirPista, io_write);

		format(SaveDataTemp, sizeof(SaveDataTemp), "%i\r\n%i\r\n%s\r\n%i\r\n%i\r\n%i", Pistas[p][Valid], Pistas[p][Lock], Pistas[p][NamePista], Pistas[p][Interior], Pistas[p][World], Pistas[p][IsCameras]);
	    fwrite(FilePistas, SaveDataTemp);

		for (new i = 0; i < MAX_COUNT_PISTAS_POS;i++)
		{
			format(SaveDataTemp, sizeof(SaveDataTemp), "\r\n%i\r\n%f\r\n%f\r\n%f", PistasPos[p][i][Valid], PistasPos[p][i][Xpos], PistasPos[p][i][Ypos], PistasPos[p][i][Zpos]);
			fwrite(FilePistas, SaveDataTemp);
		}
		for (new i = 0; i < MAX_COUNT_PISTAS_POS_PLAYERS;i++)
		{
			format(SaveDataTemp, sizeof(SaveDataTemp), "\r\n%i\r\n%f\r\n%f\r\n%f\r\n%f", PistasPosPlayers[p][i][Valid], PistasPosPlayers[p][i][Xpos], PistasPosPlayers[p][i][Ypos], PistasPosPlayers[p][i][Zpos], PistasPosPlayers[p][i][ZZpos]);
			fwrite(FilePistas, SaveDataTemp);
		}
		for (new i = 0; i < MAX_COUNT_PISTAS_POS_PLAYERS;i++)
		{
			format(SaveDataTemp, sizeof(SaveDataTemp), "\r\n%i\r\n%f\r\n%f\r\n%f\r\n%f", PistasCarPointsExit[p][i][Valid], PistasCarPointsExit[p][i][Xpos], PistasCarPointsExit[p][i][Ypos], PistasCarPointsExit[p][i][Zpos], PistasCarPointsExit[p][i][ZZpos]);
			fwrite(FilePistas, SaveDataTemp);
		}
		for (new i = 0; i < MAX_COUNT_PISTAS_CAMERAS;i++)
		{
			format(SaveDataTemp, sizeof(SaveDataTemp), "\r\n%i\r\n%f\r\n%f\r\n%f\r\n%f", PistasCameras[p][i][Valid], PistasCameras[p][i][Xpos], PistasCameras[p][i][Ypos], PistasCameras[p][i][Zpos], PistasCameras[p][i][Vel]);
			fwrite(FilePistas, SaveDataTemp);
		}
		for (new i = 0; i < MAX_COUNT_PISTAS_TOP;i++)
		{
			format(SaveDataTemp, sizeof(SaveDataTemp), "\r\n%s\r\n%i\r\n%i\r\n%i\r\n%i\r\n%i\r\n%i\r\n%i\r\n%i\r\n%i\r\n%i\r\n%i",
			PistasTop[p][i][PlayerName],
			PistasTop[p][i][Time],
			PistasTop[p][i][Empty_1],
			PistasTop[p][i][Empty_2],
			PistasTop[p][i][Vueltas],
		    PistasTop[p][i][DateHour],
		    PistasTop[p][i][DateMinute],
		    PistasTop[p][i][DateSecond],
		    PistasTop[p][i][DateMonth],
		    PistasTop[p][i][DateDay],
		    PistasTop[p][i][DateYear],
		    PistasTop[p][i][CarModel]);

			fwrite(FilePistas, SaveDataTemp);
		}
		fclose(FilePistas);
	}
}
public ValidingPista(pistaid, option)
{
	new AreValid;
	for (new i = 0; i < MAX_COUNT_PISTAS_POS;i++)
	{
		if ( PistasPos[pistaid][i][Valid])
		{
		    AreValid++;
		    if ( AreValid > 1 )
		    {
				break;
			}
			else
			{
			    continue;
			}
		}
	}
	if ( AreValid > 1)
	{
	    AreValid = false;
		for (new i = 0; i < MAX_COUNT_PISTAS_POS_PLAYERS;i++)
		{
			if ( PistasPosPlayers[pistaid][i][Valid]&& PistasCarPointsExit[pistaid][i][Valid] ||
				!PistasPosPlayers[pistaid][i][Valid]&&!PistasCarPointsExit[pistaid][i][Valid])
			{
				if ( PistasPosPlayers[pistaid][i][Valid]&& PistasCarPointsExit[pistaid][i][Valid] )
				{
				    AreValid++;
				}
				continue;
			}
			else
			{
			    AreValid = false;
			    break;
			}
		}
		if ( AreValid )
		{
		    if ( Pistas[pistaid][IsCameras] )
		    {
		        AreValid = false;
				for (new i = 0; i < MAX_COUNT_PISTAS_CAMERAS;i++)
				{
					if ( PistasCameras[pistaid][i][Valid] )
					{
					    AreValid++;
					}
					else
					{
					    break;
					}
				}
		    	if ( AreValid < 2 )
		    	{
		    	    AreValid = 999;
				}
				else
				{
					Pistas[pistaid][MaxCameras] = AreValid - 1;
				}
	    	}
		}
		if ( AreValid && AreValid != 999)
		{
			Pistas[pistaid][MaxCheckPointsTotal] = GetMaxCountPistasPos(pistaid);
			Pistas[pistaid][ValidR] = true;
			Pistas[pistaid][MinPP]	= GetMinPistaRace(pistaid);
			Pistas[pistaid][MaxPP] 	= GetMaxPistaRace(pistaid);
			CleanPistaForRace(pistaid);
			return true;
		}
	}
	if ( option )
	{
	    if ( AreValid != 999 )
	    {
			CleanPista(pistaid);
		}
	}
	return false;
}
public CleanPista(pistaid)
{
   	format(Pistas[pistaid][NamePista], 35, "No");
	Pistas[pistaid][ShowTagPos] = false;
	Pistas[pistaid][ShowTagPlayers] = false;
	Pistas[pistaid][ShowTagCamPoints] = false;
	ShowOrHideTagPistaPlayers(pistaid);
	ShowOrHideTagPistaPos(pistaid);
	ShowOrHideTagPistaCam(pistaid);
	for (new i = 0; i < MAX_COUNT_PISTAS_POS;i++)
	{
		CleanPistaPos(pistaid, i);
	}
	for (new i = 0; i < MAX_COUNT_PISTAS_POS_PLAYERS;i++)
	{
		CleanPistaPosPlayers(pistaid, i);
		CleanPistaCarPointsExit(pistaid, i);
	}
	for (new i = 0; i < MAX_COUNT_PISTAS_CAMERAS;i++)
	{
		CleanPistaCameras(pistaid, i);
	}
	for (new i = 0; i < MAX_COUNT_PISTAS_TOP;i++)
	{
		CleanPistaRecords(pistaid, i);
	}
	Pistas[pistaid][ValidR] 	 = false;
	Pistas[pistaid][Valid] 		 = false;
	Pistas[pistaid][Lock]   	 = false;
	Pistas[pistaid][IsCameras]   = false;
}
public CleanPistaRecords(pistaid, posid)
{
	format(PistasTop[pistaid][posid][PlayerName], MAX_PLAYER_NAME, "No");
    PistasTop[pistaid][posid][Time]		= 0;
    PistasTop[pistaid][posid][Empty_1] 	= 0;
    PistasTop[pistaid][posid][Empty_2] 	= 0;
    PistasTop[pistaid][posid][Vueltas] 	= 0;
    PistasTop[pistaid][posid][DateHour] 	= 0;
    PistasTop[pistaid][posid][DateMinute] = 0;
    PistasTop[pistaid][posid][DateSecond] = 0;
    PistasTop[pistaid][posid][DateMonth] 	= 0;
    PistasTop[pistaid][posid][DateDay] 	= 0;
    PistasTop[pistaid][posid][DateYear] 	= 0;
}
public CleanPistaPos(pistaid, posid)
{
    PistasPos[pistaid][posid][Valid] 	= false;
    PistasPos[pistaid][posid][Xpos] 	= 0.0;
    PistasPos[pistaid][posid][Ypos] 	= 0.0;
    PistasPos[pistaid][posid][Zpos] 	= 0.0;
}
public CleanPistaPosPlayers(pistaid, posplayersid)
{
    PistasPosPlayers[pistaid][posplayersid][Valid] = false;
    PistasPosPlayers[pistaid][posplayersid][Xpos] 	= 0.0;
    PistasPosPlayers[pistaid][posplayersid][Ypos] 	= 0.0;
    PistasPosPlayers[pistaid][posplayersid][Zpos] 	= 0.0;
    PistasPosPlayers[pistaid][posplayersid][ZZpos] = 0.0;
}
public CleanPistaCameras(pistaid, posplayersid)
{
    PistasCameras[pistaid][posplayersid][Valid] = false;
    PistasCameras[pistaid][posplayersid][Xpos] 	= 0.0;
    PistasCameras[pistaid][posplayersid][Ypos] 	= 0.0;
    PistasCameras[pistaid][posplayersid][Zpos] 	= 0.0;
    PistasCameras[pistaid][posplayersid][Vel] 	= 0.0;
}
public CleanPistaCarPointsExit(pistaid, posplayersid)
{
    PistasCarPointsExit[pistaid][posplayersid][Valid] = false;
    PistasCarPointsExit[pistaid][posplayersid][Xpos] 	= 0.0;
    PistasCarPointsExit[pistaid][posplayersid][Ypos] 	= 0.0;
    PistasCarPointsExit[pistaid][posplayersid][Zpos] 	= 0.0;
    PistasCarPointsExit[pistaid][posplayersid][ZZpos] 	= 0.0;
}
public CreatePistaPos(playerid, pistaid, posid)
{
	new Float:PosPos[3];
	if ( IsPlayerInAnyVehicle(playerid) )
	{
	    GetVehiclePos(GetPlayerVehicleID(playerid), PosPos[0], PosPos[1], PosPos[2]);
	}
	else
	{
	    GetPlayerPos(playerid, PosPos[0], PosPos[1], PosPos[2]);
	}
    PistasPos[pistaid][posid][Valid] 	= true;
    PistasPos[pistaid][posid][Xpos] 	= PosPos[0];
    PistasPos[pistaid][posid][Ypos] 	= PosPos[1];
    PistasPos[pistaid][posid][Zpos] 	= PosPos[2];
	UpdateTagPistaPos(pistaid, posid);
}
public CreatePistaPlayers(playerid, pistaid, posid)
{
	new Float:PosPos[4];
	if ( IsPlayerInAnyVehicle(playerid) )
	{
	    GetVehiclePos(GetPlayerVehicleID(playerid), PosPos[0], PosPos[1], PosPos[2]);
	    GetVehicleZAngle(GetPlayerVehicleID(playerid), PosPos[3]);
	}
	else
	{
	    GetPlayerPos(playerid, PosPos[0], PosPos[1], PosPos[2]);
	    GetPlayerFacingAngle(playerid, PosPos[3]);
	}
    PistasPosPlayers[pistaid][posid][Valid] = true;
    PistasPosPlayers[pistaid][posid][Xpos] 	= PosPos[0];
    PistasPosPlayers[pistaid][posid][Ypos] 	= PosPos[1];
    PistasPosPlayers[pistaid][posid][Zpos] 	= PosPos[2];
    PistasPosPlayers[pistaid][posid][ZZpos] = PosPos[3];
	UpdateTagPistaPlayers(pistaid, posid);
}
public CreatePistaCarPoints(playerid, pistaid, posid)
{
	new Float:PosPos[4];
	if ( IsPlayerInAnyVehicle(playerid) )
	{
	    GetVehiclePos(GetPlayerVehicleID(playerid), PosPos[0], PosPos[1], PosPos[2]);
	    GetVehicleZAngle(GetPlayerVehicleID(playerid), PosPos[3]);
	}
	else
	{
	    GetPlayerPos(playerid, PosPos[0], PosPos[1], PosPos[2]);
	    GetPlayerFacingAngle(playerid, PosPos[3]);
	}
    PistasCarPointsExit[pistaid][posid][Valid] = true;
    PistasCarPointsExit[pistaid][posid][Xpos] 	= PosPos[0];
    PistasCarPointsExit[pistaid][posid][Ypos] 	= PosPos[1];
    PistasCarPointsExit[pistaid][posid][Zpos] 	= PosPos[2];
    PistasCarPointsExit[pistaid][posid][ZZpos] = PosPos[3];
	UpdateTagPistaPlayers(pistaid, posid);
}
public CreatePistaCameras(playerid, pistaid, posid)
{
	new Float:PosPos[4];
	if ( IsPlayerInAnyVehicle(playerid) )
	{
	    GetVehiclePos(GetPlayerVehicleID(playerid), PosPos[0], PosPos[1], PosPos[2]);
	}
	else
	{
	    GetPlayerPos(playerid, PosPos[0], PosPos[1], PosPos[2]);
	}
    PistasCameras[pistaid][posid][Valid] = true;
    PistasCameras[pistaid][posid][Xpos]  = PosPos[0];
    PistasCameras[pistaid][posid][Ypos]  = PosPos[1];
    PistasCameras[pistaid][posid][Zpos]  = PosPos[2];
    PistasCameras[pistaid][posid][Vel] 	 = 0.01;
	UpdateTagPistaCameras(pistaid, posid);
}
public GetMaxCountPistas()
{
	new CountP;
	for (new p = 0;p < MAX_COUNT_PISTAS;p++)
	{
	    if ( Pistas[p][Valid] )
	    {
			CountP++;
		}
	}
	return CountP;
}
public GetMaxCountPistasPos(pistaid)
{
	new CountPPos;
	for (new i = 0; i < MAX_COUNT_PISTAS_POS;i++)
	{
		if (PistasPos[pistaid][i][Valid])
		{
		    CountPPos++;
		}
	}
	return CountPPos;
}
public GetMaxCountPistasCamPoints(pistaid)
{
	new CountPPosP;
	for (new i = 0; i < MAX_COUNT_PISTAS_CAMERAS;i++)
	{
		if (PistasCameras[pistaid][i][Valid])
		{
		    CountPPosP++;
		}
	}
	return CountPPosP;
}
public GetMaxCountPistasCarPointsExit(pistaid)
{
	new CountPPosP;
	for (new i = 0; i < MAX_COUNT_PISTAS_POS_PLAYERS;i++)
	{
		if (PistasCarPointsExit[pistaid][i][Valid])
		{
		    CountPPosP++;
		}
	}
	return CountPPosP;
}
public GetMaxCountPistasPlayers(pistaid)
{
	new CountPPosP;
	for (new i = 0; i < MAX_COUNT_PISTAS_POS_PLAYERS;i++)
	{
		if (PistasPosPlayers[pistaid][i][Valid])
		{
		    CountPPosP++;
		}
	}
	return CountPPosP;
}
public GetNextPista()
{
	for (new p = 0;p < MAX_COUNT_PISTAS;p++)
	{
	    if ( !Pistas[p][ValidR] && !Pistas[p][Valid])
	    {
	        return p;
	    }
	}
	return -1;
}
public ShowEditorPistas(playerid)
{
	new ListDialog[350];
	format(ListDialog, sizeof(ListDialog),
	"{00A5FF}1- {E6E6E6}Nueva Pista\r\n{00A5FF}2- {E6E6E6}Lista de Pistas {00F50A}(%i)",
		GetMaxCountPistas()
	);
	ShowPlayerDialogEx(playerid,95,DIALOG_STYLE_LIST,"{00A5FF}Editor de Pistas", ListDialog, "Seleccionar", "Salir");
}
public ShowNewPista(playerid)
{
	new NextPista = GetNextPista();
	if ( NextPista != -1 )
	{
		PlayersDataOnline[playerid][SaveAfterAgenda][0] = NextPista;
		ShowPlayerDialogEx(playerid,96,DIALOG_STYLE_INPUT,"{00A5FF}Editor de Pistas - Nueva Pista", "{E6E6E6}Ingrese un nombre para la pista", "Crear", "Volver");
	}
	else
	{
		ShowPlayerDialogEx(playerid,94,DIALOG_STYLE_MSGBOX,"{00A5FF}Editor de Pistas - Error", "{E6E6E6}Se ha alcanzado el máximo número de pistas", "Aceptar", "Volver");
	}
}
public ShowListPistas(playerid)
{
	new PistasDialog[1400];
	new TempConvert[50];
	new ConteoPistas = -1;
	for (new i = 0; i < MAX_COUNT_PISTAS; i++)
	{
	    if ( Pistas[i][Valid] )
	    {
			if ( ConteoPistas != -1 )
			{
				if ( !Pistas[i][ValidR] )
				{
			    	format(TempConvert, sizeof(TempConvert), "\r\n{F50000}%s", Pistas[i][NamePista]);
		    	}
		    	else
		    	{
			    	format(TempConvert, sizeof(TempConvert), "\r\n{E6E6E6}%s", Pistas[i][NamePista]);
				}
	    	}
			else
			{
				if ( !Pistas[i][ValidR] )
				{
		    		format(TempConvert, sizeof(TempConvert), "{F50000}%s", Pistas[i][NamePista]);
	    		}
	    		else
	    		{
		    		format(TempConvert, sizeof(TempConvert), "{E6E6E6}%s", Pistas[i][NamePista]);
				}
			}
	        strcat(PistasDialog, TempConvert, sizeof(PistasDialog));
	        ConteoPistas++;
	        PlayersDataOnline[playerid][SaveAfterAgenda][ConteoPistas] = i;
        }
	}
	if (ConteoPistas != -1)
	{
		ShowPlayerDialogEx(playerid,97,DIALOG_STYLE_LIST,"{00A5FF}Editor de Pistas - Lista de Pistas", PistasDialog, "Seleccionar", "Volver");
	}
	else
	{
		ShowPlayerDialogEx(playerid,94,DIALOG_STYLE_MSGBOX,"{00A5FF}Editor de Pistas - Error", "{E6E6E6}No se encontrarón pistas creadas", "Aceptar", "Volver");
	}
}
public PistaExist(playerid, pistaid)
{
	if ( Pistas[pistaid][Valid] )
	{
		return true;
	}
	else
	{
		ShowPlayerDialogEx(playerid,999,DIALOG_STYLE_MSGBOX,"{00A5FF}Pistas - Error", "{E6E6E6}Oops, la pista con la que estabas trabajando fue borrada!", "Ok", "");
	    return false;
	}
}
public ShowListPistasOptions(playerid, pistaid)
{
    if ( PistaExist(playerid, pistaid) )
    {
		new ListDialog[700];
		format(ListDialog, sizeof(ListDialog),
		"{00A5FF}1- {E6E6E6}Modificar Nombre {00F50A}(%s)\r\n{00A5FF}2- {E6E6E6}CheckPoints {00F50A}(%i)\r\n{00A5FF}3- {E6E6E6}CarPoints {00F50A}(%i)\r\n{00A5FF}4- {E6E6E6}CarPointsExit {00F50A}(%i)\r\n{00A5FF}5- {E6E6E6}CamerasPoints {00F50A}(%i)\r\n{00A5FF}6- {E6E6E6}Mostrar CheckPoints {00F50A}(%s)\r\n",
		    Pistas[pistaid][NamePista],
		    GetMaxCountPistasPos(pistaid),
		    GetMaxCountPistasPlayers(pistaid),
		    GetMaxCountPistasCarPointsExit(pistaid),
		    GetMaxCountPistasCamPoints(pistaid),
		    SiOrNo[Pistas[pistaid][ShowTagPos]]
		);
		format(ListDialog, sizeof(ListDialog),
		"%s{00A5FF}7- {E6E6E6}Mostrar CarPoints {00F50A}(%s)\r\n{00A5FF}8- {E6E6E6}Mostrar CarPointsExit {00F50A}(%s)\r\n{00A5FF}9- {E6E6E6}Mostrar CamerasPoints {00F50A}(%s)\r\n{00A5FF}10- {E6E6E6}Validar\r\n{00A5FF}11- {E6E6E6}Interior {00F50A}(%i)\r\n{00A5FF}11- {E6E6E6}Mundo {00F50A}(%i)\r\n{00A5FF}12- {E6E6E6}Bloqueado {00F50A}(%s)\r\n{00A5FF}13- {E6E6E6}Cámaras {00F50A}(%s)\r\n{00A5FF}14- {E6E6E6}Eliminar",
			ListDialog,
		    SiOrNo[Pistas[pistaid][ShowTagPlayers]],
		    SiOrNo[Pistas[pistaid][ShowTagCarPointsExit]],
		    SiOrNo[Pistas[pistaid][ShowTagCamPoints]],
		    Pistas[pistaid][Interior],
		    Pistas[pistaid][World],
		    SiOrNo[Pistas[pistaid][Lock]],
		    SiOrNo[Pistas[pistaid][IsCameras]]
		);
		ShowPlayerDialogEx(playerid,98,DIALOG_STYLE_LIST,"{00A5FF}Editor de Pistas - Opciones de Edición", ListDialog, "Seleccionar", "Volver");
		PlayersDataOnline[playerid][SaveAfterAgenda][0] = pistaid;
	}
}
public ShowPistaChangeName(playerid, pistaid)
{
	if ( PistaExist(playerid, pistaid) )
	{
		PlayersDataOnline[playerid][SaveAfterAgenda][0] = pistaid;
		ShowPlayerDialogEx(playerid,99,DIALOG_STYLE_INPUT,"{00A5FF}Editor de Pistas - Modificar nombre", "{E6E6E6}Ingrese un nuevo nombre para la pista", "Modificar", "Volver");
	}
}
public ShowPistaShowCheckPoints(playerid, pistaid)
{
	if ( PistaExist(playerid, pistaid) )
	{
        if ( !Pistas[pistaid][Used] )
        {
		    PlayersDataOnline[playerid][SaveAfterAgenda][0] = pistaid;
			new PistasDialog[2500];
			new TempConvert[50];
			for (new i = 0; i < MAX_COUNT_PISTAS_POS; i++)
			{
				if (i)
				{
					if ( PistasPos[pistaid][i][Valid] )
					{
				    	format(TempConvert, sizeof(TempConvert), "\r\n{00F50A}ID: %i - Usado", i);
			    	}
			    	else
			    	{
				    	format(TempConvert, sizeof(TempConvert), "\r\n{F50000}ID: %i - Sin Uso", i);
					}
		    	}
				else
				{
					if ( PistasPos[pistaid][i][Valid] )
					{
				    	format(TempConvert, sizeof(TempConvert), "{00F50A}ID: %i - Usado", i);
			    	}
			    	else
			    	{
				    	format(TempConvert, sizeof(TempConvert), "{F50000}ID: %i - Sin Uso", i);
					}
				}
		        strcat(PistasDialog, TempConvert, sizeof(PistasDialog));
			}
		    new PistasDialogName[MAX_TEXT_CHAT];
		    format(PistasDialogName, sizeof(PistasDialogName), "{00A5FF}Editor de Pistas - %s (CheckPoints)", Pistas[pistaid][NamePista]);
			ShowPlayerDialogEx(playerid,100,DIALOG_STYLE_LIST, PistasDialogName, PistasDialog, "Seleccionar", "Volver");
		}
		else
		{
			ShowPlayerDialogEx(playerid,94,DIALOG_STYLE_MSGBOX,"{00A5FF}Editor de Pistas - Error", "{E6E6E6}Esta pista está siendo usada en una carrera,\ndebe detenerla antes de seguir editandola", "Aceptar", "Volver");
		}
	}
}
public ShowPistaShowPosPlayers(playerid, pistaid)
{
	if ( PistaExist(playerid, pistaid) )
	{
        if ( !Pistas[pistaid][Used] )
        {
		    PlayersDataOnline[playerid][SaveAfterAgenda][0] = pistaid;
			new PistasDialog[1400];
			new TempConvert[50];
			for (new i = 0; i < MAX_COUNT_PISTAS_POS_PLAYERS; i++)
			{
				if (i)
				{
					if ( PistasPosPlayers[pistaid][i][Valid] )
					{
				    	format(TempConvert, sizeof(TempConvert), "\r\n{00F50A}ID: %i - Usado", i);
			    	}
			    	else
			    	{
				    	format(TempConvert, sizeof(TempConvert), "\r\n{F50000}ID: %i - Sin Uso", i);
					}
		    	}
				else
				{
					if ( PistasPosPlayers[pistaid][i][Valid] )
					{
				    	format(TempConvert, sizeof(TempConvert), "{00F50A}ID: %i - Usado", i);
			    	}
			    	else
			    	{
				    	format(TempConvert, sizeof(TempConvert), "{F50000}ID: %i - Sin Uso", i);
					}
				}
		        strcat(PistasDialog, TempConvert, sizeof(PistasDialog));
			}
		    new PistasDialogName[MAX_TEXT_CHAT];
		    format(PistasDialogName, sizeof(PistasDialogName), "{00A5FF}Editor de Pistas - %s (CarPoints)", Pistas[pistaid][NamePista]);
			ShowPlayerDialogEx(playerid,101,DIALOG_STYLE_LIST, PistasDialogName, PistasDialog, "Seleccionar", "Volver");
		}
		else
		{
			ShowPlayerDialogEx(playerid,94,DIALOG_STYLE_MSGBOX,"{00A5FF}Editor de Pistas - Error", "{E6E6E6}Esta pista está siendo usada en una carrera,\ndebe detenerla antes de seguir editandola", "Aceptar", "Volver");
		}
	}
}
public ShowPistaShowCheckPointsOptions(playerid, pistaid, posid)
{
    if ( PistaExist(playerid, pistaid) )
    {
        if ( !Pistas[pistaid][Used] )
        {
			new ListDialog[500];
			format(ListDialog, sizeof(ListDialog),
			"{00A5FF}Info: {E6E6E6}X: %f - Y: %f - Z: %f\r\n{00A5FF}1- {E6E6E6}Ir {00F50A}\r\n{00A5FF}2- {E6E6E6}Editar\r\n{00A5FF}3- {E6E6E6}Borrar\r\n{00A5FF}4- {E6E6E6}Mover",
			    PistasPos[pistaid][posid][Xpos],
			    PistasPos[pistaid][posid][Ypos],
			    PistasPos[pistaid][posid][Zpos]
			);
		    new PistasDialogName[MAX_TEXT_CHAT];
		    format(PistasDialogName, sizeof(PistasDialogName), "{00A5FF}Editor de Pistas - %s (CheckPoints)", Pistas[pistaid][NamePista]);
			ShowPlayerDialogEx(playerid,102,DIALOG_STYLE_LIST, PistasDialogName, ListDialog, "Seleccionar", "Volver");

			PlayersDataOnline[playerid][SaveAfterAgenda][0] = pistaid;
			PlayersDataOnline[playerid][SaveAfterAgenda][1] = posid;
		}
		else
		{
			ShowPlayerDialogEx(playerid,94,DIALOG_STYLE_MSGBOX,"{00A5FF}Editor de Pistas - Error", "{E6E6E6}Esta pista está siendo usada en una carrera,\ndebe detenerla antes de seguir editandola", "Aceptar", "Volver");
		}
	}
}
public ShowPistaShowPosPlayersOptions(playerid, pistaid, posid)
{
    if ( PistaExist(playerid, pistaid) )
    {
        if ( !Pistas[pistaid][Used] )
        {
			new ListDialog[500];
			format(ListDialog, sizeof(ListDialog),
			"{00A5FF}Info: {E6E6E6}X: %f - Y: %f - Z: %f - ZZ: %f\r\n{00A5FF}1- {E6E6E6}Ir {00F50A}\r\n{00A5FF}2- {E6E6E6}Editar\r\n{00A5FF}3- {E6E6E6}Borrar\r\n{00A5FF}4- {E6E6E6}Mover",
			    PistasPosPlayers[pistaid][posid][Xpos],
			    PistasPosPlayers[pistaid][posid][Ypos],
			    PistasPosPlayers[pistaid][posid][Zpos],
			    PistasPosPlayers[pistaid][posid][ZZpos]
			);
		    new PistasDialogName[MAX_TEXT_CHAT];
		    format(PistasDialogName, sizeof(PistasDialogName), "{00A5FF}Editor de Pistas - %s (CarPoints)", Pistas[pistaid][NamePista]);
			ShowPlayerDialogEx(playerid,103,DIALOG_STYLE_LIST, PistasDialogName, ListDialog, "Seleccionar", "Volver");

			PlayersDataOnline[playerid][SaveAfterAgenda][0] = pistaid;
			PlayersDataOnline[playerid][SaveAfterAgenda][1] = posid;
		}
		else
		{
			ShowPlayerDialogEx(playerid,94,DIALOG_STYLE_MSGBOX,"{00A5FF}Editor de Pistas - Error", "{E6E6E6}Esta pista está siendo usada en una carrera,\ndebe detenerla antes de seguir editandola", "Aceptar", "Volver");
		}
	}
}
public ShowPistaCamOptions(playerid, pistaid, posid)
{
    if ( PistaExist(playerid, pistaid) )
    {
        if ( !Pistas[pistaid][Used] )
        {
			new ListDialog[500];
			format(ListDialog, sizeof(ListDialog),
			"{00A5FF}Info: {E6E6E6}X: %f - Y: %f - Z: %f - Velocidad: %f\r\n{00A5FF}1- {E6E6E6}Ir {00F50A}\r\n{00A5FF}2- {E6E6E6}Editar\r\n{00A5FF}4- {E6E6E6}Velocidad (%f)\r\n{00A5FF}5- {E6E6E6}Borrar\r\n{00A5FF}6- {E6E6E6}Mover",
			    PistasCameras[pistaid][posid][Xpos],
			    PistasCameras[pistaid][posid][Ypos],
			    PistasCameras[pistaid][posid][Zpos],
			    PistasCameras[pistaid][posid][Vel],
   			    PistasCameras[pistaid][posid][Vel]
			);
		    new PistasDialogName[MAX_TEXT_CHAT];
		    format(PistasDialogName, sizeof(PistasDialogName), "{00A5FF}Editor de Pistas - %s (CamerasPoints)", Pistas[pistaid][NamePista]);
			ShowPlayerDialogEx(playerid,124,DIALOG_STYLE_LIST, PistasDialogName, ListDialog, "Seleccionar", "Volver");

			PlayersDataOnline[playerid][SaveAfterAgenda][0] = pistaid;
			PlayersDataOnline[playerid][SaveAfterAgenda][1] = posid;
		}
		else
		{
			ShowPlayerDialogEx(playerid,94,DIALOG_STYLE_MSGBOX,"{00A5FF}Editor de Pistas - Error", "{E6E6E6}Esta pista está siendo usada en una carrera,\ndebe detenerla antes de seguir editandola", "Aceptar", "Volver");
		}
	}
}
public ShowPistaCarPointsExitOptions(playerid, pistaid, posid)
{
    if ( PistaExist(playerid, pistaid) )
    {
        if ( !Pistas[pistaid][Used] )
        {
			new ListDialog[500];
			format(ListDialog, sizeof(ListDialog),
			"{00A5FF}Info: {E6E6E6}X: %f - Y: %f - Z: %f - ZZ: %f\r\n{00A5FF}1- {E6E6E6}Ir {00F50A}\r\n{00A5FF}2- {E6E6E6}Editar\r\n{00A5FF}3- {E6E6E6}Borrar\r\n{00A5FF}4- {E6E6E6}Mover",
			    PistasCarPointsExit[pistaid][posid][Xpos],
			    PistasCarPointsExit[pistaid][posid][Ypos],
			    PistasCarPointsExit[pistaid][posid][Zpos],
			    PistasCarPointsExit[pistaid][posid][ZZpos]
			);
		    new PistasDialogName[MAX_TEXT_CHAT];
		    format(PistasDialogName, sizeof(PistasDialogName), "{00A5FF}Editor de Pistas - %s (CarPointsExit)", Pistas[pistaid][NamePista]);
			ShowPlayerDialogEx(playerid,107,DIALOG_STYLE_LIST, PistasDialogName, ListDialog, "Seleccionar", "Volver");

			PlayersDataOnline[playerid][SaveAfterAgenda][0] = pistaid;
			PlayersDataOnline[playerid][SaveAfterAgenda][1] = posid;
		}
		else
		{
			ShowPlayerDialogEx(playerid,94,DIALOG_STYLE_MSGBOX,"{00A5FF}Editor de Pistas - Error", "{E6E6E6}Esta pista está siendo usada en una carrera,\ndebe detenerla antes de seguir editandola", "Aceptar", "Volver");
		}
	}
}
public ShowPistaShowCarPointsExit(playerid, pistaid)
{
	if ( PistaExist(playerid, pistaid) )
	{
        if ( !Pistas[pistaid][Used] )
        {
		    PlayersDataOnline[playerid][SaveAfterAgenda][0] = pistaid;
			new PistasDialog[1400];
			new TempConvert[50];
			for (new i = 0; i < MAX_COUNT_PISTAS_POS_PLAYERS; i++)
			{
				if (i)
				{
					if ( PistasCarPointsExit[pistaid][i][Valid] )
					{
				    	format(TempConvert, sizeof(TempConvert), "\r\n{00F50A}ID: %i - Usado", i);
			    	}
			    	else
			    	{
				    	format(TempConvert, sizeof(TempConvert), "\r\n{F50000}ID: %i - Sin Uso", i);
					}
		    	}
				else
				{
					if ( PistasCarPointsExit[pistaid][i][Valid] )
					{
				    	format(TempConvert, sizeof(TempConvert), "{00F50A}ID: %i - Usado", i);
			    	}
			    	else
			    	{
				    	format(TempConvert, sizeof(TempConvert), "{F50000}ID: %i - Sin Uso", i);
					}
				}
		        strcat(PistasDialog, TempConvert, sizeof(PistasDialog));
			}
		    new PistasDialogName[MAX_TEXT_CHAT];
		    format(PistasDialogName, sizeof(PistasDialogName), "{00A5FF}Editor de Pistas - %s (CarPointsExit)", Pistas[pistaid][NamePista]);
			ShowPlayerDialogEx(playerid,106,DIALOG_STYLE_LIST, PistasDialogName, PistasDialog, "Seleccionar", "Volver");
		}
		else
		{
			ShowPlayerDialogEx(playerid,94,DIALOG_STYLE_MSGBOX,"{00A5FF}Editor de Pistas - Error", "{E6E6E6}Esta pista está siendo usada en una carrera,\ndebe detenerla antes de seguir editandola", "Aceptar", "Volver");
		}
	}
}
public ShowPistaShowCam(playerid, pistaid)
{
	if ( PistaExist(playerid, pistaid) )
	{
        if ( !Pistas[pistaid][Used] )
        {
		    PlayersDataOnline[playerid][SaveAfterAgenda][0] = pistaid;
			new PistasDialog[1400];
			new TempConvert[50];
			for (new i = 0; i < MAX_COUNT_PISTAS_CAMERAS; i++)
			{
				if (i)
				{
					if ( PistasCameras[pistaid][i][Valid] )
					{
				    	format(TempConvert, sizeof(TempConvert), "\r\n{00F50A}ID: %i - Usado", i);
			    	}
			    	else
			    	{
				    	format(TempConvert, sizeof(TempConvert), "\r\n{F50000}ID: %i - Sin Uso", i);
					}
		    	}
				else
				{
					if ( PistasCameras[pistaid][i][Valid] )
					{
				    	format(TempConvert, sizeof(TempConvert), "{00F50A}ID: %i - Usado", i);
			    	}
			    	else
			    	{
				    	format(TempConvert, sizeof(TempConvert), "{F50000}ID: %i - Sin Uso", i);
					}
				}
		        strcat(PistasDialog, TempConvert, sizeof(PistasDialog));
			}
		    new PistasDialogName[MAX_TEXT_CHAT];
		    format(PistasDialogName, sizeof(PistasDialogName), "{00A5FF}Editor de Pistas - %s (CamerasPoints)", Pistas[pistaid][NamePista]);
			ShowPlayerDialogEx(playerid,123,DIALOG_STYLE_LIST, PistasDialogName, PistasDialog, "Seleccionar", "Volver");
		}
		else
		{
			ShowPlayerDialogEx(playerid,94,DIALOG_STYLE_MSGBOX,"{00A5FF}Editor de Pistas - Error", "{E6E6E6}Esta pista está siendo usada en una carrera,\ndebe detenerla antes de seguir editandola", "Aceptar", "Volver");
		}
	}
}
public ShowPistaRemove(playerid, pistaid)
{
    if ( !Pistas[pistaid][Used] )
    {
		ShowPlayerDialogEx(playerid,104,DIALOG_STYLE_MSGBOX,"{00A5FF}Editor de Pistas - Eliminar Pista", "{E6E6E6}¿Esta seguro que desea eliminar está pista?", "Si", "No");
	}
	else
	{
		ShowPlayerDialogEx(playerid,94,DIALOG_STYLE_MSGBOX,"{00A5FF}Editor de Pistas - Error", "{E6E6E6}Esta pista está siendo usada en una carrera,\ndebe detenerla antes de seguir editandola", "Aceptar", "Volver");
	}
}
public ShowPistaValidar(playerid, pistaid)
{
    if ( !Pistas[pistaid][Used] )
    {
		if ( ValidingPista(pistaid, false) )
		{
			ShowPlayerDialogEx(playerid,105,DIALOG_STYLE_MSGBOX,"{00A5FF}Editor de Pistas - Validación OK", "{00F50A}La pista se ha validado correctamente", "Ok", "");
		}
		else
		{
			ShowPlayerDialogEx(playerid,105,DIALOG_STYLE_MSGBOX,"{00A5FF}Editor de Pistas - Error en Validación", "{F50000}No se pudo validar la pista\nRevise la misma y intentelo de nuevo", "Ok", "");
		}
	}
	else
	{
		ShowPlayerDialogEx(playerid,94,DIALOG_STYLE_MSGBOX,"{00A5FF}Editor de Pistas - Error", "{E6E6E6}Esta pista está siendo usada en una carrera,\ndebe detenerla antes de seguir editandola", "Aceptar", "Volver");
	}
}
public ShowOrHideTagPistaPos(pistaid)
{
	if ( Pistas[pistaid][ShowTagPos] )
	{
		for (new i = 0; i < MAX_COUNT_PISTAS_POS;i++)
		{
			if ( PistasPos[pistaid][i][Valid] )
			{
				UpdateTagPistaPos(pistaid, i);
			}
		}
	}
	else
	{
		for (new i = 0; i < MAX_COUNT_PISTAS_POS;i++)
		{
			if ( PistasPos[pistaid][i][Valid] )
			{
			    RemoveTagPistaPos(pistaid, i);
			}
		}
	}
}
public ShowOrHideTagPistaPlayers(pistaid)
{
	if ( Pistas[pistaid][ShowTagPlayers] )
	{
		for (new i = 0; i < MAX_COUNT_PISTAS_POS_PLAYERS;i++)
		{
			if ( PistasPosPlayers[pistaid][i][Valid] )
			{
				UpdateTagPistaPlayers(pistaid, i);
			}
		}
	}
	else
	{
		for (new i = 0; i < MAX_COUNT_PISTAS_POS_PLAYERS;i++)
		{
			if ( PistasPosPlayers[pistaid][i][Valid] )
			{
			    RemoveTagPistaPlayers(pistaid, i);
			}
		}
	}
}
public RemoveTagPistaPos(pistaid, posid)
{
	if ( PistasPos[pistaid][posid][Text3DPistaB] )
	{
		Delete3DTextLabel(PistasPos[pistaid][posid][Text3DPista]);
		PistasPos[pistaid][posid][Text3DPistaB] = false;
	}
}
public UpdateTagPistaPos(pistaid, posid)
{
	if ( PistasPos[pistaid][posid][Text3DPistaB] )
	{
		Delete3DTextLabel(PistasPos[pistaid][posid][Text3DPista]);
	}
	if ( PistasPos[pistaid][posid][Valid] && Pistas[pistaid][ShowTagPos])
	{
		new MsgObject3D[400];
		format(MsgObject3D, sizeof(MsgObject3D), "Nombre: %s[ID:%i]\n\nPosX: %f\nPosY: %f\nPosZ: %f",
		Pistas[pistaid][NamePista],
		posid,
		PistasPos[pistaid][posid][Xpos],
		PistasPos[pistaid][posid][Ypos],
		PistasPos[pistaid][posid][Zpos]
		);
		PistasPos[pistaid][posid][Text3DPista] = Create3DTextLabel(MsgObject3D,0x0055FFFF,
		PistasPos[pistaid][posid][Xpos],
		PistasPos[pistaid][posid][Ypos],
		PistasPos[pistaid][posid][Zpos],
		300.0,
		Pistas[pistaid][World]);
		PistasPos[pistaid][posid][Text3DPistaB] = true;
	}
	else
	{
		PistasPos[pistaid][posid][Text3DPistaB] = false;
	}
}
public RemoveTagPistaPlayers(pistaid, posid)
{
	if ( PistasPosPlayers[pistaid][posid][Text3DPistaB] )
	{
		Delete3DTextLabel(PistasPosPlayers[pistaid][posid][Text3DPista]);
		PistasPosPlayers[pistaid][posid][Text3DPistaB] = false;
	}
}
public UpdateTagPistaPlayers(pistaid, posid)
{
	if ( PistasPosPlayers[pistaid][posid][Text3DPistaB] )
	{
		Delete3DTextLabel(PistasPosPlayers[pistaid][posid][Text3DPista]);
	}
	if ( PistasPosPlayers[pistaid][posid][Valid] && Pistas[pistaid][ShowTagPlayers])
	{
		new MsgObject3D[400];
		format(MsgObject3D, sizeof(MsgObject3D), "Nombre: %s[ID:%i]\n\nPosX: %f\nPosY: %f\nPosZ: %f\nPosZZ: %f",
		Pistas[pistaid][NamePista],
		posid,
		PistasPosPlayers[pistaid][posid][Xpos],
		PistasPosPlayers[pistaid][posid][Ypos],
		PistasPosPlayers[pistaid][posid][Zpos],
		PistasPosPlayers[pistaid][posid][ZZpos]
		);
		PistasPosPlayers[pistaid][posid][Text3DPista] = Create3DTextLabel(MsgObject3D,COLOR_3DLABEL_PISTAS,
		PistasPosPlayers[pistaid][posid][Xpos],
		PistasPosPlayers[pistaid][posid][Ypos],
		PistasPosPlayers[pistaid][posid][Zpos],
		300.0, Pistas[pistaid][World]);
		PistasPosPlayers[pistaid][posid][Text3DPistaB] = true;
	}
}
public RemoveTagPistaCarPointsExit(pistaid, posid)
{
	if ( PistasCarPointsExit[pistaid][posid][Text3DPistaB] )
	{
		Delete3DTextLabel(PistasCarPointsExit[pistaid][posid][Text3DPista]);
		PistasCarPointsExit[pistaid][posid][Text3DPistaB] = false;
	}
}
public UpdateTagPistaCarPointsExit(pistaid, posid)
{
	if ( PistasCarPointsExit[pistaid][posid][Text3DPistaB] )
	{
		Delete3DTextLabel(PistasCarPointsExit[pistaid][posid][Text3DPista]);
	}
	if ( PistasCarPointsExit[pistaid][posid][Valid] && Pistas[pistaid][ShowTagCarPointsExit])
	{
		new MsgObject3D[400];
		format(MsgObject3D, sizeof(MsgObject3D), "Nombre: %s[ID:%i]\n\nPosX: %f\nPosY: %f\nPosZ: %f\nPosZZ: %f",
		Pistas[pistaid][NamePista],
		posid,
		PistasCarPointsExit[pistaid][posid][Xpos],
		PistasCarPointsExit[pistaid][posid][Ypos],
		PistasCarPointsExit[pistaid][posid][Zpos],
		PistasCarPointsExit[pistaid][posid][ZZpos]
		);
		PistasCarPointsExit[pistaid][posid][Text3DPista] = Create3DTextLabel(MsgObject3D,0x00AD28FF,
		PistasCarPointsExit[pistaid][posid][Xpos],
		PistasCarPointsExit[pistaid][posid][Ypos],
		PistasCarPointsExit[pistaid][posid][Zpos],
		300.0, Pistas[pistaid][World]);
		PistasCarPointsExit[pistaid][posid][Text3DPistaB] = true;
	}
}
public RemoveTagPistaCameras(pistaid, posid)
{
	if ( PistasCameras[pistaid][posid][Text3DPistaB] )
	{
		Delete3DTextLabel(PistasCameras[pistaid][posid][Text3DPista]);
		PistasCameras[pistaid][posid][Text3DPistaB] = false;
	}
}
public UpdateTagPistaCameras(pistaid, posid)
{
	if ( PistasCameras[pistaid][posid][Text3DPistaB] )
	{
		Delete3DTextLabel(PistasCameras[pistaid][posid][Text3DPista]);
	}
	if ( PistasCameras[pistaid][posid][Valid] && Pistas[pistaid][ShowTagCamPoints])
	{
		new MsgObject3D[400];
		format(MsgObject3D, sizeof(MsgObject3D), "Nombre: %s[ID:%i]\n\nPosX: %f\nPosY: %f\nPosZ: %f\nVelocidad: %f",
		Pistas[pistaid][NamePista],
		posid,
		PistasCameras[pistaid][posid][Xpos],
		PistasCameras[pistaid][posid][Ypos],
		PistasCameras[pistaid][posid][Zpos],
		PistasCameras[pistaid][posid][Vel]
		);
		PistasCameras[pistaid][posid][Text3DPista] = Create3DTextLabel(MsgObject3D,0xFA00FFFF,
		PistasCameras[pistaid][posid][Xpos],
		PistasCameras[pistaid][posid][Ypos],
		PistasCameras[pistaid][posid][Zpos],
		300.0, Pistas[pistaid][World]);
		PistasCameras[pistaid][posid][Text3DPistaB] = true;
	}
}
public ShowOrHideTagPistaCam(pistaid)
{
	if ( Pistas[pistaid][ShowTagCamPoints] )
	{
		for (new i = 0; i < MAX_COUNT_PISTAS_CAMERAS;i++)
		{
			if ( PistasCameras[pistaid][i][Valid] )
			{
				UpdateTagPistaCameras(pistaid, i);
			}
		}
	}
	else
	{
		for (new i = 0; i < MAX_COUNT_PISTAS_CAMERAS;i++)
		{
			if ( PistasCameras[pistaid][i][Valid] )
			{
			    RemoveTagPistaCameras(pistaid, i);
			}
		}
	}
}
public ShowOrHideTagPistaCarPointsExit(pistaid)
{
	if ( Pistas[pistaid][ShowTagCarPointsExit] )
	{
		for (new i = 0; i < MAX_COUNT_PISTAS_POS_PLAYERS;i++)
		{
			if ( PistasCarPointsExit[pistaid][i][Valid] )
			{
				UpdateTagPistaCarPointsExit(pistaid, i);
			}
		}
	}
	else
	{
		for (new i = 0; i < MAX_COUNT_PISTAS_POS_PLAYERS;i++)
		{
			if ( PistasCarPointsExit[pistaid][i][Valid] )
			{
			    RemoveTagPistaCarPointsExit(pistaid, i);
			}
		}
	}
}
public ShowPistas(playerid)
{
	new PistasDialog[1500];
	new TempConvert[100];
	new ConteoPistas = -1;
	for (new i = 0; i < MAX_COUNT_PISTAS; i++)
	{
	    if ( Pistas[i][ValidR] )
	    {
	        if ( !Pistas[i][Lock] || Pistas[i][Lock] && PlayersData[playerid][Admin] >= 4 )
	        {
				if ( ConteoPistas != -1 )
				{
					if ( Pistas[i][Lock] )
					{
				    	format(TempConvert, sizeof(TempConvert), "\r\n{00F50A}%s {F5FF00}(%s)", Pistas[i][NamePista], PistasTypeUses[Pistas[i][Used]]);
			    	}
			    	else
			    	{
				    	format(TempConvert, sizeof(TempConvert), "\r\n{E6E6E6}%s {F5FF00}(%s)", Pistas[i][NamePista], PistasTypeUses[Pistas[i][Used]]);
					}
		    	}
				else
				{
					if ( Pistas[i][Lock] )
					{
			    		format(TempConvert, sizeof(TempConvert), "{00F50A}%s {F5FF00}(%s)", Pistas[i][NamePista], PistasTypeUses[Pistas[i][Used]]);
		    		}
		    		else
		    		{
			    		format(TempConvert, sizeof(TempConvert), "{E6E6E6}%s {F5FF00}(%s)", Pistas[i][NamePista], PistasTypeUses[Pistas[i][Used]]);
					}
				}
		        strcat(PistasDialog, TempConvert, sizeof(PistasDialog));
		        ConteoPistas++;
		        PlayersDataOnline[playerid][SaveAfterAgenda][ConteoPistas] = i;
	        }
        }
	}
	if (ConteoPistas != -1)
	{
		ShowPlayerDialogEx(playerid,109,DIALOG_STYLE_LIST,"{00A5FF}Pistas - Lista de Pistas", PistasDialog, "Seleccionar", "Salir");
	}
	else
	{
		ShowPlayerDialogEx(playerid,999,DIALOG_STYLE_MSGBOX,"{00A5FF}Pistas - Error", "{E6E6E6}No se encontrarón pistas creadas", "Ok", "");
	}
}
public ShowPistasOptions(playerid, pistaid)
{
    if ( PistaExist(playerid, pistaid) )
    {
		new ListDialog[850];
		format(ListDialog, sizeof(ListDialog),
		"{00A5FF}Info: {E6E6E6}Máximo de competidores: {00F50A}(%i)\r\n{00A5FF}1- {E6E6E6}Vueltas {00F50A}(%i)\r\n{00A5FF}2- {E6E6E6}Competidores {00F50A}(%i)\r\n{00A5FF}3- {E6E6E6}Guardar Record {00F50A}(%s)\r\n{00A5FF}4- {E6E6E6}Conteo {00F50A}(%i)\r\n{00A5FF}5- {E6E6E6}Tiempo antes de empezar {00F50A}(%i)\r\n{00A5FF}6- {E6E6E6}Radio de los CheckPoints {00F50A}(%.1f)\r\n",
			GetMaxCountPistasPlayers(pistaid),
			Pistas[pistaid][Vueltas],
			Pistas[pistaid][Competidores] + 1,
			SiOrNo[Pistas[pistaid][SaveRecord]],
			Pistas[pistaid][ConteoR],
			Pistas[pistaid][TiempoAntes],
			Pistas[pistaid][Radio]
		);
		format(ListDialog, sizeof(ListDialog),
		"%s{00A5FF}7- {E6E6E6}Tipo de Checkpoints: {00F50A}(%s)\r\n{00A5FF}8- {E6E6E6}Estado: {00F50A}(%s)\r\n{00A5FF}9- {E6E6E6}Coches Permitidos: {00F50A}(%s)\r\n{00A5FF}10- {E6E6E6}Al Revés: {00F50A}(%s)\r\n{00A5FF}11- {E6E6E6}Indestructible: {00F50A}(%s)\r\n{00A5FF}12- {E6E6E6}CheckPoint Final: {00F50A}(ID:%i)\r\n{00A5FF}13- {E6E6E6}Unir un Jugador\r\n{00A5FF}14- {E6E6E6}Ver Jugadores {00F50A}(%i)\r\n{00A5FF}15- {E6E6E6}Detener Carrera!\r\n{00A5FF}16- {E6E6E6}Comenzar Carrera!",
		    ListDialog,
			PistasType[Pistas[pistaid][Tipo]],
			PistasTypeEstados[Pistas[pistaid][EstadoR]],
			CochesPistaNames[Pistas[pistaid][CochesP]],
			SiOrNo[Pistas[pistaid][AlReves]],
			SiOrNo[Pistas[pistaid][Repair]],
			Pistas[pistaid][CheckPointFinal],
			GetMaxPlayerCurrentPista(pistaid)
		);
	    new PistasDialogName[MAX_TEXT_CHAT];
	    format(PistasDialogName, sizeof(PistasDialogName), "{00A5FF}Pistas - %s (Configuración)", Pistas[pistaid][NamePista]);
		ShowPlayerDialogEx(playerid,110,DIALOG_STYLE_LIST, PistasDialogName, ListDialog, "Seleccionar", "Volver");

		PlayersDataOnline[playerid][SaveAfterAgenda][0] = pistaid;
	}
}
public ShowPistasSelectVueltas(playerid, pistaid)
{
    if ( PistaExist(playerid, pistaid) )
    {
        if ( !Pistas[pistaid][Used] )
        {
			new ListDialog[600];
			new TempConvert[15];
			for ( new i = 0; i < 50; i++ )
			{
			    if ( i )
			    {
					format(TempConvert, sizeof(TempConvert),
					"\r\n{00A5FF}%i",i + 1);
				}
				else
				{
					format(TempConvert, sizeof(TempConvert),
					"{00A5FF}%i",i + 1);
				}

				strcat(ListDialog, TempConvert, sizeof(ListDialog));
			}

		    new PistasDialogName[MAX_TEXT_CHAT];
		    format(PistasDialogName, sizeof(PistasDialogName), "{00A5FF}Pistas - %s (Vueltas)", Pistas[pistaid][NamePista]);
			ShowPlayerDialogEx(playerid,111,DIALOG_STYLE_LIST, PistasDialogName, ListDialog, "Seleccionar", "Volver");

			PlayersDataOnline[playerid][SaveAfterAgenda][0] = pistaid;
		}
		else
		{
			ShowPlayerDialogEx(playerid,120,DIALOG_STYLE_MSGBOX,"{00A5FF}Pistas - Error", "{E6E6E6}Esta pista está siendo usada en una carrera,\ndebe esperar que finalize para crear otra", "Aceptar", "Volver");
		}
	}
}
public ShowPistasSelectVelocidad(playerid, pistaid, posid)
{
    if ( PistaExist(playerid, pistaid) )
    {
        if ( !Pistas[pistaid][Used] )
        {
			PlayersDataOnline[playerid][SaveAfterAgenda][0] = pistaid;
			PlayersDataOnline[playerid][SaveAfterAgenda][1] = posid;
			new VelDialog[700];
			format(VelDialog, sizeof(VelDialog),
			"{00F50A}1- {00F50A}0.1 (Rápido)\r\n{00F50A}2- {00F50A}0.01 (Normal)\r\n{00F50A}3- {00F50A}0.001 (Lento)\r\n{00F50A}4- {00A5FF}A Gusto");

		    new PistasDialogName[MAX_TEXT_CHAT];
		    format(PistasDialogName, sizeof(PistasDialogName), "{00A5FF}Pistas - %s (Velocidad)", Pistas[pistaid][NamePista]);
			ShowPlayerDialogEx(playerid,125,DIALOG_STYLE_LIST, PistasDialogName, VelDialog, "Seleccionar", "Volver");
		}
		else
		{
			ShowPlayerDialogEx(playerid,120,DIALOG_STYLE_MSGBOX,"{00A5FF}Pistas - Error", "{E6E6E6}Esta pista está siendo usada en una carrera,\ndebe esperar que finalize para crear otra", "Aceptar", "Volver");
		}
	}
}
public ShowPistasSelectCompetidores(playerid, pistaid)
{
    if ( PistaExist(playerid, pistaid) )
    {
        if ( !Pistas[pistaid][Used] )
        {
			new ListDialog[500];
			new TempConvert[15];
			for ( new i = 0; i < GetMaxCountPistasPlayers(pistaid); i++ )
			{
			    if ( i )
			    {
					format(TempConvert, sizeof(TempConvert),
					"\r\n{F50000}%i",i + 1);
				}
				else
				{
					format(TempConvert, sizeof(TempConvert),
					"{F50000}%i",i + 1);
				}

				strcat(ListDialog, TempConvert, sizeof(ListDialog));
			}

		    new PistasDialogName[MAX_TEXT_CHAT];
		    format(PistasDialogName, sizeof(PistasDialogName), "{00A5FF}Pistas - %s (Competidores)", Pistas[pistaid][NamePista]);
			ShowPlayerDialogEx(playerid,112,DIALOG_STYLE_LIST, PistasDialogName, ListDialog, "Seleccionar", "Volver");

			PlayersDataOnline[playerid][SaveAfterAgenda][0] = pistaid;
		}
		else
		{
			ShowPlayerDialogEx(playerid,120,DIALOG_STYLE_MSGBOX,"{00A5FF}Pistas - Error", "{E6E6E6}Esta pista está siendo usada en una carrera,\ndebe esperar que finalize para crear otra", "Aceptar", "Volver");
		}
	}
}
public ShowPistasSelectConteo(playerid, pistaid)
{
    if ( PistaExist(playerid, pistaid) )
    {
        if ( !Pistas[pistaid][Used] )
        {
			new ListDialog[500];
			new TempConvert[15];
			for ( new i = 0; i < 15; i++ )
			{
			    if ( i )
			    {
					format(TempConvert, sizeof(TempConvert),
					"\r\n{00A5FF}%i",i + 1);
				}
				else
				{
					format(TempConvert, sizeof(TempConvert),
					"{00A5FF}%i",i + 1);
				}

				strcat(ListDialog, TempConvert, sizeof(ListDialog));
			}

		    new PistasDialogName[MAX_TEXT_CHAT];
		    format(PistasDialogName, sizeof(PistasDialogName), "{00A5FF}Pistas - %s (Conteo)", Pistas[pistaid][NamePista]);
			ShowPlayerDialogEx(playerid,113,DIALOG_STYLE_LIST, PistasDialogName, ListDialog, "Seleccionar", "Volver");

			PlayersDataOnline[playerid][SaveAfterAgenda][0] = pistaid;
		}
		else
		{
			ShowPlayerDialogEx(playerid,120,DIALOG_STYLE_MSGBOX,"{00A5FF}Pistas - Error", "{E6E6E6}Esta pista está siendo usada en una carrera,\ndebe esperar que finalize para crear otra", "Aceptar", "Volver");
		}
	}
}
public ShowPistasSelectRadio(playerid, pistaid)
{
    if ( PistaExist(playerid, pistaid) )
    {
        if ( !Pistas[pistaid][Used] )
        {
			new ListDialog[800];
			new TempConvert[15];
			for ( new i = 2; i < 61; i+=2)
			{
			    if ( i != 2 )
			    {
					format(TempConvert, sizeof(TempConvert),
					"\r\n{AFFF00}%i",i);
				}
				else
				{
					format(TempConvert, sizeof(TempConvert),
					"{AFFF00}%i",i);
				}

				strcat(ListDialog, TempConvert, sizeof(ListDialog));
			}

		    new PistasDialogName[MAX_TEXT_CHAT];
		    format(PistasDialogName, sizeof(PistasDialogName), "{00A5FF}Pistas - %s (Radio CheckPoints)", Pistas[pistaid][NamePista]);
			ShowPlayerDialogEx(playerid,122,DIALOG_STYLE_LIST, PistasDialogName, ListDialog, "Seleccionar", "Volver");

			PlayersDataOnline[playerid][SaveAfterAgenda][0] = pistaid;
		}
		else
		{
			ShowPlayerDialogEx(playerid,120,DIALOG_STYLE_MSGBOX,"{00A5FF}Pistas - Error", "{E6E6E6}Esta pista está siendo usada en una carrera,\ndebe esperar que finalize para crear otra", "Aceptar", "Volver");
		}
	}
}
public ShowPistasSelectTiempoAntes(playerid, pistaid)
{
    if ( PistaExist(playerid, pistaid) )
    {
        if ( !Pistas[pistaid][Used] )
        {
			new ListDialog[500];
			new TempConvert[15];
			for ( new i = 10; i < 161; i+=10)
			{
			    if ( i != 10 )
			    {
					format(TempConvert, sizeof(TempConvert),
					"\r\n{F5FF00}%i",i);
				}
				else
				{
					format(TempConvert, sizeof(TempConvert),
					"{F5FF00}%i",i);
				}

				strcat(ListDialog, TempConvert, sizeof(ListDialog));
			}

		    new PistasDialogName[MAX_TEXT_CHAT];
		    format(PistasDialogName, sizeof(PistasDialogName), "{00A5FF}Pistas - %s (Tiempo)", Pistas[pistaid][NamePista]);
			ShowPlayerDialogEx(playerid,114,DIALOG_STYLE_LIST, PistasDialogName, ListDialog, "Seleccionar", "Volver");

			PlayersDataOnline[playerid][SaveAfterAgenda][0] = pistaid;
		}
		else
		{
			ShowPlayerDialogEx(playerid,120,DIALOG_STYLE_MSGBOX,"{00A5FF}Pistas - Error", "{E6E6E6}Esta pista está siendo usada en una carrera,\ndebe esperar que finalize para crear otra", "Aceptar", "Volver");
		}
	}
}
public ShowPistasCochesPermitidos(playerid, pistaid)
{
    if ( PistaExist(playerid, pistaid) )
    {
		new ListDialog[500];
		new TempConvert[20];
		for ( new i = 0; i < sizeof(CochesPistaNames); i++)
		{
		    if (i)
		    {
				format(TempConvert, sizeof(TempConvert),
				"\r\n{00A5FF}%s",CochesPistaNames[i]);
			}
			else
			{
				format(TempConvert, sizeof(TempConvert),
				"{00A5FF}%s",CochesPistaNames[i]);
			}

			strcat(ListDialog, TempConvert, sizeof(ListDialog));
		}

	    new PistasDialogName[MAX_TEXT_CHAT];
	    format(PistasDialogName, sizeof(PistasDialogName), "{00A5FF}Pistas - %s (Coches)", Pistas[pistaid][NamePista]);
		ShowPlayerDialogEx(playerid,115,DIALOG_STYLE_LIST, PistasDialogName, ListDialog, "Seleccionar", "Volver");

		PlayersDataOnline[playerid][SaveAfterAgenda][0] = pistaid;
	}
}
public ShowPistasUnirJugador(playerid, pistaid)
{
    if ( Pistas[pistaid][Used] == RACE_STATE_ESPERANDO )
    {
	    new PistasDialogName[MAX_TEXT_CHAT];
	    format(PistasDialogName, sizeof(PistasDialogName), "{00A5FF}Pistas - %s (Agregar)", Pistas[pistaid][NamePista]);
		ShowPlayerDialogEx(playerid,118,DIALOG_STYLE_INPUT, PistasDialogName, "{E6E6E6}Ingrese la ID del jugador que desea incluir a esta carrera", "Unir", "Volver");
		PlayersDataOnline[playerid][SaveAfterAgenda][0] = pistaid;
	}
	else
	{
		SendInfoMessage(playerid, 0, "1434", "No puede agregar jugadores si no ha iniciado la carrera, tampocó mientras este en ejecución la misma");
		ShowPistasOptions(playerid, pistaid);
	}
}
public ShowPistasVerJugadoresOptions(playerid, pistaid, posid)
{
	new ListDialog[150];
	format(ListDialog, sizeof(ListDialog),
	"{00A5FF}1- {E6E6E6}Enviar Mensaje\r\n{00A5FF}2- {E6E6E6}Expulsar"	);

    new PistasDialogName[MAX_TEXT_CHAT];
    format(PistasDialogName, sizeof(PistasDialogName), "{00A5FF}Pistas - %s (Jugadores)", Pistas[pistaid][NamePista]);
	ShowPlayerDialogEx(playerid,119,DIALOG_STYLE_LIST, PistasDialogName, ListDialog, "Seleccionar", "Volver");

	PlayersDataOnline[playerid][SaveAfterAgenda][0] = pistaid;
	PlayersDataOnline[playerid][SaveAfterAgenda][1] = posid;
}
public ShowPistasVerJugadores(playerid, pistaid)
{
	PlayersDataOnline[playerid][SaveAfterAgenda][59] = pistaid;
    if ( Pistas[pistaid][Used] )
    {
		new ListDialog[1200];
		new TempConvert[55];
		new ConteoPista = -1;
		for ( new i = 0; i < MAX_COUNT_PISTAS_POS_PLAYERS; i++)
		{
		    if ( PistasPosPlayers[pistaid][i][Valid] && PistasPosPlayers[pistaid][i][PlayerIDR] != -1 )
		    {
			    if (ConteoPista != -1)
			    {
					format(TempConvert, sizeof(TempConvert),
					"\r\n{00A5FF}%s{F5FF00}[%i]",PlayersDataOnline[PistasPosPlayers[pistaid][i][PlayerIDR]][NameOnlineFix], PistasPosPlayers[pistaid][i][PlayerIDR]);
				}
				else
				{
					format(TempConvert, sizeof(TempConvert),
					"{00A5FF}%s{F5FF00}[%i]",PlayersDataOnline[PistasPosPlayers[pistaid][i][PlayerIDR]][NameOnlineFix], PistasPosPlayers[pistaid][i][PlayerIDR]);
				}
				strcat(ListDialog, TempConvert, sizeof(ListDialog));
				ConteoPista++;
				PlayersDataOnline[playerid][SaveAfterAgenda][ConteoPista] = i;
			}
		}
	    new PistasDialogName[MAX_TEXT_CHAT];
	    format(PistasDialogName, sizeof(PistasDialogName), "{00A5FF}Pistas - %s (Jugadores)", Pistas[pistaid][NamePista]);
		if (ConteoPista != -1)
		{
			ShowPlayerDialogEx(playerid,116,DIALOG_STYLE_LIST, PistasDialogName, ListDialog, "Seleccionar", "Volver");
		}
		else
		{
			ShowPlayerDialogEx(playerid,116,DIALOG_STYLE_MSGBOX, PistasDialogName, "{E6E6E6}No hay jugadores en esta pista todavía.", "Refrescar", "Volver");
		}
	}
	else
	{
		SendInfoMessage(playerid, 0, "1433", "Debe iniciar la carrera antes de ver la lista de jugadores");
		ShowPistasOptions(playerid, pistaid);
	}
}
public ShowPistasComenzar(playerid, pistaid)
{
    if ( PistaExist(playerid, pistaid) )
    {
        if ( !Pistas[pistaid][Used] )
        {
			if ( ValidingPista(pistaid, false) )
			{
                CleanPistaForRace(pistaid);
                StartRace(pistaid, true);
			    new PistasDialogName[MAX_TEXT_CHAT];
			    format(PistasDialogName, sizeof(PistasDialogName), "{00A5FF}Pistas - %s", Pistas[pistaid][NamePista]);
				ShowPlayerDialogEx(playerid,120,DIALOG_STYLE_MSGBOX,PistasDialogName, "{00F50A}Has abierto la carrera con éxito!", "Aceptar", "Volver");
			}
			else
			{
				ShowPlayerDialogEx(playerid,120,DIALOG_STYLE_MSGBOX,"{00A5FF}Pistas - Error", "{F50000}Esta pista no paso el proceso de validación!", "Aceptar", "Volver");
			}
		}
		else
		{
			ShowPlayerDialogEx(playerid,120,DIALOG_STYLE_MSGBOX,"{00A5FF}Pistas - Error", "{E6E6E6}Esta pista está siendo usada en una carrera,\ndebe esperar que finalize para crear otra", "Aceptar", "Volver");
		}
	}
}
public CleanPistaForRace(pistaid)
{
    for (new i = 0; i < MAX_COUNT_PISTAS_POS_PLAYERS;i++)
    {
        PistasPosPlayers[pistaid][i][PlayerIDR] 	 = -1;
        PistasPosPlayers[pistaid][i][VehicleIDR] 	 = -1;
        PistasPosPlayers[pistaid][i][VueltaR] 		 = 0;
        PistasPosPlayers[pistaid][i][ExitReason]     = -1;

        PistasPosPlayers[pistaid][i][PistaIDR]     	 = -1;
		PistasPosPlayers[pistaid][i][PosFinish]  	 = 50;

        if ( Pistas[pistaid][AlReves] )
        {
        	PistasPosPlayers[pistaid][i][LastCheckPoint] = Pistas[pistaid][MinPP];
       	}
       	else
       	{
        	PistasPosPlayers[pistaid][i][LastCheckPoint] = Pistas[pistaid][MaxPP];
		}
    }
	Pistas[pistaid][ConteoPlayers] = false;
}
public CancelRace(pistaid)
{
	if ( Pistas[pistaid][Used] )
	{
        KillTimer(Pistas[pistaid][RaceTimer]);

	    for (new i = 0; i < MAX_COUNT_PISTAS_POS_PLAYERS;i++)
	    {
		    if ( PistasPosPlayers[pistaid][i][Valid] && PistasPosPlayers[pistaid][i][PlayerIDR] != -1 )
		    {
				RemovePlayerToRace(PistasPosPlayers[pistaid][i][PlayerIDR], true, false, STATE_RACE_EXIT_EXPULSADO);
			}
		}
		Pistas[pistaid][Used] = false;
		return true;
	}
	return false;
}
public StartRace(pistaid, option)
{
    new PistasDialogText[MAX_TEXT_CHAT];
	if ( option )
	{
	    format(PistasDialogText, sizeof(PistasDialogText), "Nueva carrera tipo {F5FF00}%s{E6E6E6}, comienza en {00F50A}%i {E6E6E6}segundos!", PistasTypeEstados[Pistas[pistaid][EstadoR]], Pistas[pistaid][TiempoAntes]);
       	Pistas[pistaid][Used] = RACE_STATE_ESPERANDO;
	    Pistas[pistaid][RaceTimer] = SetTimerEx("StartRace", Pistas[pistaid][TiempoAntes] * 1000, false, "dd", pistaid, false);
    }
    else
    {
        if ( GetMaxPlayerCurrentPista(pistaid) )
        {
		    format(PistasDialogText, sizeof(PistasDialogText), "Comienza un conteo de %i en 5 segundos para empezar!", Pistas[pistaid][ConteoR]);
	       	Pistas[pistaid][Used] = RACE_STATE_CONTEO;
		    Pistas[pistaid][RaceTimer] = SetTimerEx("ConteoRace", 5000, false, "dd", pistaid, Pistas[pistaid][ConteoR] + 1);
	    }
	    else
	    {
		    format(PistasDialogText, sizeof(PistasDialogText), "{00A5FF}La carrera no comenzó por falta de concursantes!");
		    CancelRace(pistaid);
		}
	}
	SendMessageToRaceChat(pistaid, PistasDialogText, true);
}
public ConteoRace(pistaid, count)
{
	new ConteoText[10];
	new StyleText;
	count--;
	if(count)
	{
	    format(ConteoText, sizeof(ConteoText), "~R~%i", count);
	    StyleText = 5;
    }
    else
    {
		Pistas[pistaid][Used] 		= RACE_STATE_COMPITIENDO;

		Pistas[pistaid][TimeStart] 	= gettime();

	    format(ConteoText, sizeof(ConteoText), "~G~Go!", count);
	    StyleText = 0;
		new PistasDialogText[256];
	    format(PistasDialogText, sizeof(PistasDialogText), "La carrera comenzó con %i competidores!", GetMaxPlayerCurrentPista(pistaid));
		SendMessageToRaceChat(pistaid, PistasDialogText, true);
	}
    for (new i = 0; i < MAX_COUNT_PISTAS_POS_PLAYERS;i++)
    {
	    if ( PistasPosPlayers[pistaid][i][Valid] && PistasPosPlayers[pistaid][i][PlayerIDR] != -1 )
	    {
	    	GameTextForPlayer(PistasPosPlayers[pistaid][i][PlayerIDR], ConteoText, 1000, StyleText);
	    	if ( !StyleText )
	    	{
				SetPlayerNextCheckPointRace(PistasPosPlayers[pistaid][i][PlayerIDR]);
				TogglePlayerControllable(PistasPosPlayers[pistaid][i][PlayerIDR], true);
				PlayerPlaySound(PistasPosPlayers[pistaid][i][PlayerIDR], SOUND_START_RACE, 0.0, 0.0, 0.0);
				PistasPosPlayers[pistaid][i][ExitReason] = -1;

				TextDrawShowForPlayer(PistasPosPlayers[pistaid][i][PlayerIDR], ScorePosRace[pistaid]);
				TextDrawShowForPlayer(PistasPosPlayers[pistaid][i][PlayerIDR], ScoreRaceBox);

				/*DataCars[PistasPosPlayers[pistaid][i][VehicleIDR]][AlarmOn] = false;
				DataCars[PistasPosPlayers[pistaid][i][VehicleIDR]][StateEncendido] = true;
				DataCars[PistasPosPlayers[pistaid][i][VehicleIDR]][Puente] = false;

				IsVehicleOff(PistasPosPlayers[pistaid][i][VehicleIDR]);*/

				if ( Pistas[pistaid][IsCameras] )
				{
					KillTimer(PlayersDataOnline[PistasPosPlayers[pistaid][i][PlayerIDR]][TimerCamaraIdRace]);
				}
				SetCameraBehindPlayer(PistasPosPlayers[pistaid][i][PlayerIDR]);
			}
    	}
    }
    if ( count )
    {
	    Pistas[pistaid][RaceTimer] = SetTimerEx("ConteoRace", 2000, false, "dd", pistaid, count);
	}
	else
	{
	    Pistas[pistaid][RaceTimer] = SetTimerEx("UpdateTextDrawRacePositions", 500, false, "d", pistaid);
	}
}
public GetMaxPlayerCurrentPista(pistaid)
{
	new CountPista;
    for (new i = 0; i < MAX_COUNT_PISTAS_POS_PLAYERS;i++)
    {
		if ( PistasPosPlayers[pistaid][i][Valid] && PistasPosPlayers[pistaid][i][PlayerIDR] != -1 )
		{
		    CountPista++;
		}
    }
    return CountPista;
}
public IsVehiceInRace(vehicleid)
{
	for (new p = 0; p < MAX_COUNT_PISTAS;p++)
    {
		for (new i = 0; i < MAX_COUNT_PISTAS_POS_PLAYERS;i++)
	    {
	        if ( Pistas[p][Used] && PistasPosPlayers[p][i][PlayerIDR] && PistasPosPlayers[p][i][VehicleIDR] == vehicleid )
	        {
	            return PistasPosPlayers[p][i][PlayerIDR];
	        }
		}
	}
	return -1;
}
public RemovePlayerToRace(playerid, option, optiontwo, reason)
{
    if ( PlayersDataOnline[playerid][PistaIDp] != -1 )
    {
		DataCars[PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR]][LastX] 		= PistasCarPointsExit[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][Xpos];
		DataCars[PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR]][LastY] 		= PistasCarPointsExit[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][Ypos];
		DataCars[PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR]][LastZ] 		= PistasCarPointsExit[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][Zpos];
		DataCars[PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR]][LastZZ] 		= PistasCarPointsExit[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][ZZpos];
		DataCars[PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR]][WorldLast] 	= Pistas[PlayersDataOnline[playerid][PistaIDp]][World];
		DataCars[PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR]][InteriorLast] = Pistas[PlayersDataOnline[playerid][PistaIDp]][Interior];
        DataCars[PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR]][LastDamage] = 1000.0;
        if ( PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR] > MAX_CAR_FACCION )
        {
            CleanTunningSlots(PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR]);
		}
		DestroyVehicle(PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR]);
        SetLastSettingVehicle(PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR]);
		RepairVehicle(PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR]);

		UpdateGasAndOil(PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR]);

		DataCars[PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR]][AlarmOn] = false;
		DataCars[PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR]][StateEncendido] = true;
		DataCars[PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR]][Puente] = false;

		IsVehicleOff(PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR]);

		if ( DataCars[PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR]][VehicleDeath] )
		{
			DataCars[PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR]][VehicleDeath] = false;
			KillTimer(DataCars[PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR]][TimerIdBug]);
		}

        if (option)
        {
			DisablePlayerRaceCheckpoint(playerid);
	    	UpdateDamage(playerid, DataCars[PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR]][LastDamage]);
			TextDrawHideForPlayer(playerid, ScorePosRace[PlayersDataOnline[playerid][PistaIDp]]);
			TextDrawHideForPlayer(playerid, ScoreRaceBox);

			SetPlayerVirtualWorldEx(playerid, Pistas[PlayersDataOnline[playerid][PistaIDp]][World]);
			SetPlayerInteriorEx(playerid, Pistas[PlayersDataOnline[playerid][PistaIDp]][Interior]);
            PutPlayerInVehicle(playerid, PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR], 0);
            TogglePlayerControllable(playerid, true);
            SetCameraBehindPlayer(playerid);

            PlayersDataOnline[playerid][VidaOn] = 80.0;
		}

		if ( Pistas[PlayersDataOnline[playerid][PistaIDp]][Used] 		== RACE_STATE_CONTEO ||
			 Pistas[PlayersDataOnline[playerid][PistaIDp]][Used] 		== RACE_STATE_ESPERANDO )
		{
			if ( Pistas[PlayersDataOnline[playerid][PistaIDp]][IsCameras] )
			{
				KillTimer(PlayersDataOnline[playerid][TimerCamaraIdRace]);
			}
		}

		PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][PlayerIDR] = -1;
		PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR] = -1;
		PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][ExitReason] = reason;

        new CarreraID = PlayersDataOnline[playerid][PistaIDp];
        PlayersDataOnline[playerid][PistaIDp] 	= -1;
        PlayersDataOnline[playerid][PosIDp] 	= -1;

        if ( optiontwo && Pistas[CarreraID][Used] != RACE_STATE_ESPERANDO && !GetMaxPlayerCurrentPista(CarreraID)  )
        {
            if ( !Pistas[CarreraID][ConteoPlayers] )
            {
	            new MsgCarreraFinish[MAX_TEXT_CHAT];
			    format(MsgCarreraFinish, sizeof(MsgCarreraFinish), "{00A5FF}La carrera finalizó debido a que los concursantes abandonarón la carrera!");
				SendMessageToRaceChat(CarreraID, MsgCarreraFinish, true);
			    CancelRace(CarreraID);
		    }
		    else
		    {
				ShowStatsRace(CarreraID);
			}
		}
        return CarreraID;
    }
    else
    {
        return -1;
	}
}
public AddPlayerToRace(playerid, pistaid, option)
{
	if ( PlayersDataOnline[playerid][PistaIDp] == -1 )
	{
	    if ( Pistas[pistaid][Used] == RACE_STATE_ESPERANDO )
	    {
	        if ( !Pistas[pistaid][EstadoR] || option)
	        {
		        if ( IsPlayerInAnyVehicle(playerid) )
		        {
		            if ( !Pistas[pistaid][CochesP] || coches_Todos_Type[GetVehicleModel(GetPlayerVehicleID(playerid)) - 400] == Pistas[pistaid][CochesP] )
		            {
		                if ( GetMaxPlayerCurrentPista(pistaid) < Pistas[pistaid][Competidores] + 1 )
		                {
		                    if ( GetPlayerVehicleSeat(playerid) == 0 )
		                    {
		                        if ( IsVehiceInRace(GetPlayerVehicleID(playerid)) == -1 )
		                        {
							        for (new i = 0; i < MAX_COUNT_PISTAS_POS_PLAYERS;i++)
							        {
							            if ( PistasPosPlayers[pistaid][i][Valid] && PistasPosPlayers[pistaid][i][PlayerIDR] == -1 )
							            {
							                PistasPosPlayers[pistaid][i][VehicleIDR] = GetPlayerVehicleID(playerid);
							                PistasPosPlayers[pistaid][i][ExitReason] = -1;
											PistasPosPlayers[pistaid][i][PlayerIDR]  = playerid;
						   	                PlayersDataOnline[playerid][PistaIDp] 	 = pistaid;
						                   	PlayersDataOnline[playerid][PosIDp] 	 = i;
											/*DataCars[PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR]][AlarmOn] = false;
											DataCars[PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR]][StateEncendido] = false;
											DataCars[PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR]][Puente] = false;

											IsVehicleOff(PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VehicleIDR]);*/

				          					SetVehiclePos(PistasPosPlayers[pistaid][i][VehicleIDR], PistasPosPlayers[pistaid][i][Xpos], PistasPosPlayers[pistaid][i][Ypos], PistasPosPlayers[pistaid][i][Zpos]);
				          					SetVehicleZAngle(PistasPosPlayers[pistaid][i][VehicleIDR], PistasPosPlayers[pistaid][i][ZZpos]);
				          					SetVehicleVirtualWorldEx(PistasPosPlayers[pistaid][i][VehicleIDR], Pistas[pistaid][World]);
				          					LinkVehicleToInteriorEx(PistasPosPlayers[pistaid][i][VehicleIDR], Pistas[pistaid][Interior]);

				          					TogglePlayerControllable(playerid, false);

				          					SetCameraBehindPlayer(playerid);

				          					format(PistasPosPlayers[pistaid][i][NameR], MAX_PLAYER_NAME, "%s", PlayersDataOnline[playerid][NameOnlineFix]);

								            if ( Pistas[PlayersDataOnline[playerid][PistaIDp]][IsCameras] )
								            {
									            SetCameraPresentRace(playerid, PlayersDataOnline[playerid][PistaIDp],
												0,
												0,
									            PistasCameras[PlayersDataOnline[playerid][PistaIDp]][0][Xpos],
									            PistasCameras[PlayersDataOnline[playerid][PistaIDp]][0][Ypos],
									            PistasCameras[PlayersDataOnline[playerid][PistaIDp]][0][Zpos]);
								            }

											//SetCameraPresent(playerid, 52, 0, CamerasPresent[52][0], CamerasPresent[52][1], CamerasPresent[52][2], 52, 57);
							                return 5;
							            }
									}
									return 4;
								}
								else
								{
								    return 9;
								}
							}
							else
							{
							    return 8;
							}
						}
						else
						{
						    return 6;
						}
					}
					else
					{
					    return 3;
					}
				}
				else
				{
				    return 2;
				}
			}
			else
			{
			    return 1;
			}
	    }
	    else
	    {
	        return false;
		}
	}
	else
	{
	    return 7;
	}
}
public ShowPistaSelectCheckPoint(playerid, pistaid)
{
	if ( PistaExist(playerid, pistaid) )
	{
	    PlayersDataOnline[playerid][SaveAfterAgenda][59] = pistaid;
		new PistasDialog[2500];
		new TempConvert[50];
		new ConteoPistas = -1;
		for (new i = 0; i < MAX_COUNT_PISTAS_POS; i++)
		{
		    if ( PistasPos[pistaid][i][Valid] )
		    {
				if (ConteoPistas != -1)
				{
			    	format(TempConvert, sizeof(TempConvert), "\r\n{00F50A}ID: %i", i);
		    	}
				else
				{
			    	format(TempConvert, sizeof(TempConvert), "{00F50A}ID: %i", i);
				}
		        strcat(PistasDialog, TempConvert, sizeof(PistasDialog));
		        ConteoPistas++;
		        PlayersDataOnline[playerid][SaveAfterAgenda][ConteoPistas] = i;
			}
		}
	    new PistasDialogName[MAX_TEXT_CHAT];
	    format(PistasDialogName, sizeof(PistasDialogName), "{00A5FF}Pistas - %s (CheckPoints)", Pistas[pistaid][NamePista]);
		if (ConteoPistas != -1)
		{
			ShowPlayerDialogEx(playerid,121,DIALOG_STYLE_LIST,PistasDialogName, PistasDialog, "Selecionar", "Volver");
		}
		else
		{
			ShowPlayerDialogEx(playerid,120,DIALOG_STYLE_MSGBOX,PistasDialogName, "{F0F0F0}No se encontrarón checkpoints para esta carrera.", "Aceptar", "Volver");
		}
	}
}
public ShowPistaPlayerPublics(playerid)
{
	new PistasDialog[1400];
	new TempConvert[50];
	new ConteoPistas = -1;
	for (new i = 0; i < MAX_COUNT_PISTAS; i++)
	{
	    if ( Pistas[i][ValidR] && Pistas[i][Used] == RACE_STATE_ESPERANDO && !Pistas[i][EstadoR])
	    {
			if ( ConteoPistas != -1 )
			{
		    	format(TempConvert, sizeof(TempConvert), "\r\n{00A5FF}%s {00F50A}(%i)", Pistas[i][NamePista], GetMaxPlayerCurrentPista(i));
	    	}
			else
			{
	    		format(TempConvert, sizeof(TempConvert), "{00A5FF}%s {00F50A}(%i)", Pistas[i][NamePista], GetMaxPlayerCurrentPista(i));
			}
	        strcat(PistasDialog, TempConvert, sizeof(PistasDialog));
	        ConteoPistas++;
	        PlayersDataOnline[playerid][SaveAfterAgenda][ConteoPistas] = i;
        }
	}
	if (ConteoPistas != -1)
	{
		ShowPlayerDialogEx(playerid,117,DIALOG_STYLE_LIST,"{00A5FF}Carreras - Unirme a una carrera pública", PistasDialog, "Unirme!", "Salir");
	}
	else
	{
		ShowPlayerDialogEx(playerid,999,DIALOG_STYLE_MSGBOX,"{00A5FF}Carreras - Error", "{E6E6E6}No se encontrarón carreras públicas creadas", "Ok", "");
	}
}
public SendMessageToRaceChat(raceid, text[], option)
{
	new MsgRace[256];
	new PistaNear = GetNextCheckPoint(raceid, Pistas[raceid][MaxPP], false);
	if ( option )
	{
		format(MsgRace, sizeof(MsgRace), "{F5FF00}\"%s\" Carrera: {E6E6E6}%s", Pistas[raceid][NamePista], text);
	}
	else
	{
		format(MsgRace, sizeof(MsgRace), "%s", text);
	}

	for (new i = 0; i < MAX_PLAYERS; i++)
	{
		if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 )
		{
			if ( PlayersDataOnline[i][PistaIDp] != -1 ||
                 PlayersDataOnline[i][ModeRace] ||
				 IsPlayerInRangeOfPoint(i, 300.0,
							 PistasPos[raceid][PistaNear][Xpos],
							 PistasPos[raceid][PistaNear][Ypos],
							 PistasPos[raceid][PistaNear][Zpos]) )
			{
				SendClientMessage(i, COLOR_MENSAJES_DE_AVISOS, MsgRace);
			}
		}
	}
}
public GetValidCheckPoint(pistaid, checkpointid, option)
{
	if ( checkpointid >= Pistas[pistaid][MaxPP] && !option)
	{
		checkpointid = Pistas[pistaid][MinPP];
	}
	else if ( checkpointid <= Pistas[pistaid][MinPP] && option)
	{
	    checkpointid = Pistas[pistaid][MaxPP];
	}
	else if ( option )
	{
	    checkpointid--;
	}
	else
	{
	    checkpointid++;
	}
	return	checkpointid;
}
public GetNextCheckPoint(pistaid, checkpointid, option)
{
//	printf("GetNextCheckPoint JOIN %i - %i - %i", pistaid, checkpointid, option);
	new CurrentPoint = checkpointid;
	for (checkpointid = GetValidCheckPoint(pistaid, checkpointid, option); checkpointid < Pistas[pistaid][MaxPP];checkpointid = GetValidCheckPoint(pistaid, checkpointid, option))
	{
		if ( checkpointid == CurrentPoint )
		{
			break;
		}
		else
		{
			if ( PistasPos[pistaid][checkpointid][Valid] )
			{
			    break;
			}
			else
			{
			    continue;
			}
		}
	}
//	printf("Sale: %i", checkpointid);
	return checkpointid;
}
public GetMaxPistaRace(raceid)
{
	new MaxP;
	for (new i = 0; i < MAX_COUNT_PISTAS_POS;i++)
	{
	    if ( PistasPos[raceid][i][Valid] )
	    {
	    	MaxP = i;
	    }
	}
	return MaxP;
}
public GetMinPistaRace(raceid)
{
	new MinP;
	for (new i = 0; i < MAX_COUNT_PISTAS_POS;i++)
	{
	    if ( PistasPos[raceid][i][Valid] )
	    {
	    	MinP = i;
	    	break;
	    }
	}
	return MinP;
}
public SetPlayerNextCheckPointRace(playerid)
{
	if ( PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VueltaR] 		  ==	Pistas[PlayersDataOnline[playerid][PistaIDp]][Vueltas] 			&&
		 PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][LastCheckPoint] == 	Pistas[PlayersDataOnline[playerid][PistaIDp]][CheckPointFinal] )
	{
	    new PistasDialogText[MAX_TEXT_CHAT];
	    format(PistasDialogText, sizeof(PistasDialogText), "{00A5FF}%s{00F50A} finalizó la carrera.", PlayersDataOnline[playerid][NameOnlineFix]);
		SendMessageToRaceChat(PlayersDataOnline[playerid][PistaIDp], PistasDialogText, true);
		Pistas[PlayersDataOnline[playerid][PistaIDp]][ConteoPlayers]++;
		PlayerPlaySound(playerid, SOUND_END_RACE, 0.0, 0.0, 0.0);

		PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][TimeFinish] = gettime() - Pistas[PlayersDataOnline[playerid][PistaIDp]][TimeStart];

		PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][PosFinish] = Pistas[PlayersDataOnline[playerid][PistaIDp]][ConteoPlayers];

		AddPlayerToRecordsLive(PlayersDataOnline[playerid][PistaIDp], PlayersDataOnline[playerid][PosIDp]);

		RemovePlayerToRace(playerid, true, true, STATE_RACE_EXIT_FINISH);
	}
	else
	{
		new NuevoCheckPoint =
		GetNextCheckPoint(PlayersDataOnline[playerid][PistaIDp],
		PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][LastCheckPoint],
		Pistas[PlayersDataOnline[playerid][PistaIDp]][AlReves]);
		new NextNuevoCheckPoint =
		GetNextCheckPoint(PlayersDataOnline[playerid][PistaIDp],
		NuevoCheckPoint,
		Pistas[PlayersDataOnline[playerid][PistaIDp]][AlReves]);

		if ( Pistas[PlayersDataOnline[playerid][PistaIDp]][AlReves] )
		{
			if ( PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][LastCheckPoint] == Pistas[PlayersDataOnline[playerid][PistaIDp]][MaxPP] )
			{
				if ( PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VueltaR] )
				{
			    	new PistasDialogText[70];
				    format(PistasDialogText, sizeof(PistasDialogText), "~B~]]]]]]~G~~n~Vuelta %i ~W~Completada!~N~~R~]]]]]]", PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VueltaR]);
					GameTextForPlayer(playerid, PistasDialogText, 4000, 4);
					PlayerPlaySound(playerid, SOUND_VUELTA_VRACE, 0.0, 0.0, 0.0);
				}
			    PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VueltaR]++;
			}
		}
		else
		{
			if ( PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][LastCheckPoint] == Pistas[PlayersDataOnline[playerid][PistaIDp]][MinPP] )
			{
				if ( PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VueltaR] )
				{
			    	new PistasDialogText[70];
				    format(PistasDialogText, sizeof(PistasDialogText), "~B~]]]]]]~G~~n~Vuelta %i ~W~Completada!~N~~R~]]]]]]", PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VueltaR]);
					GameTextForPlayer(playerid, PistasDialogText, 4000, 4);
					PlayerPlaySound(playerid, SOUND_VUELTA_VRACE, 0.0, 0.0, 0.0);
				}
			    PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VueltaR]++;
			}
		}

		new StyleCheckPoint;
		if ( PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VueltaR] 		  ==	Pistas[PlayersDataOnline[playerid][PistaIDp]][Vueltas] 			&&
		  	 NuevoCheckPoint == 	Pistas[PlayersDataOnline[playerid][PistaIDp]][CheckPointFinal] )
		{
		    if ( Pistas[PlayersDataOnline[playerid][PistaIDp]][Tipo] )
		    {
            	StyleCheckPoint = 4;
           	}
           	else
           	{
				StyleCheckPoint = 1;
			}
		}
		else
		{
		    if ( Pistas[PlayersDataOnline[playerid][PistaIDp]][Tipo] )
		    {
            	StyleCheckPoint = 3;
           	}
           	else
           	{
				StyleCheckPoint = 0;
			}
		}

	    PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][LastCheckPoint] = NuevoCheckPoint;
		SetPlayerRaceCheckpoint(playerid, StyleCheckPoint,
		PistasPos[PlayersDataOnline[playerid][PistaIDp]][PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][LastCheckPoint]][Xpos],
		PistasPos[PlayersDataOnline[playerid][PistaIDp]][PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][LastCheckPoint]][Ypos],
		PistasPos[PlayersDataOnline[playerid][PistaIDp]][PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][LastCheckPoint]][Zpos],
		PistasPos[PlayersDataOnline[playerid][PistaIDp]][NextNuevoCheckPoint][Xpos],
		PistasPos[PlayersDataOnline[playerid][PistaIDp]][NextNuevoCheckPoint][Ypos],
		PistasPos[PlayersDataOnline[playerid][PistaIDp]][NextNuevoCheckPoint][Zpos],
		Pistas[PlayersDataOnline[playerid][PistaIDp]][Radio]);
	}
}
public ShowStatsRace(raceid)
{
	SendMessageToRaceChat(raceid, "{00FF46}La carrera a finalizado!", true);
	SendMessageToRaceChat(raceid, "{00EBFF}|______________ Resumen de la Carrera ______________|", true);

	new PistasDialogText[MAX_TEXT_CHAT];
	for (new i = 0; i < MAX_COUNT_PISTAS_POS_PLAYERS;i++)
	{
	    if ( PistasPosPlayers[raceid][i][PistaIDR] != -1 )
	    {
	        new Timee[3];
			GetTimeBySeconds(PistasPosPlayers[raceid][PistasPosPlayers[raceid][i][PistaIDR]][TimeFinish], Timee[0], Timee[1], Timee[2]);

		    format(PistasDialogText, sizeof(PistasDialogText), "{F0F0F0}%i - %s {AFFF00}Tiempo: {EBFF00}%i:%i:%i", i + 1,
			PistasPosPlayers[raceid][PistasPosPlayers[raceid][i][PistaIDR]][NameR],
			Timee[0], Timee[1], Timee[2]);
	        SendMessageToRaceChat(raceid, PistasDialogText, true);
	    }
	}
//	        SendMessageToRaceChat(raceid, "{F50000} ** DESCALIFICADOS **", true);
	for (new i = 0; i < MAX_COUNT_PISTAS_POS_PLAYERS;i++)
	{
	    if ( PistasPosPlayers[raceid][i][ExitReason] != -1 && PistasPosPlayers[raceid][i][ExitReason] != STATE_RACE_EXIT_FINISH )
	    {

		    format(PistasDialogText, sizeof(PistasDialogText), "{00B9FF}%s {F50000}(Descalificado) {0069FF}Razón: {EBFF00}%s",
			PistasPosPlayers[raceid][i][NameR],
			PistasTypeFinal[PistasPosPlayers[raceid][i][ExitReason]]);
	        SendMessageToRaceChat(raceid, PistasDialogText, true);
	    }
	}
	CancelRace(raceid);
}
public AddPlayerToRecordsLive(raceid, posid)
{
	for (new i = 0; i < MAX_COUNT_PISTAS_POS_PLAYERS;i++)
	{
	    if ( PistasPosPlayers[raceid][i][PistaIDR] == -1 )
	    {
	    	PistasPosPlayers[raceid][i][PistaIDR]  	 = posid;
	    	return i;
    	}
    }
    return -1;
}
public GetTimeBySeconds(seconds, &hour, &minute, &second)
{
	if ( seconds / 3600 )
	{
	    hour = seconds / 3600;
	    if ( (seconds % 3600) )
	    {
	        minute = (seconds % 3600) / 60;
	        if ( ((seconds % 3600) % 60) )
	        {
	            second = ((seconds % 3600) % 60);
	        }
		}
	}
	if ( seconds / 60 )
	{
        minute = seconds / 60;
        if ( (seconds % 60) )
        {
            second = seconds % 60;
        }
	}
	else
	{
	    second = seconds;
	}
}
public UpdateTextDrawRacePositions(pistaid)
{
	new FiveOnePos[5] = {-1,-1,-1,-1,-1};
	new FiveOneScore[5];
	new Float:FiveOneDistance[5];
	new IsUpdate;
	new PosUpdate;
	new ScoreUpdate;
	new Float:DistanceUpdate;
	new a;
	for (new i = 0; i < MAX_COUNT_PISTAS_POS_PLAYERS; i++)
	{
	    if ( PistasPosPlayers[pistaid][i][PlayerIDR] != -1)
	    {
	        for ( a = 0; a < 5; a++)
	        {
				if ( FiveOnePos[a] == -1 )
				{
					DistanceUpdate =  GetPlayerProgressRace(PistasPosPlayers[pistaid][i][PlayerIDR], ScoreUpdate);
					PosUpdate = i;
					ScoreUpdate += 111;
					IsUpdate = true;
					break;
				}
				else if ( FiveOneScore[a] > 100 )
				{
					DistanceUpdate =  GetPlayerProgressRace(PistasPosPlayers[pistaid][i][PlayerIDR], ScoreUpdate);

					if ( ComparePlayersRaceProgress(FiveOneScore[a] - 111, ScoreUpdate, FiveOneDistance[a], DistanceUpdate) )
					{
						PosUpdate = i;
						ScoreUpdate += 111;
						IsUpdate = true;
						break;
					}
				}
			}
		}
		else if ( PistasPosPlayers[pistaid][i][PosFinish] < 5 )
		{
	        for ( a = 0; a < 5; a++)
	        {
	            if ( FiveOnePos[a] == -1 ||
					 FiveOneScore[a] > 100 ||
					 PistasPosPlayers[pistaid][i][PosFinish] < FiveOneScore[a] && FiveOneScore[a] > 100 )
	            {
					PosUpdate = i;
					ScoreUpdate = PistasPosPlayers[pistaid][i][PosFinish];

					IsUpdate = true;
					break;
				}
			}
		}

	    if ( IsUpdate )
	    {
		    IsUpdate = 4;
			while ( IsUpdate != a )
			{
				FiveOnePos[IsUpdate] 		= FiveOnePos[IsUpdate - 1];
				FiveOneScore[IsUpdate]		= FiveOneScore[IsUpdate - 1];
				FiveOneDistance[IsUpdate]	= FiveOneDistance[IsUpdate - 1];
				IsUpdate--;
			}
			FiveOnePos[a] 		= PosUpdate;
			FiveOneScore[a]		= ScoreUpdate;
			FiveOneDistance[a]	= DistanceUpdate;
		}


		IsUpdate = false;

	}

	new TextDrawText[250];
	new TempString[50];
	for (a = 0; a < 5;a++)
	{
		if (FiveOnePos[a] != -1)
		{
			if ( a )
			{
				format(TempString, sizeof(TempString), "~N~~N~~W~%i- ~G~%s",
				a + 1,
				PistasPosPlayers[pistaid][FiveOnePos[a]][NameR]);
			}
			else
			{
				format(TempString, sizeof(TempString), "~W~%i- ~G~%s",
				a + 1,
				PistasPosPlayers[pistaid][FiveOnePos[a]][NameR]);
			}
		}
		else
		{
			if ( a )
			{
				format(TempString, sizeof(TempString), "~N~~N~~W~%i- ~R~Vac\xa2o",
				a + 1);
			}
			else
			{
				format(TempString, sizeof(TempString), "~W~%i- ~R~Vac\xa2o",
				a + 1);
			}
		}
		strcat(TextDrawText, TempString,sizeof(TextDrawText));
	}
	TextDrawSetString(ScorePosRace[pistaid], TextDrawText);
//	printf("El Final..");
    Pistas[pistaid][RaceTimer] = SetTimerEx("UpdateTextDrawRacePositions", 100, false, "d", pistaid);
}
public ComparePlayersRaceProgress(progress1, progress2, Float:Distance1, Float:Distance2)
{
	if ( progress2 >= progress1 )
	{
	    if ( progress2 == progress1 )
	    {
			if ( Distance2 < Distance1 )
			{
			    return true;
			}
		}
		else
		{
		    return true;
		}
	}
	return false;
}
public Float:GetPlayerProgressRace(playerid, &progress)
{
    progress = GetMaxCheckPointCurrentPista(PlayersDataOnline[playerid][PistaIDp],
	PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][VueltaR],
	PistasPosPlayers[PlayersDataOnline[playerid][PistaIDp]][PlayersDataOnline[playerid][PosIDp]][LastCheckPoint]);
    new Float:PlayerPos[3];
    GetPlayerPos(playerid, PlayerPos[0], PlayerPos[1], PlayerPos[2]);

	new NextCheckPoint;
	if ( progress >= Pistas[PlayersDataOnline[playerid][PistaIDp]][MaxCheckPointsTotal] )
	{
		NextCheckPoint = GetNextCheckPoint(PlayersDataOnline[playerid][PistaIDp],
		(progress - 1) % Pistas[PlayersDataOnline[playerid][PistaIDp]][MaxCheckPointsTotal],
		Pistas[PlayersDataOnline[playerid][PistaIDp]][AlReves]);
	}
	else
	{
		NextCheckPoint = GetNextCheckPoint(PlayersDataOnline[playerid][PistaIDp],
		progress - 1,
		Pistas[PlayersDataOnline[playerid][PistaIDp]][AlReves]);
	}

	//printf("->> %i", NextCheckPoint);

	return GetPointFromPoint(
	PlayerPos[0],
	PlayerPos[1],
	PlayerPos[2],
	PistasPos[PlayersDataOnline[playerid][PistaIDp]][NextCheckPoint][Xpos],
	PistasPos[PlayersDataOnline[playerid][PistaIDp]][NextCheckPoint][Ypos],
	PistasPos[PlayersDataOnline[playerid][PistaIDp]][NextCheckPoint][Zpos]
	);
}
public GetMaxCheckPointCurrentPista(pistaid, countvuelta, checkpointcount)
{
//	printf("checkpointcount %i", checkpointcount);
    if ( !countvuelta )
    {
        return true;
	}
	else
	{
	    if ( checkpointcount != 0 )
	    {
			return (Pistas[pistaid][MaxCheckPointsTotal] * (countvuelta))
			- (Pistas[pistaid][MaxCheckPointsTotal] - (checkpointcount));
		}
		else
		{
			return (Pistas[pistaid][MaxCheckPointsTotal] * (countvuelta));
		}
	}
}
public ForcePutPlayerInVehicle(playerid, vehicleid, seat)
{
	if (!seat)
	{
		new Float:PlayerPos[3]; GetPlayerPos(playerid, PlayerPos[0], PlayerPos[1], PlayerPos[2]);
		SetPlayerPos(playerid, PlayerPos[0], PlayerPos[1], PlayerPos[2]);
	}
	PutPlayerInVehicle(playerid, vehicleid, seat);
}
public ShowBuscarAgenda(playerid)
{
	ShowPlayerDialogEx(playerid,129,DIALOG_STYLE_INPUT,"{00A5FF}Agenda - Buscar", "{F0F0F0}Ingrese la frase que desea buscar.", "Buscar", "Volver");
}
public ShowBuscarResultAgenda(playerid, text[])
{
	new AgendaDialog[2150];
	new TempConvert[50];
	new ConteoAgenda = -1;
	for (new i = 0; i < MAX_PLAYER_CONTACT; i++)
	{
	    if ( strlen(AgendaData[playerid][i][NameC]) >= 2 )
	    {
	        format(TempConvert, sizeof(TempConvert), "%i", AgendaData[playerid][i][NumberC]);
	        if ( strfind(TempConvert, text, true) != -1 || strfind(AgendaData[playerid][i][NameC], text, true) != -1)
	        {
				if ( ConteoAgenda != -1 )
				{
			    	format(TempConvert, sizeof(TempConvert), "\r\n{00F50A}%i - %s", AgendaData[playerid][i][NumberC], AgendaData[playerid][i][NameC]);
		    	}
				else
				{
				    format(TempConvert, sizeof(TempConvert), "{00F50A}%i - %s", AgendaData[playerid][i][NumberC], AgendaData[playerid][i][NameC]);
				}
		        strcat(AgendaDialog, TempConvert, sizeof(AgendaDialog));
		        ConteoAgenda++;
		        PlayersDataOnline[playerid][SaveAfterAgenda][ConteoAgenda] = i;
	        }
        }
	}
	if (ConteoAgenda != -1)
	{
		ShowPlayerDialogEx(playerid,130,DIALOG_STYLE_LIST,"{00A5FF}Agenda - Resultados de la Busqueda", AgendaDialog, "Opciones", "Inicio");
	}
	else
	{
	    format(AgendaDialog, sizeof(AgendaDialog), "{F0F0F0}No se encontrarón resultados\n{F0F0F0}en la busqueda para {F50000}%s", text);
		ShowPlayerDialogEx(playerid,21,DIALOG_STYLE_MSGBOX,"{00A5FF}Agenda - Información", AgendaDialog, "Aceptar", "Volver");
	}
}
public ShowSendSMSAgenda(playerid, agendaid)
{
	PlayersDataOnline[playerid][SaveAfterAgenda][0] = agendaid;
	new TempFormat1[256];
	new TempFormat[35];

	format(TempFormat1, sizeof(TempFormat1),"{F0F0F0}Ingrese el contenido del SMS que desea enviarle a {F5FF00}%s {00F50A}(%i)",
	AgendaData[playerid][agendaid][NameC],
	AgendaData[playerid][agendaid][NumberC]);
	format(TempFormat, sizeof(TempFormat), "{00A5FF}Agenda - %s",
	AgendaData[playerid][agendaid][NameC]);

	ShowPlayerDialogEx(playerid,128,DIALOG_STYLE_INPUT, TempFormat, TempFormat1, "Enviar", "Cancelar");
}
public GetDataPlayersInt(playerid, data[], &savedata, &lastpos, &afterpos)
{
	afterpos = strfind(data, "³", false, lastpos);
	strmid(PlayersDataOnline[playerid][NameProject], data, lastpos, afterpos, MAX_PLAYER_NAME);
	savedata = strval(PlayersDataOnline[playerid][NameProject]);
	lastpos = afterpos + 1;
}
public GetDataPlayersFloat(playerid, data[], &Float:savedata, &lastpos, &afterpos)
{
	afterpos = strfind(data, "³", false, lastpos);
	strmid(PlayersDataOnline[playerid][NameProject], data, lastpos, afterpos, MAX_PLAYER_NAME);
	savedata = floatstr(PlayersDataOnline[playerid][NameProject]);
	lastpos = afterpos + 1;
}
public SetPlayerVirtualWorldEx(playerid, wolrdid)
{
	SetPlayerVirtualWorld(playerid, wolrdid);
	if ( PlayersDataOnline[playerid][State] == 3 )
	{
		AddPlayerDescription(playerid, true);
	}
}
public AddPlayerDescription(playerid, option)
{
	if ( PlayersData[playerid][EnableDescription])
	{
	    if ( option )
	    {
	        Delete3DTextLabelEx(playerid, PlayersDataOnline[playerid][Description3D]);
		}
		if ( PlayersData[playerid][DescriptionSelect] )
		{
			PlayersDataOnline[playerid][Description3D] = Create3DTextLabel(PlayersData[playerid][DescriptionString], DescriptionsPerColors[PlayersData[playerid][DescriptionColor]],0.0, 0.0, 0.0, NAME_TAG_DISTANCE_DEFAULT, GetPlayerVirtualWorld(playerid),1);
		}
		else
		{
			PlayersDataOnline[playerid][Description3D] = Create3DTextLabel(DescriptionsText[PlayersData[playerid][Description]], DescriptionsColors[PlayersData[playerid][Description]],0.0, 0.0, 0.0, NAME_TAG_DISTANCE_DEFAULT, GetPlayerVirtualWorld(playerid),1);
		}
		Attach3DTextLabelToPlayer(PlayersDataOnline[playerid][Description3D], playerid, 0.0, 0.0, 0.3);
		return true;
	}
    return false;
}
public RemovePlayerDescription(playerid, option, optiontwo)
{
	if ( PlayersData[playerid][EnableDescription] || optiontwo )
	{
		if ( option )
		{
	    	PlayersData[playerid][EnableDescription] = false;
    	}
        Delete3DTextLabelEx(playerid, PlayersDataOnline[playerid][Description3D]);
        return true;
	}
	else
	{
	    return false;
	}
}
public ShowMenuDescription(playerid)
{
	new DialogDescription[700];
	if ( PlayersData[playerid][EnableDescription] )
	{
	    format(DialogDescription, sizeof(DialogDescription), "{00A5FF}Estado Estática:  {F5FF00}%s\r\n{00A5FF}Estado Personalizado:  {F5FF00}%s\r\n{00A5FF}Usando: {00F50A}%s\r\n{00F50A}1- {E6E6E6}Modificar Estática\r\n{00F50A}2- {E6E6E6}Modificar Personalizada\r\n{00F50A}3- {E6E6E6}Estado: {00F50A}Habilitada",
	    DescriptionsText[PlayersData[playerid][Description]],
		PlayersData[playerid][DescriptionString],
     	DescriptionsPerType[PlayersData[playerid][DescriptionSelect]]	);
	}
	else
	{
	    format(DialogDescription, sizeof(DialogDescription), "{00A5FF}Estado Estática:  {F5FF00}%s\r\n{00A5FF}Estado Personalizado:  {F5FF00}%s\r\n{00A5FF}Usando: {00F50A}%s\r\n{00F50A}1- {E6E6E6}Modificar Estática\r\n{00F50A}2- {E6E6E6}Modificar Personalizada\r\n{00F50A}3- {E6E6E6}Estado: {F50000}Deshabilitada",
	    DescriptionsText[PlayersData[playerid][Description]],
		PlayersData[playerid][DescriptionString],
     	DescriptionsPerType[PlayersData[playerid][DescriptionSelect]]	);
	}
	ShowPlayerDialogEx(playerid,131,DIALOG_STYLE_LIST, "{00A5FF}Estado - Configuración",DialogDescription, "Seleccionar", "Salir");
}
public ShowMenuDescriptionChange(playerid)
{
	new DialogDescription[800];
	new TempConvert[30];
	for ( new i = 0;i < sizeof(DescriptionsText); i++)
	{
	    if ( i )
	    {
			format(TempConvert, sizeof(TempConvert), "\r\n{F5FF00}%s", DescriptionsText[i]);
		}
		else
		{
			format(TempConvert, sizeof(TempConvert), "{F5FF00}%s", DescriptionsText[i]);
		}
	    strcat(DialogDescription, TempConvert, sizeof(DialogDescription));
	}
	ShowPlayerDialogEx(playerid,132,DIALOG_STYLE_LIST, "{00A5FF}Estado - Modificar Estático",DialogDescription, "Cambiar", "Volver");
}
public ShowMenuDescriptionChangePer(playerid)
{
	new DialogDescription[200];
	format(DialogDescription, sizeof(DialogDescription),  "{00F50A}1- {E6E6E6}Color: {%s}%s\r\n{00F50A}2- {E6E6E6}Cambiar Texto", DescriptionsPerColorsHTML[PlayersData[playerid][DescriptionColor]], DescriptionsPerNames[PlayersData[playerid][DescriptionColor]]);
	ShowPlayerDialogEx(playerid,133,DIALOG_STYLE_LIST, "{00A5FF}Estado - Modificar Personalizado", DialogDescription, "Seleccionar", "Volver");
}
public ShowMenuDescriptionChangeColors(playerid)
{
	new DialogDescription[700];
	new TempConvert[50];
	for ( new i = 0;i < sizeof(DescriptionsPerNames); i++)
	{
	    if ( i )
	    {
			format(TempConvert, sizeof(TempConvert), "\r\n{%s}%s", DescriptionsPerColorsHTML[i], DescriptionsPerNames[i]);
		}
		else
		{
			format(TempConvert, sizeof(TempConvert), "{%s}%s", DescriptionsPerColorsHTML[i], DescriptionsPerNames[i]);
		}
	    strcat(DialogDescription, TempConvert, sizeof(DialogDescription));
	}
	ShowPlayerDialogEx(playerid,134,DIALOG_STYLE_LIST, "{00A5FF}Estado - Escoger Color",DialogDescription, "Escoger", "Volver");
}
public ShowMenuDescriptionChangeText(playerid)
{
	ShowPlayerDialogEx(playerid,135,DIALOG_STYLE_INPUT, "{00A5FF}Estado - Escoger Color","{E6E6E6}Introduzca un texto para su estado", "Cambiar", "Volver");
}
public Delete3DTextLabelEx(playerid, Text3D:id)
{
	if ( !Delete3DTextLabel(id) )
	{
		new MsgAviso[MAX_TEXT_CHAT];
	    format(MsgAviso, sizeof(MsgAviso), "%s Debuguer - Text3D Jugador bugueado %s[%i].", LOGO_STAFF, PlayersDataOnline[playerid][NameOnline], playerid);
	    MsgCheatsReportsToAdmins(MsgAviso);
	}
}
/* *************************************************************************************************** */
/* *************************************************************************************************** */
/* *************************************************************************************************** */
/* *************************************************************************************************** */
/* **** 						AUDIO PLUGIN HERE 												 ***** */
/* **** 						AUDIO PLUGIN HERE 												 ***** */
/* **** 						AUDIO PLUGIN HERE 												 ***** */
/* *************************************************************************************************** */
/* *************************************************************************************************** */
/* *************************************************************************************************** */
/* *************************************************************************************************** */
public Audio_OnClientConnect(playerid)
{
	PlayersDataOnline[playerid][IsAudio] = true;
	OnPlayerIsConnectedToAudio(playerid);
}
public Audio_OnClientDisconnect(playerid)
{
	PlayersDataOnline[playerid][IsAudio] = false;
}
public Audio_OnTransferFile(playerid, file[], current, total, result)
{

}
public Audio_OnPlay(playerid, handleid)
{

}
public Audio_OnStop(playerid, handleid)
{

}
public Audio_OnTrackChange(playerid, handleid, track[])
{

}
public Audio_OnRadioStationChange(playerid, station)
{

}
public Audio_OnGetPosition(playerid, handleid, seconds)
{

}
public OnPlayerEnterInHouse(playerid)
{
	PlayAudioPlayerHouse(playerid);
}
public OnPlayerExitHouse(playerid)
{
	StopAudioPlayer(playerid, PlayersDataOnline[playerid][HandleAHouse]);
}
public StopAudioPlayer(playerid, &handle)
{
    if ( PlayersData[playerid][WantAudio] )
    {
		if ( handle != -1 )
		{
			Audio_Stop(playerid, handle);
			handle = -1;
		}
	}
}
public PlayAudioPlayerHouse(playerid)
{
    if ( PlayersData[playerid][WantAudio] )
    {
		StopAudioPlayer(playerid, PlayersDataOnline[playerid][HandleAHouse]);
		if ( PlayersData[playerid][IsPlayerInHouse] && HouseData[PlayersData[playerid][IsPlayerInHouse]][StationID] != -1)
	    {
    		PlayersDataOnline[playerid][HandleAHouse] = Audio_PlayStreamed(playerid, Stations[HouseData[PlayersData[playerid][IsPlayerInHouse]][StationID]][1], false, false, false);
    		ChangeVolumenPlayer(playerid, PlayersDataOnline[playerid][HandleAHouse], HouseData[PlayersData[playerid][IsPlayerInHouse]][VolumenHouse]);
			PlayAllEcualizerForHouse(playerid);
   		}
  	}
}
public PlayAudioPlayerVehicle(playerid, vehicleid)
{
    if ( PlayersData[playerid][WantAudio] )
    {
		StopAudioPlayer(playerid, PlayersDataOnline[playerid][HandleAVehicle]);
		if ( DataCars[vehicleid][StationID] != -1 )
		{
    		PlayersDataOnline[playerid][HandleAVehicle] = Audio_PlayStreamed(playerid, Stations[DataCars[vehicleid][StationID]][1], false, false, false);
    		ChangeVolumenPlayer(playerid, PlayersDataOnline[playerid][HandleAVehicle], DataCars[vehicleid][VolumenVehicle]);
			PlayAllEcualizerForVehicle(playerid);
	  	}
  	}
}
public ChangeVolumenPlayer(playerid, handle, volumen)
{
    if ( PlayersData[playerid][WantAudio] )
    {
		if ( handle != -1 )
		{
    		Audio_SetVolume(playerid, handle, volumen);
   		}
  	}
}
public ShowStations(playerid, selected, option)
{
	new StationsDialog[2500];
	new TempConvert[150];
	new SelectedColor[10];
	
    strcat(StationsDialog, "{F50000}|| DETENER MÚSICA ||", sizeof(StationsDialog));
    strcat(StationsDialog, "\r\n{00A5FF}|| Ajustar Volumen ||", sizeof(StationsDialog));
    strcat(StationsDialog, "\r\n{00A5FF}|| Ecualizador ||", sizeof(StationsDialog));
    
	for (new i = 0; i < sizeof(Stations); i++)
	{
	    if ( selected == i )
	    {
	        SelectedColor = "{00A5FF}";
	    }
	    else
	    {
			SelectedColor = "{00F50A}";
		}

	    format(TempConvert, sizeof(TempConvert), "\r\n{E6E6E6}%i - %s%s", i + 1, SelectedColor, Stations[i][0]);
        strcat(StationsDialog, TempConvert, sizeof(StationsDialog));
	}
	if ( option )
	{
		ShowPlayerDialogEx(playerid,141,DIALOG_STYLE_LIST,"{00A5FF}Música - Casa", StationsDialog, "Seleccionar", "Salir");
	}
	else
	{
		ShowPlayerDialogEx(playerid,143,DIALOG_STYLE_LIST,"{00A5FF}Estéreo - Vehículo", StationsDialog, "Seleccionar", "Salir");
	}
}
public ShowEcualizadorHouse(playerid)
{
	new ListDialog[800];
	new TempConvert[50];
	new SelectedColor[10];
	for ( new i = 0; i < sizeof(EcualizadorTypes); i++)
	{
		if ( HouseData[PlayersData[playerid][IsPlayerInHouse]][EcualizadorHouse][i]  )
	    {
	        SelectedColor = "{00A5FF}";
	    }
	    else
	    {
			SelectedColor = "{00F50A}";
		}
	    if ( i != 0 )
	    {
			format(TempConvert, sizeof(TempConvert),
			"\r\n%s%s",SelectedColor, EcualizadorTypes[i]);
		}
		else
		{
			format(TempConvert, sizeof(TempConvert),
			"%s%s",SelectedColor, EcualizadorTypes[i]);
		}

		strcat(ListDialog, TempConvert, sizeof(ListDialog));
	}
	ShowPlayerDialogEx(playerid,145,DIALOG_STYLE_LIST, "{00A5FF}Ecualizador - Casa", ListDialog, "Seleccionar", "Atrás");
}
public ShowEcualizadorVehicle(playerid)
{
	new ListDialog[800];
	new TempConvert[50];
	new SelectedColor[10];
	for ( new i = 0; i < sizeof(EcualizadorTypes); i++)
	{
		if ( DataCars[PlayersDataOnline[playerid][InCarId]][EcualizadorVehicle][i] )
	    {
	        SelectedColor = "{00A5FF}";
	    }
	    else
	    {
			SelectedColor = "{00F50A}";
		}
	    if ( i != 0 )
	    {
			format(TempConvert, sizeof(TempConvert),
			"\r\n%s%s",SelectedColor, EcualizadorTypes[i]);
		}
		else
		{
			format(TempConvert, sizeof(TempConvert),
			"%s%s",SelectedColor, EcualizadorTypes[i]);
		}

		strcat(ListDialog, TempConvert, sizeof(ListDialog));
	}
	ShowPlayerDialogEx(playerid,146,DIALOG_STYLE_LIST, "{00A5FF}Ecualizador - Vehículo", ListDialog, "Seleccionar", "Atrás");
}
public ShowVolumenHouse(playerid)
{
	new ListDialog[800];
	new TempConvert[15];
	new SelectedColor[10];
	for ( new i = 1; i < 21; i++)
	{
	    if ( HouseData[PlayersData[playerid][IsPlayerInHouse]][VolumenHouse] == (i * 5) )
	    {
	        SelectedColor = "{00A5FF}";
	    }
	    else
	    {
			SelectedColor = "{00F50A}";
		}
	    if ( i != 1 )
	    {
			format(TempConvert, sizeof(TempConvert),
			"\r\n%s%i",SelectedColor, i * 5);
		}
		else
		{
			format(TempConvert, sizeof(TempConvert),
			"%s%i",SelectedColor, i * 5);
		}

		strcat(ListDialog, TempConvert, sizeof(ListDialog));
	}
	ShowPlayerDialogEx(playerid,142,DIALOG_STYLE_LIST, "{00A5FF}Ajustar Volumen - Casa", ListDialog, "Fijar", "Atrás");
}
public ShowVolumenVehicle(playerid)
{
	new ListDialog[800];
	new TempConvert[15];
	new SelectedColor[10];
	for ( new i = 1; i < 21; i++)
	{
	    if ( DataCars[PlayersDataOnline[playerid][InCarId]][VolumenVehicle] == (i * 5) )
	    {
	        SelectedColor = "{00A5FF}";
	    }
	    else
	    {
			SelectedColor = "{00F50A}";
		}
	    if ( i != 1 )
	    {
			format(TempConvert, sizeof(TempConvert),
			"\r\n%s%i",SelectedColor, i * 5);
		}
		else
		{
			format(TempConvert, sizeof(TempConvert),
			"%s%i",SelectedColor, i * 5);
		}

		strcat(ListDialog, TempConvert, sizeof(ListDialog));
	}
	ShowPlayerDialogEx(playerid,144,DIALOG_STYLE_LIST, "{00A5FF}Ajustar Volumen - Vehículo", ListDialog, "Fijar", "Atrás");
}
public OnPlayerIsConnectedToAudio(playerid)
{
	if ( PlayersDataOnline[playerid][IsAudio] && PlayersDataOnline[playerid][State])
	{
		Audio_StopRadio(playerid);
		PlayAudioPlayerHouse(playerid);
		if ( PlayersDataOnline[playerid][InCarId] )
		{
			PlayAudioPlayerVehicle(playerid, PlayersDataOnline[playerid][InCarId]);
		}
		else if ( PlayersDataOnline[playerid][InVehicle] )
		{
			PlayAudioPlayerVehicle(playerid, PlayersDataOnline[playerid][InVehicle]);
		}
	}
}
/* *************************************************************************************************** */
/* *************************************************************************************************** */
/* *************************************************************************************************** */
/* **** 						END AUDIO PLUGIN HERE 										     ***** */
/* **** 						END AUDIO PLUGIN HERE 										     ***** */
/* **** 						END AUDIO PLUGIN HERE 										     ***** */
/* *************************************************************************************************** */
/* *************************************************************************************************** */
/* *************************************************************************************************** */
public BuyPhone24_7(playerid)
{
	new Go = true;
	do
	{
	    new savehere = random(99999) + 1000;
        if ( CheckNumberAvalible(savehere) )
        {
			BuyPhoneNow(playerid, savehere);
			Go = false;
		}
	}
	while( Go );
	return true;
}
public CheckNumberAvalible(number)
{
    new query[200], Cache:cacheid, numberExist;
	format(query, 200, "SELECT `Phone` FROM `%s` WHERE `Phone`='%i';", DIR_USERS, number);
	cacheid = mysql_query(dataBase, query);
	cache_get_row_count(numberExist);
	cache_delete(cacheid);
	if ( !numberExist )
	{
		return true;
	}
	else return false;
}
public BuyPhoneNow(playerid, number)
{
    if ( CheckNumberAvalible(number) )
    {
		new query[200];
		PlayersData[playerid][Phone] = number;
        mysql_format(dataBase, query, 200, "UPDATE `%s` SET `Phone`='%i' WHERE `Nombre`='%e';", DIR_USERS, PlayersData[playerid][Phone], PlayersDataOnline[playerid][NameOnline]);
		mysql_query(dataBase, query, false);
		return true;
	}
	else
	{
	    return false;
	}
}
public AreAdminsOnline()
{
	for (new i = 0; i < MAX_PLAYERS; i++)
	{
		if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersData[i][Admin])
		{
			return true;
		}
	}
	return false;
}
public ShowDudasDialog(playerid)
{
	ShowPlayerDialogEx(playerid,136,DIALOG_STYLE_INPUT,"{00A5FF}Envíanos tu duda", "{F0F0F0}Recuerde que puede consultar cualquier comando en {00F50A}/Ayuda", "Enviar", "Salir");
}
public LoadRobosInfo()
{
	// Cotls
    RobosInfo[COLTS_R][FaccionIDR] 	= COLTS;
	RobosInfo[COLTS_R][TimerID] 	= -1;

	// AK
	MAX_ROBOS++;
	RobosInfo[AK_R][FaccionIDR] 		= AK;
	RobosInfo[AK_R][TimerID] 		= -1;
	
	// VELTRAN
	MAX_ROBOS++;
	RobosInfo[VELTRAN_R][FaccionIDR] 		= VELTRAN;
	RobosInfo[VELTRAN_R][TimerID] 		= -1;
	
	// HEORS
	MAX_ROBOS++;
	RobosInfo[HEORS_R][FaccionIDR] 		= HEORS;
	RobosInfo[HEORS_R][TimerID] 		= -1;
}
public CancelRobo(roboid)
{
	RobosInfo[roboid][BizzIDR] 	 = false;
	RobosInfo[roboid][RoboState] = false;
	RobosInfo[roboid][ConteoR]   = false;

	if ( RobosInfo[roboid][TimerID] != -1 )
	{
	    KillTimer(RobosInfo[roboid][TimerID]);
	}
	RobosInfo[roboid][TimerID] 		= -1;
}
public AddRobo(roboid, bizzid)
{
	RobosInfo[roboid][BizzIDR] = bizzid;
	RobosInfo[roboid][TimerID] = SetTimerEx("SendAvisoRobo", 180000, true, "i", roboid);
	SendMessageRobosFaccion(RobosInfo[roboid][FaccionIDR], "[Robo]: Ha comenzado el robo! A robar sin que nos pillen!");
	SendAvisoRobo(roboid);
}
public GetMaxPlayersByFaccion(faccionid)
{
	new countf;
	for (new i = 0; i < MAX_PLAYERS; i++)
	{
		if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersData[i][Faccion] == faccionid)
		{
		    countf++;
		}
	}
 	return countf;
}
public SendAvisoRobo(roboid)
{
	RobosInfo[roboid][ConteoR]++;
    if ( !RobosInfo[roboid][RoboState] )
    {
	    new SaveCityReal;
	    if ( RobosInfo[roboid][City] == LSPD)
	    {
	        SaveCityReal = false;
	    }
	    else
	    {
	        SaveCityReal = true;
		}
		for (new i = 0; i < MAX_PLAYERS; i++)
		{
			if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 )
			{
			    if ( IsMyBizz(i, RobosInfo[roboid][BizzIDR], false) || IsMyExtorsion(i, RobosInfo[roboid][BizzIDR]) )
			    {
				    new MsgRoboSMSReason[MAX_TEXT_CHAT];
			        format(MsgRoboSMSReason, sizeof(MsgRoboSMSReason), "[Alarma] Aviso %i - Esta sonando la alarma de el local \"%s\" localizado en %s", RobosInfo[roboid][ConteoR], NegociosType[NegociosData[RobosInfo[roboid][BizzIDR]][Type]][TypeName], Ciudades[SaveCityReal]);
			        AddSMS(i, 911, MsgRoboSMSReason);
			        format(MsgRoboSMSReason, sizeof(MsgRoboSMSReason), "[SMS] Recibido de SAPD 911: %s", MsgRoboSMSReason);
					Acciones(i, 8, "recibe un SMS en el móvil");
				    SendClientMessage(i, COLOR_INFO_MOVIL, MsgRoboSMSReason);
				}
				if ( PlayersData[i][Faccion] == RobosInfo[roboid][City] )
				{
					SendClientMessage(i, 0x0069FFFF, "[Avisos Alarmas SA]: La alarma de un local se ha activado! Se solicita personal urgente! Use (/Alarmas)");
				}
			}
		}
	}
	if ( RobosInfo[roboid][ConteoR] >= 5 )
	{
	    RobosInfo[roboid][RoboState] = true;
	    KillTimer(RobosInfo[roboid][TimerID]);
		SendMessageRobosFaccion(RobosInfo[roboid][FaccionIDR], "[Robo]: Ya pueden terminar el robo al negocio! Usen (/Terminar Robo)");
		RobosInfo[roboid][TimerID] = SetTimerEx("RobarConteo", 60000, false, "i", roboid);
	}
}
public RobarConteo(roboid)
{
	SendMessageRobosFaccion(RobosInfo[roboid][FaccionIDR], "[Robo]: Han tardado demasiado para robar el negocio! Para la próxima será...");
	CancelRobo(roboid);
}
public SendMessageRobosFaccion(faccionid, text[])
{
	for (new i = 0; i < MAX_PLAYERS; i++)
	{
		if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersData[i][Faccion] == faccionid)
		{
		    SendClientMessage(i, 0x006500FF, text); // 0x00FF0A50
		}
	}
}
public IsBizzOnRobo(playerid, bizzid)
{
	for ( new i = 0; i <=  MAX_ROBOS; i++ )
	{
		if ( RobosInfo[i][BizzIDR] == bizzid )
		{
			SendInfoMessage(playerid, 0, "1499", "No puedes utilizar este comando mientras tu negocio o extorsión esta en medio de un robo!");
    		return true;
   		}
	}
	return false;
}
public ShowAlarmas(playerid)
{
	new AlarmasDialog[700];
	new TempConvert[100];
	new ConteoAlarmas = -1;
    new SaveCityReal;
	for (new i = 0; i <= MAX_ROBOS; i++)
	{
	    if ( RobosInfo[i][BizzIDR] )
	    {
		    if ( RobosInfo[i][City] == LSPD )
		    {
		        SaveCityReal = false;
		    }
		    else
		    {
		        SaveCityReal = true;
			}
			if ( ConteoAlarmas != -1 )
			{
		    	format(TempConvert, sizeof(TempConvert), "\r\n{00F50A}Negocio: %s  - {00A5FF}Ciudad: %s",
		    	NegociosType[NegociosData[RobosInfo[i][BizzIDR]][Type]][TypeName],
				Ciudades[SaveCityReal]);
	    	}
			else
			{
		    	format(TempConvert, sizeof(TempConvert), "{00F50A}Negocio: %s  - {00A5FF}Ciudad: %s",
		    	NegociosType[NegociosData[RobosInfo[i][BizzIDR]][Type]][TypeName],
				Ciudades[SaveCityReal]);
			}
	        strcat(AlarmasDialog, TempConvert, sizeof(AlarmasDialog));
	        ConteoAlarmas++;
	        PlayersDataOnline[playerid][SaveAfterAgenda][ConteoAlarmas] = i;
        }
	}
	if (ConteoAlarmas != -1)
	{
		ShowPlayerDialogEx(playerid,137,DIALOG_STYLE_LIST,"{00A5FF}Alarmas SA - Alarmas activadas", AlarmasDialog, "Ver", "Salir");
	}
	else
	{
		ShowPlayerDialogEx(playerid,9999,DIALOG_STYLE_MSGBOX,"{00A5FF}Alarmas - Información", "{F0F0F0}No hay alarmas activadas en la ciudad.", "Aceptar", "");
	}
}
public IsGarageToHouse(playerid, pickupid)
{
	for ( new i = 0; i <= MAX_GARAGE_TYPE; i++ )
	{
		if ( TypeGarage[i][PickupIdh] == pickupid )
		{
		    return true;
		}
	}
	return false;
}
public IsDoorInsideBizz(pickupid)
{
	for ( new i = 0; i <= MAX_BIZZ_TYPE; i++ )
	{
		if ( NegociosType[i][PickupId] == pickupid )
		{
			return true;
		}
	}
	return false;
}
public IsValidSeatTaxi(seatid)
{
	if ( seatid >= 1 && seatid <= 3 )
	{
	    return true;
	}
	else
	{
	    return false;
	}
}
public CheckValidPlayerToTaxi(playerid, taxiid)
{
	if ( GetPlayerVehicleID(playerid) == TaxisTaximetro[taxiid][TaxiVehicleid] &&
		 PlayersDataOnline[playerid][IsTaxi] == -1 &&
		 IsValidSeatTaxi(GetPlayerVehicleSeat(playerid)) )
	{
	    return true;
    }
    else
    {
        return false;
	}
}
public SetPlayerTaxi(playerid, taxiid, seat)
{
    seat--;
	PlayersDataOnline[playerid][IsTaxi] = taxiid;
    PlayersDataOnline[playerid][SeatTaxi] = seat;
	TextDrawShowForPlayer(playerid, TaxisTaximetro[taxiid][Seats][seat]);
    TaxisTaximetro[taxiid][TaxiTime][seat] = gettime();
}
public UpdateTaximetroSeat(playerid)
{
//      \x98 = A Con tílde
// 		\x9e = E con tílde
//      \xa2 = I Con tílde
//		\xa6 = O Con tílde

	new TimeNow = gettime();
	new TaxiStringUpdate[100];
	new MinutesT;
	new SecondsT;
	if ( (TimeNow - TaxisTaximetro[PlayersDataOnline[playerid][IsTaxi]][TaxiTime][PlayersDataOnline[playerid][SeatTaxi]]) <= 59 )
	{
        SecondsT = (TimeNow - TaxisTaximetro[PlayersDataOnline[playerid][IsTaxi]][TaxiTime][PlayersDataOnline[playerid][SeatTaxi]]);
	}
	else
	{
        SecondsT = (TimeNow - TaxisTaximetro[PlayersDataOnline[playerid][IsTaxi]][TaxiTime][PlayersDataOnline[playerid][SeatTaxi]]) % 60;
	}
	if ( (TimeNow - TaxisTaximetro[PlayersDataOnline[playerid][IsTaxi]][TaxiTime][PlayersDataOnline[playerid][SeatTaxi]]) <= 3600 )
	{
        MinutesT = (TimeNow - TaxisTaximetro[PlayersDataOnline[playerid][IsTaxi]][TaxiTime][PlayersDataOnline[playerid][SeatTaxi]]) / 60;
	}
	else
	{
        MinutesT = ((TimeNow - TaxisTaximetro[PlayersDataOnline[playerid][IsTaxi]][TaxiTime][PlayersDataOnline[playerid][SeatTaxi]]) % 3600) / 60;
	}
	format(TaxiStringUpdate, sizeof(TaxiStringUpdate), "  ~R~.::Tax\xa2~R~metro::.~N~~N~~B~ Tiempo:~W~%2i:%2i:%2i~N~~B~    Pagar: ~G~$%4i",

	(TimeNow - TaxisTaximetro[PlayersDataOnline[playerid][IsTaxi]][TaxiTime][PlayersDataOnline[playerid][SeatTaxi]]) / 3600,
	MinutesT,
	SecondsT,
	CalcularTaxiMoney(playerid)
	);
	TextDrawSetString(TaxisTaximetro[PlayersDataOnline[playerid][IsTaxi]][Seats][PlayersDataOnline[playerid][SeatTaxi]], TaxiStringUpdate);

	if ( PlayersData[playerid][Dinero] <= CalcularTaxiMoney(playerid) )
	{
	    PayTaxi(playerid, true);
	    RemovePlayerFromVehicle(playerid);
		SendClientMessage(playerid, COLOR_MESSAGES[0], " No tienes dinero para pagar el taxí!");
	}
	else if ( !TaxisTaximetro[PlayersDataOnline[playerid][IsTaxi]][TaxiOn] )
	{
		PayTaxi(playerid, true);
	}
}
public PayTaxi(playerid, option)
{
	if ( PlayersDataOnline[playerid][IsTaxi] != -1 )
	{
	    new MoneyTaxi = CalcularTaxiMoney(playerid);
	    new NoPay;
	    GivePlayerMoneyEx(playerid, -MoneyTaxi);
	    for ( new i = 0; i < MAX_PLAYERS; i++ )
	    {
			if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 &&
				 IsPlayerInAnyVehicle(i) &&
				 GetPlayerVehicleID(i) == TaxisTaximetro[PlayersDataOnline[playerid][IsTaxi]][TaxiVehicleid] &&
				 GetPlayerVehicleSeat(playerid) == 0 &&
				 PlayersData[playerid][Faccion] == TAXI )
			{
				GivePlayerMoneyEx(i, MoneyTaxi);
				NoPay = true;
				break;
			}
	    }
	    if ( !NoPay )
	    {
	    	FaccionData[TAXI][Deposito] += MoneyTaxi;
    	}
		if ( option )
		{
			TextDrawHideForPlayer(playerid, TaxisTaximetro[PlayersDataOnline[playerid][IsTaxi]][Seats][PlayersDataOnline[playerid][SeatTaxi]]);
			if ( MoneyTaxi > 0 )
			{
				new MsgPayTaxi[MAX_TEXT_CHAT];
				format(MsgPayTaxi, sizeof(MsgPayTaxi), "Has pagado $%i por el servicio del taxí.", MoneyTaxi);
				SendInfoMessage(playerid, 3, "0", MsgPayTaxi);
			}
		}
	    PlayersDataOnline[playerid][IsTaxi] = -1;
	}
}
public CalcularTaxiMoney(playerid)
{
	return ((gettime() - TaxisTaximetro[PlayersDataOnline[playerid][IsTaxi]][TaxiTime][PlayersDataOnline[playerid][SeatTaxi]]) / SECONDS_TAXI);
}
public SetVehicleHealthEx(vehicleid, Float:health)
{
    DataCars[vehicleid][VehicleAnticheat] = gettime() + 5;
    SetVehicleHealth(vehicleid, health);
}
public StopMusicOnHouse(houseid)
{
	for ( new i = 0; i < MAX_PLAYERS; i++)
	{
		if ( IsPlayerConnected(i) && PlayersData[i][IsPlayerInHouse] == houseid )
		{
			StopAudioPlayer(i, PlayersDataOnline[i][HandleAHouse]);
		}
	}
}
public StopMusicOnVehicle(vehicleid)
{
	for ( new i = 0; i < MAX_PLAYERS; i++)
	{
		if ( IsPlayerConnected(i) && (PlayersDataOnline[i][InVehicle] == vehicleid || PlayersDataOnline[i][InCarId] == vehicleid) )
		{
			StopAudioPlayer(i, PlayersDataOnline[i][HandleAVehicle]);
		}
	}
}
public ChangeMusicOnHouse(houseid)
{
	for ( new i = 0; i < MAX_PLAYERS; i++)
	{
		if ( IsPlayerConnected(i) && PlayersData[i][IsPlayerInHouse] == houseid )
		{
			StopAudioPlayer(i, PlayersDataOnline[i][HandleAHouse]);
			PlayAudioPlayerHouse(i);
		}
	}
}
public ChangeHouseOrOther(playerid, newhouse)
{
	if ( PlayersData[playerid][IsPlayerInHouse] )
	{
        StopAudioPlayer(playerid, PlayersDataOnline[playerid][HandleAHouse]);
	}
	PlayersData[playerid][IsPlayerInHouse] = newhouse;
	if ( newhouse )
	{
		PlayAudioPlayerHouse(playerid);
	}
}
public ChangeVolumenOnHouse(houseid)
{
	for ( new i = 0; i < MAX_PLAYERS; i++)
	{
		if ( IsPlayerConnected(i) && PlayersData[i][IsPlayerInHouse] == houseid )
		{
			ChangeVolumenPlayer(i, PlayersDataOnline[i][HandleAHouse], HouseData[houseid][VolumenHouse]);
		}
	}
}
public ChangeMusicOnVehicle(vehicleid)
{
	for ( new i = 0; i < MAX_PLAYERS; i++)
	{
		if ( IsPlayerConnected(i) && (PlayersDataOnline[i][InVehicle] == vehicleid || PlayersDataOnline[i][InCarId] == vehicleid) )
		{
			StopAudioPlayer(i, PlayersDataOnline[i][HandleAVehicle]);
			PlayAudioPlayerVehicle(i, vehicleid);
		}
	}
}
public ChangeVolumenOnVehicle(vehicleid)
{
	for ( new i = 0; i < MAX_PLAYERS; i++)
	{
		if ( IsPlayerConnected(i) && (PlayersDataOnline[i][InVehicle] == vehicleid || PlayersDataOnline[i][InCarId] == vehicleid) )
		{
			ChangeVolumenPlayer(i, PlayersDataOnline[i][HandleAVehicle], DataCars[vehicleid][VolumenVehicle]);
		}
	}
}
public PlayAllEcualizerForHouse(playerid)
{
	for ( new i = 0; i < sizeof(EcualizadorTypes); i++)
	{
		if ( HouseData[PlayersData[playerid][IsPlayerInHouse]][EcualizadorHouse][i]  )
		{
			Audio_SetFX(playerid, PlayersDataOnline[playerid][HandleAHouse], i);
		}
	}
}
public PlayAllEcualizerForVehicle(playerid)
{
	for ( new i = 0; i < sizeof(EcualizadorTypes); i++)
	{
		if ( DataCars[PlayersDataOnline[playerid][InCarId]][EcualizadorVehicle][i] )
		{
			Audio_SetFX(playerid, PlayersDataOnline[playerid][HandleAVehicle], i);
		}
	}
}
public Audio_RemoveAddFXForHouse(houseid, type, addOrRemove)
{
	for ( new i = 0; i < MAX_PLAYERS; i++)
	{
		if ( IsPlayerConnected(i) && PlayersData[i][IsPlayerInHouse] == houseid )
		{
		    if ( addOrRemove )
		    {
				Audio_SetFX(i, PlayersDataOnline[i][HandleAHouse], type);
			}
			else
			{
				Audio_RemoveFX(i, PlayersDataOnline[i][HandleAHouse], type);
			}
		}
	}
}
public Audio_RemoveAddFXForVehicle(vehicleid, type, addOrRemove)
{
	for ( new i = 0; i < MAX_PLAYERS; i++)
	{
		if ( IsPlayerConnected(i) && (PlayersDataOnline[i][InVehicle] == vehicleid || PlayersDataOnline[i][InCarId] == vehicleid) )
		{
		    if ( addOrRemove )
		    {
				Audio_SetFX(i, PlayersDataOnline[i][HandleAVehicle], type);
			}
			else
			{
				Audio_RemoveFX(i, PlayersDataOnline[i][HandleAVehicle], type);
			}
		}
	}
}
public ShowLockTextDraws(vehicleid, last)
{
	for (new i = 0; i < MAX_PLAYERS; i++)
	{
		if ( IsPlayerConnected(i) && PlayersDataOnline[i][State] == 3 && PlayersDataOnline[i][InCarId] == vehicleid)
		{
		    if ( last != -1 )
		    {
		        if ( !last )
		        {
					TextDrawHideForPlayer(i, VelocimetroFijos[7]);
				}
				else
				{
					TextDrawHideForPlayer(i, VelocimetroFijos[8]);
				}
		    }
		    if ( !DataCars[vehicleid][Lock] )
		    {
			    TextDrawShowForPlayer(i, VelocimetroFijos[7]);
		    }
		    else
		    {
			    TextDrawShowForPlayer(i, VelocimetroFijos[8]);
		    }
		    return true;
		}
	}
	return false;
}
public RemoveBuildingForPlayerEx(playerid)
{
	RemoveBuildingForPlayer(playerid, 11372, -2076.4375, -107.9297, 36.9688, 0.25); // SML Puerta
	RemoveBuildingForPlayer(playerid, 11014, -2076.4375, -107.9297, 36.9688, 0.25); // SML Puerta
	RemoveBuildingForPlayer(playerid, 1211, 555.1563, -1251.9297, 16.6406, 0.25);   // Tubo de agua Grotti
	RemoveBuildingForPlayer(playerid, 10252, -2175.7578, 661.9219, 50.1016, 0.25);  // Puerta YKZ SF
	RemoveBuildingForPlayer(playerid, 3036, -2179.354980,661.236267,50.137489, 0.25);  // Puerta YKZ SF
	RemoveBuildingForPlayer(playerid, 5024, 1748.8438, -1883.0313, 14.1875, 0.25);    // Planta parqueo de taxístas
	RemoveBuildingForPlayer(playerid, 1231, 1479.3828, -1682.3125, 15.6328, 0.25);  // Poste Ayuntamiento estatua
	
	// Contrucción SF
	RemoveBuildingForPlayer(playerid, 3865, -2063.2422, 258.7500, 35.7422, 0.25);
	RemoveBuildingForPlayer(playerid, 3869, -2123.2891, 269.5313, 41.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 3869, -2126.2109, 231.9766, 41.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 3869, -2116.6797, 131.0078, 42.1484, 0.25);
	RemoveBuildingForPlayer(playerid, 3865, -2063.0156, 247.9453, 35.7422, 0.25);
	RemoveBuildingForPlayer(playerid, 3865, -2057.7500, 249.9531, 35.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 3865, -2057.7031, 229.8047, 35.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 3865, -2059.5313, 256.5234, 37.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 3888, -2128.1797, 171.4609, 42.4297, 0.25);
	RemoveBuildingForPlayer(playerid, 3888, -2066.3594, 301.9141, 42.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 3887, -2066.3594, 301.9141, 42.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 3887, -2128.1797, 171.4609, 42.4297, 0.25);
	RemoveBuildingForPlayer(playerid, 3866, -2116.6797, 131.0078, 42.1484, 0.25);
	RemoveBuildingForPlayer(playerid, 3864, -2082.5391, 153.5469, 40.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 3872, -2079.8203, 159.6719, 40.8906, 0.25);
	RemoveBuildingForPlayer(playerid, 3864, -2111.8828, 172.4688, 40.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 3872, -2116.7500, 177.0781, 40.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 3872, -2064.2109, 210.1406, 41.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 3872, -2107.0313, 226.0391, 40.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 10984, -2126.1563, 238.6172, 35.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 3864, -2102.2109, 230.7031, 40.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 3866, -2126.2109, 231.9766, 41.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 10986, -2130.0547, 275.5625, 35.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 3866, -2123.2891, 269.5313, 41.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 3864, -2113.3125, 268.5078, 40.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 3872, -2118.1328, 263.8438, 41.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 10985, -2099.2734, 292.9141, 35.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 3864, -2059.3438, 205.5313, 40.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 3872, -2048.4531, 265.0938, 41.6563, 0.25);
	RemoveBuildingForPlayer(playerid, 3864, -2041.7500, 265.1016, 40.8672, 0.25);
/*	RemoveBuildingForPlayer(playerid, 11143, -2064.5959472656, 270.14987182617, 74.902305603027, 300.0); // Grua 1395
	RemoveBuildingForPlayer(playerid, 1383, -2064.5959472656, 270.14987182617, 74.902305603027, 300.0); // Grua 1395
	RemoveBuildingForPlayer(playerid, 11143, -2064.5959472656, 270.14987182617, 74.902305603027, 300.0); // Grua 1395
	RemoveBuildingForPlayer(playerid, 1388, -2064.5959472656, 270.14987182617, 74.902305603027, 300.0); // Grua 1394*/
	
	// Edificio para parking SF Wang Car
	RemoveBuildingForPlayer(playerid, 11024, -2076.2734, 359.3203, 44.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 3868, -2120.7656, 336.8672, 49.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 3868, -2103.3281, 336.8672, 49.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 3868, -2032.2891, 336.8672, 49.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 3868, -2022.0859, 347.1328, 49.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 3868, -2022.0859, 364.5781, 49.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 3868, -2032.2969, 380.7422, 49.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 3868, -2131.1797, 347.2813, 49.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 3868, -2131.1797, 364.7266, 49.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 3868, -2049.7344, 336.8672, 49.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 3867, -2131.1797, 347.2813, 49.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 3867, -2120.7656, 336.8672, 49.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 3867, -2103.3281, 336.8672, 49.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 3867, -2049.7344, 336.8672, 49.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 3867, -2032.2891, 336.8672, 49.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 3867, -2022.0859, 347.1328, 49.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 3867, -2131.1797, 364.7266, 49.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 10949, -2076.2734, 359.3203, 44.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 3867, -2032.2969, 380.7422, 49.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 3867, -2022.0859, 364.5781, 49.1563, 0.25);
	
	// Taller SF
	RemoveBuildingForPlayer(playerid, 1280, -2911.4219, 422.3516, 4.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, -2886.5859, 422.3516, 4.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, -2857.5859, 459.6719, 6.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, -2855.6641, 475.5234, 7.0703, 0.25);
	
	// Taller SFPD
	RemoveBuildingForPlayer(playerid, 1226, -1707.1094, 681.4453, 27.7422, 0.25);
	RemoveBuildingForPlayer(playerid, 10248, -1680.9922, 683.2344, 19.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 966, -1701.4297, 687.5938, 23.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 966, -1572.2031, 658.8359, 6.0781, 0.25);
	RemoveBuildingForPlayer(playerid, 1496, -1618.6016, 680.9141, 6.1719, 0.25);
	
	// Objetos parking ayundamiento
	RemoveBuildingForPlayer(playerid, 1266, 1805.0234, -1692.4453, 25.1484, 0.25);
	RemoveBuildingForPlayer(playerid, 1260, 1805.0234, -1692.4453, 25.1484, 0.25);

	// Objeto fuera de Contrabandistas
	RemoveBuildingForPlayer(playerid, 6056, 701.4375, -1417.1250, 17.6641, 0.25);

	// Arboles Grotti
	RemoveBuildingForPlayer(playerid, 730, 516.2109, -1326.3984, 14.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 507.5625, -1315.8594, 13.6250, 0.25);
	
	// Traficantes
	RemoveBuildingForPlayer(playerid, 3276, 1012.2891, -282.5391, 73.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1023.4219, -279.9063, 73.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1047.3125, -280.3359, 73.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1059.2266, -281.2656, 73.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1082.9922, -283.6797, 73.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1042.8203, -410.4141, 62.6563, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1041.9297, -422.1328, 58.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1040.8281, -434.0625, 53.7422, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1007.7969, -385.0078, 71.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1042.9219, -386.4531, 70.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1042.9688, -374.4766, 72.8906, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1007.6719, -361.6250, 73.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1007.6250, -349.8984, 73.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1007.5234, -326.4453, 73.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1007.4766, -314.7188, 73.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1007.4297, -302.9922, 73.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1007.3828, -291.2578, 73.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1083.6641, -368.5313, 73.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1071.9375, -368.5156, 73.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1060.2109, -368.4922, 73.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1107.1172, -368.5703, 73.8438, 0.25);

}
public IsPlayerNotFullObjects(playerid, msg)
{
	for (new i = 0; i < MAX_OBJECTS_PLAYERS; i++)
	{
	    if ( !PlayersData[playerid][Objetos][i] )
	    {
	        return i;
	    }
	}
	if ( msg )
	{
		SendInfoMessage(playerid, 0, "1575", "No puedes llevar más objetos encima!");
	}
	return -1;
}
public AddObjectHoldToPlayer(playerid, objectid)
{
	new SaveNotFull = IsPlayerNotFullObjects(playerid, false);
	if ( SaveNotFull != -1 )
	{
	    PlayersData[playerid][Objetos][SaveNotFull] = objectid;
		if ( AllowForItSkin(PlayersData[playerid][Skin], GetTypeObjectEx(objectid)) )
		{
	    	PlayersData[playerid][ObjetosVision][SaveNotFull]       = false;
    	}
    	else
    	{
			PlayersData[playerid][ObjetosVision][SaveNotFull]       = true;
    	}
		SetObjectHoldToPlayer(playerid, objectid, SaveNotFull);
		return true;
	}
	else
	{
	    return false;
	}
}
public RemoveObjectHoldToPlayer(playerid, objectid, index)
{
    RemovePlayerAttachedObject(playerid, index);
	if ( objectid != -1 )
	{
	    index = HaveObjectPlayer(playerid, objectid);
	    if ( index == -1 )
	    {
	        return false;
        }
	}
    PlayersData[playerid][Objetos][index] = false;
    return true;
}
public GetObjectByType(playerid, type)
{
	new TypeSaveTemp;
	for (new i = 0; i < MAX_OBJECTS_PLAYERS; i++)
	{
	    if ( PlayersData[playerid][Objetos][i] )
	    {
            TypeSaveTemp = GetTypeObject(PlayersData[playerid][Objetos][i]);
            if ( type == ObjectPlayersInt[TypeSaveTemp][2] )
            {
                return i;
            }
	    }
    }
    return -1;
}
public HaveObjectPlayer(playerid, objectid)
{
	for (new i = 0; i < MAX_OBJECTS_PLAYERS; i++)
	{
	    if ( PlayersData[playerid][Objetos][i] == objectid )
	    {
	        return i;
	    }
	}
	return -1;
}
public AllowForItSkin(skinid, type)
{
	if ( type == TYPE_PELO && !IsAllowItSkinForHair(skinid) ||
	     type == TYPE_BOINA && !IsAllowItSkinForBoina(skinid) ||
		 type == TYPE_GORRAS && !IsAllowItSkinForGorras(skinid) ||
		 type == TYPE_RELOJES && !IsAllowItSkinForRelojes(skinid) ||
		 type == TYPE_GAFAS && !IsAllowItSkinForGafas(skinid) ||
		 type == TYPE_CASCO && !IsAllowItSkinForCasco(skinid))
	{
	    return false;
	}
	else
	{
	    return true;
	}
}
public ReturnObjetsToPlayer(playerid)
{
	for (new i = 0; i < MAX_OBJECTS_PLAYERS; i++)
	{
	    if ( PlayersData[playerid][Objetos][i] )
	    {
	        if ( !AllowForItSkin(PlayersData[playerid][Skin], GetTypeObjectEx(PlayersData[playerid][Objetos][i])) )
	        {
				if ( !PlayersData[playerid][ObjetosVision][i] )
				{
					PlayersData[playerid][ObjetosVision][i] = true;
					RemovePlayerAttachedObject(playerid, i);
				}
	            continue;
           	}
           	SetObjectHoldToPlayer(playerid, PlayersData[playerid][Objetos][i], i);
	    }
    }
}
public IsNotOcupedObject(playerid, objectid)
{
	new SaveRowID = GetTypeObject(objectid);
	for (new i = 0; i < MAX_OBJECTS_PLAYERS; i++)
	{
	    if ( PlayersData[playerid][Objetos][i] && ObjectPlayersInt[GetTypeObject(PlayersData[playerid][Objetos][i])][2] == ObjectPlayersInt[SaveRowID][2] )
	    {
	        return i;
	    }
	}
	return -1;
}
public SetObjectHoldToPlayer(playerid, objectid, index)
{
	if ( !PlayersData[playerid][ObjetosVision][index] )
	{
		new Float:OffsetsPos[9];
		new SaveRowID = GetTypeObject(objectid);
		if ( SaveRowID != -1 )
		{
			switch (ObjectPlayersInt[SaveRowID][2])
			{
			    case TYPE_MALETIN:
			    {
			        for ( new i = 0; i < sizeof(OffsetsPos); i++ )
			        {
		            	OffsetsPos[i] = ObjectsPlayers[0][i];
	            	}
				}
			    case TYPE_GAFAS:
			    {
			        for ( new i = 0; i < sizeof(OffsetsPos) - 3; i++ )
			        {
		            	OffsetsPos[i] = SkinesGlasesPos[PlayersData[playerid][Skin]][i];
	            	}
	            	OffsetsPos[6] = 1;
	            	OffsetsPos[7] = 1;
	            	OffsetsPos[8] = 1;
			    }
			    case TYPE_PELO:
			    {
			        for ( new i = 0; i < sizeof(OffsetsPos) - 3; i++ )
			        {
		            	OffsetsPos[i] = SkinesHairPos[PlayersData[playerid][Skin]][i];
	            	}
	            	OffsetsPos[6] = SkinesHairPos[PlayersData[playerid][Skin]][8];
	            	OffsetsPos[7] = SkinesHairPos[PlayersData[playerid][Skin]][8];
	            	OffsetsPos[8] = SkinesHairPos[PlayersData[playerid][Skin]][8];
		        }
			    case TYPE_BOINA:
			    {
			        for ( new i = 0; i < sizeof(OffsetsPos); i++ )
			        {
		            	OffsetsPos[i] = SkinesBoina[PlayersData[playerid][Skin]][i];
	            	}
		        }
			    case TYPE_GORRAS:
			    {
			        for ( new i = 0; i < sizeof(OffsetsPos); i++ )
			        {
		            	OffsetsPos[i] = SkinesGorras[PlayersData[playerid][Skin]][i];
	            	}
		        }
			    case TYPE_RELOJES:
			    {
			        for ( new i = 0; i < sizeof(OffsetsPos); i++ )
			        {
		            	OffsetsPos[i] = SkinesRelojes[PlayersData[playerid][Skin]][i];
	            	}
		        }
			    case TYPE_CASCO:
			    {
			        for ( new i = 0; i < sizeof(OffsetsPos); i++ )
			        {
		            	OffsetsPos[i] = SkinesCascos[PlayersData[playerid][Skin]][i];
	            	}
		        }
			    case TYPE_TASER:
			    {
			        for ( new i = 0; i < sizeof(OffsetsPos); i++ )
			        {
		            	OffsetsPos[i] = ObjectsPlayers[1][i];
	            	}
				}
			}
			SetPlayerAttachedObject(playerid, index, objectid, ObjectPlayersInt[SaveRowID][1], OffsetsPos[0],OffsetsPos[1],OffsetsPos[2],OffsetsPos[3],OffsetsPos[4],OffsetsPos[5],OffsetsPos[6],OffsetsPos[7],OffsetsPos[8]);
			return true;
		}
	}
	return false;
}
public GetTypeObject(objectid)
{
	for (new i = 0; i < sizeof(ObjectPlayersInt); i++)
	{
		if ( ObjectPlayersInt[i][0] == objectid )
		{
		    return i;
		}
	}
	return -1;
}
public GetTypeObjectEx(objectid)
{
	for (new i = 0; i < sizeof(ObjectPlayersInt); i++)
	{
		if ( ObjectPlayersInt[i][0] == objectid )
		{
		    return ObjectPlayersInt[i][2];
		}
	}
	return -1;
}
public SpawnPlayerEx(playerid)
{
    SpawnPlayer(playerid);
	ReturnObjetsToPlayer(playerid);
}
public SetPlayerSkinEx(playerid, skinid)
{
	SetPlayerSkin(playerid, skinid);
	ReturnObjetsToPlayer(playerid);
}
public IsAllowItSkinForCasco(skinid)
{
	if ( SkinesCascos[skinid][0] != 0.0 )
	{
	    return true;
	}
	else
	{
	    return false;
	}
}
public IsAllowItSkinForHair(skinid)
{
	if ( SkinesHairPos[skinid][8] != 0.0 )
	{
	    return true;
	}
	else
	{
	    return false;
	}
}
public IsAllowItSkinForBoina(skinid)
{
	if ( SkinesBoina[skinid][0] != 0.0 )
	{
	    return true;
	}
	else
	{
	    return false;
	}
}
public IsAllowItSkinForGorras(skinid)
{
	if ( SkinesGorras[skinid][0] != 0.0 )
	{
	    return true;
	}
	else
	{
	    return false;
	}
}
public IsAllowItSkinForRelojes(skinid)
{
	if ( SkinesRelojes[skinid][8] != 0.0 )
	{
	    return true;
	}
	else
	{
	    return false;
	}
}
public IsAllowItSkinForGafas(skinid)
{
	if ( SkinesGlasesPos[skinid][0] != 0.0 )
	{
	    return true;
	}
	else
	{
	    return false;
	}
}
public ShowObjectos(playerid)
{
	new ObjetosDialog[500];
	new TempConvert[50];
	new ConteoObjetos = -1;
	for (new i = 0; i < MAX_OBJECTS_PLAYERS; i++)
	{
	    if ( PlayersData[playerid][Objetos][i] )
	    {
			if ( ConteoObjetos != -1 )
			{
			    if ( PlayersData[playerid][ObjetosVision][i] )
			    {
			    	format(TempConvert, sizeof(TempConvert), "\r\n{00A5FF}%s", ObjectsNames[GetTypeObjectEx(PlayersData[playerid][Objetos][i])]);
		    	}
		    	else
		    	{
			    	format(TempConvert, sizeof(TempConvert), "\r\n{00F50A}%s", ObjectsNames[GetTypeObjectEx(PlayersData[playerid][Objetos][i])]);
		    	}
	    	}
			else
			{
			    if ( PlayersData[playerid][ObjetosVision][i] )
			    {
			    	format(TempConvert, sizeof(TempConvert), "{00A5FF}%s", ObjectsNames[GetTypeObjectEx(PlayersData[playerid][Objetos][i])]);
		    	}
		    	else
		    	{
			    	format(TempConvert, sizeof(TempConvert), "{00F50A}%s", ObjectsNames[GetTypeObjectEx(PlayersData[playerid][Objetos][i])]);
		    	}
			}
	        strcat(ObjetosDialog, TempConvert, sizeof(ObjetosDialog));
	        ConteoObjetos++;
	        PlayersDataOnline[playerid][SaveAfterAgenda][ConteoObjetos] = i;
        }
	}
	if (ConteoObjetos != -1)
	{
		ShowPlayerDialogEx(playerid,148,DIALOG_STYLE_LIST,"{00A5FF}Objetos - Control de los objetos", ObjetosDialog, "Opciones", "Salir");
	}
	else
	{
		ShowPlayerDialogEx(playerid,999,DIALOG_STYLE_MSGBOX,"{00A5FF}Objetos - Información", "{F0F0F0}No llevas objetos.", "Aceptar", "");
	}
}
public ShowObjetosOpciones(playerid)
{
	new ObjetTitleName[MAX_TEXT_CHAT];
	format(ObjetTitleName, sizeof(ObjetTitleName), "{00A5FF}Objetos - Opciones del {F5FF00}%s", ObjectsNames[GetTypeObjectEx(PlayersData[playerid][Objetos][PlayersDataOnline[playerid][SaveAfterAgenda][10]])]);
	if ( !PlayersData[playerid][ObjetosVision][PlayersDataOnline[playerid][SaveAfterAgenda][10]] )
	{
		ShowPlayerDialogEx(playerid,149,DIALOG_STYLE_LIST, ObjetTitleName, "{00A5FF}1 - {F0F0F0}Dar\r\n{00A5FF}2 - {F0F0F0}Dejar\r\n{00A5FF}3 - {F0F0F0}Tirar\r\n{00A5FF}4 - {F0F0F0}Guardar", "Seleccionar", "Volver");
	}
	else
	{
		ShowPlayerDialogEx(playerid,149,DIALOG_STYLE_LIST, ObjetTitleName, "{00A5FF}1 - {F0F0F0}Dar\r\n{00A5FF}2 - {F0F0F0}Dejar\r\n{00A5FF}3 - {F0F0F0}Tirar\r\n{00A5FF}4 - {F0F0F0}Sacar", "Seleccionar", "Volver");
	}
}
public ShowDejarObjeto(playerid)
{
	ShowPlayerDialogEx(playerid,151,DIALOG_STYLE_LIST, "{00A5FF}Objetos - Dejar", "{00A5FF}1 - {F0F0F0}Maletero\r\n{00A5FF}2 - {F0F0F0}Gaveta\r\n{00A5FF}", "Seleccionar", "Volver");
}
public ShowDejarObjetoInput(playerid)
{
	ShowPlayerDialogEx(playerid,152,DIALOG_STYLE_INPUT, "{00A5FF}Objetos - Dejar", "{F0F0F0}Ingrese la ID del slot que desea dejarlo.\nSi desea dejarlo en el primero disponible,\ndeje en blanco el campo de texto.", "Dejar", "Volver");
}
public ShowDarObjeto(playerid)
{
	new ObjetTitleName[MAX_TEXT_CHAT];
	format(ObjetTitleName, sizeof(ObjetTitleName), "{00A5FF}Objetos - Dar {F5FF00}%s", ObjectsNames[GetTypeObjectEx(PlayersData[playerid][Objetos][PlayersDataOnline[playerid][SaveAfterAgenda][10]])]);
	ShowPlayerDialogEx(playerid,150,DIALOG_STYLE_INPUT, ObjetTitleName, "{F0F0F0}Ingrese la ID del jugador al que desea dar éste objeto.", "Dar", "Volver");
}
public ShowAndHideSirena(playerid, vehicleid)
{
	if ( DataCars[vehicleid][AttachObjectID] )
	{
	    DestroyObject(DataCars[vehicleid][AttachObjectID]);
		DataCars[vehicleid][AttachObjectID] = false;
		SendInfoMessage(playerid, 2, "0", "Sirena desactivada!");
	}
	else
	{
	    DataCars[vehicleid][AttachObjectID] = CreateObject(18646, -1000, -1000, -1000, -1000, -1000, 500, 300.0);
		AttachObjectToVehicle(DataCars[vehicleid][AttachObjectID], vehicleid, 0.4, 0.6, 0.3, 0, 0, 0);
		SendInfoMessage(playerid, 2, "0", "Sirena encendida!");
	}
}
public HaveObjectByTypeAndShow(playerid, type)
{
	new responseHave = GetObjectByType(playerid, type);
	if ( responseHave != -1 && !PlayersData[playerid][ObjetosVision][responseHave] )
	{
	    return true;
	}
	return false;
}
public CheckFilesDDoS()
{
	if ( fexist(DIR_DDOS)  )
	{
	    new DataSaveRead[200];
		new File:CheckConnections = fopen(DIR_DDOS, io_read);
		new stringSearch[10];
		new PosFind;
		format(stringSearch, sizeof(stringSearch), ":%i", SERVER_PORT_);
		while ( fread(CheckConnections, DataSaveRead) )
		{
		    PosFind = strfind(DataSaveRead, stringSearch, false, 0);
      		if ( PosFind != -1  && PosFind <= 27 )
		    {
		        //printf("DataSaveRead: %s", DataSaveRead);
		        PosFind += strlen(stringSearch);
				new IpGet[20];
				new Port[6];
				new PortInt;
				new FormatDir[40];
		     	for( new i = PosFind; i <= strlen(DataSaveRead); i++ )
		     	{
		     	    if ( DataSaveRead[i] != ' ' )
		     	    {
						PosFind = strfind(DataSaveRead, ":", false, i);
						strmid(IpGet, DataSaveRead, i, PosFind);
						strmid(Port, DataSaveRead, PosFind + 1, strlen(DataSaveRead));
						PortInt = strval(Port);
						format(FormatDir, sizeof(FormatDir), "%s%s.ulp", DIR_CONNECTIONS, IpGet);
						if ( !fexist(FormatDir) && IsSpecificIPOnTheList(IpGet, PortInt) == -1 )
						{
							AddIpToList(IpGet, PortInt);
						}
						if ( GetMaxCountForIP(IpGet) >= 5 )
						{
						    if ( !IsIpBanned(IpGet) )
						    {
							    new MsgBanRcon[50];
							    format(MsgBanRcon, sizeof(MsgBanRcon), "banip %s", IpGet);
							    SendRconCommand(MsgBanRcon);
						    }
							ClearIPFromList(IpGet);

							/*new MsgBanDDoS[MAX_TEXT_CHAT];
						    format(MsgBanDDoS, sizeof(MsgBanDDoS), "%s Anti-DDoS - Desde la IP %s posible ataque DDoS, baneado... :)", LOGO_STAFF, IpGet);
							MsgCheatsReportsToAdmins(MsgBanDDoS);*/
						}
						break;
		     	    }
		     	}
		    }
		}
		fclose(CheckConnections);
	 	fremove(DIR_DDOS);
		for ( new i = 0; i < MAX_BUFFER_IP_ATTACK; i++ )
		{
		    if ( LastIPAttack[i][aPort] )
		    {
                ClearIPFromList( LastIPAttack[i][aIP] );
			}
		}
	}
	else
	{
	    printf("[ERROR]: No se encontró el archivo \"connections.dat\" del sistema AntDDoS");
	}
}
public AddIpToList(ip[], port)
{
	for ( new i = 0; i < MAX_BUFFER_IP_ATTACK; i++ )
	{
	    if ( !LastIPAttack[i][aPort] )
	    {
	        format(LastIPAttack[i][aIP], 20, "%s", ip);
	        LastIPAttack[i][aPort] = port;
			return i;
	    }
	}
	return -1;
}
public GetMaxCountForIP(ip[])
{
	new saveCount;
	for ( new i = 0; i < MAX_BUFFER_IP_ATTACK; i++ )
	{
	    if ( strfind(LastIPAttack[i][aIP], ip, false, 0) == 0 && strlen(ip) == strlen(LastIPAttack[i][aIP]) )
	    {
	        saveCount++;
	    }
	}
	return saveCount;
}
public IsSpecificIPOnTheList(ip[], port)
{
	for ( new i = 0; i < MAX_BUFFER_IP_ATTACK; i++ )
	{
	    if ( strfind(LastIPAttack[i][aIP], ip, false, 0) == 0 && strlen(ip) == strlen(LastIPAttack[i][aIP]) && LastIPAttack[i][aPort] == port )
	    {
			return i;
	    }
	}
	return -1;
}
public ClearIPFromList(ip[])
{
	for ( new i = 0; i < MAX_BUFFER_IP_ATTACK; i++ )
	{
	    if ( strfind(LastIPAttack[i][aIP], ip, false, 0) == 0 && strlen(ip) == strlen(LastIPAttack[i][aIP]) )
	    {
	        format(LastIPAttack[i][aIP], 20, "");
	        LastIPAttack[i][aPort] = 0;
	    }
	}
}
public IsIpBanned(ip[])
{
	new File:CheckConnections;
	if ( fexist(DIR_DDOS_BAN)  )
	{
	    new DataSaveRead[200];
		CheckConnections = fopen(DIR_DDOS_BAN, io_read);
		while ( fread(CheckConnections, DataSaveRead) )
		{
		    if ( strfind(DataSaveRead, ip, false, 0) == 0 )
		    {
			    fclose(CheckConnections);
		    	return true;
	    	}
		}
		fclose(CheckConnections);
	}
	CheckConnections = fopen(DIR_DDOS_BAN, io_append);
	new FormatBan[20];
	format(FormatBan, sizeof(FormatBan), "%s\r\n", ip);
	fwrite(CheckConnections, FormatBan);
	fclose(CheckConnections);
	return false;
}
public IsPlayerIpConnected(ip[])
{
	new IpBan[20];
	for (new i = 0; i < MAX_PLAYERS; i++)
	{
	    if ( IsPlayerConnected(i) )
		{
			GetPlayerIp(i, IpBan, sizeof(IpBan));
		}
		else
		{
		    continue;
		}

	    if ( strcmp(ip, IpBan, true) == 0 )
	    {
	        return true;
		}
	}
	return false;
}
public GetPlayerInteriorEx(playerid)
{
	return PlayersDataOnline[playerid][LastInterior];
}
public SetPlayerInteriorEx(playerid, newinterior)
{
	if (newinterior >= 0 && newinterior < MAX_INTERIORS)
	{
     	PlayersDataOnline[playerid][LastInterior] = newinterior;
    	SetPlayerInterior(playerid, newinterior);
   	}
   	else
   	{
	   	KickEx(playerid, 10);
   	}
}
public SaveIpUser(playerid, option)
{
	new DirBD[50], FormatConnections[80], IpGet[20], DateGet[3], TimeGet[3];
	GetPlayerIp(playerid, IpGet, sizeof(IpGet));
	format(DirBD, sizeof(DirBD), "%s%s.ulp", DIR_CONNECTIONS, IpGet);
	getdate(DateGet[0], DateGet[1], DateGet[2]);
	gettime(TimeGet[0], TimeGet[1], TimeGet[2]);
	if ( option )
	{
		format(FormatConnections, sizeof(FormatConnections), "%s [%i/%i/%i %i:%i:%i] Conectó\r\n", PlayersDataOnline[playerid][NameOnline], IpGet, DateGet[1], DateGet[2], DateGet[0], TimeGet[0], TimeGet[1], TimeGet[2]);
	}
	else
	{
		format(FormatConnections, sizeof(FormatConnections), "%s [%i/%i/%i %i:%i:%i] Desconectó\r\n", PlayersDataOnline[playerid][NameOnline], IpGet, DateGet[1], DateGet[2], DateGet[0], TimeGet[0], TimeGet[1], TimeGet[2]);
	}
	
	new File:SaveConnections = fopen(DirBD, io_append);
	fwrite(SaveConnections, FormatConnections);
	fclose(SaveConnections);
}
public LoadNotes(playerid)
{
 /*   CleanNotes(playerid);
    
	new DirBD[50];
	format(DirBD, sizeof(DirBD), "%s%s.ulp", DIR_NOTES, PlayersDataOnline[playerid][NameOnline]);
	if ( fexist(DirBD) )
	{
		new DataRead[300];
		new File:ReadDataF;
        ReadDataF = fopen(DirBD, io_read);
        while ( fread(ReadDataF, DataRead) )
        {
        }
		fclose(ReadDataF);
	}*/
}
public SaveNotes(playerid)
{
	new DirBD[50];
	format(DirBD, sizeof(DirBD), "%s%s.ulp", DIR_NOTES, PlayersDataOnline[playerid][NameOnline]);
	new File:SaveAgenda1 = fopen(DirBD, io_write);
	new TempConvert[300];
	for (new i = 0; i < MAX_NOTES_COUNT; i++)
	{
	    if ( i )
	    {
	    	format(TempConvert, sizeof(TempConvert), "\r\n%s³%i³%i³%i³%i³%i³%i³%i³%i³", Notes[playerid][i][Note], Notes[playerid][i][DateGeTime], Notes[playerid][i][Readed], Notes[playerid][i][DYear], Notes[playerid][i][DMonth], Notes[playerid][i][DDay], Notes[playerid][i][THour], Notes[playerid][i][TMinute], Notes[playerid][i][TSecond]);
    	}
    	else
    	{
	    	format(TempConvert, sizeof(TempConvert), "%s³%i³%i³%i³%i³%i³%i³%i³%i³", Notes[playerid][i][Note], Notes[playerid][i][DateGeTime], Notes[playerid][i][Readed], Notes[playerid][i][DYear], Notes[playerid][i][DMonth], Notes[playerid][i][DDay], Notes[playerid][i][THour], Notes[playerid][i][TMinute], Notes[playerid][i][TSecond]);
    	}
		fwrite(SaveAgenda1, TempConvert);
	}
	fclose(SaveAgenda1);
}
public CleanNotes(playerid)
{
	for (new i = 0; i < MAX_NOTES_COUNT; i++)
	{
	    RemoveNote(playerid, i);
    }
}
public AddNote(playerid, note[])
{
	for (new i = 0; i < MAX_NOTES_COUNT; i++)
	{
	    if ( !Notes[playerid][i][DateGeTime] )
	    {
			format(Notes[playerid][i][Note], MAX_TEXT_NOTE, "%s", note);
			Notes[playerid][i][DateGeTime] = gettime();
			Notes[playerid][i][Readed] = false;
			getdate(Notes[playerid][i][DYear], Notes[playerid][i][DMonth], Notes[playerid][i][DDay]);
			gettime(Notes[playerid][i][THour], Notes[playerid][i][TMinute], Notes[playerid][i][TSecond]);
			return true;
		}
	}
	return false;
}
public RemoveNote(playerid, noteid)
{
	format(Notes[playerid][noteid][Note], MAX_TEXT_NOTE, "Empty");
	Notes[playerid][noteid][DateGeTime] 		= 0;
}
